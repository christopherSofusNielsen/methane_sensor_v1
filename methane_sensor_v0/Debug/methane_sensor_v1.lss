
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003d3a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000612  00800100  00800100  00003d3a  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003d3a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007c8  00000000  00000000  00003d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c050  00000000  00000000  0000455d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002708  00000000  00000000  000105ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000044e6  00000000  00000000  00012cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000014fc  00000000  00000000  0001719c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d2b  00000000  00000000  00018698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004cc6  00000000  00000000  000193c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006d0  00000000  00000000  0001e089  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00003ba8  00003ba8  00003cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_adc_power_init 0000000e  00003a1c  00003a1c  00003b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_adc_power 00000014  00003924  00003924  00003a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_meth_power_init 0000000e  00003a2a  00003a2a  00003b7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power 00000014  00003938  00003938  00003a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_SCD30_power_init 0000000e  00003a38  00003a38  00003b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power 00000014  0000394c  0000394c  00003aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_BC_power_init 0000000e  00003a46  00003a46  00003b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power 00000014  00003960  00003960  00003ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_enter_power_down 00000042  00002ef6  00002ef6  0000304a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000014  00003974  00003974  00003ac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_active 00000008  00003b3c  00003b3c  00003c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_reset_deactive 00000008  00003b44  00003b44  00003c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_init 0000000e  00003a54  00003a54  00003ba8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SCD30_HAL_data_ready 0000000a  00003b14  00003b14  00003c68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TC0_HAL_init 00000020  000036bc  000036bc  00003810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.TC0_HAL_start 00000006  00003b6c  00003b6c  00003cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.TC0_HAL_stop 00000004  00003bac  00003bac  00003d00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_16 0000004e  00002988  00002988  00002adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss._cb      00000002  00800d9a  00800d9a  00003d3a  2**0
                  ALLOC
 33 .text.TC1_HAL_init 00000034  00003272  00003272  000033c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC1_HAL_start 0000000c  00003aa8  00003aa8  00003bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC1_HAL_stop 0000000c  00003ab4  00003ab4  00003c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_13 0000004e  000029d6  000029d6  00002b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800d9c  00800d9c  00003d3a  2**0
                  ALLOC
 38 .text.start_timer 00000008  00003b4c  00003b4c  00003ca0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.stop_timer 00000006  00003b72  00003b72  00003cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC2_HAL_init 00000020  000036dc  000036dc  00003830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TC2_HAL_subscribe 00000054  000028e4  000028e4  00002a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TC2_HAL_cancel 0000003a  000030f0  000030f0  00003244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_9 00000098  00001efa  00001efa  0000204e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .bss.cnt      00000001  00800db0  00800db0  00003d3a  2**0
                  ALLOC
 45 .bss.cbCounter 00000001  00800db1  00800db1  00003d3a  2**0
                  ALLOC
 46 .bss.callbacks 0000000a  00800d75  00800d75  00003d3a  2**0
                  ALLOC
 47 .text.start_and_write_data 0000004c  00002ac0  00002ac0  00002c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.read_and_stop 0000005a  00002832  00002832  00002986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_API_write_data 00000006  00003b78  00003b78  00003ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_API_write_data_stop 00000010  000039fc  000039fc  00003b50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_API_read_data_ack_end_nack_stop 00000024  000035ca  000035ca  0000371e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_API_repeat_read_data_stop 00000022  00003612  00003612  00003766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_init 00000012  000039d8  000039d8  00003b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_start 00000048  00002c36  00002c36  00002d8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_repeated_start 00000042  00002f38  00002f38  0000308c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_HAL_write_byte 00000020  000036fc  000036fc  00003850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_HAL_read_byte_ack 00000014  00003988  00003988  00003adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_read_byte_nack 00000014  0000399c  0000399c  00003af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_stop 00000010  00003a0c  00003a0c  00003b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.copy_buffer 0000002e  000034c8  000034c8  0000361c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_init 0000003c  00003078  00003078  000031cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_send_message 00000034  000032a6  000032a6  000033fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_send_string 0000006a  0000251a  0000251a  0000266e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart0_hal_message_ready 0000000e  00003a62  00003a62  00003bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart0_hal_clear_rx_buffer 0000000a  00003b1e  00003b1e  00003c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_read_message_as_str 00000028  0000357a  0000357a  000036ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_break 00000046  00002d56  00002d56  00002eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__vector_22 0000004a  00002b58  00002b58  00002cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__vector_20 00000074  000023c6  000023c6  0000251a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .bss.rx_buffer_has_message 00000001  00800db2  00800db2  00003d3a  2**0
                  ALLOC
 71 .bss.rx_buffer_data_len 00000001  00800db3  00800db3  00003d3a  2**0
                  ALLOC
 72 .bss.tx_buffer_cursor 00000001  00800db4  00800db4  00003d3a  2**0
                  ALLOC
 73 .bss.tx_buffer_data_len 00000001  00800db5  00800db5  00003d3a  2**0
                  ALLOC
 74 .text.uart1_hal_init 0000003c  000030b4  000030b4  00003208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_30 0000004a  00002ba2  00002ba2  00002cf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_28 00000070  0000243a  0000243a  0000258e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800db6  00800db6  00003d3a  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800db7  00800db7  00003d3a  2**0
                  ALLOC
 79 .bss.rx_buffer 00000064  00800cee  00800cee  00003d3a  2**0
                  ALLOC
 80 .bss.tx_buffer_cursor 00000001  00800db8  00800db8  00003d3a  2**0
                  ALLOC
 81 .bss.tx_buffer_data_len 00000001  00800db9  00800db9  00003d3a  2**0
                  ALLOC
 82 .bss.tx_buffer 0000012c  00800bc2  00800bc2  00003d3a  2**0
                  ALLOC
 83 .text.main    00000018  000038ae  000038ae  00003a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.vect_ADC_heat_timeout 00000018  000038c6  000038c6  00003a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.ADC_init_sampling 00000066  00002656  00002656  000027aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.ADC_deinit_sampling 00000014  000039b0  000039b0  00003b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.ADC_is_sampling_done 0000001c  000037b6  000037b6  0000390a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_meth_sens_power_on 00000020  0000371c  0000371c  00003870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.ADC_meth_sens_ready 00000012  000039ea  000039ea  00003b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.calc_ppm_methane 00000096  00001f92  00001f92  000020e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ADC_get_value 0000005c  000027d6  000027d6  0000292a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.vect_ADC_do_sample 00000046  00002d9c  00002d9c  00002ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.ADC_start_sampling 0000000c  00003ac0  00003ac0  00003c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .bss.cntPowerUpTime 00000001  00800dba  00800dba  00003d3a  2**0
                  ALLOC
 95 .bss._powerUpTime 00000001  00800dbb  00800dbb  00003d3a  2**0
                  ALLOC
 96 .bss.cntSamples 00000002  00800d9e  00800d9e  00003d3a  2**0
                  ALLOC
 97 .bss._data    00000002  00800da0  00800da0  00003d3a  2**0
                  ALLOC
 98 .bss._nSamples 00000002  00800da2  00800da2  00003d3a  2**0
                  ALLOC
 99 .data.PPM_factor 00000004  00800d8a  00003bd8  00003d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
100 .data.RRL     00000004  00800d8e  00003bdc  00003d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
101 .data.Vc      00000004  00800d92  00003be0  00003d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
102 .progmemx.data 00000038  00000297  00000297  000003eb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
103 .text.JN_join_network 00000296  00000780  00000780  000008d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.set_block_uplink 00000018  000038de  000038de  00003a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.block_uplink 0000001c  000037d2  000037d2  00003926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.LM_join_network 00000006  00003b7e  00003b7e  00003cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_send_uplink 0000002e  000034f6  000034f6  0000364a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LM_put_to_sleep 00000006  00003b84  00003b84  00003cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_wake_up 00000006  00003b8a  00003b8a  00003cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.LM_is_free 0000000a  00003b28  00003b28  00003c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.subPointer 00000001  00800dbc  00800dbc  00003d3a  2**0
                  ALLOC
112 .bss.busy     00000001  00800dbd  00800dbd  00003d3a  2**0
                  ALLOC
113 .bss.cnt      00000001  00800dbe  00800dbe  00003d3a  2**0
                  ALLOC
114 .progmemx.data 00000073  00000224  00000224  00000378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .text.tohex   00000084  000021d6  000021d6  0000232a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.attach_ending 0000001c  000037ee  000037ee  00003942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.cmd_with_ending 00000032  0000330e  0000330e  00003462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.sys_sleep_cmd 0000005e  000026bc  000026bc  00002810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.mac_set_parameter 0000004e  00002a24  00002a24  00002b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.mac_set_deveui 00000048  00002c7e  00002c7e  00002dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.mac_set_appeui 00000048  00002cc6  00002cc6  00002e1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.mac_set_appkey 00000048  00002d0e  00002d0e  00002e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.mac_set_ADR 00000030  00003408  00003408  0000355c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.mac_tx_confirmed 000000ac  00001c66  00001c66  00001dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.beginsWidth 0000004a  00002bec  00002bec  00002d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .progmemx.data 00000038  000002cf  000002cf  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
127 .text.decode_tx_response 00000068  000025ee  000025ee  00002742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.SU_send_uplink 000000fc  000013e4  000013e4  00001538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .progmemx.data 00000003  00000331  00000331  00000485  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
130 .text.SC_put_to_sleep 0000004c  00002b0c  00002b0c  00002c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.SC_wake_up 00000032  00003340  00003340  00003494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.LM_strbeginswith 00000044  00002e6e  00002e6e  00002fc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.util_setPendingStates 0000000c  00003acc  00003acc  00003c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.util_setMatchCase 0000000c  00003ad8  00003ad8  00003c2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.util_matchMessage 0000005e  0000271a  0000271a  0000286e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.util_transmit_msg 0000001c  0000380a  0000380a  0000395e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.util_read_msg 00000006  00003b90  00003b90  00003ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000020  00000307  00000307  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.util_parse_err 00000058  0000288c  0000288c  000029e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.get_group_id 00000006  00003b96  00003b96  00003cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.set_group_id 00000006  00003b9c  00003b9c  00003cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.MRPP_init_group 00000032  00003372  00003372  000034c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.MRPP_add_collection_data_INT16 00000070  000024aa  000024aa  000025fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.MRPP_is_body_package_ready 00000022  00003634  00003634  00003788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.MRPP_get_ready_body_package 00000096  00002028  00002028  0000217c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.MRPP_set_body_sent 0000000c  00003ae4  00003ae4  00003c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.MRPP_get_header_package 00000022  00003656  00003656  000037aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.MRPP_get_tail_package 00000022  00003678  00003678  000037cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.MRPP_all_body_package_sent 0000000a  00003b32  00003b32  00003c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .bss._groupId 00000001  00800dbf  00800dbf  00003d3a  2**0
                  ALLOC
151 .text.mrpp_data_add_int16 00000092  000020be  000020be  00002212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.mrpp_data_get 00000030  00003438  00003438  0000358c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.add_data_types 000000d8  0000179e  0000179e  000018f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.update_bodies 00000162  00000e00  00000e00  00000f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.mrpp_state_init 000001be  00000c42  00000c42  00000d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.mrpp_state_get_header 000000a2  00001db6  00001db6  00001f0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.mrpp_state_get_tail 000000a4  00001d12  00001d12  00001e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.mrpp_state_set_collection 00000086  00002150  00002150  000022a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.mrpp_state_is_body_ready 00000030  00003468  00003468  000035bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.mrpp_state_all_bodies_sent 0000002a  00003550  00003550  000036a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.mrpp_state_get_ready_body 0000011a  000011c4  000011c4  00001318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.mrpp_state_set_body_sent 00000020  0000373c  0000373c  00003890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.mrpp_state_get_collection_address 00000036  0000319a  0000319a  000032ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.cb_cnt_time 00000030  00003498  00003498  000035ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.PUMP_start 00000024  000035ee  000035ee  00003742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.PUMP_is_done 0000001c  00003826  00003826  0000397a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.eventPointer 00000001  00800dc0  00800dc0  00003d3a  2**0
                  ALLOC
168 .bss.cnt      00000002  00800da4  00800da4  00003d3a  2**0
                  ALLOC
169 .bss._seconds 00000002  00800da6  00800da6  00003d3a  2**0
                  ALLOC
170 .text.RTC_set_clock_out 00000050  00002938  00002938  00002a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.RTC_clear_wake_up_interrupt 00000034  000032da  000032da  0000342e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.RTC_get_current_time 00000140  00000f62  00000f62  000010b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .rodata       00000005  00800d85  00003bd3  00003d27  2**0
                  CONTENTS, ALLOC, LOAD, DATA
174 .text.RTC_set_wake_up_interrupt_minutes 000000c4  00001ae6  00001ae6  00001c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.RTC_datetime_to_ts 00000122  000010a2  000010a2  000011f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000336  00000336  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
177 .text.bytes_2_uint 0000001a  0000387a  0000387a  000039ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.init_measurement 00000038  0000312a  0000312a  0000327e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.validate_data 00000032  000033a4  000033a4  000034f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.read_value 000000a2  00001e58  00001e58  00001fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vect_SCD_do_sample 00000046  00002de2  00002de2  00002f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.SCD30_init_sampling 0000004e  00002a72  00002a72  00002bc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SCD30_deinit_sampling 00000014  000039c4  000039c4  00003b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.SCD30_start_sampling 0000000c  00003af0  00003af0  00003c44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SCD30_is_sampling_done 0000001c  00003842  00003842  00003996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .bss.cntSamples 00000002  00800da8  00800da8  00003d3a  2**0
                  ALLOC
187 .bss._data    00000002  00800daa  00800daa  00003d3a  2**0
                  ALLOC
188 .bss._nSamples 00000002  00800dac  00800dac  00003d3a  2**0
                  ALLOC
189 .progmemx.data.READ_DATA_CMD 00000002  00000334  00000334  00000488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
190 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000327  00000327  0000047b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
191 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  0000032c  0000032c  00000480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
192 .text.decode_stage_response 00000016  0000390e  0000390e  00003a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.decode_join_response 0000001c  0000385e  0000385e  000039b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.decode_header_tail_response 0000001e  0000375c  0000375c  000038b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 000000d2  00000152  00000152  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.join_lora 0000007a  0000225a  0000225a  000023ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.set_wakeup 00000008  00003b54  00003b54  00003ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.send_header 0000003e  00002ffc  00002ffc  00003150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.stage_0 000000ce  0000194a  0000194a  00001a9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.stage_1 000000f0  000014e0  000014e0  00001634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.stage_3 000000f0  000015d0  000015d0  00001724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.stage_2 00000106  000012de  000012de  00001432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.send_body 00000040  00002fbc  00002fbc  00003110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.decode_body_response 00000028  000035a2  000035a2  000036f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.send_tail 0000003e  0000303a  0000303a  0000318e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.send_msg 00000018  000038f6  000038f6  00003a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MAINPG_start 0000022c  00000a16  00000a16  00000b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .data.cols    00000023  00800d52  00003bb0  00003d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
209 .bss.dt       00000006  00800d7f  00800d7f  00003d3a  2**0
                  ALLOC
210 .bss.ts       00000004  00800d96  00800d96  00003d3a  2**0
                  ALLOC
211 .bss.meth_data 00000258  00800712  00800712  00003d3a  2**0
                  ALLOC
212 .bss.co2_data 00000258  0080096a  0080096a  00003d3a  2**0
                  ALLOC
213 .data.bodyIndex 00000002  00800dae  00003be4  00003d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
214 .bss.state_s3 00000001  00800dc1  00800dc1  00003d3a  2**0
                  ALLOC
215 .bss.state_s2 00000001  00800dc2  00800dc2  00003d3a  2**0
                  ALLOC
216 .bss.state_s1 00000001  00800dc3  00800dc3  00003d3a  2**0
                  ALLOC
217 .bss.state_s0 00000001  00800dc4  00800dc4  00003d3a  2**0
                  ALLOC
218 .text.calc_crc8 00000036  000031d0  000031d0  00003324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc.fplib 0000000e  00003a70  00003a70  00003bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc.fplib 000000ce  00001a18  00001a18  00001b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc.fplib 00000008  00003b5c  00003b5c  00003cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc.fplib 000000de  000016c0  000016c0  00001814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.avrlibc.fplib 0000005e  00002778  00002778  000028cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.avrlibc.fplib 0000007a  000022d4  000022d4  00002428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.avrlibc.fplib 0000000c  00003afc  00003afc  00003c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.avrlibc.fplib 00000006  00003ba2  00003ba2  00003cf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.avrlibc.fplib 0000000e  00003a7e  00003a7e  00003bd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.avrlibc.fplib 0000000e  00003a8c  00003a8c  00003be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.avrlibc.fplib 00000022  0000369a  0000369a  000037ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.avrlibc.fplib 00000044  00002eb2  00002eb2  00003006  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.avrlibc.fplib 0000000e  00003a9a  00003a9a  00003bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.avrlibc.fplib 00000008  00003b64  00003b64  00003cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.avrlibc.fplib 000000d4  00001876  00001876  000019ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc  0000000c  00003b08  00003b08  00003c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.mul 0000001e  0000377a  0000377a  000038ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc  0000001a  00003894  00003894  000039e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.avrlibc 00000032  000033d6  000033d6  0000352a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.avrlibc 00000042  00002f7a  00002f7a  000030ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.avrlibc 0000006a  00002584  00002584  000026d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.avrlibc 0000002c  00003524  00003524  00003678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.avrlibc 0000001e  00003798  00003798  000038ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.avrlibc 00000046  00002e28  00002e28  00002f7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.avrlibc 00000448  00000338  00000338  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.avrlibc 00000036  00003206  00003206  0000335a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.avrlibc 00000078  0000234e  0000234e  000024a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.avrlibc 000000bc  00001baa  00001baa  00001cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc.prologue 00000038  00003162  00003162  000032b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc.prologue 00000036  0000323c  0000323c  00003390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
   4:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
   8:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
   c:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__vector_3>
  10:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  14:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  18:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  1c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  20:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  24:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_9>
  28:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  2c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  30:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  34:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__vector_13>
  38:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  3c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  40:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__vector_16>
  44:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  48:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  4c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  50:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__vector_20>
  54:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  58:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__vector_22>
  5c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  60:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  64:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  68:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  6c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  70:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_28>
  74:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__bad_interrupt>
  78:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__vector_30>
  7c:	de 03       	fmulsu	r21, r22
  7e:	e7 04       	cpc	r14, r7
  80:	fd 03       	fmulsu	r23, r21
  82:	1a 04       	cpc	r1, r10
  84:	39 04       	cpc	r3, r9
  86:	58 04       	cpc	r5, r8
  88:	77 04       	cpc	r7, r7
  8a:	96 04       	cpc	r9, r6
  8c:	b3 04       	cpc	r11, r3
  8e:	d0 04       	cpc	r13, r0
  90:	e2 04       	cpc	r14, r2
  92:	f8 04       	cpc	r15, r8
  94:	fa 04       	cpc	r15, r10
  96:	0e 0a       	sbc	r0, r30
  98:	41 0a       	sbc	r4, r17
  9a:	2f 0a       	sbc	r2, r31
  9c:	5f 0a       	sbc	r5, r31
  9e:	5f 0a       	sbc	r5, r31
  a0:	4e 0a       	sbc	r4, r30
  a2:	4c 0a       	sbc	r4, r28
  a4:	61 0a       	sbc	r6, r17
  a6:	48 0a       	sbc	r4, r24
  a8:	4a 0a       	sbc	r4, r26
  aa:	2a 05       	cpc	r18, r10
  ac:	44 05       	cpc	r20, r4
  ae:	5a 05       	cpc	r21, r10
  b0:	6a 05       	cpc	r22, r10
  b2:	4f 05       	cpc	r20, r15
  b4:	71 05       	cpc	r23, r1
  b6:	88 05       	cpc	r24, r8
  b8:	7d 05       	cpc	r23, r13
  ba:	93 05       	cpc	r25, r3
  bc:	9f 05       	cpc	r25, r15
  be:	ac 05       	cpc	r26, r12
  c0:	b4 05       	cpc	r27, r4
  c2:	bc 05       	cpc	r27, r12
  c4:	c4 05       	cpc	r28, r4
  c6:	cc 05       	cpc	r28, r12
  c8:	e8 05       	cpc	r30, r8
  ca:	ef 05       	cpc	r30, r15
  cc:	fc 05       	cpc	r31, r12
  ce:	03 06       	cpc	r0, r19
  d0:	11 06       	cpc	r1, r17
  d2:	18 06       	cpc	r1, r24

000000d4 <.dinit>:
  d4:	01 00       	.word	0x0001	; ????
  d6:	0d 52       	subi	r16, 0x2D	; 45
  d8:	80 0d       	add	r24, r0
  da:	52 0d       	add	r21, r2
  dc:	75 00       	.word	0x0075	; ????
  de:	3b b0       	in	r3, 0x0b	; 11
  e0:	0d 75       	andi	r16, 0x5D	; 93
  e2:	0d 85       	ldd	r16, Y+13	; 0x0d
  e4:	80 0d       	add	r24, r0
  e6:	85 0d       	add	r24, r5
  e8:	96 00       	.word	0x0096	; ????
  ea:	3b d3       	rcall	.+1654   	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
  ec:	0d 96       	adiw	r24, 0x0d	; 13
  ee:	0d ae       	std	Y+61, r0	; 0x3d
  f0:	80 0d       	add	r24, r0
  f2:	ae 0d       	add	r26, r14
  f4:	b0 00       	.word	0x00b0	; ????
  f6:	3b e4       	ldi	r19, 0x4B	; 75
  f8:	0d b0       	in	r0, 0x0d	; 13
  fa:	0d c5       	rjmp	.+2586   	; 0xb16 <MAINPG_start+0x100>
  fc:	80 00       	.word	0x0080	; ????

000000fe <__ctors_end>:
  fe:	11 24       	eor	r1, r1
 100:	1f be       	out	0x3f, r1	; 63
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	d0 e1       	ldi	r29, 0x10	; 16
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
 10a:	e4 ed       	ldi	r30, 0xD4	; 212
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	17 c0       	rjmp	.+46     	; 0x140 <__do_clear_bss+0x8>
 112:	b5 91       	lpm	r27, Z+
 114:	a5 91       	lpm	r26, Z+
 116:	35 91       	lpm	r19, Z+
 118:	25 91       	lpm	r18, Z+
 11a:	05 91       	lpm	r16, Z+
 11c:	07 fd       	sbrc	r16, 7
 11e:	0c c0       	rjmp	.+24     	; 0x138 <__do_clear_bss>
 120:	95 91       	lpm	r25, Z+
 122:	85 91       	lpm	r24, Z+
 124:	ef 01       	movw	r28, r30
 126:	f9 2f       	mov	r31, r25
 128:	e8 2f       	mov	r30, r24
 12a:	05 90       	lpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a2 17       	cp	r26, r18
 130:	b3 07       	cpc	r27, r19
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x20>
 134:	fe 01       	movw	r30, r28
 136:	04 c0       	rjmp	.+8      	; 0x140 <__do_clear_bss+0x8>

00000138 <__do_clear_bss>:
 138:	1d 92       	st	X+, r1
 13a:	a2 17       	cp	r26, r18
 13c:	b3 07       	cpc	r27, r19
 13e:	e1 f7       	brne	.-8      	; 0x138 <__do_clear_bss>
 140:	ed 3f       	cpi	r30, 0xFD	; 253
 142:	f4 07       	cpc	r31, r20
 144:	31 f7       	brne	.-52     	; 0x112 <__do_copy_data+0x8>
 146:	0e 94 57 1c 	call	0x38ae	; 0x38ae <main>
 14a:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>

Disassembly of section .text:

00003ba8 <__bad_interrupt>:
    3ba8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003a1c <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3a1c:	81 b1       	in	r24, 0x01	; 1
    3a1e:	88 60       	ori	r24, 0x08	; 8
    3a20:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3a22:	82 b1       	in	r24, 0x02	; 2
    3a24:	87 7f       	andi	r24, 0xF7	; 247
    3a26:	82 b9       	out	0x02, r24	; 2
    3a28:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003924 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    3924:	88 23       	and	r24, r24
    3926:	21 f0       	breq	.+8      	; 0x3930 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    3928:	82 b1       	in	r24, 0x02	; 2
    392a:	88 60       	ori	r24, 0x08	; 8
    392c:	82 b9       	out	0x02, r24	; 2
    392e:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    3930:	82 b1       	in	r24, 0x02	; 2
    3932:	87 7f       	andi	r24, 0xF7	; 247
    3934:	82 b9       	out	0x02, r24	; 2
    3936:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003a2a <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3a2a:	81 b1       	in	r24, 0x01	; 1
    3a2c:	80 62       	ori	r24, 0x20	; 32
    3a2e:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3a30:	82 b1       	in	r24, 0x02	; 2
    3a32:	8f 7d       	andi	r24, 0xDF	; 223
    3a34:	82 b9       	out	0x02, r24	; 2
    3a36:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003938 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    3938:	88 23       	and	r24, r24
    393a:	21 f0       	breq	.+8      	; 0x3944 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    393c:	82 b1       	in	r24, 0x02	; 2
    393e:	80 62       	ori	r24, 0x20	; 32
    3940:	82 b9       	out	0x02, r24	; 2
    3942:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    3944:	82 b1       	in	r24, 0x02	; 2
    3946:	8f 7d       	andi	r24, 0xDF	; 223
    3948:	82 b9       	out	0x02, r24	; 2
    394a:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003a38 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3a38:	81 b1       	in	r24, 0x01	; 1
    3a3a:	80 61       	ori	r24, 0x10	; 16
    3a3c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3a3e:	82 b1       	in	r24, 0x02	; 2
    3a40:	8f 7e       	andi	r24, 0xEF	; 239
    3a42:	82 b9       	out	0x02, r24	; 2
    3a44:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

0000394c <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    394c:	88 23       	and	r24, r24
    394e:	21 f0       	breq	.+8      	; 0x3958 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    3950:	82 b1       	in	r24, 0x02	; 2
    3952:	80 61       	ori	r24, 0x10	; 16
    3954:	82 b9       	out	0x02, r24	; 2
    3956:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    3958:	82 b1       	in	r24, 0x02	; 2
    395a:	8f 7e       	andi	r24, 0xEF	; 239
    395c:	82 b9       	out	0x02, r24	; 2
    395e:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00003a46 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    3a46:	8a b1       	in	r24, 0x0a	; 10
    3a48:	80 61       	ori	r24, 0x10	; 16
    3a4a:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    3a4c:	8b b1       	in	r24, 0x0b	; 11
    3a4e:	8f 7e       	andi	r24, 0xEF	; 239
    3a50:	8b b9       	out	0x0b, r24	; 11
    3a52:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00003960 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    3960:	88 23       	and	r24, r24
    3962:	21 f0       	breq	.+8      	; 0x396c <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    3964:	8b b1       	in	r24, 0x0b	; 11
    3966:	80 61       	ori	r24, 0x10	; 16
    3968:	8b b9       	out	0x0b, r24	; 11
    396a:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    396c:	8b b1       	in	r24, 0x0b	; 11
    396e:	8f 7e       	andi	r24, 0xEF	; 239
    3970:	8b b9       	out	0x0b, r24	; 11
    3972:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00002ef6 <PM_HAL_enter_power_down>:
	}
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    2ef6:	84 b1       	in	r24, 0x04	; 4
    2ef8:	8b 7f       	andi	r24, 0xFB	; 251
    2efa:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    2efc:	85 b1       	in	r24, 0x05	; 5
    2efe:	84 60       	ori	r24, 0x04	; 4
    2f00:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    2f02:	e9 e6       	ldi	r30, 0x69	; 105
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	8f 7e       	andi	r24, 0xEF	; 239
    2f0a:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 62       	ori	r24, 0x20	; 32
    2f10:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    2f12:	8d b3       	in	r24, 0x1d	; 29
    2f14:	84 60       	ori	r24, 0x04	; 4
    2f16:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2f18:	83 b7       	in	r24, 0x33	; 51
    2f1a:	81 7f       	andi	r24, 0xF1	; 241
    2f1c:	84 60       	ori	r24, 0x04	; 4
    2f1e:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2f20:	83 b7       	in	r24, 0x33	; 51
    2f22:	81 60       	ori	r24, 0x01	; 1
    2f24:	83 bf       	out	0x33, r24	; 51
	sei();
    2f26:	78 94       	sei
	sleep_cpu();
    2f28:	88 95       	sleep
	sleep_disable();
    2f2a:	83 b7       	in	r24, 0x33	; 51
    2f2c:	8e 7f       	andi	r24, 0xFE	; 254
    2f2e:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    2f30:	8d b3       	in	r24, 0x1d	; 29
    2f32:	8b 7f       	andi	r24, 0xFB	; 251
    2f34:	8d bb       	out	0x1d, r24	; 29
    2f36:	08 95       	ret

Disassembly of section .text.__vector_3:

00003974 <__vector_3>:
}

ISR(INT2_vect){
    3974:	1f 92       	push	r1
    3976:	0f 92       	push	r0
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	0f 92       	push	r0
    397c:	11 24       	eor	r1, r1
	
}
    397e:	0f 90       	pop	r0
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	0f 90       	pop	r0
    3984:	1f 90       	pop	r1
    3986:	18 95       	reti

Disassembly of section .text.rn2483_reset_active:

00003b3c <rn2483_reset_active>:
void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3b3c:	85 b1       	in	r24, 0x05	; 5
    3b3e:	8f 7e       	andi	r24, 0xEF	; 239
    3b40:	85 b9       	out	0x05, r24	; 5
    3b42:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00003b44 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    3b44:	85 b1       	in	r24, 0x05	; 5
    3b46:	80 61       	ori	r24, 0x10	; 16
    3b48:	85 b9       	out	0x05, r24	; 5
    3b4a:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003a54 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3a54:	87 b1       	in	r24, 0x07	; 7
    3a56:	8f 7b       	andi	r24, 0xBF	; 191
    3a58:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3a5a:	88 b1       	in	r24, 0x08	; 8
    3a5c:	8f 7b       	andi	r24, 0xBF	; 191
    3a5e:	88 b9       	out	0x08, r24	; 8
    3a60:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00003b14 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    3b14:	86 b1       	in	r24, 0x06	; 6
    3b16:	86 fb       	bst	r24, 6
    3b18:	88 27       	eor	r24, r24
    3b1a:	80 f9       	bld	r24, 0
    3b1c:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

000036bc <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    36bc:	92 e0       	ldi	r25, 0x02	; 2
    36be:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    36c0:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    36c2:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    36c4:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    36c6:	ee e6       	ldi	r30, 0x6E	; 110
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	82 60       	ori	r24, 0x02	; 2
    36ce:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    36d0:	78 94       	sei
	
	//Set callback
	_cb=cb;
    36d2:	70 93 9b 0d 	sts	0x0D9B, r23	; 0x800d9b <_cb+0x1>
    36d6:	60 93 9a 0d 	sts	0x0D9A, r22	; 0x800d9a <_cb>
    36da:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00003b6c <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    3b6c:	86 e0       	ldi	r24, 0x06	; 6
    3b6e:	85 bd       	out	0x25, r24	; 37
    3b70:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00003bac <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    3bac:	15 bc       	out	0x25, r1	; 37
    3bae:	08 95       	ret

Disassembly of section .text.__vector_16:

00002988 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    2988:	1f 92       	push	r1
    298a:	0f 92       	push	r0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	0f 92       	push	r0
    2990:	11 24       	eor	r1, r1
    2992:	2f 93       	push	r18
    2994:	3f 93       	push	r19
    2996:	4f 93       	push	r20
    2998:	5f 93       	push	r21
    299a:	6f 93       	push	r22
    299c:	7f 93       	push	r23
    299e:	8f 93       	push	r24
    29a0:	9f 93       	push	r25
    29a2:	af 93       	push	r26
    29a4:	bf 93       	push	r27
    29a6:	ef 93       	push	r30
    29a8:	ff 93       	push	r31
	_cb();
    29aa:	e0 91 9a 0d 	lds	r30, 0x0D9A	; 0x800d9a <_cb>
    29ae:	f0 91 9b 0d 	lds	r31, 0x0D9B	; 0x800d9b <_cb+0x1>
    29b2:	09 95       	icall
}
    29b4:	ff 91       	pop	r31
    29b6:	ef 91       	pop	r30
    29b8:	bf 91       	pop	r27
    29ba:	af 91       	pop	r26
    29bc:	9f 91       	pop	r25
    29be:	8f 91       	pop	r24
    29c0:	7f 91       	pop	r23
    29c2:	6f 91       	pop	r22
    29c4:	5f 91       	pop	r21
    29c6:	4f 91       	pop	r20
    29c8:	3f 91       	pop	r19
    29ca:	2f 91       	pop	r18
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00003272 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    3272:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    3276:	28 e0       	ldi	r18, 0x08	; 8
    3278:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    327c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    3280:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3284:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3288:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    328c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    3290:	ef e6       	ldi	r30, 0x6F	; 111
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	82 60       	ori	r24, 0x02	; 2
    3298:	80 83       	st	Z, r24
	sei();
    329a:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    329c:	70 93 9d 0d 	sts	0x0D9D, r23	; 0x800d9d <_cb+0x1>
    32a0:	60 93 9c 0d 	sts	0x0D9C, r22	; 0x800d9c <_cb>
    32a4:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00003aa8 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    3aa8:	e1 e8       	ldi	r30, 0x81	; 129
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	80 81       	ld	r24, Z
    3aae:	86 60       	ori	r24, 0x06	; 6
    3ab0:	80 83       	st	Z, r24
    3ab2:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00003ab4 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    3ab4:	e1 e8       	ldi	r30, 0x81	; 129
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	88 7f       	andi	r24, 0xF8	; 248
    3abc:	80 83       	st	Z, r24
    3abe:	08 95       	ret

Disassembly of section .text.__vector_13:

000029d6 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    29d6:	1f 92       	push	r1
    29d8:	0f 92       	push	r0
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	0f 92       	push	r0
    29de:	11 24       	eor	r1, r1
    29e0:	2f 93       	push	r18
    29e2:	3f 93       	push	r19
    29e4:	4f 93       	push	r20
    29e6:	5f 93       	push	r21
    29e8:	6f 93       	push	r22
    29ea:	7f 93       	push	r23
    29ec:	8f 93       	push	r24
    29ee:	9f 93       	push	r25
    29f0:	af 93       	push	r26
    29f2:	bf 93       	push	r27
    29f4:	ef 93       	push	r30
    29f6:	ff 93       	push	r31
	_cb();
    29f8:	e0 91 9c 0d 	lds	r30, 0x0D9C	; 0x800d9c <_cb>
    29fc:	f0 91 9d 0d 	lds	r31, 0x0D9D	; 0x800d9d <_cb+0x1>
    2a00:	09 95       	icall
    2a02:	ff 91       	pop	r31
    2a04:	ef 91       	pop	r30
    2a06:	bf 91       	pop	r27
    2a08:	af 91       	pop	r26
    2a0a:	9f 91       	pop	r25
    2a0c:	8f 91       	pop	r24
    2a0e:	7f 91       	pop	r23
    2a10:	6f 91       	pop	r22
    2a12:	5f 91       	pop	r21
    2a14:	4f 91       	pop	r20
    2a16:	3f 91       	pop	r19
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

Disassembly of section .text.start_timer:

00003b4c <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    3b4c:	87 e0       	ldi	r24, 0x07	; 7
    3b4e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3b52:	08 95       	ret

Disassembly of section .text.stop_timer:

00003b72 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    3b72:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3b76:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

000036dc <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    36e2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    36e6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    36ea:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    36ee:	9b ef       	ldi	r25, 0xFB	; 251
    36f0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    36f4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    36f8:	78 94       	sei
    36fa:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

000028e4 <TC2_HAL_subscribe>:
    28e4:	cf 93       	push	r28
    28e6:	dc 01       	movw	r26, r24
    28e8:	60 91 b1 0d 	lds	r22, 0x0DB1	; 0x800db1 <cbCounter>
    28ec:	65 30       	cpi	r22, 0x05	; 5
    28ee:	00 f5       	brcc	.+64     	; 0x2930 <TC2_HAL_subscribe+0x4c>
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	15 c0       	rjmp	.+42     	; 0x291e <TC2_HAL_subscribe+0x3a>
    28f4:	29 2f       	mov	r18, r25
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	f9 01       	movw	r30, r18
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	eb 58       	subi	r30, 0x8B	; 139
    2900:	f2 4f       	sbci	r31, 0xF2	; 242
    2902:	40 81       	ld	r20, Z
    2904:	51 81       	ldd	r21, Z+1	; 0x01
    2906:	45 2b       	or	r20, r21
    2908:	49 f4       	brne	.+18     	; 0x291c <TC2_HAL_subscribe+0x38>
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	f9 01       	movw	r30, r18
    2910:	eb 58       	subi	r30, 0x8B	; 139
    2912:	f2 4f       	sbci	r31, 0xF2	; 242
    2914:	b1 83       	std	Z+1, r27	; 0x01
    2916:	a0 83       	st	Z, r26
    2918:	c9 2f       	mov	r28, r25
    291a:	04 c0       	rjmp	.+8      	; 0x2924 <TC2_HAL_subscribe+0x40>
    291c:	9f 5f       	subi	r25, 0xFF	; 255
    291e:	95 30       	cpi	r25, 0x05	; 5
    2920:	48 f3       	brcs	.-46     	; 0x28f4 <TC2_HAL_subscribe+0x10>
    2922:	cf ef       	ldi	r28, 0xFF	; 255
    2924:	6f 5f       	subi	r22, 0xFF	; 255
    2926:	60 93 b1 0d 	sts	0x0DB1, r22	; 0x800db1 <cbCounter>
    292a:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <start_timer>
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <TC2_HAL_subscribe+0x4e>
    2930:	cf ef       	ldi	r28, 0xFF	; 255
    2932:	8c 2f       	mov	r24, r28
    2934:	cf 91       	pop	r28
    2936:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000030f0 <TC2_HAL_cancel>:
    30f0:	08 2e       	mov	r0, r24
    30f2:	00 0c       	add	r0, r0
    30f4:	99 0b       	sbc	r25, r25
    30f6:	fc 01       	movw	r30, r24
    30f8:	ee 0f       	add	r30, r30
    30fa:	ff 1f       	adc	r31, r31
    30fc:	eb 58       	subi	r30, 0x8B	; 139
    30fe:	f2 4f       	sbci	r31, 0xF2	; 242
    3100:	20 81       	ld	r18, Z
    3102:	31 81       	ldd	r19, Z+1	; 0x01
    3104:	23 2b       	or	r18, r19
    3106:	81 f0       	breq	.+32     	; 0x3128 <TC2_HAL_cancel+0x38>
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	fc 01       	movw	r30, r24
    310e:	eb 58       	subi	r30, 0x8B	; 139
    3110:	f2 4f       	sbci	r31, 0xF2	; 242
    3112:	11 82       	std	Z+1, r1	; 0x01
    3114:	10 82       	st	Z, r1
    3116:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <cbCounter>
    311a:	81 50       	subi	r24, 0x01	; 1
    311c:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <cbCounter>
    3120:	81 11       	cpse	r24, r1
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <TC2_HAL_cancel+0x38>
    3124:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <stop_timer>
    3128:	08 95       	ret

Disassembly of section .text.__vector_9:

00001efa <__vector_9>:
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	4f 93       	push	r20
    1f0a:	5f 93       	push	r21
    1f0c:	6f 93       	push	r22
    1f0e:	7f 93       	push	r23
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	cf 93       	push	r28
    1f1a:	ef 93       	push	r30
    1f1c:	ff 93       	push	r31
    1f1e:	90 91 b0 0d 	lds	r25, 0x0DB0	; 0x800db0 <cnt>
    1f22:	9f 5f       	subi	r25, 0xFF	; 255
    1f24:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <cnt>
    1f28:	89 e0       	ldi	r24, 0x09	; 9
    1f2a:	98 9f       	mul	r25, r24
    1f2c:	21 2d       	mov	r18, r1
    1f2e:	11 24       	eor	r1, r1
    1f30:	89 2f       	mov	r24, r25
    1f32:	82 1b       	sub	r24, r18
    1f34:	86 95       	lsr	r24
    1f36:	82 0f       	add	r24, r18
    1f38:	82 95       	swap	r24
    1f3a:	8f 70       	andi	r24, 0x0F	; 15
    1f3c:	2f e1       	ldi	r18, 0x1F	; 31
    1f3e:	82 9f       	mul	r24, r18
    1f40:	90 19       	sub	r25, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	91 11       	cpse	r25, r1
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <__vector_9+0x74>
    1f48:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <cnt>
    1f4c:	c0 e0       	ldi	r28, 0x00	; 0
    1f4e:	0d c0       	rjmp	.+26     	; 0x1f6a <__vector_9+0x70>
    1f50:	ec 2f       	mov	r30, r28
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	eb 58       	subi	r30, 0x8B	; 139
    1f5a:	f2 4f       	sbci	r31, 0xF2	; 242
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	f0 81       	ld	r31, Z
    1f60:	e0 2d       	mov	r30, r0
    1f62:	30 97       	sbiw	r30, 0x00	; 0
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <__vector_9+0x6e>
    1f66:	09 95       	icall
    1f68:	cf 5f       	subi	r28, 0xFF	; 255
    1f6a:	c5 30       	cpi	r28, 0x05	; 5
    1f6c:	88 f3       	brcs	.-30     	; 0x1f50 <__vector_9+0x56>
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	cf 91       	pop	r28
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	7f 91       	pop	r23
    1f7e:	6f 91       	pop	r22
    1f80:	5f 91       	pop	r21
    1f82:	4f 91       	pop	r20
    1f84:	3f 91       	pop	r19
    1f86:	2f 91       	pop	r18
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00002ac0 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    2ac0:	cf 92       	push	r12
    2ac2:	df 92       	push	r13
    2ac4:	ef 92       	push	r14
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	6a 01       	movw	r12, r20
    2acc:	e6 2e       	mov	r14, r22
    2ace:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    2ad6:	81 11       	cpse	r24, r1
    2ad8:	13 c0       	rjmp	.+38     	; 0x2b00 <start_and_write_data+0x40>
    2ada:	c0 e0       	ldi	r28, 0x00	; 0
    2adc:	0e c0       	rjmp	.+28     	; 0x2afa <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    2ade:	ae 2d       	mov	r26, r14
    2ae0:	c6 01       	movw	r24, r12
    2ae2:	8c 0f       	add	r24, r28
    2ae4:	91 1d       	adc	r25, r1
    2ae6:	a1 1d       	adc	r26, r1
    2ae8:	fc 01       	movw	r30, r24
    2aea:	84 91       	lpm	r24, Z
    2aec:	a7 fd       	sbrc	r26, 7
    2aee:	80 81       	ld	r24, Z
    2af0:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    2af4:	81 11       	cpse	r24, r1
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    2af8:	cf 5f       	subi	r28, 0xFF	; 255
    2afa:	cd 17       	cp	r28, r29
    2afc:	80 f3       	brcs	.-32     	; 0x2ade <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    2afe:	80 e0       	ldi	r24, 0x00	; 0
}
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002832 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	8c 01       	movw	r16, r24
    2840:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2842:	c0 e0       	ldi	r28, 0x00	; 0
    2844:	08 c0       	rjmp	.+16     	; 0x2856 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2846:	78 01       	movw	r14, r16
    2848:	ec 0e       	add	r14, r28
    284a:	f1 1c       	adc	r15, r1
    284c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <TWI_HAL_read_byte_ack>
    2850:	f7 01       	movw	r30, r14
    2852:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2854:	cf 5f       	subi	r28, 0xFF	; 255
    2856:	2c 2f       	mov	r18, r28
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	8d 2f       	mov	r24, r29
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	28 17       	cp	r18, r24
    2862:	39 07       	cpc	r19, r25
    2864:	84 f3       	brlt	.-32     	; 0x2846 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2866:	8d 2f       	mov	r24, r29
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	e8 01       	movw	r28, r16
    286e:	c8 0f       	add	r28, r24
    2870:	d9 1f       	adc	r29, r25
    2872:	0e 94 ce 1c 	call	0x399c	; 0x399c <TWI_HAL_read_byte_nack>
    2876:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2878:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003b78 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    3b78:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <start_and_write_data>
}
    3b7c:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

000039fc <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    39fc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    3a00:	81 11       	cpse	r24, r1
    3a02:	03 c0       	rjmp	.+6      	; 0x3a0a <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    3a04:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    3a08:	80 e0       	ldi	r24, 0x00	; 0
}
    3a0a:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000035ca <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	eb 01       	movw	r28, r22
    35d2:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    35da:	81 11       	cpse	r24, r1
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    35de:	61 2f       	mov	r22, r17
    35e0:	ce 01       	movw	r24, r28
    35e2:	0e 94 19 14 	call	0x2832	; 0x2832 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003612 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	eb 01       	movw	r28, r22
    361a:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    361c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3620:	81 11       	cpse	r24, r1
    3622:	04 c0       	rjmp	.+8      	; 0x362c <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    3624:	61 2f       	mov	r22, r17
    3626:	ce 01       	movw	r24, r28
    3628:	0e 94 19 14 	call	0x2832	; 0x2832 <read_and_stop>
	
}
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

000039d8 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    39d8:	80 e2       	ldi	r24, 0x20	; 32
    39da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    39de:	e9 eb       	ldi	r30, 0xB9	; 185
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	8c 7f       	andi	r24, 0xFC	; 252
    39e6:	80 83       	st	Z, r24
    39e8:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00002c36 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2c3e:	84 ea       	ldi	r24, 0xA4	; 164
    2c40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2c44:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2c48:	99 23       	and	r25, r25
    2c4a:	e4 f7       	brge	.-8      	; 0x2c44 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    2c4c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2c50:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    2c52:	88 30       	cpi	r24, 0x08	; 8
    2c54:	99 f4       	brne	.+38     	; 0x2c7c <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    2c56:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2c5a:	84 e8       	ldi	r24, 0x84	; 132
    2c5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2c60:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2c64:	88 23       	and	r24, r24
    2c66:	e4 f7       	brge	.-8      	; 0x2c60 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    2c68:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2c6c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    2c6e:	88 31       	cpi	r24, 0x18	; 24
    2c70:	21 f0       	breq	.+8      	; 0x2c7a <TWI_HAL_start+0x44>
    2c72:	80 34       	cpi	r24, 0x40	; 64
    2c74:	19 f4       	brne	.+6      	; 0x2c7c <TWI_HAL_start+0x46>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	08 95       	ret
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2c7c:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00002f38 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	28 2f       	mov	r18, r24
    2f40:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2f42:	84 ea       	ldi	r24, 0xA4	; 164
    2f44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2f48:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2f4c:	99 23       	and	r25, r25
    2f4e:	e4 f7       	brge	.-8      	; 0x2f48 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    2f50:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2f54:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    2f56:	80 31       	cpi	r24, 0x10	; 16
    2f58:	79 f4       	brne	.+30     	; 0x2f78 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    2f5a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2f5e:	84 e8       	ldi	r24, 0x84	; 132
    2f60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2f64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2f68:	88 23       	and	r24, r24
    2f6a:	e4 f7       	brge	.-8      	; 0x2f64 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    2f6c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2f70:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    2f72:	80 34       	cpi	r24, 0x40	; 64
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <TWI_HAL_repeated_start+0x40>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2f78:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000036fc <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    36fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3700:	84 e8       	ldi	r24, 0x84	; 132
    3702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3706:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    370a:	88 23       	and	r24, r24
    370c:	e4 f7       	brge	.-8      	; 0x3706 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    370e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3712:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3714:	88 32       	cpi	r24, 0x28	; 40
    3716:	09 f4       	brne	.+2      	; 0x371a <TWI_HAL_write_byte+0x1e>
    3718:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    371a:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003988 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3988:	84 ec       	ldi	r24, 0xC4	; 196
    398a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    398e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3992:	88 23       	and	r24, r24
    3994:	e4 f7       	brge	.-8      	; 0x398e <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3996:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    399a:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

0000399c <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    399c:	84 e8       	ldi	r24, 0x84	; 132
    399e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    39a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    39a6:	88 23       	and	r24, r24
    39a8:	e4 f7       	brge	.-8      	; 0x39a2 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    39aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    39ae:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003a0c <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3a0c:	84 e9       	ldi	r24, 0x94	; 148
    3a0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3a12:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3a16:	84 fd       	sbrc	r24, 4
    3a18:	fc cf       	rjmp	.-8      	; 0x3a12 <TWI_HAL_stop+0x6>
}
    3a1a:	08 95       	ret

Disassembly of section .text.copy_buffer:

000034c8 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    34c8:	bc 01       	movw	r22, r24
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	09 c0       	rjmp	.+18     	; 0x34e0 <copy_buffer+0x18>
    34ce:	fb 01       	movw	r30, r22
    34d0:	e9 0f       	add	r30, r25
    34d2:	f1 1d       	adc	r31, r1
    34d4:	da 01       	movw	r26, r20
    34d6:	a0 50       	subi	r26, 0x00	; 0
    34d8:	bf 4f       	sbci	r27, 0xFF	; 255
    34da:	2c 91       	ld	r18, X
    34dc:	20 83       	st	Z, r18
    34de:	9f 5f       	subi	r25, 0xFF	; 255
    34e0:	49 2f       	mov	r20, r25
    34e2:	50 e0       	ldi	r21, 0x00	; 0
    34e4:	20 91 b3 0d 	lds	r18, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	22 50       	subi	r18, 0x02	; 2
    34ec:	31 09       	sbc	r19, r1
    34ee:	42 17       	cp	r20, r18
    34f0:	53 07       	cpc	r21, r19
    34f2:	6c f3       	brlt	.-38     	; 0x34ce <copy_buffer+0x6>
    34f4:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003078 <uart0_hal_init>:
    3078:	e1 ec       	ldi	r30, 0xC1	; 193
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	80 61       	ori	r24, 0x10	; 16
    3080:	80 83       	st	Z, r24
    3082:	80 81       	ld	r24, Z
    3084:	88 60       	ori	r24, 0x08	; 8
    3086:	80 83       	st	Z, r24
    3088:	80 81       	ld	r24, Z
    308a:	80 68       	ori	r24, 0x80	; 128
    308c:	80 83       	st	Z, r24
    308e:	80 81       	ld	r24, Z
    3090:	80 64       	ori	r24, 0x40	; 64
    3092:	80 83       	st	Z, r24
    3094:	e0 ec       	ldi	r30, 0xC0	; 192
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	82 60       	ori	r24, 0x02	; 2
    309c:	80 83       	st	Z, r24
    309e:	86 e0       	ldi	r24, 0x06	; 6
    30a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    30a4:	80 e1       	ldi	r24, 0x10	; 16
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    30ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    30b0:	78 94       	sei
    30b2:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000032a6 <uart0_hal_send_message>:
    32a6:	dc 01       	movw	r26, r24
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0b c0       	rjmp	.+22     	; 0x32c2 <uart0_hal_send_message+0x1c>
    32ac:	29 2f       	mov	r18, r25
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	fd 01       	movw	r30, r26
    32b2:	e2 0f       	add	r30, r18
    32b4:	f3 1f       	adc	r31, r19
    32b6:	40 81       	ld	r20, Z
    32b8:	f9 01       	movw	r30, r18
    32ba:	ec 59       	subi	r30, 0x9C	; 156
    32bc:	fe 4f       	sbci	r31, 0xFE	; 254
    32be:	40 83       	st	Z, r20
    32c0:	9f 5f       	subi	r25, 0xFF	; 255
    32c2:	96 17       	cp	r25, r22
    32c4:	98 f3       	brcs	.-26     	; 0x32ac <uart0_hal_send_message+0x6>
    32c6:	60 93 b5 0d 	sts	0x0DB5, r22	; 0x800db5 <tx_buffer_data_len>
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <tx_buffer_cursor>
    32d0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    32d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    32d8:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000251a <uart0_hal_send_string>:
    251a:	cf 92       	push	r12
    251c:	df 92       	push	r13
    251e:	ef 92       	push	r14
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	6b 01       	movw	r12, r22
    2528:	e8 2e       	mov	r14, r24
    252a:	c0 e0       	ldi	r28, 0x00	; 0
    252c:	12 c0       	rjmp	.+36     	; 0x2552 <uart0_hal_send_string+0x38>
    252e:	8c 2f       	mov	r24, r28
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	4e 2d       	mov	r20, r14
    2534:	96 01       	movw	r18, r12
    2536:	20 0f       	add	r18, r16
    2538:	31 1f       	adc	r19, r17
    253a:	41 1d       	adc	r20, r1
    253c:	17 fd       	sbrc	r17, 7
    253e:	4a 95       	dec	r20
    2540:	f9 01       	movw	r30, r18
    2542:	24 91       	lpm	r18, Z
    2544:	47 fd       	sbrc	r20, 7
    2546:	20 81       	ld	r18, Z
    2548:	fc 01       	movw	r30, r24
    254a:	ec 59       	subi	r30, 0x9C	; 156
    254c:	fe 4f       	sbci	r31, 0xFE	; 254
    254e:	20 83       	st	Z, r18
    2550:	cf 5f       	subi	r28, 0xFF	; 255
    2552:	0c 2f       	mov	r16, r28
    2554:	10 e0       	ldi	r17, 0x00	; 0
    2556:	8e 2d       	mov	r24, r14
    2558:	b6 01       	movw	r22, r12
    255a:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    255e:	08 17       	cp	r16, r24
    2560:	19 07       	cpc	r17, r25
    2562:	28 f3       	brcs	.-54     	; 0x252e <uart0_hal_send_string+0x14>
    2564:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <tx_buffer_data_len>
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <tx_buffer_cursor>
    256e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2572:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ef 90       	pop	r14
    257e:	df 90       	pop	r13
    2580:	cf 90       	pop	r12
    2582:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003a62 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3a62:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <rx_buffer_has_message>
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	91 11       	cpse	r25, r1
    3a6a:	01 c0       	rjmp	.+2      	; 0x3a6e <uart0_hal_message_ready+0xc>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
}
    3a6e:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00003b1e <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    3b1e:	10 92 b2 0d 	sts	0x0DB2, r1	; 0x800db2 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    3b22:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <rx_buffer_data_len>
    3b26:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

0000357a <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	8c 01       	movw	r16, r24
	copy_buffer(msg);
    3582:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3586:	c0 91 b3 0d 	lds	r28, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    358a:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    358c:	f8 01       	movw	r30, r16
    358e:	ec 0f       	add	r30, r28
    3590:	f1 1d       	adc	r31, r1
    3592:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3594:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <uart0_hal_clear_rx_buffer>
	return len;
}
    3598:	8c 2f       	mov	r24, r28
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00002d56 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2d56:	cf 93       	push	r28
    2d58:	df 93       	push	r29
    2d5a:	1f 92       	push	r1
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	9a b1       	in	r25, 0x0a	; 10
    2d62:	92 60       	ori	r25, 0x02	; 2
    2d64:	9a b9       	out	0x0a, r25	; 10
    2d66:	e1 ec       	ldi	r30, 0xC1	; 193
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	90 81       	ld	r25, Z
    2d6c:	97 7f       	andi	r25, 0xF7	; 247
    2d6e:	90 83       	st	Z, r25
    2d70:	9b b1       	in	r25, 0x0b	; 11
    2d72:	9d 7f       	andi	r25, 0xFD	; 253
    2d74:	9b b9       	out	0x0b, r25	; 11
    2d76:	af e9       	ldi	r26, 0x9F	; 159
    2d78:	bf e0       	ldi	r27, 0x0F	; 15
    2d7a:	11 97       	sbiw	r26, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <uart0_hal_send_break+0x24>
    2d7e:	00 c0       	rjmp	.+0      	; 0x2d80 <uart0_hal_send_break+0x2a>
    2d80:	00 00       	nop
    2d82:	90 81       	ld	r25, Z
    2d84:	98 60       	ori	r25, 0x08	; 8
    2d86:	90 83       	st	Z, r25
    2d88:	89 83       	std	Y+1, r24	; 0x01
    2d8a:	61 e0       	ldi	r22, 0x01	; 1
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	0e 94 53 19 	call	0x32a6	; 0x32a6 <uart0_hal_send_message>
    2d94:	0f 90       	pop	r0
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	08 95       	ret

Disassembly of section .text.__vector_22:

00002b58 <__vector_22>:
    2b58:	1f 92       	push	r1
    2b5a:	0f 92       	push	r0
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	0f 92       	push	r0
    2b60:	11 24       	eor	r1, r1
    2b62:	8f 93       	push	r24
    2b64:	ef 93       	push	r30
    2b66:	ff 93       	push	r31
    2b68:	e0 91 b4 0d 	lds	r30, 0x0DB4	; 0x800db4 <tx_buffer_cursor>
    2b6c:	80 91 b5 0d 	lds	r24, 0x0DB5	; 0x800db5 <tx_buffer_data_len>
    2b70:	e8 17       	cp	r30, r24
    2b72:	58 f4       	brcc	.+22     	; 0x2b8a <__vector_22+0x32>
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	8e 0f       	add	r24, r30
    2b78:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <tx_buffer_cursor>
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	ec 59       	subi	r30, 0x9C	; 156
    2b80:	fe 4f       	sbci	r31, 0xFE	; 254
    2b82:	80 81       	ld	r24, Z
    2b84:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__vector_22+0x3a>
    2b8a:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <tx_buffer_cursor>
    2b8e:	10 92 b5 0d 	sts	0x0DB5, r1	; 0x800db5 <tx_buffer_data_len>
    2b92:	ff 91       	pop	r31
    2b94:	ef 91       	pop	r30
    2b96:	8f 91       	pop	r24
    2b98:	0f 90       	pop	r0
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	0f 90       	pop	r0
    2b9e:	1f 90       	pop	r1
    2ba0:	18 95       	reti

Disassembly of section .text.__vector_20:

000023c6 <__vector_20>:
    23c6:	1f 92       	push	r1
    23c8:	0f 92       	push	r0
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	0f 92       	push	r0
    23ce:	11 24       	eor	r1, r1
    23d0:	2f 93       	push	r18
    23d2:	8f 93       	push	r24
    23d4:	9f 93       	push	r25
    23d6:	ef 93       	push	r30
    23d8:	ff 93       	push	r31
    23da:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <rx_buffer_has_message>
    23de:	81 11       	cpse	r24, r1
    23e0:	0e c0       	rjmp	.+28     	; 0x23fe <__vector_20+0x38>
    23e2:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    23e6:	e4 36       	cpi	r30, 0x64	; 100
    23e8:	50 f4       	brcc	.+20     	; 0x23fe <__vector_20+0x38>
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	8e 0f       	add	r24, r30
    23ee:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <rx_buffer_data_len>
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    23f8:	e0 50       	subi	r30, 0x00	; 0
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 83       	st	Z, r24
    23fe:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    2402:	83 30       	cpi	r24, 0x03	; 3
    2404:	80 f0       	brcs	.+32     	; 0x2426 <__vector_20+0x60>
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	fc 01       	movw	r30, r24
    240a:	e1 50       	subi	r30, 0x01	; 1
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	20 81       	ld	r18, Z
    2410:	2a 30       	cpi	r18, 0x0A	; 10
    2412:	49 f4       	brne	.+18     	; 0x2426 <__vector_20+0x60>
    2414:	fc 01       	movw	r30, r24
    2416:	e2 50       	subi	r30, 0x02	; 2
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	8d 30       	cpi	r24, 0x0D	; 13
    241e:	19 f4       	brne	.+6      	; 0x2426 <__vector_20+0x60>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <rx_buffer_has_message>
    2426:	ff 91       	pop	r31
    2428:	ef 91       	pop	r30
    242a:	9f 91       	pop	r25
    242c:	8f 91       	pop	r24
    242e:	2f 91       	pop	r18
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

000030b4 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    30b4:	e9 ec       	ldi	r30, 0xC9	; 201
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	80 61       	ori	r24, 0x10	; 16
    30bc:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    30be:	80 81       	ld	r24, Z
    30c0:	88 60       	ori	r24, 0x08	; 8
    30c2:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    30c4:	80 81       	ld	r24, Z
    30c6:	80 68       	ori	r24, 0x80	; 128
    30c8:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    30ca:	80 81       	ld	r24, Z
    30cc:	80 64       	ori	r24, 0x40	; 64
    30ce:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    30d0:	e8 ec       	ldi	r30, 0xC8	; 200
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	82 60       	ori	r24, 0x02	; 2
    30d8:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    30da:	86 e0       	ldi	r24, 0x06	; 6
    30dc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    30e0:	80 e1       	ldi	r24, 0x10	; 16
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    30e8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    30ec:	78 94       	sei
    30ee:	08 95       	ret

Disassembly of section .text.__vector_30:

00002ba2 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    2ba2:	1f 92       	push	r1
    2ba4:	0f 92       	push	r0
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	0f 92       	push	r0
    2baa:	11 24       	eor	r1, r1
    2bac:	8f 93       	push	r24
    2bae:	ef 93       	push	r30
    2bb0:	ff 93       	push	r31
    2bb2:	e0 91 b8 0d 	lds	r30, 0x0DB8	; 0x800db8 <tx_buffer_cursor>
    2bb6:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <tx_buffer_data_len>
    2bba:	e8 17       	cp	r30, r24
    2bbc:	58 f4       	brcc	.+22     	; 0x2bd4 <__vector_30+0x32>
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	8e 0f       	add	r24, r30
    2bc2:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <tx_buffer_cursor>
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	ee 53       	subi	r30, 0x3E	; 62
    2bca:	f4 4f       	sbci	r31, 0xF4	; 244
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <__vector_30+0x3a>
    2bd4:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <tx_buffer_cursor>
    2bd8:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <tx_buffer_data_len>
    2bdc:	ff 91       	pop	r31
    2bde:	ef 91       	pop	r30
    2be0:	8f 91       	pop	r24
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

Disassembly of section .text.__vector_28:

0000243a <__vector_28>:
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	2f 93       	push	r18
    2446:	8f 93       	push	r24
    2448:	9f 93       	push	r25
    244a:	ef 93       	push	r30
    244c:	ff 93       	push	r31
    244e:	80 91 b6 0d 	lds	r24, 0x0DB6	; 0x800db6 <rx_buffer_has_message>
    2452:	81 11       	cpse	r24, r1
    2454:	0e c0       	rjmp	.+28     	; 0x2472 <__vector_28+0x38>
    2456:	e0 91 b7 0d 	lds	r30, 0x0DB7	; 0x800db7 <rx_buffer_data_len>
    245a:	e4 36       	cpi	r30, 0x64	; 100
    245c:	50 f4       	brcc	.+20     	; 0x2472 <__vector_28+0x38>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	8e 0f       	add	r24, r30
    2462:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <rx_buffer_data_len>
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    246c:	e2 51       	subi	r30, 0x12	; 18
    246e:	f3 4f       	sbci	r31, 0xF3	; 243
    2470:	80 83       	st	Z, r24
    2472:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <rx_buffer_data_len>
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	fc 01       	movw	r30, r24
    247a:	e3 51       	subi	r30, 0x13	; 19
    247c:	f3 4f       	sbci	r31, 0xF3	; 243
    247e:	20 81       	ld	r18, Z
    2480:	2a 30       	cpi	r18, 0x0A	; 10
    2482:	49 f4       	brne	.+18     	; 0x2496 <__vector_28+0x5c>
    2484:	fc 01       	movw	r30, r24
    2486:	e4 51       	subi	r30, 0x14	; 20
    2488:	f3 4f       	sbci	r31, 0xF3	; 243
    248a:	80 81       	ld	r24, Z
    248c:	8d 30       	cpi	r24, 0x0D	; 13
    248e:	19 f4       	brne	.+6      	; 0x2496 <__vector_28+0x5c>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	80 93 b6 0d 	sts	0x0DB6, r24	; 0x800db6 <rx_buffer_has_message>
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	9f 91       	pop	r25
    249c:	8f 91       	pop	r24
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	0f 90       	pop	r0
    24a6:	1f 90       	pop	r1
    24a8:	18 95       	reti

Disassembly of section .text.main:

000038ae <main>:
{
	//test_runner();
	
	while(1)
    {
		MAINPG_start();
    38ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38b2:	2f ef       	ldi	r18, 0xFF	; 255
    38b4:	8d e3       	ldi	r24, 0x3D	; 61
    38b6:	99 e4       	ldi	r25, 0x49	; 73
    38b8:	21 50       	subi	r18, 0x01	; 1
    38ba:	80 40       	sbci	r24, 0x00	; 0
    38bc:	90 40       	sbci	r25, 0x00	; 0
    38be:	e1 f7       	brne	.-8      	; 0x38b8 <main+0xa>
    38c0:	00 c0       	rjmp	.+0      	; 0x38c2 <main+0x14>
    38c2:	00 00       	nop
    38c4:	f4 cf       	rjmp	.-24     	; 0x38ae <main>

Disassembly of section .text.vect_ADC_heat_timeout:

000038c6 <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    38c6:	80 91 ba 0d 	lds	r24, 0x0DBA	; 0x800dba <cntPowerUpTime>
    38ca:	8f 5f       	subi	r24, 0xFF	; 255
    38cc:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <cntPowerUpTime>
    38d0:	90 91 bb 0d 	lds	r25, 0x0DBB	; 0x800dbb <_powerUpTime>
    38d4:	89 17       	cp	r24, r25
    38d6:	10 f0       	brcs	.+4      	; 0x38dc <vect_ADC_heat_timeout+0x16>
    38d8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <TC0_HAL_stop>
    38dc:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00002656 <ADC_init_sampling>:
    2656:	cf 93       	push	r28
    2658:	50 93 a1 0d 	sts	0x0DA1, r21	; 0x800da1 <_data+0x1>
    265c:	40 93 a0 0d 	sts	0x0DA0, r20	; 0x800da0 <_data>
    2660:	70 93 a3 0d 	sts	0x0DA3, r23	; 0x800da3 <_nSamples+0x1>
    2664:	60 93 a2 0d 	sts	0x0DA2, r22	; 0x800da2 <_nSamples>
    2668:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <cntSamples+0x1>
    266c:	10 92 9e 0d 	sts	0x0D9E, r1	; 0x800d9e <cntSamples>
    2670:	6e ec       	ldi	r22, 0xCE	; 206
    2672:	76 e1       	ldi	r23, 0x16	; 22
    2674:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <TC0_HAL_init>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	0e 94 92 1c 	call	0x3924	; 0x3924 <PM_HAL_adc_power>
    267e:	2f ef       	ldi	r18, 0xFF	; 255
    2680:	83 ec       	ldi	r24, 0xC3	; 195
    2682:	99 e0       	ldi	r25, 0x09	; 9
    2684:	21 50       	subi	r18, 0x01	; 1
    2686:	80 40       	sbci	r24, 0x00	; 0
    2688:	90 40       	sbci	r25, 0x00	; 0
    268a:	e1 f7       	brne	.-8      	; 0x2684 <ADC_init_sampling+0x2e>
    268c:	00 c0       	rjmp	.+0      	; 0x268e <ADC_init_sampling+0x38>
    268e:	00 00       	nop
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	8d e4       	ldi	r24, 0x4D	; 77
    2694:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <TWI_HAL_start>
    2698:	c8 2f       	mov	r28, r24
    269a:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <TWI_HAL_stop>
    269e:	cc 23       	and	r28, r28
    26a0:	51 f0       	breq	.+20     	; 0x26b6 <ADC_init_sampling+0x60>
    26a2:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <_data+0x1>
    26a6:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <_data>
    26aa:	10 92 a3 0d 	sts	0x0DA3, r1	; 0x800da3 <_nSamples+0x1>
    26ae:	10 92 a2 0d 	sts	0x0DA2, r1	; 0x800da2 <_nSamples>
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <ADC_init_sampling+0x62>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

000039b0 <ADC_deinit_sampling>:
    39b0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <TC0_HAL_stop>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	0e 94 92 1c 	call	0x3924	; 0x3924 <PM_HAL_adc_power>
    39ba:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <_data+0x1>
    39be:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <_data>
    39c2:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

000037b6 <ADC_is_sampling_done>:
    37b6:	40 91 9e 0d 	lds	r20, 0x0D9E	; 0x800d9e <cntSamples>
    37ba:	50 91 9f 0d 	lds	r21, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    37be:	20 91 a2 0d 	lds	r18, 0x0DA2	; 0x800da2 <_nSamples>
    37c2:	30 91 a3 0d 	lds	r19, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	42 17       	cp	r20, r18
    37ca:	53 07       	cpc	r21, r19
    37cc:	08 f4       	brcc	.+2      	; 0x37d0 <ADC_is_sampling_done+0x1a>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

0000371c <ADC_meth_sens_power_on>:
    371c:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <_powerUpTime>
    3720:	10 92 ba 0d 	sts	0x0DBA, r1	; 0x800dba <cntPowerUpTime>
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	0e 94 9c 1c 	call	0x3938	; 0x3938 <PM_HAL_meth_power>
    372a:	63 e6       	ldi	r22, 0x63	; 99
    372c:	7c e1       	ldi	r23, 0x1C	; 28
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <TC0_HAL_init>
    3734:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <TC0_HAL_start>
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

000039ea <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    39ea:	20 91 ba 0d 	lds	r18, 0x0DBA	; 0x800dba <cntPowerUpTime>
    39ee:	90 91 bb 0d 	lds	r25, 0x0DBB	; 0x800dbb <_powerUpTime>
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	29 17       	cp	r18, r25
    39f6:	08 f4       	brcc	.+2      	; 0x39fa <ADC_meth_sens_ready+0x10>
    39f8:	80 e0       	ldi	r24, 0x00	; 0
}
    39fa:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00001f92 <calc_ppm_methane>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__floatunsisf>
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	59 e3       	ldi	r21, 0x39	; 57
    1fb4:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__mulsf3>
    1fb8:	80 90 92 0d 	lds	r8, 0x0D92	; 0x800d92 <Vc>
    1fbc:	90 90 93 0d 	lds	r9, 0x0D93	; 0x800d93 <Vc+0x1>
    1fc0:	a0 90 94 0d 	lds	r10, 0x0D94	; 0x800d94 <Vc+0x2>
    1fc4:	b0 90 95 0d 	lds	r11, 0x0D95	; 0x800d95 <Vc+0x3>
    1fc8:	a5 01       	movw	r20, r10
    1fca:	94 01       	movw	r18, r8
    1fcc:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__mulsf3>
    1fd0:	6b 01       	movw	r12, r22
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	9b 01       	movw	r18, r22
    1fd6:	ac 01       	movw	r20, r24
    1fd8:	c5 01       	movw	r24, r10
    1fda:	b4 01       	movw	r22, r8
    1fdc:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <__subsf3>
    1fe0:	a7 01       	movw	r20, r14
    1fe2:	96 01       	movw	r18, r12
    1fe4:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divsf3>
    1fe8:	20 91 8e 0d 	lds	r18, 0x0D8E	; 0x800d8e <RRL>
    1fec:	30 91 8f 0d 	lds	r19, 0x0D8F	; 0x800d8f <RRL+0x1>
    1ff0:	40 91 90 0d 	lds	r20, 0x0D90	; 0x800d90 <RRL+0x2>
    1ff4:	50 91 91 0d 	lds	r21, 0x0D91	; 0x800d91 <RRL+0x3>
    1ff8:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__mulsf3>
    1ffc:	20 91 8a 0d 	lds	r18, 0x0D8A	; 0x800d8a <PPM_factor>
    2000:	30 91 8b 0d 	lds	r19, 0x0D8B	; 0x800d8b <PPM_factor+0x1>
    2004:	40 91 8c 0d 	lds	r20, 0x0D8C	; 0x800d8c <PPM_factor+0x2>
    2008:	50 91 8d 0d 	lds	r21, 0x0D8D	; 0x800d8d <PPM_factor+0x3>
    200c:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__mulsf3>
    2010:	0e 94 bc 13 	call	0x2778	; 0x2778 <__fixunssfsi>
    2014:	cb 01       	movw	r24, r22
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	cf 90       	pop	r12
    201e:	bf 90       	pop	r11
    2020:	af 90       	pop	r10
    2022:	9f 90       	pop	r9
    2024:	8f 90       	pop	r8
    2026:	08 95       	ret

Disassembly of section .text.ADC_get_value:

000027d6 <ADC_get_value>:
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <ADC_get_value+0xc>
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	7c 01       	movw	r14, r24
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	9f ef       	ldi	r25, 0xFF	; 255
    27ec:	f7 01       	movw	r30, r14
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	42 e0       	ldi	r20, 0x02	; 2
    27f4:	be 01       	movw	r22, r28
    27f6:	6f 5f       	subi	r22, 0xFF	; 255
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	8d e4       	ldi	r24, 0x4D	; 77
    27fc:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <TWI_API_read_data_ack_end_nack_stop>
    2800:	18 2f       	mov	r17, r24
    2802:	81 11       	cpse	r24, r1
    2804:	0d c0       	rjmp	.+26     	; 0x2820 <ADC_get_value+0x4a>
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	98 2f       	mov	r25, r24
    280c:	88 27       	eor	r24, r24
    280e:	2a 81       	ldd	r18, Y+2	; 0x02
    2810:	82 2b       	or	r24, r18
    2812:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <calc_ppm_methane>
    2816:	f7 01       	movw	r30, r14
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	81 2f       	mov	r24, r17
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <ADC_get_value+0x4c>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00002d9c <vect_ADC_do_sample>:
    2d9c:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <_data>
    2da0:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <_data+0x1>
    2da4:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2da8:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2dac:	a9 01       	movw	r20, r18
    2dae:	4f 5f       	subi	r20, 0xFF	; 255
    2db0:	5f 4f       	sbci	r21, 0xFF	; 255
    2db2:	50 93 9f 0d 	sts	0x0D9F, r21	; 0x800d9f <cntSamples+0x1>
    2db6:	40 93 9e 0d 	sts	0x0D9E, r20	; 0x800d9e <cntSamples>
    2dba:	22 0f       	add	r18, r18
    2dbc:	33 1f       	adc	r19, r19
    2dbe:	82 0f       	add	r24, r18
    2dc0:	93 1f       	adc	r25, r19
    2dc2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <ADC_get_value>
    2dc6:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2dca:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2dce:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <_nSamples>
    2dd2:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    2dd6:	28 17       	cp	r18, r24
    2dd8:	39 07       	cpc	r19, r25
    2dda:	10 f0       	brcs	.+4      	; 0x2de0 <vect_ADC_do_sample+0x44>
    2ddc:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <TC0_HAL_stop>
    2de0:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00003ac0 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    3ac0:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <TC0_HAL_start>
	vect_ADC_do_sample();
    3ac4:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000780 <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 780:	af 92       	push	r10
 782:	bf 92       	push	r11
 784:	cf 92       	push	r12
 786:	df 92       	push	r13
 788:	ef 92       	push	r14
 78a:	ff 92       	push	r15
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	28 97       	sbiw	r28, 0x08	; 8
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	5c 01       	movw	r10, r24
 7a4:	6b 01       	movw	r12, r22
 7a6:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 7a8:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
 7aa:	e1 2f       	mov	r30, r17
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	ed 30       	cpi	r30, 0x0D	; 13
 7b0:	f1 05       	cpc	r31, r1
 7b2:	d8 f7       	brcc	.-10     	; 0x7aa <JN_join_network+0x2a>
 7b4:	e2 5c       	subi	r30, 0xC2	; 194
 7b6:	ff 4f       	sbci	r31, 0xFF	; 255
 7b8:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 7bc:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <rn2483_reset_active>
 7c0:	2f ef       	ldi	r18, 0xFF	; 255
 7c2:	89 e6       	ldi	r24, 0x69	; 105
 7c4:	98 e1       	ldi	r25, 0x18	; 24
 7c6:	21 50       	subi	r18, 0x01	; 1
 7c8:	80 40       	sbci	r24, 0x00	; 0
 7ca:	90 40       	sbci	r25, 0x00	; 0
 7cc:	e1 f7       	brne	.-8      	; 0x7c6 <JN_join_network+0x46>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <JN_join_network+0x50>
 7d0:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 7d2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 7d6:	4c e0       	ldi	r20, 0x0C	; 12
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	62 e0       	ldi	r22, 0x02	; 2
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	ce 01       	movw	r24, r28
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 7e6:	27 e9       	ldi	r18, 0x97	; 151
 7e8:	32 e0       	ldi	r19, 0x02	; 2
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	ce 01       	movw	r24, r28
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 7f6:	11 e0       	ldi	r17, 0x01	; 1
			break;
 7f8:	d8 cf       	rjmp	.-80     	; 0x7aa <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 7fa:	4e e9       	ldi	r20, 0x9E	; 158
 7fc:	52 e0       	ldi	r21, 0x02	; 2
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	80 e9       	ldi	r24, 0x90	; 144
 802:	92 e0       	ldi	r25, 0x02	; 2
 804:	0e 94 87 19 	call	0x330e	; 0x330e <cmd_with_ending>
				util_transmit_msg(lm_msg);
 808:	80 e9       	ldi	r24, 0x90	; 144
 80a:	92 e0       	ldi	r25, 0x02	; 2
 80c:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 810:	4c e0       	ldi	r20, 0x0C	; 12
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	63 e0       	ldi	r22, 0x03	; 3
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	ce 01       	movw	r24, r28
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 820:	2c ea       	ldi	r18, 0xAC	; 172
 822:	32 e0       	ldi	r19, 0x02	; 2
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	ce 01       	movw	r24, r28
 82a:	01 96       	adiw	r24, 0x01	; 1
 82c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 830:	11 e0       	ldi	r17, 0x01	; 1
			break;
 832:	bb cf       	rjmp	.-138    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 834:	b5 01       	movw	r22, r10
 836:	80 e9       	ldi	r24, 0x90	; 144
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <mac_set_deveui>
				attach_ending(lm_msg);
 83e:	80 e9       	ldi	r24, 0x90	; 144
 840:	92 e0       	ldi	r25, 0x02	; 2
 842:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <attach_ending>
				util_transmit_msg(lm_msg);
 846:	80 e9       	ldi	r24, 0x90	; 144
 848:	92 e0       	ldi	r25, 0x02	; 2
 84a:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 84e:	4c e0       	ldi	r20, 0x0C	; 12
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	64 e0       	ldi	r22, 0x04	; 4
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	ce 01       	movw	r24, r28
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 85e:	2c ea       	ldi	r18, 0xAC	; 172
 860:	32 e0       	ldi	r19, 0x02	; 2
 862:	40 e0       	ldi	r20, 0x00	; 0
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	ce 01       	movw	r24, r28
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 86e:	11 e0       	ldi	r17, 0x01	; 1
			break;
 870:	9c cf       	rjmp	.-200    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 872:	b7 01       	movw	r22, r14
 874:	80 e9       	ldi	r24, 0x90	; 144
 876:	92 e0       	ldi	r25, 0x02	; 2
 878:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <mac_set_appkey>
				attach_ending(lm_msg);
 87c:	80 e9       	ldi	r24, 0x90	; 144
 87e:	92 e0       	ldi	r25, 0x02	; 2
 880:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <attach_ending>
				util_transmit_msg(lm_msg);
 884:	80 e9       	ldi	r24, 0x90	; 144
 886:	92 e0       	ldi	r25, 0x02	; 2
 888:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 88c:	4c e0       	ldi	r20, 0x0C	; 12
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	65 e0       	ldi	r22, 0x05	; 5
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	ce 01       	movw	r24, r28
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 89c:	2c ea       	ldi	r18, 0xAC	; 172
 89e:	32 e0       	ldi	r19, 0x02	; 2
 8a0:	40 e0       	ldi	r20, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	ce 01       	movw	r24, r28
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8ac:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8ae:	7d cf       	rjmp	.-262    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 8b0:	b6 01       	movw	r22, r12
 8b2:	80 e9       	ldi	r24, 0x90	; 144
 8b4:	92 e0       	ldi	r25, 0x02	; 2
 8b6:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <mac_set_appeui>
				attach_ending(lm_msg);
 8ba:	80 e9       	ldi	r24, 0x90	; 144
 8bc:	92 e0       	ldi	r25, 0x02	; 2
 8be:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <attach_ending>
				util_transmit_msg(lm_msg);
 8c2:	80 e9       	ldi	r24, 0x90	; 144
 8c4:	92 e0       	ldi	r25, 0x02	; 2
 8c6:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 8ca:	4c e0       	ldi	r20, 0x0C	; 12
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	66 e0       	ldi	r22, 0x06	; 6
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	ce 01       	movw	r24, r28
 8d4:	01 96       	adiw	r24, 0x01	; 1
 8d6:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8da:	2c ea       	ldi	r18, 0xAC	; 172
 8dc:	32 e0       	ldi	r19, 0x02	; 2
 8de:	40 e0       	ldi	r20, 0x00	; 0
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	ce 01       	movw	r24, r28
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8ea:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8ec:	5e cf       	rjmp	.-324    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 8ee:	61 e0       	ldi	r22, 0x01	; 1
 8f0:	80 e9       	ldi	r24, 0x90	; 144
 8f2:	92 e0       	ldi	r25, 0x02	; 2
 8f4:	0e 94 04 1a 	call	0x3408	; 0x3408 <mac_set_ADR>
				attach_ending(lm_msg);
 8f8:	80 e9       	ldi	r24, 0x90	; 144
 8fa:	92 e0       	ldi	r25, 0x02	; 2
 8fc:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <attach_ending>
				util_transmit_msg(lm_msg);
 900:	80 e9       	ldi	r24, 0x90	; 144
 902:	92 e0       	ldi	r25, 0x02	; 2
 904:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 908:	4c e0       	ldi	r20, 0x0C	; 12
 90a:	50 e0       	ldi	r21, 0x00	; 0
 90c:	67 e0       	ldi	r22, 0x07	; 7
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	ce 01       	movw	r24, r28
 912:	01 96       	adiw	r24, 0x01	; 1
 914:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 918:	2c ea       	ldi	r18, 0xAC	; 172
 91a:	32 e0       	ldi	r19, 0x02	; 2
 91c:	40 e0       	ldi	r20, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	ce 01       	movw	r24, r28
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 928:	11 e0       	ldi	r17, 0x01	; 1
			break;
 92a:	3f cf       	rjmp	.-386    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 92c:	4f ea       	ldi	r20, 0xAF	; 175
 92e:	52 e0       	ldi	r21, 0x02	; 2
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	80 e9       	ldi	r24, 0x90	; 144
 934:	92 e0       	ldi	r25, 0x02	; 2
 936:	0e 94 87 19 	call	0x330e	; 0x330e <cmd_with_ending>
				util_transmit_msg(lm_msg);
 93a:	80 e9       	ldi	r24, 0x90	; 144
 93c:	92 e0       	ldi	r25, 0x02	; 2
 93e:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 942:	4c e0       	ldi	r20, 0x0C	; 12
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	68 e0       	ldi	r22, 0x08	; 8
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	ce 01       	movw	r24, r28
 94c:	01 96       	adiw	r24, 0x01	; 1
 94e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 952:	2c ea       	ldi	r18, 0xAC	; 172
 954:	32 e0       	ldi	r19, 0x02	; 2
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	ce 01       	movw	r24, r28
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 962:	11 e0       	ldi	r17, 0x01	; 1
			break;
 964:	22 cf       	rjmp	.-444    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 966:	48 eb       	ldi	r20, 0xB8	; 184
 968:	52 e0       	ldi	r21, 0x02	; 2
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	80 e9       	ldi	r24, 0x90	; 144
 96e:	92 e0       	ldi	r25, 0x02	; 2
 970:	0e 94 87 19 	call	0x330e	; 0x330e <cmd_with_ending>
				util_transmit_msg(lm_msg);
 974:	80 e9       	ldi	r24, 0x90	; 144
 976:	92 e0       	ldi	r25, 0x02	; 2
 978:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 97c:	4a e0       	ldi	r20, 0x0A	; 10
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	69 e0       	ldi	r22, 0x09	; 9
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	ce 01       	movw	r24, r28
 986:	01 96       	adiw	r24, 0x01	; 1
 988:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 98c:	2c ea       	ldi	r18, 0xAC	; 172
 98e:	32 e0       	ldi	r19, 0x02	; 2
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	ce 01       	movw	r24, r28
 996:	01 96       	adiw	r24, 0x01	; 1
 998:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 99c:	11 e0       	ldi	r17, 0x01	; 1
			break;
 99e:	05 cf       	rjmp	.-502    	; 0x7aa <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 9a0:	4a e0       	ldi	r20, 0x0A	; 10
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	6b e0       	ldi	r22, 0x0B	; 11
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	ce 01       	movw	r24, r28
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 9b0:	26 ec       	ldi	r18, 0xC6	; 198
 9b2:	32 e0       	ldi	r19, 0x02	; 2
 9b4:	40 e0       	ldi	r20, 0x00	; 0
 9b6:	60 e0       	ldi	r22, 0x00	; 0
 9b8:	ce 01       	movw	r24, r28
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 9c0:	11 e0       	ldi	r17, 0x01	; 1
			break;
 9c2:	f3 ce       	rjmp	.-538    	; 0x7aa <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
 9c4:	80 e9       	ldi	r24, 0x90	; 144
 9c6:	92 e0       	ldi	r25, 0x02	; 2
 9c8:	0e 94 46 14 	call	0x288c	; 0x288c <util_parse_err>
 9cc:	14 c0       	rjmp	.+40     	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 9ce:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <uart0_hal_message_ready>
 9d2:	88 23       	and	r24, r24
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 9d6:	e9 ce       	rjmp	.-558    	; 0x7aa <JN_join_network+0x2a>
					util_read_msg(lm_msg);
 9d8:	80 e9       	ldi	r24, 0x90	; 144
 9da:	92 e0       	ldi	r25, 0x02	; 2
 9dc:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
 9e0:	60 e9       	ldi	r22, 0x90	; 144
 9e2:	72 e0       	ldi	r23, 0x02	; 2
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	0e 94 8d 13 	call	0x271a	; 0x271a <util_matchMessage>
 9ec:	18 2f       	mov	r17, r24
 9ee:	dd ce       	rjmp	.-582    	; 0x7aa <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 9f4:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 9f6:	28 96       	adiw	r28, 0x08	; 8
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	ff 90       	pop	r15
 a0a:	ef 90       	pop	r14
 a0c:	df 90       	pop	r13
 a0e:	cf 90       	pop	r12
 a10:	bf 90       	pop	r11
 a12:	af 90       	pop	r10
 a14:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000038de <set_block_uplink>:
bool LM_is_free(){
	return busy==false;
}

static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    38de:	89 ee       	ldi	r24, 0xE9	; 233
    38e0:	9b e1       	ldi	r25, 0x1B	; 27
    38e2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <TC2_HAL_subscribe>
    38e6:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <subPointer>
	busy=true;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	80 93 bd 0d 	sts	0x0DBD, r24	; 0x800dbd <busy>
	cnt=0;
    38f0:	10 92 be 0d 	sts	0x0DBE, r1	; 0x800dbe <cnt>
    38f4:	08 95       	ret

Disassembly of section .text.block_uplink:

000037d2 <block_uplink>:
}

static void block_uplink(){
	cnt++;
    37d2:	80 91 be 0d 	lds	r24, 0x0DBE	; 0x800dbe <cnt>
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    37dc:	86 30       	cpi	r24, 0x06	; 6
    37de:	30 f0       	brcs	.+12     	; 0x37ec <block_uplink+0x1a>
		busy=false;
    37e0:	10 92 bd 0d 	sts	0x0DBD, r1	; 0x800dbd <busy>
		TC2_HAL_cancel(subPointer);
    37e4:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <subPointer>
    37e8:	0e 94 78 18 	call	0x30f0	; 0x30f0 <TC2_HAL_cancel>
    37ec:	08 95       	ret

Disassembly of section .text.LM_join_network:

00003b7e <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    3b7e:	0e 94 c0 03 	call	0x780	; 0x780 <JN_join_network>
}
    3b82:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

000034f6 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    34f6:	1f 93       	push	r17
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    34fe:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <busy>
    3502:	91 11       	cpse	r25, r1
    3504:	0a c0       	rjmp	.+20     	; 0x351a <LM_send_uplink+0x24>
    3506:	16 2f       	mov	r17, r22
    3508:	e9 01       	movw	r28, r18
	set_block_uplink();
    350a:	0e 94 6f 1c 	call	0x38de	; 0x38de <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    350e:	41 2f       	mov	r20, r17
    3510:	be 01       	movw	r22, r28
    3512:	84 e6       	ldi	r24, 0x64	; 100
    3514:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <SU_send_uplink>
    3518:	01 c0       	rjmp	.+2      	; 0x351c <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    351a:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	1f 91       	pop	r17
    3522:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00003b84 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    3b84:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SC_put_to_sleep>
}
    3b88:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00003b8a <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    3b8a:	0e 94 a0 19 	call	0x3340	; 0x3340 <SC_wake_up>
}
    3b8e:	08 95       	ret

Disassembly of section .text.LM_is_free:

00003b28 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    3b28:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <busy>
}
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	89 27       	eor	r24, r25
    3b30:	08 95       	ret

Disassembly of section .text.tohex:

000021d6 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    21d6:	6f 92       	push	r6
    21d8:	7f 92       	push	r7
    21da:	8f 92       	push	r8
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	7c 01       	movw	r14, r24
    21ea:	3a 01       	movw	r6, r20
    21ec:	86 2e       	mov	r8, r22
    21ee:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    21f0:	c0 e0       	ldi	r28, 0x00	; 0
    21f2:	d0 e0       	ldi	r29, 0x00	; 0
    21f4:	25 c0       	rjmp	.+74     	; 0x2240 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    21f6:	a8 2d       	mov	r26, r8
    21f8:	c3 01       	movw	r24, r6
    21fa:	8c 0f       	add	r24, r28
    21fc:	9d 1f       	adc	r25, r29
    21fe:	a1 1d       	adc	r26, r1
    2200:	d7 fd       	sbrc	r29, 7
    2202:	aa 95       	dec	r26
    2204:	fc 01       	movw	r30, r24
    2206:	24 91       	lpm	r18, Z
    2208:	a7 fd       	sbrc	r26, 7
    220a:	20 81       	ld	r18, Z
    220c:	ce 01       	movw	r24, r28
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	1f 92       	push	r1
    2214:	2f 93       	push	r18
    2216:	24 e2       	ldi	r18, 0x24	; 36
    2218:	32 e0       	ldi	r19, 0x02	; 2
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	4f 93       	push	r20
    221e:	3f 93       	push	r19
    2220:	2f 93       	push	r18
    2222:	8e 0d       	add	r24, r14
    2224:	9f 1d       	adc	r25, r15
    2226:	9f 93       	push	r25
    2228:	8f 93       	push	r24
    222a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    222e:	21 96       	adiw	r28, 0x01	; 1
    2230:	8d b7       	in	r24, 0x3d	; 61
    2232:	9e b7       	in	r25, 0x3e	; 62
    2234:	07 96       	adiw	r24, 0x07	; 7
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	9e bf       	out	0x3e, r25	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	8d bf       	out	0x3d, r24	; 61
    2240:	c0 17       	cp	r28, r16
    2242:	d1 07       	cpc	r29, r17
    2244:	c4 f2       	brlt	.-80     	; 0x21f6 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	6f 90       	pop	r6
    2258:	08 95       	ret

Disassembly of section .text.attach_ending:

000037ee <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    37ee:	fc 01       	movw	r30, r24
    37f0:	01 90       	ld	r0, Z+
    37f2:	00 20       	and	r0, r0
    37f4:	e9 f7       	brne	.-6      	; 0x37f0 <attach_ending+0x2>
    37f6:	cf 01       	movw	r24, r30
    37f8:	23 e0       	ldi	r18, 0x03	; 3
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	49 e2       	ldi	r20, 0x29	; 41
    37fe:	52 e0       	ldi	r21, 0x02	; 2
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <memcpy>
    3808:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

0000330e <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    3314:	0e 94 cc 1b 	call	0x3798	; 0x3798 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    3318:	fe 01       	movw	r30, r28
    331a:	01 90       	ld	r0, Z+
    331c:	00 20       	and	r0, r0
    331e:	e9 f7       	brne	.-6      	; 0x331a <cmd_with_ending+0xc>
    3320:	cf 01       	movw	r24, r30
    3322:	23 e0       	ldi	r18, 0x03	; 3
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	49 e2       	ldi	r20, 0x29	; 41
    3328:	52 e0       	ldi	r21, 0x02	; 2
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <memcpy>
	return strlen(buffer);
    3332:	be 01       	movw	r22, r28
    3334:	80 e8       	ldi	r24, 0x80	; 128
    3336:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

000026bc <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    26c0:	44 36       	cpi	r20, 0x64	; 100
    26c2:	51 05       	cpc	r21, r1
    26c4:	61 05       	cpc	r22, r1
    26c6:	71 05       	cpc	r23, r1
    26c8:	18 f1       	brcs	.+70     	; 0x2710 <sys_sleep_cmd+0x54>
    26ca:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    26cc:	7f 93       	push	r23
    26ce:	6f 93       	push	r22
    26d0:	5f 93       	push	r21
    26d2:	4f 93       	push	r20
    26d4:	8c e2       	ldi	r24, 0x2C	; 44
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	a0 e0       	ldi	r26, 0x00	; 0
    26da:	af 93       	push	r26
    26dc:	9f 93       	push	r25
    26de:	8f 93       	push	r24
    26e0:	86 e3       	ldi	r24, 0x36	; 54
    26e2:	92 e0       	ldi	r25, 0x02	; 2
    26e4:	a0 e0       	ldi	r26, 0x00	; 0
    26e6:	af 93       	push	r26
    26e8:	9f 93       	push	r25
    26ea:	8f 93       	push	r24
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	0e 94 14 17 	call	0x2e28	; 0x2e28 <sprintf>
    return strlen(buffer);
    26f4:	be 01       	movw	r22, r28
    26f6:	80 e8       	ldi	r24, 0x80	; 128
    26f8:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    26fc:	2d b7       	in	r18, 0x3d	; 61
    26fe:	3e b7       	in	r19, 0x3e	; 62
    2700:	24 5f       	subi	r18, 0xF4	; 244
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	3e bf       	out	0x3e, r19	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	2d bf       	out	0x3d, r18	; 61
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    2710:	8f ef       	ldi	r24, 0xFF	; 255
    2712:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00002a24 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    2a2e:	2f 93       	push	r18
    2a30:	1f 93       	push	r17
    2a32:	0f 93       	push	r16
    2a34:	6f 93       	push	r22
    2a36:	5f 93       	push	r21
    2a38:	4f 93       	push	r20
    2a3a:	8d e3       	ldi	r24, 0x3D	; 61
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	af 93       	push	r26
    2a42:	9f 93       	push	r25
    2a44:	8f 93       	push	r24
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <sprintf>
    return strlen(buffer);
    2a4e:	be 01       	movw	r22, r28
    2a50:	80 e8       	ldi	r24, 0x80	; 128
    2a52:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    2a56:	2d b7       	in	r18, 0x3d	; 61
    2a58:	3e b7       	in	r19, 0x3e	; 62
    2a5a:	25 5f       	subi	r18, 0xF5	; 245
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	3e bf       	out	0x3e, r19	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	2d bf       	out	0x3d, r18	; 61
}
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00002c7e <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    2c7e:	cf 92       	push	r12
    2c80:	df 92       	push	r13
    2c82:	ef 92       	push	r14
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    2c8e:	6b 01       	movw	r12, r22
    2c90:	80 e8       	ldi	r24, 0x80	; 128
    2c92:	e8 2e       	mov	r14, r24
    2c94:	8e 2d       	mov	r24, r14
    2c96:	b6 01       	movw	r22, r12
    2c98:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    2c9c:	40 97       	sbiw	r24, 0x10	; 16
    2c9e:	49 f4       	brne	.+18     	; 0x2cb2 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    2ca0:	2e 2d       	mov	r18, r14
    2ca2:	86 01       	movw	r16, r12
    2ca4:	43 e4       	ldi	r20, 0x43	; 67
    2ca6:	52 e0       	ldi	r21, 0x02	; 2
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	ce 01       	movw	r24, r28
    2cac:	0e 94 12 15 	call	0x2a24	; 0x2a24 <mac_set_parameter>
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    2cb2:	8f ef       	ldi	r24, 0xFF	; 255
    2cb4:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00002cc6 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    2cc6:	cf 92       	push	r12
    2cc8:	df 92       	push	r13
    2cca:	ef 92       	push	r14
    2ccc:	0f 93       	push	r16
    2cce:	1f 93       	push	r17
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
    2cd4:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    2cd6:	6b 01       	movw	r12, r22
    2cd8:	80 e8       	ldi	r24, 0x80	; 128
    2cda:	e8 2e       	mov	r14, r24
    2cdc:	8e 2d       	mov	r24, r14
    2cde:	b6 01       	movw	r22, r12
    2ce0:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    2ce4:	40 97       	sbiw	r24, 0x10	; 16
    2ce6:	49 f4       	brne	.+18     	; 0x2cfa <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    2ce8:	2e 2d       	mov	r18, r14
    2cea:	86 01       	movw	r16, r12
    2cec:	42 e5       	ldi	r20, 0x52	; 82
    2cee:	52 e0       	ldi	r21, 0x02	; 2
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	0e 94 12 15 	call	0x2a24	; 0x2a24 <mac_set_parameter>
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    2cfa:	8f ef       	ldi	r24, 0xFF	; 255
    2cfc:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
    2d0c:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00002d0e <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    2d1e:	6b 01       	movw	r12, r22
    2d20:	80 e8       	ldi	r24, 0x80	; 128
    2d22:	e8 2e       	mov	r14, r24
    2d24:	8e 2d       	mov	r24, r14
    2d26:	b6 01       	movw	r22, r12
    2d28:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    2d2c:	80 97       	sbiw	r24, 0x20	; 32
    2d2e:	49 f4       	brne	.+18     	; 0x2d42 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    2d30:	2e 2d       	mov	r18, r14
    2d32:	86 01       	movw	r16, r12
    2d34:	41 e6       	ldi	r20, 0x61	; 97
    2d36:	52 e0       	ldi	r21, 0x02	; 2
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <mac_set_parameter>
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00003408 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
	if(state==0){
    340c:	61 11       	cpse	r22, r1
    340e:	09 c0       	rjmp	.+18     	; 0x3422 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    3410:	00 e7       	ldi	r16, 0x70	; 112
    3412:	12 e0       	ldi	r17, 0x02	; 2
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	44 e7       	ldi	r20, 0x74	; 116
    3418:	52 e0       	ldi	r21, 0x02	; 2
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <mac_set_parameter>
    3420:	08 c0       	rjmp	.+16     	; 0x3432 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    3422:	00 e8       	ldi	r16, 0x80	; 128
    3424:	12 e0       	ldi	r17, 0x02	; 2
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	44 e7       	ldi	r20, 0x74	; 116
    342a:	52 e0       	ldi	r21, 0x02	; 2
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <mac_set_parameter>
	}
}
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00001c66 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	c7 56       	subi	r28, 0x67	; 103
    1c7a:	d1 09       	sbc	r29, r1
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    1c88:	9f ef       	ldi	r25, 0xFF	; 255
    1c8a:	96 0f       	add	r25, r22
    1c8c:	9f 3d       	cpi	r25, 0xDF	; 223
    1c8e:	68 f5       	brcc	.+90     	; 0x1cea <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	92 0f       	add	r25, r18
    1c94:	93 33       	cpi	r25, 0x33	; 51
    1c96:	60 f5       	brcc	.+88     	; 0x1cf0 <mac_tx_confirmed+0x8a>
    1c98:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	60 e8       	ldi	r22, 0x80	; 128
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    1ca8:	c7 01       	movw	r24, r14
    1caa:	a0 e8       	ldi	r26, 0x80	; 128
    1cac:	af 93       	push	r26
    1cae:	9f 93       	push	r25
    1cb0:	ef 92       	push	r14
    1cb2:	1f 92       	push	r1
    1cb4:	df 92       	push	r13
    1cb6:	83 e8       	ldi	r24, 0x83	; 131
    1cb8:	92 e0       	ldi	r25, 0x02	; 2
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	af 93       	push	r26
    1cbe:	9f 93       	push	r25
    1cc0:	8f 93       	push	r24
    1cc2:	8e e8       	ldi	r24, 0x8E	; 142
    1cc4:	92 e0       	ldi	r25, 0x02	; 2
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	af 93       	push	r26
    1cca:	9f 93       	push	r25
    1ccc:	8f 93       	push	r24
    1cce:	1f 93       	push	r17
    1cd0:	0f 93       	push	r16
    1cd2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <sprintf>
    
	
    return strlen(buffer);
    1cd6:	b8 01       	movw	r22, r16
    1cd8:	80 e8       	ldi	r24, 0x80	; 128
    1cda:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	9f ef       	ldi	r25, 0xFF	; 255
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1cf4:	c9 59       	subi	r28, 0x99	; 153
    1cf6:	df 4f       	sbci	r29, 0xFF	; 255
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	08 95       	ret

Disassembly of section .text.beginsWidth:

00002bec <beginsWidth>:
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    2bec:	6f 92       	push	r6
    2bee:	7f 92       	push	r7
    2bf0:	8f 92       	push	r8
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	3b 01       	movw	r6, r22
    2bfe:	88 2e       	mov	r8, r24
    2c00:	69 01       	movw	r12, r18
    2c02:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2c04:	84 2f       	mov	r24, r20
    2c06:	b9 01       	movw	r22, r18
    2c08:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    2c0c:	8c 01       	movw	r16, r24
    2c0e:	4e 2d       	mov	r20, r14
    2c10:	96 01       	movw	r18, r12
    2c12:	88 2d       	mov	r24, r8
    2c14:	b3 01       	movw	r22, r6
    2c16:	0e 94 c2 12 	call	0x2584	; 0x2584 <strncmp>
    2c1a:	21 e0       	ldi	r18, 0x01	; 1
    2c1c:	89 2b       	or	r24, r25
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <beginsWidth+0x36>
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	82 2f       	mov	r24, r18
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	8f 90       	pop	r8
    2c30:	7f 90       	pop	r7
    2c32:	6f 90       	pop	r6
    2c34:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000025ee <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	6b 01       	movw	r12, r22
    25f6:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    25f8:	2f ec       	ldi	r18, 0xCF	; 207
    25fa:	32 e0       	ldi	r19, 0x02	; 2
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    2602:	89 2b       	or	r24, r25
    2604:	e9 f0       	breq	.+58     	; 0x2640 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2606:	2a ed       	ldi	r18, 0xDA	; 218
    2608:	32 e0       	ldi	r19, 0x02	; 2
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	8e 2d       	mov	r24, r14
    260e:	b6 01       	movw	r22, r12
    2610:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    2614:	89 2b       	or	r24, r25
    2616:	b1 f0       	breq	.+44     	; 0x2644 <decode_tx_response+0x56>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2618:	22 ee       	ldi	r18, 0xE2	; 226
    261a:	32 e0       	ldi	r19, 0x02	; 2
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	8e 2d       	mov	r24, r14
    2620:	b6 01       	movw	r22, r12
    2622:	0e 94 f6 15 	call	0x2bec	; 0x2bec <beginsWidth>
    2626:	81 11       	cpse	r24, r1
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <decode_tx_response+0x5a>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
    262a:	29 ee       	ldi	r18, 0xE9	; 233
    262c:	32 e0       	ldi	r19, 0x02	; 2
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	8e 2d       	mov	r24, r14
    2632:	b6 01       	movw	r22, r12
    2634:	0e 94 f6 15 	call	0x2bec	; 0x2bec <beginsWidth>
    2638:	88 23       	and	r24, r24
    263a:	41 f0       	breq	.+16     	; 0x264c <decode_tx_response+0x5e>
    263c:	89 e0       	ldi	r24, 0x09	; 9
    263e:	07 c0       	rjmp	.+14     	; 0x264e <decode_tx_response+0x60>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2640:	87 e0       	ldi	r24, 0x07	; 7
    2642:	05 c0       	rjmp	.+10     	; 0x264e <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2644:	88 e0       	ldi	r24, 0x08	; 8
    2646:	03 c0       	rjmp	.+6      	; 0x264e <decode_tx_response+0x60>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	01 c0       	rjmp	.+2      	; 0x264e <decode_tx_response+0x60>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
    264c:	86 e0       	ldi	r24, 0x06	; 6
}
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12
    2654:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000013e4 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	28 97       	sbiw	r28, 0x08	; 8
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	d8 2e       	mov	r13, r24
    1404:	7b 01       	movw	r14, r22
    1406:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    1408:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    140a:	e1 2f       	mov	r30, r17
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	ea 30       	cpi	r30, 0x0A	; 10
    1410:	f1 05       	cpc	r31, r1
    1412:	d8 f7       	brcc	.-10     	; 0x140a <SU_send_uplink+0x26>
    1414:	e5 5b       	subi	r30, 0xB5	; 181
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    141c:	20 2f       	mov	r18, r16
    141e:	a7 01       	movw	r20, r14
    1420:	6d 2d       	mov	r22, r13
    1422:	80 e9       	ldi	r24, 0x90	; 144
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <mac_tx_confirmed>
				attach_ending(lm_msg);
    142a:	80 e9       	ldi	r24, 0x90	; 144
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <attach_ending>
				util_transmit_msg(lm_msg);
    1432:	80 e9       	ldi	r24, 0x90	; 144
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	ce 01       	movw	r24, r28
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    144a:	2a ef       	ldi	r18, 0xFA	; 250
    144c:	32 e0       	ldi	r19, 0x02	; 2
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    145a:	15 e0       	ldi	r17, 0x05	; 5
			break;
    145c:	d6 cf       	rjmp	.-84     	; 0x140a <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	64 e0       	ldi	r22, 0x04	; 4
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 66 1d 	call	0x3acc	; 0x3acc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    146e:	2d ef       	ldi	r18, 0xFD	; 253
    1470:	32 e0       	ldi	r19, 0x02	; 2
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    147e:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1480:	c4 cf       	rjmp	.-120    	; 0x140a <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    1482:	60 e9       	ldi	r22, 0x90	; 144
    1484:	72 e0       	ldi	r23, 0x02	; 2
    1486:	80 e8       	ldi	r24, 0x80	; 128
    1488:	0e 94 f7 12 	call	0x25ee	; 0x25ee <decode_tx_response>
    148c:	18 2f       	mov	r17, r24
			break;
    148e:	bd cf       	rjmp	.-134    	; 0x140a <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    1490:	85 e0       	ldi	r24, 0x05	; 5
    1492:	18 c0       	rjmp	.+48     	; 0x14c4 <SU_send_uplink+0xe0>
				
			case SU_INV_DATA_LEN:
				return LM_STATUS_INV_DATA_LEN;
    1494:	86 e0       	ldi	r24, 0x06	; 6
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <SU_send_uplink+0xe0>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <SU_send_uplink+0xe0>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    149c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <uart0_hal_message_ready>
    14a0:	88 23       	and	r24, r24
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <SU_send_uplink+0xc2>
    14a4:	b2 cf       	rjmp	.-156    	; 0x140a <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    14a6:	80 e9       	ldi	r24, 0x90	; 144
    14a8:	92 e0       	ldi	r25, 0x02	; 2
    14aa:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    14ae:	60 e9       	ldi	r22, 0x90	; 144
    14b0:	72 e0       	ldi	r23, 0x02	; 2
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 8d 13 	call	0x271a	; 0x271a <util_matchMessage>
    14ba:	18 2f       	mov	r17, r24
    14bc:	a6 cf       	rjmp	.-180    	; 0x140a <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <SU_send_uplink+0xe0>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    14c2:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    14c4:	28 96       	adiw	r28, 0x08	; 8
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00002b0c <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	5c e5       	ldi	r21, 0x5C	; 92
    2b10:	66 e2       	ldi	r22, 0x26	; 38
    2b12:	75 e0       	ldi	r23, 0x05	; 5
    2b14:	80 e9       	ldi	r24, 0x90	; 144
    2b16:	92 e0       	ldi	r25, 0x02	; 2
    2b18:	0e 94 5e 13 	call	0x26bc	; 0x26bc <sys_sleep_cmd>
	attach_ending(lm_msg);
    2b1c:	80 e9       	ldi	r24, 0x90	; 144
    2b1e:	92 e0       	ldi	r25, 0x02	; 2
    2b20:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <attach_ending>
	util_transmit_msg(lm_msg);
    2b24:	80 e9       	ldi	r24, 0x90	; 144
    2b26:	92 e0       	ldi	r25, 0x02	; 2
    2b28:	0e 94 05 1c 	call	0x380a	; 0x380a <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    2b2c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <uart0_hal_message_ready>
    2b30:	88 23       	and	r24, r24
    2b32:	e1 f3       	breq	.-8      	; 0x2b2c <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    2b34:	80 e9       	ldi	r24, 0x90	; 144
    2b36:	92 e0       	ldi	r25, 0x02	; 2
    2b38:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2b3c:	60 e9       	ldi	r22, 0x90	; 144
    2b3e:	72 e0       	ldi	r23, 0x02	; 2
    2b40:	80 e8       	ldi	r24, 0x80	; 128
    2b42:	21 e3       	ldi	r18, 0x31	; 49
    2b44:	33 e0       	ldi	r19, 0x03	; 3
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    2b4c:	89 2b       	or	r24, r25
    2b4e:	11 f4       	brne	.+4      	; 0x2b54 <SC_put_to_sleep+0x48>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	08 95       	ret
	return LM_STATUS_ERROR;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
}
    2b56:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00003340 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    3340:	85 e5       	ldi	r24, 0x55	; 85
    3342:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3346:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <uart0_hal_message_ready>
    334a:	88 23       	and	r24, r24
    334c:	e1 f3       	breq	.-8      	; 0x3346 <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    334e:	80 e9       	ldi	r24, 0x90	; 144
    3350:	92 e0       	ldi	r25, 0x02	; 2
    3352:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3356:	60 e9       	ldi	r22, 0x90	; 144
    3358:	72 e0       	ldi	r23, 0x02	; 2
    335a:	80 e8       	ldi	r24, 0x80	; 128
    335c:	21 e3       	ldi	r18, 0x31	; 49
    335e:	33 e0       	ldi	r19, 0x03	; 3
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    3366:	89 2b       	or	r24, r25
    3368:	11 f4       	brne	.+4      	; 0x336e <SC_wake_up+0x2e>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	08 95       	ret
	return LM_STATUS_ERROR;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

00002e6e <LM_strbeginswith>:
	}
	
	return LM_STATUS_FATAL_ERROR;
}

static bool LM_strbeginswith(char *s1, const char *s2){
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	ec 01       	movw	r28, r24
    2e7e:	6a 01       	movw	r12, r20
    2e80:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2e82:	86 2f       	mov	r24, r22
    2e84:	ba 01       	movw	r22, r20
    2e86:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    2e8a:	8c 01       	movw	r16, r24
    2e8c:	be 01       	movw	r22, r28
    2e8e:	80 e8       	ldi	r24, 0x80	; 128
    2e90:	4e 2d       	mov	r20, r14
    2e92:	96 01       	movw	r18, r12
    2e94:	0e 94 c2 12 	call	0x2584	; 0x2584 <strncmp>
    2e98:	21 e0       	ldi	r18, 0x01	; 1
    2e9a:	89 2b       	or	r24, r25
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <LM_strbeginswith+0x32>
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	82 2f       	mov	r24, r18
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ef 90       	pop	r14
    2eac:	df 90       	pop	r13
    2eae:	cf 90       	pop	r12
    2eb0:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00003acc <util_setPendingStates>:




void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    3acc:	fc 01       	movw	r30, r24
    3ace:	71 83       	std	Z+1, r23	; 0x01
    3ad0:	60 83       	st	Z, r22
	sd->failure_state=failed;
    3ad2:	53 83       	std	Z+3, r21	; 0x03
    3ad4:	42 83       	std	Z+2, r20	; 0x02
    3ad6:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

00003ad8 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    3ad8:	fc 01       	movw	r30, r24
    3ada:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    3adc:	25 83       	std	Z+5, r18	; 0x05
    3ade:	36 83       	std	Z+6, r19	; 0x06
    3ae0:	47 83       	std	Z+7, r20	; 0x07
    3ae2:	08 95       	ret

Disassembly of section .text.util_matchMessage:

0000271a <util_matchMessage>:
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	ec 01       	movw	r28, r24
    2720:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	91 30       	cpi	r25, 0x01	; 1
    2726:	91 f0       	breq	.+36     	; 0x274c <util_matchMessage+0x32>
    2728:	18 f0       	brcs	.+6      	; 0x2730 <util_matchMessage+0x16>
    272a:	92 30       	cpi	r25, 0x02	; 2
    272c:	e9 f0       	breq	.+58     	; 0x2768 <util_matchMessage+0x4e>
    272e:	1f c0       	rjmp	.+62     	; 0x276e <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    2730:	2d 81       	ldd	r18, Y+5	; 0x05
    2732:	3e 81       	ldd	r19, Y+6	; 0x06
    2734:	4f 81       	ldd	r20, Y+7	; 0x07
    2736:	80 e8       	ldi	r24, 0x80	; 128
    2738:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    273c:	89 2b       	or	r24, r25
    273e:	19 f4       	brne	.+6      	; 0x2746 <util_matchMessage+0x2c>
    2740:	88 81       	ld	r24, Y
    2742:	99 81       	ldd	r25, Y+1	; 0x01
    2744:	16 c0       	rjmp	.+44     	; 0x2772 <util_matchMessage+0x58>
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	9b 81       	ldd	r25, Y+3	; 0x03
    274a:	13 c0       	rjmp	.+38     	; 0x2772 <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    274c:	4d 81       	ldd	r20, Y+5	; 0x05
    274e:	5e 81       	ldd	r21, Y+6	; 0x06
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	cf 01       	movw	r24, r30
    2754:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <LM_strbeginswith>
    2758:	88 23       	and	r24, r24
    275a:	19 f0       	breq	.+6      	; 0x2762 <util_matchMessage+0x48>
    275c:	88 81       	ld	r24, Y
    275e:	99 81       	ldd	r25, Y+1	; 0x01
    2760:	08 c0       	rjmp	.+16     	; 0x2772 <util_matchMessage+0x58>
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	9b 81       	ldd	r25, Y+3	; 0x03
    2766:	05 c0       	rjmp	.+10     	; 0x2772 <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    2768:	88 81       	ld	r24, Y
    276a:	99 81       	ldd	r25, Y+1	; 0x01
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

0000380a <util_transmit_msg>:

void util_transmit_msg(char msg[]){
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    3810:	bc 01       	movw	r22, r24
    3812:	80 e8       	ldi	r24, 0x80	; 128
    3814:	0e 94 92 1a 	call	0x3524	; 0x3524 <strlen>
    3818:	68 2f       	mov	r22, r24
    381a:	ce 01       	movw	r24, r28
    381c:	0e 94 53 19 	call	0x32a6	; 0x32a6 <uart0_hal_send_message>
}
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	08 95       	ret

Disassembly of section .text.util_read_msg:

00003b90 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
    3b90:	0e 94 bd 1a 	call	0x357a	; 0x357a <uart0_hal_read_message_as_str>
    3b94:	08 95       	ret

Disassembly of section .text.util_parse_err:

0000288c <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2892:	6c 01       	movw	r12, r24
    2894:	20 e8       	ldi	r18, 0x80	; 128
    2896:	e2 2e       	mov	r14, r18
    2898:	27 e0       	ldi	r18, 0x07	; 7
    289a:	33 e0       	ldi	r19, 0x03	; 3
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	8e 2d       	mov	r24, r14
    28a0:	b6 01       	movw	r22, r12
    28a2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    28a6:	89 2b       	or	r24, r25
    28a8:	a1 f0       	breq	.+40     	; 0x28d2 <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    28aa:	22 e1       	ldi	r18, 0x12	; 18
    28ac:	33 e0       	ldi	r19, 0x03	; 3
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	8e 2d       	mov	r24, r14
    28b2:	b6 01       	movw	r22, r12
    28b4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    28b8:	89 2b       	or	r24, r25
    28ba:	69 f0       	breq	.+26     	; 0x28d6 <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    28bc:	29 e1       	ldi	r18, 0x19	; 25
    28be:	33 e0       	ldi	r19, 0x03	; 3
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	8e 2d       	mov	r24, r14
    28c4:	b6 01       	movw	r22, r12
    28c6:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <strcmp>
    28ca:	89 2b       	or	r24, r25
    28cc:	31 f4       	brne	.+12     	; 0x28da <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    28ce:	84 e0       	ldi	r24, 0x04	; 4
    28d0:	05 c0       	rjmp	.+10     	; 0x28dc <util_parse_err+0x50>
	uart0_hal_read_message_as_str((uint8_t*) msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    28d2:	83 e0       	ldi	r24, 0x03	; 3
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    28d6:	83 e0       	ldi	r24, 0x03	; 3
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    28da:	82 e0       	ldi	r24, 0x02	; 2
}
    28dc:	ef 90       	pop	r14
    28de:	df 90       	pop	r13
    28e0:	cf 90       	pop	r12
    28e2:	08 95       	ret

Disassembly of section .text.get_group_id:

00003b96 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    3b96:	80 91 bf 0d 	lds	r24, 0x0DBF	; 0x800dbf <_groupId>
    3b9a:	08 95       	ret

Disassembly of section .text.set_group_id:

00003b9c <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    3b9c:	80 93 bf 0d 	sts	0x0DBF, r24	; 0x800dbf <_groupId>
    3ba0:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00003372 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    3372:	0f 93       	push	r16
    3374:	1f 93       	push	r17
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	8c 01       	movw	r16, r24
    337c:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    337e:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <get_group_id>
    3382:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    3384:	2d 2f       	mov	r18, r29
    3386:	a8 01       	movw	r20, r16
    3388:	68 2f       	mov	r22, r24
    338a:	88 e5       	ldi	r24, 0x58	; 88
    338c:	93 e0       	ldi	r25, 0x03	; 3
    338e:	0e 94 21 06 	call	0xc42	; 0xc42 <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	8c 0f       	add	r24, r28
    3396:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <set_group_id>
}
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	1f 91       	pop	r17
    33a0:	0f 91       	pop	r16
    33a2:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000024aa <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	2a 97       	sbiw	r28, 0x0a	; 10
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	18 2f       	mov	r17, r24
    24c6:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    24c8:	9e 01       	movw	r18, r28
    24ca:	2f 5f       	subi	r18, 0xFF	; 255
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	ab 01       	movw	r20, r22
    24d0:	68 2f       	mov	r22, r24
    24d2:	88 e5       	ldi	r24, 0x58	; 88
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	0e 94 a8 10 	call	0x2150	; 0x2150 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    24da:	9e 01       	movw	r18, r28
    24dc:	27 5f       	subi	r18, 0xF7	; 247
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
    24e0:	ae 01       	movw	r20, r28
    24e2:	49 5f       	subi	r20, 0xF9	; 249
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	61 2f       	mov	r22, r17
    24e8:	88 e5       	ldi	r24, 0x58	; 88
    24ea:	93 e0       	ldi	r25, 0x03	; 3
    24ec:	0e 94 cd 18 	call	0x319a	; 0x319a <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    24f0:	29 85       	ldd	r18, Y+9	; 0x09
    24f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    24f4:	4f 81       	ldd	r20, Y+7	; 0x07
    24f6:	58 85       	ldd	r21, Y+8	; 0x08
    24f8:	b7 01       	movw	r22, r14
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	0e 94 5f 10 	call	0x20be	; 0x20be <mrpp_data_add_int16>
}
    2502:	2a 96       	adiw	r28, 0x0a	; 10
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00003634 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    363a:	88 e5       	ldi	r24, 0x58	; 88
    363c:	93 e0       	ldi	r25, 0x03	; 3
    363e:	0e 94 34 1a 	call	0x3468	; 0x3468 <mrpp_state_is_body_ready>
    3642:	88 83       	st	Y, r24
    3644:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    3646:	89 2f       	mov	r24, r25
    3648:	80 95       	com	r24
    
}
    364a:	88 1f       	adc	r24, r24
    364c:	88 27       	eor	r24, r24
    364e:	88 1f       	adc	r24, r24
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00002028 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 d0       	rcall	.+0      	; 0x203e <MRPP_get_ready_body_package+0x16>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <MRPP_get_ready_body_package+0x18>
    2040:	1f 92       	push	r1
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	6b 01       	movw	r12, r22
    2048:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    204a:	9e 01       	movw	r18, r28
    204c:	2b 5f       	subi	r18, 0xFB	; 251
    204e:	3f 4f       	sbci	r19, 0xFF	; 255
    2050:	79 01       	movw	r14, r18
    2052:	8e 01       	movw	r16, r28
    2054:	0d 5f       	subi	r16, 0xFD	; 253
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	23 50       	subi	r18, 0x03	; 3
    205a:	31 09       	sbc	r19, r1
    205c:	ae 01       	movw	r20, r28
    205e:	4f 5f       	subi	r20, 0xFF	; 255
    2060:	5f 4f       	sbci	r21, 0xFF	; 255
    2062:	bc 01       	movw	r22, r24
    2064:	88 e5       	ldi	r24, 0x58	; 88
    2066:	93 e0       	ldi	r25, 0x03	; 3
    2068:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    206c:	88 23       	and	r24, r24
    206e:	b1 f0       	breq	.+44     	; 0x209c <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    2070:	4d 81       	ldd	r20, Y+5	; 0x05
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	84 0f       	add	r24, r20
    2076:	f5 01       	movw	r30, r10
    2078:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    207a:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    207e:	f6 01       	movw	r30, r12
    2080:	80 83       	st	Z, r24
    package[1]=subId;
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	6b 81       	ldd	r22, Y+3	; 0x03
    208e:	7c 81       	ldd	r23, Y+4	; 0x04
    2090:	c6 01       	movw	r24, r12
    2092:	03 96       	adiw	r24, 0x03	; 3
    2094:	0e 94 1c 1a 	call	0x3438	; 0x3438 <mrpp_data_get>

    return true;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	01 c0       	rjmp	.+2      	; 0x209e <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    209c:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

00003ae4 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    3ae4:	bc 01       	movw	r22, r24
    3ae6:	88 e5       	ldi	r24, 0x58	; 88
    3ae8:	93 e0       	ldi	r25, 0x03	; 3
    3aea:	0e 94 9e 1b 	call	0x373c	; 0x373c <mrpp_state_set_body_sent>
    3aee:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00003656 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    365c:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3660:	fc 01       	movw	r30, r24
    3662:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    3664:	bf 01       	movw	r22, r30
    3666:	88 e5       	ldi	r24, 0x58	; 88
    3668:	93 e0       	ldi	r25, 0x03	; 3
    366a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <mrpp_state_get_header>
    *package_length+=1;
    366e:	8f 5f       	subi	r24, 0xFF	; 255
    3670:	88 83       	st	Y, r24
}
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003678 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    367e:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3682:	fc 01       	movw	r30, r24
    3684:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    3686:	bf 01       	movw	r22, r30
    3688:	88 e5       	ldi	r24, 0x58	; 88
    368a:	93 e0       	ldi	r25, 0x03	; 3
    368c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <mrpp_state_get_tail>
    *package_length+=1;
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	88 83       	st	Y, r24
}
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00003b32 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    3b32:	88 e5       	ldi	r24, 0x58	; 88
    3b34:	93 e0       	ldi	r25, 0x03	; 3
    3b36:	0e 94 a8 1a 	call	0x3550	; 0x3550 <mrpp_state_all_bodies_sent>
}
    3b3a:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000020be <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    20ce:	94 2f       	mov	r25, r20
    20d0:	0c c0       	rjmp	.+24     	; 0x20ea <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    20d2:	c9 2f       	mov	r28, r25
    20d4:	d0 e0       	ldi	r29, 0x00	; 0
    20d6:	e4 1b       	sub	r30, r20
    20d8:	f5 0b       	sbc	r31, r21
    20da:	ea 0f       	add	r30, r26
    20dc:	fb 1f       	adc	r31, r27
    20de:	80 81       	ld	r24, Z
    20e0:	fe 01       	movw	r30, r28
    20e2:	ee 50       	subi	r30, 0x0E	; 14
    20e4:	fc 4f       	sbci	r31, 0xFC	; 252
    20e6:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    20e8:	9f 5f       	subi	r25, 0xFF	; 255
    20ea:	e9 2f       	mov	r30, r25
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	6a 01       	movw	r12, r20
    20f0:	86 e0       	ldi	r24, 0x06	; 6
    20f2:	c8 0e       	add	r12, r24
    20f4:	d1 1c       	adc	r13, r1
    20f6:	ec 15       	cp	r30, r12
    20f8:	fd 05       	cpc	r31, r13
    20fa:	58 f3       	brcs	.-42     	; 0x20d2 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    20fc:	26 50       	subi	r18, 0x06	; 6
    20fe:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    2100:	36 95       	lsr	r19
    2102:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    2104:	49 5f       	subi	r20, 0xF9	; 249
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	16 c0       	rjmp	.+44     	; 0x213a <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    210e:	cd 01       	movw	r24, r26
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	f6 01       	movw	r30, r12
    2116:	e8 0f       	add	r30, r24
    2118:	f9 1f       	adc	r31, r25
    211a:	8b 01       	movw	r16, r22
    211c:	08 0f       	add	r16, r24
    211e:	19 1f       	adc	r17, r25
    2120:	e8 01       	movw	r28, r16
    2122:	f9 80       	ldd	r15, Y+1	; 0x01
    2124:	ee 50       	subi	r30, 0x0E	; 14
    2126:	fc 4f       	sbci	r31, 0xFC	; 252
    2128:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    212a:	84 0f       	add	r24, r20
    212c:	95 1f       	adc	r25, r21
    212e:	18 81       	ld	r17, Y
    2130:	fc 01       	movw	r30, r24
    2132:	ee 50       	subi	r30, 0x0E	; 14
    2134:	fc 4f       	sbci	r31, 0xFC	; 252
    2136:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	a2 17       	cp	r26, r18
    213c:	b3 07       	cpc	r27, r19
    213e:	38 f3       	brcs	.-50     	; 0x210e <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	df 90       	pop	r13
    214c:	cf 90       	pop	r12
    214e:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003438 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	0c c0       	rjmp	.+24     	; 0x345c <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    3444:	de 01       	movw	r26, r28
    3446:	a2 0f       	add	r26, r18
    3448:	b3 1f       	adc	r27, r19
    344a:	f9 01       	movw	r30, r18
    344c:	e6 0f       	add	r30, r22
    344e:	f7 1f       	adc	r31, r23
    3450:	ee 50       	subi	r30, 0x0E	; 14
    3452:	fc 4f       	sbci	r31, 0xFC	; 252
    3454:	90 81       	ld	r25, Z
    3456:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	24 17       	cp	r18, r20
    345e:	35 07       	cpc	r19, r21
    3460:	88 f3       	brcs	.-30     	; 0x3444 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	08 95       	ret

Disassembly of section .text.add_data_types:

0000179e <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	dc 01       	movw	r26, r24
    17b0:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    17b6:	c1 2c       	mov	r12, r1
    17b8:	d1 2c       	mov	r13, r1
    17ba:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    17bc:	4a c0       	rjmp	.+148    	; 0x1852 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    17be:	29 2f       	mov	r18, r25
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	f9 01       	movw	r30, r18
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	22 0f       	add	r18, r18
    17ca:	33 1f       	adc	r19, r19
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	22 0f       	add	r18, r18
    17d2:	33 1f       	adc	r19, r19
    17d4:	e2 0f       	add	r30, r18
    17d6:	f3 1f       	adc	r31, r19
    17d8:	ea 0f       	add	r30, r26
    17da:	fb 1f       	adc	r31, r27
    17dc:	27 81       	ldd	r18, Z+7	; 0x07
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	a9 f0       	breq	.+42     	; 0x180c <add_data_types+0x6e>
    17e2:	24 30       	cpi	r18, 0x04	; 4
    17e4:	21 f1       	breq	.+72     	; 0x182e <add_data_types+0x90>
    17e6:	21 30       	cpi	r18, 0x01	; 1
    17e8:	91 f5       	brne	.+100    	; 0x184e <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    17ea:	01 e0       	ldi	r16, 0x01	; 1
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	04 2e       	mov	r0, r20
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <add_data_types+0x58>
    17f2:	00 0f       	add	r16, r16
    17f4:	11 1f       	adc	r17, r17
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <add_data_types+0x54>
    17fa:	01 2e       	mov	r0, r17
    17fc:	00 0c       	add	r0, r0
    17fe:	22 0b       	sbc	r18, r18
    1800:	33 0b       	sbc	r19, r19
    1802:	c0 2a       	or	r12, r16
    1804:	d1 2a       	or	r13, r17
    1806:	e2 2a       	or	r14, r18
    1808:	f3 2a       	or	r15, r19
                break;
    180a:	21 c0       	rjmp	.+66     	; 0x184e <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    180c:	02 e0       	ldi	r16, 0x02	; 2
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	04 2e       	mov	r0, r20
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <add_data_types+0x7a>
    1814:	00 0f       	add	r16, r16
    1816:	11 1f       	adc	r17, r17
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <add_data_types+0x76>
    181c:	01 2e       	mov	r0, r17
    181e:	00 0c       	add	r0, r0
    1820:	22 0b       	sbc	r18, r18
    1822:	33 0b       	sbc	r19, r19
    1824:	c0 2a       	or	r12, r16
    1826:	d1 2a       	or	r13, r17
    1828:	e2 2a       	or	r14, r18
    182a:	f3 2a       	or	r15, r19
                break;
    182c:	10 c0       	rjmp	.+32     	; 0x184e <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    182e:	03 e0       	ldi	r16, 0x03	; 3
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	04 2e       	mov	r0, r20
    1834:	02 c0       	rjmp	.+4      	; 0x183a <add_data_types+0x9c>
    1836:	00 0f       	add	r16, r16
    1838:	11 1f       	adc	r17, r17
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <add_data_types+0x98>
    183e:	01 2e       	mov	r0, r17
    1840:	00 0c       	add	r0, r0
    1842:	22 0b       	sbc	r18, r18
    1844:	33 0b       	sbc	r19, r19
    1846:	c0 2a       	or	r12, r16
    1848:	d1 2a       	or	r13, r17
    184a:	e2 2a       	or	r14, r18
    184c:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    184e:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1850:	9f 5f       	subi	r25, 0xFF	; 255
    1852:	12 96       	adiw	r26, 0x02	; 2
    1854:	8c 91       	ld	r24, X
    1856:	12 97       	sbiw	r26, 0x02	; 2
    1858:	98 17       	cp	r25, r24
    185a:	08 f4       	brcc	.+2      	; 0x185e <add_data_types+0xc0>
    185c:	b0 cf       	rjmp	.-160    	; 0x17be <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    185e:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    1860:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1862:	cd 82       	std	Y+5, r12	; 0x05
} 
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	08 95       	ret

Disassembly of section .text.update_bodies:

00000e00 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 e00:	cf 93       	push	r28
 e02:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 e04:	26 2f       	mov	r18, r22
 e06:	30 e0       	ldi	r19, 0x00	; 0
 e08:	c9 01       	movw	r24, r18
 e0a:	01 97       	sbiw	r24, 0x01	; 1
 e0c:	f9 01       	movw	r30, r18
 e0e:	ee 0f       	add	r30, r30
 e10:	ff 1f       	adc	r31, r31
 e12:	22 0f       	add	r18, r18
 e14:	33 1f       	adc	r19, r19
 e16:	22 0f       	add	r18, r18
 e18:	33 1f       	adc	r19, r19
 e1a:	22 0f       	add	r18, r18
 e1c:	33 1f       	adc	r19, r19
 e1e:	e2 0f       	add	r30, r18
 e20:	f3 1f       	adc	r31, r19
 e22:	ea 0f       	add	r30, r26
 e24:	fb 1f       	adc	r31, r27
 e26:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
 e28:	c0 e0       	ldi	r28, 0x00	; 0
 e2a:	25 c0       	rjmp	.+74     	; 0xe76 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
 e2c:	82 17       	cp	r24, r18
 e2e:	93 07       	cpc	r25, r19
 e30:	09 f1       	breq	.+66     	; 0xe74 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
 e32:	a9 01       	movw	r20, r18
 e34:	44 0f       	add	r20, r20
 e36:	55 1f       	adc	r21, r21
 e38:	44 0f       	add	r20, r20
 e3a:	55 1f       	adc	r21, r21
 e3c:	44 0f       	add	r20, r20
 e3e:	55 1f       	adc	r21, r21
 e40:	f9 01       	movw	r30, r18
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	e4 0f       	add	r30, r20
 e48:	f5 1f       	adc	r31, r21
 e4a:	ea 0f       	add	r30, r26
 e4c:	fb 1f       	adc	r31, r27
 e4e:	43 85       	ldd	r20, Z+11	; 0x0b
 e50:	74 13       	cpse	r23, r20
 e52:	10 c0       	rjmp	.+32     	; 0xe74 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
 e54:	f9 01       	movw	r30, r18
 e56:	ee 0f       	add	r30, r30
 e58:	ff 1f       	adc	r31, r31
 e5a:	22 0f       	add	r18, r18
 e5c:	33 1f       	adc	r19, r19
 e5e:	22 0f       	add	r18, r18
 e60:	33 1f       	adc	r19, r19
 e62:	22 0f       	add	r18, r18
 e64:	33 1f       	adc	r19, r19
 e66:	e2 0f       	add	r30, r18
 e68:	f3 1f       	adc	r31, r19
 e6a:	ea 0f       	add	r30, r26
 e6c:	fb 1f       	adc	r31, r27
 e6e:	24 85       	ldd	r18, Z+12	; 0x0c
 e70:	23 30       	cpi	r18, 0x03	; 3
 e72:	41 f4       	brne	.+16     	; 0xe84 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 e74:	cf 5f       	subi	r28, 0xFF	; 255
 e76:	2c 2f       	mov	r18, r28
 e78:	30 e0       	ldi	r19, 0x00	; 0
 e7a:	28 17       	cp	r18, r24
 e7c:	39 07       	cpc	r19, r25
 e7e:	b4 f2       	brlt	.-84     	; 0xe2c <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 e80:	21 e0       	ldi	r18, 0x01	; 1
 e82:	01 c0       	rjmp	.+2      	; 0xe86 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 e84:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 e86:	22 23       	and	r18, r18
 e88:	39 f0       	breq	.+14     	; 0xe98 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
 e8a:	fd 01       	movw	r30, r26
 e8c:	e7 0f       	add	r30, r23
 e8e:	f1 1d       	adc	r31, r1
 e90:	e4 58       	subi	r30, 0x84	; 132
 e92:	ff 4f       	sbci	r31, 0xFF	; 255
 e94:	21 e0       	ldi	r18, 0x01	; 1
 e96:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 e98:	9c 01       	movw	r18, r24
 e9a:	22 0f       	add	r18, r18
 e9c:	33 1f       	adc	r19, r19
 e9e:	22 0f       	add	r18, r18
 ea0:	33 1f       	adc	r19, r19
 ea2:	22 0f       	add	r18, r18
 ea4:	33 1f       	adc	r19, r19
 ea6:	fc 01       	movw	r30, r24
 ea8:	ee 0f       	add	r30, r30
 eaa:	ff 1f       	adc	r31, r31
 eac:	e2 0f       	add	r30, r18
 eae:	f3 1f       	adc	r31, r19
 eb0:	ea 0f       	add	r30, r26
 eb2:	fb 1f       	adc	r31, r27
 eb4:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 eb6:	29 c0       	rjmp	.+82     	; 0xf0a <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
 eb8:	46 2f       	mov	r20, r22
 eba:	50 e0       	ldi	r21, 0x00	; 0
 ebc:	84 17       	cp	r24, r20
 ebe:	95 07       	cpc	r25, r21
 ec0:	19 f1       	breq	.+70     	; 0xf08 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
 ec2:	9a 01       	movw	r18, r20
 ec4:	2f 5f       	subi	r18, 0xFF	; 255
 ec6:	3f 4f       	sbci	r19, 0xFF	; 255
 ec8:	f9 01       	movw	r30, r18
 eca:	ee 0f       	add	r30, r30
 ecc:	ff 1f       	adc	r31, r31
 ece:	22 0f       	add	r18, r18
 ed0:	33 1f       	adc	r19, r19
 ed2:	22 0f       	add	r18, r18
 ed4:	33 1f       	adc	r19, r19
 ed6:	22 0f       	add	r18, r18
 ed8:	33 1f       	adc	r19, r19
 eda:	e2 0f       	add	r30, r18
 edc:	f3 1f       	adc	r31, r19
 ede:	ea 0f       	add	r30, r26
 ee0:	fb 1f       	adc	r31, r27
 ee2:	20 81       	ld	r18, Z
 ee4:	c2 13       	cpse	r28, r18
 ee6:	10 c0       	rjmp	.+32     	; 0xf08 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
 ee8:	fa 01       	movw	r30, r20
 eea:	ee 0f       	add	r30, r30
 eec:	ff 1f       	adc	r31, r31
 eee:	44 0f       	add	r20, r20
 ef0:	55 1f       	adc	r21, r21
 ef2:	44 0f       	add	r20, r20
 ef4:	55 1f       	adc	r21, r21
 ef6:	44 0f       	add	r20, r20
 ef8:	55 1f       	adc	r21, r21
 efa:	e4 0f       	add	r30, r20
 efc:	f5 1f       	adc	r31, r21
 efe:	ea 0f       	add	r30, r26
 f00:	fb 1f       	adc	r31, r27
 f02:	24 85       	ldd	r18, Z+12	; 0x0c
 f04:	23 30       	cpi	r18, 0x03	; 3
 f06:	41 f4       	brne	.+16     	; 0xf18 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 f08:	6f 5f       	subi	r22, 0xFF	; 255
 f0a:	12 96       	adiw	r26, 0x02	; 2
 f0c:	2c 91       	ld	r18, X
 f0e:	12 97       	sbiw	r26, 0x02	; 2
 f10:	62 17       	cp	r22, r18
 f12:	90 f2       	brcs	.-92     	; 0xeb8 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 f14:	81 e0       	ldi	r24, 0x01	; 1
 f16:	01 c0       	rjmp	.+2      	; 0xf1a <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 f18:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 f1a:	88 23       	and	r24, r24
 f1c:	41 f0       	breq	.+16     	; 0xf2e <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
 f1e:	fd 01       	movw	r30, r26
 f20:	ec 0f       	add	r30, r28
 f22:	f1 1d       	adc	r31, r1
 f24:	e4 58       	subi	r30, 0x84	; 132
 f26:	ff 4f       	sbci	r31, 0xFF	; 255
 f28:	81 e0       	ldi	r24, 0x01	; 1
 f2a:	80 83       	st	Z, r24
 f2c:	06 c0       	rjmp	.+12     	; 0xf3a <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 f2e:	fd 01       	movw	r30, r26
 f30:	ec 0f       	add	r30, r28
 f32:	f1 1d       	adc	r31, r1
 f34:	e4 58       	subi	r30, 0x84	; 132
 f36:	ff 4f       	sbci	r31, 0xFF	; 255
 f38:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 f3a:	8c 2f       	mov	r24, r28
 f3c:	90 e0       	ldi	r25, 0x00	; 0
 f3e:	87 1b       	sub	r24, r23
 f40:	91 09       	sbc	r25, r1
 f42:	02 97       	sbiw	r24, 0x02	; 2
 f44:	64 f0       	brlt	.+24     	; 0xf5e <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f46:	7f 5f       	subi	r23, 0xFF	; 255
 f48:	08 c0       	rjmp	.+16     	; 0xf5a <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
 f4a:	fd 01       	movw	r30, r26
 f4c:	e7 0f       	add	r30, r23
 f4e:	f1 1d       	adc	r31, r1
 f50:	e4 58       	subi	r30, 0x84	; 132
 f52:	ff 4f       	sbci	r31, 0xFF	; 255
 f54:	81 e0       	ldi	r24, 0x01	; 1
 f56:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f58:	7f 5f       	subi	r23, 0xFF	; 255
 f5a:	7c 17       	cp	r23, r28
 f5c:	b0 f3       	brcs	.-20     	; 0xf4a <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
 f5e:	cf 91       	pop	r28
 f60:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000c42 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 c42:	af 92       	push	r10
 c44:	bf 92       	push	r11
 c46:	cf 92       	push	r12
 c48:	df 92       	push	r13
 c4a:	ef 92       	push	r14
 c4c:	ff 92       	push	r15
 c4e:	0f 93       	push	r16
 c50:	1f 93       	push	r17
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
 c56:	ec 01       	movw	r28, r24
 c58:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 c5a:	68 83       	st	Y, r22
    state->nCollections=nCollections;
 c5c:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 c5e:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 c60:	00 e0       	ldi	r16, 0x00	; 0
 c62:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 c64:	8f c0       	rjmp	.+286    	; 0xd84 <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 c66:	ed 2d       	mov	r30, r13
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	cf 01       	movw	r24, r30
 c6c:	88 0f       	add	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	88 0f       	add	r24, r24
 c72:	99 1f       	adc	r25, r25
 c74:	8e 0f       	add	r24, r30
 c76:	9f 1f       	adc	r25, r31
 c78:	84 0f       	add	r24, r20
 c7a:	95 1f       	adc	r25, r21
 c7c:	dc 01       	movw	r26, r24
 c7e:	12 96       	adiw	r26, 0x02	; 2
 c80:	6d 91       	ld	r22, X+
 c82:	7c 91       	ld	r23, X
 c84:	13 97       	sbiw	r26, 0x03	; 3
 c86:	df 01       	movw	r26, r30
 c88:	aa 0f       	add	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	9f 01       	movw	r18, r30
 c8e:	22 0f       	add	r18, r18
 c90:	33 1f       	adc	r19, r19
 c92:	22 0f       	add	r18, r18
 c94:	33 1f       	adc	r19, r19
 c96:	22 0f       	add	r18, r18
 c98:	33 1f       	adc	r19, r19
 c9a:	a2 0f       	add	r26, r18
 c9c:	b3 1f       	adc	r27, r19
 c9e:	5d 01       	movw	r10, r26
 ca0:	ac 0e       	add	r10, r28
 ca2:	bd 1e       	adc	r11, r29
 ca4:	d5 01       	movw	r26, r10
 ca6:	19 96       	adiw	r26, 0x09	; 9
 ca8:	7c 93       	st	X, r23
 caa:	6e 93       	st	-X, r22
 cac:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
 cae:	dc 01       	movw	r26, r24
 cb0:	14 96       	adiw	r26, 0x04	; 4
 cb2:	2c 91       	ld	r18, X
 cb4:	d5 01       	movw	r26, r10
 cb6:	17 96       	adiw	r26, 0x07	; 7
 cb8:	2c 93       	st	X, r18
 cba:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 cbc:	14 96       	adiw	r26, 0x04	; 4
 cbe:	1c 93       	st	X, r17
 cc0:	0e 93       	st	-X, r16
 cc2:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 cc4:	dc 01       	movw	r26, r24
 cc6:	2d 91       	ld	r18, X+
 cc8:	3c 91       	ld	r19, X
 cca:	11 97       	sbiw	r26, 0x01	; 1
 ccc:	14 96       	adiw	r26, 0x04	; 4
 cce:	8c 91       	ld	r24, X
 cd0:	82 9f       	mul	r24, r18
 cd2:	70 01       	movw	r14, r0
 cd4:	83 9f       	mul	r24, r19
 cd6:	f0 0c       	add	r15, r0
 cd8:	11 24       	eor	r1, r1
 cda:	b6 e0       	ldi	r27, 0x06	; 6
 cdc:	eb 0e       	add	r14, r27
 cde:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
 ce0:	d5 01       	movw	r26, r10
 ce2:	16 96       	adiw	r26, 0x06	; 6
 ce4:	fc 92       	st	X, r15
 ce6:	ee 92       	st	-X, r14
 ce8:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 cea:	98 01       	movw	r18, r16
 cec:	ab ea       	ldi	r26, 0xAB	; 171
 cee:	ba ea       	ldi	r27, 0xAA	; 170
 cf0:	0e 94 bd 1b 	call	0x377a	; 0x377a <__umulhisi3>
 cf4:	96 95       	lsr	r25
 cf6:	87 95       	ror	r24
 cf8:	92 95       	swap	r25
 cfa:	82 95       	swap	r24
 cfc:	8f 70       	andi	r24, 0x0F	; 15
 cfe:	89 27       	eor	r24, r25
 d00:	9f 70       	andi	r25, 0x0F	; 15
 d02:	89 27       	eor	r24, r25
 d04:	9f 01       	movw	r18, r30
 d06:	2f 5f       	subi	r18, 0xFF	; 255
 d08:	3f 4f       	sbci	r19, 0xFF	; 255
 d0a:	d9 01       	movw	r26, r18
 d0c:	aa 0f       	add	r26, r26
 d0e:	bb 1f       	adc	r27, r27
 d10:	22 0f       	add	r18, r18
 d12:	33 1f       	adc	r19, r19
 d14:	22 0f       	add	r18, r18
 d16:	33 1f       	adc	r19, r19
 d18:	22 0f       	add	r18, r18
 d1a:	33 1f       	adc	r19, r19
 d1c:	a2 0f       	add	r26, r18
 d1e:	b3 1f       	adc	r27, r19
 d20:	ac 0f       	add	r26, r28
 d22:	bd 1f       	adc	r27, r29
 d24:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
 d26:	0e 0d       	add	r16, r14
 d28:	1f 1d       	adc	r17, r15
 d2a:	98 01       	movw	r18, r16
 d2c:	ab ea       	ldi	r26, 0xAB	; 171
 d2e:	ba ea       	ldi	r27, 0xAA	; 170
 d30:	0e 94 bd 1b 	call	0x377a	; 0x377a <__umulhisi3>
 d34:	7c 01       	movw	r14, r24
 d36:	f6 94       	lsr	r15
 d38:	e7 94       	ror	r14
 d3a:	f6 94       	lsr	r15
 d3c:	e7 94       	ror	r14
 d3e:	f6 94       	lsr	r15
 d40:	e7 94       	ror	r14
 d42:	f6 94       	lsr	r15
 d44:	e7 94       	ror	r14
 d46:	f6 94       	lsr	r15
 d48:	e7 94       	ror	r14
 d4a:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
 d4c:	20 e3       	ldi	r18, 0x30	; 48
 d4e:	2e 9d       	mul	r18, r14
 d50:	c0 01       	movw	r24, r0
 d52:	2f 9d       	mul	r18, r15
 d54:	90 0d       	add	r25, r0
 d56:	11 24       	eor	r1, r1
 d58:	08 17       	cp	r16, r24
 d5a:	19 07       	cpc	r17, r25
 d5c:	19 f4       	brne	.+6      	; 0xd64 <mrpp_state_init+0x122>
 d5e:	bb 24       	eor	r11, r11
 d60:	ba 94       	dec	r11
 d62:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
 d64:	cf 01       	movw	r24, r30
 d66:	88 0f       	add	r24, r24
 d68:	99 1f       	adc	r25, r25
 d6a:	ee 0f       	add	r30, r30
 d6c:	ff 1f       	adc	r31, r31
 d6e:	ee 0f       	add	r30, r30
 d70:	ff 1f       	adc	r31, r31
 d72:	ee 0f       	add	r30, r30
 d74:	ff 1f       	adc	r31, r31
 d76:	e8 0f       	add	r30, r24
 d78:	f9 1f       	adc	r31, r25
 d7a:	ec 0f       	add	r30, r28
 d7c:	fd 1f       	adc	r31, r29
 d7e:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
 d80:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 d82:	d3 94       	inc	r13
 d84:	dc 14       	cp	r13, r12
 d86:	08 f4       	brcc	.+2      	; 0xd8a <mrpp_state_init+0x148>
 d88:	6e cf       	rjmp	.-292    	; 0xc66 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 d8a:	98 01       	movw	r18, r16
 d8c:	ab ea       	ldi	r26, 0xAB	; 171
 d8e:	ba ea       	ldi	r27, 0xAA	; 170
 d90:	0e 94 bd 1b 	call	0x377a	; 0x377a <__umulhisi3>
 d94:	fc 01       	movw	r30, r24
 d96:	f6 95       	lsr	r31
 d98:	e7 95       	ror	r30
 d9a:	f2 95       	swap	r31
 d9c:	e2 95       	swap	r30
 d9e:	ef 70       	andi	r30, 0x0F	; 15
 da0:	ef 27       	eor	r30, r31
 da2:	ff 70       	andi	r31, 0x0F	; 15
 da4:	ef 27       	eor	r30, r31
 da6:	4e 2f       	mov	r20, r30
 da8:	52 e0       	ldi	r21, 0x02	; 2
 daa:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
 dac:	20 e3       	ldi	r18, 0x30	; 48
 dae:	2e 9f       	mul	r18, r30
 db0:	c0 01       	movw	r24, r0
 db2:	2f 9f       	mul	r18, r31
 db4:	90 0d       	add	r25, r0
 db6:	11 24       	eor	r1, r1
 db8:	08 1b       	sub	r16, r24
 dba:	19 0b       	sbc	r17, r25
 dbc:	11 f4       	brne	.+4      	; 0xdc2 <mrpp_state_init+0x180>
 dbe:	51 e0       	ldi	r21, 0x01	; 1
 dc0:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
 dc2:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
 dc4:	01 2b       	or	r16, r17
 dc6:	11 f0       	breq	.+4      	; 0xdcc <mrpp_state_init+0x18a>
 dc8:	41 e0       	ldi	r20, 0x01	; 1
 dca:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
 dcc:	fe 01       	movw	r30, r28
 dce:	e5 58       	subi	r30, 0x85	; 133
 dd0:	ff 4f       	sbci	r31, 0xFF	; 255
 dd2:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
 dd4:	80 e0       	ldi	r24, 0x00	; 0
 dd6:	07 c0       	rjmp	.+14     	; 0xde6 <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
 dd8:	fe 01       	movw	r30, r28
 dda:	e8 0f       	add	r30, r24
 ddc:	f1 1d       	adc	r31, r1
 dde:	e4 58       	subi	r30, 0x84	; 132
 de0:	ff 4f       	sbci	r31, 0xFF	; 255
 de2:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 de4:	8f 5f       	subi	r24, 0xFF	; 255
 de6:	84 17       	cp	r24, r20
 de8:	b8 f3       	brcs	.-18     	; 0xdd8 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
 dea:	df 91       	pop	r29
 dec:	cf 91       	pop	r28
 dee:	1f 91       	pop	r17
 df0:	0f 91       	pop	r16
 df2:	ff 90       	pop	r15
 df4:	ef 90       	pop	r14
 df6:	df 90       	pop	r13
 df8:	cf 90       	pop	r12
 dfa:	bf 90       	pop	r11
 dfc:	af 90       	pop	r10
 dfe:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00001db6 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	8c 01       	movw	r16, r24
    1dc0:	eb 01       	movw	r28, r22
    package[0]=0;
    1dc2:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1dca:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1dcc:	c8 01       	movw	r24, r16
    1dce:	0e 94 cf 0b 	call	0x179e	; 0x179e <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	35 c0       	rjmp	.+106    	; 0x1e40 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1dd6:	82 2f       	mov	r24, r18
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	dc 01       	movw	r26, r24
    1ddc:	aa 0f       	add	r26, r26
    1dde:	bb 1f       	adc	r27, r27
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	ad 01       	movw	r20, r26
    1de6:	4a 5f       	subi	r20, 0xFA	; 250
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	4c 0f       	add	r20, r28
    1dec:	5d 1f       	adc	r21, r29
    1dee:	fc 01       	movw	r30, r24
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	e8 0f       	add	r30, r24
    1e02:	f9 1f       	adc	r31, r25
    1e04:	bf 01       	movw	r22, r30
    1e06:	60 0f       	add	r22, r16
    1e08:	71 1f       	adc	r23, r17
    1e0a:	fb 01       	movw	r30, r22
    1e0c:	84 81       	ldd	r24, Z+4	; 0x04
    1e0e:	fa 01       	movw	r30, r20
    1e10:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1e12:	cd 01       	movw	r24, r26
    1e14:	07 96       	adiw	r24, 0x07	; 7
    1e16:	8c 0f       	add	r24, r28
    1e18:	9d 1f       	adc	r25, r29
    1e1a:	fb 01       	movw	r30, r22
    1e1c:	33 81       	ldd	r19, Z+3	; 0x03
    1e1e:	fc 01       	movw	r30, r24
    1e20:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1e22:	cd 01       	movw	r24, r26
    1e24:	08 96       	adiw	r24, 0x08	; 8
    1e26:	8c 0f       	add	r24, r28
    1e28:	9d 1f       	adc	r25, r29
    1e2a:	fb 01       	movw	r30, r22
    1e2c:	36 81       	ldd	r19, Z+6	; 0x06
    1e2e:	fc 01       	movw	r30, r24
    1e30:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1e32:	19 96       	adiw	r26, 0x09	; 9
    1e34:	ac 0f       	add	r26, r28
    1e36:	bd 1f       	adc	r27, r29
    1e38:	fb 01       	movw	r30, r22
    1e3a:	85 81       	ldd	r24, Z+5	; 0x05
    1e3c:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e3e:	2f 5f       	subi	r18, 0xFF	; 255
    1e40:	f8 01       	movw	r30, r16
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	28 17       	cp	r18, r24
    1e46:	38 f2       	brcs	.-114    	; 0x1dd6 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1e48:	88 0f       	add	r24, r24
    1e4a:	88 0f       	add	r24, r24
}
    1e4c:	8a 5f       	subi	r24, 0xFA	; 250
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001d12 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	8c 01       	movw	r16, r24
    1d1c:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    1d1e:	fc 01       	movw	r30, r24
    1d20:	81 81       	ldd	r24, Z+1	; 0x01
    1d22:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    1d24:	81 81       	ldd	r24, Z+1	; 0x01
    1d26:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1d28:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	0e 94 cf 0b 	call	0x179e	; 0x179e <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	35 c0       	rjmp	.+106    	; 0x1d9e <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1d34:	82 2f       	mov	r24, r18
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	dc 01       	movw	r26, r24
    1d3a:	aa 0f       	add	r26, r26
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	aa 0f       	add	r26, r26
    1d40:	bb 1f       	adc	r27, r27
    1d42:	ad 01       	movw	r20, r26
    1d44:	4a 5f       	subi	r20, 0xFA	; 250
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	4c 0f       	add	r20, r28
    1d4a:	5d 1f       	adc	r21, r29
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	e8 0f       	add	r30, r24
    1d60:	f9 1f       	adc	r31, r25
    1d62:	bf 01       	movw	r22, r30
    1d64:	60 0f       	add	r22, r16
    1d66:	71 1f       	adc	r23, r17
    1d68:	fb 01       	movw	r30, r22
    1d6a:	84 81       	ldd	r24, Z+4	; 0x04
    1d6c:	fa 01       	movw	r30, r20
    1d6e:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1d70:	cd 01       	movw	r24, r26
    1d72:	07 96       	adiw	r24, 0x07	; 7
    1d74:	8c 0f       	add	r24, r28
    1d76:	9d 1f       	adc	r25, r29
    1d78:	fb 01       	movw	r30, r22
    1d7a:	33 81       	ldd	r19, Z+3	; 0x03
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1d80:	cd 01       	movw	r24, r26
    1d82:	08 96       	adiw	r24, 0x08	; 8
    1d84:	8c 0f       	add	r24, r28
    1d86:	9d 1f       	adc	r25, r29
    1d88:	fb 01       	movw	r30, r22
    1d8a:	36 81       	ldd	r19, Z+6	; 0x06
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1d90:	19 96       	adiw	r26, 0x09	; 9
    1d92:	ac 0f       	add	r26, r28
    1d94:	bd 1f       	adc	r27, r29
    1d96:	fb 01       	movw	r30, r22
    1d98:	85 81       	ldd	r24, Z+5	; 0x05
    1d9a:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1d9c:	2f 5f       	subi	r18, 0xFF	; 255
    1d9e:	f8 01       	movw	r30, r16
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	28 17       	cp	r18, r24
    1da4:	38 f2       	brcs	.-114    	; 0x1d34 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1da6:	88 0f       	add	r24, r24
    1da8:	88 0f       	add	r24, r24
}
    1daa:	8a 5f       	subi	r24, 0xFA	; 250
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00002150 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    215a:	a6 2f       	mov	r26, r22
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	11 97       	sbiw	r26, 0x01	; 1
    2160:	fd 01       	movw	r30, r26
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	cd 01       	movw	r24, r26
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	e8 0f       	add	r30, r24
    2176:	f9 1f       	adc	r31, r25
    2178:	e0 0f       	add	r30, r16
    217a:	f1 1f       	adc	r31, r17
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    2184:	e9 2f       	mov	r30, r25
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	e9 01       	movw	r28, r18
    218a:	ce 0f       	add	r28, r30
    218c:	df 1f       	adc	r29, r31
    218e:	e4 0f       	add	r30, r20
    2190:	f5 1f       	adc	r31, r21
    2192:	80 81       	ld	r24, Z
    2194:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2196:	9f 5f       	subi	r25, 0xFF	; 255
    2198:	94 30       	cpi	r25, 0x04	; 4
    219a:	a0 f3       	brcs	.-24     	; 0x2184 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    219c:	cd 01       	movw	r24, r26
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	aa 0f       	add	r26, r26
    21a4:	bb 1f       	adc	r27, r27
    21a6:	aa 0f       	add	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	aa 0f       	add	r26, r26
    21ac:	bb 1f       	adc	r27, r27
    21ae:	a8 0f       	add	r26, r24
    21b0:	b9 1f       	adc	r27, r25
    21b2:	a0 0f       	add	r26, r16
    21b4:	b1 1f       	adc	r27, r17
    21b6:	19 96       	adiw	r26, 0x09	; 9
    21b8:	8c 91       	ld	r24, X
    21ba:	19 97       	sbiw	r26, 0x09	; 9
    21bc:	f9 01       	movw	r30, r18
    21be:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    21c0:	18 96       	adiw	r26, 0x08	; 8
    21c2:	8c 91       	ld	r24, X
    21c4:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    21c6:	c8 01       	movw	r24, r16
    21c8:	0e 94 00 07 	call	0xe00	; 0xe00 <update_bodies>
}
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003468 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3468:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0b c0       	rjmp	.+22     	; 0x3484 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    346e:	29 2f       	mov	r18, r25
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	fa 01       	movw	r30, r20
    3474:	e2 0f       	add	r30, r18
    3476:	f3 1f       	adc	r31, r19
    3478:	e4 58       	subi	r30, 0x84	; 132
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	81 30       	cpi	r24, 0x01	; 1
    3480:	49 f0       	breq	.+18     	; 0x3494 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3482:	9f 5f       	subi	r25, 0xFF	; 255
    3484:	fa 01       	movw	r30, r20
    3486:	e5 58       	subi	r30, 0x85	; 133
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	98 17       	cp	r25, r24
    348e:	78 f3       	brcs	.-34     	; 0x346e <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3490:	2f ef       	ldi	r18, 0xFF	; 255
    3492:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    3494:	c9 01       	movw	r24, r18
    3496:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00003550 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    3550:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3552:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    3554:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    3556:	0a c0       	rjmp	.+20     	; 0x356c <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3558:	f9 01       	movw	r30, r18
    355a:	e9 0f       	add	r30, r25
    355c:	f1 1d       	adc	r31, r1
    355e:	e4 58       	subi	r30, 0x84	; 132
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	40 81       	ld	r20, Z
    3564:	42 30       	cpi	r20, 0x02	; 2
    3566:	09 f0       	breq	.+2      	; 0x356a <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3568:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    356a:	9f 5f       	subi	r25, 0xFF	; 255
    356c:	f9 01       	movw	r30, r18
    356e:	e5 58       	subi	r30, 0x85	; 133
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	40 81       	ld	r20, Z
    3574:	94 17       	cp	r25, r20
    3576:	80 f3       	brcs	.-32     	; 0x3558 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3578:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000011c4 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	6b 01       	movw	r12, r22
    11e0:	4a 01       	movw	r8, r20
    11e2:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    11e4:	0e 94 34 1a 	call	0x3468	; 0x3468 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    11e8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	92 07       	cpc	r25, r18
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <mrpp_state_get_ready_body+0x2e>
    11f0:	66 c0       	rjmp	.+204    	; 0x12be <mrpp_state_get_ready_body+0xfa>
    11f2:	8c 15       	cp	r24, r12
    11f4:	9d 05       	cpc	r25, r13
    11f6:	09 f0       	breq	.+2      	; 0x11fa <mrpp_state_get_ready_body+0x36>
    11f8:	64 c0       	rjmp	.+200    	; 0x12c2 <mrpp_state_get_ready_body+0xfe>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    11fe:	fe 01       	movw	r30, r28
    1200:	e8 0f       	add	r30, r24
    1202:	f1 1d       	adc	r31, r1
    1204:	e4 58       	subi	r30, 0x84	; 132
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	90 81       	ld	r25, Z
    120a:	91 30       	cpi	r25, 0x01	; 1
    120c:	41 f0       	breq	.+16     	; 0x121e <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	fe 01       	movw	r30, r28
    1212:	e5 58       	subi	r30, 0x85	; 133
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	90 81       	ld	r25, Z
    1218:	89 17       	cp	r24, r25
    121a:	88 f3       	brcs	.-30     	; 0x11fe <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    121c:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	98 0f       	add	r25, r24
    1222:	f4 01       	movw	r30, r8
    1224:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    1226:	99 81       	ldd	r25, Y+1	; 0x01
    1228:	f5 01       	movw	r30, r10
    122a:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	40 e3       	ldi	r20, 0x30	; 48
    1230:	48 9f       	mul	r20, r24
    1232:	90 01       	movw	r18, r0
    1234:	49 9f       	mul	r20, r25
    1236:	30 0d       	add	r19, r0
    1238:	11 24       	eor	r1, r1
    123a:	f8 01       	movw	r30, r16
    123c:	31 83       	std	Z+1, r19	; 0x01
    123e:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    1240:	fe 01       	movw	r30, r28
    1242:	e5 58       	subi	r30, 0x85	; 133
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	20 81       	ld	r18, Z
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	31 09       	sbc	r19, r1
    124e:	82 17       	cp	r24, r18
    1250:	93 07       	cpc	r25, r19
    1252:	2c f4       	brge	.+10     	; 0x125e <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    1254:	80 e3       	ldi	r24, 0x30	; 48
    1256:	f7 01       	movw	r30, r14
    1258:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	33 c0       	rjmp	.+102    	; 0x12c4 <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9c 01       	movw	r18, r24
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	82 0f       	add	r24, r18
    1278:	93 1f       	adc	r25, r19
    127a:	c8 0f       	add	r28, r24
    127c:	d9 1f       	adc	r29, r25
    127e:	4b 81       	ldd	r20, Y+3	; 0x03
    1280:	5c 81       	ldd	r21, Y+4	; 0x04
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	48 0f       	add	r20, r24
    1288:	59 1f       	adc	r21, r25
    128a:	9a 01       	movw	r18, r20
    128c:	ab ea       	ldi	r26, 0xAB	; 171
    128e:	ba ea       	ldi	r27, 0xAA	; 170
    1290:	0e 94 bd 1b 	call	0x377a	; 0x377a <__umulhisi3>
    1294:	96 95       	lsr	r25
    1296:	87 95       	ror	r24
    1298:	92 95       	swap	r25
    129a:	82 95       	swap	r24
    129c:	8f 70       	andi	r24, 0x0F	; 15
    129e:	89 27       	eor	r24, r25
    12a0:	9f 70       	andi	r25, 0x0F	; 15
    12a2:	89 27       	eor	r24, r25
    12a4:	60 e3       	ldi	r22, 0x30	; 48
    12a6:	68 9f       	mul	r22, r24
    12a8:	90 01       	movw	r18, r0
    12aa:	69 9f       	mul	r22, r25
    12ac:	30 0d       	add	r19, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	ca 01       	movw	r24, r20
    12b2:	82 1b       	sub	r24, r18
    12b4:	93 0b       	sbc	r25, r19
    12b6:	f7 01       	movw	r30, r14
    12b8:	80 83       	st	Z, r24
    } 
    return true; 
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <mrpp_state_get_ready_body+0x100>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

0000373c <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    373c:	fc 01       	movw	r30, r24
    373e:	e5 58       	subi	r30, 0x85	; 133
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	20 81       	ld	r18, Z
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	62 17       	cp	r22, r18
    3748:	73 07       	cpc	r23, r19
    374a:	3c f4       	brge	.+14     	; 0x375a <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    374c:	68 0f       	add	r22, r24
    374e:	79 1f       	adc	r23, r25
    3750:	fb 01       	movw	r30, r22
    3752:	e4 58       	subi	r30, 0x84	; 132
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	80 83       	st	Z, r24
    375a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

0000319a <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	61 50       	subi	r22, 0x01	; 1
    319e:	71 09       	sbc	r23, r1
    31a0:	fb 01       	movw	r30, r22
    31a2:	ee 0f       	add	r30, r30
    31a4:	ff 1f       	adc	r31, r31
    31a6:	66 0f       	add	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	66 0f       	add	r22, r22
    31ac:	77 1f       	adc	r23, r23
    31ae:	66 0f       	add	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	e6 0f       	add	r30, r22
    31b4:	f7 1f       	adc	r31, r23
    31b6:	e8 0f       	add	r30, r24
    31b8:	f9 1f       	adc	r31, r25
    31ba:	83 81       	ldd	r24, Z+3	; 0x03
    31bc:	94 81       	ldd	r25, Z+4	; 0x04
    31be:	da 01       	movw	r26, r20
    31c0:	8d 93       	st	X+, r24
    31c2:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    31c4:	85 81       	ldd	r24, Z+5	; 0x05
    31c6:	96 81       	ldd	r25, Z+6	; 0x06
    31c8:	f9 01       	movw	r30, r18
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
    31ce:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00003498 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    3498:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <cnt>
    349c:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <cnt+0x1>
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	90 93 a5 0d 	sts	0x0DA5, r25	; 0x800da5 <cnt+0x1>
    34a6:	80 93 a4 0d 	sts	0x0DA4, r24	; 0x800da4 <cnt>
	if(cnt>=_seconds){
    34aa:	20 91 a6 0d 	lds	r18, 0x0DA6	; 0x800da6 <_seconds>
    34ae:	30 91 a7 0d 	lds	r19, 0x0DA7	; 0x800da7 <_seconds+0x1>
    34b2:	82 17       	cp	r24, r18
    34b4:	93 07       	cpc	r25, r19
    34b6:	38 f0       	brcs	.+14     	; 0x34c6 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    34b8:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <eventPointer>
    34bc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	0e 94 b0 1c 	call	0x3960	; 0x3960 <PM_HAL_BC_power>
    34c6:	08 95       	ret

Disassembly of section .text.PUMP_start:

000035ee <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    35ee:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <cnt+0x1>
    35f2:	10 92 a4 0d 	sts	0x0DA4, r1	; 0x800da4 <cnt>
	_seconds=seconds;
    35f6:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <_seconds+0x1>
    35fa:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    35fe:	8c e4       	ldi	r24, 0x4C	; 76
    3600:	9a e1       	ldi	r25, 0x1A	; 26
    3602:	0e 94 72 14 	call	0x28e4	; 0x28e4 <TC2_HAL_subscribe>
    3606:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <eventPointer>
	PM_HAL_BC_power(true);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <PM_HAL_BC_power>
    3610:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00003826 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    3826:	40 91 a4 0d 	lds	r20, 0x0DA4	; 0x800da4 <cnt>
    382a:	50 91 a5 0d 	lds	r21, 0x0DA5	; 0x800da5 <cnt+0x1>
    382e:	20 91 a6 0d 	lds	r18, 0x0DA6	; 0x800da6 <_seconds>
    3832:	30 91 a7 0d 	lds	r19, 0x0DA7	; 0x800da7 <_seconds+0x1>
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	42 17       	cp	r20, r18
    383a:	53 07       	cpc	r21, r19
    383c:	08 f4       	brcc	.+2      	; 0x3840 <PUMP_is_done+0x1a>
    383e:	80 e0       	ldi	r24, 0x00	; 0
}
    3840:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00002938 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	00 d0       	rcall	.+0      	; 0x293e <RTC_set_clock_out+0x6>
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    2942:	9d e0       	ldi	r25, 0x0D	; 13
    2944:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	31 f0       	breq	.+12     	; 0x2956 <RTC_set_clock_out+0x1e>
    294a:	18 f0       	brcs	.+6      	; 0x2952 <RTC_set_clock_out+0x1a>
    294c:	80 32       	cpi	r24, 0x20	; 32
    294e:	31 f0       	breq	.+12     	; 0x295c <RTC_set_clock_out+0x24>
    2950:	13 c0       	rjmp	.+38     	; 0x2978 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    2952:	1a 82       	std	Y+2, r1	; 0x02
			break;
    2954:	05 c0       	rjmp	.+10     	; 0x2960 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    2956:	83 e8       	ldi	r24, 0x83	; 131
    2958:	8a 83       	std	Y+2, r24	; 0x02
			break;
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    295c:	82 e8       	ldi	r24, 0x82	; 130
    295e:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    2960:	ae 01       	movw	r20, r28
    2962:	4f 5f       	subi	r20, 0xFF	; 255
    2964:	5f 4f       	sbci	r21, 0xFF	; 255
    2966:	60 e8       	ldi	r22, 0x80	; 128
    2968:	22 e0       	ldi	r18, 0x02	; 2
    296a:	81 e5       	ldi	r24, 0x51	; 81
    296c:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2970:	88 23       	and	r24, r24
    2972:	21 f0       	breq	.+8      	; 0x297c <RTC_set_clock_out+0x44>
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	03 c0       	rjmp	.+6      	; 0x297e <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	01 c0       	rjmp	.+2      	; 0x297e <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    297c:	80 e0       	ldi	r24, 0x00	; 0
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000032da <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <RTC_clear_wake_up_interrupt+0x6>
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    32ea:	ae 01       	movw	r20, r28
    32ec:	4f 5f       	subi	r20, 0xFF	; 255
    32ee:	5f 4f       	sbci	r21, 0xFF	; 255
    32f0:	60 e8       	ldi	r22, 0x80	; 128
    32f2:	22 e0       	ldi	r18, 0x02	; 2
    32f4:	81 e5       	ldi	r24, 0x51	; 81
    32f6:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    32fa:	88 23       	and	r24, r24
    32fc:	11 f0       	breq	.+4      	; 0x3302 <RTC_clear_wake_up_interrupt+0x28>
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	01 c0       	rjmp	.+2      	; 0x3304 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    3302:	80 e0       	ldi	r24, 0x00	; 0
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00000f62 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	27 97       	sbiw	r28, 0x07	; 7
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	8c 01       	movw	r16, r24
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	46 e3       	ldi	r20, 0x36	; 54
     f80:	53 e0       	ldi	r21, 0x03	; 3
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	81 e5       	ldi	r24, 0x51	; 81
     f86:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <TWI_API_write_data>
     f8a:	81 11       	cpse	r24, r1
     f8c:	7c c0       	rjmp	.+248    	; 0x1086 <__DATA_REGION_LENGTH__+0x86>
     f8e:	47 e0       	ldi	r20, 0x07	; 7
     f90:	be 01       	movw	r22, r28
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	81 e5       	ldi	r24, 0x51	; 81
     f98:	0e 94 09 1b 	call	0x3612	; 0x3612 <TWI_API_repeat_read_data_stop>
     f9c:	81 11       	cpse	r24, r1
     f9e:	75 c0       	rjmp	.+234    	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	82 2f       	mov	r24, r18
     fa4:	8f 77       	andi	r24, 0x7F	; 127
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	95 95       	asr	r25
     fae:	87 95       	ror	r24
     fb0:	95 95       	asr	r25
     fb2:	87 95       	ror	r24
     fb4:	95 95       	asr	r25
     fb6:	87 95       	ror	r24
     fb8:	88 0f       	add	r24, r24
     fba:	98 2f       	mov	r25, r24
     fbc:	99 0f       	add	r25, r25
     fbe:	99 0f       	add	r25, r25
     fc0:	89 0f       	add	r24, r25
     fc2:	2f 70       	andi	r18, 0x0F	; 15
     fc4:	82 0f       	add	r24, r18
     fc6:	f8 01       	movw	r30, r16
     fc8:	80 83       	st	Z, r24
     fca:	2a 81       	ldd	r18, Y+2	; 0x02
     fcc:	82 2f       	mov	r24, r18
     fce:	8f 77       	andi	r24, 0x7F	; 127
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	95 95       	asr	r25
     fd4:	87 95       	ror	r24
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	95 95       	asr	r25
     fdc:	87 95       	ror	r24
     fde:	95 95       	asr	r25
     fe0:	87 95       	ror	r24
     fe2:	88 0f       	add	r24, r24
     fe4:	98 2f       	mov	r25, r24
     fe6:	99 0f       	add	r25, r25
     fe8:	99 0f       	add	r25, r25
     fea:	89 0f       	add	r24, r25
     fec:	2f 70       	andi	r18, 0x0F	; 15
     fee:	82 0f       	add	r24, r18
     ff0:	81 83       	std	Z+1, r24	; 0x01
     ff2:	2b 81       	ldd	r18, Y+3	; 0x03
     ff4:	82 2f       	mov	r24, r18
     ff6:	8f 73       	andi	r24, 0x3F	; 63
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	95 95       	asr	r25
    1000:	87 95       	ror	r24
    1002:	95 95       	asr	r25
    1004:	87 95       	ror	r24
    1006:	95 95       	asr	r25
    1008:	87 95       	ror	r24
    100a:	88 0f       	add	r24, r24
    100c:	98 2f       	mov	r25, r24
    100e:	99 0f       	add	r25, r25
    1010:	99 0f       	add	r25, r25
    1012:	89 0f       	add	r24, r25
    1014:	2f 70       	andi	r18, 0x0F	; 15
    1016:	82 0f       	add	r24, r18
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	82 2f       	mov	r24, r18
    101e:	8f 73       	andi	r24, 0x3F	; 63
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	95 95       	asr	r25
    1024:	87 95       	ror	r24
    1026:	95 95       	asr	r25
    1028:	87 95       	ror	r24
    102a:	95 95       	asr	r25
    102c:	87 95       	ror	r24
    102e:	95 95       	asr	r25
    1030:	87 95       	ror	r24
    1032:	88 0f       	add	r24, r24
    1034:	98 2f       	mov	r25, r24
    1036:	99 0f       	add	r25, r25
    1038:	99 0f       	add	r25, r25
    103a:	89 0f       	add	r24, r25
    103c:	2f 70       	andi	r18, 0x0F	; 15
    103e:	82 0f       	add	r24, r18
    1040:	83 83       	std	Z+3, r24	; 0x03
    1042:	2e 81       	ldd	r18, Y+6	; 0x06
    1044:	82 2f       	mov	r24, r18
    1046:	8f 71       	andi	r24, 0x1F	; 31
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	95 95       	asr	r25
    1050:	87 95       	ror	r24
    1052:	95 95       	asr	r25
    1054:	87 95       	ror	r24
    1056:	95 95       	asr	r25
    1058:	87 95       	ror	r24
    105a:	88 0f       	add	r24, r24
    105c:	98 2f       	mov	r25, r24
    105e:	99 0f       	add	r25, r25
    1060:	99 0f       	add	r25, r25
    1062:	89 0f       	add	r24, r25
    1064:	2f 70       	andi	r18, 0x0F	; 15
    1066:	82 0f       	add	r24, r18
    1068:	84 83       	std	Z+4, r24	; 0x04
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	98 2f       	mov	r25, r24
    106e:	92 95       	swap	r25
    1070:	9f 70       	andi	r25, 0x0F	; 15
    1072:	99 0f       	add	r25, r25
    1074:	29 2f       	mov	r18, r25
    1076:	22 0f       	add	r18, r18
    1078:	22 0f       	add	r18, r18
    107a:	92 0f       	add	r25, r18
    107c:	8f 70       	andi	r24, 0x0F	; 15
    107e:	89 0f       	add	r24, r25
    1080:	85 83       	std	Z+5, r24	; 0x05
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	03 c0       	rjmp	.+6      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	01 c0       	rjmp	.+2      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	27 96       	adiw	r28, 0x07	; 7
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

00001ae6 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	2d 97       	sbiw	r28, 0x0d	; 13
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    1b06:	85 e0       	ldi	r24, 0x05	; 5
    1b08:	e5 e8       	ldi	r30, 0x85	; 133
    1b0a:	fd e0       	ldi	r31, 0x0D	; 13
    1b0c:	de 01       	movw	r26, r28
    1b0e:	13 96       	adiw	r26, 0x03	; 3
    1b10:	01 90       	ld	r0, Z+
    1b12:	0d 92       	st	X+, r0
    1b14:	8a 95       	dec	r24
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    1b18:	ce 01       	movw	r24, r28
    1b1a:	08 96       	adiw	r24, 0x08	; 8
    1b1c:	0e 94 b1 07 	call	0xf62	; 0xf62 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	81 0f       	add	r24, r17
	dt.minute %= 60;
    1b24:	99 e8       	ldi	r25, 0x89	; 137
    1b26:	89 9f       	mul	r24, r25
    1b28:	91 2d       	mov	r25, r1
    1b2a:	11 24       	eor	r1, r1
    1b2c:	92 95       	swap	r25
    1b2e:	96 95       	lsr	r25
    1b30:	97 70       	andi	r25, 0x07	; 7
    1b32:	2c e3       	ldi	r18, 0x3C	; 60
    1b34:	92 9f       	mul	r25, r18
    1b36:	80 19       	sub	r24, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    1b3c:	ae 01       	movw	r20, r28
    1b3e:	4f 5f       	subi	r20, 0xFF	; 255
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	60 e8       	ldi	r22, 0x80	; 128
    1b44:	22 e0       	ldi	r18, 0x02	; 2
    1b46:	81 e5       	ldi	r24, 0x51	; 81
    1b48:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	20 c0       	rjmp	.+64     	; 0x1b90 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    1b50:	99 85       	ldd	r25, Y+9	; 0x09
    1b52:	8d ec       	ldi	r24, 0xCD	; 205
    1b54:	98 9f       	mul	r25, r24
    1b56:	81 2d       	mov	r24, r1
    1b58:	11 24       	eor	r1, r1
    1b5a:	86 95       	lsr	r24
    1b5c:	86 95       	lsr	r24
    1b5e:	86 95       	lsr	r24
    1b60:	40 e1       	ldi	r20, 0x10	; 16
    1b62:	84 9f       	mul	r24, r20
    1b64:	90 01       	movw	r18, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	88 0f       	add	r24, r24
    1b6a:	38 2f       	mov	r19, r24
    1b6c:	33 0f       	add	r19, r19
    1b6e:	33 0f       	add	r19, r19
    1b70:	83 0f       	add	r24, r19
    1b72:	98 1b       	sub	r25, r24
    1b74:	92 2b       	or	r25, r18
    1b76:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    1b78:	ae 01       	movw	r20, r28
    1b7a:	4d 5f       	subi	r20, 0xFD	; 253
    1b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7e:	60 e8       	ldi	r22, 0x80	; 128
    1b80:	25 e0       	ldi	r18, 0x05	; 5
    1b82:	81 e5       	ldi	r24, 0x51	; 81
    1b84:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1b88:	88 23       	and	r24, r24
    1b8a:	21 f0       	breq	.+8      	; 0x1b94 <RTC_set_wake_up_interrupt_minutes+0xae>
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    1b94:	80 e0       	ldi	r24, 0x00	; 0
}
    1b96:	2d 96       	adiw	r28, 0x0d	; 13
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

000010a2 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <RTC_datetime_to_ts+0x22>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <RTC_datetime_to_ts+0x24>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <RTC_datetime_to_ts+0x26>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	f9 01       	movw	r30, r18
    10ce:	49 2e       	mov	r4, r25
    10d0:	51 2c       	mov	r5, r1
    10d2:	61 2c       	mov	r6, r1
    10d4:	71 2c       	mov	r7, r1
    10d6:	03 2e       	mov	r0, r19
    10d8:	3a e1       	ldi	r19, 0x1A	; 26
    10da:	44 0c       	add	r4, r4
    10dc:	55 1c       	adc	r5, r5
    10de:	66 1c       	adc	r6, r6
    10e0:	77 1c       	adc	r7, r7
    10e2:	3a 95       	dec	r19
    10e4:	d1 f7       	brne	.-12     	; 0x10da <RTC_datetime_to_ts+0x38>
    10e6:	30 2d       	mov	r19, r0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e0       	ldi	r26, 0x00	; 0
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	07 2e       	mov	r0, r23
    10f0:	76 e1       	ldi	r23, 0x16	; 22
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	aa 1f       	adc	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	7a 95       	dec	r23
    10fc:	d1 f7       	brne	.-12     	; 0x10f2 <RTC_datetime_to_ts+0x50>
    10fe:	70 2d       	mov	r23, r0
    1100:	84 29       	or	r24, r4
    1102:	95 29       	or	r25, r5
    1104:	a6 29       	or	r26, r6
    1106:	b7 29       	or	r27, r7
    1108:	87 2e       	mov	r8, r23
    110a:	91 2c       	mov	r9, r1
    110c:	a1 2c       	mov	r10, r1
    110e:	b1 2c       	mov	r11, r1
    1110:	07 2e       	mov	r0, r23
    1112:	71 e1       	ldi	r23, 0x11	; 17
    1114:	88 0c       	add	r8, r8
    1116:	99 1c       	adc	r9, r9
    1118:	aa 1c       	adc	r10, r10
    111a:	bb 1c       	adc	r11, r11
    111c:	7a 95       	dec	r23
    111e:	d1 f7       	brne	.-12     	; 0x1114 <__stack+0x15>
    1120:	70 2d       	mov	r23, r0
    1122:	88 29       	or	r24, r8
    1124:	99 29       	or	r25, r9
    1126:	aa 29       	or	r26, r10
    1128:	bb 29       	or	r27, r11
    112a:	c6 2e       	mov	r12, r22
    112c:	d1 2c       	mov	r13, r1
    112e:	e1 2c       	mov	r14, r1
    1130:	f1 2c       	mov	r15, r1
    1132:	0b 2e       	mov	r0, r27
    1134:	bc e0       	ldi	r27, 0x0C	; 12
    1136:	cc 0c       	add	r12, r12
    1138:	dd 1c       	adc	r13, r13
    113a:	ee 1c       	adc	r14, r14
    113c:	ff 1c       	adc	r15, r15
    113e:	ba 95       	dec	r27
    1140:	d1 f7       	brne	.-12     	; 0x1136 <__stack+0x37>
    1142:	b0 2d       	mov	r27, r0
    1144:	8c 29       	or	r24, r12
    1146:	9d 29       	or	r25, r13
    1148:	ae 29       	or	r26, r14
    114a:	bf 29       	or	r27, r15
    114c:	05 2f       	mov	r16, r21
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	00 0f       	add	r16, r16
    1156:	11 1f       	adc	r17, r17
    1158:	22 1f       	adc	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	00 0f       	add	r16, r16
    115e:	11 1f       	adc	r17, r17
    1160:	22 1f       	adc	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	00 0f       	add	r16, r16
    1166:	11 1f       	adc	r17, r17
    1168:	22 1f       	adc	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	00 0f       	add	r16, r16
    116e:	11 1f       	adc	r17, r17
    1170:	22 1f       	adc	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	00 0f       	add	r16, r16
    1176:	11 1f       	adc	r17, r17
    1178:	22 1f       	adc	r18, r18
    117a:	33 1f       	adc	r19, r19
    117c:	00 0f       	add	r16, r16
    117e:	11 1f       	adc	r17, r17
    1180:	22 1f       	adc	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	80 2b       	or	r24, r16
    1186:	91 2b       	or	r25, r17
    1188:	a2 2b       	or	r26, r18
    118a:	b3 2b       	or	r27, r19
    118c:	84 2b       	or	r24, r20
    118e:	b0 83       	st	Z, r27
    1190:	a1 83       	std	Z+1, r26	; 0x01
    1192:	92 83       	std	Z+2, r25	; 0x02
    1194:	83 83       	std	Z+3, r24	; 0x03
    1196:	26 96       	adiw	r28, 0x06	; 6
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	4f 90       	pop	r4
    11c2:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000387a <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    387a:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    387c:	54 81       	ldd	r21, Z+4	; 0x04
    387e:	43 81       	ldd	r20, Z+3	; 0x03
    3880:	31 81       	ldd	r19, Z+1	; 0x01
    3882:	20 81       	ld	r18, Z
    3884:	65 2f       	mov	r22, r21
    3886:	74 2f       	mov	r23, r20
    3888:	83 2f       	mov	r24, r19
    388a:	92 2f       	mov	r25, r18
    388c:	0e 94 bc 13 	call	0x2778	; 0x2778 <__fixunssfsi>
}
    3890:	cb 01       	movw	r24, r22
    3892:	08 95       	ret

Disassembly of section .text.init_measurement:

0000312a <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    312a:	25 e0       	ldi	r18, 0x05	; 5
    312c:	47 e2       	ldi	r20, 0x27	; 39
    312e:	53 e0       	ldi	r21, 0x03	; 3
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	81 e6       	ldi	r24, 0x61	; 97
    3134:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3138:	81 11       	cpse	r24, r1
    313a:	0f c0       	rjmp	.+30     	; 0x315a <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    313c:	25 e0       	ldi	r18, 0x05	; 5
    313e:	4c e2       	ldi	r20, 0x2C	; 44
    3140:	53 e0       	ldi	r21, 0x03	; 3
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	81 e6       	ldi	r24, 0x61	; 97
    3146:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    314a:	81 11       	cpse	r24, r1
    314c:	08 c0       	rjmp	.+16     	; 0x315e <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    314e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <SCD30_HAL_data_ready>
    3152:	88 23       	and	r24, r24
    3154:	e1 f3       	breq	.-8      	; 0x314e <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    315a:	82 e0       	ldi	r24, 0x02	; 2
    315c:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    315e:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    3160:	08 95       	ret

Disassembly of section .text.validate_data:

000033a4 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    33aa:	62 e0       	ldi	r22, 0x02	; 2
    33ac:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <calc_crc8>
	if(data[2]!=crc) return false;
    33b0:	9a 81       	ldd	r25, Y+2	; 0x02
    33b2:	89 13       	cpse	r24, r25
    33b4:	0a c0       	rjmp	.+20     	; 0x33ca <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    33b6:	62 e0       	ldi	r22, 0x02	; 2
    33b8:	ce 01       	movw	r24, r28
    33ba:	03 96       	adiw	r24, 0x03	; 3
    33bc:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <calc_crc8>
	if(data[5]!=crc) return false;
    33c0:	9d 81       	ldd	r25, Y+5	; 0x05
    33c2:	89 17       	cp	r24, r25
    33c4:	21 f0       	breq	.+8      	; 0x33ce <validate_data+0x2a>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	03 c0       	rjmp	.+6      	; 0x33d0 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	01 c0       	rjmp	.+2      	; 0x33d0 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
}
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

Disassembly of section .text.read_value:

00001e58 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <read_value+0xa>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <read_value+0xc>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <read_value+0xe>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	9f ef       	ldi	r25, 0xFF	; 255
    1e70:	f8 01       	movw	r30, r16
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    1e76:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <SCD30_HAL_data_ready>
    1e7a:	81 11       	cpse	r24, r1
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <read_value+0x34>
		*value=0xfffe;
    1e7e:	8e ef       	ldi	r24, 0xFE	; 254
    1e80:	9f ef       	ldi	r25, 0xFF	; 255
    1e82:	f8 01       	movw	r30, r16
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	2c c0       	rjmp	.+88     	; 0x1ee4 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    1e8c:	22 e0       	ldi	r18, 0x02	; 2
    1e8e:	44 e3       	ldi	r20, 0x34	; 52
    1e90:	53 e0       	ldi	r21, 0x03	; 3
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	81 e6       	ldi	r24, 0x61	; 97
    1e96:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	1e c0       	rjmp	.+60     	; 0x1eda <read_value+0x82>
    1e9e:	8f e3       	ldi	r24, 0x3F	; 63
    1ea0:	9f e1       	ldi	r25, 0x1F	; 31
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <read_value+0x4a>
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <read_value+0x50>
    1ea8:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    1eaa:	46 e0       	ldi	r20, 0x06	; 6
    1eac:	be 01       	movw	r22, r28
    1eae:	6f 5f       	subi	r22, 0xFF	; 255
    1eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb2:	81 e6       	ldi	r24, 0x61	; 97
    1eb4:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1eb8:	81 11       	cpse	r24, r1
    1eba:	11 c0       	rjmp	.+34     	; 0x1ede <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <validate_data>
    1ec4:	88 23       	and	r24, r24
    1ec6:	69 f0       	breq	.+26     	; 0x1ee2 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	0e 94 3d 1c 	call	0x387a	; 0x387a <bytes_2_uint>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    1ee4:	26 96       	adiw	r28, 0x06	; 6
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002de2 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    2de2:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <_data>
    2de6:	90 91 ab 0d 	lds	r25, 0x0DAB	; 0x800dab <_data+0x1>
    2dea:	20 91 a8 0d 	lds	r18, 0x0DA8	; 0x800da8 <cntSamples>
    2dee:	30 91 a9 0d 	lds	r19, 0x0DA9	; 0x800da9 <cntSamples+0x1>
    2df2:	a9 01       	movw	r20, r18
    2df4:	4f 5f       	subi	r20, 0xFF	; 255
    2df6:	5f 4f       	sbci	r21, 0xFF	; 255
    2df8:	50 93 a9 0d 	sts	0x0DA9, r21	; 0x800da9 <cntSamples+0x1>
    2dfc:	40 93 a8 0d 	sts	0x0DA8, r20	; 0x800da8 <cntSamples>
    2e00:	22 0f       	add	r18, r18
    2e02:	33 1f       	adc	r19, r19
    2e04:	82 0f       	add	r24, r18
    2e06:	93 1f       	adc	r25, r19
    2e08:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <read_value>
	if(cntSamples>=_nSamples){
    2e0c:	20 91 a8 0d 	lds	r18, 0x0DA8	; 0x800da8 <cntSamples>
    2e10:	30 91 a9 0d 	lds	r19, 0x0DA9	; 0x800da9 <cntSamples+0x1>
    2e14:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <_nSamples>
    2e18:	90 91 ad 0d 	lds	r25, 0x0DAD	; 0x800dad <_nSamples+0x1>
    2e1c:	28 17       	cp	r18, r24
    2e1e:	39 07       	cpc	r19, r25
    2e20:	10 f0       	brcs	.+4      	; 0x2e26 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    2e22:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <TC1_HAL_stop>
    2e26:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00002a72 <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    2a78:	70 93 ad 0d 	sts	0x0DAD, r23	; 0x800dad <_nSamples+0x1>
    2a7c:	60 93 ac 0d 	sts	0x0DAC, r22	; 0x800dac <_nSamples>
	cntSamples=0;
    2a80:	10 92 a9 0d 	sts	0x0DA9, r1	; 0x800da9 <cntSamples+0x1>
    2a84:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <cntSamples>
	_data=data;
    2a88:	50 93 ab 0d 	sts	0x0DAB, r21	; 0x800dab <_data+0x1>
    2a8c:	40 93 aa 0d 	sts	0x0DAA, r20	; 0x800daa <_data>
	
	//Init
	SCD30_HAL_init();
    2a90:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    2a94:	61 ef       	ldi	r22, 0xF1	; 241
    2a96:	76 e1       	ldi	r23, 0x16	; 22
    2a98:	ce 01       	movw	r24, r28
    2a9a:	0e 94 39 19 	call	0x3272	; 0x3272 <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	0e 94 a6 1c 	call	0x394c	; 0x394c <PM_HAL_SCD30_power>
    2aa4:	2f ef       	ldi	r18, 0xFF	; 255
    2aa6:	83 ed       	ldi	r24, 0xD3	; 211
    2aa8:	90 e3       	ldi	r25, 0x30	; 48
    2aaa:	21 50       	subi	r18, 0x01	; 1
    2aac:	80 40       	sbci	r24, 0x00	; 0
    2aae:	90 40       	sbci	r25, 0x00	; 0
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <SCD30_init_sampling+0x38>
    2ab2:	00 c0       	rjmp	.+0      	; 0x2ab4 <SCD30_init_sampling+0x42>
    2ab4:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    2ab6:	0e 94 95 18 	call	0x312a	; 0x312a <init_measurement>
}
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000039c4 <SCD30_deinit_sampling>:

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    39c4:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	0e 94 a6 1c 	call	0x394c	; 0x394c <PM_HAL_SCD30_power>
	_data=NULL;
    39ce:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <_data+0x1>
    39d2:	10 92 aa 0d 	sts	0x0DAA, r1	; 0x800daa <_data>
    39d6:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

00003af0 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    3af0:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <vect_SCD_do_sample>
	TC1_HAL_start();
    3af4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00003842 <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    3842:	40 91 a8 0d 	lds	r20, 0x0DA8	; 0x800da8 <cntSamples>
    3846:	50 91 a9 0d 	lds	r21, 0x0DA9	; 0x800da9 <cntSamples+0x1>
    384a:	20 91 ac 0d 	lds	r18, 0x0DAC	; 0x800dac <_nSamples>
    384e:	30 91 ad 0d 	lds	r19, 0x0DAD	; 0x800dad <_nSamples+0x1>
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	42 17       	cp	r20, r18
    3856:	53 07       	cpc	r21, r19
    3858:	08 f4       	brcc	.+2      	; 0x385c <SCD30_is_sampling_done+0x1a>
    385a:	80 e0       	ldi	r24, 0x00	; 0
}
    385c:	08 95       	ret

Disassembly of section .text.decode_stage_response:

0000390e <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    390e:	88 23       	and	r24, r24
    3910:	19 f0       	breq	.+6      	; 0x3918 <decode_stage_response+0xa>
    3912:	81 30       	cpi	r24, 0x01	; 1
    3914:	29 f0       	breq	.+10     	; 0x3920 <decode_stage_response+0x12>
    3916:	02 c0       	rjmp	.+4      	; 0x391c <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    3918:	8e e0       	ldi	r24, 0x0E	; 14
    391a:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    391c:	83 e1       	ldi	r24, 0x13	; 19
    391e:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    3920:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3922:	08 95       	ret

Disassembly of section .text.decode_join_response:

0000385e <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    385e:	83 30       	cpi	r24, 0x03	; 3
    3860:	51 f0       	breq	.+20     	; 0x3876 <decode_join_response+0x18>
    3862:	84 30       	cpi	r24, 0x04	; 4
    3864:	21 f0       	breq	.+8      	; 0x386e <decode_join_response+0x10>
    3866:	81 11       	cpse	r24, r1
    3868:	04 c0       	rjmp	.+8      	; 0x3872 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
    386a:	85 e0       	ldi	r24, 0x05	; 5
    386c:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    3872:	83 e1       	ldi	r24, 0x13	; 19
    3874:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    3876:	82 e0       	ldi	r24, 0x02	; 2
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    3878:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

0000375c <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    375c:	83 30       	cpi	r24, 0x03	; 3
    375e:	49 f0       	breq	.+18     	; 0x3772 <decode_header_tail_response+0x16>
    3760:	18 f4       	brcc	.+6      	; 0x3768 <decode_header_tail_response+0xc>
    3762:	88 23       	and	r24, r24
    3764:	41 f0       	breq	.+16     	; 0x3776 <decode_header_tail_response+0x1a>
    3766:	03 c0       	rjmp	.+6      	; 0x376e <decode_header_tail_response+0x12>
    3768:	85 50       	subi	r24, 0x05	; 5
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	20 f0       	brcs	.+8      	; 0x3776 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    376e:	83 e1       	ldi	r24, 0x13	; 19
    3770:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    3772:	84 2f       	mov	r24, r20
    3774:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    3776:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3778:	08 95       	ret

Disassembly of section .text.join_lora:

0000225a <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(6);
}

static LM_STATUS join_lora(){
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	c3 54       	subi	r28, 0x43	; 67
    2264:	d1 09       	sbc	r29, r1
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    2270:	22 e5       	ldi	r18, 0x52	; 82
    2272:	31 e0       	ldi	r19, 0x01	; 1
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	81 e1       	ldi	r24, 0x11	; 17
    2278:	f9 01       	movw	r30, r18
    227a:	de 01       	movw	r26, r28
    227c:	11 96       	adiw	r26, 0x01	; 1
    227e:	74 2f       	mov	r23, r20
    2280:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    2284:	23 e6       	ldi	r18, 0x63	; 99
    2286:	31 e0       	ldi	r19, 0x01	; 1
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	81 e1       	ldi	r24, 0x11	; 17
    228c:	f9 01       	movw	r30, r18
    228e:	de 01       	movw	r26, r28
    2290:	52 96       	adiw	r26, 0x12	; 18
    2292:	74 2f       	mov	r23, r20
    2294:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    2298:	24 e7       	ldi	r18, 0x74	; 116
    229a:	31 e0       	ldi	r19, 0x01	; 1
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	81 e2       	ldi	r24, 0x21	; 33
    22a0:	f9 01       	movw	r30, r18
    22a2:	de 01       	movw	r26, r28
    22a4:	93 96       	adiw	r26, 0x23	; 35
    22a6:	74 2f       	mov	r23, r20
    22a8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    22ac:	ae 01       	movw	r20, r28
    22ae:	4d 5d       	subi	r20, 0xDD	; 221
    22b0:	5f 4f       	sbci	r21, 0xFF	; 255
    22b2:	be 01       	movw	r22, r28
    22b4:	6e 5e       	subi	r22, 0xEE	; 238
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	ce 01       	movw	r24, r28
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LM_join_network>
}
    22c0:	cd 5b       	subi	r28, 0xBD	; 189
    22c2:	df 4f       	sbci	r29, 0xFF	; 255
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

Disassembly of section .text.set_wakeup:

00003b54 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(6);
    3b54:	86 e0       	ldi	r24, 0x06	; 6
    3b56:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <RTC_set_wake_up_interrupt_minutes>
}
    3b5a:	08 95       	ret

Disassembly of section .text.send_header:

00002ffc <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	e4 97       	sbiw	r28, 0x34	; 52
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    3010:	be 01       	movw	r22, r28
    3012:	6c 5c       	subi	r22, 0xCC	; 204
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	ce 01       	movw	r24, r28
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    301e:	6c a9       	ldd	r22, Y+52	; 0x34
    3020:	ce 01       	movw	r24, r28
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <LM_send_uplink>
}
    3028:	e4 96       	adiw	r28, 0x34	; 52
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	08 95       	ret

Disassembly of section .text.stage_0:

0000194a <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    194a:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <state_s0>
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	29 f1       	breq	.+74     	; 0x199c <stage_0+0x52>
    1952:	28 f4       	brcc	.+10     	; 0x195e <stage_0+0x14>
    1954:	88 23       	and	r24, r24
    1956:	51 f0       	breq	.+20     	; 0x196c <stage_0+0x22>
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	c1 f0       	breq	.+48     	; 0x198c <stage_0+0x42>
    195c:	f6 cf       	rjmp	.-20     	; 0x194a <stage_0>
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	09 f4       	brne	.+2      	; 0x1964 <stage_0+0x1a>
    1962:	4e c0       	rjmp	.+156    	; 0x1a00 <stage_0+0xb6>
    1964:	30 f1       	brcs	.+76     	; 0x19b2 <stage_0+0x68>
    1966:	85 30       	cpi	r24, 0x05	; 5
    1968:	81 f1       	breq	.+96     	; 0x19ca <stage_0+0x80>
    196a:	ef cf       	rjmp	.-34     	; 0x194a <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    196c:	e2 e5       	ldi	r30, 0x52	; 82
    196e:	fd e0       	ldi	r31, 0x0D	; 13
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	4a e6       	ldi	r20, 0x6A	; 106
    1976:	59 e0       	ldi	r21, 0x09	; 9
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1980:	81 11       	cpse	r24, r1
    1982:	42 c0       	rjmp	.+132    	; 0x1a08 <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s0>
			break;
    198a:	df cf       	rjmp	.-66     	; 0x194a <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    198c:	8f e7       	ldi	r24, 0x7F	; 127
    198e:	9d e0       	ldi	r25, 0x0D	; 13
    1990:	0e 94 b1 07 	call	0xf62	; 0xf62 <RTC_get_current_time>
				state_s0=STAGE_START;
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s0>
			break;
    199a:	d7 cf       	rjmp	.-82     	; 0x194a <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 8e 1b 	call	0x371c	; 0x371c <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    19a2:	81 11       	cpse	r24, r1
    19a4:	33 c0       	rjmp	.+102    	; 0x1a0c <stage_0+0xc2>
			
				SCD30_start_sampling();
    19a6:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s0>
			break;
    19b0:	cc cf       	rjmp	.-104    	; 0x194a <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    19b2:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <ADC_meth_sens_ready>
    19b6:	88 23       	and	r24, r24
    19b8:	59 f1       	breq	.+86     	; 0x1a10 <stage_0+0xc6>
    19ba:	0e 94 21 1c 	call	0x3842	; 0x3842 <SCD30_is_sampling_done>
    19be:	88 23       	and	r24, r24
    19c0:	49 f1       	breq	.+82     	; 0x1a14 <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    19c2:	85 e0       	ldi	r24, 0x05	; 5
    19c4:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s0>
			break;
    19c8:	c0 cf       	rjmp	.-128    	; 0x194a <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    19ca:	26 e9       	ldi	r18, 0x96	; 150
    19cc:	3d e0       	ldi	r19, 0x0D	; 13
    19ce:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    19d2:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    19d6:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    19da:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    19de:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    19e2:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    19e6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    19ea:	4a e6       	ldi	r20, 0x6A	; 106
    19ec:	59 e0       	ldi	r21, 0x09	; 9
    19ee:	66 e9       	ldi	r22, 0x96	; 150
    19f0:	7d e0       	ldi	r23, 0x0D	; 13
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    19f8:	84 e0       	ldi	r24, 0x04	; 4
    19fa:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s0>
			break;
    19fe:	a5 cf       	rjmp	.-182    	; 0x194a <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1a00:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <SCD30_deinit_sampling>
				return STAGE_DONE;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	08 95       	ret
    1a14:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    1a16:	08 95       	ret

Disassembly of section .text.stage_1:

000014e0 <stage_1>:
/************************************************************************/
static STAGE_STATUS stage_1(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    14e0:	80 91 c3 0d 	lds	r24, 0x0DC3	; 0x800dc3 <state_s1>
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	81 f1       	breq	.+96     	; 0x1548 <stage_1+0x68>
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <stage_1+0x14>
    14ea:	88 23       	and	r24, r24
    14ec:	51 f0       	breq	.+20     	; 0x1502 <stage_1+0x22>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	19 f1       	breq	.+70     	; 0x1538 <stage_1+0x58>
    14f2:	f6 cf       	rjmp	.-20     	; 0x14e0 <stage_1>
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	09 f4       	brne	.+2      	; 0x14fa <stage_1+0x1a>
    14f8:	5d c0       	rjmp	.+186    	; 0x15b4 <stage_1+0xd4>
    14fa:	70 f1       	brcs	.+92     	; 0x1558 <stage_1+0x78>
    14fc:	85 30       	cpi	r24, 0x05	; 5
    14fe:	c1 f1       	breq	.+112    	; 0x1570 <stage_1+0x90>
    1500:	ef cf       	rjmp	.-34     	; 0x14e0 <stage_1>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
    1502:	e2 e5       	ldi	r30, 0x52	; 82
    1504:	fd e0       	ldi	r31, 0x0D	; 13
    1506:	65 81       	ldd	r22, Z+5	; 0x05
    1508:	76 81       	ldd	r23, Z+6	; 0x06
    150a:	4a e6       	ldi	r20, 0x6A	; 106
    150c:	59 e0       	ldi	r21, 0x09	; 9
    150e:	87 81       	ldd	r24, Z+7	; 0x07
    1510:	90 85       	ldd	r25, Z+8	; 0x08
    1512:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1516:	81 11       	cpse	r24, r1
    1518:	53 c0       	rjmp	.+166    	; 0x15c0 <stage_1+0xe0>
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
    151a:	e2 e5       	ldi	r30, 0x52	; 82
    151c:	fd e0       	ldi	r31, 0x0D	; 13
    151e:	62 85       	ldd	r22, Z+10	; 0x0a
    1520:	73 85       	ldd	r23, Z+11	; 0x0b
    1522:	42 e1       	ldi	r20, 0x12	; 18
    1524:	57 e0       	ldi	r21, 0x07	; 7
    1526:	84 85       	ldd	r24, Z+12	; 0x0c
    1528:	0e 94 2b 13 	call	0x2656	; 0x2656 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    152c:	81 11       	cpse	r24, r1
    152e:	4a c0       	rjmp	.+148    	; 0x15c4 <stage_1+0xe4>
				
				state_s1=STAGE_GET_TIME;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s1>
			break;
    1536:	d4 cf       	rjmp	.-88     	; 0x14e0 <stage_1>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1538:	8f e7       	ldi	r24, 0x7F	; 127
    153a:	9d e0       	ldi	r25, 0x0D	; 13
    153c:	0e 94 b1 07 	call	0xf62	; 0xf62 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s1>
			break;
    1546:	cc cf       	rjmp	.-104    	; 0x14e0 <stage_1>
			
			case STAGE_START:
				SCD30_start_sampling();
    1548:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <SCD30_start_sampling>
				ADC_start_sampling();
    154c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s1>
			break;
    1556:	c4 cf       	rjmp	.-120    	; 0x14e0 <stage_1>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1558:	0e 94 21 1c 	call	0x3842	; 0x3842 <SCD30_is_sampling_done>
    155c:	88 23       	and	r24, r24
    155e:	a1 f1       	breq	.+104    	; 0x15c8 <stage_1+0xe8>
    1560:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <ADC_is_sampling_done>
    1564:	88 23       	and	r24, r24
    1566:	91 f1       	breq	.+100    	; 0x15cc <stage_1+0xec>
				state_s1=STAGE_UPDATE_MRPP;
    1568:	85 e0       	ldi	r24, 0x05	; 5
    156a:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s1>
			break;
    156e:	b8 cf       	rjmp	.-144    	; 0x14e0 <stage_1>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1570:	26 e9       	ldi	r18, 0x96	; 150
    1572:	3d e0       	ldi	r19, 0x0D	; 13
    1574:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    1578:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    157c:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    1580:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    1584:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    1588:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    158c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(2, ts, co2_data);
    1590:	4a e6       	ldi	r20, 0x6A	; 106
    1592:	59 e0       	ldi	r21, 0x09	; 9
    1594:	66 e9       	ldi	r22, 0x96	; 150
    1596:	7d e0       	ldi	r23, 0x0D	; 13
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(3, ts, meth_data);
    159e:	42 e1       	ldi	r20, 0x12	; 18
    15a0:	57 e0       	ldi	r21, 0x07	; 7
    15a2:	66 e9       	ldi	r22, 0x96	; 150
    15a4:	7d e0       	ldi	r23, 0x0D	; 13
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    15ac:	84 e0       	ldi	r24, 0x04	; 4
    15ae:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s1>
			break;
    15b2:	96 cf       	rjmp	.-212    	; 0x14e0 <stage_1>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    15b4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    15b8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <ADC_deinit_sampling>
				return STAGE_DONE;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	08 95       	ret
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	08 95       	ret
    15cc:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    15ce:	08 95       	ret

Disassembly of section .text.stage_3:

000015d0 <stage_3>:
/************************************************************************/
static STAGE_STATUS stage_3(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
    15d0:	80 91 c1 0d 	lds	r24, 0x0DC1	; 0x800dc1 <state_s3>
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	81 f1       	breq	.+96     	; 0x1638 <stage_3+0x68>
    15d8:	28 f4       	brcc	.+10     	; 0x15e4 <stage_3+0x14>
    15da:	88 23       	and	r24, r24
    15dc:	51 f0       	breq	.+20     	; 0x15f2 <stage_3+0x22>
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	19 f1       	breq	.+70     	; 0x1628 <stage_3+0x58>
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <stage_3>
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	09 f4       	brne	.+2      	; 0x15ea <stage_3+0x1a>
    15e8:	5d c0       	rjmp	.+186    	; 0x16a4 <stage_3+0xd4>
    15ea:	70 f1       	brcs	.+92     	; 0x1648 <stage_3+0x78>
    15ec:	85 30       	cpi	r24, 0x05	; 5
    15ee:	c1 f1       	breq	.+112    	; 0x1660 <stage_3+0x90>
    15f0:	ef cf       	rjmp	.-34     	; 0x15d0 <stage_3>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[5].samplingInterval, cols[5].samplings, co2_data);
    15f2:	e2 e5       	ldi	r30, 0x52	; 82
    15f4:	fd e0       	ldi	r31, 0x0D	; 13
    15f6:	61 8d       	ldd	r22, Z+25	; 0x19
    15f8:	72 8d       	ldd	r23, Z+26	; 0x1a
    15fa:	4a e6       	ldi	r20, 0x6A	; 106
    15fc:	59 e0       	ldi	r21, 0x09	; 9
    15fe:	83 8d       	ldd	r24, Z+27	; 0x1b
    1600:	94 8d       	ldd	r25, Z+28	; 0x1c
    1602:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1606:	81 11       	cpse	r24, r1
    1608:	53 c0       	rjmp	.+166    	; 0x16b0 <stage_3+0xe0>
				
				adcStatus=ADC_init_sampling(cols[6].samplingInterval, cols[6].samplings, meth_data);
    160a:	e2 e5       	ldi	r30, 0x52	; 82
    160c:	fd e0       	ldi	r31, 0x0D	; 13
    160e:	66 8d       	ldd	r22, Z+30	; 0x1e
    1610:	77 8d       	ldd	r23, Z+31	; 0x1f
    1612:	42 e1       	ldi	r20, 0x12	; 18
    1614:	57 e0       	ldi	r21, 0x07	; 7
    1616:	80 a1       	ldd	r24, Z+32	; 0x20
    1618:	0e 94 2b 13 	call	0x2656	; 0x2656 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    161c:	81 11       	cpse	r24, r1
    161e:	4a c0       	rjmp	.+148    	; 0x16b4 <stage_3+0xe4>
			
				state_s3=STAGE_GET_TIME;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <state_s3>
			break;
    1626:	d4 cf       	rjmp	.-88     	; 0x15d0 <stage_3>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1628:	8f e7       	ldi	r24, 0x7F	; 127
    162a:	9d e0       	ldi	r25, 0x0D	; 13
    162c:	0e 94 b1 07 	call	0xf62	; 0xf62 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <state_s3>
			break;
    1636:	cc cf       	rjmp	.-104    	; 0x15d0 <stage_3>
			
			case STAGE_START:
				SCD30_start_sampling();
    1638:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <SCD30_start_sampling>
				ADC_start_sampling();
    163c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <state_s3>
			break;
    1646:	c4 cf       	rjmp	.-120    	; 0x15d0 <stage_3>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1648:	0e 94 21 1c 	call	0x3842	; 0x3842 <SCD30_is_sampling_done>
    164c:	88 23       	and	r24, r24
    164e:	a1 f1       	breq	.+104    	; 0x16b8 <stage_3+0xe8>
    1650:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <ADC_is_sampling_done>
    1654:	88 23       	and	r24, r24
    1656:	91 f1       	breq	.+100    	; 0x16bc <stage_3+0xec>
				state_s3=STAGE_UPDATE_MRPP;
    1658:	85 e0       	ldi	r24, 0x05	; 5
    165a:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <state_s3>
			break;
    165e:	b8 cf       	rjmp	.-144    	; 0x15d0 <stage_3>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1660:	26 e9       	ldi	r18, 0x96	; 150
    1662:	3d e0       	ldi	r19, 0x0D	; 13
    1664:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    1668:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    166c:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    1670:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    1674:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    1678:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    167c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(6, ts, co2_data);
    1680:	4a e6       	ldi	r20, 0x6A	; 106
    1682:	59 e0       	ldi	r21, 0x09	; 9
    1684:	66 e9       	ldi	r22, 0x96	; 150
    1686:	7d e0       	ldi	r23, 0x0D	; 13
    1688:	86 e0       	ldi	r24, 0x06	; 6
    168a:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(7, ts, meth_data);
    168e:	42 e1       	ldi	r20, 0x12	; 18
    1690:	57 e0       	ldi	r21, 0x07	; 7
    1692:	66 e9       	ldi	r22, 0x96	; 150
    1694:	7d e0       	ldi	r23, 0x0D	; 13
    1696:	87 e0       	ldi	r24, 0x07	; 7
    1698:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    169c:	84 e0       	ldi	r24, 0x04	; 4
    169e:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <state_s3>
			break;
    16a2:	96 cf       	rjmp	.-212    	; 0x15d0 <stage_3>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    16a4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    16a8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <ADC_deinit_sampling>
				return STAGE_DONE;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[5].samplingInterval, cols[5].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[6].samplingInterval, cols[6].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	08 95       	ret
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	08 95       	ret
    16bc:	80 e0       	ldi	r24, 0x00	; 0
				ADC_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    16be:	08 95       	ret

Disassembly of section .text.stage_2:

000012de <stage_2>:
static STAGE_STATUS stage_2(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
    12de:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <state_s2>
    12e2:	82 30       	cpi	r24, 0x02	; 2
    12e4:	89 f1       	breq	.+98     	; 0x1348 <stage_2+0x6a>
    12e6:	28 f4       	brcc	.+10     	; 0x12f2 <stage_2+0x14>
    12e8:	88 23       	and	r24, r24
    12ea:	59 f0       	breq	.+22     	; 0x1302 <stage_2+0x24>
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	21 f1       	breq	.+72     	; 0x1338 <stage_2+0x5a>
    12f0:	f6 cf       	rjmp	.-20     	; 0x12de <stage_2>
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <stage_2+0x1a>
    12f6:	66 c0       	rjmp	.+204    	; 0x13c4 <stage_2+0xe6>
    12f8:	98 f1       	brcs	.+102    	; 0x1360 <stage_2+0x82>
    12fa:	85 30       	cpi	r24, 0x05	; 5
    12fc:	09 f4       	brne	.+2      	; 0x1300 <stage_2+0x22>
    12fe:	40 c0       	rjmp	.+128    	; 0x1380 <stage_2+0xa2>
    1300:	ee cf       	rjmp	.-36     	; 0x12de <stage_2>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
    1302:	e2 e5       	ldi	r30, 0x52	; 82
    1304:	fd e0       	ldi	r31, 0x0D	; 13
    1306:	67 85       	ldd	r22, Z+15	; 0x0f
    1308:	70 89       	ldd	r23, Z+16	; 0x10
    130a:	4a e6       	ldi	r20, 0x6A	; 106
    130c:	59 e0       	ldi	r21, 0x09	; 9
    130e:	81 89       	ldd	r24, Z+17	; 0x11
    1310:	92 89       	ldd	r25, Z+18	; 0x12
    1312:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1316:	81 11       	cpse	r24, r1
    1318:	5b c0       	rjmp	.+182    	; 0x13d0 <stage_2+0xf2>
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
    131a:	e2 e5       	ldi	r30, 0x52	; 82
    131c:	fd e0       	ldi	r31, 0x0D	; 13
    131e:	64 89       	ldd	r22, Z+20	; 0x14
    1320:	75 89       	ldd	r23, Z+21	; 0x15
    1322:	42 e1       	ldi	r20, 0x12	; 18
    1324:	57 e0       	ldi	r21, 0x07	; 7
    1326:	86 89       	ldd	r24, Z+22	; 0x16
    1328:	0e 94 2b 13 	call	0x2656	; 0x2656 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    132c:	81 11       	cpse	r24, r1
    132e:	52 c0       	rjmp	.+164    	; 0x13d4 <stage_2+0xf6>
			
				state_s2=STAGE_GET_TIME;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s2>
			break;
    1336:	d3 cf       	rjmp	.-90     	; 0x12de <stage_2>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1338:	8f e7       	ldi	r24, 0x7F	; 127
    133a:	9d e0       	ldi	r25, 0x0D	; 13
    133c:	0e 94 b1 07 	call	0xf62	; 0xf62 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s2>
			break;
    1346:	cb cf       	rjmp	.-106    	; 0x12de <stage_2>
			
			case STAGE_START:
				SCD30_start_sampling();
    1348:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <SCD30_start_sampling>
				ADC_start_sampling();
    134c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <ADC_start_sampling>
				PUMP_start(seconds);
    1350:	8a e0       	ldi	r24, 0x0A	; 10
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <PUMP_start>
			
				state_s2=STAGE_WAIT;
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s2>
			break;
    135e:	bf cf       	rjmp	.-130    	; 0x12de <stage_2>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    1360:	0e 94 21 1c 	call	0x3842	; 0x3842 <SCD30_is_sampling_done>
    1364:	88 23       	and	r24, r24
    1366:	c1 f1       	breq	.+112    	; 0x13d8 <stage_2+0xfa>
    1368:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <ADC_is_sampling_done>
    136c:	88 23       	and	r24, r24
    136e:	b1 f1       	breq	.+108    	; 0x13dc <stage_2+0xfe>
    1370:	0e 94 13 1c 	call	0x3826	; 0x3826 <PUMP_is_done>
    1374:	88 23       	and	r24, r24
    1376:	a1 f1       	breq	.+104    	; 0x13e0 <stage_2+0x102>
				state_s2=STAGE_UPDATE_MRPP;
    1378:	85 e0       	ldi	r24, 0x05	; 5
    137a:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s2>
			break;
    137e:	af cf       	rjmp	.-162    	; 0x12de <stage_2>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1380:	26 e9       	ldi	r18, 0x96	; 150
    1382:	3d e0       	ldi	r19, 0x0D	; 13
    1384:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    1388:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    138c:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    1390:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    1394:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    1398:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    139c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(4, ts, co2_data);
    13a0:	4a e6       	ldi	r20, 0x6A	; 106
    13a2:	59 e0       	ldi	r21, 0x09	; 9
    13a4:	66 e9       	ldi	r22, 0x96	; 150
    13a6:	7d e0       	ldi	r23, 0x0D	; 13
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(5, ts, meth_data);
    13ae:	42 e1       	ldi	r20, 0x12	; 18
    13b0:	57 e0       	ldi	r21, 0x07	; 7
    13b2:	66 e9       	ldi	r22, 0x96	; 150
    13b4:	7d e0       	ldi	r23, 0x0D	; 13
    13b6:	85 e0       	ldi	r24, 0x05	; 5
    13b8:	0e 94 55 12 	call	0x24aa	; 0x24aa <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    13bc:	84 e0       	ldi	r24, 0x04	; 4
    13be:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s2>
			break;
    13c2:	8d cf       	rjmp	.-230    	; 0x12de <stage_2>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    13c4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    13c8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <ADC_deinit_sampling>
				return STAGE_DONE;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	08 95       	ret
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	08 95       	ret
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	08 95       	ret
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	08 95       	ret
    13e0:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    13e2:	08 95       	ret

Disassembly of section .text.send_body:

00002fbc <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	e4 97       	sbiw	r28, 0x34	; 52
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    2fd0:	ae 01       	movw	r20, r28
    2fd2:	4c 5c       	subi	r20, 0xCC	; 204
    2fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd6:	be 01       	movw	r22, r28
    2fd8:	6f 5f       	subi	r22, 0xFF	; 255
    2fda:	7f 4f       	sbci	r23, 0xFF	; 255
    2fdc:	0e 94 14 10 	call	0x2028	; 0x2028 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    2fe0:	6c a9       	ldd	r22, Y+52	; 0x34
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	01 96       	adiw	r24, 0x01	; 1
    2fe6:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <LM_send_uplink>
}
    2fea:	e4 96       	adiw	r28, 0x34	; 52
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	08 95       	ret

Disassembly of section .text.decode_body_response:

000035a2 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    35a2:	cf 93       	push	r28
	switch(status){
    35a4:	63 30       	cpi	r22, 0x03	; 3
    35a6:	71 f0       	breq	.+28     	; 0x35c4 <decode_body_response+0x22>
    35a8:	18 f4       	brcc	.+6      	; 0x35b0 <decode_body_response+0xe>
    35aa:	66 23       	and	r22, r22
    35ac:	31 f0       	breq	.+12     	; 0x35ba <decode_body_response+0x18>
    35ae:	03 c0       	rjmp	.+6      	; 0x35b6 <decode_body_response+0x14>
    35b0:	65 50       	subi	r22, 0x05	; 5
    35b2:	62 30       	cpi	r22, 0x02	; 2
    35b4:	10 f0       	brcs	.+4      	; 0x35ba <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    35b6:	83 e1       	ldi	r24, 0x13	; 19
    35b8:	06 c0       	rjmp	.+12     	; 0x35c6 <decode_body_response+0x24>
    35ba:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    35bc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <MRPP_set_body_sent>
			return success;
    35c0:	8c 2f       	mov	r24, r28
    35c2:	01 c0       	rjmp	.+2      	; 0x35c6 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    35c4:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    35c6:	cf 91       	pop	r28
    35c8:	08 95       	ret

Disassembly of section .text.send_tail:

0000303a <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	e4 97       	sbiw	r28, 0x34	; 52
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    304e:	be 01       	movw	r22, r28
    3050:	6c 5c       	subi	r22, 0xCC	; 204
    3052:	7f 4f       	sbci	r23, 0xFF	; 255
    3054:	ce 01       	movw	r24, r28
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	0e 94 3c 1b 	call	0x3678	; 0x3678 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    305c:	6c a9       	ldd	r22, Y+52	; 0x34
    305e:	ce 01       	movw	r24, r28
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <LM_send_uplink>
}
    3066:	e4 96       	adiw	r28, 0x34	; 52
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	08 95       	ret

Disassembly of section .text.send_msg:

000038f6 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    38f6:	0e 94 8d 12 	call	0x251a	; 0x251a <uart0_hal_send_string>
    38fa:	2f ef       	ldi	r18, 0xFF	; 255
    38fc:	80 e7       	ldi	r24, 0x70	; 112
    38fe:	92 e0       	ldi	r25, 0x02	; 2
    3900:	21 50       	subi	r18, 0x01	; 1
    3902:	80 40       	sbci	r24, 0x00	; 0
    3904:	90 40       	sbci	r25, 0x00	; 0
    3906:	e1 f7       	brne	.-8      	; 0x3900 <send_msg+0xa>
    3908:	00 c0       	rjmp	.+0      	; 0x390a <send_msg+0x14>
    390a:	00 00       	nop
    390c:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000a16 <MAINPG_start>:
static uint8_t colsNumber=7;

static void send_msg(const char msg[]);


void MAINPG_start(){
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	//bool fromSleep=false;
	bool fromSleep=true;
 a1c:	11 e0       	ldi	r17, 0x01	; 1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 a1e:	c0 e0       	ldi	r28, 0x00	; 0
 a20:	10 c0       	rjmp	.+32     	; 0xa42 <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a22:	c4 e0       	ldi	r28, 0x04	; 4
 a24:	0e c0       	rjmp	.+28     	; 0xa42 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a26:	c3 e1       	ldi	r28, 0x13	; 19
 a28:	0c c0       	rjmp	.+24     	; 0xa42 <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 a2a:	c3 e1       	ldi	r28, 0x13	; 19
 a2c:	0a c0       	rjmp	.+20     	; 0xa42 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 a2e:	c3 e1       	ldi	r28, 0x13	; 19
 a30:	08 c0       	rjmp	.+16     	; 0xa42 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 a32:	c3 e1       	ldi	r28, 0x13	; 19
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <MAINPG_start+0x2c>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 a36:	cd 2f       	mov	r28, r29
 a38:	04 c0       	rjmp	.+8      	; 0xa42 <MAINPG_start+0x2c>
 a3a:	cd 2f       	mov	r28, r29
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 a3e:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 a40:	ce e0       	ldi	r28, 0x0E	; 14
	//bool fromSleep=false;
	bool fromSleep=true;
	
	
	while(1){
		switch(state){
 a42:	ec 2f       	mov	r30, r28
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	e5 31       	cpi	r30, 0x15	; 21
 a48:	f1 05       	cpc	r31, r1
 a4a:	d8 f7       	brcc	.-10     	; 0xa42 <MAINPG_start+0x2c>
 a4c:	eb 5a       	subi	r30, 0xAB	; 171
 a4e:	ff 4f       	sbci	r31, 0xFF	; 255
 a50:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 a54:	0e 94 3c 18 	call	0x3078	; 0x3078 <uart0_hal_init>
				uart1_hal_init();
 a58:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <uart1_hal_init>
				TWI_HAL_init();
 a5c:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <TWI_HAL_init>
				TC2_HAL_init();
 a60:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <TC2_HAL_init>
				PM_HAL_adc_power_init();
 a64:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 a68:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 a6c:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 a70:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <PM_HAL_SCD30_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 a74:	85 b1       	in	r24, 0x05	; 5
 a76:	81 60       	ori	r24, 0x01	; 1
 a78:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 a7a:	85 b1       	in	r24, 0x05	; 5
 a7c:	82 60       	ori	r24, 0x02	; 2
 a7e:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a80:	11 11       	cpse	r17, r1
 a82:	cf cf       	rjmp	.-98     	; 0xa22 <MAINPG_start+0xc>
 a84:	c1 e0       	ldi	r28, 0x01	; 1
 a86:	dd cf       	rjmp	.-70     	; 0xa42 <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 a88:	65 e9       	ldi	r22, 0x95	; 149
 a8a:	71 e0       	ldi	r23, 0x01	; 1
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				lmStatus=join_lora();
 a92:	0e 94 2d 11 	call	0x225a	; 0x225a <join_lora>
				state=decode_join_response(lmStatus);
 a96:	0e 94 2f 1c 	call	0x385e	; 0x385e <decode_join_response>
 a9a:	c8 2f       	mov	r28, r24
			break;
 a9c:	d2 cf       	rjmp	.-92     	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 a9e:	6c e9       	ldi	r22, 0x9C	; 156
 aa0:	71 e0       	ldi	r23, 0x01	; 1
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				lmStatus=LM_wake_up();
 aa8:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 aac:	81 11       	cpse	r24, r1
 aae:	bb cf       	rjmp	.-138    	; 0xa26 <MAINPG_start+0x10>
 ab0:	c5 e0       	ldi	r28, 0x05	; 5
 ab2:	c7 cf       	rjmp	.-114    	; 0xa42 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 ab4:	6b ea       	ldi	r22, 0xAB	; 171
 ab6:	71 e0       	ldi	r23, 0x01	; 1
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
 abe:	2f ef       	ldi	r18, 0xFF	; 255
 ac0:	81 e1       	ldi	r24, 0x11	; 17
 ac2:	9a e7       	ldi	r25, 0x7A	; 122
 ac4:	21 50       	subi	r18, 0x01	; 1
 ac6:	80 40       	sbci	r24, 0x00	; 0
 ac8:	90 40       	sbci	r25, 0x00	; 0
 aca:	e1 f7       	brne	.-8      	; 0xac4 <MAINPG_start+0xae>
 acc:	00 c0       	rjmp	.+0      	; 0xace <MAINPG_start+0xb8>
 ace:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 ad0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 ad2:	b7 cf       	rjmp	.-146    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				print_debug("Conf err\n\r");
 ad4:	67 eb       	ldi	r22, 0xB7	; 183
 ad6:	71 e0       	ldi	r23, 0x01	; 1
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				state=MAINPG_END;
 ade:	c4 e1       	ldi	r28, 0x14	; 20
			break;
 ae0:	b0 cf       	rjmp	.-160    	; 0xa42 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 ae2:	62 ec       	ldi	r22, 0xC2	; 194
 ae4:	71 e0       	ldi	r23, 0x01	; 1
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	0e 94 9c 14 	call	0x2938	; 0x2938 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 af2:	81 11       	cpse	r24, r1
 af4:	9a cf       	rjmp	.-204    	; 0xa2a <MAINPG_start+0x14>
 af6:	c7 e0       	ldi	r28, 0x07	; 7
 af8:	a4 cf       	rjmp	.-184    	; 0xa42 <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 afa:	6d ec       	ldi	r22, 0xCD	; 205
 afc:	71 e0       	ldi	r23, 0x01	; 1
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 b04:	0e 94 6d 19 	call	0x32da	; 0x32da <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 b08:	81 11       	cpse	r24, r1
 b0a:	91 cf       	rjmp	.-222    	; 0xa2e <MAINPG_start+0x18>
 b0c:	c6 e0       	ldi	r28, 0x06	; 6
 b0e:	99 cf       	rjmp	.-206    	; 0xa42 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 b10:	6f ed       	ldi	r22, 0xDF	; 223
 b12:	71 e0       	ldi	r23, 0x01	; 1
 b14:	80 e0       	ldi	r24, 0x00	; 0
 b16:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				rtcStatus=set_wakeup();
 b1a:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b1e:	81 11       	cpse	r24, r1
 b20:	88 cf       	rjmp	.-240    	; 0xa32 <MAINPG_start+0x1c>
 b22:	c8 e0       	ldi	r28, 0x08	; 8
 b24:	8e cf       	rjmp	.-228    	; 0xa42 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 b26:	64 ef       	ldi	r22, 0xF4	; 244
 b28:	71 e0       	ldi	r23, 0x01	; 1
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				MRPP_init_group(cols, colsNumber);
 b30:	67 e0       	ldi	r22, 0x07	; 7
 b32:	82 e5       	ldi	r24, 0x52	; 82
 b34:	9d e0       	ldi	r25, 0x0D	; 13
 b36:	0e 94 b9 19 	call	0x3372	; 0x3372 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 b3a:	c9 e0       	ldi	r28, 0x09	; 9
			break;
 b3c:	82 cf       	rjmp	.-252    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 b3e:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <LM_is_free>
 b42:	88 23       	and	r24, r24
 b44:	09 f4       	brne	.+2      	; 0xb48 <MAINPG_start+0x132>
 b46:	7d cf       	rjmp	.-262    	; 0xa42 <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 b48:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 b4c:	49 e0       	ldi	r20, 0x09	; 9
 b4e:	6a e0       	ldi	r22, 0x0A	; 10
 b50:	0e 94 ae 1b 	call	0x375c	; 0x375c <decode_header_tail_response>
 b54:	c8 2f       	mov	r28, r24
			break;
 b56:	75 cf       	rjmp	.-278    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 b58:	0e 94 a5 0c 	call	0x194a	; 0x194a <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b5c:	6b e0       	ldi	r22, 0x0B	; 11
 b5e:	0e 94 87 1c 	call	0x390e	; 0x390e <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 b62:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b64:	c8 2f       	mov	r28, r24
			break;
 b66:	6d cf       	rjmp	.-294    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 b68:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b6c:	6c e0       	ldi	r22, 0x0C	; 12
 b6e:	0e 94 87 1c 	call	0x390e	; 0x390e <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 b72:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b74:	c8 2f       	mov	r28, r24
			break;
 b76:	65 cf       	rjmp	.-310    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 b78:	0e 94 6f 09 	call	0x12de	; 0x12de <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 b7c:	6d e0       	ldi	r22, 0x0D	; 13
 b7e:	0e 94 87 1c 	call	0x390e	; 0x390e <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 b82:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 b84:	c8 2f       	mov	r28, r24
			break;
 b86:	5d cf       	rjmp	.-326    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
 b88:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b8c:	6f e0       	ldi	r22, 0x0F	; 15
 b8e:	0e 94 87 1c 	call	0x390e	; 0x390e <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
 b92:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b94:	c8 2f       	mov	r28, r24
			break;
 b96:	55 cf       	rjmp	.-342    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 b98:	8e ea       	ldi	r24, 0xAE	; 174
 b9a:	9d e0       	ldi	r25, 0x0D	; 13
 b9c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <MRPP_is_body_package_ready>
 ba0:	88 23       	and	r24, r24
 ba2:	09 f4       	brne	.+2      	; 0xba6 <MAINPG_start+0x190>
 ba4:	48 cf       	rjmp	.-368    	; 0xa36 <MAINPG_start+0x20>
 ba6:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <LM_is_free>
 baa:	88 23       	and	r24, r24
 bac:	09 f4       	brne	.+2      	; 0xbb0 <MAINPG_start+0x19a>
 bae:	45 cf       	rjmp	.-374    	; 0xa3a <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
 bb0:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <bodyIndex>
 bb4:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <bodyIndex+0x1>
 bb8:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 bbc:	4d 2f       	mov	r20, r29
 bbe:	68 2f       	mov	r22, r24
 bc0:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <bodyIndex>
 bc4:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <bodyIndex+0x1>
 bc8:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <decode_body_response>
 bcc:	c8 2f       	mov	r28, r24
 bce:	39 cf       	rjmp	.-398    	; 0xa42 <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 bd0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <MRPP_all_body_package_sent>
 bd4:	88 23       	and	r24, r24
 bd6:	09 f4       	brne	.+2      	; 0xbda <MAINPG_start+0x1c4>
 bd8:	32 cf       	rjmp	.-412    	; 0xa3e <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
 bda:	c0 e1       	ldi	r28, 0x10	; 16
 bdc:	32 cf       	rjmp	.-412    	; 0xa42 <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 bde:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <LM_is_free>
 be2:	88 23       	and	r24, r24
 be4:	09 f4       	brne	.+2      	; 0xbe8 <MAINPG_start+0x1d2>
 be6:	2d cf       	rjmp	.-422    	; 0xa42 <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 be8:	0e 94 1d 18 	call	0x303a	; 0x303a <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 bec:	40 e1       	ldi	r20, 0x10	; 16
 bee:	61 e1       	ldi	r22, 0x11	; 17
 bf0:	0e 94 ae 1b 	call	0x375c	; 0x375c <decode_header_tail_response>
 bf4:	c8 2f       	mov	r28, r24
				
			break;
 bf6:	25 cf       	rjmp	.-438    	; 0xa42 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 bf8:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 bfc:	11 e0       	ldi	r17, 0x01	; 1
 bfe:	81 11       	cpse	r24, r1
 c00:	10 e0       	ldi	r17, 0x00	; 0
				
				state=MAINPG_SLEEP;
 c02:	c2 e1       	ldi	r28, 0x12	; 18
			break;
 c04:	1e cf       	rjmp	.-452    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 c06:	60 e0       	ldi	r22, 0x00	; 0
 c08:	72 e0       	ldi	r23, 0x02	; 2
 c0a:	80 e0       	ldi	r24, 0x00	; 0
 c0c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				PM_HAL_enter_power_down();
 c10:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 c14:	68 e0       	ldi	r22, 0x08	; 8
 c16:	72 e0       	ldi	r23, 0x02	; 2
 c18:	80 e0       	ldi	r24, 0x00	; 0
 c1a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				state=MAINPG_INIT_HW;
 c1e:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 c20:	10 cf       	rjmp	.-480    	; 0xa42 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 c22:	60 e1       	ldi	r22, 0x10	; 16
 c24:	72 e0       	ldi	r23, 0x02	; 2
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				state=MAINPG_END;
 c2c:	c4 e1       	ldi	r28, 0x14	; 20
			break;
 c2e:	09 cf       	rjmp	.-494    	; 0xa42 <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 c30:	6e e1       	ldi	r22, 0x1E	; 30
 c32:	72 e0       	ldi	r23, 0x02	; 2
 c34:	80 e0       	ldi	r24, 0x00	; 0
 c36:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <send_msg>
				return;
			break;	
		}
	}
}
 c3a:	df 91       	pop	r29
 c3c:	cf 91       	pop	r28
 c3e:	1f 91       	pop	r17
 c40:	08 95       	ret

Disassembly of section .text.calc_crc8:

000031d0 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    31d0:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    31d2:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    31d4:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    31d6:	14 c0       	rjmp	.+40     	; 0x3200 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    31d8:	fa 01       	movw	r30, r20
    31da:	e3 0f       	add	r30, r19
    31dc:	f1 1d       	adc	r31, r1
    31de:	90 81       	ld	r25, Z
    31e0:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    31e2:	28 e0       	ldi	r18, 0x08	; 8
    31e4:	0a c0       	rjmp	.+20     	; 0x31fa <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    31e6:	88 23       	and	r24, r24
    31e8:	34 f4       	brge	.+12     	; 0x31f6 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	91 e3       	ldi	r25, 0x31	; 49
    31f2:	89 27       	eor	r24, r25
    31f4:	01 c0       	rjmp	.+2      	; 0x31f8 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    31f6:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    31f8:	21 50       	subi	r18, 0x01	; 1
    31fa:	21 11       	cpse	r18, r1
    31fc:	f4 cf       	rjmp	.-24     	; 0x31e6 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    31fe:	3f 5f       	subi	r19, 0xFF	; 255
    3200:	36 17       	cp	r19, r22
    3202:	50 f3       	brcs	.-44     	; 0x31d8 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    3204:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a70 <__subsf3>:
    3a70:	50 58       	subi	r21, 0x80	; 128

00003a72 <__addsf3>:
    3a72:	bb 27       	eor	r27, r27
    3a74:	aa 27       	eor	r26, r26
    3a76:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__addsf3x>
    3a7a:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001a18 <__addsf3x>:
    1a18:	11 c0       	rjmp	.+34     	; 0x1a3c <__addsf3x+0x24>
    1a1a:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fp_pscA>
    1a1e:	38 f0       	brcs	.+14     	; 0x1a2e <__addsf3x+0x16>
    1a20:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__fp_pscB>
    1a24:	20 f0       	brcs	.+8      	; 0x1a2e <__addsf3x+0x16>
    1a26:	39 f4       	brne	.+14     	; 0x1a36 <__addsf3x+0x1e>
    1a28:	9f 3f       	cpi	r25, 0xFF	; 255
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <__addsf3x+0x1a>
    1a2c:	26 f4       	brtc	.+8      	; 0x1a36 <__addsf3x+0x1e>
    1a2e:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__fp_nan>
    1a32:	0e f4       	brtc	.+2      	; 0x1a36 <__addsf3x+0x1e>
    1a34:	e0 95       	com	r30
    1a36:	e7 fb       	bst	r30, 7
    1a38:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_inf>
    1a3c:	e9 2f       	mov	r30, r25
    1a3e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__fp_split3>
    1a42:	58 f3       	brcs	.-42     	; 0x1a1a <__addsf3x+0x2>
    1a44:	ba 17       	cp	r27, r26
    1a46:	62 07       	cpc	r22, r18
    1a48:	73 07       	cpc	r23, r19
    1a4a:	84 07       	cpc	r24, r20
    1a4c:	95 07       	cpc	r25, r21
    1a4e:	20 f0       	brcs	.+8      	; 0x1a58 <__addsf3x+0x40>
    1a50:	79 f4       	brne	.+30     	; 0x1a70 <__addsf3x+0x58>
    1a52:	a6 f5       	brtc	.+104    	; 0x1abc <__addsf3x+0xa4>
    1a54:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__fp_zero>
    1a58:	0e f4       	brtc	.+2      	; 0x1a5c <__addsf3x+0x44>
    1a5a:	e0 95       	com	r30
    1a5c:	0b 2e       	mov	r0, r27
    1a5e:	ba 2f       	mov	r27, r26
    1a60:	a0 2d       	mov	r26, r0
    1a62:	0b 01       	movw	r0, r22
    1a64:	b9 01       	movw	r22, r18
    1a66:	90 01       	movw	r18, r0
    1a68:	0c 01       	movw	r0, r24
    1a6a:	ca 01       	movw	r24, r20
    1a6c:	a0 01       	movw	r20, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	ff 27       	eor	r31, r31
    1a72:	59 1b       	sub	r21, r25
    1a74:	99 f0       	breq	.+38     	; 0x1a9c <__addsf3x+0x84>
    1a76:	59 3f       	cpi	r21, 0xF9	; 249
    1a78:	50 f4       	brcc	.+20     	; 0x1a8e <__addsf3x+0x76>
    1a7a:	50 3e       	cpi	r21, 0xE0	; 224
    1a7c:	68 f1       	brcs	.+90     	; 0x1ad8 <__addsf3x+0xc0>
    1a7e:	1a 16       	cp	r1, r26
    1a80:	f0 40       	sbci	r31, 0x00	; 0
    1a82:	a2 2f       	mov	r26, r18
    1a84:	23 2f       	mov	r18, r19
    1a86:	34 2f       	mov	r19, r20
    1a88:	44 27       	eor	r20, r20
    1a8a:	58 5f       	subi	r21, 0xF8	; 248
    1a8c:	f3 cf       	rjmp	.-26     	; 0x1a74 <__addsf3x+0x5c>
    1a8e:	46 95       	lsr	r20
    1a90:	37 95       	ror	r19
    1a92:	27 95       	ror	r18
    1a94:	a7 95       	ror	r26
    1a96:	f0 40       	sbci	r31, 0x00	; 0
    1a98:	53 95       	inc	r21
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__addsf3x+0x76>
    1a9c:	7e f4       	brtc	.+30     	; 0x1abc <__addsf3x+0xa4>
    1a9e:	1f 16       	cp	r1, r31
    1aa0:	ba 0b       	sbc	r27, r26
    1aa2:	62 0b       	sbc	r22, r18
    1aa4:	73 0b       	sbc	r23, r19
    1aa6:	84 0b       	sbc	r24, r20
    1aa8:	ba f0       	brmi	.+46     	; 0x1ad8 <__addsf3x+0xc0>
    1aaa:	91 50       	subi	r25, 0x01	; 1
    1aac:	a1 f0       	breq	.+40     	; 0x1ad6 <__addsf3x+0xbe>
    1aae:	ff 0f       	add	r31, r31
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	c2 f7       	brpl	.-16     	; 0x1aaa <__addsf3x+0x92>
    1aba:	0e c0       	rjmp	.+28     	; 0x1ad8 <__addsf3x+0xc0>
    1abc:	ba 0f       	add	r27, r26
    1abe:	62 1f       	adc	r22, r18
    1ac0:	73 1f       	adc	r23, r19
    1ac2:	84 1f       	adc	r24, r20
    1ac4:	48 f4       	brcc	.+18     	; 0x1ad8 <__addsf3x+0xc0>
    1ac6:	87 95       	ror	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	b7 95       	ror	r27
    1ace:	f7 95       	ror	r31
    1ad0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <__addsf3x+0xbe>
    1ad4:	b0 cf       	rjmp	.-160    	; 0x1a36 <__addsf3x+0x1e>
    1ad6:	93 95       	inc	r25
    1ad8:	88 0f       	add	r24, r24
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <__addsf3x+0xc6>
    1adc:	99 27       	eor	r25, r25
    1ade:	ee 0f       	add	r30, r30
    1ae0:	97 95       	ror	r25
    1ae2:	87 95       	ror	r24
    1ae4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003b5c <__divsf3>:
    3b5c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__divsf3x>
    3b60:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000016c0 <__divsf3x>:
    16c0:	10 c0       	rjmp	.+32     	; 0x16e2 <__divsf3x+0x22>
    16c2:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__fp_pscB>
    16c6:	58 f0       	brcs	.+22     	; 0x16de <__divsf3x+0x1e>
    16c8:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fp_pscA>
    16cc:	40 f0       	brcs	.+16     	; 0x16de <__divsf3x+0x1e>
    16ce:	29 f4       	brne	.+10     	; 0x16da <__divsf3x+0x1a>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	29 f0       	breq	.+10     	; 0x16de <__divsf3x+0x1e>
    16d4:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_inf>
    16d8:	51 11       	cpse	r21, r1
    16da:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <__fp_szero>
    16de:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__fp_nan>
    16e2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__fp_split3>
    16e6:	68 f3       	brcs	.-38     	; 0x16c2 <__divsf3x+0x2>

000016e8 <__divsf3_pse>:
    16e8:	99 23       	and	r25, r25
    16ea:	b1 f3       	breq	.-20     	; 0x16d8 <__divsf3x+0x18>
    16ec:	55 23       	and	r21, r21
    16ee:	91 f3       	breq	.-28     	; 0x16d4 <__divsf3x+0x14>
    16f0:	95 1b       	sub	r25, r21
    16f2:	55 0b       	sbc	r21, r21
    16f4:	bb 27       	eor	r27, r27
    16f6:	aa 27       	eor	r26, r26
    16f8:	62 17       	cp	r22, r18
    16fa:	73 07       	cpc	r23, r19
    16fc:	84 07       	cpc	r24, r20
    16fe:	38 f0       	brcs	.+14     	; 0x170e <__divsf3_pse+0x26>
    1700:	9f 5f       	subi	r25, 0xFF	; 255
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	44 1f       	adc	r20, r20
    170a:	aa 1f       	adc	r26, r26
    170c:	a9 f3       	breq	.-22     	; 0x16f8 <__divsf3_pse+0x10>
    170e:	35 d0       	rcall	.+106    	; 0x177a <__divsf3_pse+0x92>
    1710:	0e 2e       	mov	r0, r30
    1712:	3a f0       	brmi	.+14     	; 0x1722 <__divsf3_pse+0x3a>
    1714:	e0 e8       	ldi	r30, 0x80	; 128
    1716:	32 d0       	rcall	.+100    	; 0x177c <__divsf3_pse+0x94>
    1718:	91 50       	subi	r25, 0x01	; 1
    171a:	50 40       	sbci	r21, 0x00	; 0
    171c:	e6 95       	lsr	r30
    171e:	00 1c       	adc	r0, r0
    1720:	ca f7       	brpl	.-14     	; 0x1714 <__divsf3_pse+0x2c>
    1722:	2b d0       	rcall	.+86     	; 0x177a <__divsf3_pse+0x92>
    1724:	fe 2f       	mov	r31, r30
    1726:	29 d0       	rcall	.+82     	; 0x177a <__divsf3_pse+0x92>
    1728:	66 0f       	add	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	88 1f       	adc	r24, r24
    172e:	bb 1f       	adc	r27, r27
    1730:	26 17       	cp	r18, r22
    1732:	37 07       	cpc	r19, r23
    1734:	48 07       	cpc	r20, r24
    1736:	ab 07       	cpc	r26, r27
    1738:	b0 e8       	ldi	r27, 0x80	; 128
    173a:	09 f0       	breq	.+2      	; 0x173e <__divsf3_pse+0x56>
    173c:	bb 0b       	sbc	r27, r27
    173e:	80 2d       	mov	r24, r0
    1740:	bf 01       	movw	r22, r30
    1742:	ff 27       	eor	r31, r31
    1744:	93 58       	subi	r25, 0x83	; 131
    1746:	5f 4f       	sbci	r21, 0xFF	; 255
    1748:	3a f0       	brmi	.+14     	; 0x1758 <__divsf3_pse+0x70>
    174a:	9e 3f       	cpi	r25, 0xFE	; 254
    174c:	51 05       	cpc	r21, r1
    174e:	78 f0       	brcs	.+30     	; 0x176e <__divsf3_pse+0x86>
    1750:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_inf>
    1754:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <__fp_szero>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	e4 f3       	brlt	.-8      	; 0x1754 <__divsf3_pse+0x6c>
    175c:	98 3e       	cpi	r25, 0xE8	; 232
    175e:	d4 f3       	brlt	.-12     	; 0x1754 <__divsf3_pse+0x6c>
    1760:	86 95       	lsr	r24
    1762:	77 95       	ror	r23
    1764:	67 95       	ror	r22
    1766:	b7 95       	ror	r27
    1768:	f7 95       	ror	r31
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	c9 f7       	brne	.-14     	; 0x1760 <__divsf3_pse+0x78>
    176e:	88 0f       	add	r24, r24
    1770:	91 1d       	adc	r25, r1
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	97 f9       	bld	r25, 7
    1778:	08 95       	ret
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	bb 1f       	adc	r27, r27
    1784:	62 17       	cp	r22, r18
    1786:	73 07       	cpc	r23, r19
    1788:	84 07       	cpc	r24, r20
    178a:	ba 07       	cpc	r27, r26
    178c:	20 f0       	brcs	.+8      	; 0x1796 <__divsf3_pse+0xae>
    178e:	62 1b       	sub	r22, r18
    1790:	73 0b       	sbc	r23, r19
    1792:	84 0b       	sbc	r24, r20
    1794:	ba 0b       	sbc	r27, r26
    1796:	ee 1f       	adc	r30, r30
    1798:	88 f7       	brcc	.-30     	; 0x177c <__divsf3_pse+0x94>
    179a:	e0 95       	com	r30
    179c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002778 <__fixunssfsi>:
    2778:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__fp_splitA>
    277c:	88 f0       	brcs	.+34     	; 0x27a0 <__fixunssfsi+0x28>
    277e:	9f 57       	subi	r25, 0x7F	; 127
    2780:	98 f0       	brcs	.+38     	; 0x27a8 <__fixunssfsi+0x30>
    2782:	b9 2f       	mov	r27, r25
    2784:	99 27       	eor	r25, r25
    2786:	b7 51       	subi	r27, 0x17	; 23
    2788:	b0 f0       	brcs	.+44     	; 0x27b6 <__fixunssfsi+0x3e>
    278a:	e1 f0       	breq	.+56     	; 0x27c4 <__fixunssfsi+0x4c>
    278c:	66 0f       	add	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	88 1f       	adc	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	1a f0       	brmi	.+6      	; 0x279c <__fixunssfsi+0x24>
    2796:	ba 95       	dec	r27
    2798:	c9 f7       	brne	.-14     	; 0x278c <__fixunssfsi+0x14>
    279a:	14 c0       	rjmp	.+40     	; 0x27c4 <__fixunssfsi+0x4c>
    279c:	b1 30       	cpi	r27, 0x01	; 1
    279e:	91 f0       	breq	.+36     	; 0x27c4 <__fixunssfsi+0x4c>
    27a0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__fp_zero>
    27a4:	b1 e0       	ldi	r27, 0x01	; 1
    27a6:	08 95       	ret
    27a8:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__fp_zero>
    27ac:	67 2f       	mov	r22, r23
    27ae:	78 2f       	mov	r23, r24
    27b0:	88 27       	eor	r24, r24
    27b2:	b8 5f       	subi	r27, 0xF8	; 248
    27b4:	39 f0       	breq	.+14     	; 0x27c4 <__fixunssfsi+0x4c>
    27b6:	b9 3f       	cpi	r27, 0xF9	; 249
    27b8:	cc f3       	brlt	.-14     	; 0x27ac <__fixunssfsi+0x34>
    27ba:	86 95       	lsr	r24
    27bc:	77 95       	ror	r23
    27be:	67 95       	ror	r22
    27c0:	b3 95       	inc	r27
    27c2:	d9 f7       	brne	.-10     	; 0x27ba <__fixunssfsi+0x42>
    27c4:	3e f4       	brtc	.+14     	; 0x27d4 <__fixunssfsi+0x5c>
    27c6:	90 95       	com	r25
    27c8:	80 95       	com	r24
    27ca:	70 95       	com	r23
    27cc:	61 95       	neg	r22
    27ce:	7f 4f       	sbci	r23, 0xFF	; 255
    27d0:	8f 4f       	sbci	r24, 0xFF	; 255
    27d2:	9f 4f       	sbci	r25, 0xFF	; 255
    27d4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000022d4 <__floatunsisf>:
    22d4:	e8 94       	clt
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <__floatsisf+0x12>

000022d8 <__floatsisf>:
    22d8:	97 fb       	bst	r25, 7
    22da:	3e f4       	brtc	.+14     	; 0x22ea <__floatsisf+0x12>
    22dc:	90 95       	com	r25
    22de:	80 95       	com	r24
    22e0:	70 95       	com	r23
    22e2:	61 95       	neg	r22
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	8f 4f       	sbci	r24, 0xFF	; 255
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	99 23       	and	r25, r25
    22ec:	a9 f0       	breq	.+42     	; 0x2318 <__floatsisf+0x40>
    22ee:	f9 2f       	mov	r31, r25
    22f0:	96 e9       	ldi	r25, 0x96	; 150
    22f2:	bb 27       	eor	r27, r27
    22f4:	93 95       	inc	r25
    22f6:	f6 95       	lsr	r31
    22f8:	87 95       	ror	r24
    22fa:	77 95       	ror	r23
    22fc:	67 95       	ror	r22
    22fe:	b7 95       	ror	r27
    2300:	f1 11       	cpse	r31, r1
    2302:	f8 cf       	rjmp	.-16     	; 0x22f4 <__floatsisf+0x1c>
    2304:	fa f4       	brpl	.+62     	; 0x2344 <__floatsisf+0x6c>
    2306:	bb 0f       	add	r27, r27
    2308:	11 f4       	brne	.+4      	; 0x230e <__floatsisf+0x36>
    230a:	60 ff       	sbrs	r22, 0
    230c:	1b c0       	rjmp	.+54     	; 0x2344 <__floatsisf+0x6c>
    230e:	6f 5f       	subi	r22, 0xFF	; 255
    2310:	7f 4f       	sbci	r23, 0xFF	; 255
    2312:	8f 4f       	sbci	r24, 0xFF	; 255
    2314:	9f 4f       	sbci	r25, 0xFF	; 255
    2316:	16 c0       	rjmp	.+44     	; 0x2344 <__floatsisf+0x6c>
    2318:	88 23       	and	r24, r24
    231a:	11 f0       	breq	.+4      	; 0x2320 <__floatsisf+0x48>
    231c:	96 e9       	ldi	r25, 0x96	; 150
    231e:	11 c0       	rjmp	.+34     	; 0x2342 <__floatsisf+0x6a>
    2320:	77 23       	and	r23, r23
    2322:	21 f0       	breq	.+8      	; 0x232c <__floatsisf+0x54>
    2324:	9e e8       	ldi	r25, 0x8E	; 142
    2326:	87 2f       	mov	r24, r23
    2328:	76 2f       	mov	r23, r22
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <__floatsisf+0x5e>
    232c:	66 23       	and	r22, r22
    232e:	71 f0       	breq	.+28     	; 0x234c <__floatsisf+0x74>
    2330:	96 e8       	ldi	r25, 0x86	; 134
    2332:	86 2f       	mov	r24, r22
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	2a f0       	brmi	.+10     	; 0x2344 <__floatsisf+0x6c>
    233a:	9a 95       	dec	r25
    233c:	66 0f       	add	r22, r22
    233e:	77 1f       	adc	r23, r23
    2340:	88 1f       	adc	r24, r24
    2342:	da f7       	brpl	.-10     	; 0x233a <__floatsisf+0x62>
    2344:	88 0f       	add	r24, r24
    2346:	96 95       	lsr	r25
    2348:	87 95       	ror	r24
    234a:	97 f9       	bld	r25, 7
    234c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003afc <__fp_inf>:
    3afc:	97 f9       	bld	r25, 7
    3afe:	9f 67       	ori	r25, 0x7F	; 127
    3b00:	80 e8       	ldi	r24, 0x80	; 128
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003ba2 <__fp_nan>:
    3ba2:	9f ef       	ldi	r25, 0xFF	; 255
    3ba4:	80 ec       	ldi	r24, 0xC0	; 192
    3ba6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a7e <__fp_pscA>:
    3a7e:	00 24       	eor	r0, r0
    3a80:	0a 94       	dec	r0
    3a82:	16 16       	cp	r1, r22
    3a84:	17 06       	cpc	r1, r23
    3a86:	18 06       	cpc	r1, r24
    3a88:	09 06       	cpc	r0, r25
    3a8a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a8c <__fp_pscB>:
    3a8c:	00 24       	eor	r0, r0
    3a8e:	0a 94       	dec	r0
    3a90:	12 16       	cp	r1, r18
    3a92:	13 06       	cpc	r1, r19
    3a94:	14 06       	cpc	r1, r20
    3a96:	05 06       	cpc	r0, r21
    3a98:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000369a <__fp_round>:
    369a:	09 2e       	mov	r0, r25
    369c:	03 94       	inc	r0
    369e:	00 0c       	add	r0, r0
    36a0:	11 f4       	brne	.+4      	; 0x36a6 <__fp_round+0xc>
    36a2:	88 23       	and	r24, r24
    36a4:	52 f0       	brmi	.+20     	; 0x36ba <__fp_round+0x20>
    36a6:	bb 0f       	add	r27, r27
    36a8:	40 f4       	brcc	.+16     	; 0x36ba <__fp_round+0x20>
    36aa:	bf 2b       	or	r27, r31
    36ac:	11 f4       	brne	.+4      	; 0x36b2 <__fp_round+0x18>
    36ae:	60 ff       	sbrs	r22, 0
    36b0:	04 c0       	rjmp	.+8      	; 0x36ba <__fp_round+0x20>
    36b2:	6f 5f       	subi	r22, 0xFF	; 255
    36b4:	7f 4f       	sbci	r23, 0xFF	; 255
    36b6:	8f 4f       	sbci	r24, 0xFF	; 255
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002eb2 <__fp_split3>:
    2eb2:	57 fd       	sbrc	r21, 7
    2eb4:	90 58       	subi	r25, 0x80	; 128
    2eb6:	44 0f       	add	r20, r20
    2eb8:	55 1f       	adc	r21, r21
    2eba:	59 f0       	breq	.+22     	; 0x2ed2 <__fp_splitA+0x10>
    2ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ebe:	71 f0       	breq	.+28     	; 0x2edc <__fp_splitA+0x1a>
    2ec0:	47 95       	ror	r20

00002ec2 <__fp_splitA>:
    2ec2:	88 0f       	add	r24, r24
    2ec4:	97 fb       	bst	r25, 7
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	61 f0       	breq	.+24     	; 0x2ee2 <__fp_splitA+0x20>
    2eca:	9f 3f       	cpi	r25, 0xFF	; 255
    2ecc:	79 f0       	breq	.+30     	; 0x2eec <__fp_splitA+0x2a>
    2ece:	87 95       	ror	r24
    2ed0:	08 95       	ret
    2ed2:	12 16       	cp	r1, r18
    2ed4:	13 06       	cpc	r1, r19
    2ed6:	14 06       	cpc	r1, r20
    2ed8:	55 1f       	adc	r21, r21
    2eda:	f2 cf       	rjmp	.-28     	; 0x2ec0 <__fp_split3+0xe>
    2edc:	46 95       	lsr	r20
    2ede:	f1 df       	rcall	.-30     	; 0x2ec2 <__fp_splitA>
    2ee0:	08 c0       	rjmp	.+16     	; 0x2ef2 <__fp_splitA+0x30>
    2ee2:	16 16       	cp	r1, r22
    2ee4:	17 06       	cpc	r1, r23
    2ee6:	18 06       	cpc	r1, r24
    2ee8:	99 1f       	adc	r25, r25
    2eea:	f1 cf       	rjmp	.-30     	; 0x2ece <__fp_splitA+0xc>
    2eec:	86 95       	lsr	r24
    2eee:	71 05       	cpc	r23, r1
    2ef0:	61 05       	cpc	r22, r1
    2ef2:	08 94       	sec
    2ef4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a9a <__fp_zero>:
    3a9a:	e8 94       	clt

00003a9c <__fp_szero>:
    3a9c:	bb 27       	eor	r27, r27
    3a9e:	66 27       	eor	r22, r22
    3aa0:	77 27       	eor	r23, r23
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	97 f9       	bld	r25, 7
    3aa6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003b64 <__mulsf3>:
    3b64:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3x>
    3b68:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001876 <__mulsf3x>:
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <__mulsf3x+0x20>
    1878:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__fp_pscA>
    187c:	38 f0       	brcs	.+14     	; 0x188c <__mulsf3x+0x16>
    187e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__fp_pscB>
    1882:	20 f0       	brcs	.+8      	; 0x188c <__mulsf3x+0x16>
    1884:	95 23       	and	r25, r21
    1886:	11 f0       	breq	.+4      	; 0x188c <__mulsf3x+0x16>
    1888:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_inf>
    188c:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__fp_nan>
    1890:	11 24       	eor	r1, r1
    1892:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <__fp_szero>
    1896:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__fp_split3>
    189a:	70 f3       	brcs	.-36     	; 0x1878 <__mulsf3x+0x2>

0000189c <__mulsf3_pse>:
    189c:	95 9f       	mul	r25, r21
    189e:	c1 f3       	breq	.-16     	; 0x1890 <__mulsf3x+0x1a>
    18a0:	95 0f       	add	r25, r21
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	55 1f       	adc	r21, r21
    18a6:	62 9f       	mul	r22, r18
    18a8:	f0 01       	movw	r30, r0
    18aa:	72 9f       	mul	r23, r18
    18ac:	bb 27       	eor	r27, r27
    18ae:	f0 0d       	add	r31, r0
    18b0:	b1 1d       	adc	r27, r1
    18b2:	63 9f       	mul	r22, r19
    18b4:	aa 27       	eor	r26, r26
    18b6:	f0 0d       	add	r31, r0
    18b8:	b1 1d       	adc	r27, r1
    18ba:	aa 1f       	adc	r26, r26
    18bc:	64 9f       	mul	r22, r20
    18be:	66 27       	eor	r22, r22
    18c0:	b0 0d       	add	r27, r0
    18c2:	a1 1d       	adc	r26, r1
    18c4:	66 1f       	adc	r22, r22
    18c6:	82 9f       	mul	r24, r18
    18c8:	22 27       	eor	r18, r18
    18ca:	b0 0d       	add	r27, r0
    18cc:	a1 1d       	adc	r26, r1
    18ce:	62 1f       	adc	r22, r18
    18d0:	73 9f       	mul	r23, r19
    18d2:	b0 0d       	add	r27, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	62 1f       	adc	r22, r18
    18d8:	83 9f       	mul	r24, r19
    18da:	a0 0d       	add	r26, r0
    18dc:	61 1d       	adc	r22, r1
    18de:	22 1f       	adc	r18, r18
    18e0:	74 9f       	mul	r23, r20
    18e2:	33 27       	eor	r19, r19
    18e4:	a0 0d       	add	r26, r0
    18e6:	61 1d       	adc	r22, r1
    18e8:	23 1f       	adc	r18, r19
    18ea:	84 9f       	mul	r24, r20
    18ec:	60 0d       	add	r22, r0
    18ee:	21 1d       	adc	r18, r1
    18f0:	82 2f       	mov	r24, r18
    18f2:	76 2f       	mov	r23, r22
    18f4:	6a 2f       	mov	r22, r26
    18f6:	11 24       	eor	r1, r1
    18f8:	9f 57       	subi	r25, 0x7F	; 127
    18fa:	50 40       	sbci	r21, 0x00	; 0
    18fc:	9a f0       	brmi	.+38     	; 0x1924 <__mulsf3_pse+0x88>
    18fe:	f1 f0       	breq	.+60     	; 0x193c <__mulsf3_pse+0xa0>
    1900:	88 23       	and	r24, r24
    1902:	4a f0       	brmi	.+18     	; 0x1916 <__mulsf3_pse+0x7a>
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	bb 1f       	adc	r27, r27
    190a:	66 1f       	adc	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	91 50       	subi	r25, 0x01	; 1
    1912:	50 40       	sbci	r21, 0x00	; 0
    1914:	a9 f7       	brne	.-22     	; 0x1900 <__mulsf3_pse+0x64>
    1916:	9e 3f       	cpi	r25, 0xFE	; 254
    1918:	51 05       	cpc	r21, r1
    191a:	80 f0       	brcs	.+32     	; 0x193c <__mulsf3_pse+0xa0>
    191c:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_inf>
    1920:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <__fp_szero>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	e4 f3       	brlt	.-8      	; 0x1920 <__mulsf3_pse+0x84>
    1928:	98 3e       	cpi	r25, 0xE8	; 232
    192a:	d4 f3       	brlt	.-12     	; 0x1920 <__mulsf3_pse+0x84>
    192c:	86 95       	lsr	r24
    192e:	77 95       	ror	r23
    1930:	67 95       	ror	r22
    1932:	b7 95       	ror	r27
    1934:	f7 95       	ror	r31
    1936:	e7 95       	ror	r30
    1938:	9f 5f       	subi	r25, 0xFF	; 255
    193a:	c1 f7       	brne	.-16     	; 0x192c <__mulsf3_pse+0x90>
    193c:	fe 2b       	or	r31, r30
    193e:	88 0f       	add	r24, r24
    1940:	91 1d       	adc	r25, r1
    1942:	96 95       	lsr	r25
    1944:	87 95       	ror	r24
    1946:	97 f9       	bld	r25, 7
    1948:	08 95       	ret

Disassembly of section .text.libgcc:

00003b08 <__tablejump2__>:
    3b08:	ee 0f       	add	r30, r30
    3b0a:	ff 1f       	adc	r31, r31
    3b0c:	05 90       	lpm	r0, Z+
    3b0e:	f4 91       	lpm	r31, Z
    3b10:	e0 2d       	mov	r30, r0
    3b12:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000377a <__umulhisi3>:
    377a:	a2 9f       	mul	r26, r18
    377c:	b0 01       	movw	r22, r0
    377e:	b3 9f       	mul	r27, r19
    3780:	c0 01       	movw	r24, r0
    3782:	a3 9f       	mul	r26, r19
    3784:	70 0d       	add	r23, r0
    3786:	81 1d       	adc	r24, r1
    3788:	11 24       	eor	r1, r1
    378a:	91 1d       	adc	r25, r1
    378c:	b2 9f       	mul	r27, r18
    378e:	70 0d       	add	r23, r0
    3790:	81 1d       	adc	r24, r1
    3792:	11 24       	eor	r1, r1
    3794:	91 1d       	adc	r25, r1
    3796:	08 95       	ret

Disassembly of section .text.libgcc:

00003894 <__movmemx_qi>:
    3894:	99 27       	eor	r25, r25

00003896 <__movmemx_hi>:
    3896:	77 fd       	sbrc	r23, 7
    3898:	05 c0       	rjmp	.+10     	; 0x38a4 <__movmemx_hi+0xe>
    389a:	05 90       	lpm	r0, Z+
    389c:	0d 92       	st	X+, r0
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	e1 f7       	brne	.-8      	; 0x389a <__movmemx_hi+0x4>
    38a2:	08 95       	ret
    38a4:	01 90       	ld	r0, Z+
    38a6:	0d 92       	st	X+, r0
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <__movmemx_hi+0xe>
    38ac:	08 95       	ret

Disassembly of section .text.avrlibc:

000033d6 <memcpy>:
    33d6:	cf 92       	push	r12
    33d8:	df 92       	push	r13
    33da:	ef 92       	push	r14
    33dc:	dc 01       	movw	r26, r24
    33de:	6a 01       	movw	r12, r20
    33e0:	e6 2e       	mov	r14, r22
    33e2:	28 0f       	add	r18, r24
    33e4:	39 1f       	adc	r19, r25
    33e6:	a2 17       	cp	r26, r18
    33e8:	b3 07       	cpc	r27, r19
    33ea:	51 f0       	breq	.+20     	; 0x3400 <memcpy+0x2a>
    33ec:	f6 01       	movw	r30, r12
    33ee:	44 91       	lpm	r20, Z
    33f0:	e7 fc       	sbrc	r14, 7
    33f2:	40 81       	ld	r20, Z
    33f4:	4d 93       	st	X+, r20
    33f6:	4f ef       	ldi	r20, 0xFF	; 255
    33f8:	c4 1a       	sub	r12, r20
    33fa:	d4 0a       	sbc	r13, r20
    33fc:	e4 0a       	sbc	r14, r20
    33fe:	f3 cf       	rjmp	.-26     	; 0x33e6 <memcpy+0x10>
    3400:	ef 90       	pop	r14
    3402:	df 90       	pop	r13
    3404:	cf 90       	pop	r12
    3406:	08 95       	ret

Disassembly of section .text.avrlibc:

00002f7a <strcmp>:
    2f7a:	cf 92       	push	r12
    2f7c:	df 92       	push	r13
    2f7e:	ef 92       	push	r14
    2f80:	6b 01       	movw	r12, r22
    2f82:	e8 2e       	mov	r14, r24
    2f84:	f6 01       	movw	r30, r12
    2f86:	84 91       	lpm	r24, Z
    2f88:	e7 fc       	sbrc	r14, 7
    2f8a:	80 81       	ld	r24, Z
    2f8c:	f9 01       	movw	r30, r18
    2f8e:	54 91       	lpm	r21, Z
    2f90:	47 fd       	sbrc	r20, 7
    2f92:	50 81       	ld	r21, Z
    2f94:	85 13       	cpse	r24, r21
    2f96:	0b c0       	rjmp	.+22     	; 0x2fae <strcmp+0x34>
    2f98:	88 23       	and	r24, r24
    2f9a:	41 f0       	breq	.+16     	; 0x2fac <strcmp+0x32>
    2f9c:	8f ef       	ldi	r24, 0xFF	; 255
    2f9e:	c8 1a       	sub	r12, r24
    2fa0:	d8 0a       	sbc	r13, r24
    2fa2:	e8 0a       	sbc	r14, r24
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	4f 4f       	sbci	r20, 0xFF	; 255
    2faa:	ec cf       	rjmp	.-40     	; 0x2f84 <strcmp+0xa>
    2fac:	58 2f       	mov	r21, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	85 1b       	sub	r24, r21
    2fb2:	91 09       	sbc	r25, r1
    2fb4:	ef 90       	pop	r14
    2fb6:	df 90       	pop	r13
    2fb8:	cf 90       	pop	r12
    2fba:	08 95       	ret

Disassembly of section .text.avrlibc:

00002584 <strncmp>:
    2584:	cf 92       	push	r12
    2586:	df 92       	push	r13
    2588:	ef 92       	push	r14
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	6b 01       	movw	r12, r22
    2590:	e8 2e       	mov	r14, r24
    2592:	01 15       	cp	r16, r1
    2594:	11 05       	cpc	r17, r1
    2596:	19 f1       	breq	.+70     	; 0x25de <strncmp+0x5a>
    2598:	01 50       	subi	r16, 0x01	; 1
    259a:	11 09       	sbc	r17, r1
    259c:	f6 01       	movw	r30, r12
    259e:	84 91       	lpm	r24, Z
    25a0:	e7 fc       	sbrc	r14, 7
    25a2:	80 81       	ld	r24, Z
    25a4:	88 23       	and	r24, r24
    25a6:	99 f0       	breq	.+38     	; 0x25ce <strncmp+0x4a>
    25a8:	f9 01       	movw	r30, r18
    25aa:	94 91       	lpm	r25, Z
    25ac:	47 fd       	sbrc	r20, 7
    25ae:	90 81       	ld	r25, Z
    25b0:	99 23       	and	r25, r25
    25b2:	69 f0       	breq	.+26     	; 0x25ce <strncmp+0x4a>
    25b4:	01 15       	cp	r16, r1
    25b6:	11 05       	cpc	r17, r1
    25b8:	51 f0       	breq	.+20     	; 0x25ce <strncmp+0x4a>
    25ba:	89 13       	cpse	r24, r25
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <strncmp+0x4a>
    25be:	8f ef       	ldi	r24, 0xFF	; 255
    25c0:	c8 1a       	sub	r12, r24
    25c2:	d8 0a       	sbc	r13, r24
    25c4:	e8 0a       	sbc	r14, r24
    25c6:	2f 5f       	subi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	4f 4f       	sbci	r20, 0xFF	; 255
    25cc:	e5 cf       	rjmp	.-54     	; 0x2598 <strncmp+0x14>
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	f9 01       	movw	r30, r18
    25d2:	24 91       	lpm	r18, Z
    25d4:	47 fd       	sbrc	r20, 7
    25d6:	20 81       	ld	r18, Z
    25d8:	82 1b       	sub	r24, r18
    25da:	91 09       	sbc	r25, r1
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <strncmp+0x5e>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ef 90       	pop	r14
    25e8:	df 90       	pop	r13
    25ea:	cf 90       	pop	r12
    25ec:	08 95       	ret

Disassembly of section .text.avrlibc:

00003524 <strlen>:
    3524:	cf 92       	push	r12
    3526:	df 92       	push	r13
    3528:	ef 92       	push	r14
    352a:	6b 01       	movw	r12, r22
    352c:	e8 2e       	mov	r14, r24
    352e:	a8 2f       	mov	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	fc 01       	movw	r30, r24
    3534:	24 91       	lpm	r18, Z
    3536:	a7 fd       	sbrc	r26, 7
    3538:	20 81       	ld	r18, Z
    353a:	22 23       	and	r18, r18
    353c:	19 f0       	breq	.+6      	; 0x3544 <strlen+0x20>
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	a1 1d       	adc	r26, r1
    3542:	f7 cf       	rjmp	.-18     	; 0x3532 <strlen+0xe>
    3544:	8c 19       	sub	r24, r12
    3546:	9d 09       	sbc	r25, r13
    3548:	ef 90       	pop	r14
    354a:	df 90       	pop	r13
    354c:	cf 90       	pop	r12
    354e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003798 <strcpy>:
    3798:	9a 01       	movw	r18, r20
    379a:	46 2f       	mov	r20, r22
    379c:	dc 01       	movw	r26, r24
    379e:	f9 01       	movw	r30, r18
    37a0:	54 91       	lpm	r21, Z
    37a2:	47 fd       	sbrc	r20, 7
    37a4:	50 81       	ld	r21, Z
    37a6:	5d 93       	st	X+, r21
    37a8:	55 23       	and	r21, r21
    37aa:	21 f0       	breq	.+8      	; 0x37b4 <strcpy+0x1c>
    37ac:	2f 5f       	subi	r18, 0xFF	; 255
    37ae:	3f 4f       	sbci	r19, 0xFF	; 255
    37b0:	4f 4f       	sbci	r20, 0xFF	; 255
    37b2:	f5 cf       	rjmp	.-22     	; 0x379e <strcpy+0x6>
    37b4:	08 95       	ret

Disassembly of section .text.avrlibc:

00002e28 <sprintf>:
    2e28:	af e0       	ldi	r26, 0x0F	; 15
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	ea e1       	ldi	r30, 0x1A	; 26
    2e2e:	f7 e1       	ldi	r31, 0x17	; 23
    2e30:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x1c>
    2e34:	0e 89       	ldd	r16, Y+22	; 0x16
    2e36:	1f 89       	ldd	r17, Y+23	; 0x17
    2e38:	86 e0       	ldi	r24, 0x06	; 6
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
    2e3c:	1a 83       	std	Y+2, r17	; 0x02
    2e3e:	09 83       	std	Y+1, r16	; 0x01
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	9f e7       	ldi	r25, 0x7F	; 127
    2e44:	9f 83       	std	Y+7, r25	; 0x07
    2e46:	8e 83       	std	Y+6, r24	; 0x06
    2e48:	9e 01       	movw	r18, r28
    2e4a:	25 5e       	subi	r18, 0xE5	; 229
    2e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4e:	48 8d       	ldd	r20, Y+24	; 0x18
    2e50:	59 8d       	ldd	r21, Y+25	; 0x19
    2e52:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e54:	ce 01       	movw	r24, r28
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	0e 94 9c 01 	call	0x338	; 0x338 <vfprintf>
    2e5c:	e8 85       	ldd	r30, Y+8	; 0x08
    2e5e:	f9 85       	ldd	r31, Y+9	; 0x09
    2e60:	e0 0f       	add	r30, r16
    2e62:	f1 1f       	adc	r31, r17
    2e64:	10 82       	st	Z, r1
    2e66:	2f 96       	adiw	r28, 0x0f	; 15
    2e68:	e4 e0       	ldi	r30, 0x04	; 4
    2e6a:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000338 <vfprintf>:
 338:	2f 92       	push	r2
 33a:	3f 92       	push	r3
 33c:	4f 92       	push	r4
 33e:	6f 92       	push	r6
 340:	7f 92       	push	r7
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	62 97       	sbiw	r28, 0x12	; 18
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	6c 01       	movw	r12, r24
 36c:	3a 01       	movw	r6, r20
 36e:	86 2e       	mov	r8, r22
 370:	79 01       	movw	r14, r18
 372:	fc 01       	movw	r30, r24
 374:	10 86       	std	Z+8, r1	; 0x08
 376:	17 82       	std	Z+7, r1	; 0x07
 378:	84 81       	ldd	r24, Z+4	; 0x04
 37a:	81 ff       	sbrs	r24, 1
 37c:	e7 c1       	rjmp	.+974    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 37e:	9e 01       	movw	r18, r28
 380:	2f 5f       	subi	r18, 0xFF	; 255
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	3d 87       	std	Y+13, r19	; 0x0d
 386:	2c 87       	std	Y+12, r18	; 0x0c
 388:	c9 01       	movw	r24, r18
 38a:	a0 e8       	ldi	r26, 0x80	; 128
 38c:	88 8b       	std	Y+16, r24	; 0x10
 38e:	99 8b       	std	Y+17, r25	; 0x11
 390:	aa 8b       	std	Y+18, r26	; 0x12
 392:	9f e3       	ldi	r25, 0x3F	; 63
 394:	99 2e       	mov	r9, r25
 396:	f3 01       	movw	r30, r6
 398:	84 91       	lpm	r24, Z
 39a:	87 fc       	sbrc	r8, 7
 39c:	80 81       	ld	r24, Z
 39e:	88 23       	and	r24, r24
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <vfprintf+0x6c>
 3a2:	d0 c1       	rjmp	.+928    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 3a4:	48 2d       	mov	r20, r8
 3a6:	93 01       	movw	r18, r6
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	4f 4f       	sbci	r20, 0xFF	; 255
 3ae:	85 32       	cpi	r24, 0x25	; 37
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <vfprintf+0x80>
 3b2:	39 01       	movw	r6, r18
 3b4:	84 2e       	mov	r8, r20
 3b6:	0a c0       	rjmp	.+20     	; 0x3cc <vfprintf+0x94>
 3b8:	f9 01       	movw	r30, r18
 3ba:	84 91       	lpm	r24, Z
 3bc:	47 fd       	sbrc	r20, 7
 3be:	80 81       	ld	r24, Z
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	69 0e       	add	r6, r25
 3c4:	71 1c       	adc	r7, r1
 3c6:	81 1c       	adc	r8, r1
 3c8:	85 32       	cpi	r24, 0x25	; 37
 3ca:	29 f4       	brne	.+10     	; 0x3d6 <vfprintf+0x9e>
 3cc:	b6 01       	movw	r22, r12
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 3d4:	e0 cf       	rjmp	.-64     	; 0x396 <vfprintf+0x5e>
 3d6:	b1 2c       	mov	r11, r1
 3d8:	00 e0       	ldi	r16, 0x00	; 0
 3da:	10 e0       	ldi	r17, 0x00	; 0
 3dc:	10 32       	cpi	r17, 0x20	; 32
 3de:	a0 f4       	brcc	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e0:	8b 32       	cpi	r24, 0x2B	; 43
 3e2:	69 f0       	breq	.+26     	; 0x3fe <vfprintf+0xc6>
 3e4:	30 f4       	brcc	.+12     	; 0x3f2 <vfprintf+0xba>
 3e6:	80 32       	cpi	r24, 0x20	; 32
 3e8:	59 f0       	breq	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ea:	83 32       	cpi	r24, 0x23	; 35
 3ec:	69 f4       	brne	.+26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ee:	10 61       	ori	r17, 0x10	; 16
 3f0:	2c c0       	rjmp	.+88     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3f2:	8d 32       	cpi	r24, 0x2D	; 45
 3f4:	39 f0       	breq	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f6:	80 33       	cpi	r24, 0x30	; 48
 3f8:	39 f4       	brne	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	11 60       	ori	r17, 0x01	; 1
 3fc:	26 c0       	rjmp	.+76     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3fe:	12 60       	ori	r17, 0x02	; 2
 400:	14 60       	ori	r17, 0x04	; 4
 402:	23 c0       	rjmp	.+70     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 404:	18 60       	ori	r17, 0x08	; 8
 406:	21 c0       	rjmp	.+66     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 408:	17 fd       	sbrc	r17, 7
 40a:	29 c0       	rjmp	.+82     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 40c:	90 ed       	ldi	r25, 0xD0	; 208
 40e:	98 0f       	add	r25, r24
 410:	9a 30       	cpi	r25, 0x0A	; 10
 412:	78 f4       	brcc	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 414:	16 ff       	sbrs	r17, 6
 416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 418:	aa e0       	ldi	r26, 0x0A	; 10
 41a:	ba 9e       	mul	r11, r26
 41c:	90 0d       	add	r25, r0
 41e:	11 24       	eor	r1, r1
 420:	b9 2e       	mov	r11, r25
 422:	13 c0       	rjmp	.+38     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 424:	ea e0       	ldi	r30, 0x0A	; 10
 426:	0e 9f       	mul	r16, r30
 428:	90 0d       	add	r25, r0
 42a:	11 24       	eor	r1, r1
 42c:	09 2f       	mov	r16, r25
 42e:	10 62       	ori	r17, 0x20	; 32
 430:	0c c0       	rjmp	.+24     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 432:	8e 32       	cpi	r24, 0x2E	; 46
 434:	21 f4       	brne	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 436:	16 fd       	sbrc	r17, 6
 438:	85 c1       	rjmp	.+778    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 43a:	10 64       	ori	r17, 0x40	; 64
 43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43e:	8c 36       	cpi	r24, 0x6C	; 108
 440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	10 68       	ori	r17, 0x80	; 128
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	88 36       	cpi	r24, 0x68	; 104
 448:	51 f4       	brne	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 44a:	f3 01       	movw	r30, r6
 44c:	84 91       	lpm	r24, Z
 44e:	87 fc       	sbrc	r8, 7
 450:	80 81       	ld	r24, Z
 452:	ff ef       	ldi	r31, 0xFF	; 255
 454:	6f 1a       	sub	r6, r31
 456:	7f 0a       	sbc	r7, r31
 458:	8f 0a       	sbc	r8, r31
 45a:	81 11       	cpse	r24, r1
 45c:	bf cf       	rjmp	.-130    	; 0x3dc <vfprintf+0xa4>
 45e:	98 2f       	mov	r25, r24
 460:	9f 7d       	andi	r25, 0xDF	; 223
 462:	95 54       	subi	r25, 0x45	; 69
 464:	93 30       	cpi	r25, 0x03	; 3
 466:	28 f4       	brcc	.+10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 468:	24 e0       	ldi	r18, 0x04	; 4
 46a:	e2 0e       	add	r14, r18
 46c:	f1 1c       	adc	r15, r1
 46e:	99 82       	std	Y+1, r9	; 0x01
 470:	0f c0       	rjmp	.+30     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 472:	83 36       	cpi	r24, 0x63	; 99
 474:	31 f0       	breq	.+12     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 476:	83 37       	cpi	r24, 0x73	; 115
 478:	91 f0       	breq	.+36     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 47a:	83 35       	cpi	r24, 0x53	; 83
 47c:	09 f0       	breq	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47e:	63 c0       	rjmp	.+198    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 480:	27 c0       	rjmp	.+78     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 482:	f7 01       	movw	r30, r14
 484:	80 81       	ld	r24, Z
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	97 01       	movw	r18, r14
 48a:	2e 5f       	subi	r18, 0xFE	; 254
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	79 01       	movw	r14, r18
 490:	28 88       	ldd	r2, Y+16	; 0x10
 492:	39 88       	ldd	r3, Y+17	; 0x11
 494:	4a 88       	ldd	r4, Y+18	; 0x12
 496:	aa 24       	eor	r10, r10
 498:	a3 94       	inc	r10
 49a:	b1 2c       	mov	r11, r1
 49c:	17 c0       	rjmp	.+46     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 49e:	a7 01       	movw	r20, r14
 4a0:	4d 5f       	subi	r20, 0xFD	; 253
 4a2:	5f 4f       	sbci	r21, 0xFF	; 255
 4a4:	5f 87       	std	Y+15, r21	; 0x0f
 4a6:	4e 87       	std	Y+14, r20	; 0x0e
 4a8:	f7 01       	movw	r30, r14
 4aa:	20 80       	ld	r2, Z
 4ac:	31 80       	ldd	r3, Z+1	; 0x01
 4ae:	42 80       	ldd	r4, Z+2	; 0x02
 4b0:	16 ff       	sbrs	r17, 6
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b4:	4b 2d       	mov	r20, r11
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	4f ef       	ldi	r20, 0xFF	; 255
 4bc:	5f ef       	ldi	r21, 0xFF	; 255
 4be:	84 2d       	mov	r24, r4
 4c0:	b1 01       	movw	r22, r2
 4c2:	0e 94 03 19 	call	0x3206	; 0x3206 <strnlen>
 4c6:	5c 01       	movw	r10, r24
 4c8:	ee 84       	ldd	r14, Y+14	; 0x0e
 4ca:	ff 84       	ldd	r15, Y+15	; 0x0f
 4cc:	1f 77       	andi	r17, 0x7F	; 127
 4ce:	18 c0       	rjmp	.+48     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4d0:	97 01       	movw	r18, r14
 4d2:	2d 5f       	subi	r18, 0xFD	; 253
 4d4:	3f 4f       	sbci	r19, 0xFF	; 255
 4d6:	3f 87       	std	Y+15, r19	; 0x0f
 4d8:	2e 87       	std	Y+14, r18	; 0x0e
 4da:	f7 01       	movw	r30, r14
 4dc:	20 80       	ld	r2, Z
 4de:	31 80       	ldd	r3, Z+1	; 0x01
 4e0:	42 80       	ldd	r4, Z+2	; 0x02
 4e2:	16 ff       	sbrs	r17, 6
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e6:	4b 2d       	mov	r20, r11
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ec:	4f ef       	ldi	r20, 0xFF	; 255
 4ee:	5f ef       	ldi	r21, 0xFF	; 255
 4f0:	84 2d       	mov	r24, r4
 4f2:	b1 01       	movw	r22, r2
 4f4:	0e 94 03 19 	call	0x3206	; 0x3206 <strnlen>
 4f8:	5c 01       	movw	r10, r24
 4fa:	10 68       	ori	r17, 0x80	; 128
 4fc:	ee 84       	ldd	r14, Y+14	; 0x0e
 4fe:	ff 84       	ldd	r15, Y+15	; 0x0f
 500:	13 fd       	sbrc	r17, 3
 502:	1d c0       	rjmp	.+58     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 504:	80 2f       	mov	r24, r16
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	a8 16       	cp	r10, r24
 50a:	b9 06       	cpc	r11, r25
 50c:	c0 f4       	brcc	.+48     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 50e:	b6 01       	movw	r22, r12
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 518:	01 50       	subi	r16, 0x01	; 1
 51a:	f4 cf       	rjmp	.-24     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 51c:	f1 01       	movw	r30, r2
 51e:	84 91       	lpm	r24, Z
 520:	47 fc       	sbrc	r4, 7
 522:	80 81       	ld	r24, Z
 524:	ff ef       	ldi	r31, 0xFF	; 255
 526:	2f 1a       	sub	r2, r31
 528:	3f 0a       	sbc	r3, r31
 52a:	4f 0a       	sbc	r4, r31
 52c:	b6 01       	movw	r22, r12
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 534:	01 11       	cpse	r16, r1
 536:	01 50       	subi	r16, 0x01	; 1
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	a2 1a       	sub	r10, r18
 53c:	b1 08       	sbc	r11, r1
 53e:	a1 14       	cp	r10, r1
 540:	b1 04       	cpc	r11, r1
 542:	61 f7       	brne	.-40     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 544:	f5 c0       	rjmp	.+490    	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 546:	84 36       	cpi	r24, 0x64	; 100
 548:	11 f0       	breq	.+4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54a:	89 36       	cpi	r24, 0x69	; 105
 54c:	71 f5       	brne	.+92     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 54e:	f7 01       	movw	r30, r14
 550:	17 ff       	sbrs	r17, 7
 552:	08 c0       	rjmp	.+16     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 554:	60 81       	ld	r22, Z
 556:	71 81       	ldd	r23, Z+1	; 0x01
 558:	82 81       	ldd	r24, Z+2	; 0x02
 55a:	93 81       	ldd	r25, Z+3	; 0x03
 55c:	97 01       	movw	r18, r14
 55e:	2c 5f       	subi	r18, 0xFC	; 252
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	09 c0       	rjmp	.+18     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 564:	60 81       	ld	r22, Z
 566:	71 81       	ldd	r23, Z+1	; 0x01
 568:	07 2e       	mov	r0, r23
 56a:	00 0c       	add	r0, r0
 56c:	88 0b       	sbc	r24, r24
 56e:	99 0b       	sbc	r25, r25
 570:	97 01       	movw	r18, r14
 572:	2e 5f       	subi	r18, 0xFE	; 254
 574:	3f 4f       	sbci	r19, 0xFF	; 255
 576:	79 01       	movw	r14, r18
 578:	1f 76       	andi	r17, 0x6F	; 111
 57a:	31 2e       	mov	r3, r17
 57c:	97 ff       	sbrs	r25, 7
 57e:	0a c0       	rjmp	.+20     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	31 2f       	mov	r19, r17
 590:	30 68       	ori	r19, 0x80	; 128
 592:	33 2e       	mov	r3, r19
 594:	2a e0       	ldi	r18, 0x0A	; 10
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	ae 01       	movw	r20, r28
 59a:	4f 5f       	subi	r20, 0xFF	; 255
 59c:	5f 4f       	sbci	r21, 0xFF	; 255
 59e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ultoa_invert>
 5a2:	48 2e       	mov	r4, r24
 5a4:	4c 85       	ldd	r20, Y+12	; 0x0c
 5a6:	44 1a       	sub	r4, r20
 5a8:	4a c0       	rjmp	.+148    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 5aa:	85 37       	cpi	r24, 0x75	; 117
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5ae:	1f 7e       	andi	r17, 0xEF	; 239
 5b0:	a1 2e       	mov	r10, r17
 5b2:	2a e0       	ldi	r18, 0x0A	; 10
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	25 c0       	rjmp	.+74     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5b8:	51 2f       	mov	r21, r17
 5ba:	59 7f       	andi	r21, 0xF9	; 249
 5bc:	a5 2e       	mov	r10, r21
 5be:	8f 36       	cpi	r24, 0x6F	; 111
 5c0:	c1 f0       	breq	.+48     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5c2:	18 f4       	brcc	.+6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c4:	88 35       	cpi	r24, 0x58	; 88
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5c8:	bd c0       	rjmp	.+378    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 5ca:	80 37       	cpi	r24, 0x70	; 112
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5ce:	88 37       	cpi	r24, 0x78	; 120
 5d0:	21 f0       	breq	.+8      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d2:	b8 c0       	rjmp	.+368    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 5d4:	85 2f       	mov	r24, r21
 5d6:	80 61       	ori	r24, 0x10	; 16
 5d8:	a8 2e       	mov	r10, r24
 5da:	a4 fe       	sbrs	r10, 4
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5de:	9a 2d       	mov	r25, r10
 5e0:	94 60       	ori	r25, 0x04	; 4
 5e2:	a9 2e       	mov	r10, r25
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5e6:	14 ff       	sbrs	r17, 4
 5e8:	0a c0       	rjmp	.+20     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5ea:	a5 2f       	mov	r26, r21
 5ec:	a6 60       	ori	r26, 0x06	; 6
 5ee:	aa 2e       	mov	r10, r26
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5f2:	28 e0       	ldi	r18, 0x08	; 8
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5f8:	20 e1       	ldi	r18, 0x10	; 16
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5fe:	20 e1       	ldi	r18, 0x10	; 16
 600:	32 e0       	ldi	r19, 0x02	; 2
 602:	f7 01       	movw	r30, r14
 604:	a7 fe       	sbrs	r10, 7
 606:	08 c0       	rjmp	.+16     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 608:	60 81       	ld	r22, Z
 60a:	71 81       	ldd	r23, Z+1	; 0x01
 60c:	82 81       	ldd	r24, Z+2	; 0x02
 60e:	93 81       	ldd	r25, Z+3	; 0x03
 610:	a7 01       	movw	r20, r14
 612:	4c 5f       	subi	r20, 0xFC	; 252
 614:	5f 4f       	sbci	r21, 0xFF	; 255
 616:	07 c0       	rjmp	.+14     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 618:	60 81       	ld	r22, Z
 61a:	71 81       	ldd	r23, Z+1	; 0x01
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a7 01       	movw	r20, r14
 622:	4e 5f       	subi	r20, 0xFE	; 254
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	7a 01       	movw	r14, r20
 628:	ae 01       	movw	r20, r28
 62a:	4f 5f       	subi	r20, 0xFF	; 255
 62c:	5f 4f       	sbci	r21, 0xFF	; 255
 62e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ultoa_invert>
 632:	48 2e       	mov	r4, r24
 634:	5c 85       	ldd	r21, Y+12	; 0x0c
 636:	45 1a       	sub	r4, r21
 638:	8a 2d       	mov	r24, r10
 63a:	8f 77       	andi	r24, 0x7F	; 127
 63c:	38 2e       	mov	r3, r24
 63e:	36 fe       	sbrs	r3, 6
 640:	0d c0       	rjmp	.+26     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 642:	93 2d       	mov	r25, r3
 644:	9e 7f       	andi	r25, 0xFE	; 254
 646:	a9 2e       	mov	r10, r25
 648:	4b 14       	cp	r4, r11
 64a:	58 f4       	brcc	.+22     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 64c:	34 fe       	sbrs	r3, 4
 64e:	0b c0       	rjmp	.+22     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 650:	32 fc       	sbrc	r3, 2
 652:	09 c0       	rjmp	.+18     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 654:	a3 2d       	mov	r26, r3
 656:	ae 7e       	andi	r26, 0xEE	; 238
 658:	aa 2e       	mov	r10, r26
 65a:	05 c0       	rjmp	.+10     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 65c:	14 2d       	mov	r17, r4
 65e:	a3 2c       	mov	r10, r3
 660:	03 c0       	rjmp	.+6      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 662:	14 2d       	mov	r17, r4
 664:	01 c0       	rjmp	.+2      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 666:	1b 2d       	mov	r17, r11
 668:	a4 fe       	sbrs	r10, 4
 66a:	0e c0       	rjmp	.+28     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 66c:	fe 01       	movw	r30, r28
 66e:	e4 0d       	add	r30, r4
 670:	f1 1d       	adc	r31, r1
 672:	80 81       	ld	r24, Z
 674:	80 33       	cpi	r24, 0x30	; 48
 676:	21 f4       	brne	.+8      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 678:	ea 2d       	mov	r30, r10
 67a:	e9 7e       	andi	r30, 0xE9	; 233
 67c:	ae 2e       	mov	r10, r30
 67e:	08 c0       	rjmp	.+16     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 680:	a2 fe       	sbrs	r10, 2
 682:	05 c0       	rjmp	.+10     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 684:	1e 5f       	subi	r17, 0xFE	; 254
 686:	04 c0       	rjmp	.+8      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 688:	8a 2d       	mov	r24, r10
 68a:	86 78       	andi	r24, 0x86	; 134
 68c:	09 f0       	breq	.+2      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 68e:	1f 5f       	subi	r17, 0xFF	; 255
 690:	a3 fc       	sbrc	r10, 3
 692:	11 c0       	rjmp	.+34     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 694:	a0 fe       	sbrs	r10, 0
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 698:	10 17       	cp	r17, r16
 69a:	88 f4       	brcc	.+34     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 69c:	04 0d       	add	r16, r4
 69e:	b0 2e       	mov	r11, r16
 6a0:	b1 1a       	sub	r11, r17
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a4:	10 17       	cp	r17, r16
 6a6:	60 f4       	brcc	.+24     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a8:	b6 01       	movw	r22, r12
 6aa:	80 e2       	ldi	r24, 0x20	; 32
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 6b2:	1f 5f       	subi	r17, 0xFF	; 255
 6b4:	f7 cf       	rjmp	.-18     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6b6:	10 17       	cp	r17, r16
 6b8:	18 f4       	brcc	.+6      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6ba:	01 1b       	sub	r16, r17
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6be:	b4 2c       	mov	r11, r4
 6c0:	00 e0       	ldi	r16, 0x00	; 0
 6c2:	a4 fe       	sbrs	r10, 4
 6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6c6:	b6 01       	movw	r22, r12
 6c8:	80 e3       	ldi	r24, 0x30	; 48
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 6d0:	a2 fe       	sbrs	r10, 2
 6d2:	17 c0       	rjmp	.+46     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6d4:	a1 fc       	sbrc	r10, 1
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6d8:	88 e7       	ldi	r24, 0x78	; 120
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6de:	88 e5       	ldi	r24, 0x58	; 88
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	b6 01       	movw	r22, r12
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6e6:	8a 2d       	mov	r24, r10
 6e8:	86 78       	andi	r24, 0x86	; 134
 6ea:	59 f0       	breq	.+22     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6ec:	a1 fe       	sbrs	r10, 1
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6f0:	8b e2       	ldi	r24, 0x2B	; 43
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	a7 fc       	sbrc	r10, 7
 6f8:	8d e2       	ldi	r24, 0x2D	; 45
 6fa:	b6 01       	movw	r22, r12
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 702:	4b 14       	cp	r4, r11
 704:	38 f4       	brcc	.+14     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 706:	b6 01       	movw	r22, r12
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 710:	ba 94       	dec	r11
 712:	f7 cf       	rjmp	.-18     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 714:	4a 94       	dec	r4
 716:	e1 e0       	ldi	r30, 0x01	; 1
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	ec 0f       	add	r30, r28
 71c:	fd 1f       	adc	r31, r29
 71e:	e4 0d       	add	r30, r4
 720:	f1 1d       	adc	r31, r1
 722:	80 81       	ld	r24, Z
 724:	b6 01       	movw	r22, r12
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 72c:	41 10       	cpse	r4, r1
 72e:	f2 cf       	rjmp	.-28     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 730:	00 23       	and	r16, r16
 732:	09 f4       	brne	.+2      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 734:	30 ce       	rjmp	.-928    	; 0x396 <vfprintf+0x5e>
 736:	b6 01       	movw	r22, r12
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
 740:	01 50       	subi	r16, 0x01	; 1
 742:	f6 cf       	rjmp	.-20     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 744:	f6 01       	movw	r30, r12
 746:	87 81       	ldd	r24, Z+7	; 0x07
 748:	90 85       	ldd	r25, Z+8	; 0x08
 74a:	02 c0       	rjmp	.+4      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	9f ef       	ldi	r25, 0xFF	; 255
 750:	62 96       	adiw	r28, 0x12	; 18
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	ff 90       	pop	r15
 766:	ef 90       	pop	r14
 768:	df 90       	pop	r13
 76a:	cf 90       	pop	r12
 76c:	bf 90       	pop	r11
 76e:	af 90       	pop	r10
 770:	9f 90       	pop	r9
 772:	8f 90       	pop	r8
 774:	7f 90       	pop	r7
 776:	6f 90       	pop	r6
 778:	4f 90       	pop	r4
 77a:	3f 90       	pop	r3
 77c:	2f 90       	pop	r2
 77e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003206 <strnlen>:
    3206:	cf 92       	push	r12
    3208:	df 92       	push	r13
    320a:	ef 92       	push	r14
    320c:	6b 01       	movw	r12, r22
    320e:	e8 2e       	mov	r14, r24
    3210:	a8 2f       	mov	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	41 15       	cp	r20, r1
    3216:	51 05       	cpc	r21, r1
    3218:	31 f4       	brne	.+12     	; 0x3226 <strnlen+0x20>
    321a:	8c 19       	sub	r24, r12
    321c:	9d 09       	sbc	r25, r13
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	08 95       	ret
    3226:	fc 01       	movw	r30, r24
    3228:	24 91       	lpm	r18, Z
    322a:	a7 fd       	sbrc	r26, 7
    322c:	20 81       	ld	r18, Z
    322e:	22 23       	and	r18, r18
    3230:	a1 f3       	breq	.-24     	; 0x321a <strnlen+0x14>
    3232:	01 96       	adiw	r24, 0x01	; 1
    3234:	a1 1d       	adc	r26, r1
    3236:	41 50       	subi	r20, 0x01	; 1
    3238:	51 09       	sbc	r21, r1
    323a:	ec cf       	rjmp	.-40     	; 0x3214 <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000234e <fputc>:
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	fb 01       	movw	r30, r22
    2358:	24 81       	ldd	r18, Z+4	; 0x04
    235a:	21 fd       	sbrc	r18, 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <fputc+0x16>
    235e:	8f ef       	ldi	r24, 0xFF	; 255
    2360:	9f ef       	ldi	r25, 0xFF	; 255
    2362:	2c c0       	rjmp	.+88     	; 0x23bc <fputc+0x6e>
    2364:	22 ff       	sbrs	r18, 2
    2366:	16 c0       	rjmp	.+44     	; 0x2394 <fputc+0x46>
    2368:	47 81       	ldd	r20, Z+7	; 0x07
    236a:	50 85       	ldd	r21, Z+8	; 0x08
    236c:	25 81       	ldd	r18, Z+5	; 0x05
    236e:	36 81       	ldd	r19, Z+6	; 0x06
    2370:	42 17       	cp	r20, r18
    2372:	53 07       	cpc	r21, r19
    2374:	44 f4       	brge	.+16     	; 0x2386 <fputc+0x38>
    2376:	a0 81       	ld	r26, Z
    2378:	b1 81       	ldd	r27, Z+1	; 0x01
    237a:	9d 01       	movw	r18, r26
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	31 83       	std	Z+1, r19	; 0x01
    2382:	20 83       	st	Z, r18
    2384:	8c 93       	st	X, r24
    2386:	27 81       	ldd	r18, Z+7	; 0x07
    2388:	30 85       	ldd	r19, Z+8	; 0x08
    238a:	2f 5f       	subi	r18, 0xFF	; 255
    238c:	3f 4f       	sbci	r19, 0xFF	; 255
    238e:	30 87       	std	Z+8, r19	; 0x08
    2390:	27 83       	std	Z+7, r18	; 0x07
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <fputc+0x6e>
    2394:	8b 01       	movw	r16, r22
    2396:	ec 01       	movw	r28, r24
    2398:	fb 01       	movw	r30, r22
    239a:	01 84       	ldd	r0, Z+9	; 0x09
    239c:	f2 85       	ldd	r31, Z+10	; 0x0a
    239e:	e0 2d       	mov	r30, r0
    23a0:	09 95       	icall
    23a2:	89 2b       	or	r24, r25
    23a4:	e1 f6       	brne	.-72     	; 0x235e <fputc+0x10>
    23a6:	d8 01       	movw	r26, r16
    23a8:	17 96       	adiw	r26, 0x07	; 7
    23aa:	8d 91       	ld	r24, X+
    23ac:	9c 91       	ld	r25, X
    23ae:	18 97       	sbiw	r26, 0x08	; 8
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	18 96       	adiw	r26, 0x08	; 8
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
    23b8:	17 97       	sbiw	r26, 0x07	; 7
    23ba:	ce 01       	movw	r24, r28
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

Disassembly of section .text.avrlibc:

00001baa <__ultoa_invert>:
    1baa:	fa 01       	movw	r30, r20
    1bac:	aa 27       	eor	r26, r26
    1bae:	28 30       	cpi	r18, 0x08	; 8
    1bb0:	51 f1       	breq	.+84     	; 0x1c06 <__ultoa_invert+0x5c>
    1bb2:	20 31       	cpi	r18, 0x10	; 16
    1bb4:	81 f1       	breq	.+96     	; 0x1c16 <__ultoa_invert+0x6c>
    1bb6:	e8 94       	clt
    1bb8:	6f 93       	push	r22
    1bba:	6e 7f       	andi	r22, 0xFE	; 254
    1bbc:	6e 5f       	subi	r22, 0xFE	; 254
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc4:	af 4f       	sbci	r26, 0xFF	; 255
    1bc6:	b1 e0       	ldi	r27, 0x01	; 1
    1bc8:	3e d0       	rcall	.+124    	; 0x1c46 <__ultoa_invert+0x9c>
    1bca:	b4 e0       	ldi	r27, 0x04	; 4
    1bcc:	3c d0       	rcall	.+120    	; 0x1c46 <__ultoa_invert+0x9c>
    1bce:	67 0f       	add	r22, r23
    1bd0:	78 1f       	adc	r23, r24
    1bd2:	89 1f       	adc	r24, r25
    1bd4:	9a 1f       	adc	r25, r26
    1bd6:	a1 1d       	adc	r26, r1
    1bd8:	68 0f       	add	r22, r24
    1bda:	79 1f       	adc	r23, r25
    1bdc:	8a 1f       	adc	r24, r26
    1bde:	91 1d       	adc	r25, r1
    1be0:	a1 1d       	adc	r26, r1
    1be2:	6a 0f       	add	r22, r26
    1be4:	71 1d       	adc	r23, r1
    1be6:	81 1d       	adc	r24, r1
    1be8:	91 1d       	adc	r25, r1
    1bea:	a1 1d       	adc	r26, r1
    1bec:	20 d0       	rcall	.+64     	; 0x1c2e <__ultoa_invert+0x84>
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <__ultoa_invert+0x48>
    1bf0:	68 94       	set
    1bf2:	3f 91       	pop	r19
    1bf4:	2a e0       	ldi	r18, 0x0A	; 10
    1bf6:	26 9f       	mul	r18, r22
    1bf8:	11 24       	eor	r1, r1
    1bfa:	30 19       	sub	r19, r0
    1bfc:	30 5d       	subi	r19, 0xD0	; 208
    1bfe:	31 93       	st	Z+, r19
    1c00:	de f6       	brtc	.-74     	; 0x1bb8 <__ultoa_invert+0xe>
    1c02:	cf 01       	movw	r24, r30
    1c04:	08 95       	ret
    1c06:	46 2f       	mov	r20, r22
    1c08:	47 70       	andi	r20, 0x07	; 7
    1c0a:	40 5d       	subi	r20, 0xD0	; 208
    1c0c:	41 93       	st	Z+, r20
    1c0e:	b3 e0       	ldi	r27, 0x03	; 3
    1c10:	0f d0       	rcall	.+30     	; 0x1c30 <__ultoa_invert+0x86>
    1c12:	c9 f7       	brne	.-14     	; 0x1c06 <__ultoa_invert+0x5c>
    1c14:	f6 cf       	rjmp	.-20     	; 0x1c02 <__ultoa_invert+0x58>
    1c16:	46 2f       	mov	r20, r22
    1c18:	4f 70       	andi	r20, 0x0F	; 15
    1c1a:	40 5d       	subi	r20, 0xD0	; 208
    1c1c:	4a 33       	cpi	r20, 0x3A	; 58
    1c1e:	18 f0       	brcs	.+6      	; 0x1c26 <__ultoa_invert+0x7c>
    1c20:	49 5d       	subi	r20, 0xD9	; 217
    1c22:	31 fd       	sbrc	r19, 1
    1c24:	40 52       	subi	r20, 0x20	; 32
    1c26:	41 93       	st	Z+, r20
    1c28:	02 d0       	rcall	.+4      	; 0x1c2e <__ultoa_invert+0x84>
    1c2a:	a9 f7       	brne	.-22     	; 0x1c16 <__ultoa_invert+0x6c>
    1c2c:	ea cf       	rjmp	.-44     	; 0x1c02 <__ultoa_invert+0x58>
    1c2e:	b4 e0       	ldi	r27, 0x04	; 4
    1c30:	a6 95       	lsr	r26
    1c32:	97 95       	ror	r25
    1c34:	87 95       	ror	r24
    1c36:	77 95       	ror	r23
    1c38:	67 95       	ror	r22
    1c3a:	ba 95       	dec	r27
    1c3c:	c9 f7       	brne	.-14     	; 0x1c30 <__ultoa_invert+0x86>
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	61 05       	cpc	r22, r1
    1c42:	71 05       	cpc	r23, r1
    1c44:	08 95       	ret
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	0a 2e       	mov	r0, r26
    1c4c:	06 94       	lsr	r0
    1c4e:	57 95       	ror	r21
    1c50:	47 95       	ror	r20
    1c52:	37 95       	ror	r19
    1c54:	27 95       	ror	r18
    1c56:	ba 95       	dec	r27
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <__ultoa_invert+0xa2>
    1c5a:	62 0f       	add	r22, r18
    1c5c:	73 1f       	adc	r23, r19
    1c5e:	84 1f       	adc	r24, r20
    1c60:	95 1f       	adc	r25, r21
    1c62:	a0 1d       	adc	r26, r0
    1c64:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003162 <__prologue_saves__>:
    3162:	2f 92       	push	r2
    3164:	3f 92       	push	r3
    3166:	4f 92       	push	r4
    3168:	5f 92       	push	r5
    316a:	6f 92       	push	r6
    316c:	7f 92       	push	r7
    316e:	8f 92       	push	r8
    3170:	9f 92       	push	r9
    3172:	af 92       	push	r10
    3174:	bf 92       	push	r11
    3176:	cf 92       	push	r12
    3178:	df 92       	push	r13
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	ca 1b       	sub	r28, r26
    318c:	db 0b       	sbc	r29, r27
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000323c <__epilogue_restores__>:
    323c:	2a 88       	ldd	r2, Y+18	; 0x12
    323e:	39 88       	ldd	r3, Y+17	; 0x11
    3240:	48 88       	ldd	r4, Y+16	; 0x10
    3242:	5f 84       	ldd	r5, Y+15	; 0x0f
    3244:	6e 84       	ldd	r6, Y+14	; 0x0e
    3246:	7d 84       	ldd	r7, Y+13	; 0x0d
    3248:	8c 84       	ldd	r8, Y+12	; 0x0c
    324a:	9b 84       	ldd	r9, Y+11	; 0x0b
    324c:	aa 84       	ldd	r10, Y+10	; 0x0a
    324e:	b9 84       	ldd	r11, Y+9	; 0x09
    3250:	c8 84       	ldd	r12, Y+8	; 0x08
    3252:	df 80       	ldd	r13, Y+7	; 0x07
    3254:	ee 80       	ldd	r14, Y+6	; 0x06
    3256:	fd 80       	ldd	r15, Y+5	; 0x05
    3258:	0c 81       	ldd	r16, Y+4	; 0x04
    325a:	1b 81       	ldd	r17, Y+3	; 0x03
    325c:	aa 81       	ldd	r26, Y+2	; 0x02
    325e:	b9 81       	ldd	r27, Y+1	; 0x01
    3260:	ce 0f       	add	r28, r30
    3262:	d1 1d       	adc	r29, r1
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	ed 01       	movw	r28, r26
    3270:	08 95       	ret
