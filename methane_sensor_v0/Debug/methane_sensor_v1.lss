
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00006aa9  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000772  00800100  00800100  00006aa9  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00006aa9  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00006b04  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c18  00000000  00000000  00006b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012769  00000000  00000000  00007790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000347f  00000000  00000000  00019ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b75  00000000  00000000  0001d378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f88  00000000  00000000  00023ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001542  00000000  00000000  00025e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007463  00000000  00000000  000273ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0002e81d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00006938  00006938  00006a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002f220  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00006610  00006610  00006764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00006498  00006498  000065ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  0000661e  0000661e  00006772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000064ac  000064ac  00006600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  0000662c  0000662c  00006780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000064c0  000064c0  00006614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  0000663a  0000663a  0000678e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  000064d4  000064d4  00006628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00006648  00006648  0000679c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  000064e8  000064e8  0000663c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  0000688c  0000688c  000069e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  00005764  00005764  000058b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  000064fc  000064fc  00006650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00006894  00006894  000069e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  0000689c  0000689c  000069f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  000068a4  000068a4  000069f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00006656  00006656  000067aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  0000681e  0000681e  00006972  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  00006128  00006128  0000627c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  000068fc  000068fc  00006a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  0000693c  0000693c  00006a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00004e2e  00004e2e  00004f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800f7b  00800f7b  00006aa9  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  00005b2e  00005b2e  00005c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  00006752  00006752  000068a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  0000675e  0000675e  000068b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00004e7c  00004e7c  00004fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800f7d  00800f7d  00006aa9  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  00006148  00006148  0000629c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  000068ac  000068ac  00006a00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  00006902  00006902  00006a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006168  00006168  000062bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  00006828  00006828  0000697c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  00004c94  00004c94  00004de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  00005854  00005854  000059a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  0000416e  0000416e  000042c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800f95  00800f95  00006aa9  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800f96  00800f96  00006aa9  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800f4a  00800f4a  00006aa9  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  00004f66  00004f66  000050ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  00004a84  00004a84  00004bd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  00006510  00006510  00006664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006362  00006362  000064b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00005bca  00005bca  00005d1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  00005c92  00005c92  00005de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006574  00006574  000066c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  00005258  00005258  000053ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  000055a2  000055a2  000056f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006188  00006188  000062dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  00006524  00006524  00006678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  00006538  00006538  0000668c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  000065e0  000065e0  00006734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00005e42  00005e42  00005f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  000057a0  000057a0  000058f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000003c  000057dc  000057dc  00005930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000006e  00004684  00004684  000047d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  00006664  00006664  000067b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  00006832  00006832  00006986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00005f50  00005f50  000060a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  00005378  00005378  000054cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000004a  0000517a  0000517a  000052ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  000044bc  000044bc  00004610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800f97  00800f97  00006aa9  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800f98  00800f98  00006aa9  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000001  00800f99  00800f99  00006aa9  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000001  00800f9a  00800f9a  00006aa9  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  00005e70  00005e70  00005fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  00005818  00005818  0000596c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 0000008a  00003fda  00003fda  0000412e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  00006672  00006672  000067c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  00006680  00006680  000067d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  0000683c  0000683c  00006990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  00005f78  00005f78  000060cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000004a  000051c4  000051c4  00005318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  00004530  00004530  00004684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800f9b  00800f9b  00006aa9  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800f9c  00800f9c  00006aa9  2**0
                  ALLOC
 92 .bss.rx_buffer 00000096  00800dea  00800dea  00006aa9  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000001  00800f9d  00800f9d  00006aa9  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000001  00800f9e  00800f9e  00006aa9  2**0
                  ALLOC
 95 .bss.tx_buffer 000000c8  00800d22  00800d22  00006aa9  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  0000668e  0000668e  000067e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  00006846  00006846  0000699a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  0000588e  0000588e  000059e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00003cf4  00003cf4  00003e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  000063ca  000063ca  0000651e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  00004906  00004906  00004a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  0000654c  0000654c  000066a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  000062ba  000062ba  0000640e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  00004be8  00004be8  00004d3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  000053be  000053be  00005512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  00006850  00006850  000069a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  000061e8  000061e8  0000633c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  000068b4  000068b4  00006a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006586  00006586  000066da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  000055e4  000055e4  00005738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800f9f  00800f9f  00006aa9  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800fa0  00800fa0  00006aa9  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800f7f  00800f7f  00006aa9  2**0
                  ALLOC
114 .bss._data    00000002  00800f81  00800f81  00006aa9  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800f83  00800f83  00006aa9  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800f5f  00006945  00006a99  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800f63  00006949  00006a9d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800f67  0000694d  00006aa1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  0000642a  0000642a  0000657e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  00006440  00006440  00006594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  00006456  00006456  000065aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  000058c8  000058c8  00005a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  00005cc2  00005cc2  00005e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  00005902  00005902  00005a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00005cf2  00005cf2  00005e46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  0000593c  0000593c  00005a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00005d22  00005d22  00005e76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  0000669c  0000669c  000067f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  00006206  00006206  0000635a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  000066aa  000066aa  000067fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  00006224  00006224  00006378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  000066b8  000066b8  0000680c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  00006242  00006242  00006396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  000066c6  000066c6  0000681a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  000065f0  000065f0  00006744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  0000676a  0000676a  000068be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  00006776  00006776  000068ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  00006782  00006782  000068d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  0000678e  0000678e  000068e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  0000679a  0000679a  000068ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  000067a6  000067a6  000068fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  000067b2  000067b2  00006906  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  000067be  000067be  00006912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  00006908  00006908  00006a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  00004fb2  00004fb2  00005106  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  00005976  00005976  00005aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  000066d4  000066d4  00006828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  00006600  00006600  00006754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  00005668  00005668  000057bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  000068bc  000068bc  00006a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  000068c4  000068c4  00006a18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  000068cc  000068cc  00006a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800fa1  00800fa1  00006aa9  2**0
                  ALLOC
154 .progmemx.data 00000058  00000814  00000814  00000968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  00004b38  00004b38  00004c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  0000166c  0000166c  000017c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  000063e2  000063e2  00006536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  000062d6  000062d6  0000642a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  0000690e  0000690e  00006a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002e  00005e9e  00005e9e  00005ff2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  00006598  00006598  000066ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  00006914  00006914  00006a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  0000685a  0000685a  000069ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  0000691a  0000691a  00006a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  00006920  00006920  00006a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  00006926  00006926  00006a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800fa2  00800fa2  00006aa9  2**0
                  ALLOC
168 .bss.busy     00000001  00800fa3  00800fa3  00006aa9  2**0
                  ALLOC
169 .bss.cnt      00000001  00800fa4  00800fa4  00006aa9  2**0
                  ALLOC
170 .progmemx.data 00000073  000007a1  000007a1  000008f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   00000084  000040ea  000040ea  0000423e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  000062f2  000062f2  00006446  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  00005bfc  00005bfc  00005d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  0000496c  0000496c  00004ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  00004eca  00004eca  0000501e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  000052a0  000052a0  000053f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  000052e8  000052e8  0000543c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  00005330  00005330  00005484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  00005d52  00005d52  00005ea6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000ac  00003918  00003918  00003a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  0000086c  0000086c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  00004836  00004836  0000498a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  00002e7a  00002e7a  00002fce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  00006560  00006560  000066b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  000059ae  000059ae  00005b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  000008c9  000008c9  00000a1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  000046f2  000046f2  00004846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800fa5  00800fa5  00006aa9  2**0
                  ALLOC
189 .bss.cnt      00000002  00800f85  00800f85  00006aa9  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  000067ca  000067ca  0000691e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_setPendingStates 0000000c  000067d6  000067d6  0000692a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_setMatchCase 0000000c  000067e2  000067e2  00006936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_strbeginswith 0000004a  0000520e  0000520e  00005362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_matchMessage 0000005c  00004a28  00004a28  00004b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000008a4  000008a4  000009f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  00005404  00005404  00005558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  00004264  00004264  000043b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  000068d4  000068d4  00006a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800fa6  00800fa6  00006aa9  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800fa7  00800fa7  00006aa9  2**0
                  ALLOC
201 .text.MRPP_init_group 0000001a  0000637c  0000637c  000064d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  000045a4  000045a4  000046f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  0000605c  0000605c  000061b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00003d8a  00003d8a  00003ede  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  000067ee  000067ee  00006942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  0000607e  0000607e  000061d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  000060a0  000060a0  000061f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  00006864  00006864  000069b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.mrpp_data_add_int16 00000092  00003eb6  00003eb6  0000400a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.mrpp_data_get 00000030  00005d82  00005d82  00005ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.add_data_types 000000d8  00003222  00003222  00003376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.update_bodies 00000162  000020c8  000020c8  0000221c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.mrpp_state_init 0000014a  0000222a  0000222a  0000237e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.mrpp_state_get_header 000000a2  00003bb0  00003bb0  00003d04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_get_tail 000000a4  000039c4  000039c4  00003b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_set_collection 00000086  00004064  00004064  000041b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_is_body_ready 00000030  00005db2  00005db2  00005f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_all_bodies_sent 0000002a  00005f26  00005f26  0000607a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_get_ready_body 000000f0  00002f72  00002f72  000030c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_set_body_sent 00000020  000061a8  000061a8  000062fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_get_collection_address 00000036  00005a56  00005a56  00005baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.cb_cnt_time 00000030  00005de2  00005de2  00005f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.PUMP_start 00000024  00005ff0  00005ff0  00006144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.PUMP_is_done 0000001c  0000630e  0000630e  00006462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .bss.eventPointer 00000001  00800fa8  00800fa8  00006aa9  2**0
                  ALLOC
226 .bss.cnt      00000002  00800f87  00800f87  00006aa9  2**0
                  ALLOC
227 .bss._seconds 00000002  00800f89  00800f89  00006aa9  2**0
                  ALLOC
228 .text.datetime_to_BCD 00000100  00002b7c  00002b7c  00002cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.RTC_set_clock_out 00000050  00004d8e  00004d8e  00004ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.RTC_clear_wake_up_interrupt 00000034  00005b62  00005b62  00005cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_get_current_time 00000140  00002374  00002374  000024c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .rodata       00000005  00800f5a  00006940  00006a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
233 .text.RTC_set_wake_up_interrupt_minutes 000000c4  00003570  00003570  000036c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.RTC_set_current_time 00000068  0000489e  0000489e  000049f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.RTC_datetime_to_ts 00000122  0000271e  0000271e  00002872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000008ce  000008ce  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.bytes_2_uint 0000001a  00006396  00006396  000064ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.init_measurement 00000038  000059e6  000059e6  00005b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.validate_data 00000032  00005c2e  00005c2e  00005d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.read_value 000000a2  00003c52  00003c52  00003da6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.vect_SCD_do_sample 00000046  0000544a  0000544a  0000559e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.SCD30_sensor_on 00000022  000060c2  000060c2  00006216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_off 00000008  000068dc  000068dc  00006a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_init_sampling 00000022  000060e4  000060e4  00006238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_deinit_sampling 0000000e  000066e2  000066e2  00006836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_start_sampling 0000000a  0000686e  0000686e  000069c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_is_sampling_done 0000001c  0000632a  0000632a  0000647e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_get_reading 0000001a  000063b0  000063b0  00006504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .bss.cntSamples 00000002  00800f8b  00800f8b  00006aa9  2**0
                  ALLOC
250 .bss._data    00000002  00800f8d  00800f8d  00006aa9  2**0
                  ALLOC
251 .bss._nSamples 00000002  00800f8f  00800f8f  00006aa9  2**0
                  ALLOC
252 .progmemx.data.READ_DATA_CMD 00000002  000008cc  000008cc  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
253 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000008bf  000008bf  00000a13  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
254 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000008c4  000008c4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
255 .text.parse_cmd 00000030  00005e12  00005e12  00005f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.validate_cmd 00000056  00004c3e  00004c3e  00004d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .progmemx.data 000000ac  000005c9  000005c9  0000071d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
258 .text.CONF_enter 0000013c  000024b4  000024b4  00002608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .progmemx.data 00000081  00000720  00000720  00000874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
260 .text.CON_RN2483_parse 0000006c  00004760  00004760  000048b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.CON_RN2483 00000166  00001f62  00001f62  000020b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.CONNECT 00000054  00004ce8  00004ce8  00004e3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .progmemx.data 00000188  00000441  00000441  00000595  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
264 .text.read_cols 000000bc  00003634  00003634  00003788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.read_time 00000092  00003f48  00003f48  0000409c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.write_deveui 00000078  000042dc  000042dc  00004430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.write_appeui 00000078  00004354  00004354  000044a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.write_appkey 00000078  000043cc  000043cc  00004520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.write_PPM_factor 0000004c  00004ffe  00004ffe  00005152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.write_RRL 0000004c  0000504a  0000504a  0000519e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.write_VCC 0000004c  00005096  00005096  000051ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.get_time_par 00000034  00005b96  00005b96  00005cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.write_cols 0000012e  000025f0  000025f0  00002744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.write_heat_up 0000004c  000050e2  000050e2  00005236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.write_air_pump 00000050  00004dde  00004dde  00004f32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_sp_interval 0000004c  0000512e  0000512e  00005282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_reset 000000e2  00003062  00003062  000031b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_time 000000fe  00002d7c  00002d7c  00002ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.handle_read 000002a2  00001910  00001910  00001a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.handle_write 00000200  00001bb2  00001bb2  00001d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .bss.arg      00000050  00800e80  00800e80  00006aa9  2**0
                  ALLOC
282 .progmemx.data 000000ab  00000675  00000675  000007c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
283 .text.handle_methane 0000011a  00002840  00002840  00002994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.handle_co2 000000a4  00003a68  00003a68  00003bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.handle_pump 000000a4  00003b0c  00003b0c  00003c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.handle_sample 000000b8  000037ac  000037ac  00003900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.init_methane_SCD30 00000028  00005fa0  00005fa0  000060f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .bss.par      00000014  00800f14  00800f14  00006aa9  2**0
                  ALLOC
289 .text.count_parameters 00000052  00004d3c  00004d3c  00004e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.par_index 00000070  00004614  00004614  00004768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.get_parameter 00000096  00003e20  00003e20  00003f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.decode_stage_response 00000016  0000646c  0000646c  000065c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.decode_join_response 0000001c  00006346  00006346  0000649a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.decode_header_tail_response 0000001e  00006260  00006260  000063b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.read_eeprom 0000005a  00004ade  00004ade  00004c32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.join_lora 00000012  000065aa  000065aa  000066fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.set_wakeup 0000000a  00006878  00006878  000069cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.send_header 0000003e  000056e8  000056e8  0000583c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.send_body 00000040  000056a8  000056a8  000057fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.decode_body_response 00000028  00005fc8  00005fc8  0000611c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.send_tail 0000003e  00005726  00005726  0000587a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.send_msg 00000018  000063fa  000063fa  0000654e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .progmemx.data 000001dd  00000264  00000264  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
304 .text.stage_0 000000d4  000032fa  000032fa  0000344e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.stage_1 00000100  00002c7c  00002c7c  00002dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.stage_2 0000011a  0000295a  0000295a  00002aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.stage_3 00000108  00002a74  00002a74  00002bc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.MAINPG_start 0000037c  00001014  00001014  00001168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .bss.fromSleep 00000001  00800fa9  00800fa9  00006aa9  2**0
                  ALLOC
310 .bss.samplingProcessInterval 00000001  00800faa  00800faa  00006aa9  2**0
                  ALLOC
311 .data.methHeatUpTime 00000001  00800fab  000008cf  00000a23  2**0
                  CONTENTS, ALLOC, LOAD, DATA
312 .data.airPumpTime 00000002  00800f91  00006951  00006aa5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
313 .bss.ppmx     00000004  00800f6b  00800f6b  00006aa9  2**0
                  ALLOC
314 .bss.rrlx     00000004  00800f6f  00800f6f  00006aa9  2**0
                  ALLOC
315 .bss.vccx     00000004  00800f73  00800f73  00006aa9  2**0
                  ALLOC
316 .bss.cols     00000023  00800ed0  00800ed0  00006aa9  2**0
                  ALLOC
317 .bss.appkey   00000021  00800ef3  00800ef3  00006aa9  2**0
                  ALLOC
318 .bss.appeui   00000011  00800f28  00800f28  00006aa9  2**0
                  ALLOC
319 .bss.deveui   00000011  00800f39  00800f39  00006aa9  2**0
                  ALLOC
320 .bss.dt       00000006  00800f54  00800f54  00006aa9  2**0
                  ALLOC
321 .bss.ts       00000004  00800f77  00800f77  00006aa9  2**0
                  ALLOC
322 .bss.meth_data 00000258  00800872  00800872  00006aa9  2**0
                  ALLOC
323 .bss.co2_data 00000258  00800aca  00800aca  00006aa9  2**0
                  ALLOC
324 .data.bodyIndex 00000002  00800f93  00006953  00006aa7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
325 .bss.state_s3 00000001  00800fac  00800fac  00006aa9  2**0
                  ALLOC
326 .bss.state_s2 00000001  00800fad  00800fad  00006aa9  2**0
                  ALLOC
327 .bss.state_s1 00000001  00800fae  00800fae  00006aa9  2**0
                  ALLOC
328 .bss.state_s0 00000001  00800faf  00800faf  00006aa9  2**0
                  ALLOC
329 .text.calc_crc8 00000036  00005a8c  00005a8c  00005be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 .text.get_decimal 000000b4  00003864  00003864  000039b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text.str2flaot 0000004e  00004f18  00004f18  0000506c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text.is_float 00000058  00004b90  00004b90  00004ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.avrlibc.fplib 0000000e  000066f0  000066f0  00006844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.avrlibc.fplib 000000ce  000034a2  000034a2  000035f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.avrlibc.fplib 00000008  000068e4  000068e4  00006a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc.fplib 000000de  00003144  00003144  00003298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc.fplib 0000005e  000049ca  000049ca  00004b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc.fplib 0000007a  000041ea  000041ea  0000433e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc.fplib 0000000c  000067fa  000067fa  0000694e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .text.avrlibc.fplib 00000006  0000692c  0000692c  00006a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text.avrlibc.fplib 0000000e  000066fe  000066fe  00006852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.avrlibc.fplib 0000000e  0000670c  0000670c  00006860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.avrlibc.fplib 00000022  00006106  00006106  0000625a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.avrlibc.fplib 00000044  000054d6  000054d6  0000562a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 0000000e  0000671a  0000671a  0000686e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 00000008  000068ec  000068ec  00006a40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 000000d4  000033ce  000033ce  00003522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .progmemx.data 00000008  000008b7  000008b7  00000a0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
349 .text.avrlibc 00000744  000008d0  000008d0  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.libgcc  0000000c  00006806  00006806  0000695a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.libgcc.mul 0000001e  0000627e  0000627e  000063d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.libgcc.prologue 00000038  00005a1e  00005a1e  00005b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.libgcc.prologue 00000036  00005ac2  00005ac2  00005c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc 00000008  000068f4  000068f4  00006a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc 0000000e  00006728  00006728  0000687c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc 000002dc  00001390  00001390  000014e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc 000001b0  00001db2  00001db2  00001f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc 00000012  000065bc  000065bc  00006710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc 00000032  00005c60  00005c60  00005db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc 0000002e  00005ecc  00005ecc  00006020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc 00000042  00005626  00005626  0000577a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc 0000006a  000047cc  000047cc  00004920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc 0000002c  00005efa  00005efa  0000604e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.avrlibc 0000001e  0000629c  0000629c  000063f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.avrlibc 00000036  00005af8  00005af8  00005c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.avrlibc 00000078  00004444  00004444  00004598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.avrlibc 00000046  00005490  00005490  000055e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.avrlibc 000000bc  000036f0  000036f0  00003844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 00000006  00006932  00006932  00006a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 00000024  00006014  00006014  00006168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 00000012  000065ce  000065ce  00006722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 0000000e  00006736  00006736  0000688a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 0000000e  00006744  00006744  00006898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 00000044  0000551a  0000551a  0000566e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000024  00006038  00006038  0000618c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 00000018  00006412  00006412  00006566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 0000000c  00006812  00006812  00006966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.libgcc.mul 00000020  000061c8  000061c8  0000631c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.libgcc.div 00000044  0000555e  0000555e  000056b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.libgcc.mul 00000016  00006482  00006482  000065d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.libgcc  0000000a  00006882  00006882  000069d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
   8:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
   c:	0c 94 7e 32 	jmp	0x64fc	; 0x64fc <__vector_3>
  10:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  14:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  18:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  1c:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  20:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  24:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__vector_9>
  28:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  2c:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  30:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  34:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <__vector_13>
  38:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  3c:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  40:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__vector_16>
  44:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  48:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  4c:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  50:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <__vector_20>
  54:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  58:	0c 94 bd 28 	jmp	0x517a	; 0x517a <__vector_22>
  5c:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  60:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  64:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  68:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  6c:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  70:	0c 94 98 22 	jmp	0x4530	; 0x4530 <__vector_28>
  74:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__bad_interrupt>
  78:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__vector_30>
  7c:	54 0b       	sbc	r21, r20
  7e:	64 0c       	add	r6, r4
  80:	73 0b       	sbc	r23, r19
  82:	91 0b       	sbc	r25, r17
  84:	b1 0b       	sbc	r27, r17
  86:	d1 0b       	sbc	r29, r17
  88:	f1 0b       	sbc	r31, r17
  8a:	11 0c       	add	r1, r1
  8c:	2f 0c       	add	r2, r15
  8e:	4d 0c       	add	r4, r13
  90:	5f 0c       	add	r5, r15
  92:	75 0c       	add	r7, r5
  94:	77 0c       	add	r7, r7
  96:	75 12       	cpse	r7, r21
  98:	8c 12       	cpse	r8, r28
  9a:	e8 12       	cpse	r14, r24
  9c:	95 12       	cpse	r9, r21
  9e:	f1 12       	cpse	r15, r17
  a0:	da 12       	cpse	r13, r26
  a2:	e1 12       	cpse	r14, r17
  a4:	a5 12       	cpse	r10, r21
  a6:	b1 12       	cpse	r11, r17
  a8:	bd 12       	cpse	r11, r29
  aa:	c7 12       	cpse	r12, r23
  ac:	d3 12       	cpse	r13, r19
  ae:	c3 0f       	add	r28, r19
  b0:	d0 0f       	add	r29, r16
  b2:	da 0f       	add	r29, r26
  b4:	e0 0f       	add	r30, r16
  b6:	0f 10       	cpse	r0, r15
  b8:	3a 10       	cpse	r3, r10
  ba:	53 10       	cpse	r5, r3
  bc:	35 08       	sbc	r3, r5
  be:	64 08       	sbc	r6, r4
  c0:	7f 08       	sbc	r7, r15
  c2:	90 08       	sbc	r9, r0
  c4:	a4 08       	sbc	r10, r4
  c6:	a3 09       	sbc	r26, r3
  c8:	99 08       	sbc	r9, r9
  ca:	dc 08       	sbc	r13, r12
  cc:	f3 08       	sbc	r15, r3
  ce:	e8 08       	sbc	r14, r8
  d0:	b7 08       	sbc	r11, r7
  d2:	fe 08       	sbc	r15, r14
  d4:	0f 09       	sbc	r16, r15
  d6:	21 09       	sbc	r18, r1
  d8:	29 09       	sbc	r18, r9
  da:	31 09       	sbc	r19, r1
  dc:	39 09       	sbc	r19, r9
  de:	41 09       	sbc	r20, r1
  e0:	5d 09       	sbc	r21, r13
  e2:	64 09       	sbc	r22, r4
  e4:	76 09       	sbc	r23, r6
  e6:	95 09       	sbc	r25, r5
  e8:	b1 09       	sbc	r27, r1
  ea:	bc 09       	sbc	r27, r12

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0f 5a       	subi	r16, 0xAF	; 175
  f0:	80 0f       	add	r24, r16
  f2:	5a 0f       	add	r21, r26
  f4:	6b 00       	.word	0x006b	; ????
  f6:	69 40       	sbci	r22, 0x09	; 9
  f8:	0f 6b       	ori	r16, 0xBF	; 191
  fa:	0f 91       	pop	r16
  fc:	80 0f       	add	r24, r16
  fe:	91 0f       	add	r25, r17
 100:	95 00       	.word	0x0095	; ????
 102:	69 51       	subi	r22, 0x19	; 25
 104:	0f 95 0f ab 	call	0x43561e	; 0x43561e <__TEXT_REGION_LENGTH__+0x42561e>
 108:	80 0f       	add	r24, r16
 10a:	ab 0f       	add	r26, r27
 10c:	ac 00       	.word	0x00ac	; ????
 10e:	08 cf       	rjmp	.-496    	; 0xffffff20 <__eeprom_end+0xff7eff20>
 110:	0f ac       	ldd	r0, Y+63	; 0x3f
 112:	0f b0       	in	r0, 0x0f	; 15
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <vfprintf+0x1a0>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 47 2c 	call	0x588e	; 0x588e <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

00006938 <__bad_interrupt>:
    6938:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00006610 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    6610:	81 b1       	in	r24, 0x01	; 1
    6612:	88 60       	ori	r24, 0x08	; 8
    6614:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    6616:	82 b1       	in	r24, 0x02	; 2
    6618:	87 7f       	andi	r24, 0xF7	; 247
    661a:	82 b9       	out	0x02, r24	; 2
    661c:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00006498 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    6498:	88 23       	and	r24, r24
    649a:	21 f0       	breq	.+8      	; 0x64a4 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    649c:	82 b1       	in	r24, 0x02	; 2
    649e:	88 60       	ori	r24, 0x08	; 8
    64a0:	82 b9       	out	0x02, r24	; 2
    64a2:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    64a4:	82 b1       	in	r24, 0x02	; 2
    64a6:	87 7f       	andi	r24, 0xF7	; 247
    64a8:	82 b9       	out	0x02, r24	; 2
    64aa:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

0000661e <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    661e:	81 b1       	in	r24, 0x01	; 1
    6620:	80 62       	ori	r24, 0x20	; 32
    6622:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    6624:	82 b1       	in	r24, 0x02	; 2
    6626:	8f 7d       	andi	r24, 0xDF	; 223
    6628:	82 b9       	out	0x02, r24	; 2
    662a:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000064ac <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    64ac:	88 23       	and	r24, r24
    64ae:	21 f0       	breq	.+8      	; 0x64b8 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    64b0:	82 b1       	in	r24, 0x02	; 2
    64b2:	80 62       	ori	r24, 0x20	; 32
    64b4:	82 b9       	out	0x02, r24	; 2
    64b6:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    64b8:	82 b1       	in	r24, 0x02	; 2
    64ba:	8f 7d       	andi	r24, 0xDF	; 223
    64bc:	82 b9       	out	0x02, r24	; 2
    64be:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

0000662c <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    662c:	81 b1       	in	r24, 0x01	; 1
    662e:	80 61       	ori	r24, 0x10	; 16
    6630:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    6632:	82 b1       	in	r24, 0x02	; 2
    6634:	8f 7e       	andi	r24, 0xEF	; 239
    6636:	82 b9       	out	0x02, r24	; 2
    6638:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000064c0 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    64c0:	88 23       	and	r24, r24
    64c2:	21 f0       	breq	.+8      	; 0x64cc <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    64c4:	82 b1       	in	r24, 0x02	; 2
    64c6:	80 61       	ori	r24, 0x10	; 16
    64c8:	82 b9       	out	0x02, r24	; 2
    64ca:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    64cc:	82 b1       	in	r24, 0x02	; 2
    64ce:	8f 7e       	andi	r24, 0xEF	; 239
    64d0:	82 b9       	out	0x02, r24	; 2
    64d2:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

0000663a <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    663a:	8a b1       	in	r24, 0x0a	; 10
    663c:	80 61       	ori	r24, 0x10	; 16
    663e:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    6640:	8b b1       	in	r24, 0x0b	; 11
    6642:	8f 7e       	andi	r24, 0xEF	; 239
    6644:	8b b9       	out	0x0b, r24	; 11
    6646:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

000064d4 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    64d4:	88 23       	and	r24, r24
    64d6:	21 f0       	breq	.+8      	; 0x64e0 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    64d8:	8b b1       	in	r24, 0x0b	; 11
    64da:	80 61       	ori	r24, 0x10	; 16
    64dc:	8b b9       	out	0x0b, r24	; 11
    64de:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    64e0:	8b b1       	in	r24, 0x0b	; 11
    64e2:	8f 7e       	andi	r24, 0xEF	; 239
    64e4:	8b b9       	out	0x0b, r24	; 11
    64e6:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00006648 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    6648:	81 b1       	in	r24, 0x01	; 1
    664a:	80 68       	ori	r24, 0x80	; 128
    664c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    664e:	82 b1       	in	r24, 0x02	; 2
    6650:	8f 77       	andi	r24, 0x7F	; 127
    6652:	82 b9       	out	0x02, r24	; 2
    6654:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

000064e8 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    64e8:	88 23       	and	r24, r24
    64ea:	21 f0       	breq	.+8      	; 0x64f4 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    64ec:	82 b1       	in	r24, 0x02	; 2
    64ee:	80 68       	ori	r24, 0x80	; 128
    64f0:	82 b9       	out	0x02, r24	; 2
    64f2:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    64f4:	82 b1       	in	r24, 0x02	; 2
    64f6:	8f 77       	andi	r24, 0x7F	; 127
    64f8:	82 b9       	out	0x02, r24	; 2
    64fa:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

0000688c <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    688c:	82 b1       	in	r24, 0x02	; 2
    688e:	80 58       	subi	r24, 0x80	; 128
    6890:	82 b9       	out	0x02, r24	; 2
    6892:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00005764 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    5764:	84 b1       	in	r24, 0x04	; 4
    5766:	8b 7f       	andi	r24, 0xFB	; 251
    5768:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    576a:	e9 e6       	ldi	r30, 0x69	; 105
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	80 81       	ld	r24, Z
    5770:	8f 7e       	andi	r24, 0xEF	; 239
    5772:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    5774:	80 81       	ld	r24, Z
    5776:	80 62       	ori	r24, 0x20	; 32
    5778:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    577a:	8d b3       	in	r24, 0x1d	; 29
    577c:	84 60       	ori	r24, 0x04	; 4
    577e:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    5780:	83 b7       	in	r24, 0x33	; 51
    5782:	81 7f       	andi	r24, 0xF1	; 241
    5784:	84 60       	ori	r24, 0x04	; 4
    5786:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    5788:	83 b7       	in	r24, 0x33	; 51
    578a:	81 60       	ori	r24, 0x01	; 1
    578c:	83 bf       	out	0x33, r24	; 51
	sei();
    578e:	78 94       	sei
	sleep_cpu();
    5790:	88 95       	sleep
	sleep_disable();
    5792:	83 b7       	in	r24, 0x33	; 51
    5794:	8e 7f       	andi	r24, 0xFE	; 254
    5796:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    5798:	8d b3       	in	r24, 0x1d	; 29
    579a:	8b 7f       	andi	r24, 0xFB	; 251
    579c:	8d bb       	out	0x1d, r24	; 29
    579e:	08 95       	ret

Disassembly of section .text.__vector_3:

000064fc <__vector_3>:
}

ISR(INT2_vect){
    64fc:	1f 92       	push	r1
    64fe:	0f 92       	push	r0
    6500:	0f b6       	in	r0, 0x3f	; 63
    6502:	0f 92       	push	r0
    6504:	11 24       	eor	r1, r1
	
}
    6506:	0f 90       	pop	r0
    6508:	0f be       	out	0x3f, r0	; 63
    650a:	0f 90       	pop	r0
    650c:	1f 90       	pop	r1
    650e:	18 95       	reti

Disassembly of section .text.rn2483_init:

00006894 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    6894:	84 b1       	in	r24, 0x04	; 4
    6896:	80 61       	ori	r24, 0x10	; 16
    6898:	84 b9       	out	0x04, r24	; 4
    689a:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

0000689c <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    689c:	85 b1       	in	r24, 0x05	; 5
    689e:	8f 7e       	andi	r24, 0xEF	; 239
    68a0:	85 b9       	out	0x05, r24	; 5
    68a2:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000068a4 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    68a4:	85 b1       	in	r24, 0x05	; 5
    68a6:	80 61       	ori	r24, 0x10	; 16
    68a8:	85 b9       	out	0x05, r24	; 5
    68aa:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00006656 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    6656:	87 b1       	in	r24, 0x07	; 7
    6658:	8f 7b       	andi	r24, 0xBF	; 191
    665a:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    665c:	88 b1       	in	r24, 0x08	; 8
    665e:	8f 7b       	andi	r24, 0xBF	; 191
    6660:	88 b9       	out	0x08, r24	; 8
    6662:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000681e <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    681e:	86 b1       	in	r24, 0x06	; 6
    6820:	86 fb       	bst	r24, 6
    6822:	88 27       	eor	r24, r24
    6824:	80 f9       	bld	r24, 0
    6826:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00006128 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    6128:	92 e0       	ldi	r25, 0x02	; 2
    612a:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    612c:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    612e:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    6130:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    6132:	ee e6       	ldi	r30, 0x6E	; 110
    6134:	f0 e0       	ldi	r31, 0x00	; 0
    6136:	80 81       	ld	r24, Z
    6138:	82 60       	ori	r24, 0x02	; 2
    613a:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    613c:	78 94       	sei
	
	//Set callback
	_cb=cb;
    613e:	70 93 7c 0f 	sts	0x0F7C, r23	; 0x800f7c <_cb+0x1>
    6142:	60 93 7b 0f 	sts	0x0F7B, r22	; 0x800f7b <_cb>
    6146:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

000068fc <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    68fc:	86 e0       	ldi	r24, 0x06	; 6
    68fe:	85 bd       	out	0x25, r24	; 37
    6900:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

0000693c <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    693c:	15 bc       	out	0x25, r1	; 37
    693e:	08 95       	ret

Disassembly of section .text.__vector_16:

00004e2e <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    4e2e:	1f 92       	push	r1
    4e30:	0f 92       	push	r0
    4e32:	0f b6       	in	r0, 0x3f	; 63
    4e34:	0f 92       	push	r0
    4e36:	11 24       	eor	r1, r1
    4e38:	2f 93       	push	r18
    4e3a:	3f 93       	push	r19
    4e3c:	4f 93       	push	r20
    4e3e:	5f 93       	push	r21
    4e40:	6f 93       	push	r22
    4e42:	7f 93       	push	r23
    4e44:	8f 93       	push	r24
    4e46:	9f 93       	push	r25
    4e48:	af 93       	push	r26
    4e4a:	bf 93       	push	r27
    4e4c:	ef 93       	push	r30
    4e4e:	ff 93       	push	r31
	_cb();
    4e50:	e0 91 7b 0f 	lds	r30, 0x0F7B	; 0x800f7b <_cb>
    4e54:	f0 91 7c 0f 	lds	r31, 0x0F7C	; 0x800f7c <_cb+0x1>
    4e58:	09 95       	icall
}
    4e5a:	ff 91       	pop	r31
    4e5c:	ef 91       	pop	r30
    4e5e:	bf 91       	pop	r27
    4e60:	af 91       	pop	r26
    4e62:	9f 91       	pop	r25
    4e64:	8f 91       	pop	r24
    4e66:	7f 91       	pop	r23
    4e68:	6f 91       	pop	r22
    4e6a:	5f 91       	pop	r21
    4e6c:	4f 91       	pop	r20
    4e6e:	3f 91       	pop	r19
    4e70:	2f 91       	pop	r18
    4e72:	0f 90       	pop	r0
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	0f 90       	pop	r0
    4e78:	1f 90       	pop	r1
    4e7a:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005b2e <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5b2e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    5b32:	28 e0       	ldi	r18, 0x08	; 8
    5b34:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5b38:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    5b3c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    5b40:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    5b44:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5b48:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5b4c:	ef e6       	ldi	r30, 0x6F	; 111
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	80 81       	ld	r24, Z
    5b52:	82 60       	ori	r24, 0x02	; 2
    5b54:	80 83       	st	Z, r24
	sei();
    5b56:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5b58:	70 93 7e 0f 	sts	0x0F7E, r23	; 0x800f7e <_cb+0x1>
    5b5c:	60 93 7d 0f 	sts	0x0F7D, r22	; 0x800f7d <_cb>
    5b60:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00006752 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    6752:	e1 e8       	ldi	r30, 0x81	; 129
    6754:	f0 e0       	ldi	r31, 0x00	; 0
    6756:	80 81       	ld	r24, Z
    6758:	86 60       	ori	r24, 0x06	; 6
    675a:	80 83       	st	Z, r24
    675c:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

0000675e <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    675e:	e1 e8       	ldi	r30, 0x81	; 129
    6760:	f0 e0       	ldi	r31, 0x00	; 0
    6762:	80 81       	ld	r24, Z
    6764:	88 7f       	andi	r24, 0xF8	; 248
    6766:	80 83       	st	Z, r24
    6768:	08 95       	ret

Disassembly of section .text.__vector_13:

00004e7c <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    4e7c:	1f 92       	push	r1
    4e7e:	0f 92       	push	r0
    4e80:	0f b6       	in	r0, 0x3f	; 63
    4e82:	0f 92       	push	r0
    4e84:	11 24       	eor	r1, r1
    4e86:	2f 93       	push	r18
    4e88:	3f 93       	push	r19
    4e8a:	4f 93       	push	r20
    4e8c:	5f 93       	push	r21
    4e8e:	6f 93       	push	r22
    4e90:	7f 93       	push	r23
    4e92:	8f 93       	push	r24
    4e94:	9f 93       	push	r25
    4e96:	af 93       	push	r26
    4e98:	bf 93       	push	r27
    4e9a:	ef 93       	push	r30
    4e9c:	ff 93       	push	r31
	_cb();
    4e9e:	e0 91 7d 0f 	lds	r30, 0x0F7D	; 0x800f7d <_cb>
    4ea2:	f0 91 7e 0f 	lds	r31, 0x0F7E	; 0x800f7e <_cb+0x1>
    4ea6:	09 95       	icall
    4ea8:	ff 91       	pop	r31
    4eaa:	ef 91       	pop	r30
    4eac:	bf 91       	pop	r27
    4eae:	af 91       	pop	r26
    4eb0:	9f 91       	pop	r25
    4eb2:	8f 91       	pop	r24
    4eb4:	7f 91       	pop	r23
    4eb6:	6f 91       	pop	r22
    4eb8:	5f 91       	pop	r21
    4eba:	4f 91       	pop	r20
    4ebc:	3f 91       	pop	r19
    4ebe:	2f 91       	pop	r18
    4ec0:	0f 90       	pop	r0
    4ec2:	0f be       	out	0x3f, r0	; 63
    4ec4:	0f 90       	pop	r0
    4ec6:	1f 90       	pop	r1
    4ec8:	18 95       	reti

Disassembly of section .text.clear_callbacks:

00006148 <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	09 c0       	rjmp	.+18     	; 0x615e <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    614c:	e8 2f       	mov	r30, r24
    614e:	f0 e0       	ldi	r31, 0x00	; 0
    6150:	ee 0f       	add	r30, r30
    6152:	ff 1f       	adc	r31, r31
    6154:	e6 5b       	subi	r30, 0xB6	; 182
    6156:	f0 4f       	sbci	r31, 0xF0	; 240
    6158:	11 82       	std	Z+1, r1	; 0x01
    615a:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    615c:	8f 5f       	subi	r24, 0xFF	; 255
    615e:	85 30       	cpi	r24, 0x05	; 5
    6160:	a8 f3       	brcs	.-22     	; 0x614c <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6162:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <cbCounter>
    6166:	08 95       	ret

Disassembly of section .text.start_timer:

000068ac <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    68ac:	87 e0       	ldi	r24, 0x07	; 7
    68ae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    68b2:	08 95       	ret

Disassembly of section .text.stop_timer:

00006902 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    6902:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    6906:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006168 <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6168:	82 e0       	ldi	r24, 0x02	; 2
    616a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    616e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6172:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6176:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    617a:	93 ef       	ldi	r25, 0xF3	; 243
    617c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    6180:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    6184:	78 94       	sei
    6186:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

00006828 <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    6828:	0e 94 81 34 	call	0x6902	; 0x6902 <stop_timer>
	clear_callbacks();
    682c:	0e 94 a4 30 	call	0x6148	; 0x6148 <clear_callbacks>
    6830:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00004c94 <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    4c94:	cf 93       	push	r28
    4c96:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4c98:	60 91 96 0f 	lds	r22, 0x0F96	; 0x800f96 <cbCounter>
    4c9c:	65 30       	cpi	r22, 0x05	; 5
    4c9e:	00 f5       	brcc	.+64     	; 0x4ce0 <TC2_HAL_subscribe+0x4c>
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	15 c0       	rjmp	.+42     	; 0x4cce <TC2_HAL_subscribe+0x3a>
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    4ca4:	29 2f       	mov	r18, r25
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	f9 01       	movw	r30, r18
    4caa:	ee 0f       	add	r30, r30
    4cac:	ff 1f       	adc	r31, r31
    4cae:	e6 5b       	subi	r30, 0xB6	; 182
    4cb0:	f0 4f       	sbci	r31, 0xF0	; 240
    4cb2:	40 81       	ld	r20, Z
    4cb4:	51 81       	ldd	r21, Z+1	; 0x01
    4cb6:	45 2b       	or	r20, r21
    4cb8:	49 f4       	brne	.+18     	; 0x4ccc <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    4cba:	22 0f       	add	r18, r18
    4cbc:	33 1f       	adc	r19, r19
    4cbe:	f9 01       	movw	r30, r18
    4cc0:	e6 5b       	subi	r30, 0xB6	; 182
    4cc2:	f0 4f       	sbci	r31, 0xF0	; 240
    4cc4:	b1 83       	std	Z+1, r27	; 0x01
    4cc6:	a0 83       	st	Z, r26
			pointer=i;
    4cc8:	c9 2f       	mov	r28, r25
			break;
    4cca:	04 c0       	rjmp	.+8      	; 0x4cd4 <TC2_HAL_subscribe+0x40>
int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4ccc:	9f 5f       	subi	r25, 0xFF	; 255
    4cce:	95 30       	cpi	r25, 0x05	; 5
    4cd0:	48 f3       	brcs	.-46     	; 0x4ca4 <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    4cd2:	cf ef       	ldi	r28, 0xFF	; 255
			callbacks[i]=cb;
			pointer=i;
			break;
		}
	}
	cbCounter++;
    4cd4:	6f 5f       	subi	r22, 0xFF	; 255
    4cd6:	60 93 96 0f 	sts	0x0F96, r22	; 0x800f96 <cbCounter>
	start_timer();
    4cda:	0e 94 56 34 	call	0x68ac	; 0x68ac <start_timer>
	return pointer;
    4cde:	01 c0       	rjmp	.+2      	; 0x4ce2 <TC2_HAL_subscribe+0x4e>
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4ce0:	cf ef       	ldi	r28, 0xFF	; 255
		}
	}
	cbCounter++;
	start_timer();
	return pointer;
}
    4ce2:	8c 2f       	mov	r24, r28
    4ce4:	cf 91       	pop	r28
    4ce6:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00005854 <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	if(callbacks[pointer]==NULL) return;
    5854:	08 2e       	mov	r0, r24
    5856:	00 0c       	add	r0, r0
    5858:	99 0b       	sbc	r25, r25
    585a:	fc 01       	movw	r30, r24
    585c:	ee 0f       	add	r30, r30
    585e:	ff 1f       	adc	r31, r31
    5860:	e6 5b       	subi	r30, 0xB6	; 182
    5862:	f0 4f       	sbci	r31, 0xF0	; 240
    5864:	20 81       	ld	r18, Z
    5866:	31 81       	ldd	r19, Z+1	; 0x01
    5868:	23 2b       	or	r18, r19
    586a:	81 f0       	breq	.+32     	; 0x588c <TC2_HAL_cancel+0x38>
	callbacks[pointer]=NULL;
    586c:	88 0f       	add	r24, r24
    586e:	99 1f       	adc	r25, r25
    5870:	fc 01       	movw	r30, r24
    5872:	e6 5b       	subi	r30, 0xB6	; 182
    5874:	f0 4f       	sbci	r31, 0xF0	; 240
    5876:	11 82       	std	Z+1, r1	; 0x01
    5878:	10 82       	st	Z, r1
	cbCounter--;
    587a:	80 91 96 0f 	lds	r24, 0x0F96	; 0x800f96 <cbCounter>
    587e:	81 50       	subi	r24, 0x01	; 1
    5880:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <cbCounter>
	if(cbCounter==0){
    5884:	81 11       	cpse	r24, r1
    5886:	02 c0       	rjmp	.+4      	; 0x588c <TC2_HAL_cancel+0x38>
		stop_timer();		
    5888:	0e 94 81 34 	call	0x6902	; 0x6902 <stop_timer>
    588c:	08 95       	ret

Disassembly of section .text.__vector_9:

0000416e <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    416e:	1f 92       	push	r1
    4170:	0f 92       	push	r0
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	0f 92       	push	r0
    4176:	11 24       	eor	r1, r1
    4178:	2f 93       	push	r18
    417a:	3f 93       	push	r19
    417c:	4f 93       	push	r20
    417e:	5f 93       	push	r21
    4180:	6f 93       	push	r22
    4182:	7f 93       	push	r23
    4184:	8f 93       	push	r24
    4186:	9f 93       	push	r25
    4188:	af 93       	push	r26
    418a:	bf 93       	push	r27
    418c:	cf 93       	push	r28
    418e:	ef 93       	push	r30
    4190:	ff 93       	push	r31
	cnt++;
    4192:	80 91 95 0f 	lds	r24, 0x0F95	; 0x800f95 <cnt>
    4196:	8f 5f       	subi	r24, 0xFF	; 255
    4198:	80 93 95 0f 	sts	0x0F95, r24	; 0x800f95 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    419c:	80 32       	cpi	r24, 0x20	; 32
    419e:	99 f4       	brne	.+38     	; 0x41c6 <__vector_9+0x58>
		cnt=0;
    41a0:	10 92 95 0f 	sts	0x0F95, r1	; 0x800f95 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    41a4:	c0 e0       	ldi	r28, 0x00	; 0
    41a6:	0d c0       	rjmp	.+26     	; 0x41c2 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    41a8:	ec 2f       	mov	r30, r28
    41aa:	f0 e0       	ldi	r31, 0x00	; 0
    41ac:	ee 0f       	add	r30, r30
    41ae:	ff 1f       	adc	r31, r31
    41b0:	e6 5b       	subi	r30, 0xB6	; 182
    41b2:	f0 4f       	sbci	r31, 0xF0	; 240
    41b4:	01 90       	ld	r0, Z+
    41b6:	f0 81       	ld	r31, Z
    41b8:	e0 2d       	mov	r30, r0
    41ba:	30 97       	sbiw	r30, 0x00	; 0
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <__vector_9+0x52>
				callbacks[i]();
    41be:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    41c0:	cf 5f       	subi	r28, 0xFF	; 255
    41c2:	c5 30       	cpi	r28, 0x05	; 5
    41c4:	88 f3       	brcs	.-30     	; 0x41a8 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    41c6:	ff 91       	pop	r31
    41c8:	ef 91       	pop	r30
    41ca:	cf 91       	pop	r28
    41cc:	bf 91       	pop	r27
    41ce:	af 91       	pop	r26
    41d0:	9f 91       	pop	r25
    41d2:	8f 91       	pop	r24
    41d4:	7f 91       	pop	r23
    41d6:	6f 91       	pop	r22
    41d8:	5f 91       	pop	r21
    41da:	4f 91       	pop	r20
    41dc:	3f 91       	pop	r19
    41de:	2f 91       	pop	r18
    41e0:	0f 90       	pop	r0
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	0f 90       	pop	r0
    41e6:	1f 90       	pop	r1
    41e8:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00004f66 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4f66:	cf 92       	push	r12
    4f68:	df 92       	push	r13
    4f6a:	ef 92       	push	r14
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
    4f70:	6a 01       	movw	r12, r20
    4f72:	e6 2e       	mov	r14, r22
    4f74:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    4f76:	60 e0       	ldi	r22, 0x00	; 0
    4f78:	0e 94 2c 29 	call	0x5258	; 0x5258 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    4f7c:	81 11       	cpse	r24, r1
    4f7e:	13 c0       	rjmp	.+38     	; 0x4fa6 <start_and_write_data+0x40>
    4f80:	c0 e0       	ldi	r28, 0x00	; 0
    4f82:	0e c0       	rjmp	.+28     	; 0x4fa0 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    4f84:	ae 2d       	mov	r26, r14
    4f86:	c6 01       	movw	r24, r12
    4f88:	8c 0f       	add	r24, r28
    4f8a:	91 1d       	adc	r25, r1
    4f8c:	a1 1d       	adc	r26, r1
    4f8e:	fc 01       	movw	r30, r24
    4f90:	84 91       	lpm	r24, Z
    4f92:	a7 fd       	sbrc	r26, 7
    4f94:	80 81       	ld	r24, Z
    4f96:	0e 94 c4 30 	call	0x6188	; 0x6188 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    4f9a:	81 11       	cpse	r24, r1
    4f9c:	04 c0       	rjmp	.+8      	; 0x4fa6 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    4f9e:	cf 5f       	subi	r28, 0xFF	; 255
    4fa0:	cd 17       	cp	r28, r29
    4fa2:	80 f3       	brcs	.-32     	; 0x4f84 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
}
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	ef 90       	pop	r14
    4fac:	df 90       	pop	r13
    4fae:	cf 90       	pop	r12
    4fb0:	08 95       	ret

Disassembly of section .text.read_and_stop:

00004a84 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    4a84:	ef 92       	push	r14
    4a86:	ff 92       	push	r15
    4a88:	0f 93       	push	r16
    4a8a:	1f 93       	push	r17
    4a8c:	cf 93       	push	r28
    4a8e:	df 93       	push	r29
    4a90:	8c 01       	movw	r16, r24
    4a92:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    4a94:	c0 e0       	ldi	r28, 0x00	; 0
    4a96:	08 c0       	rjmp	.+16     	; 0x4aa8 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    4a98:	78 01       	movw	r14, r16
    4a9a:	ec 0e       	add	r14, r28
    4a9c:	f1 1c       	adc	r15, r1
    4a9e:	0e 94 92 32 	call	0x6524	; 0x6524 <TWI_HAL_read_byte_ack>
    4aa2:	f7 01       	movw	r30, r14
    4aa4:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    4aa6:	cf 5f       	subi	r28, 0xFF	; 255
    4aa8:	2c 2f       	mov	r18, r28
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	8d 2f       	mov	r24, r29
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	28 17       	cp	r18, r24
    4ab4:	39 07       	cpc	r19, r25
    4ab6:	84 f3       	brlt	.-32     	; 0x4a98 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    4ab8:	8d 2f       	mov	r24, r29
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	01 97       	sbiw	r24, 0x01	; 1
    4abe:	e8 01       	movw	r28, r16
    4ac0:	c8 0f       	add	r28, r24
    4ac2:	d9 1f       	adc	r29, r25
    4ac4:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_HAL_read_byte_nack>
    4ac8:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    4aca:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	1f 91       	pop	r17
    4ad6:	0f 91       	pop	r16
    4ad8:	ff 90       	pop	r15
    4ada:	ef 90       	pop	r14
    4adc:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00006510 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6510:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6512:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <start_and_write_data>
    6516:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    6518:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    651a:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <TWI_HAL_stop>
	}
	return status;
}
    651e:	8c 2f       	mov	r24, r28
    6520:	cf 91       	pop	r28
    6522:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006362 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6362:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6364:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <start_and_write_data>
    6368:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    636a:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    636e:	c1 11       	cpse	r28, r1
    6370:	02 c0       	rjmp	.+4      	; 0x6376 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6372:	80 e0       	ldi	r24, 0x00	; 0
    6374:	01 c0       	rjmp	.+2      	; 0x6378 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6376:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6378:	cf 91       	pop	r28
    637a:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00005bca <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5bca:	0f 93       	push	r16
    5bcc:	1f 93       	push	r17
    5bce:	cf 93       	push	r28
    5bd0:	df 93       	push	r29
    5bd2:	8b 01       	movw	r16, r22
    5bd4:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    5bd6:	61 e0       	ldi	r22, 0x01	; 1
    5bd8:	0e 94 2c 29 	call	0x5258	; 0x5258 <TWI_HAL_start>
    5bdc:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5bde:	88 23       	and	r24, r24
    5be0:	21 f0       	breq	.+8      	; 0x5bea <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    5be2:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <TWI_HAL_stop>
		return status;	
    5be6:	8c 2f       	mov	r24, r28
    5be8:	04 c0       	rjmp	.+8      	; 0x5bf2 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    5bea:	6d 2f       	mov	r22, r29
    5bec:	c8 01       	movw	r24, r16
    5bee:	0e 94 42 25 	call	0x4a84	; 0x4a84 <read_and_stop>
	
}
    5bf2:	df 91       	pop	r29
    5bf4:	cf 91       	pop	r28
    5bf6:	1f 91       	pop	r17
    5bf8:	0f 91       	pop	r16
    5bfa:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00005c92 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5c92:	0f 93       	push	r16
    5c94:	1f 93       	push	r17
    5c96:	cf 93       	push	r28
    5c98:	df 93       	push	r29
    5c9a:	8b 01       	movw	r16, r22
    5c9c:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    5c9e:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <TWI_HAL_repeated_start>
    5ca2:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5ca4:	88 23       	and	r24, r24
    5ca6:	21 f0       	breq	.+8      	; 0x5cb0 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    5ca8:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <TWI_HAL_stop>
		return status;
    5cac:	8c 2f       	mov	r24, r28
    5cae:	04 c0       	rjmp	.+8      	; 0x5cb8 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    5cb0:	6d 2f       	mov	r22, r29
    5cb2:	c8 01       	movw	r24, r16
    5cb4:	0e 94 42 25 	call	0x4a84	; 0x4a84 <read_and_stop>
	
}
    5cb8:	df 91       	pop	r29
    5cba:	cf 91       	pop	r28
    5cbc:	1f 91       	pop	r17
    5cbe:	0f 91       	pop	r16
    5cc0:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006574 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6574:	80 e2       	ldi	r24, 0x20	; 32
    6576:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    657a:	e9 eb       	ldi	r30, 0xB9	; 185
    657c:	f0 e0       	ldi	r31, 0x00	; 0
    657e:	80 81       	ld	r24, Z
    6580:	8c 7f       	andi	r24, 0xFC	; 252
    6582:	80 83       	st	Z, r24
    6584:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00005258 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	88 0f       	add	r24, r24
    525c:	99 1f       	adc	r25, r25
    525e:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5260:	84 ea       	ldi	r24, 0xA4	; 164
    5262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5266:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    526a:	99 23       	and	r25, r25
    526c:	e4 f7       	brge	.-8      	; 0x5266 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    526e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5272:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    5274:	88 30       	cpi	r24, 0x08	; 8
    5276:	99 f4       	brne	.+38     	; 0x529e <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5278:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    527c:	84 e8       	ldi	r24, 0x84	; 132
    527e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5286:	88 23       	and	r24, r24
    5288:	e4 f7       	brge	.-8      	; 0x5282 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    528a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    528e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5290:	88 31       	cpi	r24, 0x18	; 24
    5292:	21 f0       	breq	.+8      	; 0x529c <TWI_HAL_start+0x44>
    5294:	80 34       	cpi	r24, 0x40	; 64
    5296:	19 f4       	brne	.+6      	; 0x529e <TWI_HAL_start+0x46>
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	08 95       	ret
    529c:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    529e:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

000055a2 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	88 0f       	add	r24, r24
    55a6:	99 1f       	adc	r25, r25
    55a8:	28 2f       	mov	r18, r24
    55aa:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    55ac:	84 ea       	ldi	r24, 0xA4	; 164
    55ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    55b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    55b6:	99 23       	and	r25, r25
    55b8:	e4 f7       	brge	.-8      	; 0x55b2 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    55ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    55be:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    55c0:	80 31       	cpi	r24, 0x10	; 16
    55c2:	79 f4       	brne	.+30     	; 0x55e2 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    55c4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    55c8:	84 e8       	ldi	r24, 0x84	; 132
    55ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    55ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    55d2:	88 23       	and	r24, r24
    55d4:	e4 f7       	brge	.-8      	; 0x55ce <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    55d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    55da:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    55dc:	80 34       	cpi	r24, 0x40	; 64
    55de:	09 f4       	brne	.+2      	; 0x55e2 <TWI_HAL_repeated_start+0x40>
    55e0:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    55e2:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006188 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    618c:	84 e8       	ldi	r24, 0x84	; 132
    618e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6192:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6196:	88 23       	and	r24, r24
    6198:	e4 f7       	brge	.-8      	; 0x6192 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    619a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    619e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    61a0:	88 32       	cpi	r24, 0x28	; 40
    61a2:	09 f4       	brne	.+2      	; 0x61a6 <TWI_HAL_write_byte+0x1e>
    61a4:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    61a6:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00006524 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    6524:	84 ec       	ldi	r24, 0xC4	; 196
    6526:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    652a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    652e:	88 23       	and	r24, r24
    6530:	e4 f7       	brge	.-8      	; 0x652a <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    6532:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6536:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00006538 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    6538:	84 e8       	ldi	r24, 0x84	; 132
    653a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    653e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6542:	88 23       	and	r24, r24
    6544:	e4 f7       	brge	.-8      	; 0x653e <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    6546:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    654a:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000065e0 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    65e0:	84 e9       	ldi	r24, 0x94	; 148
    65e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    65e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    65ea:	84 fd       	sbrc	r24, 4
    65ec:	fc cf       	rjmp	.-8      	; 0x65e6 <TWI_HAL_stop+0x6>
}
    65ee:	08 95       	ret

Disassembly of section .text.copy_buffer:

00005e42 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5e42:	bc 01       	movw	r22, r24
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	09 c0       	rjmp	.+18     	; 0x5e5a <copy_buffer+0x18>
    5e48:	fb 01       	movw	r30, r22
    5e4a:	e9 0f       	add	r30, r25
    5e4c:	f1 1d       	adc	r31, r1
    5e4e:	da 01       	movw	r26, r20
    5e50:	a0 50       	subi	r26, 0x00	; 0
    5e52:	bf 4f       	sbci	r27, 0xFF	; 255
    5e54:	2c 91       	ld	r18, X
    5e56:	20 83       	st	Z, r18
    5e58:	9f 5f       	subi	r25, 0xFF	; 255
    5e5a:	49 2f       	mov	r20, r25
    5e5c:	50 e0       	ldi	r21, 0x00	; 0
    5e5e:	20 91 98 0f 	lds	r18, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5e62:	30 e0       	ldi	r19, 0x00	; 0
    5e64:	22 50       	subi	r18, 0x02	; 2
    5e66:	31 09       	sbc	r19, r1
    5e68:	42 17       	cp	r20, r18
    5e6a:	53 07       	cpc	r21, r19
    5e6c:	6c f3       	brlt	.-38     	; 0x5e48 <copy_buffer+0x6>
    5e6e:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000057a0 <uart0_hal_init>:
    57a0:	e1 ec       	ldi	r30, 0xC1	; 193
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
    57a4:	80 81       	ld	r24, Z
    57a6:	80 61       	ori	r24, 0x10	; 16
    57a8:	80 83       	st	Z, r24
    57aa:	80 81       	ld	r24, Z
    57ac:	88 60       	ori	r24, 0x08	; 8
    57ae:	80 83       	st	Z, r24
    57b0:	80 81       	ld	r24, Z
    57b2:	80 68       	ori	r24, 0x80	; 128
    57b4:	80 83       	st	Z, r24
    57b6:	80 81       	ld	r24, Z
    57b8:	80 64       	ori	r24, 0x40	; 64
    57ba:	80 83       	st	Z, r24
    57bc:	e0 ec       	ldi	r30, 0xC0	; 192
    57be:	f0 e0       	ldi	r31, 0x00	; 0
    57c0:	80 81       	ld	r24, Z
    57c2:	82 60       	ori	r24, 0x02	; 2
    57c4:	80 83       	st	Z, r24
    57c6:	86 e0       	ldi	r24, 0x06	; 6
    57c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    57cc:	80 e1       	ldi	r24, 0x10	; 16
    57ce:	90 e0       	ldi	r25, 0x00	; 0
    57d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    57d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    57d8:	78 94       	sei
    57da:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000057dc <uart0_hal_send_message>:
    57dc:	dc 01       	movw	r26, r24
    57de:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    57e2:	81 11       	cpse	r24, r1
    57e4:	fc cf       	rjmp	.-8      	; 0x57de <uart0_hal_send_message+0x2>
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0b c0       	rjmp	.+22     	; 0x5800 <uart0_hal_send_message+0x24>
    57ea:	29 2f       	mov	r18, r25
    57ec:	30 e0       	ldi	r19, 0x00	; 0
    57ee:	fd 01       	movw	r30, r26
    57f0:	e2 0f       	add	r30, r18
    57f2:	f3 1f       	adc	r31, r19
    57f4:	40 81       	ld	r20, Z
    57f6:	f9 01       	movw	r30, r18
    57f8:	ea 56       	subi	r30, 0x6A	; 106
    57fa:	fe 4f       	sbci	r31, 0xFE	; 254
    57fc:	40 83       	st	Z, r20
    57fe:	9f 5f       	subi	r25, 0xFF	; 255
    5800:	96 17       	cp	r25, r22
    5802:	98 f3       	brcs	.-26     	; 0x57ea <uart0_hal_send_message+0xe>
    5804:	60 93 9a 0f 	sts	0x0F9A, r22	; 0x800f9a <tx_buffer_data_len>
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    580e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    5812:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    5816:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00004684 <uart0_hal_send_string>:
    4684:	6f 92       	push	r6
    4686:	7f 92       	push	r7
    4688:	8f 92       	push	r8
    468a:	cf 92       	push	r12
    468c:	df 92       	push	r13
    468e:	ef 92       	push	r14
    4690:	3b 01       	movw	r6, r22
    4692:	88 2e       	mov	r8, r24
    4694:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    4698:	81 11       	cpse	r24, r1
    469a:	fc cf       	rjmp	.-8      	; 0x4694 <uart0_hal_send_string+0x10>
    469c:	88 2d       	mov	r24, r8
    469e:	b3 01       	movw	r22, r6
    46a0:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    46a4:	68 2f       	mov	r22, r24
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	12 c0       	rjmp	.+36     	; 0x46ce <uart0_hal_send_string+0x4a>
    46aa:	29 2f       	mov	r18, r25
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	e8 2c       	mov	r14, r8
    46b0:	63 01       	movw	r12, r6
    46b2:	c2 0e       	add	r12, r18
    46b4:	d3 1e       	adc	r13, r19
    46b6:	e1 1c       	adc	r14, r1
    46b8:	37 fd       	sbrc	r19, 7
    46ba:	ea 94       	dec	r14
    46bc:	f6 01       	movw	r30, r12
    46be:	44 91       	lpm	r20, Z
    46c0:	e7 fc       	sbrc	r14, 7
    46c2:	40 81       	ld	r20, Z
    46c4:	f9 01       	movw	r30, r18
    46c6:	ea 56       	subi	r30, 0x6A	; 106
    46c8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ca:	40 83       	st	Z, r20
    46cc:	9f 5f       	subi	r25, 0xFF	; 255
    46ce:	96 17       	cp	r25, r22
    46d0:	60 f3       	brcs	.-40     	; 0x46aa <uart0_hal_send_string+0x26>
    46d2:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <tx_buffer_data_len>
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    46dc:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    46e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    46e4:	ef 90       	pop	r14
    46e6:	df 90       	pop	r13
    46e8:	cf 90       	pop	r12
    46ea:	8f 90       	pop	r8
    46ec:	7f 90       	pop	r7
    46ee:	6f 90       	pop	r6
    46f0:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00006664 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    6664:	90 91 97 0f 	lds	r25, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    6668:	81 e0       	ldi	r24, 0x01	; 1
    666a:	91 11       	cpse	r25, r1
    666c:	01 c0       	rjmp	.+2      	; 0x6670 <uart0_hal_message_ready+0xc>
    666e:	80 e0       	ldi	r24, 0x00	; 0
}
    6670:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00006832 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    6832:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    6836:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <rx_buffer_data_len>
    683a:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00005f50 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    5f50:	0f 93       	push	r16
    5f52:	1f 93       	push	r17
    5f54:	cf 93       	push	r28
    5f56:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    5f58:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    5f5c:	c0 91 98 0f 	lds	r28, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5f60:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    5f62:	f8 01       	movw	r30, r16
    5f64:	ec 0f       	add	r30, r28
    5f66:	f1 1d       	adc	r31, r1
    5f68:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    5f6a:	0e 94 19 34 	call	0x6832	; 0x6832 <uart0_hal_clear_rx_buffer>
	return len;
}
    5f6e:	8c 2f       	mov	r24, r28
    5f70:	cf 91       	pop	r28
    5f72:	1f 91       	pop	r17
    5f74:	0f 91       	pop	r16
    5f76:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005378 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	1f 92       	push	r1
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
    5382:	9a b1       	in	r25, 0x0a	; 10
    5384:	92 60       	ori	r25, 0x02	; 2
    5386:	9a b9       	out	0x0a, r25	; 10
    5388:	e1 ec       	ldi	r30, 0xC1	; 193
    538a:	f0 e0       	ldi	r31, 0x00	; 0
    538c:	90 81       	ld	r25, Z
    538e:	97 7f       	andi	r25, 0xF7	; 247
    5390:	90 83       	st	Z, r25
    5392:	9b b1       	in	r25, 0x0b	; 11
    5394:	9d 7f       	andi	r25, 0xFD	; 253
    5396:	9b b9       	out	0x0b, r25	; 11
    5398:	af e9       	ldi	r26, 0x9F	; 159
    539a:	bf e0       	ldi	r27, 0x0F	; 15
    539c:	11 97       	sbiw	r26, 0x01	; 1
    539e:	f1 f7       	brne	.-4      	; 0x539c <uart0_hal_send_break+0x24>
    53a0:	00 c0       	rjmp	.+0      	; 0x53a2 <uart0_hal_send_break+0x2a>
    53a2:	00 00       	nop
    53a4:	90 81       	ld	r25, Z
    53a6:	98 60       	ori	r25, 0x08	; 8
    53a8:	90 83       	st	Z, r25
    53aa:	89 83       	std	Y+1, r24	; 0x01
    53ac:	61 e0       	ldi	r22, 0x01	; 1
    53ae:	ce 01       	movw	r24, r28
    53b0:	01 96       	adiw	r24, 0x01	; 1
    53b2:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <uart0_hal_send_message>
    53b6:	0f 90       	pop	r0
    53b8:	df 91       	pop	r29
    53ba:	cf 91       	pop	r28
    53bc:	08 95       	ret

Disassembly of section .text.__vector_22:

0000517a <__vector_22>:
    517a:	1f 92       	push	r1
    517c:	0f 92       	push	r0
    517e:	0f b6       	in	r0, 0x3f	; 63
    5180:	0f 92       	push	r0
    5182:	11 24       	eor	r1, r1
    5184:	8f 93       	push	r24
    5186:	ef 93       	push	r30
    5188:	ff 93       	push	r31
    518a:	e0 91 99 0f 	lds	r30, 0x0F99	; 0x800f99 <tx_buffer_cursor>
    518e:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    5192:	e8 17       	cp	r30, r24
    5194:	58 f4       	brcc	.+22     	; 0x51ac <__vector_22+0x32>
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	8e 0f       	add	r24, r30
    519a:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    519e:	f0 e0       	ldi	r31, 0x00	; 0
    51a0:	ea 56       	subi	r30, 0x6A	; 106
    51a2:	fe 4f       	sbci	r31, 0xFE	; 254
    51a4:	80 81       	ld	r24, Z
    51a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    51aa:	04 c0       	rjmp	.+8      	; 0x51b4 <__vector_22+0x3a>
    51ac:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <tx_buffer_cursor>
    51b0:	10 92 9a 0f 	sts	0x0F9A, r1	; 0x800f9a <tx_buffer_data_len>
    51b4:	ff 91       	pop	r31
    51b6:	ef 91       	pop	r30
    51b8:	8f 91       	pop	r24
    51ba:	0f 90       	pop	r0
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	0f 90       	pop	r0
    51c0:	1f 90       	pop	r1
    51c2:	18 95       	reti

Disassembly of section .text.__vector_20:

000044bc <__vector_20>:
    44bc:	1f 92       	push	r1
    44be:	0f 92       	push	r0
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	0f 92       	push	r0
    44c4:	11 24       	eor	r1, r1
    44c6:	2f 93       	push	r18
    44c8:	8f 93       	push	r24
    44ca:	9f 93       	push	r25
    44cc:	ef 93       	push	r30
    44ce:	ff 93       	push	r31
    44d0:	80 91 97 0f 	lds	r24, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    44d4:	81 11       	cpse	r24, r1
    44d6:	0e c0       	rjmp	.+28     	; 0x44f4 <__vector_20+0x38>
    44d8:	e0 91 98 0f 	lds	r30, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    44dc:	e6 39       	cpi	r30, 0x96	; 150
    44de:	50 f4       	brcc	.+20     	; 0x44f4 <__vector_20+0x38>
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	8e 0f       	add	r24, r30
    44e4:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <rx_buffer_data_len>
    44e8:	f0 e0       	ldi	r31, 0x00	; 0
    44ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    44ee:	e0 50       	subi	r30, 0x00	; 0
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	80 83       	st	Z, r24
    44f4:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    44f8:	83 30       	cpi	r24, 0x03	; 3
    44fa:	80 f0       	brcs	.+32     	; 0x451c <__vector_20+0x60>
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	fc 01       	movw	r30, r24
    4500:	e1 50       	subi	r30, 0x01	; 1
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	20 81       	ld	r18, Z
    4506:	2a 30       	cpi	r18, 0x0A	; 10
    4508:	49 f4       	brne	.+18     	; 0x451c <__vector_20+0x60>
    450a:	fc 01       	movw	r30, r24
    450c:	e2 50       	subi	r30, 0x02	; 2
    450e:	ff 4f       	sbci	r31, 0xFF	; 255
    4510:	80 81       	ld	r24, Z
    4512:	8d 30       	cpi	r24, 0x0D	; 13
    4514:	19 f4       	brne	.+6      	; 0x451c <__vector_20+0x60>
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <rx_buffer_has_message>
    451c:	ff 91       	pop	r31
    451e:	ef 91       	pop	r30
    4520:	9f 91       	pop	r25
    4522:	8f 91       	pop	r24
    4524:	2f 91       	pop	r18
    4526:	0f 90       	pop	r0
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	0f 90       	pop	r0
    452c:	1f 90       	pop	r1
    452e:	18 95       	reti

Disassembly of section .text.copy_buffer:

00005e70 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5e70:	bc 01       	movw	r22, r24
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	09 c0       	rjmp	.+18     	; 0x5e88 <copy_buffer+0x18>
    5e76:	fb 01       	movw	r30, r22
    5e78:	e9 0f       	add	r30, r25
    5e7a:	f1 1d       	adc	r31, r1
    5e7c:	da 01       	movw	r26, r20
    5e7e:	a6 51       	subi	r26, 0x16	; 22
    5e80:	b2 4f       	sbci	r27, 0xF2	; 242
    5e82:	2c 91       	ld	r18, X
    5e84:	20 83       	st	Z, r18
    5e86:	9f 5f       	subi	r25, 0xFF	; 255
    5e88:	49 2f       	mov	r20, r25
    5e8a:	50 e0       	ldi	r21, 0x00	; 0
    5e8c:	20 91 9c 0f 	lds	r18, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	22 50       	subi	r18, 0x02	; 2
    5e94:	31 09       	sbc	r19, r1
    5e96:	42 17       	cp	r20, r18
    5e98:	53 07       	cpc	r21, r19
    5e9a:	6c f3       	brlt	.-38     	; 0x5e76 <copy_buffer+0x6>
    5e9c:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00005818 <uart1_hal_init>:
    5818:	e9 ec       	ldi	r30, 0xC9	; 201
    581a:	f0 e0       	ldi	r31, 0x00	; 0
    581c:	80 81       	ld	r24, Z
    581e:	80 61       	ori	r24, 0x10	; 16
    5820:	80 83       	st	Z, r24
    5822:	80 81       	ld	r24, Z
    5824:	88 60       	ori	r24, 0x08	; 8
    5826:	80 83       	st	Z, r24
    5828:	80 81       	ld	r24, Z
    582a:	80 68       	ori	r24, 0x80	; 128
    582c:	80 83       	st	Z, r24
    582e:	80 81       	ld	r24, Z
    5830:	80 64       	ori	r24, 0x40	; 64
    5832:	80 83       	st	Z, r24
    5834:	e8 ec       	ldi	r30, 0xC8	; 200
    5836:	f0 e0       	ldi	r31, 0x00	; 0
    5838:	80 81       	ld	r24, Z
    583a:	82 60       	ori	r24, 0x02	; 2
    583c:	80 83       	st	Z, r24
    583e:	86 e0       	ldi	r24, 0x06	; 6
    5840:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    5844:	80 e1       	ldi	r24, 0x10	; 16
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    584c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    5850:	78 94       	sei
    5852:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00003fda <uart1_hal_send_string>:
    3fda:	6f 92       	push	r6
    3fdc:	7f 92       	push	r7
    3fde:	8f 92       	push	r8
    3fe0:	cf 92       	push	r12
    3fe2:	df 92       	push	r13
    3fe4:	ef 92       	push	r14
    3fe6:	3b 01       	movw	r6, r22
    3fe8:	88 2e       	mov	r8, r24
    3fea:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    3fee:	81 11       	cpse	r24, r1
    3ff0:	fc cf       	rjmp	.-8      	; 0x3fea <uart1_hal_send_string+0x10>
    3ff2:	88 2d       	mov	r24, r8
    3ff4:	b3 01       	movw	r22, r6
    3ff6:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	12 c0       	rjmp	.+36     	; 0x4024 <uart1_hal_send_string+0x4a>
    4000:	29 2f       	mov	r18, r25
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	e8 2c       	mov	r14, r8
    4006:	63 01       	movw	r12, r6
    4008:	c4 0e       	add	r12, r20
    400a:	d5 1e       	adc	r13, r21
    400c:	e1 1c       	adc	r14, r1
    400e:	57 fd       	sbrc	r21, 7
    4010:	ea 94       	dec	r14
    4012:	f6 01       	movw	r30, r12
    4014:	44 91       	lpm	r20, Z
    4016:	e7 fc       	sbrc	r14, 7
    4018:	40 81       	ld	r20, Z
    401a:	f9 01       	movw	r30, r18
    401c:	ee 5d       	subi	r30, 0xDE	; 222
    401e:	f2 4f       	sbci	r31, 0xF2	; 242
    4020:	40 83       	st	Z, r20
    4022:	9f 5f       	subi	r25, 0xFF	; 255
    4024:	49 2f       	mov	r20, r25
    4026:	50 e0       	ldi	r21, 0x00	; 0
    4028:	46 17       	cp	r20, r22
    402a:	57 07       	cpc	r21, r23
    402c:	48 f3       	brcs	.-46     	; 0x4000 <uart1_hal_send_string+0x26>
    402e:	fb 01       	movw	r30, r22
    4030:	ee 5d       	subi	r30, 0xDE	; 222
    4032:	f2 4f       	sbci	r31, 0xF2	; 242
    4034:	8d e0       	ldi	r24, 0x0D	; 13
    4036:	80 83       	st	Z, r24
    4038:	fb 01       	movw	r30, r22
    403a:	ed 5d       	subi	r30, 0xDD	; 221
    403c:	f2 4f       	sbci	r31, 0xF2	; 242
    403e:	8a e0       	ldi	r24, 0x0A	; 10
    4040:	80 83       	st	Z, r24
    4042:	6e 5f       	subi	r22, 0xFE	; 254
    4044:	60 93 9e 0f 	sts	0x0F9E, r22	; 0x800f9e <tx_buffer_data_len>
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    404e:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <tx_buffer>
    4052:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	8f 90       	pop	r8
    405e:	7f 90       	pop	r7
    4060:	6f 90       	pop	r6
    4062:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00006672 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    6672:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    6676:	81 e0       	ldi	r24, 0x01	; 1
    6678:	91 11       	cpse	r25, r1
    667a:	01 c0       	rjmp	.+2      	; 0x667e <uart1_hal_message_ready+0xc>
    667c:	80 e0       	ldi	r24, 0x00	; 0
}
    667e:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00006680 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    6680:	90 91 9c 0f 	lds	r25, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    6684:	81 e0       	ldi	r24, 0x01	; 1
    6686:	95 39       	cpi	r25, 0x95	; 149
    6688:	08 f4       	brcc	.+2      	; 0x668c <uart1_hal_rx_full+0xc>
    668a:	80 e0       	ldi	r24, 0x00	; 0
}
    668c:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

0000683c <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    683c:	10 92 9b 0f 	sts	0x0F9B, r1	; 0x800f9b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    6840:	10 92 9c 0f 	sts	0x0F9C, r1	; 0x800f9c <rx_buffer_data_len>
    6844:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00005f78 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5f78:	0f 93       	push	r16
    5f7a:	1f 93       	push	r17
    5f7c:	cf 93       	push	r28
    5f7e:	8c 01       	movw	r16, r24
    5f80:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <copy_buffer>
    5f84:	c0 91 9c 0f 	lds	r28, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    5f88:	c2 50       	subi	r28, 0x02	; 2
    5f8a:	f8 01       	movw	r30, r16
    5f8c:	ec 0f       	add	r30, r28
    5f8e:	f1 1d       	adc	r31, r1
    5f90:	10 82       	st	Z, r1
    5f92:	0e 94 1e 34 	call	0x683c	; 0x683c <uart1_hal_clear_rx_buffer>
    5f96:	8c 2f       	mov	r24, r28
    5f98:	cf 91       	pop	r28
    5f9a:	1f 91       	pop	r17
    5f9c:	0f 91       	pop	r16
    5f9e:	08 95       	ret

Disassembly of section .text.__vector_30:

000051c4 <__vector_30>:
    51c4:	1f 92       	push	r1
    51c6:	0f 92       	push	r0
    51c8:	0f b6       	in	r0, 0x3f	; 63
    51ca:	0f 92       	push	r0
    51cc:	11 24       	eor	r1, r1
    51ce:	8f 93       	push	r24
    51d0:	ef 93       	push	r30
    51d2:	ff 93       	push	r31
    51d4:	e0 91 9d 0f 	lds	r30, 0x0F9D	; 0x800f9d <tx_buffer_cursor>
    51d8:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    51dc:	e8 17       	cp	r30, r24
    51de:	58 f4       	brcc	.+22     	; 0x51f6 <__vector_30+0x32>
    51e0:	81 e0       	ldi	r24, 0x01	; 1
    51e2:	8e 0f       	add	r24, r30
    51e4:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    51e8:	f0 e0       	ldi	r31, 0x00	; 0
    51ea:	ee 5d       	subi	r30, 0xDE	; 222
    51ec:	f2 4f       	sbci	r31, 0xF2	; 242
    51ee:	80 81       	ld	r24, Z
    51f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    51f4:	04 c0       	rjmp	.+8      	; 0x51fe <__vector_30+0x3a>
    51f6:	10 92 9d 0f 	sts	0x0F9D, r1	; 0x800f9d <tx_buffer_cursor>
    51fa:	10 92 9e 0f 	sts	0x0F9E, r1	; 0x800f9e <tx_buffer_data_len>
    51fe:	ff 91       	pop	r31
    5200:	ef 91       	pop	r30
    5202:	8f 91       	pop	r24
    5204:	0f 90       	pop	r0
    5206:	0f be       	out	0x3f, r0	; 63
    5208:	0f 90       	pop	r0
    520a:	1f 90       	pop	r1
    520c:	18 95       	reti

Disassembly of section .text.__vector_28:

00004530 <__vector_28>:
    4530:	1f 92       	push	r1
    4532:	0f 92       	push	r0
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	0f 92       	push	r0
    4538:	11 24       	eor	r1, r1
    453a:	2f 93       	push	r18
    453c:	8f 93       	push	r24
    453e:	9f 93       	push	r25
    4540:	ef 93       	push	r30
    4542:	ff 93       	push	r31
    4544:	80 91 9b 0f 	lds	r24, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    4548:	81 11       	cpse	r24, r1
    454a:	0e c0       	rjmp	.+28     	; 0x4568 <__vector_28+0x38>
    454c:	e0 91 9c 0f 	lds	r30, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    4550:	e6 39       	cpi	r30, 0x96	; 150
    4552:	50 f4       	brcc	.+20     	; 0x4568 <__vector_28+0x38>
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	8e 0f       	add	r24, r30
    4558:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <rx_buffer_data_len>
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4562:	e6 51       	subi	r30, 0x16	; 22
    4564:	f2 4f       	sbci	r31, 0xF2	; 242
    4566:	80 83       	st	Z, r24
    4568:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    456c:	83 30       	cpi	r24, 0x03	; 3
    456e:	80 f0       	brcs	.+32     	; 0x4590 <__vector_28+0x60>
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	fc 01       	movw	r30, r24
    4574:	e7 51       	subi	r30, 0x17	; 23
    4576:	f2 4f       	sbci	r31, 0xF2	; 242
    4578:	20 81       	ld	r18, Z
    457a:	2a 30       	cpi	r18, 0x0A	; 10
    457c:	49 f4       	brne	.+18     	; 0x4590 <__vector_28+0x60>
    457e:	fc 01       	movw	r30, r24
    4580:	e8 51       	subi	r30, 0x18	; 24
    4582:	f2 4f       	sbci	r31, 0xF2	; 242
    4584:	80 81       	ld	r24, Z
    4586:	8d 30       	cpi	r24, 0x0D	; 13
    4588:	19 f4       	brne	.+6      	; 0x4590 <__vector_28+0x60>
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <rx_buffer_has_message>
    4590:	ff 91       	pop	r31
    4592:	ef 91       	pop	r30
    4594:	9f 91       	pop	r25
    4596:	8f 91       	pop	r24
    4598:	2f 91       	pop	r18
    459a:	0f 90       	pop	r0
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	0f 90       	pop	r0
    45a0:	1f 90       	pop	r1
    45a2:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

0000668e <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    668e:	81 b1       	in	r24, 0x01	; 1
    6690:	8f 7b       	andi	r24, 0xBF	; 191
    6692:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    6694:	82 b1       	in	r24, 0x02	; 2
    6696:	80 64       	ori	r24, 0x40	; 64
    6698:	82 b9       	out	0x02, r24	; 2
    669a:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

00006846 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    6846:	80 b1       	in	r24, 0x00	; 0
}
    6848:	86 fb       	bst	r24, 6
    684a:	88 27       	eor	r24, r24
    684c:	80 f9       	bld	r24, 0
    684e:	08 95       	ret

Disassembly of section .text.main:

0000588e <main>:

int main(void)
{
	//test_runner();
	
	PM_HAL_LED_power_init();
    588e:	0e 94 24 33 	call	0x6648	; 0x6648 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    5892:	0e 94 47 33 	call	0x668e	; 0x668e <UI_HAL_jumper_init>
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    5896:	0e 94 23 34 	call	0x6846	; 0x6846 <UI_HAL_is_config_mode>
    589a:	88 23       	and	r24, r24
    589c:	49 f0       	breq	.+18     	; 0x58b0 <main+0x22>
			PM_HAL_LED_power(true);
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
			CONF_enter();
    58a4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <CONF_enter>
			PM_HAL_LED_power(false);
    58a8:	80 e0       	ldi	r24, 0x00	; 0
    58aa:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    58ae:	02 c0       	rjmp	.+4      	; 0x58b4 <main+0x26>
		}else{
			MAINPG_start();
    58b0:	0e 94 0a 08 	call	0x1014	; 0x1014 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    58b4:	2f ef       	ldi	r18, 0xFF	; 255
    58b6:	81 e1       	ldi	r24, 0x11	; 17
    58b8:	9a e7       	ldi	r25, 0x7A	; 122
    58ba:	21 50       	subi	r18, 0x01	; 1
    58bc:	80 40       	sbci	r24, 0x00	; 0
    58be:	90 40       	sbci	r25, 0x00	; 0
    58c0:	e1 f7       	brne	.-8      	; 0x58ba <main+0x2c>
    58c2:	00 c0       	rjmp	.+0      	; 0x58c4 <main+0x36>
    58c4:	00 00       	nop
    58c6:	e7 cf       	rjmp	.-50     	; 0x5896 <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00003cf4 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    3cf4:	8f 92       	push	r8
    3cf6:	9f 92       	push	r9
    3cf8:	af 92       	push	r10
    3cfa:	bf 92       	push	r11
    3cfc:	cf 92       	push	r12
    3cfe:	df 92       	push	r13
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    3d04:	bc 01       	movw	r22, r24
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__floatunsisf>
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e8       	ldi	r20, 0x80	; 128
    3d14:	59 e3       	ldi	r21, 0x39	; 57
    3d16:	0e 94 76 34 	call	0x68ec	; 0x68ec <__mulsf3>
    3d1a:	80 90 67 0f 	lds	r8, 0x0F67	; 0x800f67 <Vc>
    3d1e:	90 90 68 0f 	lds	r9, 0x0F68	; 0x800f68 <Vc+0x1>
    3d22:	a0 90 69 0f 	lds	r10, 0x0F69	; 0x800f69 <Vc+0x2>
    3d26:	b0 90 6a 0f 	lds	r11, 0x0F6A	; 0x800f6a <Vc+0x3>
    3d2a:	a5 01       	movw	r20, r10
    3d2c:	94 01       	movw	r18, r8
    3d2e:	0e 94 76 34 	call	0x68ec	; 0x68ec <__mulsf3>
    3d32:	6b 01       	movw	r12, r22
    3d34:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    3d36:	9b 01       	movw	r18, r22
    3d38:	ac 01       	movw	r20, r24
    3d3a:	c5 01       	movw	r24, r10
    3d3c:	b4 01       	movw	r22, r8
    3d3e:	0e 94 78 33 	call	0x66f0	; 0x66f0 <__subsf3>
    3d42:	a7 01       	movw	r20, r14
    3d44:	96 01       	movw	r18, r12
    3d46:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__divsf3>
    3d4a:	20 91 63 0f 	lds	r18, 0x0F63	; 0x800f63 <RRL>
    3d4e:	30 91 64 0f 	lds	r19, 0x0F64	; 0x800f64 <RRL+0x1>
    3d52:	40 91 65 0f 	lds	r20, 0x0F65	; 0x800f65 <RRL+0x2>
    3d56:	50 91 66 0f 	lds	r21, 0x0F66	; 0x800f66 <RRL+0x3>
    3d5a:	0e 94 76 34 	call	0x68ec	; 0x68ec <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    3d5e:	20 91 5f 0f 	lds	r18, 0x0F5F	; 0x800f5f <PPM_factor>
    3d62:	30 91 60 0f 	lds	r19, 0x0F60	; 0x800f60 <PPM_factor+0x1>
    3d66:	40 91 61 0f 	lds	r20, 0x0F61	; 0x800f61 <PPM_factor+0x2>
    3d6a:	50 91 62 0f 	lds	r21, 0x0F62	; 0x800f62 <PPM_factor+0x3>
    3d6e:	0e 94 76 34 	call	0x68ec	; 0x68ec <__mulsf3>
    3d72:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__fixunssfsi>
	return PPM;
}
    3d76:	cb 01       	movw	r24, r22
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	df 90       	pop	r13
    3d7e:	cf 90       	pop	r12
    3d80:	bf 90       	pop	r11
    3d82:	af 90       	pop	r10
    3d84:	9f 90       	pop	r9
    3d86:	8f 90       	pop	r8
    3d88:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

000063ca <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    63ca:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    63ce:	8f 5f       	subi	r24, 0xFF	; 255
    63d0:	80 93 9f 0f 	sts	0x0F9F, r24	; 0x800f9f <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    63d4:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    63d8:	89 17       	cp	r24, r25
    63da:	10 f0       	brcs	.+4      	; 0x63e0 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    63dc:	0e 94 9e 34 	call	0x693c	; 0x693c <TC0_HAL_stop>
    63e0:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00004906 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    4906:	cf 93       	push	r28
	_data=data;
    4908:	50 93 82 0f 	sts	0x0F82, r21	; 0x800f82 <_data+0x1>
    490c:	40 93 81 0f 	sts	0x0F81, r20	; 0x800f81 <_data>
	_nSamples=nSamples;
    4910:	70 93 84 0f 	sts	0x0F84, r23	; 0x800f84 <_nSamples+0x1>
    4914:	60 93 83 0f 	sts	0x0F83, r22	; 0x800f83 <_nSamples>
	cntSamples=0;
    4918:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <cntSamples+0x1>
    491c:	10 92 7f 0f 	sts	0x0F7F, r1	; 0x800f7f <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    4920:	6f ed       	ldi	r22, 0xDF	; 223
    4922:	79 e2       	ldi	r23, 0x29	; 41
    4924:	0e 94 94 30 	call	0x6128	; 0x6128 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	0e 94 4c 32 	call	0x6498	; 0x6498 <PM_HAL_adc_power>
    492e:	2f ef       	ldi	r18, 0xFF	; 255
    4930:	83 ec       	ldi	r24, 0xC3	; 195
    4932:	99 e0       	ldi	r25, 0x09	; 9
    4934:	21 50       	subi	r18, 0x01	; 1
    4936:	80 40       	sbci	r24, 0x00	; 0
    4938:	90 40       	sbci	r25, 0x00	; 0
    493a:	e1 f7       	brne	.-8      	; 0x4934 <ADC_init_sampling+0x2e>
    493c:	00 c0       	rjmp	.+0      	; 0x493e <ADC_init_sampling+0x38>
    493e:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	8d e4       	ldi	r24, 0x4D	; 77
    4944:	0e 94 2c 29 	call	0x5258	; 0x5258 <TWI_HAL_start>
    4948:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    494a:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    494e:	cc 23       	and	r28, r28
    4950:	51 f0       	breq	.+20     	; 0x4966 <ADC_init_sampling+0x60>
		_data=NULL;
    4952:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    4956:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
		_nSamples=0;
    495a:	10 92 84 0f 	sts	0x0F84, r1	; 0x800f84 <_nSamples+0x1>
    495e:	10 92 83 0f 	sts	0x0F83, r1	; 0x800f83 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    4962:	82 e0       	ldi	r24, 0x02	; 2
    4964:	01 c0       	rjmp	.+2      	; 0x4968 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    4966:	80 e0       	ldi	r24, 0x00	; 0
}
    4968:	cf 91       	pop	r28
    496a:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

0000654c <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    654c:	0e 94 9e 34 	call	0x693c	; 0x693c <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    6550:	80 e0       	ldi	r24, 0x00	; 0
    6552:	0e 94 4c 32 	call	0x6498	; 0x6498 <PM_HAL_adc_power>
	_data=NULL;
    6556:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    655a:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
    655e:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

000062ba <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    62ba:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <cntSamples>
    62be:	50 91 80 0f 	lds	r21, 0x0F80	; 0x800f80 <cntSamples+0x1>
    62c2:	20 91 83 0f 	lds	r18, 0x0F83	; 0x800f83 <_nSamples>
    62c6:	30 91 84 0f 	lds	r19, 0x0F84	; 0x800f84 <_nSamples+0x1>
    62ca:	81 e0       	ldi	r24, 0x01	; 1
    62cc:	42 17       	cp	r20, r18
    62ce:	53 07       	cpc	r21, r19
    62d0:	08 f4       	brcc	.+2      	; 0x62d4 <ADC_is_sampling_done+0x1a>
    62d2:	80 e0       	ldi	r24, 0x00	; 0
}
    62d4:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00004be8 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    4be8:	0f 93       	push	r16
    4bea:	1f 93       	push	r17
    4bec:	cf 93       	push	r28
    4bee:	df 93       	push	r29
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <ADC_get_value+0xa>
    4bf2:	cd b7       	in	r28, 0x3d	; 61
    4bf4:	de b7       	in	r29, 0x3e	; 62
    4bf6:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    4bf8:	8f ef       	ldi	r24, 0xFF	; 255
    4bfa:	9f ef       	ldi	r25, 0xFF	; 255
    4bfc:	f8 01       	movw	r30, r16
    4bfe:	91 83       	std	Z+1, r25	; 0x01
    4c00:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    4c02:	42 e0       	ldi	r20, 0x02	; 2
    4c04:	be 01       	movw	r22, r28
    4c06:	6f 5f       	subi	r22, 0xFF	; 255
    4c08:	7f 4f       	sbci	r23, 0xFF	; 255
    4c0a:	8d e4       	ldi	r24, 0x4D	; 77
    4c0c:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4c10:	81 11       	cpse	r24, r1
    4c12:	0d c0       	rjmp	.+26     	; 0x4c2e <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    4c14:	89 81       	ldd	r24, Y+1	; 0x01
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	98 2f       	mov	r25, r24
    4c1a:	88 27       	eor	r24, r24
    4c1c:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    4c1e:	82 2b       	or	r24, r18
    4c20:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <calc_ppm_methane>
    4c24:	f8 01       	movw	r30, r16
    4c26:	91 83       	std	Z+1, r25	; 0x01
    4c28:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    4c2a:	80 e0       	ldi	r24, 0x00	; 0
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    4c30:	0f 90       	pop	r0
    4c32:	0f 90       	pop	r0
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	1f 91       	pop	r17
    4c3a:	0f 91       	pop	r16
    4c3c:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

000053be <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    53be:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <_data>
    53c2:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <_data+0x1>
    53c6:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    53ca:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    53ce:	a9 01       	movw	r20, r18
    53d0:	4f 5f       	subi	r20, 0xFF	; 255
    53d2:	5f 4f       	sbci	r21, 0xFF	; 255
    53d4:	50 93 80 0f 	sts	0x0F80, r21	; 0x800f80 <cntSamples+0x1>
    53d8:	40 93 7f 0f 	sts	0x0F7F, r20	; 0x800f7f <cntSamples>
    53dc:	22 0f       	add	r18, r18
    53de:	33 1f       	adc	r19, r19
    53e0:	82 0f       	add	r24, r18
    53e2:	93 1f       	adc	r25, r19
    53e4:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <ADC_get_value>
	if(cntSamples>=_nSamples){
    53e8:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    53ec:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    53f0:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <_nSamples>
    53f4:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <_nSamples+0x1>
    53f8:	28 17       	cp	r18, r24
    53fa:	39 07       	cpc	r19, r25
    53fc:	10 f0       	brcs	.+4      	; 0x5402 <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    53fe:	0e 94 9e 34 	call	0x693c	; 0x693c <TC0_HAL_stop>
    5402:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00006850 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    6850:	0e 94 7e 34 	call	0x68fc	; 0x68fc <TC0_HAL_start>
	vect_ADC_do_sample();
    6854:	0e 94 df 29 	call	0x53be	; 0x53be <vect_ADC_do_sample>
    6858:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

000061e8 <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    61e8:	80 93 a0 0f 	sts	0x0FA0, r24	; 0x800fa0 <_powerUpTime>
	cntPowerUpTime=0;
    61ec:	10 92 9f 0f 	sts	0x0F9F, r1	; 0x800f9f <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    61f0:	81 e0       	ldi	r24, 0x01	; 1
    61f2:	0e 94 56 32 	call	0x64ac	; 0x64ac <PM_HAL_meth_power>
	
	//Setup timer
	TC0_HAL_init(ADC_HEAT_TIME_INTERVAL, &vect_ADC_heat_timeout);
    61f6:	65 ee       	ldi	r22, 0xE5	; 229
    61f8:	71 e3       	ldi	r23, 0x31	; 49
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	0e 94 94 30 	call	0x6128	; 0x6128 <TC0_HAL_init>
	TC0_HAL_start();
    6200:	0e 94 7e 34 	call	0x68fc	; 0x68fc <TC0_HAL_start>
    6204:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

000068b4 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    68b4:	80 e0       	ldi	r24, 0x00	; 0
    68b6:	0e 94 56 32 	call	0x64ac	; 0x64ac <PM_HAL_meth_power>
    68ba:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006586 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6586:	20 91 9f 0f 	lds	r18, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    658a:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	29 17       	cp	r18, r25
    6592:	08 f4       	brcc	.+2      	; 0x6596 <ADC_meth_sens_ready+0x10>
    6594:	80 e0       	ldi	r24, 0x00	; 0
}
    6596:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

000055e4 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    55e4:	ef 92       	push	r14
    55e6:	ff 92       	push	r15
    55e8:	0f 93       	push	r16
    55ea:	1f 93       	push	r17
	Vc=Vcc;
    55ec:	60 93 67 0f 	sts	0x0F67, r22	; 0x800f67 <Vc>
    55f0:	70 93 68 0f 	sts	0x0F68, r23	; 0x800f68 <Vc+0x1>
    55f4:	80 93 69 0f 	sts	0x0F69, r24	; 0x800f69 <Vc+0x2>
    55f8:	90 93 6a 0f 	sts	0x0F6A, r25	; 0x800f6a <Vc+0x3>
	RRL=Rrl;
    55fc:	20 93 63 0f 	sts	0x0F63, r18	; 0x800f63 <RRL>
    5600:	30 93 64 0f 	sts	0x0F64, r19	; 0x800f64 <RRL+0x1>
    5604:	40 93 65 0f 	sts	0x0F65, r20	; 0x800f65 <RRL+0x2>
    5608:	50 93 66 0f 	sts	0x0F66, r21	; 0x800f66 <RRL+0x3>
	PPM_factor=PPMfactor;
    560c:	e0 92 5f 0f 	sts	0x0F5F, r14	; 0x800f5f <PPM_factor>
    5610:	f0 92 60 0f 	sts	0x0F60, r15	; 0x800f60 <PPM_factor+0x1>
    5614:	00 93 61 0f 	sts	0x0F61, r16	; 0x800f61 <PPM_factor+0x2>
    5618:	10 93 62 0f 	sts	0x0F62, r17	; 0x800f62 <PPM_factor+0x3>
}
    561c:	1f 91       	pop	r17
    561e:	0f 91       	pop	r16
    5620:	ff 90       	pop	r15
    5622:	ef 90       	pop	r14
    5624:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

0000642a <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    642a:	60 e4       	ldi	r22, 0x40	; 64
    642c:	70 e0       	ldi	r23, 0x00	; 0
    642e:	80 e8       	ldi	r24, 0x80	; 128
    6430:	0e 94 e7 32 	call	0x65ce	; 0x65ce <eeprom_read_byte>
    6434:	91 e0       	ldi	r25, 0x01	; 1
    6436:	81 11       	cpse	r24, r1
    6438:	01 c0       	rjmp	.+2      	; 0x643c <EM_has_deveui+0x12>
    643a:	90 e0       	ldi	r25, 0x00	; 0
}
    643c:	89 2f       	mov	r24, r25
    643e:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00006440 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    6440:	61 e4       	ldi	r22, 0x41	; 65
    6442:	70 e0       	ldi	r23, 0x00	; 0
    6444:	80 e8       	ldi	r24, 0x80	; 128
    6446:	0e 94 e7 32 	call	0x65ce	; 0x65ce <eeprom_read_byte>
    644a:	91 e0       	ldi	r25, 0x01	; 1
    644c:	81 11       	cpse	r24, r1
    644e:	01 c0       	rjmp	.+2      	; 0x6452 <EM_has_appeui+0x12>
    6450:	90 e0       	ldi	r25, 0x00	; 0
}
    6452:	89 2f       	mov	r24, r25
    6454:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00006456 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    6456:	62 e4       	ldi	r22, 0x42	; 66
    6458:	70 e0       	ldi	r23, 0x00	; 0
    645a:	80 e8       	ldi	r24, 0x80	; 128
    645c:	0e 94 e7 32 	call	0x65ce	; 0x65ce <eeprom_read_byte>
    6460:	91 e0       	ldi	r25, 0x01	; 1
    6462:	81 11       	cpse	r24, r1
    6464:	01 c0       	rjmp	.+2      	; 0x6468 <EM_has_appkey+0x12>
    6466:	90 e0       	ldi	r25, 0x00	; 0
}
    6468:	89 2f       	mov	r24, r25
    646a:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000058c8 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    58c8:	cf 92       	push	r12
    58ca:	df 92       	push	r13
    58cc:	ef 92       	push	r14
    58ce:	6b 01       	movw	r12, r22
    58d0:	e8 2e       	mov	r14, r24
    58d2:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    58d6:	40 97       	sbiw	r24, 0x10	; 16
    58d8:	79 f4       	brne	.+30     	; 0x58f8 <EM_set_deveui+0x30>
    58da:	20 e1       	ldi	r18, 0x10	; 16
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	40 e0       	ldi	r20, 0x00	; 0
    58e0:	50 e0       	ldi	r21, 0x00	; 0
    58e2:	8e 2d       	mov	r24, r14
    58e4:	b6 01       	movw	r22, r12
    58e6:	0e 94 8d 2a 	call	0x551a	; 0x551a <eeprom_update_block>
    58ea:	61 e0       	ldi	r22, 0x01	; 1
    58ec:	80 e4       	ldi	r24, 0x40	; 64
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	01 c0       	rjmp	.+2      	; 0x58fa <EM_set_deveui+0x32>
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	ef 90       	pop	r14
    58fc:	df 90       	pop	r13
    58fe:	cf 90       	pop	r12
    5900:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00005cc2 <EM_get_deveui>:
    5cc2:	0f 93       	push	r16
    5cc4:	1f 93       	push	r17
    5cc6:	cf 93       	push	r28
    5cc8:	8c 01       	movw	r16, r24
    5cca:	0e 94 15 32 	call	0x642a	; 0x642a <EM_has_deveui>
    5cce:	c8 2f       	mov	r28, r24
    5cd0:	88 23       	and	r24, r24
    5cd2:	51 f0       	breq	.+20     	; 0x5ce8 <EM_get_deveui+0x26>
    5cd4:	20 e1       	ldi	r18, 0x10	; 16
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	40 e0       	ldi	r20, 0x00	; 0
    5cda:	50 e0       	ldi	r21, 0x00	; 0
    5cdc:	60 e0       	ldi	r22, 0x00	; 0
    5cde:	c8 01       	movw	r24, r16
    5ce0:	0e 94 0a 30 	call	0x6014	; 0x6014 <eeprom_read_block>
    5ce4:	f8 01       	movw	r30, r16
    5ce6:	10 8a       	std	Z+16, r1	; 0x10
    5ce8:	8c 2f       	mov	r24, r28
    5cea:	cf 91       	pop	r28
    5cec:	1f 91       	pop	r17
    5cee:	0f 91       	pop	r16
    5cf0:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00005902 <EM_set_appeui>:
    5902:	cf 92       	push	r12
    5904:	df 92       	push	r13
    5906:	ef 92       	push	r14
    5908:	6b 01       	movw	r12, r22
    590a:	e8 2e       	mov	r14, r24
    590c:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    5910:	40 97       	sbiw	r24, 0x10	; 16
    5912:	79 f4       	brne	.+30     	; 0x5932 <EM_set_appeui+0x30>
    5914:	20 e1       	ldi	r18, 0x10	; 16
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	40 e1       	ldi	r20, 0x10	; 16
    591a:	50 e0       	ldi	r21, 0x00	; 0
    591c:	8e 2d       	mov	r24, r14
    591e:	b6 01       	movw	r22, r12
    5920:	0e 94 8d 2a 	call	0x551a	; 0x551a <eeprom_update_block>
    5924:	61 e0       	ldi	r22, 0x01	; 1
    5926:	81 e4       	ldi	r24, 0x41	; 65
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    592e:	81 e0       	ldi	r24, 0x01	; 1
    5930:	01 c0       	rjmp	.+2      	; 0x5934 <EM_set_appeui+0x32>
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	ef 90       	pop	r14
    5936:	df 90       	pop	r13
    5938:	cf 90       	pop	r12
    593a:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00005cf2 <EM_get_appeui>:
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
    5cf8:	8c 01       	movw	r16, r24
    5cfa:	0e 94 20 32 	call	0x6440	; 0x6440 <EM_has_appeui>
    5cfe:	c8 2f       	mov	r28, r24
    5d00:	88 23       	and	r24, r24
    5d02:	51 f0       	breq	.+20     	; 0x5d18 <EM_get_appeui+0x26>
    5d04:	20 e1       	ldi	r18, 0x10	; 16
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	40 e1       	ldi	r20, 0x10	; 16
    5d0a:	50 e0       	ldi	r21, 0x00	; 0
    5d0c:	60 e0       	ldi	r22, 0x00	; 0
    5d0e:	c8 01       	movw	r24, r16
    5d10:	0e 94 0a 30 	call	0x6014	; 0x6014 <eeprom_read_block>
    5d14:	f8 01       	movw	r30, r16
    5d16:	10 8a       	std	Z+16, r1	; 0x10
    5d18:	8c 2f       	mov	r24, r28
    5d1a:	cf 91       	pop	r28
    5d1c:	1f 91       	pop	r17
    5d1e:	0f 91       	pop	r16
    5d20:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

0000593c <EM_set_appkey>:
    593c:	cf 92       	push	r12
    593e:	df 92       	push	r13
    5940:	ef 92       	push	r14
    5942:	6b 01       	movw	r12, r22
    5944:	e8 2e       	mov	r14, r24
    5946:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    594a:	80 97       	sbiw	r24, 0x20	; 32
    594c:	79 f4       	brne	.+30     	; 0x596c <EM_set_appkey+0x30>
    594e:	20 e2       	ldi	r18, 0x20	; 32
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	40 e2       	ldi	r20, 0x20	; 32
    5954:	50 e0       	ldi	r21, 0x00	; 0
    5956:	8e 2d       	mov	r24, r14
    5958:	b6 01       	movw	r22, r12
    595a:	0e 94 8d 2a 	call	0x551a	; 0x551a <eeprom_update_block>
    595e:	61 e0       	ldi	r22, 0x01	; 1
    5960:	82 e4       	ldi	r24, 0x42	; 66
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	01 c0       	rjmp	.+2      	; 0x596e <EM_set_appkey+0x32>
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	ef 90       	pop	r14
    5970:	df 90       	pop	r13
    5972:	cf 90       	pop	r12
    5974:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00005d22 <EM_get_appkey>:
    5d22:	0f 93       	push	r16
    5d24:	1f 93       	push	r17
    5d26:	cf 93       	push	r28
    5d28:	8c 01       	movw	r16, r24
    5d2a:	0e 94 2b 32 	call	0x6456	; 0x6456 <EM_has_appkey>
    5d2e:	c8 2f       	mov	r28, r24
    5d30:	88 23       	and	r24, r24
    5d32:	51 f0       	breq	.+20     	; 0x5d48 <EM_get_appkey+0x26>
    5d34:	20 e2       	ldi	r18, 0x20	; 32
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	40 e2       	ldi	r20, 0x20	; 32
    5d3a:	50 e0       	ldi	r21, 0x00	; 0
    5d3c:	60 e0       	ldi	r22, 0x00	; 0
    5d3e:	c8 01       	movw	r24, r16
    5d40:	0e 94 0a 30 	call	0x6014	; 0x6014 <eeprom_read_block>
    5d44:	f8 01       	movw	r30, r16
    5d46:	10 a2       	std	Z+32, r1	; 0x20
    5d48:	8c 2f       	mov	r24, r28
    5d4a:	cf 91       	pop	r28
    5d4c:	1f 91       	pop	r17
    5d4e:	0f 91       	pop	r16
    5d50:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

0000669c <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    669c:	ab 01       	movw	r20, r22
    669e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    66a0:	83 e4       	ldi	r24, 0x43	; 67
    66a2:	90 e0       	ldi	r25, 0x00	; 0
    66a4:	0e 94 09 32 	call	0x6412	; 0x6412 <eeprom_update_dword>
    66a8:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00006206 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	ec 01       	movw	r28, r24
    620c:	63 e4       	ldi	r22, 0x43	; 67
    620e:	70 e0       	ldi	r23, 0x00	; 0
    6210:	80 e0       	ldi	r24, 0x00	; 0
    6212:	0e 94 9b 33 	call	0x6736	; 0x6736 <eeprom_read_dword>
    6216:	68 83       	st	Y, r22
    6218:	79 83       	std	Y+1, r23	; 0x01
    621a:	8a 83       	std	Y+2, r24	; 0x02
    621c:	9b 83       	std	Y+3, r25	; 0x03
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000066aa <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    66aa:	ab 01       	movw	r20, r22
    66ac:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    66ae:	87 e4       	ldi	r24, 0x47	; 71
    66b0:	90 e0       	ldi	r25, 0x00	; 0
    66b2:	0e 94 09 32 	call	0x6412	; 0x6412 <eeprom_update_dword>
    66b6:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00006224 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6224:	cf 93       	push	r28
    6226:	df 93       	push	r29
    6228:	ec 01       	movw	r28, r24
    622a:	67 e4       	ldi	r22, 0x47	; 71
    622c:	70 e0       	ldi	r23, 0x00	; 0
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	0e 94 9b 33 	call	0x6736	; 0x6736 <eeprom_read_dword>
    6234:	68 83       	st	Y, r22
    6236:	79 83       	std	Y+1, r23	; 0x01
    6238:	8a 83       	std	Y+2, r24	; 0x02
    623a:	9b 83       	std	Y+3, r25	; 0x03
    623c:	df 91       	pop	r29
    623e:	cf 91       	pop	r28
    6240:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000066b8 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    66b8:	ab 01       	movw	r20, r22
    66ba:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    66bc:	8b e4       	ldi	r24, 0x4B	; 75
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	0e 94 09 32 	call	0x6412	; 0x6412 <eeprom_update_dword>
    66c4:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00006242 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6242:	cf 93       	push	r28
    6244:	df 93       	push	r29
    6246:	ec 01       	movw	r28, r24
    6248:	6b e4       	ldi	r22, 0x4B	; 75
    624a:	70 e0       	ldi	r23, 0x00	; 0
    624c:	80 e0       	ldi	r24, 0x00	; 0
    624e:	0e 94 9b 33 	call	0x6736	; 0x6736 <eeprom_read_dword>
    6252:	68 83       	st	Y, r22
    6254:	79 83       	std	Y+1, r23	; 0x01
    6256:	8a 83       	std	Y+2, r24	; 0x02
    6258:	9b 83       	std	Y+3, r25	; 0x03
    625a:	df 91       	pop	r29
    625c:	cf 91       	pop	r28
    625e:	08 95       	ret

Disassembly of section .text.EM_set_collections:

000066c6 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    66c6:	24 2f       	mov	r18, r20
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	44 e6       	ldi	r20, 0x64	; 100
    66cc:	50 e0       	ldi	r21, 0x00	; 0
    66ce:	0e 94 8d 2a 	call	0x551a	; 0x551a <eeprom_update_block>
    66d2:	08 95       	ret

Disassembly of section .text.EM_get_collections:

000065f0 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    65f0:	26 2f       	mov	r18, r22
    65f2:	30 e0       	ldi	r19, 0x00	; 0
    65f4:	44 e6       	ldi	r20, 0x64	; 100
    65f6:	50 e0       	ldi	r21, 0x00	; 0
    65f8:	60 e0       	ldi	r22, 0x00	; 0
    65fa:	0e 94 0a 30 	call	0x6014	; 0x6014 <eeprom_read_block>
    65fe:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

0000676a <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    676a:	68 2f       	mov	r22, r24
    676c:	8f e4       	ldi	r24, 0x4F	; 79
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    6774:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00006776 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    6776:	6f e4       	ldi	r22, 0x4F	; 79
    6778:	70 e0       	ldi	r23, 0x00	; 0
    677a:	80 e0       	ldi	r24, 0x00	; 0
    677c:	0e 94 e7 32 	call	0x65ce	; 0x65ce <eeprom_read_byte>
}
    6780:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00006782 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    6782:	bc 01       	movw	r22, r24
    6784:	80 e5       	ldi	r24, 0x50	; 80
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	0e 94 09 34 	call	0x6812	; 0x6812 <eeprom_update_word>
    678c:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000678e <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    678e:	60 e5       	ldi	r22, 0x50	; 80
    6790:	70 e0       	ldi	r23, 0x00	; 0
    6792:	80 e0       	ldi	r24, 0x00	; 0
    6794:	0e 94 a2 33 	call	0x6744	; 0x6744 <eeprom_read_word>
}
    6798:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

0000679a <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    679a:	68 2f       	mov	r22, r24
    679c:	82 e5       	ldi	r24, 0x52	; 82
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    67a4:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000067a6 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    67a6:	62 e5       	ldi	r22, 0x52	; 82
    67a8:	70 e0       	ldi	r23, 0x00	; 0
    67aa:	80 e0       	ldi	r24, 0x00	; 0
    67ac:	0e 94 e7 32 	call	0x65ce	; 0x65ce <eeprom_read_byte>
}
    67b0:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

000067b2 <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    67b2:	68 2f       	mov	r22, r24
    67b4:	83 e6       	ldi	r24, 0x63	; 99
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    67bc:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

000067be <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    67be:	63 e6       	ldi	r22, 0x63	; 99
    67c0:	70 e0       	ldi	r23, 0x00	; 0
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	0e 94 e7 32 	call	0x65ce	; 0x65ce <eeprom_read_byte>
    67c8:	08 95       	ret

Disassembly of section .text.cb_blink:

00006908 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    6908:	0e 94 46 34 	call	0x688c	; 0x688c <PM_HAL_LED_toggle>
    690c:	08 95       	ret

Disassembly of section .text.blink:

00004fb2 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    4fb8:	c0 e0       	ldi	r28, 0x00	; 0
    4fba:	19 c0       	rjmp	.+50     	; 0x4fee <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    4fbc:	80 e0       	ldi	r24, 0x00	; 0
    4fbe:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    4fc2:	2f ef       	ldi	r18, 0xFF	; 255
    4fc4:	82 e5       	ldi	r24, 0x52	; 82
    4fc6:	97 e0       	ldi	r25, 0x07	; 7
    4fc8:	21 50       	subi	r18, 0x01	; 1
    4fca:	80 40       	sbci	r24, 0x00	; 0
    4fcc:	90 40       	sbci	r25, 0x00	; 0
    4fce:	e1 f7       	brne	.-8      	; 0x4fc8 <blink+0x16>
    4fd0:	00 c0       	rjmp	.+0      	; 0x4fd2 <blink+0x20>
    4fd2:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    4fd4:	81 e0       	ldi	r24, 0x01	; 1
    4fd6:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    4fda:	2f ef       	ldi	r18, 0xFF	; 255
    4fdc:	82 e5       	ldi	r24, 0x52	; 82
    4fde:	97 e0       	ldi	r25, 0x07	; 7
    4fe0:	21 50       	subi	r18, 0x01	; 1
    4fe2:	80 40       	sbci	r24, 0x00	; 0
    4fe4:	90 40       	sbci	r25, 0x00	; 0
    4fe6:	e1 f7       	brne	.-8      	; 0x4fe0 <blink+0x2e>
    4fe8:	00 c0       	rjmp	.+0      	; 0x4fea <blink+0x38>
    4fea:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    4fec:	cf 5f       	subi	r28, 0xFF	; 255
    4fee:	cd 17       	cp	r28, r29
    4ff0:	28 f3       	brcs	.-54     	; 0x4fbc <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
}
    4ff8:	df 91       	pop	r29
    4ffa:	cf 91       	pop	r28
    4ffc:	08 95       	ret

Disassembly of section .text.err_code:

00005976 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    5976:	cf 93       	push	r28
    5978:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    5980:	2f ef       	ldi	r18, 0xFF	; 255
    5982:	83 ed       	ldi	r24, 0xD3	; 211
    5984:	90 e3       	ldi	r25, 0x30	; 48
    5986:	21 50       	subi	r18, 0x01	; 1
    5988:	80 40       	sbci	r24, 0x00	; 0
    598a:	90 40       	sbci	r25, 0x00	; 0
    598c:	e1 f7       	brne	.-8      	; 0x5986 <err_code+0x10>
    598e:	00 c0       	rjmp	.+0      	; 0x5990 <err_code+0x1a>
    5990:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    5992:	8c 2f       	mov	r24, r28
    5994:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <blink>
    5998:	2f ef       	ldi	r18, 0xFF	; 255
    599a:	89 e6       	ldi	r24, 0x69	; 105
    599c:	98 e1       	ldi	r25, 0x18	; 24
    599e:	21 50       	subi	r18, 0x01	; 1
    59a0:	80 40       	sbci	r24, 0x00	; 0
    59a2:	90 40       	sbci	r25, 0x00	; 0
    59a4:	e1 f7       	brne	.-8      	; 0x599e <err_code+0x28>
    59a6:	00 c0       	rjmp	.+0      	; 0x59a8 <err_code+0x32>
    59a8:	00 00       	nop
	_delay_ms(1000);
}
    59aa:	cf 91       	pop	r28
    59ac:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

000066d4 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    66d4:	84 e8       	ldi	r24, 0x84	; 132
    66d6:	94 e3       	ldi	r25, 0x34	; 52
    66d8:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <TC2_HAL_subscribe>
    66dc:	80 93 a1 0f 	sts	0x0FA1, r24	; 0x800fa1 <cbPointer>
    66e0:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00006600 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    6600:	80 91 a1 0f 	lds	r24, 0x0FA1	; 0x800fa1 <cbPointer>
    6604:	0e 94 2a 2c 	call	0x5854	; 0x5854 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6608:	80 e0       	ldi	r24, 0x00	; 0
    660a:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    660e:	08 95       	ret

Disassembly of section .text.LED_join_success:

00005668 <LED_join_success>:
}

void LED_join_success(){
    5668:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    566a:	c0 e0       	ldi	r28, 0x00	; 0
    566c:	19 c0       	rjmp	.+50     	; 0x56a0 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    5674:	2f ef       	ldi	r18, 0xFF	; 255
    5676:	80 e7       	ldi	r24, 0x70	; 112
    5678:	92 e0       	ldi	r25, 0x02	; 2
    567a:	21 50       	subi	r18, 0x01	; 1
    567c:	80 40       	sbci	r24, 0x00	; 0
    567e:	90 40       	sbci	r25, 0x00	; 0
    5680:	e1 f7       	brne	.-8      	; 0x567a <LED_join_success+0x12>
    5682:	00 c0       	rjmp	.+0      	; 0x5684 <LED_join_success+0x1c>
    5684:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    5686:	80 e0       	ldi	r24, 0x00	; 0
    5688:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
    568c:	2f ef       	ldi	r18, 0xFF	; 255
    568e:	80 e7       	ldi	r24, 0x70	; 112
    5690:	92 e0       	ldi	r25, 0x02	; 2
    5692:	21 50       	subi	r18, 0x01	; 1
    5694:	80 40       	sbci	r24, 0x00	; 0
    5696:	90 40       	sbci	r25, 0x00	; 0
    5698:	e1 f7       	brne	.-8      	; 0x5692 <LED_join_success+0x2a>
    569a:	00 c0       	rjmp	.+0      	; 0x569c <LED_join_success+0x34>
    569c:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    569e:	cf 5f       	subi	r28, 0xFF	; 255
    56a0:	ca 30       	cpi	r28, 0x0A	; 10
    56a2:	28 f3       	brcs	.-54     	; 0x566e <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    56a4:	cf 91       	pop	r28
    56a6:	08 95       	ret

Disassembly of section .text.LED_join_denied:

000068bc <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    68bc:	83 e0       	ldi	r24, 0x03	; 3
    68be:	0e 94 bb 2c 	call	0x5976	; 0x5976 <err_code>
    68c2:	08 95       	ret

Disassembly of section .text.LED_conf_err:

000068c4 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    68c4:	85 e0       	ldi	r24, 0x05	; 5
    68c6:	0e 94 bb 2c 	call	0x5976	; 0x5976 <err_code>
    68ca:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000068cc <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    68cc:	87 e0       	ldi	r24, 0x07	; 7
    68ce:	0e 94 bb 2c 	call	0x5976	; 0x5976 <err_code>
    68d2:	08 95       	ret

Disassembly of section .text.parse_err:

00004b38 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    4b38:	cf 92       	push	r12
    4b3a:	df 92       	push	r13
    4b3c:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    4b3e:	6c 01       	movw	r12, r24
    4b40:	20 e8       	ldi	r18, 0x80	; 128
    4b42:	e2 2e       	mov	r14, r18
    4b44:	24 e1       	ldi	r18, 0x14	; 20
    4b46:	38 e0       	ldi	r19, 0x08	; 8
    4b48:	40 e0       	ldi	r20, 0x00	; 0
    4b4a:	8e 2d       	mov	r24, r14
    4b4c:	b6 01       	movw	r22, r12
    4b4e:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    4b52:	89 2b       	or	r24, r25
    4b54:	a1 f0       	breq	.+40     	; 0x4b7e <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    4b56:	2f e1       	ldi	r18, 0x1F	; 31
    4b58:	38 e0       	ldi	r19, 0x08	; 8
    4b5a:	40 e0       	ldi	r20, 0x00	; 0
    4b5c:	8e 2d       	mov	r24, r14
    4b5e:	b6 01       	movw	r22, r12
    4b60:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    4b64:	89 2b       	or	r24, r25
    4b66:	69 f0       	breq	.+26     	; 0x4b82 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    4b68:	26 e2       	ldi	r18, 0x26	; 38
    4b6a:	38 e0       	ldi	r19, 0x08	; 8
    4b6c:	40 e0       	ldi	r20, 0x00	; 0
    4b6e:	8e 2d       	mov	r24, r14
    4b70:	b6 01       	movw	r22, r12
    4b72:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    4b76:	89 2b       	or	r24, r25
    4b78:	31 f4       	brne	.+12     	; 0x4b86 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    4b7a:	83 e0       	ldi	r24, 0x03	; 3
    4b7c:	05 c0       	rjmp	.+10     	; 0x4b88 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    4b7e:	82 e0       	ldi	r24, 0x02	; 2
    4b80:	03 c0       	rjmp	.+6      	; 0x4b88 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    4b82:	82 e0       	ldi	r24, 0x02	; 2
    4b84:	01 c0       	rjmp	.+2      	; 0x4b88 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    4b86:	81 e0       	ldi	r24, 0x01	; 1
}
    4b88:	ef 90       	pop	r14
    4b8a:	df 90       	pop	r13
    4b8c:	cf 90       	pop	r12
    4b8e:	08 95       	ret

Disassembly of section .text.JN_join_network:

0000166c <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	28 97       	sbiw	r28, 0x08	; 8
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	5c 01       	movw	r10, r24
    1690:	6b 01       	movw	r12, r22
    1692:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    1694:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1696:	e1 2f       	mov	r30, r17
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	ed 30       	cpi	r30, 0x0D	; 13
    169c:	f1 05       	cpc	r31, r1
    169e:	d8 f7       	brcc	.-10     	; 0x1696 <JN_join_network+0x2a>
    16a0:	e2 5c       	subi	r30, 0xC2	; 194
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	0c 94 03 34 	jmp	0x6806	; 0x6806 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    16a8:	0e 94 4e 34 	call	0x689c	; 0x689c <rn2483_reset_active>
    16ac:	2f ef       	ldi	r18, 0xFF	; 255
    16ae:	89 e6       	ldi	r24, 0x69	; 105
    16b0:	98 e1       	ldi	r25, 0x18	; 24
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	80 40       	sbci	r24, 0x00	; 0
    16b6:	90 40       	sbci	r25, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <JN_join_network+0x46>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <JN_join_network+0x50>
    16bc:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    16be:	0e 94 52 34 	call	0x68a4	; 0x68a4 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    16c2:	4c e0       	ldi	r20, 0x0C	; 12
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
    16d2:	24 e3       	ldi	r18, 0x34	; 52
    16d4:	38 e0       	ldi	r19, 0x08	; 8
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	ce 01       	movw	r24, r28
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
    16e2:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16e4:	d8 cf       	rjmp	.-80     	; 0x1696 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    16e6:	4b e3       	ldi	r20, 0x3B	; 59
    16e8:	58 e0       	ldi	r21, 0x08	; 8
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	8e e5       	ldi	r24, 0x5E	; 94
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    16f4:	6e e5       	ldi	r22, 0x5E	; 94
    16f6:	72 e0       	ldi	r23, 0x02	; 2
    16f8:	80 e8       	ldi	r24, 0x80	; 128
    16fa:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    16fe:	4c e0       	ldi	r20, 0x0C	; 12
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	63 e0       	ldi	r22, 0x03	; 3
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	ce 01       	movw	r24, r28
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    170e:	29 e4       	ldi	r18, 0x49	; 73
    1710:	38 e0       	ldi	r19, 0x08	; 8
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    171e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1720:	ba cf       	rjmp	.-140    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1722:	b5 01       	movw	r22, r10
    1724:	8e e5       	ldi	r24, 0x5E	; 94
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 50 29 	call	0x52a0	; 0x52a0 <mac_set_deveui>
				attach_ending(lm_msg);
    172c:	8e e5       	ldi	r24, 0x5E	; 94
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1734:	6e e5       	ldi	r22, 0x5E	; 94
    1736:	72 e0       	ldi	r23, 0x02	; 2
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    173e:	4c e0       	ldi	r20, 0x0C	; 12
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	64 e0       	ldi	r22, 0x04	; 4
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    174e:	29 e4       	ldi	r18, 0x49	; 73
    1750:	38 e0       	ldi	r19, 0x08	; 8
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    175e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1760:	9a cf       	rjmp	.-204    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1762:	b7 01       	movw	r22, r14
    1764:	8e e5       	ldi	r24, 0x5E	; 94
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 98 29 	call	0x5330	; 0x5330 <mac_set_appkey>
				attach_ending(lm_msg);
    176c:	8e e5       	ldi	r24, 0x5E	; 94
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1774:	6e e5       	ldi	r22, 0x5E	; 94
    1776:	72 e0       	ldi	r23, 0x02	; 2
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    177e:	4c e0       	ldi	r20, 0x0C	; 12
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    178e:	29 e4       	ldi	r18, 0x49	; 73
    1790:	38 e0       	ldi	r19, 0x08	; 8
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    179e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17a0:	7a cf       	rjmp	.-268    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    17a2:	b6 01       	movw	r22, r12
    17a4:	8e e5       	ldi	r24, 0x5E	; 94
    17a6:	92 e0       	ldi	r25, 0x02	; 2
    17a8:	0e 94 74 29 	call	0x52e8	; 0x52e8 <mac_set_appeui>
				attach_ending(lm_msg);
    17ac:	8e e5       	ldi	r24, 0x5E	; 94
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17b4:	6e e5       	ldi	r22, 0x5E	; 94
    17b6:	72 e0       	ldi	r23, 0x02	; 2
    17b8:	80 e8       	ldi	r24, 0x80	; 128
    17ba:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    17be:	4c e0       	ldi	r20, 0x0C	; 12
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	66 e0       	ldi	r22, 0x06	; 6
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    17ce:	29 e4       	ldi	r18, 0x49	; 73
    17d0:	38 e0       	ldi	r19, 0x08	; 8
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    17de:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17e0:	5a cf       	rjmp	.-332    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	8e e5       	ldi	r24, 0x5E	; 94
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <mac_set_ADR>
				attach_ending(lm_msg);
    17ec:	8e e5       	ldi	r24, 0x5E	; 94
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17f4:	6e e5       	ldi	r22, 0x5E	; 94
    17f6:	72 e0       	ldi	r23, 0x02	; 2
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    17fe:	4c e0       	ldi	r20, 0x0C	; 12
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    180e:	29 e4       	ldi	r18, 0x49	; 73
    1810:	38 e0       	ldi	r19, 0x08	; 8
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    181e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1820:	3a cf       	rjmp	.-396    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1822:	4c e4       	ldi	r20, 0x4C	; 76
    1824:	58 e0       	ldi	r21, 0x08	; 8
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	8e e5       	ldi	r24, 0x5E	; 94
    182a:	92 e0       	ldi	r25, 0x02	; 2
    182c:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1830:	6e e5       	ldi	r22, 0x5E	; 94
    1832:	72 e0       	ldi	r23, 0x02	; 2
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    183a:	4c e0       	ldi	r20, 0x0C	; 12
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	68 e0       	ldi	r22, 0x08	; 8
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    184a:	29 e4       	ldi	r18, 0x49	; 73
    184c:	38 e0       	ldi	r19, 0x08	; 8
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    185a:	11 e0       	ldi	r17, 0x01	; 1
			break;
    185c:	1c cf       	rjmp	.-456    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    185e:	45 e5       	ldi	r20, 0x55	; 85
    1860:	58 e0       	ldi	r21, 0x08	; 8
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	8e e5       	ldi	r24, 0x5E	; 94
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    186c:	6e e5       	ldi	r22, 0x5E	; 94
    186e:	72 e0       	ldi	r23, 0x02	; 2
    1870:	80 e8       	ldi	r24, 0x80	; 128
    1872:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1876:	4a e0       	ldi	r20, 0x0A	; 10
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	69 e0       	ldi	r22, 0x09	; 9
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1886:	29 e4       	ldi	r18, 0x49	; 73
    1888:	38 e0       	ldi	r19, 0x08	; 8
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1896:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1898:	fe ce       	rjmp	.-516    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    189a:	4a e0       	ldi	r20, 0x0A	; 10
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	6b e0       	ldi	r22, 0x0B	; 11
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    18aa:	23 e6       	ldi	r18, 0x63	; 99
    18ac:	38 e0       	ldi	r19, 0x08	; 8
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    18ba:	11 e0       	ldi	r17, 0x01	; 1
			break;
    18bc:	ec ce       	rjmp	.-552    	; 0x1696 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    18be:	8e e5       	ldi	r24, 0x5E	; 94
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <parse_err>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    18c8:	0e 94 32 33 	call	0x6664	; 0x6664 <uart0_hal_message_ready>
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <JN_join_network+0x266>
    18d0:	e2 ce       	rjmp	.-572    	; 0x1696 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    18d2:	8e e5       	ldi	r24, 0x5E	; 94
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    18da:	6e e5       	ldi	r22, 0x5E	; 94
    18dc:	72 e0       	ldi	r23, 0x02	; 2
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 14 25 	call	0x4a28	; 0x4a28 <util_matchMessage>
    18e6:	18 2f       	mov	r17, r24
    18e8:	d6 ce       	rjmp	.-596    	; 0x1696 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    18f0:	28 96       	adiw	r28, 0x08	; 8
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000063e2 <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    63e2:	8b e6       	ldi	r24, 0x6B	; 107
    63e4:	91 e3       	ldi	r25, 0x31	; 49
    63e6:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <TC2_HAL_subscribe>
    63ea:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <subPointer>
	busy=true;
    63ee:	81 e0       	ldi	r24, 0x01	; 1
    63f0:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <busy>
	cnt=0;
    63f4:	10 92 a4 0f 	sts	0x0FA4, r1	; 0x800fa4 <cnt>
    63f8:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

000062d6 <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    62d6:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <cnt>
    62da:	8f 5f       	subi	r24, 0xFF	; 255
    62dc:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    62e0:	8f 31       	cpi	r24, 0x1F	; 31
    62e2:	30 f0       	brcs	.+12     	; 0x62f0 <cb_block_uplink+0x1a>
		busy=false;
    62e4:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
		TC2_HAL_cancel(subPointer);
    62e8:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    62ec:	0e 94 2a 2c 	call	0x5854	; 0x5854 <TC2_HAL_cancel>
    62f0:	08 95       	ret

Disassembly of section .text.LM_join_network:

0000690e <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    690e:	0e 94 36 0b 	call	0x166c	; 0x166c <JN_join_network>
}
    6912:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00005e9e <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    5e9e:	1f 93       	push	r17
    5ea0:	cf 93       	push	r28
    5ea2:	df 93       	push	r29
    5ea4:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    5ea6:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
    5eaa:	91 11       	cpse	r25, r1
    5eac:	0a c0       	rjmp	.+20     	; 0x5ec2 <LM_send_uplink+0x24>
    5eae:	16 2f       	mov	r17, r22
    5eb0:	e9 01       	movw	r28, r18
	set_block_uplink();
    5eb2:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    5eb6:	41 2f       	mov	r20, r17
    5eb8:	be 01       	movw	r22, r28
    5eba:	84 e6       	ldi	r24, 0x64	; 100
    5ebc:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <SU_send_uplink>
    5ec0:	01 c0       	rjmp	.+2      	; 0x5ec4 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    5ec2:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    5ec4:	df 91       	pop	r29
    5ec6:	cf 91       	pop	r28
    5ec8:	1f 91       	pop	r17
    5eca:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00006598 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    6598:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
	TC2_HAL_cancel(subPointer);
    659c:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    65a0:	0e 94 2a 2c 	call	0x5854	; 0x5854 <TC2_HAL_cancel>
	return SC_put_to_sleep();
    65a4:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <SC_put_to_sleep>
}
    65a8:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00006914 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    6914:	0e 94 79 23 	call	0x46f2	; 0x46f2 <SC_wake_up>
}
    6918:	08 95       	ret

Disassembly of section .text.LM_is_free:

0000685a <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    685a:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
}
    685e:	81 e0       	ldi	r24, 0x01	; 1
    6860:	89 27       	eor	r24, r25
    6862:	08 95       	ret

Disassembly of section .text.LM_reset_module:

0000691a <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    691a:	0e 94 02 2a 	call	0x5404	; 0x5404 <util_reset_module>
}
    691e:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00006920 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    6920:	0e 94 32 21 	call	0x4264	; 0x4264 <util_lora_forward_msg>
    6924:	08 95       	ret

Disassembly of section .text.LM_send_break:

00006926 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    6926:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <util_send_break>
    692a:	08 95       	ret

Disassembly of section .text.tohex:

000040ea <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    40ea:	6f 92       	push	r6
    40ec:	7f 92       	push	r7
    40ee:	8f 92       	push	r8
    40f0:	ef 92       	push	r14
    40f2:	ff 92       	push	r15
    40f4:	0f 93       	push	r16
    40f6:	1f 93       	push	r17
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	7c 01       	movw	r14, r24
    40fe:	3a 01       	movw	r6, r20
    4100:	86 2e       	mov	r8, r22
    4102:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    4104:	c0 e0       	ldi	r28, 0x00	; 0
    4106:	d0 e0       	ldi	r29, 0x00	; 0
    4108:	25 c0       	rjmp	.+74     	; 0x4154 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    410a:	a8 2d       	mov	r26, r8
    410c:	c3 01       	movw	r24, r6
    410e:	8c 0f       	add	r24, r28
    4110:	9d 1f       	adc	r25, r29
    4112:	a1 1d       	adc	r26, r1
    4114:	d7 fd       	sbrc	r29, 7
    4116:	aa 95       	dec	r26
    4118:	fc 01       	movw	r30, r24
    411a:	24 91       	lpm	r18, Z
    411c:	a7 fd       	sbrc	r26, 7
    411e:	20 81       	ld	r18, Z
    4120:	ce 01       	movw	r24, r28
    4122:	88 0f       	add	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	1f 92       	push	r1
    4128:	2f 93       	push	r18
    412a:	21 ea       	ldi	r18, 0xA1	; 161
    412c:	37 e0       	ldi	r19, 0x07	; 7
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	4f 93       	push	r20
    4132:	3f 93       	push	r19
    4134:	2f 93       	push	r18
    4136:	8e 0d       	add	r24, r14
    4138:	9f 1d       	adc	r25, r15
    413a:	9f 93       	push	r25
    413c:	8f 93       	push	r24
    413e:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    4142:	21 96       	adiw	r28, 0x01	; 1
    4144:	8d b7       	in	r24, 0x3d	; 61
    4146:	9e b7       	in	r25, 0x3e	; 62
    4148:	07 96       	adiw	r24, 0x07	; 7
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	9e bf       	out	0x3e, r25	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	8d bf       	out	0x3d, r24	; 61
    4154:	c0 17       	cp	r28, r16
    4156:	d1 07       	cpc	r29, r17
    4158:	c4 f2       	brlt	.-80     	; 0x410a <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	1f 91       	pop	r17
    4160:	0f 91       	pop	r16
    4162:	ff 90       	pop	r15
    4164:	ef 90       	pop	r14
    4166:	8f 90       	pop	r8
    4168:	7f 90       	pop	r7
    416a:	6f 90       	pop	r6
    416c:	08 95       	ret

Disassembly of section .text.attach_ending:

000062f2 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    62f2:	fc 01       	movw	r30, r24
    62f4:	01 90       	ld	r0, Z+
    62f6:	00 20       	and	r0, r0
    62f8:	e9 f7       	brne	.-6      	; 0x62f4 <attach_ending+0x2>
    62fa:	cf 01       	movw	r24, r30
    62fc:	23 e0       	ldi	r18, 0x03	; 3
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	46 ea       	ldi	r20, 0xA6	; 166
    6302:	57 e0       	ldi	r21, 0x07	; 7
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	01 97       	sbiw	r24, 0x01	; 1
    6308:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
    630c:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00005bfc <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    5bfc:	cf 93       	push	r28
    5bfe:	df 93       	push	r29
    5c00:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    5c02:	0e 94 4e 31 	call	0x629c	; 0x629c <strcpy>
	strcat(buffer, CMD_END_CHARS);
    5c06:	fe 01       	movw	r30, r28
    5c08:	01 90       	ld	r0, Z+
    5c0a:	00 20       	and	r0, r0
    5c0c:	e9 f7       	brne	.-6      	; 0x5c08 <cmd_with_ending+0xc>
    5c0e:	cf 01       	movw	r24, r30
    5c10:	23 e0       	ldi	r18, 0x03	; 3
    5c12:	30 e0       	ldi	r19, 0x00	; 0
    5c14:	46 ea       	ldi	r20, 0xA6	; 166
    5c16:	57 e0       	ldi	r21, 0x07	; 7
    5c18:	60 e0       	ldi	r22, 0x00	; 0
    5c1a:	01 97       	sbiw	r24, 0x01	; 1
    5c1c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return strlen(buffer);
    5c20:	be 01       	movw	r22, r28
    5c22:	80 e8       	ldi	r24, 0x80	; 128
    5c24:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
}
    5c28:	df 91       	pop	r29
    5c2a:	cf 91       	pop	r28
    5c2c:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000496c <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    496c:	cf 93       	push	r28
    496e:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    4970:	44 36       	cpi	r20, 0x64	; 100
    4972:	51 05       	cpc	r21, r1
    4974:	61 05       	cpc	r22, r1
    4976:	71 05       	cpc	r23, r1
    4978:	18 f1       	brcs	.+70     	; 0x49c0 <sys_sleep_cmd+0x54>
    497a:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    497c:	7f 93       	push	r23
    497e:	6f 93       	push	r22
    4980:	5f 93       	push	r21
    4982:	4f 93       	push	r20
    4984:	89 ea       	ldi	r24, 0xA9	; 169
    4986:	97 e0       	ldi	r25, 0x07	; 7
    4988:	a0 e0       	ldi	r26, 0x00	; 0
    498a:	af 93       	push	r26
    498c:	9f 93       	push	r25
    498e:	8f 93       	push	r24
    4990:	83 eb       	ldi	r24, 0xB3	; 179
    4992:	97 e0       	ldi	r25, 0x07	; 7
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	af 93       	push	r26
    4998:	9f 93       	push	r25
    499a:	8f 93       	push	r24
    499c:	df 93       	push	r29
    499e:	cf 93       	push	r28
    49a0:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    return strlen(buffer);
    49a4:	be 01       	movw	r22, r28
    49a6:	80 e8       	ldi	r24, 0x80	; 128
    49a8:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    49ac:	2d b7       	in	r18, 0x3d	; 61
    49ae:	3e b7       	in	r19, 0x3e	; 62
    49b0:	24 5f       	subi	r18, 0xF4	; 244
    49b2:	3f 4f       	sbci	r19, 0xFF	; 255
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	3e bf       	out	0x3e, r19	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	2d bf       	out	0x3d, r18	; 61
    49be:	02 c0       	rjmp	.+4      	; 0x49c4 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    49c0:	8f ef       	ldi	r24, 0xFF	; 255
    49c2:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    49c4:	df 91       	pop	r29
    49c6:	cf 91       	pop	r28
    49c8:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00004eca <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    4ed4:	2f 93       	push	r18
    4ed6:	1f 93       	push	r17
    4ed8:	0f 93       	push	r16
    4eda:	6f 93       	push	r22
    4edc:	5f 93       	push	r21
    4ede:	4f 93       	push	r20
    4ee0:	8a eb       	ldi	r24, 0xBA	; 186
    4ee2:	97 e0       	ldi	r25, 0x07	; 7
    4ee4:	a0 e0       	ldi	r26, 0x00	; 0
    4ee6:	af 93       	push	r26
    4ee8:	9f 93       	push	r25
    4eea:	8f 93       	push	r24
    4eec:	df 93       	push	r29
    4eee:	cf 93       	push	r28
    4ef0:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    return strlen(buffer);
    4ef4:	be 01       	movw	r22, r28
    4ef6:	80 e8       	ldi	r24, 0x80	; 128
    4ef8:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    4efc:	2d b7       	in	r18, 0x3d	; 61
    4efe:	3e b7       	in	r19, 0x3e	; 62
    4f00:	25 5f       	subi	r18, 0xF5	; 245
    4f02:	3f 4f       	sbci	r19, 0xFF	; 255
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	3e bf       	out	0x3e, r19	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	2d bf       	out	0x3d, r18	; 61
}
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

000052a0 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    52a0:	cf 92       	push	r12
    52a2:	df 92       	push	r13
    52a4:	ef 92       	push	r14
    52a6:	0f 93       	push	r16
    52a8:	1f 93       	push	r17
    52aa:	cf 93       	push	r28
    52ac:	df 93       	push	r29
    52ae:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    52b0:	6b 01       	movw	r12, r22
    52b2:	80 e8       	ldi	r24, 0x80	; 128
    52b4:	e8 2e       	mov	r14, r24
    52b6:	8e 2d       	mov	r24, r14
    52b8:	b6 01       	movw	r22, r12
    52ba:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    52be:	40 97       	sbiw	r24, 0x10	; 16
    52c0:	49 f4       	brne	.+18     	; 0x52d4 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    52c2:	2e 2d       	mov	r18, r14
    52c4:	86 01       	movw	r16, r12
    52c6:	40 ec       	ldi	r20, 0xC0	; 192
    52c8:	57 e0       	ldi	r21, 0x07	; 7
    52ca:	60 e0       	ldi	r22, 0x00	; 0
    52cc:	ce 01       	movw	r24, r28
    52ce:	0e 94 65 27 	call	0x4eca	; 0x4eca <mac_set_parameter>
    52d2:	02 c0       	rjmp	.+4      	; 0x52d8 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    52d4:	8f ef       	ldi	r24, 0xFF	; 255
    52d6:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	1f 91       	pop	r17
    52de:	0f 91       	pop	r16
    52e0:	ef 90       	pop	r14
    52e2:	df 90       	pop	r13
    52e4:	cf 90       	pop	r12
    52e6:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

000052e8 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    52e8:	cf 92       	push	r12
    52ea:	df 92       	push	r13
    52ec:	ef 92       	push	r14
    52ee:	0f 93       	push	r16
    52f0:	1f 93       	push	r17
    52f2:	cf 93       	push	r28
    52f4:	df 93       	push	r29
    52f6:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    52f8:	6b 01       	movw	r12, r22
    52fa:	80 e8       	ldi	r24, 0x80	; 128
    52fc:	e8 2e       	mov	r14, r24
    52fe:	8e 2d       	mov	r24, r14
    5300:	b6 01       	movw	r22, r12
    5302:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    5306:	40 97       	sbiw	r24, 0x10	; 16
    5308:	49 f4       	brne	.+18     	; 0x531c <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    530a:	2e 2d       	mov	r18, r14
    530c:	86 01       	movw	r16, r12
    530e:	4f ec       	ldi	r20, 0xCF	; 207
    5310:	57 e0       	ldi	r21, 0x07	; 7
    5312:	60 e0       	ldi	r22, 0x00	; 0
    5314:	ce 01       	movw	r24, r28
    5316:	0e 94 65 27 	call	0x4eca	; 0x4eca <mac_set_parameter>
    531a:	02 c0       	rjmp	.+4      	; 0x5320 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	ef 90       	pop	r14
    532a:	df 90       	pop	r13
    532c:	cf 90       	pop	r12
    532e:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00005330 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    5330:	cf 92       	push	r12
    5332:	df 92       	push	r13
    5334:	ef 92       	push	r14
    5336:	0f 93       	push	r16
    5338:	1f 93       	push	r17
    533a:	cf 93       	push	r28
    533c:	df 93       	push	r29
    533e:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    5340:	6b 01       	movw	r12, r22
    5342:	80 e8       	ldi	r24, 0x80	; 128
    5344:	e8 2e       	mov	r14, r24
    5346:	8e 2d       	mov	r24, r14
    5348:	b6 01       	movw	r22, r12
    534a:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    534e:	80 97       	sbiw	r24, 0x20	; 32
    5350:	49 f4       	brne	.+18     	; 0x5364 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    5352:	2e 2d       	mov	r18, r14
    5354:	86 01       	movw	r16, r12
    5356:	4e ed       	ldi	r20, 0xDE	; 222
    5358:	57 e0       	ldi	r21, 0x07	; 7
    535a:	60 e0       	ldi	r22, 0x00	; 0
    535c:	ce 01       	movw	r24, r28
    535e:	0e 94 65 27 	call	0x4eca	; 0x4eca <mac_set_parameter>
    5362:	02 c0       	rjmp	.+4      	; 0x5368 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    5364:	8f ef       	ldi	r24, 0xFF	; 255
    5366:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5368:	df 91       	pop	r29
    536a:	cf 91       	pop	r28
    536c:	1f 91       	pop	r17
    536e:	0f 91       	pop	r16
    5370:	ef 90       	pop	r14
    5372:	df 90       	pop	r13
    5374:	cf 90       	pop	r12
    5376:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00005d52 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    5d52:	0f 93       	push	r16
    5d54:	1f 93       	push	r17
	if(state==0){
    5d56:	61 11       	cpse	r22, r1
    5d58:	09 c0       	rjmp	.+18     	; 0x5d6c <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5d5a:	0d ee       	ldi	r16, 0xED	; 237
    5d5c:	17 e0       	ldi	r17, 0x07	; 7
    5d5e:	20 e0       	ldi	r18, 0x00	; 0
    5d60:	41 ef       	ldi	r20, 0xF1	; 241
    5d62:	57 e0       	ldi	r21, 0x07	; 7
    5d64:	60 e0       	ldi	r22, 0x00	; 0
    5d66:	0e 94 65 27 	call	0x4eca	; 0x4eca <mac_set_parameter>
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5d6c:	0d ef       	ldi	r16, 0xFD	; 253
    5d6e:	17 e0       	ldi	r17, 0x07	; 7
    5d70:	20 e0       	ldi	r18, 0x00	; 0
    5d72:	41 ef       	ldi	r20, 0xF1	; 241
    5d74:	57 e0       	ldi	r21, 0x07	; 7
    5d76:	60 e0       	ldi	r22, 0x00	; 0
    5d78:	0e 94 65 27 	call	0x4eca	; 0x4eca <mac_set_parameter>
	}
}
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00003918 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    3918:	df 92       	push	r13
    391a:	ef 92       	push	r14
    391c:	ff 92       	push	r15
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	c7 56       	subi	r28, 0x67	; 103
    392c:	d1 09       	sbc	r29, r1
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	de bf       	out	0x3e, r29	; 62
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	cd bf       	out	0x3d, r28	; 61
    3938:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    393a:	9f ef       	ldi	r25, 0xFF	; 255
    393c:	96 0f       	add	r25, r22
    393e:	9f 3d       	cpi	r25, 0xDF	; 223
    3940:	68 f5       	brcc	.+90     	; 0x399c <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    3942:	9f ef       	ldi	r25, 0xFF	; 255
    3944:	92 0f       	add	r25, r18
    3946:	93 33       	cpi	r25, 0x33	; 51
    3948:	60 f5       	brcc	.+88     	; 0x39a2 <mac_tx_confirmed+0x8a>
    394a:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	60 e8       	ldi	r22, 0x80	; 128
    3950:	ce 01       	movw	r24, r28
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	7c 01       	movw	r14, r24
    3956:	0e 94 75 20 	call	0x40ea	; 0x40ea <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    395a:	c7 01       	movw	r24, r14
    395c:	a0 e8       	ldi	r26, 0x80	; 128
    395e:	af 93       	push	r26
    3960:	9f 93       	push	r25
    3962:	ef 92       	push	r14
    3964:	1f 92       	push	r1
    3966:	df 92       	push	r13
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	98 e0       	ldi	r25, 0x08	; 8
    396c:	a0 e0       	ldi	r26, 0x00	; 0
    396e:	af 93       	push	r26
    3970:	9f 93       	push	r25
    3972:	8f 93       	push	r24
    3974:	8b e0       	ldi	r24, 0x0B	; 11
    3976:	98 e0       	ldi	r25, 0x08	; 8
    3978:	a0 e0       	ldi	r26, 0x00	; 0
    397a:	af 93       	push	r26
    397c:	9f 93       	push	r25
    397e:	8f 93       	push	r24
    3980:	1f 93       	push	r17
    3982:	0f 93       	push	r16
    3984:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    
	
    return strlen(buffer);
    3988:	b8 01       	movw	r22, r16
    398a:	80 e8       	ldi	r24, 0x80	; 128
    398c:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	05 c0       	rjmp	.+10     	; 0x39a6 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    399c:	8f ef       	ldi	r24, 0xFF	; 255
    399e:	9f ef       	ldi	r25, 0xFF	; 255
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    39a2:	8f ef       	ldi	r24, 0xFF	; 255
    39a4:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    39a6:	c9 59       	subi	r28, 0x99	; 153
    39a8:	df 4f       	sbci	r29, 0xFF	; 255
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	de bf       	out	0x3e, r29	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	cd bf       	out	0x3d, r28	; 61
    39b4:	df 91       	pop	r29
    39b6:	cf 91       	pop	r28
    39b8:	1f 91       	pop	r17
    39ba:	0f 91       	pop	r16
    39bc:	ff 90       	pop	r15
    39be:	ef 90       	pop	r14
    39c0:	df 90       	pop	r13
    39c2:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00004836 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	6b 01       	movw	r12, r22
    483e:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4840:	2c e6       	ldi	r18, 0x6C	; 108
    4842:	38 e0       	ldi	r19, 0x08	; 8
    4844:	40 e0       	ldi	r20, 0x00	; 0
    4846:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    484a:	89 2b       	or	r24, r25
    484c:	e9 f0       	breq	.+58     	; 0x4888 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    484e:	27 e7       	ldi	r18, 0x77	; 119
    4850:	38 e0       	ldi	r19, 0x08	; 8
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	8e 2d       	mov	r24, r14
    4856:	b6 01       	movw	r22, r12
    4858:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    485c:	89 2b       	or	r24, r25
    485e:	b1 f0       	breq	.+44     	; 0x488c <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4860:	2f e7       	ldi	r18, 0x7F	; 127
    4862:	38 e0       	ldi	r19, 0x08	; 8
    4864:	40 e0       	ldi	r20, 0x00	; 0
    4866:	8e 2d       	mov	r24, r14
    4868:	b6 01       	movw	r22, r12
    486a:	0e 94 07 29 	call	0x520e	; 0x520e <util_strbeginswith>
    486e:	81 11       	cpse	r24, r1
    4870:	0f c0       	rjmp	.+30     	; 0x4890 <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    4872:	26 e8       	ldi	r18, 0x86	; 134
    4874:	38 e0       	ldi	r19, 0x08	; 8
    4876:	40 e0       	ldi	r20, 0x00	; 0
    4878:	8e 2d       	mov	r24, r14
    487a:	b6 01       	movw	r22, r12
    487c:	0e 94 07 29 	call	0x520e	; 0x520e <util_strbeginswith>
    4880:	88 23       	and	r24, r24
    4882:	41 f0       	breq	.+16     	; 0x4894 <decode_tx_response+0x5e>
    4884:	85 e0       	ldi	r24, 0x05	; 5
    4886:	07 c0       	rjmp	.+14     	; 0x4896 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4888:	82 e0       	ldi	r24, 0x02	; 2
    488a:	05 c0       	rjmp	.+10     	; 0x4896 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    488c:	84 e0       	ldi	r24, 0x04	; 4
    488e:	03 c0       	rjmp	.+6      	; 0x4896 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	01 c0       	rjmp	.+2      	; 0x4896 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    4894:	81 e0       	ldi	r24, 0x01	; 1
}
    4896:	ef 90       	pop	r14
    4898:	df 90       	pop	r13
    489a:	cf 90       	pop	r12
    489c:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00002e7a <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	28 97       	sbiw	r28, 0x08	; 8
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	d8 2e       	mov	r13, r24
    2e9a:	7b 01       	movw	r14, r22
    2e9c:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    2e9e:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    2ea0:	12 30       	cpi	r17, 0x02	; 2
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <SU_send_uplink+0x2c>
    2ea4:	40 c0       	rjmp	.+128    	; 0x2f26 <SU_send_uplink+0xac>
    2ea6:	28 f4       	brcc	.+10     	; 0x2eb2 <SU_send_uplink+0x38>
    2ea8:	11 23       	and	r17, r17
    2eaa:	49 f0       	breq	.+18     	; 0x2ebe <SU_send_uplink+0x44>
    2eac:	11 30       	cpi	r17, 0x01	; 1
    2eae:	49 f1       	breq	.+82     	; 0x2f02 <SU_send_uplink+0x88>
    2eb0:	f7 cf       	rjmp	.-18     	; 0x2ea0 <SU_send_uplink+0x26>
    2eb2:	13 30       	cpi	r17, 0x03	; 3
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <SU_send_uplink+0x3e>
    2eb6:	4e c0       	rjmp	.+156    	; 0x2f54 <SU_send_uplink+0xda>
    2eb8:	14 30       	cpi	r17, 0x04	; 4
    2eba:	d9 f1       	breq	.+118    	; 0x2f32 <SU_send_uplink+0xb8>
    2ebc:	f1 cf       	rjmp	.-30     	; 0x2ea0 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    2ebe:	20 2f       	mov	r18, r16
    2ec0:	a7 01       	movw	r20, r14
    2ec2:	6d 2d       	mov	r22, r13
    2ec4:	8e e5       	ldi	r24, 0x5E	; 94
    2ec6:	92 e0       	ldi	r25, 0x02	; 2
    2ec8:	0e 94 8c 1c 	call	0x3918	; 0x3918 <mac_tx_confirmed>
				attach_ending(lm_msg);
    2ecc:	8e e5       	ldi	r24, 0x5E	; 94
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
				uart0_hal_send_string(lm_msg);
    2ed4:	6e e5       	ldi	r22, 0x5E	; 94
    2ed6:	72 e0       	ldi	r23, 0x02	; 2
    2ed8:	80 e8       	ldi	r24, 0x80	; 128
    2eda:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    2ede:	42 e0       	ldi	r20, 0x02	; 2
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    2eee:	27 e9       	ldi	r18, 0x97	; 151
    2ef0:	38 e0       	ldi	r19, 0x08	; 8
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    2efe:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2f00:	cf cf       	rjmp	.-98     	; 0x2ea0 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    2f02:	42 e0       	ldi	r20, 0x02	; 2
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	63 e0       	ldi	r22, 0x03	; 3
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    2f12:	2a e9       	ldi	r18, 0x9A	; 154
    2f14:	38 e0       	ldi	r19, 0x08	; 8
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	01 96       	adiw	r24, 0x01	; 1
    2f1e:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    2f22:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2f24:	bd cf       	rjmp	.-134    	; 0x2ea0 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    2f26:	6e e5       	ldi	r22, 0x5E	; 94
    2f28:	72 e0       	ldi	r23, 0x02	; 2
    2f2a:	80 e8       	ldi	r24, 0x80	; 128
    2f2c:	0e 94 1b 24 	call	0x4836	; 0x4836 <decode_tx_response>
    2f30:	12 c0       	rjmp	.+36     	; 0x2f56 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    2f32:	0e 94 32 33 	call	0x6664	; 0x6664 <uart0_hal_message_ready>
    2f36:	88 23       	and	r24, r24
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <SU_send_uplink+0xc2>
    2f3a:	b2 cf       	rjmp	.-156    	; 0x2ea0 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    2f3c:	8e e5       	ldi	r24, 0x5E	; 94
    2f3e:	92 e0       	ldi	r25, 0x02	; 2
    2f40:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    2f44:	6e e5       	ldi	r22, 0x5E	; 94
    2f46:	72 e0       	ldi	r23, 0x02	; 2
    2f48:	ce 01       	movw	r24, r28
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    2f4c:	0e 94 14 25 	call	0x4a28	; 0x4a28 <util_matchMessage>
    2f50:	18 2f       	mov	r17, r24
    2f52:	a6 cf       	rjmp	.-180    	; 0x2ea0 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    2f54:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    2f56:	28 96       	adiw	r28, 0x08	; 8
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	df 90       	pop	r13
    2f70:	08 95       	ret

Disassembly of section .text.cb_counter:

00006560 <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    6560:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    6564:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    6568:	01 96       	adiw	r24, 0x01	; 1
    656a:	90 93 86 0f 	sts	0x0F86, r25	; 0x800f86 <cnt+0x1>
    656e:	80 93 85 0f 	sts	0x0F85, r24	; 0x800f85 <cnt>
    6572:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

000059ae <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    59ae:	40 e0       	ldi	r20, 0x00	; 0
    59b0:	5c e5       	ldi	r21, 0x5C	; 92
    59b2:	66 e2       	ldi	r22, 0x26	; 38
    59b4:	75 e0       	ldi	r23, 0x05	; 5
    59b6:	8e e5       	ldi	r24, 0x5E	; 94
    59b8:	92 e0       	ldi	r25, 0x02	; 2
    59ba:	0e 94 b6 24 	call	0x496c	; 0x496c <sys_sleep_cmd>
	attach_ending(lm_msg);
    59be:	8e e5       	ldi	r24, 0x5E	; 94
    59c0:	92 e0       	ldi	r25, 0x02	; 2
    59c2:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
	uart0_hal_send_string(lm_msg);
    59c6:	6e e5       	ldi	r22, 0x5E	; 94
    59c8:	72 e0       	ldi	r23, 0x02	; 2
    59ca:	80 e8       	ldi	r24, 0x80	; 128
    59cc:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
    59d0:	2f ef       	ldi	r18, 0xFF	; 255
    59d2:	81 ee       	ldi	r24, 0xE1	; 225
    59d4:	94 e0       	ldi	r25, 0x04	; 4
    59d6:	21 50       	subi	r18, 0x01	; 1
    59d8:	80 40       	sbci	r24, 0x00	; 0
    59da:	90 40       	sbci	r25, 0x00	; 0
    59dc:	e1 f7       	brne	.-8      	; 0x59d6 <SC_put_to_sleep+0x28>
    59de:	00 c0       	rjmp	.+0      	; 0x59e0 <SC_put_to_sleep+0x32>
    59e0:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	08 95       	ret

Disassembly of section .text.SC_wake_up:

000046f2 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    46f2:	85 e5       	ldi	r24, 0x55	; 85
    46f4:	0e 94 bc 29 	call	0x5378	; 0x5378 <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    46f8:	10 92 86 0f 	sts	0x0F86, r1	; 0x800f86 <cnt+0x1>
    46fc:	10 92 85 0f 	sts	0x0F85, r1	; 0x800f85 <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    4700:	80 eb       	ldi	r24, 0xB0	; 176
    4702:	92 e3       	ldi	r25, 0x32	; 50
    4704:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <TC2_HAL_subscribe>
    4708:	80 93 a5 0f 	sts	0x0FA5, r24	; 0x800fa5 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    470c:	0e 94 32 33 	call	0x6664	; 0x6664 <uart0_hal_message_ready>
    4710:	81 11       	cpse	r24, r1
    4712:	06 c0       	rjmp	.+12     	; 0x4720 <SC_wake_up+0x2e>
    4714:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    4718:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    471c:	cc 97       	sbiw	r24, 0x3c	; 60
    471e:	b0 f3       	brcs	.-20     	; 0x470c <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    4720:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <eventPointer>
    4724:	0e 94 2a 2c 	call	0x5854	; 0x5854 <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    4728:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    472c:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    4730:	cc 97       	sbiw	r24, 0x3c	; 60
    4732:	20 f0       	brcs	.+8      	; 0x473c <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    4734:	0e 94 19 34 	call	0x6832	; 0x6832 <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    473c:	8e e5       	ldi	r24, 0x5E	; 94
    473e:	92 e0       	ldi	r25, 0x02	; 2
    4740:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    4744:	6e e5       	ldi	r22, 0x5E	; 94
    4746:	72 e0       	ldi	r23, 0x02	; 2
    4748:	80 e8       	ldi	r24, 0x80	; 128
    474a:	29 ec       	ldi	r18, 0xC9	; 201
    474c:	38 e0       	ldi	r19, 0x08	; 8
    474e:	40 e0       	ldi	r20, 0x00	; 0
    4750:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    4754:	89 2b       	or	r24, r25
    4756:	11 f4       	brne	.+4      	; 0x475c <SC_wake_up+0x6a>
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    475c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    475e:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

000067ca <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    67ca:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    67ce:	8f 5f       	subi	r24, 0xFF	; 255
    67d0:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <wd_cnt>
    67d4:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000067d6 <util_setPendingStates>:
char lm_msg[200];

static void cb_watchdog_counter();

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    67d6:	fc 01       	movw	r30, r24
    67d8:	71 83       	std	Z+1, r23	; 0x01
    67da:	60 83       	st	Z, r22
	sd->failure_state=failed;
    67dc:	53 83       	std	Z+3, r21	; 0x03
    67de:	42 83       	std	Z+2, r20	; 0x02
    67e0:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000067e2 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    67e2:	fc 01       	movw	r30, r24
    67e4:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    67e6:	25 83       	std	Z+5, r18	; 0x05
    67e8:	36 83       	std	Z+6, r19	; 0x06
    67ea:	47 83       	std	Z+7, r20	; 0x07
    67ec:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

0000520e <util_strbeginswith>:
		return sd->failure_state;
	}
}


bool util_strbeginswith(const char *s1, const char *s2){
    520e:	6f 92       	push	r6
    5210:	7f 92       	push	r7
    5212:	8f 92       	push	r8
    5214:	cf 92       	push	r12
    5216:	df 92       	push	r13
    5218:	ef 92       	push	r14
    521a:	0f 93       	push	r16
    521c:	1f 93       	push	r17
    521e:	3b 01       	movw	r6, r22
    5220:	88 2e       	mov	r8, r24
    5222:	69 01       	movw	r12, r18
    5224:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    5226:	84 2f       	mov	r24, r20
    5228:	b9 01       	movw	r22, r18
    522a:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    522e:	8c 01       	movw	r16, r24
    5230:	4e 2d       	mov	r20, r14
    5232:	96 01       	movw	r18, r12
    5234:	88 2d       	mov	r24, r8
    5236:	b3 01       	movw	r22, r6
    5238:	0e 94 e6 23 	call	0x47cc	; 0x47cc <strncmp>
    523c:	21 e0       	ldi	r18, 0x01	; 1
    523e:	89 2b       	or	r24, r25
    5240:	09 f0       	breq	.+2      	; 0x5244 <util_strbeginswith+0x36>
    5242:	20 e0       	ldi	r18, 0x00	; 0
}
    5244:	82 2f       	mov	r24, r18
    5246:	1f 91       	pop	r17
    5248:	0f 91       	pop	r16
    524a:	ef 90       	pop	r14
    524c:	df 90       	pop	r13
    524e:	cf 90       	pop	r12
    5250:	8f 90       	pop	r8
    5252:	7f 90       	pop	r7
    5254:	6f 90       	pop	r6
    5256:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00004a28 <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    4a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a30:	81 30       	cpi	r24, 0x01	; 1
    4a32:	91 f0       	breq	.+36     	; 0x4a58 <util_matchMessage+0x30>
    4a34:	18 f0       	brcs	.+6      	; 0x4a3c <util_matchMessage+0x14>
    4a36:	82 30       	cpi	r24, 0x02	; 2
    4a38:	e9 f0       	breq	.+58     	; 0x4a74 <util_matchMessage+0x4c>
    4a3a:	1f c0       	rjmp	.+62     	; 0x4a7a <util_matchMessage+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    4a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    4a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    4a40:	4f 81       	ldd	r20, Y+7	; 0x07
    4a42:	80 e8       	ldi	r24, 0x80	; 128
    4a44:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    4a48:	89 2b       	or	r24, r25
    4a4a:	19 f4       	brne	.+6      	; 0x4a52 <util_matchMessage+0x2a>
    4a4c:	88 81       	ld	r24, Y
    4a4e:	99 81       	ldd	r25, Y+1	; 0x01
    4a50:	16 c0       	rjmp	.+44     	; 0x4a7e <util_matchMessage+0x56>
    4a52:	8a 81       	ldd	r24, Y+2	; 0x02
    4a54:	9b 81       	ldd	r25, Y+3	; 0x03
    4a56:	13 c0       	rjmp	.+38     	; 0x4a7e <util_matchMessage+0x56>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    4a58:	2d 81       	ldd	r18, Y+5	; 0x05
    4a5a:	3e 81       	ldd	r19, Y+6	; 0x06
    4a5c:	4f 81       	ldd	r20, Y+7	; 0x07
    4a5e:	80 e8       	ldi	r24, 0x80	; 128
    4a60:	0e 94 07 29 	call	0x520e	; 0x520e <util_strbeginswith>
    4a64:	88 23       	and	r24, r24
    4a66:	19 f0       	breq	.+6      	; 0x4a6e <util_matchMessage+0x46>
    4a68:	88 81       	ld	r24, Y
    4a6a:	99 81       	ldd	r25, Y+1	; 0x01
    4a6c:	08 c0       	rjmp	.+16     	; 0x4a7e <util_matchMessage+0x56>
    4a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a70:	9b 81       	ldd	r25, Y+3	; 0x03
    4a72:	05 c0       	rjmp	.+10     	; 0x4a7e <util_matchMessage+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    4a74:	88 81       	ld	r24, Y
    4a76:	99 81       	ldd	r25, Y+1	; 0x01
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <util_matchMessage+0x56>
		default:
		return sd->failure_state;
    4a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7c:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    4a7e:	df 91       	pop	r29
    4a80:	cf 91       	pop	r28
    4a82:	08 95       	ret

Disassembly of section .text.util_reset_module:

00005404 <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    5404:	0e 94 4e 34 	call	0x689c	; 0x689c <rn2483_reset_active>
    5408:	2f ef       	ldi	r18, 0xFF	; 255
    540a:	89 e6       	ldi	r24, 0x69	; 105
    540c:	98 e1       	ldi	r25, 0x18	; 24
    540e:	21 50       	subi	r18, 0x01	; 1
    5410:	80 40       	sbci	r24, 0x00	; 0
    5412:	90 40       	sbci	r25, 0x00	; 0
    5414:	e1 f7       	brne	.-8      	; 0x540e <util_reset_module+0xa>
    5416:	00 c0       	rjmp	.+0      	; 0x5418 <util_reset_module+0x14>
    5418:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    541a:	0e 94 52 34 	call	0x68a4	; 0x68a4 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    541e:	0e 94 32 33 	call	0x6664	; 0x6664 <uart0_hal_message_ready>
    5422:	88 23       	and	r24, r24
    5424:	e1 f3       	breq	.-8      	; 0x541e <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    5426:	8e e5       	ldi	r24, 0x5E	; 94
    5428:	92 e0       	ldi	r25, 0x02	; 2
    542a:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    542e:	6e e5       	ldi	r22, 0x5E	; 94
    5430:	72 e0       	ldi	r23, 0x02	; 2
    5432:	80 e8       	ldi	r24, 0x80	; 128
    5434:	24 ea       	ldi	r18, 0xA4	; 164
    5436:	38 e0       	ldi	r19, 0x08	; 8
    5438:	40 e0       	ldi	r20, 0x00	; 0
    543a:	0e 94 07 29 	call	0x520e	; 0x520e <util_strbeginswith>
    543e:	88 23       	and	r24, r24
    5440:	11 f0       	breq	.+4      	; 0x5446 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    5442:	80 e0       	ldi	r24, 0x00	; 0
    5444:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    5446:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5448:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004264 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    426a:	ab 01       	movw	r20, r22
    426c:	68 2f       	mov	r22, r24
    426e:	8e e5       	ldi	r24, 0x5E	; 94
    4270:	92 e0       	ldi	r25, 0x02	; 2
    4272:	0e 94 4e 31 	call	0x629c	; 0x629c <strcpy>
	attach_ending(lm_msg);
    4276:	8e e5       	ldi	r24, 0x5E	; 94
    4278:	92 e0       	ldi	r25, 0x02	; 2
    427a:	0e 94 79 31 	call	0x62f2	; 0x62f2 <attach_ending>
	uart0_hal_send_string(lm_msg);
    427e:	6e e5       	ldi	r22, 0x5E	; 94
    4280:	72 e0       	ldi	r23, 0x02	; 2
    4282:	80 e8       	ldi	r24, 0x80	; 128
    4284:	0e 94 42 23 	call	0x4684	; 0x4684 <uart0_hal_send_string>
	
	wd_cnt=0;
    4288:	10 92 a7 0f 	sts	0x0FA7, r1	; 0x800fa7 <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    428c:	85 ee       	ldi	r24, 0xE5	; 229
    428e:	93 e3       	ldi	r25, 0x33	; 51
    4290:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <TC2_HAL_subscribe>
    4294:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    4298:	0e 94 32 33 	call	0x6664	; 0x6664 <uart0_hal_message_ready>
    429c:	81 11       	cpse	r24, r1
    429e:	04 c0       	rjmp	.+8      	; 0x42a8 <util_lora_forward_msg+0x44>
    42a0:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    42a4:	8f 30       	cpi	r24, 0x0F	; 15
    42a6:	c0 f3       	brcs	.-16     	; 0x4298 <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    42a8:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <wd_cb_pointer>
    42ac:	0e 94 2a 2c 	call	0x5854	; 0x5854 <TC2_HAL_cancel>
	if(wd_cnt>=15){
    42b0:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    42b4:	8f 30       	cpi	r24, 0x0F	; 15
    42b6:	60 f0       	brcs	.+24     	; 0x42d0 <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    42b8:	2c e0       	ldi	r18, 0x0C	; 12
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	4b ea       	ldi	r20, 0xAB	; 171
    42be:	58 e0       	ldi	r21, 0x08	; 8
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	ce 01       	movw	r24, r28
    42c4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		uart0_hal_read_message_as_str(res);
    42c8:	ce 01       	movw	r24, r28
    42ca:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
    42ce:	03 c0       	rjmp	.+6      	; 0x42d6 <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    42d0:	ce 01       	movw	r24, r28
    42d2:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
	}
}
    42d6:	df 91       	pop	r29
    42d8:	cf 91       	pop	r28
    42da:	08 95       	ret

Disassembly of section .text.util_send_break:

000068d4 <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    68d4:	85 e5       	ldi	r24, 0x55	; 85
    68d6:	0e 94 bc 29 	call	0x5378	; 0x5378 <uart0_hal_send_break>
    68da:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

0000637c <MRPP_init_group>:
//uint8_t _groupId=0;

//uint8_t get_group_id();
//void set_group_id(uint8_t groupId);

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    637c:	cf 93       	push	r28
    637e:	26 2f       	mov	r18, r22
    6380:	c4 2f       	mov	r28, r20
    //uint8_t groupId=get_group_id();

    mrpp_state_init(&state, groupId, collections, nCollections);
    6382:	ac 01       	movw	r20, r24
    6384:	6c 2f       	mov	r22, r28
    6386:	86 e2       	ldi	r24, 0x26	; 38
    6388:	93 e0       	ldi	r25, 0x03	; 3
    638a:	0e 94 15 11 	call	0x222a	; 0x222a <mrpp_state_init>

    return groupId+1;
    //set_group_id(groupId);
}
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	8c 0f       	add	r24, r28
    6392:	cf 91       	pop	r28
    6394:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000045a4 <MRPP_add_collection_data_INT16>:
//
//void set_group_id(uint8_t groupId){
    //_groupId=groupId;
//}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    45a4:	ef 92       	push	r14
    45a6:	ff 92       	push	r15
    45a8:	1f 93       	push	r17
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
    45b2:	2a 97       	sbiw	r28, 0x0a	; 10
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	18 2f       	mov	r17, r24
    45c0:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    45c2:	9e 01       	movw	r18, r28
    45c4:	2f 5f       	subi	r18, 0xFF	; 255
    45c6:	3f 4f       	sbci	r19, 0xFF	; 255
    45c8:	ab 01       	movw	r20, r22
    45ca:	68 2f       	mov	r22, r24
    45cc:	86 e2       	ldi	r24, 0x26	; 38
    45ce:	93 e0       	ldi	r25, 0x03	; 3
    45d0:	0e 94 32 20 	call	0x4064	; 0x4064 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    45d4:	9e 01       	movw	r18, r28
    45d6:	27 5f       	subi	r18, 0xF7	; 247
    45d8:	3f 4f       	sbci	r19, 0xFF	; 255
    45da:	ae 01       	movw	r20, r28
    45dc:	49 5f       	subi	r20, 0xF9	; 249
    45de:	5f 4f       	sbci	r21, 0xFF	; 255
    45e0:	61 2f       	mov	r22, r17
    45e2:	86 e2       	ldi	r24, 0x26	; 38
    45e4:	93 e0       	ldi	r25, 0x03	; 3
    45e6:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    45ea:	29 85       	ldd	r18, Y+9	; 0x09
    45ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    45ee:	4f 81       	ldd	r20, Y+7	; 0x07
    45f0:	58 85       	ldd	r21, Y+8	; 0x08
    45f2:	b7 01       	movw	r22, r14
    45f4:	ce 01       	movw	r24, r28
    45f6:	01 96       	adiw	r24, 0x01	; 1
    45f8:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <mrpp_data_add_int16>
}
    45fc:	2a 96       	adiw	r28, 0x0a	; 10
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	f8 94       	cli
    4602:	de bf       	out	0x3e, r29	; 62
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	cd bf       	out	0x3d, r28	; 61
    4608:	df 91       	pop	r29
    460a:	cf 91       	pop	r28
    460c:	1f 91       	pop	r17
    460e:	ff 90       	pop	r15
    4610:	ef 90       	pop	r14
    4612:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

0000605c <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    605c:	cf 93       	push	r28
    605e:	df 93       	push	r29
    6060:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    6062:	86 e2       	ldi	r24, 0x26	; 38
    6064:	93 e0       	ldi	r25, 0x03	; 3
    6066:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <mrpp_state_is_body_ready>
    606a:	88 83       	st	Y, r24
    606c:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    606e:	89 2f       	mov	r24, r25
    6070:	80 95       	com	r24
    
}
    6072:	88 1f       	adc	r24, r24
    6074:	88 27       	eor	r24, r24
    6076:	88 1f       	adc	r24, r24
    6078:	df 91       	pop	r29
    607a:	cf 91       	pop	r28
    607c:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003d8a <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3d8a:	af 92       	push	r10
    3d8c:	bf 92       	push	r11
    3d8e:	cf 92       	push	r12
    3d90:	df 92       	push	r13
    3d92:	ef 92       	push	r14
    3d94:	ff 92       	push	r15
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <MRPP_get_ready_body_package+0x16>
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <MRPP_get_ready_body_package+0x18>
    3da2:	1f 92       	push	r1
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	6b 01       	movw	r12, r22
    3daa:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    3dac:	9e 01       	movw	r18, r28
    3dae:	2b 5f       	subi	r18, 0xFB	; 251
    3db0:	3f 4f       	sbci	r19, 0xFF	; 255
    3db2:	79 01       	movw	r14, r18
    3db4:	8e 01       	movw	r16, r28
    3db6:	0d 5f       	subi	r16, 0xFD	; 253
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	23 50       	subi	r18, 0x03	; 3
    3dbc:	31 09       	sbc	r19, r1
    3dbe:	ae 01       	movw	r20, r28
    3dc0:	4f 5f       	subi	r20, 0xFF	; 255
    3dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc4:	bc 01       	movw	r22, r24
    3dc6:	86 e2       	ldi	r24, 0x26	; 38
    3dc8:	93 e0       	ldi	r25, 0x03	; 3
    3dca:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    3dce:	88 23       	and	r24, r24
    3dd0:	b1 f0       	breq	.+44     	; 0x3dfe <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    3dd2:	4d 81       	ldd	r20, Y+5	; 0x05
    3dd4:	83 e0       	ldi	r24, 0x03	; 3
    3dd6:	84 0f       	add	r24, r20
    3dd8:	f5 01       	movw	r30, r10
    3dda:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    3ddc:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <state>
    3de0:	f6 01       	movw	r30, r12
    3de2:	80 83       	st	Z, r24
    package[1]=subId;
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	6b 81       	ldd	r22, Y+3	; 0x03
    3df0:	7c 81       	ldd	r23, Y+4	; 0x04
    3df2:	c6 01       	movw	r24, r12
    3df4:	03 96       	adiw	r24, 0x03	; 3
    3df6:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <mrpp_data_get>

    return true;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	01 c0       	rjmp	.+2      	; 0x3e00 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    3dfe:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	df 90       	pop	r13
    3e18:	cf 90       	pop	r12
    3e1a:	bf 90       	pop	r11
    3e1c:	af 90       	pop	r10
    3e1e:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000067ee <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    67ee:	bc 01       	movw	r22, r24
    67f0:	86 e2       	ldi	r24, 0x26	; 38
    67f2:	93 e0       	ldi	r25, 0x03	; 3
    67f4:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <mrpp_state_set_body_sent>
    67f8:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

0000607e <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    607e:	cf 93       	push	r28
    6080:	df 93       	push	r29
    6082:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6084:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    6088:	fc 01       	movw	r30, r24
    608a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    608c:	bf 01       	movw	r22, r30
    608e:	86 e2       	ldi	r24, 0x26	; 38
    6090:	93 e0       	ldi	r25, 0x03	; 3
    6092:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <mrpp_state_get_header>
    *package_length+=1;
    6096:	8f 5f       	subi	r24, 0xFF	; 255
    6098:	88 83       	st	Y, r24
}
    609a:	df 91       	pop	r29
    609c:	cf 91       	pop	r28
    609e:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

000060a0 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    60a0:	cf 93       	push	r28
    60a2:	df 93       	push	r29
    60a4:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    60a6:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    60aa:	fc 01       	movw	r30, r24
    60ac:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    60ae:	bf 01       	movw	r22, r30
    60b0:	86 e2       	ldi	r24, 0x26	; 38
    60b2:	93 e0       	ldi	r25, 0x03	; 3
    60b4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <mrpp_state_get_tail>
    *package_length+=1;
    60b8:	8f 5f       	subi	r24, 0xFF	; 255
    60ba:	88 83       	st	Y, r24
}
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00006864 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    6864:	86 e2       	ldi	r24, 0x26	; 38
    6866:	93 e0       	ldi	r25, 0x03	; 3
    6868:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <mrpp_state_all_bodies_sent>
}
    686c:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00003eb6 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    3eb6:	cf 92       	push	r12
    3eb8:	df 92       	push	r13
    3eba:	ff 92       	push	r15
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	cf 93       	push	r28
    3ec2:	df 93       	push	r29
    3ec4:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3ec6:	94 2f       	mov	r25, r20
    3ec8:	0c c0       	rjmp	.+24     	; 0x3ee2 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    3eca:	c9 2f       	mov	r28, r25
    3ecc:	d0 e0       	ldi	r29, 0x00	; 0
    3ece:	e4 1b       	sub	r30, r20
    3ed0:	f5 0b       	sbc	r31, r21
    3ed2:	ea 0f       	add	r30, r26
    3ed4:	fb 1f       	adc	r31, r27
    3ed6:	80 81       	ld	r24, Z
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e0 54       	subi	r30, 0x40	; 64
    3edc:	fc 4f       	sbci	r31, 0xFC	; 252
    3ede:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3ee0:	9f 5f       	subi	r25, 0xFF	; 255
    3ee2:	e9 2f       	mov	r30, r25
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	6a 01       	movw	r12, r20
    3ee8:	86 e0       	ldi	r24, 0x06	; 6
    3eea:	c8 0e       	add	r12, r24
    3eec:	d1 1c       	adc	r13, r1
    3eee:	ec 15       	cp	r30, r12
    3ef0:	fd 05       	cpc	r31, r13
    3ef2:	58 f3       	brcs	.-42     	; 0x3eca <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    3ef4:	26 50       	subi	r18, 0x06	; 6
    3ef6:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    3ef8:	36 95       	lsr	r19
    3efa:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    3efc:	49 5f       	subi	r20, 0xF9	; 249
    3efe:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    3f00:	a0 e0       	ldi	r26, 0x00	; 0
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	16 c0       	rjmp	.+44     	; 0x3f32 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    3f06:	cd 01       	movw	r24, r26
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	f6 01       	movw	r30, r12
    3f0e:	e8 0f       	add	r30, r24
    3f10:	f9 1f       	adc	r31, r25
    3f12:	8b 01       	movw	r16, r22
    3f14:	08 0f       	add	r16, r24
    3f16:	19 1f       	adc	r17, r25
    3f18:	e8 01       	movw	r28, r16
    3f1a:	f9 80       	ldd	r15, Y+1	; 0x01
    3f1c:	e0 54       	subi	r30, 0x40	; 64
    3f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f20:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    3f22:	84 0f       	add	r24, r20
    3f24:	95 1f       	adc	r25, r21
    3f26:	18 81       	ld	r17, Y
    3f28:	fc 01       	movw	r30, r24
    3f2a:	e0 54       	subi	r30, 0x40	; 64
    3f2c:	fc 4f       	sbci	r31, 0xFC	; 252
    3f2e:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	a2 17       	cp	r26, r18
    3f34:	b3 07       	cpc	r27, r19
    3f36:	38 f3       	brcs	.-50     	; 0x3f06 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    3f38:	df 91       	pop	r29
    3f3a:	cf 91       	pop	r28
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	ff 90       	pop	r15
    3f42:	df 90       	pop	r13
    3f44:	cf 90       	pop	r12
    3f46:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00005d82 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    5d82:	cf 93       	push	r28
    5d84:	df 93       	push	r29
    5d86:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    5d88:	20 e0       	ldi	r18, 0x00	; 0
    5d8a:	30 e0       	ldi	r19, 0x00	; 0
    5d8c:	0c c0       	rjmp	.+24     	; 0x5da6 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    5d8e:	de 01       	movw	r26, r28
    5d90:	a2 0f       	add	r26, r18
    5d92:	b3 1f       	adc	r27, r19
    5d94:	f9 01       	movw	r30, r18
    5d96:	e6 0f       	add	r30, r22
    5d98:	f7 1f       	adc	r31, r23
    5d9a:	e0 54       	subi	r30, 0x40	; 64
    5d9c:	fc 4f       	sbci	r31, 0xFC	; 252
    5d9e:	90 81       	ld	r25, Z
    5da0:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    5da2:	2f 5f       	subi	r18, 0xFF	; 255
    5da4:	3f 4f       	sbci	r19, 0xFF	; 255
    5da6:	24 17       	cp	r18, r20
    5da8:	35 07       	cpc	r19, r21
    5daa:	88 f3       	brcs	.-30     	; 0x5d8e <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    5dac:	df 91       	pop	r29
    5dae:	cf 91       	pop	r28
    5db0:	08 95       	ret

Disassembly of section .text.add_data_types:

00003222 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    3222:	cf 92       	push	r12
    3224:	df 92       	push	r13
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	dc 01       	movw	r26, r24
    3234:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    3236:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    3238:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    323a:	c1 2c       	mov	r12, r1
    323c:	d1 2c       	mov	r13, r1
    323e:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    3240:	4a c0       	rjmp	.+148    	; 0x32d6 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    3242:	29 2f       	mov	r18, r25
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	f9 01       	movw	r30, r18
    3248:	ee 0f       	add	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	22 0f       	add	r18, r18
    324e:	33 1f       	adc	r19, r19
    3250:	22 0f       	add	r18, r18
    3252:	33 1f       	adc	r19, r19
    3254:	22 0f       	add	r18, r18
    3256:	33 1f       	adc	r19, r19
    3258:	e2 0f       	add	r30, r18
    325a:	f3 1f       	adc	r31, r19
    325c:	ea 0f       	add	r30, r26
    325e:	fb 1f       	adc	r31, r27
    3260:	27 81       	ldd	r18, Z+7	; 0x07
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	a9 f0       	breq	.+42     	; 0x3290 <add_data_types+0x6e>
    3266:	24 30       	cpi	r18, 0x04	; 4
    3268:	21 f1       	breq	.+72     	; 0x32b2 <add_data_types+0x90>
    326a:	21 30       	cpi	r18, 0x01	; 1
    326c:	91 f5       	brne	.+100    	; 0x32d2 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    326e:	01 e0       	ldi	r16, 0x01	; 1
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	04 2e       	mov	r0, r20
    3274:	02 c0       	rjmp	.+4      	; 0x327a <add_data_types+0x58>
    3276:	00 0f       	add	r16, r16
    3278:	11 1f       	adc	r17, r17
    327a:	0a 94       	dec	r0
    327c:	e2 f7       	brpl	.-8      	; 0x3276 <add_data_types+0x54>
    327e:	01 2e       	mov	r0, r17
    3280:	00 0c       	add	r0, r0
    3282:	22 0b       	sbc	r18, r18
    3284:	33 0b       	sbc	r19, r19
    3286:	c0 2a       	or	r12, r16
    3288:	d1 2a       	or	r13, r17
    328a:	e2 2a       	or	r14, r18
    328c:	f3 2a       	or	r15, r19
                break;
    328e:	21 c0       	rjmp	.+66     	; 0x32d2 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    3290:	02 e0       	ldi	r16, 0x02	; 2
    3292:	10 e0       	ldi	r17, 0x00	; 0
    3294:	04 2e       	mov	r0, r20
    3296:	02 c0       	rjmp	.+4      	; 0x329c <add_data_types+0x7a>
    3298:	00 0f       	add	r16, r16
    329a:	11 1f       	adc	r17, r17
    329c:	0a 94       	dec	r0
    329e:	e2 f7       	brpl	.-8      	; 0x3298 <add_data_types+0x76>
    32a0:	01 2e       	mov	r0, r17
    32a2:	00 0c       	add	r0, r0
    32a4:	22 0b       	sbc	r18, r18
    32a6:	33 0b       	sbc	r19, r19
    32a8:	c0 2a       	or	r12, r16
    32aa:	d1 2a       	or	r13, r17
    32ac:	e2 2a       	or	r14, r18
    32ae:	f3 2a       	or	r15, r19
                break;
    32b0:	10 c0       	rjmp	.+32     	; 0x32d2 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    32b2:	03 e0       	ldi	r16, 0x03	; 3
    32b4:	10 e0       	ldi	r17, 0x00	; 0
    32b6:	04 2e       	mov	r0, r20
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <add_data_types+0x9c>
    32ba:	00 0f       	add	r16, r16
    32bc:	11 1f       	adc	r17, r17
    32be:	0a 94       	dec	r0
    32c0:	e2 f7       	brpl	.-8      	; 0x32ba <add_data_types+0x98>
    32c2:	01 2e       	mov	r0, r17
    32c4:	00 0c       	add	r0, r0
    32c6:	22 0b       	sbc	r18, r18
    32c8:	33 0b       	sbc	r19, r19
    32ca:	c0 2a       	or	r12, r16
    32cc:	d1 2a       	or	r13, r17
    32ce:	e2 2a       	or	r14, r18
    32d0:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    32d2:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    32d4:	9f 5f       	subi	r25, 0xFF	; 255
    32d6:	12 96       	adiw	r26, 0x02	; 2
    32d8:	8c 91       	ld	r24, X
    32da:	12 97       	sbiw	r26, 0x02	; 2
    32dc:	98 17       	cp	r25, r24
    32de:	08 f4       	brcc	.+2      	; 0x32e2 <add_data_types+0xc0>
    32e0:	b0 cf       	rjmp	.-160    	; 0x3242 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    32e2:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    32e4:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    32e6:	cd 82       	std	Y+5, r12	; 0x05
} 
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	ff 90       	pop	r15
    32f2:	ef 90       	pop	r14
    32f4:	df 90       	pop	r13
    32f6:	cf 90       	pop	r12
    32f8:	08 95       	ret

Disassembly of section .text.update_bodies:

000020c8 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    20c8:	cf 93       	push	r28
    20ca:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    20cc:	26 2f       	mov	r18, r22
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	c9 01       	movw	r24, r18
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f9 01       	movw	r30, r18
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	22 0f       	add	r18, r18
    20e0:	33 1f       	adc	r19, r19
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	e2 0f       	add	r30, r18
    20e8:	f3 1f       	adc	r31, r19
    20ea:	ea 0f       	add	r30, r26
    20ec:	fb 1f       	adc	r31, r27
    20ee:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    20f0:	c0 e0       	ldi	r28, 0x00	; 0
    20f2:	25 c0       	rjmp	.+74     	; 0x213e <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    20f4:	82 17       	cp	r24, r18
    20f6:	93 07       	cpc	r25, r19
    20f8:	09 f1       	breq	.+66     	; 0x213c <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    20fa:	a9 01       	movw	r20, r18
    20fc:	44 0f       	add	r20, r20
    20fe:	55 1f       	adc	r21, r21
    2100:	44 0f       	add	r20, r20
    2102:	55 1f       	adc	r21, r21
    2104:	44 0f       	add	r20, r20
    2106:	55 1f       	adc	r21, r21
    2108:	f9 01       	movw	r30, r18
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e4 0f       	add	r30, r20
    2110:	f5 1f       	adc	r31, r21
    2112:	ea 0f       	add	r30, r26
    2114:	fb 1f       	adc	r31, r27
    2116:	43 85       	ldd	r20, Z+11	; 0x0b
    2118:	74 13       	cpse	r23, r20
    211a:	10 c0       	rjmp	.+32     	; 0x213c <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    211c:	f9 01       	movw	r30, r18
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	e2 0f       	add	r30, r18
    2130:	f3 1f       	adc	r31, r19
    2132:	ea 0f       	add	r30, r26
    2134:	fb 1f       	adc	r31, r27
    2136:	24 85       	ldd	r18, Z+12	; 0x0c
    2138:	23 30       	cpi	r18, 0x03	; 3
    213a:	41 f4       	brne	.+16     	; 0x214c <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    213c:	cf 5f       	subi	r28, 0xFF	; 255
    213e:	2c 2f       	mov	r18, r28
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	28 17       	cp	r18, r24
    2144:	39 07       	cpc	r19, r25
    2146:	b4 f2       	brlt	.-84     	; 0x20f4 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    2148:	21 e0       	ldi	r18, 0x01	; 1
    214a:	01 c0       	rjmp	.+2      	; 0x214e <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    214c:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    214e:	22 23       	and	r18, r18
    2150:	39 f0       	breq	.+14     	; 0x2160 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    2152:	fd 01       	movw	r30, r26
    2154:	e7 0f       	add	r30, r23
    2156:	f1 1d       	adc	r31, r1
    2158:	e4 58       	subi	r30, 0x84	; 132
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	21 e0       	ldi	r18, 0x01	; 1
    215e:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    2160:	9c 01       	movw	r18, r24
    2162:	22 0f       	add	r18, r18
    2164:	33 1f       	adc	r19, r19
    2166:	22 0f       	add	r18, r18
    2168:	33 1f       	adc	r19, r19
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	fc 01       	movw	r30, r24
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	ea 0f       	add	r30, r26
    217a:	fb 1f       	adc	r31, r27
    217c:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    217e:	29 c0       	rjmp	.+82     	; 0x21d2 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    2180:	46 2f       	mov	r20, r22
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	84 17       	cp	r24, r20
    2186:	95 07       	cpc	r25, r21
    2188:	19 f1       	breq	.+70     	; 0x21d0 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    218a:	9a 01       	movw	r18, r20
    218c:	2f 5f       	subi	r18, 0xFF	; 255
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	f9 01       	movw	r30, r18
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	22 0f       	add	r18, r18
    2198:	33 1f       	adc	r19, r19
    219a:	22 0f       	add	r18, r18
    219c:	33 1f       	adc	r19, r19
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	e2 0f       	add	r30, r18
    21a4:	f3 1f       	adc	r31, r19
    21a6:	ea 0f       	add	r30, r26
    21a8:	fb 1f       	adc	r31, r27
    21aa:	20 81       	ld	r18, Z
    21ac:	c2 13       	cpse	r28, r18
    21ae:	10 c0       	rjmp	.+32     	; 0x21d0 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    21b0:	fa 01       	movw	r30, r20
    21b2:	ee 0f       	add	r30, r30
    21b4:	ff 1f       	adc	r31, r31
    21b6:	44 0f       	add	r20, r20
    21b8:	55 1f       	adc	r21, r21
    21ba:	44 0f       	add	r20, r20
    21bc:	55 1f       	adc	r21, r21
    21be:	44 0f       	add	r20, r20
    21c0:	55 1f       	adc	r21, r21
    21c2:	e4 0f       	add	r30, r20
    21c4:	f5 1f       	adc	r31, r21
    21c6:	ea 0f       	add	r30, r26
    21c8:	fb 1f       	adc	r31, r27
    21ca:	24 85       	ldd	r18, Z+12	; 0x0c
    21cc:	23 30       	cpi	r18, 0x03	; 3
    21ce:	41 f4       	brne	.+16     	; 0x21e0 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    21d0:	6f 5f       	subi	r22, 0xFF	; 255
    21d2:	12 96       	adiw	r26, 0x02	; 2
    21d4:	2c 91       	ld	r18, X
    21d6:	12 97       	sbiw	r26, 0x02	; 2
    21d8:	62 17       	cp	r22, r18
    21da:	90 f2       	brcs	.-92     	; 0x2180 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    21e0:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    21e2:	88 23       	and	r24, r24
    21e4:	41 f0       	breq	.+16     	; 0x21f6 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    21e6:	fd 01       	movw	r30, r26
    21e8:	ec 0f       	add	r30, r28
    21ea:	f1 1d       	adc	r31, r1
    21ec:	e4 58       	subi	r30, 0x84	; 132
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	80 83       	st	Z, r24
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    21f6:	fd 01       	movw	r30, r26
    21f8:	ec 0f       	add	r30, r28
    21fa:	f1 1d       	adc	r31, r1
    21fc:	e4 58       	subi	r30, 0x84	; 132
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    2202:	8c 2f       	mov	r24, r28
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	87 1b       	sub	r24, r23
    2208:	91 09       	sbc	r25, r1
    220a:	02 97       	sbiw	r24, 0x02	; 2
    220c:	64 f0       	brlt	.+24     	; 0x2226 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    220e:	7f 5f       	subi	r23, 0xFF	; 255
    2210:	08 c0       	rjmp	.+16     	; 0x2222 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    2212:	fd 01       	movw	r30, r26
    2214:	e7 0f       	add	r30, r23
    2216:	f1 1d       	adc	r31, r1
    2218:	e4 58       	subi	r30, 0x84	; 132
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2220:	7f 5f       	subi	r23, 0xFF	; 255
    2222:	7c 17       	cp	r23, r28
    2224:	b0 f3       	brcs	.-20     	; 0x2212 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
  
}
    2226:	cf 91       	pop	r28
    2228:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

0000222a <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    222a:	af 92       	push	r10
    222c:	bf 92       	push	r11
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	6c 01       	movw	r12, r24
    2240:	a2 2e       	mov	r10, r18
    state->groupId=groupId;
    2242:	fc 01       	movw	r30, r24
    2244:	60 83       	st	Z, r22
    state->nCollections=nCollections;
    2246:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    2248:	b1 2c       	mov	r11, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    224a:	00 e0       	ldi	r16, 0x00	; 0
    224c:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    224e:	62 c0       	rjmp	.+196    	; 0x2314 <mrpp_state_init+0xea>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    2250:	eb 2d       	mov	r30, r11
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	df 01       	movw	r26, r30
    2256:	aa 0f       	add	r26, r26
    2258:	bb 1f       	adc	r27, r27
    225a:	aa 0f       	add	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	ae 0f       	add	r26, r30
    2260:	bf 1f       	adc	r27, r31
    2262:	a4 0f       	add	r26, r20
    2264:	b5 1f       	adc	r27, r21
    2266:	12 96       	adiw	r26, 0x02	; 2
    2268:	2d 91       	ld	r18, X+
    226a:	3c 91       	ld	r19, X
    226c:	13 97       	sbiw	r26, 0x03	; 3
    226e:	ef 01       	movw	r28, r30
    2270:	cc 0f       	add	r28, r28
    2272:	dd 1f       	adc	r29, r29
    2274:	cf 01       	movw	r24, r30
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	c8 0f       	add	r28, r24
    2284:	d9 1f       	adc	r29, r25
    2286:	cc 0d       	add	r28, r12
    2288:	dd 1d       	adc	r29, r13
    228a:	39 87       	std	Y+9, r19	; 0x09
    228c:	28 87       	std	Y+8, r18	; 0x08

        //type
        state->collections[i].type=collections[i].type;
    228e:	14 96       	adiw	r26, 0x04	; 4
    2290:	8c 91       	ld	r24, X
    2292:	14 97       	sbiw	r26, 0x04	; 4
    2294:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    2296:	1c 83       	std	Y+4, r17	; 0x04
    2298:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    229a:	8d 91       	ld	r24, X+
    229c:	9c 91       	ld	r25, X
    229e:	11 97       	sbiw	r26, 0x01	; 1
    22a0:	14 96       	adiw	r26, 0x04	; 4
    22a2:	2c 91       	ld	r18, X
    22a4:	28 9f       	mul	r18, r24
    22a6:	70 01       	movw	r14, r0
    22a8:	29 9f       	mul	r18, r25
    22aa:	f0 0c       	add	r15, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	86 e0       	ldi	r24, 0x06	; 6
    22b0:	e8 0e       	add	r14, r24
    22b2:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    22b4:	fe 82       	std	Y+6, r15	; 0x06
    22b6:	ed 82       	std	Y+5, r14	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    22b8:	98 01       	movw	r18, r16
    22ba:	ab ea       	ldi	r26, 0xAB	; 171
    22bc:	ba ea       	ldi	r27, 0xAA	; 170
    22be:	0e 94 3f 31 	call	0x627e	; 0x627e <__umulhisi3>
    22c2:	96 95       	lsr	r25
    22c4:	87 95       	ror	r24
    22c6:	92 95       	swap	r25
    22c8:	82 95       	swap	r24
    22ca:	8f 70       	andi	r24, 0x0F	; 15
    22cc:	89 27       	eor	r24, r25
    22ce:	9f 70       	andi	r25, 0x0F	; 15
    22d0:	89 27       	eor	r24, r25
    22d2:	31 96       	adiw	r30, 0x01	; 1
    22d4:	9f 01       	movw	r18, r30
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	e2 0f       	add	r30, r18
    22e8:	f3 1f       	adc	r31, r19
    22ea:	ec 0d       	add	r30, r12
    22ec:	fd 1d       	adc	r31, r13
    22ee:	80 83       	st	Z, r24
        state->collections[i].endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
    22f0:	0e 0d       	add	r16, r14
    22f2:	1f 1d       	adc	r17, r15
    22f4:	98 01       	movw	r18, r16
    22f6:	21 50       	subi	r18, 0x01	; 1
    22f8:	31 09       	sbc	r19, r1
    22fa:	0e 94 3f 31 	call	0x627e	; 0x627e <__umulhisi3>
    22fe:	96 95       	lsr	r25
    2300:	87 95       	ror	r24
    2302:	92 95       	swap	r25
    2304:	82 95       	swap	r24
    2306:	8f 70       	andi	r24, 0x0F	; 15
    2308:	89 27       	eor	r24, r25
    230a:	9f 70       	andi	r25, 0x0F	; 15
    230c:	89 27       	eor	r24, r25
    230e:	8b 87       	std	Y+11, r24	; 0x0b
        //endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
        //state->collections[i].endsInBody=endsInBody;
        

        //set status
        state->collections[i].status=WAITING;
    2310:	1c 86       	std	Y+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    2312:	b3 94       	inc	r11
    2314:	ba 14       	cp	r11, r10
    2316:	08 f4       	brcc	.+2      	; 0x231a <mrpp_state_init+0xf0>
    2318:	9b cf       	rjmp	.-202    	; 0x2250 <mrpp_state_init+0x26>
        startingIndex+=len;      
    }

    //Calculate lastSubId
	
	state->lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    231a:	98 01       	movw	r18, r16
    231c:	21 50       	subi	r18, 0x01	; 1
    231e:	31 09       	sbc	r19, r1
    2320:	ab ea       	ldi	r26, 0xAB	; 171
    2322:	ba ea       	ldi	r27, 0xAA	; 170
    2324:	0e 94 3f 31 	call	0x627e	; 0x627e <__umulhisi3>
    2328:	96 95       	lsr	r25
    232a:	87 95       	ror	r24
    232c:	92 95       	swap	r25
    232e:	82 95       	swap	r24
    2330:	8f 70       	andi	r24, 0x0F	; 15
    2332:	89 27       	eor	r24, r25
    2334:	9f 70       	andi	r25, 0x0F	; 15
    2336:	89 27       	eor	r24, r25
    2338:	92 e0       	ldi	r25, 0x02	; 2
    233a:	98 0f       	add	r25, r24
    233c:	f6 01       	movw	r30, r12
    233e:	91 83       	std	Z+1, r25	; 0x01
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    //lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    //state->lastSubId=lastSubId;
    
    //calculate bodies
	uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    2340:	8f 5f       	subi	r24, 0xFF	; 255
	state->nBodies=nBodies;
    2342:	e5 58       	subi	r30, 0x85	; 133
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 83       	st	Z, r24
    //uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    //nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    //state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	07 c0       	rjmp	.+14     	; 0x235a <mrpp_state_init+0x130>
    {
        state->bodies[i]=WAITING;
    234c:	f6 01       	movw	r30, r12
    234e:	e9 0f       	add	r30, r25
    2350:	f1 1d       	adc	r31, r1
    2352:	e4 58       	subi	r30, 0x84	; 132
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	10 82       	st	Z, r1
    //uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    //nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    //state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    2358:	9f 5f       	subi	r25, 0xFF	; 255
    235a:	98 17       	cp	r25, r24
    235c:	b8 f3       	brcs	.-18     	; 0x234c <mrpp_state_init+0x122>
    {
        state->bodies[i]=WAITING;
    }
}
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	cf 90       	pop	r12
    236e:	bf 90       	pop	r11
    2370:	af 90       	pop	r10
    2372:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003bb0 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	8c 01       	movw	r16, r24
    3bba:	eb 01       	movw	r28, r22
    package[0]=0;
    3bbc:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	81 81       	ldd	r24, Z+1	; 0x01
    3bc2:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3bc4:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3bc6:	c8 01       	movw	r24, r16
    3bc8:	0e 94 11 19 	call	0x3222	; 0x3222 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	35 c0       	rjmp	.+106    	; 0x3c3a <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3bd0:	82 2f       	mov	r24, r18
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	aa 0f       	add	r26, r26
    3bd8:	bb 1f       	adc	r27, r27
    3bda:	aa 0f       	add	r26, r26
    3bdc:	bb 1f       	adc	r27, r27
    3bde:	ad 01       	movw	r20, r26
    3be0:	4a 5f       	subi	r20, 0xFA	; 250
    3be2:	5f 4f       	sbci	r21, 0xFF	; 255
    3be4:	4c 0f       	add	r20, r28
    3be6:	5d 1f       	adc	r21, r29
    3be8:	fc 01       	movw	r30, r24
    3bea:	ee 0f       	add	r30, r30
    3bec:	ff 1f       	adc	r31, r31
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	88 0f       	add	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	e8 0f       	add	r30, r24
    3bfc:	f9 1f       	adc	r31, r25
    3bfe:	bf 01       	movw	r22, r30
    3c00:	60 0f       	add	r22, r16
    3c02:	71 1f       	adc	r23, r17
    3c04:	fb 01       	movw	r30, r22
    3c06:	84 81       	ldd	r24, Z+4	; 0x04
    3c08:	fa 01       	movw	r30, r20
    3c0a:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	07 96       	adiw	r24, 0x07	; 7
    3c10:	8c 0f       	add	r24, r28
    3c12:	9d 1f       	adc	r25, r29
    3c14:	fb 01       	movw	r30, r22
    3c16:	33 81       	ldd	r19, Z+3	; 0x03
    3c18:	fc 01       	movw	r30, r24
    3c1a:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3c1c:	cd 01       	movw	r24, r26
    3c1e:	08 96       	adiw	r24, 0x08	; 8
    3c20:	8c 0f       	add	r24, r28
    3c22:	9d 1f       	adc	r25, r29
    3c24:	fb 01       	movw	r30, r22
    3c26:	36 81       	ldd	r19, Z+6	; 0x06
    3c28:	fc 01       	movw	r30, r24
    3c2a:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3c2c:	19 96       	adiw	r26, 0x09	; 9
    3c2e:	ac 0f       	add	r26, r28
    3c30:	bd 1f       	adc	r27, r29
    3c32:	fb 01       	movw	r30, r22
    3c34:	85 81       	ldd	r24, Z+5	; 0x05
    3c36:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3c38:	2f 5f       	subi	r18, 0xFF	; 255
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	28 17       	cp	r18, r24
    3c40:	38 f2       	brcs	.-114    	; 0x3bd0 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3c42:	88 0f       	add	r24, r24
    3c44:	88 0f       	add	r24, r24
}
    3c46:	8a 5f       	subi	r24, 0xFA	; 250
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

000039c4 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	8c 01       	movw	r16, r24
    39ce:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    39d0:	fc 01       	movw	r30, r24
    39d2:	81 81       	ldd	r24, Z+1	; 0x01
    39d4:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    39d6:	81 81       	ldd	r24, Z+1	; 0x01
    39d8:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    39da:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    39dc:	c8 01       	movw	r24, r16
    39de:	0e 94 11 19 	call	0x3222	; 0x3222 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	35 c0       	rjmp	.+106    	; 0x3a50 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    39e6:	82 2f       	mov	r24, r18
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	dc 01       	movw	r26, r24
    39ec:	aa 0f       	add	r26, r26
    39ee:	bb 1f       	adc	r27, r27
    39f0:	aa 0f       	add	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	ad 01       	movw	r20, r26
    39f6:	4a 5f       	subi	r20, 0xFA	; 250
    39f8:	5f 4f       	sbci	r21, 0xFF	; 255
    39fa:	4c 0f       	add	r20, r28
    39fc:	5d 1f       	adc	r21, r29
    39fe:	fc 01       	movw	r30, r24
    3a00:	ee 0f       	add	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	e8 0f       	add	r30, r24
    3a12:	f9 1f       	adc	r31, r25
    3a14:	bf 01       	movw	r22, r30
    3a16:	60 0f       	add	r22, r16
    3a18:	71 1f       	adc	r23, r17
    3a1a:	fb 01       	movw	r30, r22
    3a1c:	84 81       	ldd	r24, Z+4	; 0x04
    3a1e:	fa 01       	movw	r30, r20
    3a20:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3a22:	cd 01       	movw	r24, r26
    3a24:	07 96       	adiw	r24, 0x07	; 7
    3a26:	8c 0f       	add	r24, r28
    3a28:	9d 1f       	adc	r25, r29
    3a2a:	fb 01       	movw	r30, r22
    3a2c:	33 81       	ldd	r19, Z+3	; 0x03
    3a2e:	fc 01       	movw	r30, r24
    3a30:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3a32:	cd 01       	movw	r24, r26
    3a34:	08 96       	adiw	r24, 0x08	; 8
    3a36:	8c 0f       	add	r24, r28
    3a38:	9d 1f       	adc	r25, r29
    3a3a:	fb 01       	movw	r30, r22
    3a3c:	36 81       	ldd	r19, Z+6	; 0x06
    3a3e:	fc 01       	movw	r30, r24
    3a40:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3a42:	19 96       	adiw	r26, 0x09	; 9
    3a44:	ac 0f       	add	r26, r28
    3a46:	bd 1f       	adc	r27, r29
    3a48:	fb 01       	movw	r30, r22
    3a4a:	85 81       	ldd	r24, Z+5	; 0x05
    3a4c:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3a4e:	2f 5f       	subi	r18, 0xFF	; 255
    3a50:	f8 01       	movw	r30, r16
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	28 17       	cp	r18, r24
    3a56:	38 f2       	brcs	.-114    	; 0x39e6 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3a58:	88 0f       	add	r24, r24
    3a5a:	88 0f       	add	r24, r24
}
    3a5c:	8a 5f       	subi	r24, 0xFA	; 250
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	1f 91       	pop	r17
    3a64:	0f 91       	pop	r16
    3a66:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00004064 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    4064:	0f 93       	push	r16
    4066:	1f 93       	push	r17
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    406e:	a6 2f       	mov	r26, r22
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	11 97       	sbiw	r26, 0x01	; 1
    4074:	fd 01       	movw	r30, r26
    4076:	ee 0f       	add	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	cd 01       	movw	r24, r26
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	88 0f       	add	r24, r24
    4086:	99 1f       	adc	r25, r25
    4088:	e8 0f       	add	r30, r24
    408a:	f9 1f       	adc	r31, r25
    408c:	e0 0f       	add	r30, r16
    408e:	f1 1f       	adc	r31, r17
    4090:	83 e0       	ldi	r24, 0x03	; 3
    4092:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0a c0       	rjmp	.+20     	; 0x40ac <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    4098:	e9 2f       	mov	r30, r25
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	e9 01       	movw	r28, r18
    409e:	ce 0f       	add	r28, r30
    40a0:	df 1f       	adc	r29, r31
    40a2:	e4 0f       	add	r30, r20
    40a4:	f5 1f       	adc	r31, r21
    40a6:	80 81       	ld	r24, Z
    40a8:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    40aa:	9f 5f       	subi	r25, 0xFF	; 255
    40ac:	94 30       	cpi	r25, 0x04	; 4
    40ae:	a0 f3       	brcs	.-24     	; 0x4098 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    40b0:	cd 01       	movw	r24, r26
    40b2:	88 0f       	add	r24, r24
    40b4:	99 1f       	adc	r25, r25
    40b6:	aa 0f       	add	r26, r26
    40b8:	bb 1f       	adc	r27, r27
    40ba:	aa 0f       	add	r26, r26
    40bc:	bb 1f       	adc	r27, r27
    40be:	aa 0f       	add	r26, r26
    40c0:	bb 1f       	adc	r27, r27
    40c2:	a8 0f       	add	r26, r24
    40c4:	b9 1f       	adc	r27, r25
    40c6:	a0 0f       	add	r26, r16
    40c8:	b1 1f       	adc	r27, r17
    40ca:	19 96       	adiw	r26, 0x09	; 9
    40cc:	8c 91       	ld	r24, X
    40ce:	19 97       	sbiw	r26, 0x09	; 9
    40d0:	f9 01       	movw	r30, r18
    40d2:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    40d4:	18 96       	adiw	r26, 0x08	; 8
    40d6:	8c 91       	ld	r24, X
    40d8:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    40da:	c8 01       	movw	r24, r16
    40dc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <update_bodies>
}
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	1f 91       	pop	r17
    40e6:	0f 91       	pop	r16
    40e8:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00005db2 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
  
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    5db2:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	0b c0       	rjmp	.+22     	; 0x5dce <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    5db8:	29 2f       	mov	r18, r25
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	fa 01       	movw	r30, r20
    5dbe:	e2 0f       	add	r30, r18
    5dc0:	f3 1f       	adc	r31, r19
    5dc2:	e4 58       	subi	r30, 0x84	; 132
    5dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc6:	80 81       	ld	r24, Z
    5dc8:	81 30       	cpi	r24, 0x01	; 1
    5dca:	49 f0       	breq	.+18     	; 0x5dde <mrpp_state_is_body_ready+0x2c>
  
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5dcc:	9f 5f       	subi	r25, 0xFF	; 255
    5dce:	fa 01       	movw	r30, r20
    5dd0:	e5 58       	subi	r30, 0x85	; 133
    5dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd4:	80 81       	ld	r24, Z
    5dd6:	98 17       	cp	r25, r24
    5dd8:	78 f3       	brcs	.-34     	; 0x5db8 <mrpp_state_is_body_ready+0x6>
    }
  
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5dda:	2f ef       	ldi	r18, 0xFF	; 255
    5ddc:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    5dde:	c9 01       	movw	r24, r18
    5de0:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00005f26 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    5f26:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    5f2a:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    5f2c:	0a c0       	rjmp	.+20     	; 0x5f42 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    5f2e:	f9 01       	movw	r30, r18
    5f30:	e9 0f       	add	r30, r25
    5f32:	f1 1d       	adc	r31, r1
    5f34:	e4 58       	subi	r30, 0x84	; 132
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	40 81       	ld	r20, Z
    5f3a:	42 30       	cpi	r20, 0x02	; 2
    5f3c:	09 f0       	breq	.+2      	; 0x5f40 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    5f3e:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5f40:	9f 5f       	subi	r25, 0xFF	; 255
    5f42:	f9 01       	movw	r30, r18
    5f44:	e5 58       	subi	r30, 0x85	; 133
    5f46:	ff 4f       	sbci	r31, 0xFF	; 255
    5f48:	40 81       	ld	r20, Z
    5f4a:	94 17       	cp	r25, r20
    5f4c:	80 f3       	brcs	.-32     	; 0x5f2e <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    5f4e:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00002f72 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    2f72:	8f 92       	push	r8
    2f74:	9f 92       	push	r9
    2f76:	af 92       	push	r10
    2f78:	bf 92       	push	r11
    2f7a:	cf 92       	push	r12
    2f7c:	df 92       	push	r13
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	ec 01       	movw	r28, r24
    2f8c:	6b 01       	movw	r12, r22
    2f8e:	5a 01       	movw	r10, r20
    2f90:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
    2f92:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    2f96:	8f 3f       	cpi	r24, 0xFF	; 255
    2f98:	2f ef       	ldi	r18, 0xFF	; 255
    2f9a:	92 07       	cpc	r25, r18
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <mrpp_state_get_ready_body+0x2e>
    2f9e:	51 c0       	rjmp	.+162    	; 0x3042 <mrpp_state_get_ready_body+0xd0>
    2fa0:	8c 15       	cp	r24, r12
    2fa2:	9d 05       	cpc	r25, r13
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <mrpp_state_get_ready_body+0x36>
    2fa6:	4f c0       	rjmp	.+158    	; 0x3046 <mrpp_state_get_ready_body+0xd4>
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	09 c0       	rjmp	.+18     	; 0x2fbe <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    2fac:	fe 01       	movw	r30, r28
    2fae:	e8 0f       	add	r30, r24
    2fb0:	f1 1d       	adc	r31, r1
    2fb2:	e4 58       	subi	r30, 0x84	; 132
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	90 81       	ld	r25, Z
    2fb8:	91 30       	cpi	r25, 0x01	; 1
    2fba:	41 f0       	breq	.+16     	; 0x2fcc <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e5 58       	subi	r30, 0x85	; 133
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	90 81       	ld	r25, Z
    2fc6:	89 17       	cp	r24, r25
    2fc8:	88 f3       	brcs	.-30     	; 0x2fac <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    2fca:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
    2fce:	98 0f       	add	r25, r24
    2fd0:	f5 01       	movw	r30, r10
    2fd2:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    2fd4:	99 81       	ldd	r25, Y+1	; 0x01
    2fd6:	f4 01       	movw	r30, r8
    2fd8:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	40 e3       	ldi	r20, 0x30	; 48
    2fde:	48 9f       	mul	r20, r24
    2fe0:	90 01       	movw	r18, r0
    2fe2:	49 9f       	mul	r20, r25
    2fe4:	30 0d       	add	r19, r0
    2fe6:	11 24       	eor	r1, r1
    2fe8:	f8 01       	movw	r30, r16
    2fea:	31 83       	std	Z+1, r19	; 0x01
    2fec:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e5 58       	subi	r30, 0x85	; 133
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	20 81       	ld	r18, Z
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	21 50       	subi	r18, 0x01	; 1
    2ffa:	31 09       	sbc	r19, r1
    2ffc:	82 17       	cp	r24, r18
    2ffe:	93 07       	cpc	r25, r19
    3000:	2c f4       	brge	.+10     	; 0x300c <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    3002:	80 e3       	ldi	r24, 0x30	; 48
    3004:	f7 01       	movw	r30, r14
    3006:	80 83       	st	Z, r24
    }else{
		*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE;
        //Legacy
		//*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	1e c0       	rjmp	.+60     	; 0x3048 <mrpp_state_get_ready_body+0xd6>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
		*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE;
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	ac 01       	movw	r20, r24
    3014:	44 0f       	add	r20, r20
    3016:	55 1f       	adc	r21, r21
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	84 0f       	add	r24, r20
    3026:	95 1f       	adc	r25, r21
    3028:	c8 0f       	add	r28, r24
    302a:	d9 1f       	adc	r29, r25
    302c:	9b 81       	ldd	r25, Y+3	; 0x03
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	89 0f       	add	r24, r25
    3032:	f0 e3       	ldi	r31, 0x30	; 48
    3034:	2f 9f       	mul	r18, r31
    3036:	80 19       	sub	r24, r0
    3038:	11 24       	eor	r1, r1
    303a:	f7 01       	movw	r30, r14
    303c:	80 83       	st	Z, r24
        //Legacy
		//*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	03 c0       	rjmp	.+6      	; 0x3048 <mrpp_state_get_ready_body+0xd6>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	01 c0       	rjmp	.+2      	; 0x3048 <mrpp_state_get_ready_body+0xd6>
    3046:	80 e0       	ldi	r24, 0x00	; 0
		*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE;
        //Legacy
		//*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	bf 90       	pop	r11
    305a:	af 90       	pop	r10
    305c:	9f 90       	pop	r9
    305e:	8f 90       	pop	r8
    3060:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

000061a8 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    61a8:	fc 01       	movw	r30, r24
    61aa:	e5 58       	subi	r30, 0x85	; 133
    61ac:	ff 4f       	sbci	r31, 0xFF	; 255
    61ae:	20 81       	ld	r18, Z
    61b0:	30 e0       	ldi	r19, 0x00	; 0
    61b2:	62 17       	cp	r22, r18
    61b4:	73 07       	cpc	r23, r19
    61b6:	3c f4       	brge	.+14     	; 0x61c6 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    61b8:	68 0f       	add	r22, r24
    61ba:	79 1f       	adc	r23, r25
    61bc:	fb 01       	movw	r30, r22
    61be:	e4 58       	subi	r30, 0x84	; 132
    61c0:	ff 4f       	sbci	r31, 0xFF	; 255
    61c2:	82 e0       	ldi	r24, 0x02	; 2
    61c4:	80 83       	st	Z, r24
    61c6:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00005a56 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    5a56:	70 e0       	ldi	r23, 0x00	; 0
    5a58:	61 50       	subi	r22, 0x01	; 1
    5a5a:	71 09       	sbc	r23, r1
    5a5c:	fb 01       	movw	r30, r22
    5a5e:	ee 0f       	add	r30, r30
    5a60:	ff 1f       	adc	r31, r31
    5a62:	66 0f       	add	r22, r22
    5a64:	77 1f       	adc	r23, r23
    5a66:	66 0f       	add	r22, r22
    5a68:	77 1f       	adc	r23, r23
    5a6a:	66 0f       	add	r22, r22
    5a6c:	77 1f       	adc	r23, r23
    5a6e:	e6 0f       	add	r30, r22
    5a70:	f7 1f       	adc	r31, r23
    5a72:	e8 0f       	add	r30, r24
    5a74:	f9 1f       	adc	r31, r25
    5a76:	83 81       	ldd	r24, Z+3	; 0x03
    5a78:	94 81       	ldd	r25, Z+4	; 0x04
    5a7a:	da 01       	movw	r26, r20
    5a7c:	8d 93       	st	X+, r24
    5a7e:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    5a80:	85 81       	ldd	r24, Z+5	; 0x05
    5a82:	96 81       	ldd	r25, Z+6	; 0x06
    5a84:	f9 01       	movw	r30, r18
    5a86:	91 83       	std	Z+1, r25	; 0x01
    5a88:	80 83       	st	Z, r24
    5a8a:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00005de2 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    5de2:	80 91 87 0f 	lds	r24, 0x0F87	; 0x800f87 <cnt>
    5de6:	90 91 88 0f 	lds	r25, 0x0F88	; 0x800f88 <cnt+0x1>
    5dea:	01 96       	adiw	r24, 0x01	; 1
    5dec:	90 93 88 0f 	sts	0x0F88, r25	; 0x800f88 <cnt+0x1>
    5df0:	80 93 87 0f 	sts	0x0F87, r24	; 0x800f87 <cnt>
	if(cnt>=_seconds){
    5df4:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    5df8:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    5dfc:	82 17       	cp	r24, r18
    5dfe:	93 07       	cpc	r25, r19
    5e00:	38 f0       	brcs	.+14     	; 0x5e10 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    5e02:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <eventPointer>
    5e06:	0e 94 2a 2c 	call	0x5854	; 0x5854 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5e0a:	80 e0       	ldi	r24, 0x00	; 0
    5e0c:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <PM_HAL_BC_power>
    5e10:	08 95       	ret

Disassembly of section .text.PUMP_start:

00005ff0 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    5ff0:	10 92 88 0f 	sts	0x0F88, r1	; 0x800f88 <cnt+0x1>
    5ff4:	10 92 87 0f 	sts	0x0F87, r1	; 0x800f87 <cnt>
	_seconds=seconds;
    5ff8:	90 93 8a 0f 	sts	0x0F8A, r25	; 0x800f8a <_seconds+0x1>
    5ffc:	80 93 89 0f 	sts	0x0F89, r24	; 0x800f89 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    6000:	81 ef       	ldi	r24, 0xF1	; 241
    6002:	9e e2       	ldi	r25, 0x2E	; 46
    6004:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <TC2_HAL_subscribe>
    6008:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <eventPointer>
	PM_HAL_BC_power(true);
    600c:	81 e0       	ldi	r24, 0x01	; 1
    600e:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <PM_HAL_BC_power>
    6012:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

0000630e <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    630e:	40 91 87 0f 	lds	r20, 0x0F87	; 0x800f87 <cnt>
    6312:	50 91 88 0f 	lds	r21, 0x0F88	; 0x800f88 <cnt+0x1>
    6316:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    631a:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    631e:	81 e0       	ldi	r24, 0x01	; 1
    6320:	42 17       	cp	r20, r18
    6322:	53 07       	cpc	r21, r19
    6324:	08 f4       	brcc	.+2      	; 0x6328 <PUMP_is_done+0x1a>
    6326:	80 e0       	ldi	r24, 0x00	; 0
}
    6328:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00002b7c <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2b7c:	1f 93       	push	r17
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <datetime_to_BCD+0x8>
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <datetime_to_BCD+0xa>
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <datetime_to_BCD+0xc>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	f9 01       	movw	r30, r18
    2b8e:	3d ec       	ldi	r19, 0xCD	; 205
    2b90:	43 9f       	mul	r20, r19
    2b92:	21 2d       	mov	r18, r1
    2b94:	11 24       	eor	r1, r1
    2b96:	26 95       	lsr	r18
    2b98:	26 95       	lsr	r18
    2b9a:	26 95       	lsr	r18
    2b9c:	10 e1       	ldi	r17, 0x10	; 16
    2b9e:	21 9f       	mul	r18, r17
    2ba0:	d0 01       	movw	r26, r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	22 0f       	add	r18, r18
    2ba6:	b2 2f       	mov	r27, r18
    2ba8:	bb 0f       	add	r27, r27
    2baa:	bb 0f       	add	r27, r27
    2bac:	2b 0f       	add	r18, r27
    2bae:	42 1b       	sub	r20, r18
    2bb0:	4a 2b       	or	r20, r26
    2bb2:	40 83       	st	Z, r20
    2bb4:	53 9f       	mul	r21, r19
    2bb6:	21 2d       	mov	r18, r1
    2bb8:	11 24       	eor	r1, r1
    2bba:	26 95       	lsr	r18
    2bbc:	26 95       	lsr	r18
    2bbe:	26 95       	lsr	r18
    2bc0:	40 e1       	ldi	r20, 0x10	; 16
    2bc2:	24 9f       	mul	r18, r20
    2bc4:	d0 01       	movw	r26, r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	22 0f       	add	r18, r18
    2bca:	42 2f       	mov	r20, r18
    2bcc:	44 0f       	add	r20, r20
    2bce:	44 0f       	add	r20, r20
    2bd0:	24 0f       	add	r18, r20
    2bd2:	52 1b       	sub	r21, r18
    2bd4:	5a 2b       	or	r21, r26
    2bd6:	51 83       	std	Z+1, r21	; 0x01
    2bd8:	63 9f       	mul	r22, r19
    2bda:	41 2d       	mov	r20, r1
    2bdc:	11 24       	eor	r1, r1
    2bde:	46 95       	lsr	r20
    2be0:	46 95       	lsr	r20
    2be2:	46 95       	lsr	r20
    2be4:	10 e1       	ldi	r17, 0x10	; 16
    2be6:	41 9f       	mul	r20, r17
    2be8:	d0 01       	movw	r26, r0
    2bea:	11 24       	eor	r1, r1
    2bec:	44 0f       	add	r20, r20
    2bee:	24 2f       	mov	r18, r20
    2bf0:	22 0f       	add	r18, r18
    2bf2:	22 0f       	add	r18, r18
    2bf4:	42 0f       	add	r20, r18
    2bf6:	64 1b       	sub	r22, r20
    2bf8:	6a 2b       	or	r22, r26
    2bfa:	62 83       	std	Z+2, r22	; 0x02
    2bfc:	73 9f       	mul	r23, r19
    2bfe:	41 2d       	mov	r20, r1
    2c00:	11 24       	eor	r1, r1
    2c02:	46 95       	lsr	r20
    2c04:	46 95       	lsr	r20
    2c06:	46 95       	lsr	r20
    2c08:	20 e1       	ldi	r18, 0x10	; 16
    2c0a:	42 9f       	mul	r20, r18
    2c0c:	d0 01       	movw	r26, r0
    2c0e:	11 24       	eor	r1, r1
    2c10:	44 0f       	add	r20, r20
    2c12:	24 2f       	mov	r18, r20
    2c14:	22 0f       	add	r18, r18
    2c16:	22 0f       	add	r18, r18
    2c18:	42 0f       	add	r20, r18
    2c1a:	74 1b       	sub	r23, r20
    2c1c:	7a 2b       	or	r23, r26
    2c1e:	73 83       	std	Z+3, r23	; 0x03
    2c20:	83 9f       	mul	r24, r19
    2c22:	41 2d       	mov	r20, r1
    2c24:	11 24       	eor	r1, r1
    2c26:	46 95       	lsr	r20
    2c28:	46 95       	lsr	r20
    2c2a:	46 95       	lsr	r20
    2c2c:	10 e1       	ldi	r17, 0x10	; 16
    2c2e:	41 9f       	mul	r20, r17
    2c30:	b0 01       	movw	r22, r0
    2c32:	11 24       	eor	r1, r1
    2c34:	44 0f       	add	r20, r20
    2c36:	24 2f       	mov	r18, r20
    2c38:	22 0f       	add	r18, r18
    2c3a:	22 0f       	add	r18, r18
    2c3c:	42 0f       	add	r20, r18
    2c3e:	84 1b       	sub	r24, r20
    2c40:	86 2b       	or	r24, r22
    2c42:	84 83       	std	Z+4, r24	; 0x04
    2c44:	93 9f       	mul	r25, r19
    2c46:	31 2d       	mov	r19, r1
    2c48:	11 24       	eor	r1, r1
    2c4a:	36 95       	lsr	r19
    2c4c:	36 95       	lsr	r19
    2c4e:	36 95       	lsr	r19
    2c50:	20 e1       	ldi	r18, 0x10	; 16
    2c52:	32 9f       	mul	r19, r18
    2c54:	a0 01       	movw	r20, r0
    2c56:	11 24       	eor	r1, r1
    2c58:	33 0f       	add	r19, r19
    2c5a:	83 2f       	mov	r24, r19
    2c5c:	88 0f       	add	r24, r24
    2c5e:	88 0f       	add	r24, r24
    2c60:	38 0f       	add	r19, r24
    2c62:	93 1b       	sub	r25, r19
    2c64:	94 2b       	or	r25, r20
    2c66:	95 83       	std	Z+5, r25	; 0x05
    2c68:	26 96       	adiw	r28, 0x06	; 6
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004d8e <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	00 d0       	rcall	.+0      	; 0x4d94 <RTC_set_clock_out+0x6>
    4d94:	cd b7       	in	r28, 0x3d	; 61
    4d96:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    4d98:	9d e0       	ldi	r25, 0x0D	; 13
    4d9a:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    4d9c:	81 30       	cpi	r24, 0x01	; 1
    4d9e:	31 f0       	breq	.+12     	; 0x4dac <RTC_set_clock_out+0x1e>
    4da0:	18 f0       	brcs	.+6      	; 0x4da8 <RTC_set_clock_out+0x1a>
    4da2:	80 32       	cpi	r24, 0x20	; 32
    4da4:	31 f0       	breq	.+12     	; 0x4db2 <RTC_set_clock_out+0x24>
    4da6:	13 c0       	rjmp	.+38     	; 0x4dce <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    4da8:	1a 82       	std	Y+2, r1	; 0x02
			break;
    4daa:	05 c0       	rjmp	.+10     	; 0x4db6 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    4dac:	83 e8       	ldi	r24, 0x83	; 131
    4dae:	8a 83       	std	Y+2, r24	; 0x02
			break;
    4db0:	02 c0       	rjmp	.+4      	; 0x4db6 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    4db2:	82 e8       	ldi	r24, 0x82	; 130
    4db4:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    4db6:	ae 01       	movw	r20, r28
    4db8:	4f 5f       	subi	r20, 0xFF	; 255
    4dba:	5f 4f       	sbci	r21, 0xFF	; 255
    4dbc:	60 e8       	ldi	r22, 0x80	; 128
    4dbe:	22 e0       	ldi	r18, 0x02	; 2
    4dc0:	81 e5       	ldi	r24, 0x51	; 81
    4dc2:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4dc6:	88 23       	and	r24, r24
    4dc8:	21 f0       	breq	.+8      	; 0x4dd2 <RTC_set_clock_out+0x44>
    4dca:	82 e0       	ldi	r24, 0x02	; 2
    4dcc:	03 c0       	rjmp	.+6      	; 0x4dd4 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    4dce:	81 e0       	ldi	r24, 0x01	; 1
    4dd0:	01 c0       	rjmp	.+2      	; 0x4dd4 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
}
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00005b62 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    5b62:	cf 93       	push	r28
    5b64:	df 93       	push	r29
    5b66:	00 d0       	rcall	.+0      	; 0x5b68 <RTC_clear_wake_up_interrupt+0x6>
    5b68:	cd b7       	in	r28, 0x3d	; 61
    5b6a:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	89 83       	std	Y+1, r24	; 0x01
    5b70:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    5b72:	ae 01       	movw	r20, r28
    5b74:	4f 5f       	subi	r20, 0xFF	; 255
    5b76:	5f 4f       	sbci	r21, 0xFF	; 255
    5b78:	60 e8       	ldi	r22, 0x80	; 128
    5b7a:	22 e0       	ldi	r18, 0x02	; 2
    5b7c:	81 e5       	ldi	r24, 0x51	; 81
    5b7e:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    5b82:	88 23       	and	r24, r24
    5b84:	11 f0       	breq	.+4      	; 0x5b8a <RTC_clear_wake_up_interrupt+0x28>
    5b86:	82 e0       	ldi	r24, 0x02	; 2
    5b88:	01 c0       	rjmp	.+2      	; 0x5b8c <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
}
    5b8c:	0f 90       	pop	r0
    5b8e:	0f 90       	pop	r0
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00002374 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	27 97       	sbiw	r28, 0x07	; 7
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	8c 01       	movw	r16, r24
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	4e ec       	ldi	r20, 0xCE	; 206
    2392:	58 e0       	ldi	r21, 0x08	; 8
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	81 e5       	ldi	r24, 0x51	; 81
    2398:	0e 94 88 32 	call	0x6510	; 0x6510 <TWI_API_write_data>
    239c:	81 11       	cpse	r24, r1
    239e:	7c c0       	rjmp	.+248    	; 0x2498 <RTC_get_current_time+0x124>
    23a0:	47 e0       	ldi	r20, 0x07	; 7
    23a2:	be 01       	movw	r22, r28
    23a4:	6f 5f       	subi	r22, 0xFF	; 255
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255
    23a8:	81 e5       	ldi	r24, 0x51	; 81
    23aa:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <TWI_API_repeat_read_data_stop>
    23ae:	81 11       	cpse	r24, r1
    23b0:	75 c0       	rjmp	.+234    	; 0x249c <RTC_get_current_time+0x128>
    23b2:	29 81       	ldd	r18, Y+1	; 0x01
    23b4:	82 2f       	mov	r24, r18
    23b6:	8f 77       	andi	r24, 0x7F	; 127
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	95 95       	asr	r25
    23bc:	87 95       	ror	r24
    23be:	95 95       	asr	r25
    23c0:	87 95       	ror	r24
    23c2:	95 95       	asr	r25
    23c4:	87 95       	ror	r24
    23c6:	95 95       	asr	r25
    23c8:	87 95       	ror	r24
    23ca:	88 0f       	add	r24, r24
    23cc:	98 2f       	mov	r25, r24
    23ce:	99 0f       	add	r25, r25
    23d0:	99 0f       	add	r25, r25
    23d2:	89 0f       	add	r24, r25
    23d4:	2f 70       	andi	r18, 0x0F	; 15
    23d6:	82 0f       	add	r24, r18
    23d8:	f8 01       	movw	r30, r16
    23da:	80 83       	st	Z, r24
    23dc:	2a 81       	ldd	r18, Y+2	; 0x02
    23de:	82 2f       	mov	r24, r18
    23e0:	8f 77       	andi	r24, 0x7F	; 127
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	95 95       	asr	r25
    23e6:	87 95       	ror	r24
    23e8:	95 95       	asr	r25
    23ea:	87 95       	ror	r24
    23ec:	95 95       	asr	r25
    23ee:	87 95       	ror	r24
    23f0:	95 95       	asr	r25
    23f2:	87 95       	ror	r24
    23f4:	88 0f       	add	r24, r24
    23f6:	98 2f       	mov	r25, r24
    23f8:	99 0f       	add	r25, r25
    23fa:	99 0f       	add	r25, r25
    23fc:	89 0f       	add	r24, r25
    23fe:	2f 70       	andi	r18, 0x0F	; 15
    2400:	82 0f       	add	r24, r18
    2402:	81 83       	std	Z+1, r24	; 0x01
    2404:	2b 81       	ldd	r18, Y+3	; 0x03
    2406:	82 2f       	mov	r24, r18
    2408:	8f 73       	andi	r24, 0x3F	; 63
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	95 95       	asr	r25
    240e:	87 95       	ror	r24
    2410:	95 95       	asr	r25
    2412:	87 95       	ror	r24
    2414:	95 95       	asr	r25
    2416:	87 95       	ror	r24
    2418:	95 95       	asr	r25
    241a:	87 95       	ror	r24
    241c:	88 0f       	add	r24, r24
    241e:	98 2f       	mov	r25, r24
    2420:	99 0f       	add	r25, r25
    2422:	99 0f       	add	r25, r25
    2424:	89 0f       	add	r24, r25
    2426:	2f 70       	andi	r18, 0x0F	; 15
    2428:	82 0f       	add	r24, r18
    242a:	82 83       	std	Z+2, r24	; 0x02
    242c:	2c 81       	ldd	r18, Y+4	; 0x04
    242e:	82 2f       	mov	r24, r18
    2430:	8f 73       	andi	r24, 0x3F	; 63
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	95 95       	asr	r25
    2436:	87 95       	ror	r24
    2438:	95 95       	asr	r25
    243a:	87 95       	ror	r24
    243c:	95 95       	asr	r25
    243e:	87 95       	ror	r24
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	88 0f       	add	r24, r24
    2446:	98 2f       	mov	r25, r24
    2448:	99 0f       	add	r25, r25
    244a:	99 0f       	add	r25, r25
    244c:	89 0f       	add	r24, r25
    244e:	2f 70       	andi	r18, 0x0F	; 15
    2450:	82 0f       	add	r24, r18
    2452:	83 83       	std	Z+3, r24	; 0x03
    2454:	2e 81       	ldd	r18, Y+6	; 0x06
    2456:	82 2f       	mov	r24, r18
    2458:	8f 71       	andi	r24, 0x1F	; 31
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	95 95       	asr	r25
    245e:	87 95       	ror	r24
    2460:	95 95       	asr	r25
    2462:	87 95       	ror	r24
    2464:	95 95       	asr	r25
    2466:	87 95       	ror	r24
    2468:	95 95       	asr	r25
    246a:	87 95       	ror	r24
    246c:	88 0f       	add	r24, r24
    246e:	98 2f       	mov	r25, r24
    2470:	99 0f       	add	r25, r25
    2472:	99 0f       	add	r25, r25
    2474:	89 0f       	add	r24, r25
    2476:	2f 70       	andi	r18, 0x0F	; 15
    2478:	82 0f       	add	r24, r18
    247a:	84 83       	std	Z+4, r24	; 0x04
    247c:	8f 81       	ldd	r24, Y+7	; 0x07
    247e:	98 2f       	mov	r25, r24
    2480:	92 95       	swap	r25
    2482:	9f 70       	andi	r25, 0x0F	; 15
    2484:	99 0f       	add	r25, r25
    2486:	29 2f       	mov	r18, r25
    2488:	22 0f       	add	r18, r18
    248a:	22 0f       	add	r18, r18
    248c:	92 0f       	add	r25, r18
    248e:	8f 70       	andi	r24, 0x0F	; 15
    2490:	89 0f       	add	r24, r25
    2492:	85 83       	std	Z+5, r24	; 0x05
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	03 c0       	rjmp	.+6      	; 0x249e <RTC_get_current_time+0x12a>
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	01 c0       	rjmp	.+2      	; 0x249e <RTC_get_current_time+0x12a>
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	27 96       	adiw	r28, 0x07	; 7
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

00003570 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    3570:	1f 93       	push	r17
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	2d 97       	sbiw	r28, 0x0d	; 13
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    3590:	85 e0       	ldi	r24, 0x05	; 5
    3592:	ea e5       	ldi	r30, 0x5A	; 90
    3594:	ff e0       	ldi	r31, 0x0F	; 15
    3596:	de 01       	movw	r26, r28
    3598:	13 96       	adiw	r26, 0x03	; 3
    359a:	01 90       	ld	r0, Z+
    359c:	0d 92       	st	X+, r0
    359e:	8a 95       	dec	r24
    35a0:	e1 f7       	brne	.-8      	; 0x359a <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    35a2:	ce 01       	movw	r24, r28
    35a4:	08 96       	adiw	r24, 0x08	; 8
    35a6:	0e 94 ba 11 	call	0x2374	; 0x2374 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    35aa:	89 85       	ldd	r24, Y+9	; 0x09
    35ac:	81 0f       	add	r24, r17
	dt.minute %= 60;
    35ae:	99 e8       	ldi	r25, 0x89	; 137
    35b0:	89 9f       	mul	r24, r25
    35b2:	91 2d       	mov	r25, r1
    35b4:	11 24       	eor	r1, r1
    35b6:	92 95       	swap	r25
    35b8:	96 95       	lsr	r25
    35ba:	97 70       	andi	r25, 0x07	; 7
    35bc:	2c e3       	ldi	r18, 0x3C	; 60
    35be:	92 9f       	mul	r25, r18
    35c0:	80 19       	sub	r24, r0
    35c2:	11 24       	eor	r1, r1
    35c4:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    35c6:	ae 01       	movw	r20, r28
    35c8:	4f 5f       	subi	r20, 0xFF	; 255
    35ca:	5f 4f       	sbci	r21, 0xFF	; 255
    35cc:	60 e8       	ldi	r22, 0x80	; 128
    35ce:	22 e0       	ldi	r18, 0x02	; 2
    35d0:	81 e5       	ldi	r24, 0x51	; 81
    35d2:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    35d6:	81 11       	cpse	r24, r1
    35d8:	20 c0       	rjmp	.+64     	; 0x361a <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    35da:	99 85       	ldd	r25, Y+9	; 0x09
    35dc:	8d ec       	ldi	r24, 0xCD	; 205
    35de:	98 9f       	mul	r25, r24
    35e0:	81 2d       	mov	r24, r1
    35e2:	11 24       	eor	r1, r1
    35e4:	86 95       	lsr	r24
    35e6:	86 95       	lsr	r24
    35e8:	86 95       	lsr	r24
    35ea:	40 e1       	ldi	r20, 0x10	; 16
    35ec:	84 9f       	mul	r24, r20
    35ee:	90 01       	movw	r18, r0
    35f0:	11 24       	eor	r1, r1
    35f2:	88 0f       	add	r24, r24
    35f4:	38 2f       	mov	r19, r24
    35f6:	33 0f       	add	r19, r19
    35f8:	33 0f       	add	r19, r19
    35fa:	83 0f       	add	r24, r19
    35fc:	98 1b       	sub	r25, r24
    35fe:	92 2b       	or	r25, r18
    3600:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    3602:	ae 01       	movw	r20, r28
    3604:	4d 5f       	subi	r20, 0xFD	; 253
    3606:	5f 4f       	sbci	r21, 0xFF	; 255
    3608:	60 e8       	ldi	r22, 0x80	; 128
    360a:	25 e0       	ldi	r18, 0x05	; 5
    360c:	81 e5       	ldi	r24, 0x51	; 81
    360e:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3612:	88 23       	and	r24, r24
    3614:	21 f0       	breq	.+8      	; 0x361e <RTC_set_wake_up_interrupt_minutes+0xae>
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	03 c0       	rjmp	.+6      	; 0x3620 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	01 c0       	rjmp	.+2      	; 0x3620 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    361e:	80 e0       	ldi	r24, 0x00	; 0
}
    3620:	2d 96       	adiw	r28, 0x0d	; 13
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

0000489e <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	cd b7       	in	r28, 0x3d	; 61
    48a4:	de b7       	in	r29, 0x3e	; 62
    48a6:	64 97       	sbiw	r28, 0x14	; 20
    48a8:	0f b6       	in	r0, 0x3f	; 63
    48aa:	f8 94       	cli
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    48b2:	9e 01       	movw	r18, r28
    48b4:	27 5f       	subi	r18, 0xF7	; 247
    48b6:	3f 4f       	sbci	r19, 0xFF	; 255
    48b8:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <datetime_to_BCD>
	
	data[0]=0x02;
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    48c0:	89 85       	ldd	r24, Y+9	; 0x09
    48c2:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    48c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c6:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    48c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    48ca:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    48cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    48ce:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    48d0:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    48d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48d4:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    48d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    48d8:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    48da:	ae 01       	movw	r20, r28
    48dc:	4f 5f       	subi	r20, 0xFF	; 255
    48de:	5f 4f       	sbci	r21, 0xFF	; 255
    48e0:	60 e8       	ldi	r22, 0x80	; 128
    48e2:	28 e0       	ldi	r18, 0x08	; 8
    48e4:	81 e5       	ldi	r24, 0x51	; 81
    48e6:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    48ea:	88 23       	and	r24, r24
    48ec:	11 f0       	breq	.+4      	; 0x48f2 <RTC_set_current_time+0x54>
    48ee:	82 e0       	ldi	r24, 0x02	; 2
    48f0:	01 c0       	rjmp	.+2      	; 0x48f4 <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    48f2:	80 e0       	ldi	r24, 0x00	; 0
}
    48f4:	64 96       	adiw	r28, 0x14	; 20
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

0000271e <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    271e:	4f 92       	push	r4
    2720:	5f 92       	push	r5
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	00 d0       	rcall	.+0      	; 0x2740 <RTC_datetime_to_ts+0x22>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <RTC_datetime_to_ts+0x24>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <RTC_datetime_to_ts+0x26>
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	f9 01       	movw	r30, r18
    274a:	49 2e       	mov	r4, r25
    274c:	51 2c       	mov	r5, r1
    274e:	61 2c       	mov	r6, r1
    2750:	71 2c       	mov	r7, r1
    2752:	03 2e       	mov	r0, r19
    2754:	3a e1       	ldi	r19, 0x1A	; 26
    2756:	44 0c       	add	r4, r4
    2758:	55 1c       	adc	r5, r5
    275a:	66 1c       	adc	r6, r6
    275c:	77 1c       	adc	r7, r7
    275e:	3a 95       	dec	r19
    2760:	d1 f7       	brne	.-12     	; 0x2756 <RTC_datetime_to_ts+0x38>
    2762:	30 2d       	mov	r19, r0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e0       	ldi	r26, 0x00	; 0
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	07 2e       	mov	r0, r23
    276c:	76 e1       	ldi	r23, 0x16	; 22
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	aa 1f       	adc	r26, r26
    2774:	bb 1f       	adc	r27, r27
    2776:	7a 95       	dec	r23
    2778:	d1 f7       	brne	.-12     	; 0x276e <RTC_datetime_to_ts+0x50>
    277a:	70 2d       	mov	r23, r0
    277c:	84 29       	or	r24, r4
    277e:	95 29       	or	r25, r5
    2780:	a6 29       	or	r26, r6
    2782:	b7 29       	or	r27, r7
    2784:	87 2e       	mov	r8, r23
    2786:	91 2c       	mov	r9, r1
    2788:	a1 2c       	mov	r10, r1
    278a:	b1 2c       	mov	r11, r1
    278c:	07 2e       	mov	r0, r23
    278e:	71 e1       	ldi	r23, 0x11	; 17
    2790:	88 0c       	add	r8, r8
    2792:	99 1c       	adc	r9, r9
    2794:	aa 1c       	adc	r10, r10
    2796:	bb 1c       	adc	r11, r11
    2798:	7a 95       	dec	r23
    279a:	d1 f7       	brne	.-12     	; 0x2790 <RTC_datetime_to_ts+0x72>
    279c:	70 2d       	mov	r23, r0
    279e:	88 29       	or	r24, r8
    27a0:	99 29       	or	r25, r9
    27a2:	aa 29       	or	r26, r10
    27a4:	bb 29       	or	r27, r11
    27a6:	c6 2e       	mov	r12, r22
    27a8:	d1 2c       	mov	r13, r1
    27aa:	e1 2c       	mov	r14, r1
    27ac:	f1 2c       	mov	r15, r1
    27ae:	0b 2e       	mov	r0, r27
    27b0:	bc e0       	ldi	r27, 0x0C	; 12
    27b2:	cc 0c       	add	r12, r12
    27b4:	dd 1c       	adc	r13, r13
    27b6:	ee 1c       	adc	r14, r14
    27b8:	ff 1c       	adc	r15, r15
    27ba:	ba 95       	dec	r27
    27bc:	d1 f7       	brne	.-12     	; 0x27b2 <RTC_datetime_to_ts+0x94>
    27be:	b0 2d       	mov	r27, r0
    27c0:	8c 29       	or	r24, r12
    27c2:	9d 29       	or	r25, r13
    27c4:	ae 29       	or	r26, r14
    27c6:	bf 29       	or	r27, r15
    27c8:	05 2f       	mov	r16, r21
    27ca:	10 e0       	ldi	r17, 0x00	; 0
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	00 0f       	add	r16, r16
    27d2:	11 1f       	adc	r17, r17
    27d4:	22 1f       	adc	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	00 0f       	add	r16, r16
    27da:	11 1f       	adc	r17, r17
    27dc:	22 1f       	adc	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	00 0f       	add	r16, r16
    27e2:	11 1f       	adc	r17, r17
    27e4:	22 1f       	adc	r18, r18
    27e6:	33 1f       	adc	r19, r19
    27e8:	00 0f       	add	r16, r16
    27ea:	11 1f       	adc	r17, r17
    27ec:	22 1f       	adc	r18, r18
    27ee:	33 1f       	adc	r19, r19
    27f0:	00 0f       	add	r16, r16
    27f2:	11 1f       	adc	r17, r17
    27f4:	22 1f       	adc	r18, r18
    27f6:	33 1f       	adc	r19, r19
    27f8:	00 0f       	add	r16, r16
    27fa:	11 1f       	adc	r17, r17
    27fc:	22 1f       	adc	r18, r18
    27fe:	33 1f       	adc	r19, r19
    2800:	80 2b       	or	r24, r16
    2802:	91 2b       	or	r25, r17
    2804:	a2 2b       	or	r26, r18
    2806:	b3 2b       	or	r27, r19
    2808:	84 2b       	or	r24, r20
    280a:	b0 83       	st	Z, r27
    280c:	a1 83       	std	Z+1, r26	; 0x01
    280e:	92 83       	std	Z+2, r25	; 0x02
    2810:	83 83       	std	Z+3, r24	; 0x03
    2812:	26 96       	adiw	r28, 0x06	; 6
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	bf 90       	pop	r11
    2830:	af 90       	pop	r10
    2832:	9f 90       	pop	r9
    2834:	8f 90       	pop	r8
    2836:	7f 90       	pop	r7
    2838:	6f 90       	pop	r6
    283a:	5f 90       	pop	r5
    283c:	4f 90       	pop	r4
    283e:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00006396 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    6396:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    6398:	54 81       	ldd	r21, Z+4	; 0x04
    639a:	43 81       	ldd	r20, Z+3	; 0x03
    639c:	31 81       	ldd	r19, Z+1	; 0x01
    639e:	20 81       	ld	r18, Z
    63a0:	65 2f       	mov	r22, r21
    63a2:	74 2f       	mov	r23, r20
    63a4:	83 2f       	mov	r24, r19
    63a6:	92 2f       	mov	r25, r18
    63a8:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__fixunssfsi>
}
    63ac:	cb 01       	movw	r24, r22
    63ae:	08 95       	ret

Disassembly of section .text.init_measurement:

000059e6 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    59e6:	25 e0       	ldi	r18, 0x05	; 5
    59e8:	4f eb       	ldi	r20, 0xBF	; 191
    59ea:	58 e0       	ldi	r21, 0x08	; 8
    59ec:	60 e0       	ldi	r22, 0x00	; 0
    59ee:	81 e6       	ldi	r24, 0x61	; 97
    59f0:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    59f4:	81 11       	cpse	r24, r1
    59f6:	0f c0       	rjmp	.+30     	; 0x5a16 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    59f8:	25 e0       	ldi	r18, 0x05	; 5
    59fa:	44 ec       	ldi	r20, 0xC4	; 196
    59fc:	58 e0       	ldi	r21, 0x08	; 8
    59fe:	60 e0       	ldi	r22, 0x00	; 0
    5a00:	81 e6       	ldi	r24, 0x61	; 97
    5a02:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a06:	81 11       	cpse	r24, r1
    5a08:	08 c0       	rjmp	.+16     	; 0x5a1a <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    5a0a:	0e 94 0f 34 	call	0x681e	; 0x681e <SCD30_HAL_data_ready>
    5a0e:	88 23       	and	r24, r24
    5a10:	e1 f3       	breq	.-8      	; 0x5a0a <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    5a12:	80 e0       	ldi	r24, 0x00	; 0
    5a14:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a16:	82 e0       	ldi	r24, 0x02	; 2
    5a18:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a1a:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    5a1c:	08 95       	ret

Disassembly of section .text.validate_data:

00005c2e <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    5c2e:	cf 93       	push	r28
    5c30:	df 93       	push	r29
    5c32:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    5c34:	62 e0       	ldi	r22, 0x02	; 2
    5c36:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <calc_crc8>
	if(data[2]!=crc) return false;
    5c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c3c:	89 13       	cpse	r24, r25
    5c3e:	0a c0       	rjmp	.+20     	; 0x5c54 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    5c40:	62 e0       	ldi	r22, 0x02	; 2
    5c42:	ce 01       	movw	r24, r28
    5c44:	03 96       	adiw	r24, 0x03	; 3
    5c46:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <calc_crc8>
	if(data[5]!=crc) return false;
    5c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    5c4c:	89 17       	cp	r24, r25
    5c4e:	21 f0       	breq	.+8      	; 0x5c58 <validate_data+0x2a>
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	03 c0       	rjmp	.+6      	; 0x5c5a <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	01 c0       	rjmp	.+2      	; 0x5c5a <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    5c58:	81 e0       	ldi	r24, 0x01	; 1
}
    5c5a:	df 91       	pop	r29
    5c5c:	cf 91       	pop	r28
    5c5e:	08 95       	ret

Disassembly of section .text.read_value:

00003c52 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    3c52:	0f 93       	push	r16
    3c54:	1f 93       	push	r17
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	00 d0       	rcall	.+0      	; 0x3c5c <read_value+0xa>
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <read_value+0xc>
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <read_value+0xe>
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    3c66:	8f ef       	ldi	r24, 0xFF	; 255
    3c68:	9f ef       	ldi	r25, 0xFF	; 255
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    3c70:	0e 94 0f 34 	call	0x681e	; 0x681e <SCD30_HAL_data_ready>
    3c74:	81 11       	cpse	r24, r1
    3c76:	07 c0       	rjmp	.+14     	; 0x3c86 <read_value+0x34>
		*value=0xfffe;
    3c78:	8e ef       	ldi	r24, 0xFE	; 254
    3c7a:	9f ef       	ldi	r25, 0xFF	; 255
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3c82:	83 e0       	ldi	r24, 0x03	; 3
    3c84:	2c c0       	rjmp	.+88     	; 0x3cde <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3c86:	22 e0       	ldi	r18, 0x02	; 2
    3c88:	4c ec       	ldi	r20, 0xCC	; 204
    3c8a:	58 e0       	ldi	r21, 0x08	; 8
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	81 e6       	ldi	r24, 0x61	; 97
    3c90:	0e 94 b1 31 	call	0x6362	; 0x6362 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3c94:	81 11       	cpse	r24, r1
    3c96:	1e c0       	rjmp	.+60     	; 0x3cd4 <read_value+0x82>
    3c98:	8f e3       	ldi	r24, 0x3F	; 63
    3c9a:	9f e1       	ldi	r25, 0x1F	; 31
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <read_value+0x4a>
    3ca0:	00 c0       	rjmp	.+0      	; 0x3ca2 <read_value+0x50>
    3ca2:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    3ca4:	46 e0       	ldi	r20, 0x06	; 6
    3ca6:	be 01       	movw	r22, r28
    3ca8:	6f 5f       	subi	r22, 0xFF	; 255
    3caa:	7f 4f       	sbci	r23, 0xFF	; 255
    3cac:	81 e6       	ldi	r24, 0x61	; 97
    3cae:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3cb2:	81 11       	cpse	r24, r1
    3cb4:	11 c0       	rjmp	.+34     	; 0x3cd8 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	01 96       	adiw	r24, 0x01	; 1
    3cba:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <validate_data>
    3cbe:	88 23       	and	r24, r24
    3cc0:	69 f0       	breq	.+26     	; 0x3cdc <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    3cc2:	ce 01       	movw	r24, r28
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	0e 94 cb 31 	call	0x6396	; 0x6396 <bytes_2_uint>
    3cca:	f8 01       	movw	r30, r16
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	05 c0       	rjmp	.+10     	; 0x3cde <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	03 c0       	rjmp	.+6      	; 0x3cde <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	01 c0       	rjmp	.+2      	; 0x3cde <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    3cde:	26 96       	adiw	r28, 0x06	; 6
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

0000544a <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    544a:	80 91 8d 0f 	lds	r24, 0x0F8D	; 0x800f8d <_data>
    544e:	90 91 8e 0f 	lds	r25, 0x0F8E	; 0x800f8e <_data+0x1>
    5452:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    5456:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    545a:	a9 01       	movw	r20, r18
    545c:	4f 5f       	subi	r20, 0xFF	; 255
    545e:	5f 4f       	sbci	r21, 0xFF	; 255
    5460:	50 93 8c 0f 	sts	0x0F8C, r21	; 0x800f8c <cntSamples+0x1>
    5464:	40 93 8b 0f 	sts	0x0F8B, r20	; 0x800f8b <cntSamples>
    5468:	22 0f       	add	r18, r18
    546a:	33 1f       	adc	r19, r19
    546c:	82 0f       	add	r24, r18
    546e:	93 1f       	adc	r25, r19
    5470:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <read_value>
	if(cntSamples>=_nSamples){
    5474:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    5478:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    547c:	80 91 8f 0f 	lds	r24, 0x0F8F	; 0x800f8f <_nSamples>
    5480:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <_nSamples+0x1>
    5484:	28 17       	cp	r18, r24
    5486:	39 07       	cpc	r19, r25
    5488:	10 f0       	brcs	.+4      	; 0x548e <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    548a:	0e 94 af 33 	call	0x675e	; 0x675e <TC1_HAL_stop>
    548e:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

000060c2 <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    60c2:	0e 94 2b 33 	call	0x6656	; 0x6656 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    60c6:	81 e0       	ldi	r24, 0x01	; 1
    60c8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <PM_HAL_SCD30_power>
    60cc:	2f ef       	ldi	r18, 0xFF	; 255
    60ce:	83 ed       	ldi	r24, 0xD3	; 211
    60d0:	90 e3       	ldi	r25, 0x30	; 48
    60d2:	21 50       	subi	r18, 0x01	; 1
    60d4:	80 40       	sbci	r24, 0x00	; 0
    60d6:	90 40       	sbci	r25, 0x00	; 0
    60d8:	e1 f7       	brne	.-8      	; 0x60d2 <SCD30_sensor_on+0x10>
    60da:	00 c0       	rjmp	.+0      	; 0x60dc <SCD30_sensor_on+0x1a>
    60dc:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    60de:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <init_measurement>
}
    60e2:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000068dc <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    68dc:	80 e0       	ldi	r24, 0x00	; 0
    68de:	0e 94 60 32 	call	0x64c0	; 0x64c0 <PM_HAL_SCD30_power>
    68e2:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

000060e4 <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    60e4:	70 93 90 0f 	sts	0x0F90, r23	; 0x800f90 <_nSamples+0x1>
    60e8:	60 93 8f 0f 	sts	0x0F8F, r22	; 0x800f8f <_nSamples>
	cntSamples=0;
    60ec:	10 92 8c 0f 	sts	0x0F8C, r1	; 0x800f8c <cntSamples+0x1>
    60f0:	10 92 8b 0f 	sts	0x0F8B, r1	; 0x800f8b <cntSamples>
	_data=data;
    60f4:	50 93 8e 0f 	sts	0x0F8E, r21	; 0x800f8e <_data+0x1>
    60f8:	40 93 8d 0f 	sts	0x0F8D, r20	; 0x800f8d <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    60fc:	65 e2       	ldi	r22, 0x25	; 37
    60fe:	7a e2       	ldi	r23, 0x2A	; 42
    6100:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <TC1_HAL_init>
    6104:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000066e2 <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    66e2:	0e 94 af 33 	call	0x675e	; 0x675e <TC1_HAL_stop>
	_data=NULL;
    66e6:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <_data+0x1>
    66ea:	10 92 8d 0f 	sts	0x0F8D, r1	; 0x800f8d <_data>
    66ee:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000686e <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    686e:	0e 94 25 2a 	call	0x544a	; 0x544a <vect_SCD_do_sample>
	TC1_HAL_start();
    6872:	0e 94 a9 33 	call	0x6752	; 0x6752 <TC1_HAL_start>
    6876:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

0000632a <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    632a:	40 91 8b 0f 	lds	r20, 0x0F8B	; 0x800f8b <cntSamples>
    632e:	50 91 8c 0f 	lds	r21, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    6332:	20 91 8f 0f 	lds	r18, 0x0F8F	; 0x800f8f <_nSamples>
    6336:	30 91 90 0f 	lds	r19, 0x0F90	; 0x800f90 <_nSamples+0x1>
    633a:	81 e0       	ldi	r24, 0x01	; 1
    633c:	42 17       	cp	r20, r18
    633e:	53 07       	cpc	r21, r19
    6340:	08 f4       	brcc	.+2      	; 0x6344 <SCD30_is_sampling_done+0x1a>
    6342:	80 e0       	ldi	r24, 0x00	; 0
}
    6344:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

000063b0 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    63b6:	0e 94 0f 34 	call	0x681e	; 0x681e <SCD30_HAL_data_ready>
    63ba:	88 23       	and	r24, r24
    63bc:	e1 f3       	breq	.-8      	; 0x63b6 <SCD30_get_reading+0x6>
	
	return read_value(value);
    63be:	ce 01       	movw	r24, r28
    63c0:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <read_value>
}
    63c4:	df 91       	pop	r29
    63c6:	cf 91       	pop	r28
    63c8:	08 95       	ret

Disassembly of section .text.parse_cmd:

00005e12 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5e12:	fc 01       	movw	r30, r24
    5e14:	80 81       	ld	r24, Z
    5e16:	82 37       	cpi	r24, 0x72	; 114
    5e18:	51 f0       	breq	.+20     	; 0x5e2e <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    5e1a:	87 37       	cpi	r24, 0x77	; 119
    5e1c:	51 f0       	breq	.+20     	; 0x5e32 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    5e1e:	83 36       	cpi	r24, 0x63	; 99
    5e20:	51 f0       	breq	.+20     	; 0x5e36 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    5e22:	83 37       	cpi	r24, 0x73	; 115
    5e24:	51 f0       	breq	.+20     	; 0x5e3a <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    5e26:	81 37       	cpi	r24, 0x71	; 113
    5e28:	51 f4       	brne	.+20     	; 0x5e3e <parse_cmd+0x2c>
    5e2a:	84 e0       	ldi	r24, 0x04	; 4
    5e2c:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5e2e:	87 e0       	ldi	r24, 0x07	; 7
    5e30:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    5e32:	88 e0       	ldi	r24, 0x08	; 8
    5e34:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    5e36:	89 e0       	ldi	r24, 0x09	; 9
    5e38:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    5e3a:	8a e0       	ldi	r24, 0x0A	; 10
    5e3c:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    5e3e:	85 e0       	ldi	r24, 0x05	; 5
}
    5e40:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004c3e <validate_cmd>:

static bool validate_cmd(char msg[]){
    4c3e:	cf 93       	push	r28
    4c40:	df 93       	push	r29
    4c42:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    4c44:	bc 01       	movw	r22, r24
    4c46:	80 e8       	ldi	r24, 0x80	; 128
    4c48:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    4c4c:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4c4e:	fc 01       	movw	r30, r24
    4c50:	31 97       	sbiw	r30, 0x01	; 1
    4c52:	ec 0f       	add	r30, r28
    4c54:	fd 1f       	adc	r31, r29
    4c56:	80 81       	ld	r24, Z
    4c58:	80 32       	cpi	r24, 0x20	; 32
    4c5a:	b1 f0       	breq	.+44     	; 0x4c88 <validate_cmd+0x4a>
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	0d c0       	rjmp	.+26     	; 0x4c7e <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    4c64:	fe 01       	movw	r30, r28
    4c66:	e2 0f       	add	r30, r18
    4c68:	f3 1f       	adc	r31, r19
    4c6a:	90 81       	ld	r25, Z
    4c6c:	90 32       	cpi	r25, 0x20	; 32
    4c6e:	21 f4       	brne	.+8      	; 0x4c78 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    4c70:	41 11       	cpse	r20, r1
    4c72:	0c c0       	rjmp	.+24     	; 0x4c8c <validate_cmd+0x4e>
			lastCharWasSpace=true;
    4c74:	41 e0       	ldi	r20, 0x01	; 1
    4c76:	01 c0       	rjmp	.+2      	; 0x4c7a <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    4c78:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    4c7a:	2f 5f       	subi	r18, 0xFF	; 255
    4c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c7e:	26 17       	cp	r18, r22
    4c80:	37 07       	cpc	r19, r23
    4c82:	80 f3       	brcs	.-32     	; 0x4c64 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	03 c0       	rjmp	.+6      	; 0x4c8e <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	01 c0       	rjmp	.+2      	; 0x4c8e <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    4c8e:	df 91       	pop	r29
    4c90:	cf 91       	pop	r28
    4c92:	08 95       	ret

Disassembly of section .text.CONF_enter:

000024b4 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    24b4:	cf 93       	push	r28
	uart1_hal_init();
    24b6:	0e 94 0c 2c 	call	0x5818	; 0x5818 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    24ba:	c0 e0       	ldi	r28, 0x00	; 0
    24bc:	0d c0       	rjmp	.+26     	; 0x24d8 <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    24be:	c2 e0       	ldi	r28, 0x02	; 2
    24c0:	0b c0       	rjmp	.+22     	; 0x24d8 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    24c2:	c5 e0       	ldi	r28, 0x05	; 5
    24c4:	09 c0       	rjmp	.+18     	; 0x24d8 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    24c6:	c6 e0       	ldi	r28, 0x06	; 6
    24c8:	07 c0       	rjmp	.+14     	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    24ca:	c5 e0       	ldi	r28, 0x05	; 5
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    24ce:	c5 e0       	ldi	r28, 0x05	; 5
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    24d2:	c5 e0       	ldi	r28, 0x05	; 5
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    24d6:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    24d8:	ec 2f       	mov	r30, r28
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	ec 30       	cpi	r30, 0x0C	; 12
    24de:	f1 05       	cpc	r31, r1
    24e0:	d8 f7       	brcc	.-10     	; 0x24d8 <CONF_enter+0x24>
    24e2:	e5 5b       	subi	r30, 0xB5	; 181
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	0c 94 03 34 	jmp	0x6806	; 0x6806 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    24ea:	69 ec       	ldi	r22, 0xC9	; 201
    24ec:	75 e0       	ldi	r23, 0x05	; 5
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    24f4:	6f ee       	ldi	r22, 0xEF	; 239
    24f6:	75 e0       	ldi	r23, 0x05	; 5
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				TC2_HAL_init();
    24fe:	0e 94 b4 30 	call	0x6168	; 0x6168 <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2502:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <init_methane_SCD30>
    2506:	81 11       	cpse	r24, r1
    2508:	da cf       	rjmp	.-76     	; 0x24be <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    250a:	61 e1       	ldi	r22, 0x11	; 17
    250c:	76 e0       	ldi	r23, 0x06	; 6
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
					state=CONF_EXIT;
    2514:	c4 e0       	ldi	r28, 0x04	; 4
    2516:	e0 cf       	rjmp	.-64     	; 0x24d8 <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    2518:	0e 94 39 33 	call	0x6672	; 0x6672 <uart1_hal_message_ready>
    251c:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    251e:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2520:	0e 94 40 33 	call	0x6680	; 0x6680 <uart1_hal_rx_full>
    2524:	81 11       	cpse	r24, r1
    2526:	cd cf       	rjmp	.-102    	; 0x24c2 <CONF_enter+0xe>
    2528:	d7 cf       	rjmp	.-82     	; 0x24d8 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    252a:	88 ea       	ldi	r24, 0xA8	; 168
    252c:	97 e0       	ldi	r25, 0x07	; 7
    252e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2532:	88 ea       	ldi	r24, 0xA8	; 168
    2534:	97 e0       	ldi	r25, 0x07	; 7
    2536:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <validate_cmd>
    253a:	88 23       	and	r24, r24
    253c:	21 f2       	breq	.-120    	; 0x24c6 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    253e:	88 ea       	ldi	r24, 0xA8	; 168
    2540:	97 e0       	ldi	r25, 0x07	; 7
    2542:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <parse_cmd>
    2546:	c8 2f       	mov	r28, r24
    2548:	c7 cf       	rjmp	.-114    	; 0x24d8 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    254a:	68 ea       	ldi	r22, 0xA8	; 168
    254c:	77 e0       	ldi	r23, 0x07	; 7
    254e:	80 e8       	ldi	r24, 0x80	; 128
    2550:	40 ee       	ldi	r20, 0xE0	; 224
    2552:	56 e0       	ldi	r21, 0x06	; 6
    2554:	0e 94 88 0c 	call	0x1910	; 0x1910 <handle_read>
    2558:	88 23       	and	r24, r24
    255a:	09 f4       	brne	.+2      	; 0x255e <CONF_enter+0xaa>
    255c:	b6 cf       	rjmp	.-148    	; 0x24ca <CONF_enter+0x16>
					state=CONF_REPLY;
    255e:	cb e0       	ldi	r28, 0x0B	; 11
    2560:	bb cf       	rjmp	.-138    	; 0x24d8 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2562:	68 ea       	ldi	r22, 0xA8	; 168
    2564:	77 e0       	ldi	r23, 0x07	; 7
    2566:	80 e8       	ldi	r24, 0x80	; 128
    2568:	40 ee       	ldi	r20, 0xE0	; 224
    256a:	56 e0       	ldi	r21, 0x06	; 6
    256c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <handle_write>
    2570:	88 23       	and	r24, r24
    2572:	09 f4       	brne	.+2      	; 0x2576 <CONF_enter+0xc2>
    2574:	ac cf       	rjmp	.-168    	; 0x24ce <CONF_enter+0x1a>
					state=CONF_REPLY;
    2576:	cb e0       	ldi	r28, 0x0B	; 11
    2578:	af cf       	rjmp	.-162    	; 0x24d8 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    257a:	68 ea       	ldi	r22, 0xA8	; 168
    257c:	77 e0       	ldi	r23, 0x07	; 7
    257e:	80 e8       	ldi	r24, 0x80	; 128
    2580:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <CONNECT>
    2584:	88 23       	and	r24, r24
    2586:	09 f4       	brne	.+2      	; 0x258a <CONF_enter+0xd6>
    2588:	a4 cf       	rjmp	.-184    	; 0x24d2 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    258a:	c2 e0       	ldi	r28, 0x02	; 2
    258c:	a5 cf       	rjmp	.-182    	; 0x24d8 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    258e:	68 ea       	ldi	r22, 0xA8	; 168
    2590:	77 e0       	ldi	r23, 0x07	; 7
    2592:	80 e8       	ldi	r24, 0x80	; 128
    2594:	40 ee       	ldi	r20, 0xE0	; 224
    2596:	56 e0       	ldi	r21, 0x06	; 6
    2598:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <handle_sample>
    259c:	88 23       	and	r24, r24
    259e:	09 f4       	brne	.+2      	; 0x25a2 <CONF_enter+0xee>
    25a0:	9a cf       	rjmp	.-204    	; 0x24d6 <CONF_enter+0x22>
					state=CONF_REPLY;
    25a2:	cb e0       	ldi	r28, 0x0B	; 11
    25a4:	99 cf       	rjmp	.-206    	; 0x24d8 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    25a6:	60 ee       	ldi	r22, 0xE0	; 224
    25a8:	76 e0       	ldi	r23, 0x06	; 6
    25aa:	80 e8       	ldi	r24, 0x80	; 128
    25ac:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25b0:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    25b2:	92 cf       	rjmp	.-220    	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    25b4:	60 e3       	ldi	r22, 0x30	; 48
    25b6:	76 e0       	ldi	r23, 0x06	; 6
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25be:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    25c0:	8b cf       	rjmp	.-234    	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    25c2:	6a e3       	ldi	r22, 0x3A	; 58
    25c4:	76 e0       	ldi	r23, 0x06	; 6
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25cc:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    25ce:	84 cf       	rjmp	.-248    	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    25d0:	0e 94 1e 34 	call	0x683c	; 0x683c <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    25d4:	67 e4       	ldi	r22, 0x47	; 71
    25d6:	76 e0       	ldi	r23, 0x06	; 6
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    25de:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    25e0:	7b cf       	rjmp	.-266    	; 0x24d8 <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    25e2:	6d e6       	ldi	r22, 0x6D	; 109
    25e4:	76 e0       	ldi	r23, 0x06	; 6
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				return;
		}
	}
}
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00004760 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    4760:	cf 92       	push	r12
    4762:	df 92       	push	r13
    4764:	ef 92       	push	r14
    4766:	0f 93       	push	r16
    4768:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    476a:	6c 01       	movw	r12, r24
    476c:	20 e8       	ldi	r18, 0x80	; 128
    476e:	e2 2e       	mov	r14, r18
    4770:	04 e0       	ldi	r16, 0x04	; 4
    4772:	10 e0       	ldi	r17, 0x00	; 0
    4774:	20 e2       	ldi	r18, 0x20	; 32
    4776:	37 e0       	ldi	r19, 0x07	; 7
    4778:	40 e0       	ldi	r20, 0x00	; 0
    477a:	8e 2d       	mov	r24, r14
    477c:	b6 01       	movw	r22, r12
    477e:	0e 94 e6 23 	call	0x47cc	; 0x47cc <strncmp>
    4782:	89 2b       	or	r24, r25
    4784:	c1 f0       	breq	.+48     	; 0x47b6 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    4786:	05 e0       	ldi	r16, 0x05	; 5
    4788:	10 e0       	ldi	r17, 0x00	; 0
    478a:	25 e2       	ldi	r18, 0x25	; 37
    478c:	37 e0       	ldi	r19, 0x07	; 7
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	8e 2d       	mov	r24, r14
    4792:	b6 01       	movw	r22, r12
    4794:	0e 94 e6 23 	call	0x47cc	; 0x47cc <strncmp>
    4798:	89 2b       	or	r24, r25
    479a:	79 f0       	breq	.+30     	; 0x47ba <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    479c:	04 e0       	ldi	r16, 0x04	; 4
    479e:	10 e0       	ldi	r17, 0x00	; 0
    47a0:	2b e2       	ldi	r18, 0x2B	; 43
    47a2:	37 e0       	ldi	r19, 0x07	; 7
    47a4:	40 e0       	ldi	r20, 0x00	; 0
    47a6:	8e 2d       	mov	r24, r14
    47a8:	b6 01       	movw	r22, r12
    47aa:	0e 94 e6 23 	call	0x47cc	; 0x47cc <strncmp>
    47ae:	89 2b       	or	r24, r25
    47b0:	31 f4       	brne	.+12     	; 0x47be <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    47b2:	85 e0       	ldi	r24, 0x05	; 5
    47b4:	05 c0       	rjmp	.+10     	; 0x47c0 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    47b6:	86 e0       	ldi	r24, 0x06	; 6
    47b8:	03 c0       	rjmp	.+6      	; 0x47c0 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    47ba:	84 e0       	ldi	r24, 0x04	; 4
    47bc:	01 c0       	rjmp	.+2      	; 0x47c0 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	1f 91       	pop	r17
    47c2:	0f 91       	pop	r16
    47c4:	ef 90       	pop	r14
    47c6:	df 90       	pop	r13
    47c8:	cf 90       	pop	r12
    47ca:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001f62 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1f72:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1f74:	ec 2f       	mov	r30, r28
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	e7 30       	cpi	r30, 0x07	; 7
    1f7a:	f1 05       	cpc	r31, r1
    1f7c:	d8 f7       	brcc	.-10     	; 0x1f74 <CON_RN2483+0x12>
    1f7e:	e9 5a       	subi	r30, 0xA9	; 169
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	0c 94 03 34 	jmp	0x6806	; 0x6806 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    1f86:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <uart0_hal_init>
				rn2483_init();
    1f8a:	0e 94 4a 34 	call	0x6894	; 0x6894 <rn2483_init>
				LM_reset_module();
    1f8e:	0e 94 8d 34 	call	0x691a	; 0x691a <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1f92:	60 e3       	ldi	r22, 0x30	; 48
    1f94:	77 e0       	ldi	r23, 0x07	; 7
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CL_READ_MSG;
    1f9c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1f9e:	ea cf       	rjmp	.-44     	; 0x1f74 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1fa0:	0e 94 39 33 	call	0x6672	; 0x6672 <uart1_hal_message_ready>
    1fa4:	88 23       	and	r24, r24
    1fa6:	31 f3       	breq	.-52     	; 0x1f74 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1fa8:	88 ea       	ldi	r24, 0xA8	; 168
    1faa:	97 e0       	ldi	r25, 0x07	; 7
    1fac:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1fb0:	c2 e0       	ldi	r28, 0x02	; 2
    1fb2:	e0 cf       	rjmp	.-64     	; 0x1f74 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1fb4:	88 ea       	ldi	r24, 0xA8	; 168
    1fb6:	97 e0       	ldi	r25, 0x07	; 7
    1fb8:	0e 94 b0 23 	call	0x4760	; 0x4760 <CON_RN2483_parse>
    1fbc:	c8 2f       	mov	r28, r24
			break;
    1fbe:	da cf       	rjmp	.-76     	; 0x1f74 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1fc0:	88 ea       	ldi	r24, 0xA8	; 168
    1fc2:	97 e0       	ldi	r25, 0x07	; 7
    1fc4:	6c 01       	movw	r12, r24
    1fc6:	20 e8       	ldi	r18, 0x80	; 128
    1fc8:	e2 2e       	mov	r14, r18
    1fca:	2f 93       	push	r18
    1fcc:	df 92       	push	r13
    1fce:	8f 93       	push	r24
    1fd0:	86 e6       	ldi	r24, 0x66	; 102
    1fd2:	97 e0       	ldi	r25, 0x07	; 7
    1fd4:	a0 e0       	ldi	r26, 0x00	; 0
    1fd6:	af 93       	push	r26
    1fd8:	9f 93       	push	r25
    1fda:	8f 93       	push	r24
    1fdc:	c0 ee       	ldi	r28, 0xE0	; 224
    1fde:	d6 e0       	ldi	r29, 0x06	; 6
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1fe8:	3e 01       	movw	r6, r28
    1fea:	20 e8       	ldi	r18, 0x80	; 128
    1fec:	82 2e       	mov	r8, r18
    1fee:	88 2d       	mov	r24, r8
    1ff0:	b3 01       	movw	r22, r6
    1ff2:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1ff6:	ae 01       	movw	r20, r28
    1ff8:	6c 2d       	mov	r22, r12
    1ffa:	7d 2d       	mov	r23, r13
    1ffc:	8e 2d       	mov	r24, r14
    1ffe:	0e 94 90 34 	call	0x6920	; 0x6920 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    2002:	88 2d       	mov	r24, r8
    2004:	b3 01       	movw	r22, r6
    2006:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    200a:	8d b7       	in	r24, 0x3d	; 61
    200c:	9e b7       	in	r25, 0x3e	; 62
    200e:	08 96       	adiw	r24, 0x08	; 8
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	9e bf       	out	0x3e, r25	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    201a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    201c:	ab cf       	rjmp	.-170    	; 0x1f74 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    201e:	8c e6       	ldi	r24, 0x6C	; 108
    2020:	97 e0       	ldi	r25, 0x07	; 7
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	af 93       	push	r26
    2026:	9f 93       	push	r25
    2028:	8f 93       	push	r24
    202a:	86 e6       	ldi	r24, 0x66	; 102
    202c:	97 e0       	ldi	r25, 0x07	; 7
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	af 93       	push	r26
    2032:	9f 93       	push	r25
    2034:	8f 93       	push	r24
    2036:	c0 ee       	ldi	r28, 0xE0	; 224
    2038:	d6 e0       	ldi	r29, 0x06	; 6
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
				uart1_hal_send_string(cnf_reply);
    2042:	be 01       	movw	r22, r28
    2044:	80 e8       	ldi	r24, 0x80	; 128
    2046:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
    204a:	8f e7       	ldi	r24, 0x7F	; 127
    204c:	98 e3       	ldi	r25, 0x38	; 56
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	81 50       	subi	r24, 0x01	; 1
    2052:	90 40       	sbci	r25, 0x00	; 0
    2054:	20 40       	sbci	r18, 0x00	; 0
    2056:	e1 f7       	brne	.-8      	; 0x2050 <CON_RN2483+0xee>
    2058:	00 c0       	rjmp	.+0      	; 0x205a <CON_RN2483+0xf8>
    205a:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    205c:	0e 94 93 34 	call	0x6926	; 0x6926 <LM_send_break>
				state=CL_READ_MSG;
			break;
    2060:	8d b7       	in	r24, 0x3d	; 61
    2062:	9e b7       	in	r25, 0x3e	; 62
    2064:	08 96       	adiw	r24, 0x08	; 8
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	9e bf       	out	0x3e, r25	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    2070:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2072:	80 cf       	rjmp	.-256    	; 0x1f74 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    2074:	0e 94 32 33 	call	0x6664	; 0x6664 <uart0_hal_message_ready>
    2078:	88 23       	and	r24, r24
    207a:	29 f0       	breq	.+10     	; 0x2086 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    207c:	80 ee       	ldi	r24, 0xE0	; 224
    207e:	96 e0       	ldi	r25, 0x06	; 6
    2080:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <uart0_hal_read_message_as_str>
    2084:	09 c0       	rjmp	.+18     	; 0x2098 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    2086:	25 e0       	ldi	r18, 0x05	; 5
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	47 e7       	ldi	r20, 0x77	; 119
    208c:	57 e0       	ldi	r21, 0x07	; 7
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	80 ee       	ldi	r24, 0xE0	; 224
    2092:	96 e0       	ldi	r25, 0x06	; 6
    2094:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    2098:	60 ee       	ldi	r22, 0xE0	; 224
    209a:	76 e0       	ldi	r23, 0x06	; 6
    209c:	80 e8       	ldi	r24, 0x80	; 128
    209e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				state=CL_READ_MSG;
    20a2:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    20a4:	67 cf       	rjmp	.-306    	; 0x1f74 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    20a6:	0e 94 19 34 	call	0x6832	; 0x6832 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    20aa:	6c e7       	ldi	r22, 0x7C	; 124
    20ac:	77 e0       	ldi	r23, 0x07	; 7
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	8f 90       	pop	r8
    20c2:	7f 90       	pop	r7
    20c4:	6f 90       	pop	r6
    20c6:	08 95       	ret

Disassembly of section .text.CONNECT:

00004ce8 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
    4cf0:	64 97       	sbiw	r28, 0x14	; 20
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	f8 94       	cli
    4cf6:	de bf       	out	0x3e, r29	; 62
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    4cfc:	21 e0       	ldi	r18, 0x01	; 1
    4cfe:	ae 01       	movw	r20, r28
    4d00:	4f 5f       	subi	r20, 0xFF	; 255
    4d02:	5f 4f       	sbci	r21, 0xFF	; 255
    4d04:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    4d08:	88 23       	and	r24, r24
    4d0a:	79 f0       	breq	.+30     	; 0x4d2a <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    4d0c:	be 01       	movw	r22, r28
    4d0e:	6f 5f       	subi	r22, 0xFF	; 255
    4d10:	7f 4f       	sbci	r23, 0xFF	; 255
    4d12:	80 e8       	ldi	r24, 0x80	; 128
    4d14:	2c e9       	ldi	r18, 0x9C	; 156
    4d16:	37 e0       	ldi	r19, 0x07	; 7
    4d18:	40 e0       	ldi	r20, 0x00	; 0
    4d1a:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    4d1e:	89 2b       	or	r24, r25
    4d20:	19 f4       	brne	.+6      	; 0x4d28 <CONNECT+0x40>
		return CON_RN2483();
    4d22:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <CON_RN2483>
    4d26:	01 c0       	rjmp	.+2      	; 0x4d2a <CONNECT+0x42>
	}else{
		return false;
    4d28:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4d2a:	64 96       	adiw	r28, 0x14	; 20
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	f8 94       	cli
    4d30:	de bf       	out	0x3e, r29	; 62
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	cd bf       	out	0x3d, r28	; 61
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	08 95       	ret

Disassembly of section .text.read_cols:

00003634 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    3634:	cf 92       	push	r12
    3636:	df 92       	push	r13
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	a3 97       	sbiw	r28, 0x23	; 35
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    3654:	63 e2       	ldi	r22, 0x23	; 35
    3656:	ce 01       	movw	r24, r28
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <EM_get_collections>
	res[0]='\0';
    365e:	f7 01       	movw	r30, r14
    3660:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    3662:	10 e0       	ldi	r17, 0x00	; 0
    3664:	35 c0       	rjmp	.+106    	; 0x36d0 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    3666:	81 2f       	mov	r24, r17
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	fc 01       	movw	r30, r24
    366c:	ee 0f       	add	r30, r30
    366e:	ff 1f       	adc	r31, r31
    3670:	ee 0f       	add	r30, r30
    3672:	ff 1f       	adc	r31, r31
    3674:	e8 0f       	add	r30, r24
    3676:	f9 1f       	adc	r31, r25
    3678:	21 e0       	ldi	r18, 0x01	; 1
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	2c 0f       	add	r18, r28
    367e:	3d 1f       	adc	r19, r29
    3680:	e2 0f       	add	r30, r18
    3682:	f3 1f       	adc	r31, r19
    3684:	23 81       	ldd	r18, Z+3	; 0x03
    3686:	2f 93       	push	r18
    3688:	22 81       	ldd	r18, Z+2	; 0x02
    368a:	2f 93       	push	r18
    368c:	21 81       	ldd	r18, Z+1	; 0x01
    368e:	2f 93       	push	r18
    3690:	20 81       	ld	r18, Z
    3692:	2f 93       	push	r18
    3694:	01 96       	adiw	r24, 0x01	; 1
    3696:	9f 93       	push	r25
    3698:	8f 93       	push	r24
    369a:	81 e4       	ldi	r24, 0x41	; 65
    369c:	94 e0       	ldi	r25, 0x04	; 4
    369e:	a0 e0       	ldi	r26, 0x00	; 0
    36a0:	af 93       	push	r26
    36a2:	9f 93       	push	r25
    36a4:	8f 93       	push	r24
    36a6:	0f 2e       	mov	r0, r31
    36a8:	f0 e8       	ldi	r31, 0x80	; 128
    36aa:	cf 2e       	mov	r12, r31
    36ac:	fe e0       	ldi	r31, 0x0E	; 14
    36ae:	df 2e       	mov	r13, r31
    36b0:	f0 2d       	mov	r31, r0
    36b2:	df 92       	push	r13
    36b4:	cf 92       	push	r12
    36b6:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
		strcat(res, arg);
    36ba:	a6 01       	movw	r20, r12
    36bc:	60 e8       	ldi	r22, 0x80	; 128
    36be:	c7 01       	movw	r24, r14
    36c0:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    36c4:	1f 5f       	subi	r17, 0xFF	; 255
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	17 30       	cpi	r17, 0x07	; 7
    36d2:	48 f2       	brcs	.-110    	; 0x3666 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    36d4:	a3 96       	adiw	r28, 0x23	; 35
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	ff 90       	pop	r15
    36e8:	ef 90       	pop	r14
    36ea:	df 90       	pop	r13
    36ec:	cf 90       	pop	r12
    36ee:	08 95       	ret

Disassembly of section .text.read_time:

00003f48 <read_time>:

static void read_time(char res[]){
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	00 d0       	rcall	.+0      	; 0x3f52 <read_time+0xa>
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <read_time+0xc>
    3f54:	00 d0       	rcall	.+0      	; 0x3f56 <read_time+0xe>
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	18 2f       	mov	r17, r24
    3f5c:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    3f5e:	0e 94 ba 32 	call	0x6574	; 0x6574 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    3f62:	ce 01       	movw	r24, r28
    3f64:	01 96       	adiw	r24, 0x01	; 1
    3f66:	0e 94 ba 11 	call	0x2374	; 0x2374 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    3f6a:	88 23       	and	r24, r24
    3f6c:	51 f0       	breq	.+20     	; 0x3f82 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    3f6e:	24 e1       	ldi	r18, 0x14	; 20
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	47 e5       	ldi	r20, 0x57	; 87
    3f74:	54 e0       	ldi	r21, 0x04	; 4
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	81 2f       	mov	r24, r17
    3f7a:	90 2f       	mov	r25, r16
    3f7c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
    3f80:	21 c0       	rjmp	.+66     	; 0x3fc4 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    3f82:	59 81       	ldd	r21, Y+1	; 0x01
    3f84:	4a 81       	ldd	r20, Y+2	; 0x02
    3f86:	3b 81       	ldd	r19, Y+3	; 0x03
    3f88:	2c 81       	ldd	r18, Y+4	; 0x04
    3f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8e:	1f 92       	push	r1
    3f90:	5f 93       	push	r21
    3f92:	1f 92       	push	r1
    3f94:	4f 93       	push	r20
    3f96:	1f 92       	push	r1
    3f98:	3f 93       	push	r19
    3f9a:	1f 92       	push	r1
    3f9c:	2f 93       	push	r18
    3f9e:	1f 92       	push	r1
    3fa0:	9f 93       	push	r25
    3fa2:	1f 92       	push	r1
    3fa4:	8f 93       	push	r24
    3fa6:	8b e6       	ldi	r24, 0x6B	; 107
    3fa8:	94 e0       	ldi	r25, 0x04	; 4
    3faa:	a0 e0       	ldi	r26, 0x00	; 0
    3fac:	af 93       	push	r26
    3fae:	9f 93       	push	r25
    3fb0:	8f 93       	push	r24
    3fb2:	0f 93       	push	r16
    3fb4:	1f 93       	push	r17
    3fb6:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
	}
}
    3fc4:	26 96       	adiw	r28, 0x06	; 6
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	f8 94       	cli
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	0f be       	out	0x3f, r0	; 63
    3fce:	cd bf       	out	0x3d, r28	; 61
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	1f 91       	pop	r17
    3fd6:	0f 91       	pop	r16
    3fd8:	08 95       	ret

Disassembly of section .text.write_deveui:

000042dc <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    42ea:	22 e0       	ldi	r18, 0x02	; 2
    42ec:	40 e8       	ldi	r20, 0x80	; 128
    42ee:	5e e0       	ldi	r21, 0x0E	; 14
    42f0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    42f4:	c8 2f       	mov	r28, r24
    42f6:	88 23       	and	r24, r24
    42f8:	29 f1       	breq	.+74     	; 0x4344 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    42fa:	80 e8       	ldi	r24, 0x80	; 128
    42fc:	9e e0       	ldi	r25, 0x0E	; 14
    42fe:	6c 01       	movw	r12, r24
    4300:	20 e8       	ldi	r18, 0x80	; 128
    4302:	e2 2e       	mov	r14, r18
    4304:	8e 2d       	mov	r24, r14
    4306:	b6 01       	movw	r22, r12
    4308:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    430c:	40 97       	sbiw	r24, 0x10	; 16
    430e:	c9 f4       	brne	.+50     	; 0x4342 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4310:	8e 2d       	mov	r24, r14
    4312:	b6 01       	movw	r22, r12
    4314:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <EM_set_deveui>
    4318:	c8 2f       	mov	r28, r24
    431a:	81 11       	cpse	r24, r1
    431c:	09 c0       	rjmp	.+18     	; 0x4330 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    431e:	27 e0       	ldi	r18, 0x07	; 7
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	49 e8       	ldi	r20, 0x89	; 137
    4324:	54 e0       	ldi	r21, 0x04	; 4
    4326:	60 e0       	ldi	r22, 0x00	; 0
    4328:	c8 01       	movw	r24, r16
    432a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return false;
    432e:	0a c0       	rjmp	.+20     	; 0x4344 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4330:	28 e0       	ldi	r18, 0x08	; 8
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	40 e9       	ldi	r20, 0x90	; 144
    4336:	54 e0       	ldi	r21, 0x04	; 4
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	c8 01       	movw	r24, r16
    433c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    4340:	01 c0       	rjmp	.+2      	; 0x4344 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4342:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4344:	8c 2f       	mov	r24, r28
    4346:	cf 91       	pop	r28
    4348:	1f 91       	pop	r17
    434a:	0f 91       	pop	r16
    434c:	ef 90       	pop	r14
    434e:	df 90       	pop	r13
    4350:	cf 90       	pop	r12
    4352:	08 95       	ret

Disassembly of section .text.write_appeui:

00004354 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    4354:	cf 92       	push	r12
    4356:	df 92       	push	r13
    4358:	ef 92       	push	r14
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
    4360:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4362:	22 e0       	ldi	r18, 0x02	; 2
    4364:	40 e8       	ldi	r20, 0x80	; 128
    4366:	5e e0       	ldi	r21, 0x0E	; 14
    4368:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    436c:	c8 2f       	mov	r28, r24
    436e:	88 23       	and	r24, r24
    4370:	29 f1       	breq	.+74     	; 0x43bc <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4372:	80 e8       	ldi	r24, 0x80	; 128
    4374:	9e e0       	ldi	r25, 0x0E	; 14
    4376:	6c 01       	movw	r12, r24
    4378:	20 e8       	ldi	r18, 0x80	; 128
    437a:	e2 2e       	mov	r14, r18
    437c:	8e 2d       	mov	r24, r14
    437e:	b6 01       	movw	r22, r12
    4380:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    4384:	40 97       	sbiw	r24, 0x10	; 16
    4386:	c9 f4       	brne	.+50     	; 0x43ba <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    4388:	8e 2d       	mov	r24, r14
    438a:	b6 01       	movw	r22, r12
    438c:	0e 94 81 2c 	call	0x5902	; 0x5902 <EM_set_appeui>
    4390:	c8 2f       	mov	r28, r24
    4392:	81 11       	cpse	r24, r1
    4394:	09 c0       	rjmp	.+18     	; 0x43a8 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    4396:	27 e0       	ldi	r18, 0x07	; 7
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	49 e8       	ldi	r20, 0x89	; 137
    439c:	54 e0       	ldi	r21, 0x04	; 4
    439e:	60 e0       	ldi	r22, 0x00	; 0
    43a0:	c8 01       	movw	r24, r16
    43a2:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return false;
    43a6:	0a c0       	rjmp	.+20     	; 0x43bc <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    43a8:	28 e0       	ldi	r18, 0x08	; 8
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	40 e9       	ldi	r20, 0x90	; 144
    43ae:	54 e0       	ldi	r21, 0x04	; 4
    43b0:	60 e0       	ldi	r22, 0x00	; 0
    43b2:	c8 01       	movw	r24, r16
    43b4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    43b8:	01 c0       	rjmp	.+2      	; 0x43bc <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    43ba:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    43bc:	8c 2f       	mov	r24, r28
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	ef 90       	pop	r14
    43c6:	df 90       	pop	r13
    43c8:	cf 90       	pop	r12
    43ca:	08 95       	ret

Disassembly of section .text.write_appkey:

000043cc <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    43cc:	cf 92       	push	r12
    43ce:	df 92       	push	r13
    43d0:	ef 92       	push	r14
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	cf 93       	push	r28
    43d8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    43da:	22 e0       	ldi	r18, 0x02	; 2
    43dc:	40 e8       	ldi	r20, 0x80	; 128
    43de:	5e e0       	ldi	r21, 0x0E	; 14
    43e0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    43e4:	c8 2f       	mov	r28, r24
    43e6:	88 23       	and	r24, r24
    43e8:	29 f1       	breq	.+74     	; 0x4434 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    43ea:	80 e8       	ldi	r24, 0x80	; 128
    43ec:	9e e0       	ldi	r25, 0x0E	; 14
    43ee:	6c 01       	movw	r12, r24
    43f0:	20 e8       	ldi	r18, 0x80	; 128
    43f2:	e2 2e       	mov	r14, r18
    43f4:	8e 2d       	mov	r24, r14
    43f6:	b6 01       	movw	r22, r12
    43f8:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    43fc:	80 97       	sbiw	r24, 0x20	; 32
    43fe:	c9 f4       	brne	.+50     	; 0x4432 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4400:	8e 2d       	mov	r24, r14
    4402:	b6 01       	movw	r22, r12
    4404:	0e 94 9e 2c 	call	0x593c	; 0x593c <EM_set_appkey>
    4408:	c8 2f       	mov	r28, r24
    440a:	81 11       	cpse	r24, r1
    440c:	09 c0       	rjmp	.+18     	; 0x4420 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    440e:	27 e0       	ldi	r18, 0x07	; 7
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	49 e8       	ldi	r20, 0x89	; 137
    4414:	54 e0       	ldi	r21, 0x04	; 4
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	c8 01       	movw	r24, r16
    441a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return false;
    441e:	0a c0       	rjmp	.+20     	; 0x4434 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4420:	28 e0       	ldi	r18, 0x08	; 8
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e9       	ldi	r20, 0x90	; 144
    4426:	54 e0       	ldi	r21, 0x04	; 4
    4428:	60 e0       	ldi	r22, 0x00	; 0
    442a:	c8 01       	movw	r24, r16
    442c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    4430:	01 c0       	rjmp	.+2      	; 0x4434 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4432:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4434:	8c 2f       	mov	r24, r28
    4436:	cf 91       	pop	r28
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	ef 90       	pop	r14
    443e:	df 90       	pop	r13
    4440:	cf 90       	pop	r12
    4442:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00004ffe <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    4ffe:	0f 93       	push	r16
    5000:	1f 93       	push	r17
    5002:	cf 93       	push	r28
    5004:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5006:	22 e0       	ldi	r18, 0x02	; 2
    5008:	40 e8       	ldi	r20, 0x80	; 128
    500a:	5e e0       	ldi	r21, 0x0E	; 14
    500c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    5010:	c8 2f       	mov	r28, r24
    5012:	88 23       	and	r24, r24
    5014:	a9 f0       	breq	.+42     	; 0x5040 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    5016:	80 e8       	ldi	r24, 0x80	; 128
    5018:	9e e0       	ldi	r25, 0x0E	; 14
    501a:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <is_float>
    501e:	c8 2f       	mov	r28, r24
    5020:	88 23       	and	r24, r24
    5022:	71 f0       	breq	.+28     	; 0x5040 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    5024:	80 e8       	ldi	r24, 0x80	; 128
    5026:	9e e0       	ldi	r25, 0x0E	; 14
    5028:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <str2flaot>
	EM_set_ppmfactor(val);
    502c:	0e 94 4e 33 	call	0x669c	; 0x669c <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    5030:	28 e0       	ldi	r18, 0x08	; 8
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	40 e9       	ldi	r20, 0x90	; 144
    5036:	54 e0       	ldi	r21, 0x04	; 4
    5038:	60 e0       	ldi	r22, 0x00	; 0
    503a:	c8 01       	movw	r24, r16
    503c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
}
    5040:	8c 2f       	mov	r24, r28
    5042:	cf 91       	pop	r28
    5044:	1f 91       	pop	r17
    5046:	0f 91       	pop	r16
    5048:	08 95       	ret

Disassembly of section .text.write_RRL:

0000504a <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    504a:	0f 93       	push	r16
    504c:	1f 93       	push	r17
    504e:	cf 93       	push	r28
    5050:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5052:	22 e0       	ldi	r18, 0x02	; 2
    5054:	40 e8       	ldi	r20, 0x80	; 128
    5056:	5e e0       	ldi	r21, 0x0E	; 14
    5058:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    505c:	c8 2f       	mov	r28, r24
    505e:	88 23       	and	r24, r24
    5060:	a9 f0       	breq	.+42     	; 0x508c <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    5062:	80 e8       	ldi	r24, 0x80	; 128
    5064:	9e e0       	ldi	r25, 0x0E	; 14
    5066:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <is_float>
    506a:	c8 2f       	mov	r28, r24
    506c:	88 23       	and	r24, r24
    506e:	71 f0       	breq	.+28     	; 0x508c <write_RRL+0x42>
	
	float val=str2flaot(arg);
    5070:	80 e8       	ldi	r24, 0x80	; 128
    5072:	9e e0       	ldi	r25, 0x0E	; 14
    5074:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <str2flaot>
	EM_set_RRL(val);
    5078:	0e 94 55 33 	call	0x66aa	; 0x66aa <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    507c:	28 e0       	ldi	r18, 0x08	; 8
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e9       	ldi	r20, 0x90	; 144
    5082:	54 e0       	ldi	r21, 0x04	; 4
    5084:	60 e0       	ldi	r22, 0x00	; 0
    5086:	c8 01       	movw	r24, r16
    5088:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
}
    508c:	8c 2f       	mov	r24, r28
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	08 95       	ret

Disassembly of section .text.write_VCC:

00005096 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5096:	0f 93       	push	r16
    5098:	1f 93       	push	r17
    509a:	cf 93       	push	r28
    509c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    509e:	22 e0       	ldi	r18, 0x02	; 2
    50a0:	40 e8       	ldi	r20, 0x80	; 128
    50a2:	5e e0       	ldi	r21, 0x0E	; 14
    50a4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    50a8:	c8 2f       	mov	r28, r24
    50aa:	88 23       	and	r24, r24
    50ac:	a9 f0       	breq	.+42     	; 0x50d8 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    50ae:	80 e8       	ldi	r24, 0x80	; 128
    50b0:	9e e0       	ldi	r25, 0x0E	; 14
    50b2:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <is_float>
    50b6:	c8 2f       	mov	r28, r24
    50b8:	88 23       	and	r24, r24
    50ba:	71 f0       	breq	.+28     	; 0x50d8 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    50bc:	80 e8       	ldi	r24, 0x80	; 128
    50be:	9e e0       	ldi	r25, 0x0E	; 14
    50c0:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <str2flaot>
	EM_set_Vcc(val);
    50c4:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    50c8:	28 e0       	ldi	r18, 0x08	; 8
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	40 e9       	ldi	r20, 0x90	; 144
    50ce:	54 e0       	ldi	r21, 0x04	; 4
    50d0:	60 e0       	ldi	r22, 0x00	; 0
    50d2:	c8 01       	movw	r24, r16
    50d4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
}
    50d8:	8c 2f       	mov	r24, r28
    50da:	cf 91       	pop	r28
    50dc:	1f 91       	pop	r17
    50de:	0f 91       	pop	r16
    50e0:	08 95       	ret

Disassembly of section .text.get_time_par:

00005b96 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    5b96:	cf 93       	push	r28
    5b98:	df 93       	push	r29
    5b9a:	00 d0       	rcall	.+0      	; 0x5b9c <get_time_par+0x6>
    5b9c:	1f 92       	push	r1
    5b9e:	cd b7       	in	r28, 0x3d	; 61
    5ba0:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	e6 0f       	add	r30, r22
    5ba6:	f1 1d       	adc	r31, r1
    5ba8:	80 81       	ld	r24, Z
    5baa:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    5bac:	81 81       	ldd	r24, Z+1	; 0x01
    5bae:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    5bb0:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    5bb2:	be 01       	movw	r22, r28
    5bb4:	6f 5f       	subi	r22, 0xFF	; 255
    5bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb8:	80 e8       	ldi	r24, 0x80	; 128
    5bba:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
}
    5bbe:	0f 90       	pop	r0
    5bc0:	0f 90       	pop	r0
    5bc2:	0f 90       	pop	r0
    5bc4:	df 91       	pop	r29
    5bc6:	cf 91       	pop	r28
    5bc8:	08 95       	ret

Disassembly of section .text.write_cols:

000025f0 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    25f0:	4f 92       	push	r4
    25f2:	5f 92       	push	r5
    25f4:	6f 92       	push	r6
    25f6:	7f 92       	push	r7
    25f8:	8f 92       	push	r8
    25fa:	af 92       	push	r10
    25fc:	bf 92       	push	r11
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	a3 97       	sbiw	r28, 0x23	; 35
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	3b 01       	movw	r6, r22
    2620:	88 2e       	mov	r8, r24
    2622:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    2624:	22 e0       	ldi	r18, 0x02	; 2
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5e e0       	ldi	r21, 0x0E	; 14
    262a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    262e:	18 2f       	mov	r17, r24
    2630:	88 23       	and	r24, r24
    2632:	09 f4       	brne	.+2      	; 0x2636 <write_cols+0x46>
    2634:	5d c0       	rjmp	.+186    	; 0x26f0 <write_cols+0x100>
	index=atoi(arg);
    2636:	80 e8       	ldi	r24, 0x80	; 128
    2638:	9e e0       	ldi	r25, 0x0E	; 14
    263a:	6c 01       	movw	r12, r24
    263c:	20 e8       	ldi	r18, 0x80	; 128
    263e:	e2 2e       	mov	r14, r18
    2640:	8e 2d       	mov	r24, r14
    2642:	b6 01       	movw	r22, r12
    2644:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
	if(index<1 || index>7) return false;
    2648:	0f ef       	ldi	r16, 0xFF	; 255
    264a:	08 0f       	add	r16, r24
    264c:	07 30       	cpi	r16, 0x07	; 7
    264e:	08 f0       	brcs	.+2      	; 0x2652 <write_cols+0x62>
    2650:	4a c0       	rjmp	.+148    	; 0x26e6 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    2652:	23 e0       	ldi	r18, 0x03	; 3
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5e e0       	ldi	r21, 0x0E	; 14
    2658:	88 2d       	mov	r24, r8
    265a:	b3 01       	movw	r22, r6
    265c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    2660:	18 2f       	mov	r17, r24
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <write_cols+0x78>
    2666:	44 c0       	rjmp	.+136    	; 0x26f0 <write_cols+0x100>
	samplings=atoi(arg);
    2668:	8e 2d       	mov	r24, r14
    266a:	b6 01       	movw	r22, r12
    266c:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
    2670:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    2672:	02 97       	sbiw	r24, 0x02	; 2
    2674:	8b 32       	cpi	r24, 0x2B	; 43
    2676:	91 40       	sbci	r25, 0x01	; 1
    2678:	c0 f5       	brcc	.+112    	; 0x26ea <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    267a:	24 e0       	ldi	r18, 0x04	; 4
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5e e0       	ldi	r21, 0x0E	; 14
    2680:	88 2d       	mov	r24, r8
    2682:	b3 01       	movw	r22, r6
    2684:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    2688:	18 2f       	mov	r17, r24
    268a:	88 23       	and	r24, r24
    268c:	89 f1       	breq	.+98     	; 0x26f0 <write_cols+0x100>
	samplingInterval=atoi(arg);
    268e:	8e 2d       	mov	r24, r14
    2690:	b6 01       	movw	r22, r12
    2692:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
    2696:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    2698:	02 97       	sbiw	r24, 0x02	; 2
    269a:	87 35       	cpi	r24, 0x57	; 87
    269c:	92 40       	sbci	r25, 0x02	; 2
    269e:	38 f5       	brcc	.+78     	; 0x26ee <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    26a0:	63 e2       	ldi	r22, 0x23	; 35
    26a2:	ce 01       	movw	r24, r28
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	7c 01       	movw	r14, r24
    26a8:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <EM_get_collections>
	
	cols[index].samplings=samplings;
    26ac:	80 2f       	mov	r24, r16
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	fc 01       	movw	r30, r24
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	e8 0f       	add	r30, r24
    26bc:	f9 1f       	adc	r31, r25
    26be:	ee 0d       	add	r30, r14
    26c0:	ff 1d       	adc	r31, r15
    26c2:	51 82       	std	Z+1, r5	; 0x01
    26c4:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    26c6:	d3 82       	std	Z+3, r13	; 0x03
    26c8:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    26ca:	b7 01       	movw	r22, r14
    26cc:	80 e8       	ldi	r24, 0x80	; 128
    26ce:	43 e2       	ldi	r20, 0x23	; 35
    26d0:	0e 94 63 33 	call	0x66c6	; 0x66c6 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    26d4:	28 e0       	ldi	r18, 0x08	; 8
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e9       	ldi	r20, 0x90	; 144
    26da:	54 e0       	ldi	r21, 0x04	; 4
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	c5 01       	movw	r24, r10
    26e0:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;	
    26e4:	05 c0       	rjmp	.+10     	; 0x26f0 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	03 c0       	rjmp	.+6      	; 0x26f0 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    26ea:	10 e0       	ldi	r17, 0x00	; 0
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    26ee:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    26f0:	81 2f       	mov	r24, r17
    26f2:	a3 96       	adiw	r28, 0x23	; 35
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	df 90       	pop	r13
    270c:	cf 90       	pop	r12
    270e:	bf 90       	pop	r11
    2710:	af 90       	pop	r10
    2712:	8f 90       	pop	r8
    2714:	7f 90       	pop	r7
    2716:	6f 90       	pop	r6
    2718:	5f 90       	pop	r5
    271a:	4f 90       	pop	r4
    271c:	08 95       	ret

Disassembly of section .text.write_heat_up:

000050e2 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    50ea:	22 e0       	ldi	r18, 0x02	; 2
    50ec:	40 e8       	ldi	r20, 0x80	; 128
    50ee:	5e e0       	ldi	r21, 0x0E	; 14
    50f0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    50f4:	c8 2f       	mov	r28, r24
    50f6:	88 23       	and	r24, r24
    50f8:	a9 f0       	breq	.+42     	; 0x5124 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    50fa:	60 e8       	ldi	r22, 0x80	; 128
    50fc:	7e e0       	ldi	r23, 0x0E	; 14
    50fe:	80 e8       	ldi	r24, 0x80	; 128
    5100:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
	
	if(val<1 || val>200) return false;
    5104:	9f ef       	ldi	r25, 0xFF	; 255
    5106:	98 0f       	add	r25, r24
    5108:	98 3c       	cpi	r25, 0xC8	; 200
    510a:	58 f4       	brcc	.+22     	; 0x5122 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    510c:	0e 94 b5 33 	call	0x676a	; 0x676a <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    5110:	28 e0       	ldi	r18, 0x08	; 8
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	40 e9       	ldi	r20, 0x90	; 144
    5116:	54 e0       	ldi	r21, 0x04	; 4
    5118:	60 e0       	ldi	r22, 0x00	; 0
    511a:	c8 01       	movw	r24, r16
    511c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
    5120:	01 c0       	rjmp	.+2      	; 0x5124 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    5122:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5124:	8c 2f       	mov	r24, r28
    5126:	cf 91       	pop	r28
    5128:	1f 91       	pop	r17
    512a:	0f 91       	pop	r16
    512c:	08 95       	ret

Disassembly of section .text.write_air_pump:

00004dde <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	cf 93       	push	r28
    4de4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4de6:	22 e0       	ldi	r18, 0x02	; 2
    4de8:	40 e8       	ldi	r20, 0x80	; 128
    4dea:	5e e0       	ldi	r21, 0x0E	; 14
    4dec:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    4df0:	c8 2f       	mov	r28, r24
    4df2:	88 23       	and	r24, r24
    4df4:	b9 f0       	breq	.+46     	; 0x4e24 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    4df6:	60 e8       	ldi	r22, 0x80	; 128
    4df8:	7e e0       	ldi	r23, 0x0E	; 14
    4dfa:	80 e8       	ldi	r24, 0x80	; 128
    4dfc:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
	
	if(val<5 || val>1000) return false;
    4e00:	9c 01       	movw	r18, r24
    4e02:	25 50       	subi	r18, 0x05	; 5
    4e04:	31 09       	sbc	r19, r1
    4e06:	24 3e       	cpi	r18, 0xE4	; 228
    4e08:	33 40       	sbci	r19, 0x03	; 3
    4e0a:	58 f4       	brcc	.+22     	; 0x4e22 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    4e0c:	0e 94 c1 33 	call	0x6782	; 0x6782 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    4e10:	28 e0       	ldi	r18, 0x08	; 8
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e9       	ldi	r20, 0x90	; 144
    4e16:	54 e0       	ldi	r21, 0x04	; 4
    4e18:	60 e0       	ldi	r22, 0x00	; 0
    4e1a:	c8 01       	movw	r24, r16
    4e1c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
    4e20:	01 c0       	rjmp	.+2      	; 0x4e24 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    4e22:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4e24:	8c 2f       	mov	r24, r28
    4e26:	cf 91       	pop	r28
    4e28:	1f 91       	pop	r17
    4e2a:	0f 91       	pop	r16
    4e2c:	08 95       	ret

Disassembly of section .text.write_sp_interval:

0000512e <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    512e:	0f 93       	push	r16
    5130:	1f 93       	push	r17
    5132:	cf 93       	push	r28
    5134:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5136:	22 e0       	ldi	r18, 0x02	; 2
    5138:	40 e8       	ldi	r20, 0x80	; 128
    513a:	5e e0       	ldi	r21, 0x0E	; 14
    513c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    5140:	c8 2f       	mov	r28, r24
    5142:	88 23       	and	r24, r24
    5144:	a9 f0       	breq	.+42     	; 0x5170 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    5146:	60 e8       	ldi	r22, 0x80	; 128
    5148:	7e e0       	ldi	r23, 0x0E	; 14
    514a:	80 e8       	ldi	r24, 0x80	; 128
    514c:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
	
	if(val<6 || val>24) return false;
    5150:	9a ef       	ldi	r25, 0xFA	; 250
    5152:	98 0f       	add	r25, r24
    5154:	93 31       	cpi	r25, 0x13	; 19
    5156:	58 f4       	brcc	.+22     	; 0x516e <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    5158:	0e 94 cd 33 	call	0x679a	; 0x679a <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    515c:	28 e0       	ldi	r18, 0x08	; 8
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	40 e9       	ldi	r20, 0x90	; 144
    5162:	54 e0       	ldi	r21, 0x04	; 4
    5164:	60 e0       	ldi	r22, 0x00	; 0
    5166:	c8 01       	movw	r24, r16
    5168:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
    516c:	01 c0       	rjmp	.+2      	; 0x5170 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    516e:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5170:	8c 2f       	mov	r24, r28
    5172:	cf 91       	pop	r28
    5174:	1f 91       	pop	r17
    5176:	0f 91       	pop	r16
    5178:	08 95       	ret

Disassembly of section .text.write_reset:

00003062 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	a3 97       	sbiw	r28, 0x23	; 35
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    307c:	68 e9       	ldi	r22, 0x98	; 152
    307e:	74 e0       	ldi	r23, 0x04	; 4
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    3086:	68 e9       	ldi	r22, 0x98	; 152
    3088:	74 e0       	ldi	r23, 0x04	; 4
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	0e 94 81 2c 	call	0x5902	; 0x5902 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    3090:	69 ea       	ldi	r22, 0xA9	; 169
    3092:	74 e0       	ldi	r23, 0x04	; 4
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	0e 94 9e 2c 	call	0x593c	; 0x593c <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	80 e8       	ldi	r24, 0x80	; 128
    30a0:	9f e3       	ldi	r25, 0x3F	; 63
    30a2:	0e 94 4e 33 	call	0x669c	; 0x669c <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    30a6:	60 e0       	ldi	r22, 0x00	; 0
    30a8:	70 e4       	ldi	r23, 0x40	; 64
    30aa:	8c e1       	ldi	r24, 0x1C	; 28
    30ac:	95 e4       	ldi	r25, 0x45	; 69
    30ae:	0e 94 55 33 	call	0x66aa	; 0x66aa <EM_set_RRL>
	EM_set_Vcc(5.00);
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	80 ea       	ldi	r24, 0xA0	; 160
    30b8:	90 e4       	ldi	r25, 0x40	; 64
    30ba:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	0e 94 b5 33 	call	0x676a	; 0x676a <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    30c4:	85 e0       	ldi	r24, 0x05	; 5
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 c1 33 	call	0x6782	; 0x6782 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    30cc:	86 e0       	ldi	r24, 0x06	; 6
    30ce:	0e 94 cd 33 	call	0x679a	; 0x679a <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	1a c0       	rjmp	.+52     	; 0x310a <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    30d6:	e8 2f       	mov	r30, r24
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	9f 01       	movw	r18, r30
    30dc:	22 0f       	add	r18, r18
    30de:	33 1f       	adc	r19, r19
    30e0:	22 0f       	add	r18, r18
    30e2:	33 1f       	adc	r19, r19
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	21 e0       	ldi	r18, 0x01	; 1
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	2c 0f       	add	r18, r28
    30ee:	3d 1f       	adc	r19, r29
    30f0:	e2 0f       	add	r30, r18
    30f2:	f3 1f       	adc	r31, r19
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    30f8:	22 e0       	ldi	r18, 0x02	; 2
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	31 83       	std	Z+1, r19	; 0x01
    30fe:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    3100:	23 e0       	ldi	r18, 0x03	; 3
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	33 83       	std	Z+3, r19	; 0x03
    3106:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	87 30       	cpi	r24, 0x07	; 7
    310c:	20 f3       	brcs	.-56     	; 0x30d6 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    310e:	be 01       	movw	r22, r28
    3110:	6f 5f       	subi	r22, 0xFF	; 255
    3112:	7f 4f       	sbci	r23, 0xFF	; 255
    3114:	80 e8       	ldi	r24, 0x80	; 128
    3116:	43 e2       	ldi	r20, 0x23	; 35
    3118:	0e 94 63 33 	call	0x66c6	; 0x66c6 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    311c:	23 e1       	ldi	r18, 0x13	; 19
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	4a ec       	ldi	r20, 0xCA	; 202
    3122:	54 e0       	ldi	r21, 0x04	; 4
    3124:	60 e0       	ldi	r22, 0x00	; 0
    3126:	c8 01       	movw	r24, r16
    3128:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
}
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	a3 96       	adiw	r28, 0x23	; 35
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	08 95       	ret

Disassembly of section .text.write_time:

00002d7c <write_time>:

static bool write_time(const char cmd[], char res[]){
    2d7c:	6f 92       	push	r6
    2d7e:	7f 92       	push	r7
    2d80:	8f 92       	push	r8
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <write_time+0x16>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <write_time+0x18>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <write_time+0x1a>
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	3b 01       	movw	r6, r22
    2d9c:	88 2e       	mov	r8, r24
    2d9e:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2da0:	0e 94 ba 32 	call	0x6574	; 0x6574 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2da4:	22 e0       	ldi	r18, 0x02	; 2
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5e e0       	ldi	r21, 0x0E	; 14
    2daa:	88 2d       	mov	r24, r8
    2dac:	b3 01       	movw	r22, r6
    2dae:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    2db2:	18 2f       	mov	r17, r24
    2db4:	88 23       	and	r24, r24
    2db6:	09 f4       	brne	.+2      	; 0x2dba <write_time+0x3e>
    2db8:	4e c0       	rjmp	.+156    	; 0x2e56 <write_time+0xda>
	if(strlen(arg)!=17){
    2dba:	60 e8       	ldi	r22, 0x80	; 128
    2dbc:	7e e0       	ldi	r23, 0x0E	; 14
    2dbe:	80 e8       	ldi	r24, 0x80	; 128
    2dc0:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    2dc4:	41 97       	sbiw	r24, 0x11	; 17
    2dc6:	49 f0       	breq	.+18     	; 0x2dda <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    2dc8:	25 e2       	ldi	r18, 0x25	; 37
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	4d ed       	ldi	r20, 0xDD	; 221
    2dce:	54 e0       	ldi	r21, 0x04	; 4
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	c7 01       	movw	r24, r14
    2dd4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    2dd8:	3e c0       	rjmp	.+124    	; 0x2e56 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	80 e8       	ldi	r24, 0x80	; 128
    2dde:	9e e0       	ldi	r25, 0x0E	; 14
    2de0:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <get_time_par>
    2de4:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    2de6:	63 e0       	ldi	r22, 0x03	; 3
    2de8:	80 e8       	ldi	r24, 0x80	; 128
    2dea:	9e e0       	ldi	r25, 0x0E	; 14
    2dec:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <get_time_par>
    2df0:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    2df2:	66 e0       	ldi	r22, 0x06	; 6
    2df4:	80 e8       	ldi	r24, 0x80	; 128
    2df6:	9e e0       	ldi	r25, 0x0E	; 14
    2df8:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <get_time_par>
    2dfc:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    2dfe:	69 e0       	ldi	r22, 0x09	; 9
    2e00:	80 e8       	ldi	r24, 0x80	; 128
    2e02:	9e e0       	ldi	r25, 0x0E	; 14
    2e04:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <get_time_par>
    2e08:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    2e0a:	6c e0       	ldi	r22, 0x0C	; 12
    2e0c:	80 e8       	ldi	r24, 0x80	; 128
    2e0e:	9e e0       	ldi	r25, 0x0E	; 14
    2e10:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <get_time_par>
    2e14:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2e16:	6f e0       	ldi	r22, 0x0F	; 15
    2e18:	80 e8       	ldi	r24, 0x80	; 128
    2e1a:	9e e0       	ldi	r25, 0x0E	; 14
    2e1c:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2e20:	48 2f       	mov	r20, r24
    2e22:	5d 2d       	mov	r21, r13
    2e24:	60 2f       	mov	r22, r16
    2e26:	76 2d       	mov	r23, r6
    2e28:	87 2d       	mov	r24, r7
    2e2a:	98 2d       	mov	r25, r8
    2e2c:	0e 94 4f 24 	call	0x489e	; 0x489e <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2e30:	88 23       	and	r24, r24
    2e32:	49 f0       	breq	.+18     	; 0x2e46 <write_time+0xca>
		strcpy(res, "Failed to set time");
    2e34:	23 e1       	ldi	r18, 0x13	; 19
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	42 e0       	ldi	r20, 0x02	; 2
    2e3a:	55 e0       	ldi	r21, 0x05	; 5
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	c7 01       	movw	r24, r14
    2e40:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    2e44:	08 c0       	rjmp	.+16     	; 0x2e56 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2e46:	28 e0       	ldi	r18, 0x08	; 8
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e9       	ldi	r20, 0x90	; 144
    2e4c:	54 e0       	ldi	r21, 0x04	; 4
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	c7 01       	movw	r24, r14
    2e52:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
	return true;
}
    2e56:	81 2f       	mov	r24, r17
    2e58:	26 96       	adiw	r28, 0x06	; 6
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	8f 90       	pop	r8
    2e74:	7f 90       	pop	r7
    2e76:	6f 90       	pop	r6
    2e78:	08 95       	ret

Disassembly of section .text.handle_read:

00001910 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	68 97       	sbiw	r28, 0x18	; 24
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	6b 01       	movw	r12, r22
    1932:	e8 2e       	mov	r14, r24
    1934:	f4 2e       	mov	r15, r20
    1936:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	ae 01       	movw	r20, r28
    193c:	4f 5f       	subi	r20, 0xFF	; 255
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    1944:	18 2f       	mov	r17, r24
    1946:	88 23       	and	r24, r24
    1948:	09 f4       	brne	.+2      	; 0x194c <handle_read+0x3c>
    194a:	23 c1       	rjmp	.+582    	; 0x1b92 <handle_read+0x282>
    194c:	8e 2d       	mov	r24, r14
    194e:	b6 01       	movw	r22, r12
    1950:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <count_parameters>
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	09 f4       	brne	.+2      	; 0x195a <handle_read+0x4a>
    1958:	1b c1       	rjmp	.+566    	; 0x1b90 <handle_read+0x280>
	
	if (strcmp(par, RW_DEVEUI)==0)
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	6c 01       	movw	r12, r24
    1960:	20 e8       	ldi	r18, 0x80	; 128
    1962:	e2 2e       	mov	r14, r18
    1964:	25 e1       	ldi	r18, 0x15	; 21
    1966:	35 e0       	ldi	r19, 0x05	; 5
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	8e 2d       	mov	r24, r14
    196c:	b6 01       	movw	r22, r12
    196e:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1972:	89 2b       	or	r24, r25
    1974:	29 f4       	brne	.+10     	; 0x1980 <handle_read+0x70>
	{
		EM_get_deveui(res);
    1976:	8f 2d       	mov	r24, r15
    1978:	90 2f       	mov	r25, r16
    197a:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <EM_get_deveui>
    197e:	09 c1       	rjmp	.+530    	; 0x1b92 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1980:	2c e1       	ldi	r18, 0x1C	; 28
    1982:	35 e0       	ldi	r19, 0x05	; 5
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	8e 2d       	mov	r24, r14
    1988:	b6 01       	movw	r22, r12
    198a:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    198e:	89 2b       	or	r24, r25
    1990:	29 f4       	brne	.+10     	; 0x199c <handle_read+0x8c>
	{
		EM_get_appeui(res);
    1992:	8f 2d       	mov	r24, r15
    1994:	90 2f       	mov	r25, r16
    1996:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <EM_get_appeui>
    199a:	fb c0       	rjmp	.+502    	; 0x1b92 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    199c:	23 e2       	ldi	r18, 0x23	; 35
    199e:	35 e0       	ldi	r19, 0x05	; 5
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	8e 2d       	mov	r24, r14
    19a4:	b6 01       	movw	r22, r12
    19a6:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    19aa:	89 2b       	or	r24, r25
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    19ae:	8f 2d       	mov	r24, r15
    19b0:	90 2f       	mov	r25, r16
    19b2:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <EM_get_appkey>
    19b6:	ed c0       	rjmp	.+474    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    19b8:	2a e2       	ldi	r18, 0x2A	; 42
    19ba:	35 e0       	ldi	r19, 0x05	; 5
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	8e 2d       	mov	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    19c6:	89 2b       	or	r24, r25
    19c8:	e1 f4       	brne	.+56     	; 0x1a02 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    19ca:	ce 01       	movw	r24, r28
    19cc:	45 96       	adiw	r24, 0x15	; 21
    19ce:	0e 94 03 31 	call	0x6206	; 0x6206 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    19d2:	88 8d       	ldd	r24, Y+24	; 0x18
    19d4:	8f 93       	push	r24
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	8f 93       	push	r24
    19da:	8e 89       	ldd	r24, Y+22	; 0x16
    19dc:	8f 93       	push	r24
    19de:	8d 89       	ldd	r24, Y+21	; 0x15
    19e0:	8f 93       	push	r24
    19e2:	8f e2       	ldi	r24, 0x2F	; 47
    19e4:	95 e0       	ldi	r25, 0x05	; 5
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	af 93       	push	r26
    19ea:	9f 93       	push	r25
    19ec:	8f 93       	push	r24
    19ee:	0f 93       	push	r16
    19f0:	ff 92       	push	r15
    19f2:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	c8 c0       	rjmp	.+400    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_RRL)==0)
    1a02:	24 e3       	ldi	r18, 0x34	; 52
    1a04:	35 e0       	ldi	r19, 0x05	; 5
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	8e 2d       	mov	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1a10:	89 2b       	or	r24, r25
    1a12:	e1 f4       	brne	.+56     	; 0x1a4c <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1a14:	ce 01       	movw	r24, r28
    1a16:	45 96       	adiw	r24, 0x15	; 21
    1a18:	0e 94 12 31 	call	0x6224	; 0x6224 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1a1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a1e:	8f 93       	push	r24
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	8f 93       	push	r24
    1a24:	8e 89       	ldd	r24, Y+22	; 0x16
    1a26:	8f 93       	push	r24
    1a28:	8d 89       	ldd	r24, Y+21	; 0x15
    1a2a:	8f 93       	push	r24
    1a2c:	8f e2       	ldi	r24, 0x2F	; 47
    1a2e:	95 e0       	ldi	r25, 0x05	; 5
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	af 93       	push	r26
    1a34:	9f 93       	push	r25
    1a36:	8f 93       	push	r24
    1a38:	0f 93       	push	r16
    1a3a:	ff 92       	push	r15
    1a3c:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	a3 c0       	rjmp	.+326    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_VCC)==0)
    1a4c:	29 e3       	ldi	r18, 0x39	; 57
    1a4e:	35 e0       	ldi	r19, 0x05	; 5
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	8e 2d       	mov	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	e1 f4       	brne	.+56     	; 0x1a96 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	45 96       	adiw	r24, 0x15	; 21
    1a62:	0e 94 21 31 	call	0x6242	; 0x6242 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1a66:	88 8d       	ldd	r24, Y+24	; 0x18
    1a68:	8f 93       	push	r24
    1a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6c:	8f 93       	push	r24
    1a6e:	8e 89       	ldd	r24, Y+22	; 0x16
    1a70:	8f 93       	push	r24
    1a72:	8d 89       	ldd	r24, Y+21	; 0x15
    1a74:	8f 93       	push	r24
    1a76:	8f e2       	ldi	r24, 0x2F	; 47
    1a78:	95 e0       	ldi	r25, 0x05	; 5
    1a7a:	a0 e0       	ldi	r26, 0x00	; 0
    1a7c:	af 93       	push	r26
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	0f 93       	push	r16
    1a84:	ff 92       	push	r15
    1a86:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	7e c0       	rjmp	.+252    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_COLS)==0)
    1a96:	2e e3       	ldi	r18, 0x3E	; 62
    1a98:	35 e0       	ldi	r19, 0x05	; 5
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	8e 2d       	mov	r24, r14
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <handle_read+0x1a2>
	{
		read_cols(res);
    1aa8:	8f 2d       	mov	r24, r15
    1aaa:	90 2f       	mov	r25, r16
    1aac:	0e 94 1a 1b 	call	0x3634	; 0x3634 <read_cols>
    1ab0:	70 c0       	rjmp	.+224    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1ab2:	23 e4       	ldi	r18, 0x43	; 67
    1ab4:	35 e0       	ldi	r19, 0x05	; 5
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	8e 2d       	mov	r24, r14
    1aba:	b6 01       	movw	r22, r12
    1abc:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1ac0:	89 2b       	or	r24, r25
    1ac2:	a1 f4       	brne	.+40     	; 0x1aec <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    1ac4:	0e 94 bb 33 	call	0x6776	; 0x6776 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1ac8:	1f 92       	push	r1
    1aca:	8f 93       	push	r24
    1acc:	8d e4       	ldi	r24, 0x4D	; 77
    1ace:	95 e0       	ldi	r25, 0x05	; 5
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	af 93       	push	r26
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0f 93       	push	r16
    1ada:	ff 92       	push	r15
    1adc:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	53 c0       	rjmp	.+166    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1aec:	2f e5       	ldi	r18, 0x5F	; 95
    1aee:	35 e0       	ldi	r19, 0x05	; 5
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	8e 2d       	mov	r24, r14
    1af4:	b6 01       	movw	r22, r12
    1af6:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1afa:	89 2b       	or	r24, r25
    1afc:	a1 f4       	brne	.+40     	; 0x1b26 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1afe:	0e 94 c7 33 	call	0x678e	; 0x678e <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1b02:	9f 93       	push	r25
    1b04:	8f 93       	push	r24
    1b06:	8a e6       	ldi	r24, 0x6A	; 106
    1b08:	95 e0       	ldi	r25, 0x05	; 5
    1b0a:	a0 e0       	ldi	r26, 0x00	; 0
    1b0c:	af 93       	push	r26
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	0f 93       	push	r16
    1b14:	ff 92       	push	r15
    1b16:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	36 c0       	rjmp	.+108    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1b26:	2d e7       	ldi	r18, 0x7D	; 125
    1b28:	35 e0       	ldi	r19, 0x05	; 5
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	8e 2d       	mov	r24, r14
    1b2e:	b6 01       	movw	r22, r12
    1b30:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1b34:	89 2b       	or	r24, r25
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1b38:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1b3c:	1f 92       	push	r1
    1b3e:	8f 93       	push	r24
    1b40:	89 e8       	ldi	r24, 0x89	; 137
    1b42:	95 e0       	ldi	r25, 0x05	; 5
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	af 93       	push	r26
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24
    1b4c:	0f 93       	push	r16
    1b4e:	ff 92       	push	r15
    1b50:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	19 c0       	rjmp	.+50     	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_TIME)==0)
    1b60:	28 ea       	ldi	r18, 0xA8	; 168
    1b62:	35 e0       	ldi	r19, 0x05	; 5
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	8e 2d       	mov	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1b6e:	89 2b       	or	r24, r25
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <handle_read+0x26c>
	{
		read_time(res);
    1b72:	8f 2d       	mov	r24, r15
    1b74:	90 2f       	mov	r25, r16
    1b76:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <read_time>
    1b7a:	0b c0       	rjmp	.+22     	; 0x1b92 <handle_read+0x282>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1b7c:	26 e1       	ldi	r18, 0x16	; 22
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4d ea       	ldi	r20, 0xAD	; 173
    1b82:	55 e0       	ldi	r21, 0x05	; 5
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	8f 2d       	mov	r24, r15
    1b88:	90 2f       	mov	r25, r16
    1b8a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <handle_read+0x282>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1b90:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1b92:	81 2f       	mov	r24, r17
    1b94:	68 96       	adiw	r28, 0x18	; 24
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	08 95       	ret

Disassembly of section .text.handle_write:

00001bb2 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1bb2:	6f 92       	push	r6
    1bb4:	7f 92       	push	r7
    1bb6:	8f 92       	push	r8
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	64 97       	sbiw	r28, 0x14	; 20
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	3b 01       	movw	r6, r22
    1bda:	88 2e       	mov	r8, r24
    1bdc:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	ae 01       	movw	r20, r28
    1be2:	4f 5f       	subi	r20, 0xFF	; 255
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    1bea:	18 2f       	mov	r17, r24
    1bec:	88 23       	and	r24, r24
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <handle_write+0x40>
    1bf0:	cd c0       	rjmp	.+410    	; 0x1d8c <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	6c 01       	movw	r12, r24
    1bf8:	20 e8       	ldi	r18, 0x80	; 128
    1bfa:	e2 2e       	mov	r14, r18
    1bfc:	25 e1       	ldi	r18, 0x15	; 21
    1bfe:	35 e0       	ldi	r19, 0x05	; 5
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	8e 2d       	mov	r24, r14
    1c04:	b6 01       	movw	r22, r12
    1c06:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1c0a:	89 2b       	or	r24, r25
    1c0c:	39 f4       	brne	.+14     	; 0x1c1c <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1c0e:	a5 01       	movw	r20, r10
    1c10:	88 2d       	mov	r24, r8
    1c12:	b3 01       	movw	r22, r6
    1c14:	0e 94 6e 21 	call	0x42dc	; 0x42dc <write_deveui>
    1c18:	18 2f       	mov	r17, r24
    1c1a:	b8 c0       	rjmp	.+368    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1c1c:	2c e1       	ldi	r18, 0x1C	; 28
    1c1e:	35 e0       	ldi	r19, 0x05	; 5
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	8e 2d       	mov	r24, r14
    1c24:	b6 01       	movw	r22, r12
    1c26:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1c2a:	89 2b       	or	r24, r25
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1c2e:	a5 01       	movw	r20, r10
    1c30:	88 2d       	mov	r24, r8
    1c32:	b3 01       	movw	r22, r6
    1c34:	0e 94 aa 21 	call	0x4354	; 0x4354 <write_appeui>
    1c38:	18 2f       	mov	r17, r24
    1c3a:	a8 c0       	rjmp	.+336    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1c3c:	23 e2       	ldi	r18, 0x23	; 35
    1c3e:	35 e0       	ldi	r19, 0x05	; 5
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	8e 2d       	mov	r24, r14
    1c44:	b6 01       	movw	r22, r12
    1c46:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	39 f4       	brne	.+14     	; 0x1c5c <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1c4e:	a5 01       	movw	r20, r10
    1c50:	88 2d       	mov	r24, r8
    1c52:	b3 01       	movw	r22, r6
    1c54:	0e 94 e6 21 	call	0x43cc	; 0x43cc <write_appkey>
    1c58:	18 2f       	mov	r17, r24
    1c5a:	98 c0       	rjmp	.+304    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1c5c:	2a e2       	ldi	r18, 0x2A	; 42
    1c5e:	35 e0       	ldi	r19, 0x05	; 5
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	8e 2d       	mov	r24, r14
    1c64:	b6 01       	movw	r22, r12
    1c66:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1c6a:	89 2b       	or	r24, r25
    1c6c:	39 f4       	brne	.+14     	; 0x1c7c <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1c6e:	a5 01       	movw	r20, r10
    1c70:	88 2d       	mov	r24, r8
    1c72:	b3 01       	movw	r22, r6
    1c74:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <write_PPM_factor>
    1c78:	18 2f       	mov	r17, r24
    1c7a:	88 c0       	rjmp	.+272    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1c7c:	24 e3       	ldi	r18, 0x34	; 52
    1c7e:	35 e0       	ldi	r19, 0x05	; 5
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	8e 2d       	mov	r24, r14
    1c84:	b6 01       	movw	r22, r12
    1c86:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1c8a:	89 2b       	or	r24, r25
    1c8c:	39 f4       	brne	.+14     	; 0x1c9c <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1c8e:	a5 01       	movw	r20, r10
    1c90:	88 2d       	mov	r24, r8
    1c92:	b3 01       	movw	r22, r6
    1c94:	0e 94 25 28 	call	0x504a	; 0x504a <write_RRL>
    1c98:	18 2f       	mov	r17, r24
    1c9a:	78 c0       	rjmp	.+240    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1c9c:	29 e3       	ldi	r18, 0x39	; 57
    1c9e:	35 e0       	ldi	r19, 0x05	; 5
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	8e 2d       	mov	r24, r14
    1ca4:	b6 01       	movw	r22, r12
    1ca6:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1caa:	89 2b       	or	r24, r25
    1cac:	39 f4       	brne	.+14     	; 0x1cbc <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1cae:	a5 01       	movw	r20, r10
    1cb0:	88 2d       	mov	r24, r8
    1cb2:	b3 01       	movw	r22, r6
    1cb4:	0e 94 4b 28 	call	0x5096	; 0x5096 <write_VCC>
    1cb8:	18 2f       	mov	r17, r24
    1cba:	68 c0       	rjmp	.+208    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1cbc:	2e e3       	ldi	r18, 0x3E	; 62
    1cbe:	35 e0       	ldi	r19, 0x05	; 5
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	8e 2d       	mov	r24, r14
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1cca:	89 2b       	or	r24, r25
    1ccc:	39 f4       	brne	.+14     	; 0x1cdc <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1cce:	a5 01       	movw	r20, r10
    1cd0:	88 2d       	mov	r24, r8
    1cd2:	b3 01       	movw	r22, r6
    1cd4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <write_cols>
    1cd8:	18 2f       	mov	r17, r24
    1cda:	58 c0       	rjmp	.+176    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1cdc:	23 e4       	ldi	r18, 0x43	; 67
    1cde:	35 e0       	ldi	r19, 0x05	; 5
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	8e 2d       	mov	r24, r14
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1cea:	89 2b       	or	r24, r25
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1cee:	a5 01       	movw	r20, r10
    1cf0:	88 2d       	mov	r24, r8
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	0e 94 71 28 	call	0x50e2	; 0x50e2 <write_heat_up>
    1cf8:	18 2f       	mov	r17, r24
    1cfa:	48 c0       	rjmp	.+144    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1cfc:	2f e5       	ldi	r18, 0x5F	; 95
    1cfe:	35 e0       	ldi	r19, 0x05	; 5
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	8e 2d       	mov	r24, r14
    1d04:	b6 01       	movw	r22, r12
    1d06:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1d0a:	89 2b       	or	r24, r25
    1d0c:	39 f4       	brne	.+14     	; 0x1d1c <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1d0e:	a5 01       	movw	r20, r10
    1d10:	88 2d       	mov	r24, r8
    1d12:	b3 01       	movw	r22, r6
    1d14:	0e 94 ef 26 	call	0x4dde	; 0x4dde <write_air_pump>
    1d18:	18 2f       	mov	r17, r24
    1d1a:	38 c0       	rjmp	.+112    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1d1c:	2d e7       	ldi	r18, 0x7D	; 125
    1d1e:	35 e0       	ldi	r19, 0x05	; 5
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	8e 2d       	mov	r24, r14
    1d24:	b6 01       	movw	r22, r12
    1d26:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	39 f4       	brne	.+14     	; 0x1d3c <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1d2e:	a5 01       	movw	r20, r10
    1d30:	88 2d       	mov	r24, r8
    1d32:	b3 01       	movw	r22, r6
    1d34:	0e 94 97 28 	call	0x512e	; 0x512e <write_sp_interval>
    1d38:	18 2f       	mov	r17, r24
    1d3a:	28 c0       	rjmp	.+80     	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1d3c:	23 ec       	ldi	r18, 0xC3	; 195
    1d3e:	35 e0       	ldi	r19, 0x05	; 5
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	8e 2d       	mov	r24, r14
    1d44:	b6 01       	movw	r22, r12
    1d46:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1d4e:	a5 01       	movw	r20, r10
    1d50:	88 2d       	mov	r24, r8
    1d52:	b3 01       	movw	r22, r6
    1d54:	0e 94 31 18 	call	0x3062	; 0x3062 <write_reset>
    1d58:	18 2f       	mov	r17, r24
    1d5a:	18 c0       	rjmp	.+48     	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1d5c:	28 ea       	ldi	r18, 0xA8	; 168
    1d5e:	35 e0       	ldi	r19, 0x05	; 5
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	8e 2d       	mov	r24, r14
    1d64:	b6 01       	movw	r22, r12
    1d66:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    1d6a:	89 2b       	or	r24, r25
    1d6c:	39 f4       	brne	.+14     	; 0x1d7c <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1d6e:	a5 01       	movw	r20, r10
    1d70:	88 2d       	mov	r24, r8
    1d72:	b3 01       	movw	r22, r6
    1d74:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <write_time>
    1d78:	18 2f       	mov	r17, r24
    1d7a:	08 c0       	rjmp	.+16     	; 0x1d8c <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1d7c:	26 e1       	ldi	r18, 0x16	; 22
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4d ea       	ldi	r20, 0xAD	; 173
    1d82:	55 e0       	ldi	r21, 0x05	; 5
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	c5 01       	movw	r24, r10
    1d88:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
	}
	
}
    1d8c:	81 2f       	mov	r24, r17
    1d8e:	64 96       	adiw	r28, 0x14	; 20
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	bf 90       	pop	r11
    1da8:	af 90       	pop	r10
    1daa:	8f 90       	pop	r8
    1dac:	7f 90       	pop	r7
    1dae:	6f 90       	pop	r6
    1db0:	08 95       	ret

Disassembly of section .text.handle_methane:

00002840 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	00 d0       	rcall	.+0      	; 0x2852 <handle_methane+0x12>
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	f4 2e       	mov	r15, r20
    2858:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    285a:	22 e0       	ldi	r18, 0x02	; 2
    285c:	44 e1       	ldi	r20, 0x14	; 20
    285e:	5f e0       	ldi	r21, 0x0F	; 15
    2860:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    2864:	18 2f       	mov	r17, r24
    2866:	88 23       	and	r24, r24
    2868:	09 f4       	brne	.+2      	; 0x286c <handle_methane+0x2c>
    286a:	6b c0       	rjmp	.+214    	; 0x2942 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    286c:	84 e1       	ldi	r24, 0x14	; 20
    286e:	9f e0       	ldi	r25, 0x0F	; 15
    2870:	6c 01       	movw	r12, r24
    2872:	20 e8       	ldi	r18, 0x80	; 128
    2874:	e2 2e       	mov	r14, r18
    2876:	25 e7       	ldi	r18, 0x75	; 117
    2878:	36 e0       	ldi	r19, 0x06	; 6
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	8e 2d       	mov	r24, r14
    287e:	b6 01       	movw	r22, r12
    2880:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    2884:	89 2b       	or	r24, r25
    2886:	79 f4       	brne	.+30     	; 0x28a6 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    2888:	0e 94 0f 33 	call	0x661e	; 0x661e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	0e 94 56 32 	call	0x64ac	; 0x64ac <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    2892:	28 e1       	ldi	r18, 0x18	; 24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	48 e7       	ldi	r20, 0x78	; 120
    2898:	56 e0       	ldi	r21, 0x06	; 6
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	8f 2d       	mov	r24, r15
    289e:	90 2f       	mov	r25, r16
    28a0:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    28a4:	4e c0       	rjmp	.+156    	; 0x2942 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    28a6:	20 e9       	ldi	r18, 0x90	; 144
    28a8:	36 e0       	ldi	r19, 0x06	; 6
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	8e 2d       	mov	r24, r14
    28ae:	b6 01       	movw	r22, r12
    28b0:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    28b4:	89 2b       	or	r24, r25
    28b6:	79 f4       	brne	.+30     	; 0x28d6 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    28b8:	0e 94 0f 33 	call	0x661e	; 0x661e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	0e 94 56 32 	call	0x64ac	; 0x64ac <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    28c2:	29 e1       	ldi	r18, 0x19	; 25
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	44 e9       	ldi	r20, 0x94	; 148
    28c8:	56 e0       	ldi	r21, 0x06	; 6
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	8f 2d       	mov	r24, r15
    28ce:	90 2f       	mov	r25, r16
    28d0:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    28d4:	36 c0       	rjmp	.+108    	; 0x2942 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    28d6:	2d ea       	ldi	r18, 0xAD	; 173
    28d8:	36 e0       	ldi	r19, 0x06	; 6
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	8e 2d       	mov	r24, r14
    28de:	b6 01       	movw	r22, r12
    28e0:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    28e4:	89 2b       	or	r24, r25
    28e6:	21 f5       	brne	.+72     	; 0x2930 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    28e8:	ce 01       	movw	r24, r28
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <ADC_get_value>
    28f0:	88 23       	and	r24, r24
    28f2:	51 f0       	breq	.+20     	; 0x2908 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    28f4:	28 e1       	ldi	r18, 0x18	; 24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	42 eb       	ldi	r20, 0xB2	; 178
    28fa:	56 e0       	ldi	r21, 0x06	; 6
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	8f 2d       	mov	r24, r15
    2900:	90 2f       	mov	r25, r16
    2902:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
    2906:	1d c0       	rjmp	.+58     	; 0x2942 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	8f 93       	push	r24
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	8f 93       	push	r24
    2910:	8a ec       	ldi	r24, 0xCA	; 202
    2912:	96 e0       	ldi	r25, 0x06	; 6
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	af 93       	push	r26
    2918:	9f 93       	push	r25
    291a:	8f 93       	push	r24
    291c:	0f 93       	push	r16
    291e:	ff 92       	push	r15
    2920:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2930:	26 e1       	ldi	r18, 0x16	; 22
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	41 ed       	ldi	r20, 0xD1	; 209
    2936:	56 e0       	ldi	r21, 0x06	; 6
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	8f 2d       	mov	r24, r15
    293c:	90 2f       	mov	r25, r16
    293e:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
	}
	return false;
}
    2942:	81 2f       	mov	r24, r17
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
    2958:	08 95       	ret

Disassembly of section .text.handle_co2:

00003a68 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    3a68:	ff 92       	push	r15
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	00 d0       	rcall	.+0      	; 0x3a74 <handle_co2+0xc>
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	f4 2e       	mov	r15, r20
    3a7a:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    3a7c:	22 e0       	ldi	r18, 0x02	; 2
    3a7e:	44 e1       	ldi	r20, 0x14	; 20
    3a80:	5f e0       	ldi	r21, 0x0F	; 15
    3a82:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    3a86:	18 2f       	mov	r17, r24
    3a88:	88 23       	and	r24, r24
    3a8a:	b9 f1       	breq	.+110    	; 0x3afa <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    3a8c:	64 e1       	ldi	r22, 0x14	; 20
    3a8e:	7f e0       	ldi	r23, 0x0F	; 15
    3a90:	80 e8       	ldi	r24, 0x80	; 128
    3a92:	2d ea       	ldi	r18, 0xAD	; 173
    3a94:	36 e0       	ldi	r19, 0x06	; 6
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    3a9c:	89 2b       	or	r24, r25
    3a9e:	21 f5       	brne	.+72     	; 0x3ae8 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <SCD30_get_reading>
    3aa8:	88 23       	and	r24, r24
    3aaa:	51 f0       	breq	.+20     	; 0x3ac0 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    3aac:	28 e1       	ldi	r18, 0x18	; 24
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	42 eb       	ldi	r20, 0xB2	; 178
    3ab2:	56 e0       	ldi	r21, 0x06	; 6
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	8f 2d       	mov	r24, r15
    3ab8:	90 2f       	mov	r25, r16
    3aba:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
    3abe:	1d c0       	rjmp	.+58     	; 0x3afa <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    3ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac2:	8f 93       	push	r24
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	8f 93       	push	r24
    3ac8:	8a ec       	ldi	r24, 0xCA	; 202
    3aca:	96 e0       	ldi	r25, 0x06	; 6
    3acc:	a0 e0       	ldi	r26, 0x00	; 0
    3ace:	af 93       	push	r26
    3ad0:	9f 93       	push	r25
    3ad2:	8f 93       	push	r24
    3ad4:	0f 93       	push	r16
    3ad6:	ff 92       	push	r15
    3ad8:	0e 94 48 2a 	call	0x5490	; 0x5490 <sprintf>
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	cd bf       	out	0x3d, r28	; 61
    3ae6:	09 c0       	rjmp	.+18     	; 0x3afa <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3ae8:	26 e1       	ldi	r18, 0x16	; 22
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	41 ed       	ldi	r20, 0xD1	; 209
    3aee:	56 e0       	ldi	r21, 0x06	; 6
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	8f 2d       	mov	r24, r15
    3af4:	90 2f       	mov	r25, r16
    3af6:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
	}
}
    3afa:	81 2f       	mov	r24, r17
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	ff 90       	pop	r15
    3b0a:	08 95       	ret

Disassembly of section .text.handle_pump:

00003b0c <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    3b0c:	cf 92       	push	r12
    3b0e:	df 92       	push	r13
    3b10:	ef 92       	push	r14
    3b12:	0f 93       	push	r16
    3b14:	1f 93       	push	r17
    3b16:	cf 93       	push	r28
    3b18:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    3b1a:	22 e0       	ldi	r18, 0x02	; 2
    3b1c:	44 e1       	ldi	r20, 0x14	; 20
    3b1e:	5f e0       	ldi	r21, 0x0F	; 15
    3b20:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    3b24:	c8 2f       	mov	r28, r24
    3b26:	88 23       	and	r24, r24
    3b28:	d9 f1       	breq	.+118    	; 0x3ba0 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    3b2a:	84 e1       	ldi	r24, 0x14	; 20
    3b2c:	9f e0       	ldi	r25, 0x0F	; 15
    3b2e:	6c 01       	movw	r12, r24
    3b30:	20 e8       	ldi	r18, 0x80	; 128
    3b32:	e2 2e       	mov	r14, r18
    3b34:	25 e7       	ldi	r18, 0x75	; 117
    3b36:	36 e0       	ldi	r19, 0x06	; 6
    3b38:	40 e0       	ldi	r20, 0x00	; 0
    3b3a:	8e 2d       	mov	r24, r14
    3b3c:	b6 01       	movw	r22, r12
    3b3e:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    3b42:	89 2b       	or	r24, r25
    3b44:	71 f4       	brne	.+28     	; 0x3b62 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    3b46:	0e 94 1d 33 	call	0x663a	; 0x663a <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    3b50:	25 e1       	ldi	r18, 0x15	; 21
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	47 ee       	ldi	r20, 0xE7	; 231
    3b56:	56 e0       	ldi	r21, 0x06	; 6
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	c8 01       	movw	r24, r16
    3b5c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    3b60:	1f c0       	rjmp	.+62     	; 0x3ba0 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    3b62:	20 e9       	ldi	r18, 0x90	; 144
    3b64:	36 e0       	ldi	r19, 0x06	; 6
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	8e 2d       	mov	r24, r14
    3b6a:	b6 01       	movw	r22, r12
    3b6c:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    3b70:	89 2b       	or	r24, r25
    3b72:	71 f4       	brne	.+28     	; 0x3b90 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    3b74:	0e 94 1d 33 	call	0x663a	; 0x663a <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    3b7e:	26 e1       	ldi	r18, 0x16	; 22
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	4c ef       	ldi	r20, 0xFC	; 252
    3b84:	56 e0       	ldi	r21, 0x06	; 6
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	c8 01       	movw	r24, r16
    3b8a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
    3b8e:	08 c0       	rjmp	.+16     	; 0x3ba0 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3b90:	26 e1       	ldi	r18, 0x16	; 22
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	41 ed       	ldi	r20, 0xD1	; 209
    3b96:	56 e0       	ldi	r21, 0x06	; 6
    3b98:	60 e0       	ldi	r22, 0x00	; 0
    3b9a:	c8 01       	movw	r24, r16
    3b9c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
	}
}
    3ba0:	8c 2f       	mov	r24, r28
    3ba2:	cf 91       	pop	r28
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ef 90       	pop	r14
    3baa:	df 90       	pop	r13
    3bac:	cf 90       	pop	r12
    3bae:	08 95       	ret

Disassembly of section .text.handle_sample:

000037ac <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    37ac:	6f 92       	push	r6
    37ae:	7f 92       	push	r7
    37b0:	8f 92       	push	r8
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	3b 01       	movw	r6, r22
    37c0:	88 2e       	mov	r8, r24
    37c2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    37c4:	21 e0       	ldi	r18, 0x01	; 1
    37c6:	44 e1       	ldi	r20, 0x14	; 20
    37c8:	5f e0       	ldi	r21, 0x0F	; 15
    37ca:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <get_parameter>
    37ce:	c8 2f       	mov	r28, r24
    37d0:	88 23       	and	r24, r24
    37d2:	e9 f1       	breq	.+122    	; 0x384e <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    37d4:	84 e1       	ldi	r24, 0x14	; 20
    37d6:	9f e0       	ldi	r25, 0x0F	; 15
    37d8:	6c 01       	movw	r12, r24
    37da:	20 e8       	ldi	r18, 0x80	; 128
    37dc:	e2 2e       	mov	r14, r18
    37de:	22 e1       	ldi	r18, 0x12	; 18
    37e0:	37 e0       	ldi	r19, 0x07	; 7
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	8e 2d       	mov	r24, r14
    37e6:	b6 01       	movw	r22, r12
    37e8:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    37ec:	89 2b       	or	r24, r25
    37ee:	39 f4       	brne	.+14     	; 0x37fe <handle_sample+0x52>
		return handle_methane(cmd, res);
    37f0:	a8 01       	movw	r20, r16
    37f2:	88 2d       	mov	r24, r8
    37f4:	b3 01       	movw	r22, r6
    37f6:	0e 94 20 14 	call	0x2840	; 0x2840 <handle_methane>
    37fa:	c8 2f       	mov	r28, r24
    37fc:	28 c0       	rjmp	.+80     	; 0x384e <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    37fe:	27 e1       	ldi	r18, 0x17	; 23
    3800:	37 e0       	ldi	r19, 0x07	; 7
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	8e 2d       	mov	r24, r14
    3806:	b6 01       	movw	r22, r12
    3808:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    380c:	89 2b       	or	r24, r25
    380e:	39 f4       	brne	.+14     	; 0x381e <handle_sample+0x72>
		return handle_co2(cmd, res);
    3810:	a8 01       	movw	r20, r16
    3812:	88 2d       	mov	r24, r8
    3814:	b3 01       	movw	r22, r6
    3816:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <handle_co2>
    381a:	c8 2f       	mov	r28, r24
    381c:	18 c0       	rjmp	.+48     	; 0x384e <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    381e:	2b e1       	ldi	r18, 0x1B	; 27
    3820:	37 e0       	ldi	r19, 0x07	; 7
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	8e 2d       	mov	r24, r14
    3826:	b6 01       	movw	r22, r12
    3828:	0e 94 13 2b 	call	0x5626	; 0x5626 <strcmp>
    382c:	89 2b       	or	r24, r25
    382e:	39 f4       	brne	.+14     	; 0x383e <handle_sample+0x92>
		return handle_pump(cmd, res);
    3830:	a8 01       	movw	r20, r16
    3832:	88 2d       	mov	r24, r8
    3834:	b3 01       	movw	r22, r6
    3836:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <handle_pump>
    383a:	c8 2f       	mov	r28, r24
    383c:	08 c0       	rjmp	.+16     	; 0x384e <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    383e:	26 e1       	ldi	r18, 0x16	; 22
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	41 ed       	ldi	r20, 0xD1	; 209
    3844:	56 e0       	ldi	r21, 0x06	; 6
    3846:	60 e0       	ldi	r22, 0x00	; 0
    3848:	c8 01       	movw	r24, r16
    384a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <memcpy>
		return true;
	}
}
    384e:	8c 2f       	mov	r24, r28
    3850:	cf 91       	pop	r28
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	ef 90       	pop	r14
    3858:	df 90       	pop	r13
    385a:	cf 90       	pop	r12
    385c:	8f 90       	pop	r8
    385e:	7f 90       	pop	r7
    3860:	6f 90       	pop	r6
    3862:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00005fa0 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    5fa0:	0e 94 ba 32 	call	0x6574	; 0x6574 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    5fa4:	0e 94 08 33 	call	0x6610	; 0x6610 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    5fa8:	81 e0       	ldi	r24, 0x01	; 1
    5faa:	0e 94 4c 32 	call	0x6498	; 0x6498 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    5fae:	0e 94 16 33 	call	0x662c	; 0x662c <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    5fb8:	0e 94 61 30 	call	0x60c2	; 0x60c2 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    5fbc:	88 23       	and	r24, r24
    5fbe:	11 f0       	breq	.+4      	; 0x5fc4 <init_methane_SCD30+0x24>
    5fc0:	80 e0       	ldi	r24, 0x00	; 0
    5fc2:	08 95       	ret
	return true;
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    5fc6:	08 95       	ret

Disassembly of section .text.count_parameters:

00004d3c <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4d3c:	6f 92       	push	r6
    4d3e:	7f 92       	push	r7
    4d40:	8f 92       	push	r8
    4d42:	cf 92       	push	r12
    4d44:	df 92       	push	r13
    4d46:	ef 92       	push	r14
    4d48:	3b 01       	movw	r6, r22
    4d4a:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4d4c:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    4d50:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    4d56:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    4d58:	10 c0       	rjmp	.+32     	; 0x4d7a <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4d5a:	e8 2c       	mov	r14, r8
    4d5c:	63 01       	movw	r12, r6
    4d5e:	c2 0e       	add	r12, r18
    4d60:	d3 1e       	adc	r13, r19
    4d62:	e1 1c       	adc	r14, r1
    4d64:	37 fd       	sbrc	r19, 7
    4d66:	ea 94       	dec	r14
    4d68:	f6 01       	movw	r30, r12
    4d6a:	94 91       	lpm	r25, Z
    4d6c:	e7 fc       	sbrc	r14, 7
    4d6e:	90 81       	ld	r25, Z
    4d70:	90 32       	cpi	r25, 0x20	; 32
    4d72:	09 f4       	brne	.+2      	; 0x4d76 <count_parameters+0x3a>
			cnt++;
    4d74:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4d76:	2f 5f       	subi	r18, 0xFF	; 255
    4d78:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7a:	26 17       	cp	r18, r22
    4d7c:	37 07       	cpc	r19, r23
    4d7e:	68 f3       	brcs	.-38     	; 0x4d5a <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4d80:	ef 90       	pop	r14
    4d82:	df 90       	pop	r13
    4d84:	cf 90       	pop	r12
    4d86:	8f 90       	pop	r8
    4d88:	7f 90       	pop	r7
    4d8a:	6f 90       	pop	r6
    4d8c:	08 95       	ret

Disassembly of section .text.par_index:

00004614 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    4614:	cf 92       	push	r12
    4616:	df 92       	push	r13
    4618:	ef 92       	push	r14
    461a:	0f 93       	push	r16
    461c:	1f 93       	push	r17
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4622:	44 23       	and	r20, r20
    4624:	29 f1       	breq	.+74     	; 0x4670 <par_index+0x5c>
    4626:	04 2f       	mov	r16, r20
    4628:	6b 01       	movw	r12, r22
    462a:	e8 2e       	mov	r14, r24
    462c:	c0 e0       	ldi	r28, 0x00	; 0
    462e:	d0 e0       	ldi	r29, 0x00	; 0
    4630:	10 e0       	ldi	r17, 0x00	; 0
    4632:	14 c0       	rjmp	.+40     	; 0x465c <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    4634:	ae 2d       	mov	r26, r14
    4636:	c6 01       	movw	r24, r12
    4638:	8c 0f       	add	r24, r28
    463a:	9d 1f       	adc	r25, r29
    463c:	a1 1d       	adc	r26, r1
    463e:	d7 fd       	sbrc	r29, 7
    4640:	aa 95       	dec	r26
    4642:	fc 01       	movw	r30, r24
    4644:	84 91       	lpm	r24, Z
    4646:	a7 fd       	sbrc	r26, 7
    4648:	80 81       	ld	r24, Z
    464a:	80 32       	cpi	r24, 0x20	; 32
    464c:	31 f4       	brne	.+12     	; 0x465a <par_index+0x46>
			cnt++;
    464e:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    4650:	01 13       	cpse	r16, r17
    4652:	03 c0       	rjmp	.+6      	; 0x465a <par_index+0x46>
				return i+1;
    4654:	ce 01       	movw	r24, r28
    4656:	01 96       	adiw	r24, 0x01	; 1
    4658:	0d c0       	rjmp	.+26     	; 0x4674 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    465a:	21 96       	adiw	r28, 0x01	; 1
    465c:	8e 2d       	mov	r24, r14
    465e:	b6 01       	movw	r22, r12
    4660:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    4664:	c8 17       	cp	r28, r24
    4666:	d9 07       	cpc	r29, r25
    4668:	28 f3       	brcs	.-54     	; 0x4634 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	02 c0       	rjmp	.+4      	; 0x4674 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	ef 90       	pop	r14
    467e:	df 90       	pop	r13
    4680:	cf 90       	pop	r12
    4682:	08 95       	ret

Disassembly of section .text.get_parameter:

00003e20 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3e20:	8f 92       	push	r8
    3e22:	9f 92       	push	r9
    3e24:	af 92       	push	r10
    3e26:	cf 92       	push	r12
    3e28:	df 92       	push	r13
    3e2a:	ef 92       	push	r14
    3e2c:	ff 92       	push	r15
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	6b 01       	movw	r12, r22
    3e38:	e8 2e       	mov	r14, r24
    3e3a:	ea 01       	movw	r28, r20
    3e3c:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3e3e:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <count_parameters>
	if(pars<parNo) return false;
    3e42:	8f 15       	cp	r24, r15
    3e44:	58 f1       	brcs	.+86     	; 0x3e9c <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    3e46:	8e 2d       	mov	r24, r14
    3e48:	b6 01       	movw	r22, r12
    3e4a:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    3e4e:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3e50:	4f 2d       	mov	r20, r15
    3e52:	8e 2d       	mov	r24, r14
    3e54:	b6 01       	movw	r22, r12
    3e56:	0e 94 0a 23 	call	0x4614	; 0x4614 <par_index>
	uint8_t parLen=0;
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3e5c:	15 c0       	rjmp	.+42     	; 0x3e88 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3e5e:	46 01       	movw	r8, r12
    3e60:	ae 2c       	mov	r10, r14
    3e62:	82 0e       	add	r8, r18
    3e64:	93 1e       	adc	r9, r19
    3e66:	a1 1c       	adc	r10, r1
    3e68:	37 fd       	sbrc	r19, 7
    3e6a:	aa 94       	dec	r10
    3e6c:	4a 2d       	mov	r20, r10
    3e6e:	94 01       	movw	r18, r8
    3e70:	f4 01       	movw	r30, r8
    3e72:	24 91       	lpm	r18, Z
    3e74:	47 fd       	sbrc	r20, 7
    3e76:	20 81       	ld	r18, Z
    3e78:	20 32       	cpi	r18, 0x20	; 32
    3e7a:	59 f0       	breq	.+22     	; 0x3e92 <get_parameter+0x72>
		par[parLen++]=src[i];
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e9 0f       	add	r30, r25
    3e80:	f1 1d       	adc	r31, r1
    3e82:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3e84:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    3e86:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	20 17       	cp	r18, r16
    3e8e:	31 07       	cpc	r19, r17
    3e90:	30 f3       	brcs	.-52     	; 0x3e5e <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    3e92:	c9 0f       	add	r28, r25
    3e94:	d1 1d       	adc	r29, r1
    3e96:	18 82       	st	Y, r1
	
	return true;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	01 c0       	rjmp	.+2      	; 0x3e9e <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	df 90       	pop	r13
    3eac:	cf 90       	pop	r12
    3eae:	af 90       	pop	r10
    3eb0:	9f 90       	pop	r9
    3eb2:	8f 90       	pop	r8
    3eb4:	08 95       	ret

Disassembly of section .text.decode_stage_response:

0000646c <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    646c:	88 23       	and	r24, r24
    646e:	19 f0       	breq	.+6      	; 0x6476 <decode_stage_response+0xa>
    6470:	81 30       	cpi	r24, 0x01	; 1
    6472:	29 f0       	breq	.+10     	; 0x647e <decode_stage_response+0x12>
    6474:	02 c0       	rjmp	.+4      	; 0x647a <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6476:	81 e1       	ldi	r24, 0x11	; 17
    6478:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    647a:	86 e1       	ldi	r24, 0x16	; 22
    647c:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    647e:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6480:	08 95       	ret

Disassembly of section .text.decode_join_response:

00006346 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    6346:	82 30       	cpi	r24, 0x02	; 2
    6348:	51 f0       	breq	.+20     	; 0x635e <decode_join_response+0x18>
    634a:	83 30       	cpi	r24, 0x03	; 3
    634c:	21 f0       	breq	.+8      	; 0x6356 <decode_join_response+0x10>
    634e:	81 11       	cpse	r24, r1
    6350:	04 c0       	rjmp	.+8      	; 0x635a <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    6352:	83 e0       	ldi	r24, 0x03	; 3
    6354:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    6356:	85 e0       	ldi	r24, 0x05	; 5
    6358:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    635a:	86 e1       	ldi	r24, 0x16	; 22
    635c:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    635e:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    6360:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00006260 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    6260:	82 30       	cpi	r24, 0x02	; 2
    6262:	49 f0       	breq	.+18     	; 0x6276 <decode_header_tail_response+0x16>
    6264:	18 f4       	brcc	.+6      	; 0x626c <decode_header_tail_response+0xc>
    6266:	88 23       	and	r24, r24
    6268:	41 f0       	breq	.+16     	; 0x627a <decode_header_tail_response+0x1a>
    626a:	03 c0       	rjmp	.+6      	; 0x6272 <decode_header_tail_response+0x12>
    626c:	84 50       	subi	r24, 0x04	; 4
    626e:	82 30       	cpi	r24, 0x02	; 2
    6270:	20 f0       	brcs	.+8      	; 0x627a <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    6272:	86 e1       	ldi	r24, 0x16	; 22
    6274:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6276:	84 2f       	mov	r24, r20
    6278:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    627a:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    627c:	08 95       	ret

Disassembly of section .text.read_eeprom:

00004ade <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    4ade:	89 e3       	ldi	r24, 0x39	; 57
    4ae0:	9f e0       	ldi	r25, 0x0F	; 15
    4ae2:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <EM_get_deveui>
	EM_get_appeui(appeui);
    4ae6:	88 e2       	ldi	r24, 0x28	; 40
    4ae8:	9f e0       	ldi	r25, 0x0F	; 15
    4aea:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <EM_get_appeui>
	EM_get_appkey(appkey);
    4aee:	83 ef       	ldi	r24, 0xF3	; 243
    4af0:	9e e0       	ldi	r25, 0x0E	; 14
    4af2:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    4af6:	63 e2       	ldi	r22, 0x23	; 35
    4af8:	80 ed       	ldi	r24, 0xD0	; 208
    4afa:	9e e0       	ldi	r25, 0x0E	; 14
    4afc:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <EM_get_collections>
	EM_get_Vcc(&vccx);
    4b00:	83 e7       	ldi	r24, 0x73	; 115
    4b02:	9f e0       	ldi	r25, 0x0F	; 15
    4b04:	0e 94 21 31 	call	0x6242	; 0x6242 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    4b08:	8f e6       	ldi	r24, 0x6F	; 111
    4b0a:	9f e0       	ldi	r25, 0x0F	; 15
    4b0c:	0e 94 12 31 	call	0x6224	; 0x6224 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    4b10:	8b e6       	ldi	r24, 0x6B	; 107
    4b12:	9f e0       	ldi	r25, 0x0F	; 15
    4b14:	0e 94 03 31 	call	0x6206	; 0x6206 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    4b18:	0e 94 bb 33 	call	0x6776	; 0x6776 <EM_get_heat_up_time>
    4b1c:	80 93 ab 0f 	sts	0x0FAB, r24	; 0x800fab <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    4b20:	0e 94 c7 33 	call	0x678e	; 0x678e <EM_get_air_pump_time>
    4b24:	90 93 92 0f 	sts	0x0F92, r25	; 0x800f92 <airPumpTime+0x1>
    4b28:	80 93 91 0f 	sts	0x0F91, r24	; 0x800f91 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    4b2c:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <EM_get_sp_interval>
    4b30:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <samplingProcessInterval>
	return true;
}
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	08 95       	ret

Disassembly of section .text.join_lora:

000065aa <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    65aa:	43 ef       	ldi	r20, 0xF3	; 243
    65ac:	5e e0       	ldi	r21, 0x0E	; 14
    65ae:	68 e2       	ldi	r22, 0x28	; 40
    65b0:	7f e0       	ldi	r23, 0x0F	; 15
    65b2:	89 e3       	ldi	r24, 0x39	; 57
    65b4:	9f e0       	ldi	r25, 0x0F	; 15
    65b6:	0e 94 87 34 	call	0x690e	; 0x690e <LM_join_network>
}
    65ba:	08 95       	ret

Disassembly of section .text.set_wakeup:

00006878 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    6878:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <samplingProcessInterval>
    687c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <RTC_set_wake_up_interrupt_minutes>
}
    6880:	08 95       	ret

Disassembly of section .text.send_header:

000056e8 <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    56e8:	cf 93       	push	r28
    56ea:	df 93       	push	r29
    56ec:	cd b7       	in	r28, 0x3d	; 61
    56ee:	de b7       	in	r29, 0x3e	; 62
    56f0:	e4 97       	sbiw	r28, 0x34	; 52
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	f8 94       	cli
    56f6:	de bf       	out	0x3e, r29	; 62
    56f8:	0f be       	out	0x3f, r0	; 63
    56fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    56fc:	be 01       	movw	r22, r28
    56fe:	6c 5c       	subi	r22, 0xCC	; 204
    5700:	7f 4f       	sbci	r23, 0xFF	; 255
    5702:	ce 01       	movw	r24, r28
    5704:	01 96       	adiw	r24, 0x01	; 1
    5706:	0e 94 3f 30 	call	0x607e	; 0x607e <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    570a:	6c a9       	ldd	r22, Y+52	; 0x34
    570c:	ce 01       	movw	r24, r28
    570e:	01 96       	adiw	r24, 0x01	; 1
    5710:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <LM_send_uplink>
}
    5714:	e4 96       	adiw	r28, 0x34	; 52
    5716:	0f b6       	in	r0, 0x3f	; 63
    5718:	f8 94       	cli
    571a:	de bf       	out	0x3e, r29	; 62
    571c:	0f be       	out	0x3f, r0	; 63
    571e:	cd bf       	out	0x3d, r28	; 61
    5720:	df 91       	pop	r29
    5722:	cf 91       	pop	r28
    5724:	08 95       	ret

Disassembly of section .text.send_body:

000056a8 <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
    56ac:	cd b7       	in	r28, 0x3d	; 61
    56ae:	de b7       	in	r29, 0x3e	; 62
    56b0:	e4 97       	sbiw	r28, 0x34	; 52
    56b2:	0f b6       	in	r0, 0x3f	; 63
    56b4:	f8 94       	cli
    56b6:	de bf       	out	0x3e, r29	; 62
    56b8:	0f be       	out	0x3f, r0	; 63
    56ba:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    56bc:	ae 01       	movw	r20, r28
    56be:	4c 5c       	subi	r20, 0xCC	; 204
    56c0:	5f 4f       	sbci	r21, 0xFF	; 255
    56c2:	be 01       	movw	r22, r28
    56c4:	6f 5f       	subi	r22, 0xFF	; 255
    56c6:	7f 4f       	sbci	r23, 0xFF	; 255
    56c8:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    56cc:	6c a9       	ldd	r22, Y+52	; 0x34
    56ce:	ce 01       	movw	r24, r28
    56d0:	01 96       	adiw	r24, 0x01	; 1
    56d2:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <LM_send_uplink>
}
    56d6:	e4 96       	adiw	r28, 0x34	; 52
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	f8 94       	cli
    56dc:	de bf       	out	0x3e, r29	; 62
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	cd bf       	out	0x3d, r28	; 61
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	08 95       	ret

Disassembly of section .text.decode_body_response:

00005fc8 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    5fc8:	cf 93       	push	r28
	switch(status){
    5fca:	62 30       	cpi	r22, 0x02	; 2
    5fcc:	71 f0       	breq	.+28     	; 0x5fea <decode_body_response+0x22>
    5fce:	18 f4       	brcc	.+6      	; 0x5fd6 <decode_body_response+0xe>
    5fd0:	66 23       	and	r22, r22
    5fd2:	31 f0       	breq	.+12     	; 0x5fe0 <decode_body_response+0x18>
    5fd4:	03 c0       	rjmp	.+6      	; 0x5fdc <decode_body_response+0x14>
    5fd6:	64 50       	subi	r22, 0x04	; 4
    5fd8:	62 30       	cpi	r22, 0x02	; 2
    5fda:	10 f0       	brcs	.+4      	; 0x5fe0 <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    5fdc:	86 e1       	ldi	r24, 0x16	; 22
    5fde:	06 c0       	rjmp	.+12     	; 0x5fec <decode_body_response+0x24>
    5fe0:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    5fe2:	0e 94 f7 33 	call	0x67ee	; 0x67ee <MRPP_set_body_sent>
			return success;
    5fe6:	8c 2f       	mov	r24, r28
    5fe8:	01 c0       	rjmp	.+2      	; 0x5fec <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    5fea:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    5fec:	cf 91       	pop	r28
    5fee:	08 95       	ret

Disassembly of section .text.send_tail:

00005726 <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    5726:	cf 93       	push	r28
    5728:	df 93       	push	r29
    572a:	cd b7       	in	r28, 0x3d	; 61
    572c:	de b7       	in	r29, 0x3e	; 62
    572e:	e4 97       	sbiw	r28, 0x34	; 52
    5730:	0f b6       	in	r0, 0x3f	; 63
    5732:	f8 94       	cli
    5734:	de bf       	out	0x3e, r29	; 62
    5736:	0f be       	out	0x3f, r0	; 63
    5738:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    573a:	be 01       	movw	r22, r28
    573c:	6c 5c       	subi	r22, 0xCC	; 204
    573e:	7f 4f       	sbci	r23, 0xFF	; 255
    5740:	ce 01       	movw	r24, r28
    5742:	01 96       	adiw	r24, 0x01	; 1
    5744:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    5748:	6c a9       	ldd	r22, Y+52	; 0x34
    574a:	ce 01       	movw	r24, r28
    574c:	01 96       	adiw	r24, 0x01	; 1
    574e:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <LM_send_uplink>
}
    5752:	e4 96       	adiw	r28, 0x34	; 52
    5754:	0f b6       	in	r0, 0x3f	; 63
    5756:	f8 94       	cli
    5758:	de bf       	out	0x3e, r29	; 62
    575a:	0f be       	out	0x3f, r0	; 63
    575c:	cd bf       	out	0x3d, r28	; 61
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	08 95       	ret

Disassembly of section .text.send_msg:

000063fa <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    63fa:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <uart1_hal_send_string>
    63fe:	2f ef       	ldi	r18, 0xFF	; 255
    6400:	80 e7       	ldi	r24, 0x70	; 112
    6402:	92 e0       	ldi	r25, 0x02	; 2
    6404:	21 50       	subi	r18, 0x01	; 1
    6406:	80 40       	sbci	r24, 0x00	; 0
    6408:	90 40       	sbci	r25, 0x00	; 0
    640a:	e1 f7       	brne	.-8      	; 0x6404 <send_msg+0xa>
    640c:	00 c0       	rjmp	.+0      	; 0x640e <send_msg+0x14>
    640e:	00 00       	nop
    6410:	08 95       	ret

Disassembly of section .text.stage_0:

000032fa <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    32fa:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <state_s0>
    32fe:	82 30       	cpi	r24, 0x02	; 2
    3300:	41 f1       	breq	.+80     	; 0x3352 <stage_0+0x58>
    3302:	28 f4       	brcc	.+10     	; 0x330e <stage_0+0x14>
    3304:	88 23       	and	r24, r24
    3306:	51 f0       	breq	.+20     	; 0x331c <stage_0+0x22>
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	d9 f0       	breq	.+54     	; 0x3342 <stage_0+0x48>
    330c:	f6 cf       	rjmp	.-20     	; 0x32fa <stage_0>
    330e:	84 30       	cpi	r24, 0x04	; 4
    3310:	09 f4       	brne	.+2      	; 0x3314 <stage_0+0x1a>
    3312:	50 c0       	rjmp	.+160    	; 0x33b4 <stage_0+0xba>
    3314:	40 f1       	brcs	.+80     	; 0x3366 <stage_0+0x6c>
    3316:	85 30       	cpi	r24, 0x05	; 5
    3318:	91 f1       	breq	.+100    	; 0x337e <stage_0+0x84>
    331a:	ef cf       	rjmp	.-34     	; 0x32fa <stage_0>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    331c:	64 e6       	ldi	r22, 0x64	; 100
    331e:	72 e0       	ldi	r23, 0x02	; 2
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    3326:	e0 ed       	ldi	r30, 0xD0	; 208
    3328:	fe e0       	ldi	r31, 0x0E	; 14
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	4a ec       	ldi	r20, 0xCA	; 202
    3330:	5a e0       	ldi	r21, 0x0A	; 10
    3332:	82 81       	ldd	r24, Z+2	; 0x02
    3334:	93 81       	ldd	r25, Z+3	; 0x03
    3336:	0e 94 72 30 	call	0x60e4	; 0x60e4 <SCD30_init_sampling>
				state_s0=STAGE_GET_TIME;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3340:	dc cf       	rjmp	.-72     	; 0x32fa <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    3342:	84 e5       	ldi	r24, 0x54	; 84
    3344:	9f e0       	ldi	r25, 0x0F	; 15
    3346:	0e 94 ba 11 	call	0x2374	; 0x2374 <RTC_get_current_time>
				state_s0=STAGE_START;
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3350:	d4 cf       	rjmp	.-88     	; 0x32fa <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    3352:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <methHeatUpTime>
    3356:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    335a:	0e 94 37 34 	call	0x686e	; 0x686e <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    335e:	83 e0       	ldi	r24, 0x03	; 3
    3360:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3364:	ca cf       	rjmp	.-108    	; 0x32fa <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3366:	0e 94 c3 32 	call	0x6586	; 0x6586 <ADC_meth_sens_ready>
    336a:	88 23       	and	r24, r24
    336c:	61 f1       	breq	.+88     	; 0x33c6 <stage_0+0xcc>
    336e:	0e 94 95 31 	call	0x632a	; 0x632a <SCD30_is_sampling_done>
    3372:	88 23       	and	r24, r24
    3374:	51 f1       	breq	.+84     	; 0x33ca <stage_0+0xd0>
				state_s0=STAGE_UPDATE_MRPP;
    3376:	85 e0       	ldi	r24, 0x05	; 5
    3378:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    337c:	be cf       	rjmp	.-132    	; 0x32fa <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    337e:	27 e7       	ldi	r18, 0x77	; 119
    3380:	3f e0       	ldi	r19, 0x0F	; 15
    3382:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    3386:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    338a:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    338e:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    3392:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    3396:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    339a:	0e 94 8f 13 	call	0x271e	; 0x271e <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    339e:	4a ec       	ldi	r20, 0xCA	; 202
    33a0:	5a e0       	ldi	r21, 0x0A	; 10
    33a2:	67 e7       	ldi	r22, 0x77	; 119
    33a4:	7f e0       	ldi	r23, 0x0F	; 15
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    33ac:	84 e0       	ldi	r24, 0x04	; 4
    33ae:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    33b2:	a3 cf       	rjmp	.-186    	; 0x32fa <stage_0>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    33b4:	63 e7       	ldi	r22, 0x73	; 115
    33b6:	72 e0       	ldi	r23, 0x02	; 2
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_deinit_sampling();
    33be:	0e 94 71 33 	call	0x66e2	; 0x66e2 <SCD30_deinit_sampling>
				return STAGE_DONE;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	08 95       	ret
    33ca:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    33cc:	08 95       	ret

Disassembly of section .text.stage_1:

00002c7c <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    2c80:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <state_s1>
    2c84:	82 30       	cpi	r24, 0x02	; 2
    2c86:	89 f1       	breq	.+98     	; 0x2cea <stage_1+0x6e>
    2c88:	28 f4       	brcc	.+10     	; 0x2c94 <stage_1+0x18>
    2c8a:	88 23       	and	r24, r24
    2c8c:	51 f0       	breq	.+20     	; 0x2ca2 <stage_1+0x26>
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	21 f1       	breq	.+72     	; 0x2cda <stage_1+0x5e>
    2c92:	f6 cf       	rjmp	.-20     	; 0x2c80 <stage_1+0x4>
    2c94:	84 30       	cpi	r24, 0x04	; 4
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <stage_1+0x1e>
    2c98:	5e c0       	rjmp	.+188    	; 0x2d56 <stage_1+0xda>
    2c9a:	78 f1       	brcs	.+94     	; 0x2cfa <stage_1+0x7e>
    2c9c:	85 30       	cpi	r24, 0x05	; 5
    2c9e:	c9 f1       	breq	.+114    	; 0x2d12 <stage_1+0x96>
    2ca0:	ef cf       	rjmp	.-34     	; 0x2c80 <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2ca2:	65 e8       	ldi	r22, 0x85	; 133
    2ca4:	72 e0       	ldi	r23, 0x02	; 2
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2cac:	c0 ed       	ldi	r28, 0xD0	; 208
    2cae:	de e0       	ldi	r29, 0x0E	; 14
    2cb0:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cb2:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cb4:	4a ec       	ldi	r20, 0xCA	; 202
    2cb6:	5a e0       	ldi	r21, 0x0A	; 10
    2cb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cba:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cbc:	0e 94 72 30 	call	0x60e4	; 0x60e4 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2cc0:	6d 81       	ldd	r22, Y+5	; 0x05
    2cc2:	7e 81       	ldd	r23, Y+6	; 0x06
    2cc4:	42 e7       	ldi	r20, 0x72	; 114
    2cc6:	58 e0       	ldi	r21, 0x08	; 8
    2cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cca:	0e 94 83 24 	call	0x4906	; 0x4906 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2cce:	81 11       	cpse	r24, r1
    2cd0:	4d c0       	rjmp	.+154    	; 0x2d6c <stage_1+0xf0>
				
				state_s1=STAGE_GET_TIME;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2cd8:	d3 cf       	rjmp	.-90     	; 0x2c80 <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2cda:	84 e5       	ldi	r24, 0x54	; 84
    2cdc:	9f e0       	ldi	r25, 0x0F	; 15
    2cde:	0e 94 ba 11 	call	0x2374	; 0x2374 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2ce8:	cb cf       	rjmp	.-106    	; 0x2c80 <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2cea:	0e 94 37 34 	call	0x686e	; 0x686e <SCD30_start_sampling>
				ADC_start_sampling();
    2cee:	0e 94 28 34 	call	0x6850	; 0x6850 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2cf8:	c3 cf       	rjmp	.-122    	; 0x2c80 <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2cfa:	0e 94 95 31 	call	0x632a	; 0x632a <SCD30_is_sampling_done>
    2cfe:	88 23       	and	r24, r24
    2d00:	b9 f1       	breq	.+110    	; 0x2d70 <stage_1+0xf4>
    2d02:	0e 94 5d 31 	call	0x62ba	; 0x62ba <ADC_is_sampling_done>
    2d06:	88 23       	and	r24, r24
    2d08:	a9 f1       	breq	.+106    	; 0x2d74 <stage_1+0xf8>
				state_s1=STAGE_UPDATE_MRPP;
    2d0a:	85 e0       	ldi	r24, 0x05	; 5
    2d0c:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2d10:	b7 cf       	rjmp	.-146    	; 0x2c80 <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2d12:	27 e7       	ldi	r18, 0x77	; 119
    2d14:	3f e0       	ldi	r19, 0x0F	; 15
    2d16:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2d1a:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2d1e:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2d22:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2d26:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2d2a:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2d2e:	0e 94 8f 13 	call	0x271e	; 0x271e <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2d32:	4a ec       	ldi	r20, 0xCA	; 202
    2d34:	5a e0       	ldi	r21, 0x0A	; 10
    2d36:	67 e7       	ldi	r22, 0x77	; 119
    2d38:	7f e0       	ldi	r23, 0x0F	; 15
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2d40:	42 e7       	ldi	r20, 0x72	; 114
    2d42:	58 e0       	ldi	r21, 0x08	; 8
    2d44:	67 e7       	ldi	r22, 0x77	; 119
    2d46:	7f e0       	ldi	r23, 0x0F	; 15
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    2d4e:	84 e0       	ldi	r24, 0x04	; 4
    2d50:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2d54:	95 cf       	rjmp	.-214    	; 0x2c80 <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2d56:	64 e9       	ldi	r22, 0x94	; 148
    2d58:	72 e0       	ldi	r23, 0x02	; 2
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_deinit_sampling();
    2d60:	0e 94 71 33 	call	0x66e2	; 0x66e2 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2d64:	0e 94 a6 32 	call	0x654c	; 0x654c <ADC_deinit_sampling>
				return STAGE_DONE;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <stage_1+0xfa>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2d6c:	83 e0       	ldi	r24, 0x03	; 3
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <stage_1+0xfa>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <stage_1+0xfa>
    2d74:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	08 95       	ret

Disassembly of section .text.stage_2:

0000295a <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    295e:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <state_s2>
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	91 f1       	breq	.+100    	; 0x29ca <stage_2+0x70>
    2966:	28 f4       	brcc	.+10     	; 0x2972 <stage_2+0x18>
    2968:	88 23       	and	r24, r24
    296a:	59 f0       	breq	.+22     	; 0x2982 <stage_2+0x28>
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	29 f1       	breq	.+74     	; 0x29ba <stage_2+0x60>
    2970:	f6 cf       	rjmp	.-20     	; 0x295e <stage_2+0x4>
    2972:	84 30       	cpi	r24, 0x04	; 4
    2974:	09 f4       	brne	.+2      	; 0x2978 <stage_2+0x1e>
    2976:	69 c0       	rjmp	.+210    	; 0x2a4a <stage_2+0xf0>
    2978:	b0 f1       	brcs	.+108    	; 0x29e6 <stage_2+0x8c>
    297a:	85 30       	cpi	r24, 0x05	; 5
    297c:	09 f4       	brne	.+2      	; 0x2980 <stage_2+0x26>
    297e:	43 c0       	rjmp	.+134    	; 0x2a06 <stage_2+0xac>
    2980:	ee cf       	rjmp	.-36     	; 0x295e <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    2982:	66 ea       	ldi	r22, 0xA6	; 166
    2984:	72 e0       	ldi	r23, 0x02	; 2
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    298c:	c0 ed       	ldi	r28, 0xD0	; 208
    298e:	de e0       	ldi	r29, 0x0E	; 14
    2990:	6c 89       	ldd	r22, Y+20	; 0x14
    2992:	7d 89       	ldd	r23, Y+21	; 0x15
    2994:	4a ec       	ldi	r20, 0xCA	; 202
    2996:	5a e0       	ldi	r21, 0x0A	; 10
    2998:	8e 89       	ldd	r24, Y+22	; 0x16
    299a:	9f 89       	ldd	r25, Y+23	; 0x17
    299c:	0e 94 72 30 	call	0x60e4	; 0x60e4 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    29a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    29a2:	78 89       	ldd	r23, Y+16	; 0x10
    29a4:	42 e7       	ldi	r20, 0x72	; 114
    29a6:	58 e0       	ldi	r21, 0x08	; 8
    29a8:	89 89       	ldd	r24, Y+17	; 0x11
    29aa:	0e 94 83 24 	call	0x4906	; 0x4906 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    29ae:	81 11       	cpse	r24, r1
    29b0:	57 c0       	rjmp	.+174    	; 0x2a60 <stage_2+0x106>
			
				state_s2=STAGE_GET_TIME;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    29b8:	d2 cf       	rjmp	.-92     	; 0x295e <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    29ba:	84 e5       	ldi	r24, 0x54	; 84
    29bc:	9f e0       	ldi	r25, 0x0F	; 15
    29be:	0e 94 ba 11 	call	0x2374	; 0x2374 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    29c8:	ca cf       	rjmp	.-108    	; 0x295e <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    29ca:	0e 94 37 34 	call	0x686e	; 0x686e <SCD30_start_sampling>
				ADC_start_sampling();
    29ce:	0e 94 28 34 	call	0x6850	; 0x6850 <ADC_start_sampling>
				PUMP_start(airPumpTime);
    29d2:	80 91 91 0f 	lds	r24, 0x0F91	; 0x800f91 <airPumpTime>
    29d6:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <airPumpTime+0x1>
    29da:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <PUMP_start>
			
				state_s2=STAGE_WAIT;
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    29e4:	bc cf       	rjmp	.-136    	; 0x295e <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    29e6:	0e 94 95 31 	call	0x632a	; 0x632a <SCD30_is_sampling_done>
    29ea:	88 23       	and	r24, r24
    29ec:	d9 f1       	breq	.+118    	; 0x2a64 <stage_2+0x10a>
    29ee:	0e 94 5d 31 	call	0x62ba	; 0x62ba <ADC_is_sampling_done>
    29f2:	88 23       	and	r24, r24
    29f4:	c9 f1       	breq	.+114    	; 0x2a68 <stage_2+0x10e>
    29f6:	0e 94 87 31 	call	0x630e	; 0x630e <PUMP_is_done>
    29fa:	88 23       	and	r24, r24
    29fc:	b9 f1       	breq	.+110    	; 0x2a6c <stage_2+0x112>
				state_s2=STAGE_UPDATE_MRPP;
    29fe:	85 e0       	ldi	r24, 0x05	; 5
    2a00:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2a04:	ac cf       	rjmp	.-168    	; 0x295e <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2a06:	27 e7       	ldi	r18, 0x77	; 119
    2a08:	3f e0       	ldi	r19, 0x0F	; 15
    2a0a:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2a0e:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2a12:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2a16:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2a1a:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2a1e:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2a22:	0e 94 8f 13 	call	0x271e	; 0x271e <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2a26:	4a ec       	ldi	r20, 0xCA	; 202
    2a28:	5a e0       	ldi	r21, 0x0A	; 10
    2a2a:	67 e7       	ldi	r22, 0x77	; 119
    2a2c:	7f e0       	ldi	r23, 0x0F	; 15
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    2a34:	42 e7       	ldi	r20, 0x72	; 114
    2a36:	58 e0       	ldi	r21, 0x08	; 8
    2a38:	67 e7       	ldi	r22, 0x77	; 119
    2a3a:	7f e0       	ldi	r23, 0x0F	; 15
    2a3c:	84 e0       	ldi	r24, 0x04	; 4
    2a3e:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    2a42:	84 e0       	ldi	r24, 0x04	; 4
    2a44:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2a48:	8a cf       	rjmp	.-236    	; 0x295e <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2a4a:	65 eb       	ldi	r22, 0xB5	; 181
    2a4c:	72 e0       	ldi	r23, 0x02	; 2
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_deinit_sampling();
    2a54:	0e 94 71 33 	call	0x66e2	; 0x66e2 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2a58:	0e 94 a6 32 	call	0x654c	; 0x654c <ADC_deinit_sampling>
				return STAGE_DONE;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	07 c0       	rjmp	.+14     	; 0x2a6e <stage_2+0x114>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2a60:	83 e0       	ldi	r24, 0x03	; 3
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <stage_2+0x114>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <stage_2+0x114>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	01 c0       	rjmp	.+2      	; 0x2a6e <stage_2+0x114>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	08 95       	ret

Disassembly of section .text.stage_3:

00002a74 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    2a78:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <state_s3>
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	89 f1       	breq	.+98     	; 0x2ae2 <stage_3+0x6e>
    2a80:	28 f4       	brcc	.+10     	; 0x2a8c <stage_3+0x18>
    2a82:	88 23       	and	r24, r24
    2a84:	51 f0       	breq	.+20     	; 0x2a9a <stage_3+0x26>
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	21 f1       	breq	.+72     	; 0x2ad2 <stage_3+0x5e>
    2a8a:	f6 cf       	rjmp	.-20     	; 0x2a78 <stage_3+0x4>
    2a8c:	84 30       	cpi	r24, 0x04	; 4
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <stage_3+0x1e>
    2a90:	5e c0       	rjmp	.+188    	; 0x2b4e <stage_3+0xda>
    2a92:	78 f1       	brcs	.+94     	; 0x2af2 <stage_3+0x7e>
    2a94:	85 30       	cpi	r24, 0x05	; 5
    2a96:	c9 f1       	breq	.+114    	; 0x2b0a <stage_3+0x96>
    2a98:	ef cf       	rjmp	.-34     	; 0x2a78 <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    2a9a:	67 ec       	ldi	r22, 0xC7	; 199
    2a9c:	72 e0       	ldi	r23, 0x02	; 2
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    2aa4:	c0 ed       	ldi	r28, 0xD0	; 208
    2aa6:	de e0       	ldi	r29, 0x0E	; 14
    2aa8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2aaa:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2aac:	4a ec       	ldi	r20, 0xCA	; 202
    2aae:	5a e0       	ldi	r21, 0x0A	; 10
    2ab0:	88 a1       	ldd	r24, Y+32	; 0x20
    2ab2:	99 a1       	ldd	r25, Y+33	; 0x21
    2ab4:	0e 94 72 30 	call	0x60e4	; 0x60e4 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abc:	42 e7       	ldi	r20, 0x72	; 114
    2abe:	58 e0       	ldi	r21, 0x08	; 8
    2ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac2:	0e 94 83 24 	call	0x4906	; 0x4906 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2ac6:	81 11       	cpse	r24, r1
    2ac8:	51 c0       	rjmp	.+162    	; 0x2b6c <stage_3+0xf8>
			
				state_s3=STAGE_GET_TIME;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2ad0:	d3 cf       	rjmp	.-90     	; 0x2a78 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2ad2:	84 e5       	ldi	r24, 0x54	; 84
    2ad4:	9f e0       	ldi	r25, 0x0F	; 15
    2ad6:	0e 94 ba 11 	call	0x2374	; 0x2374 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2ae0:	cb cf       	rjmp	.-106    	; 0x2a78 <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2ae2:	0e 94 37 34 	call	0x686e	; 0x686e <SCD30_start_sampling>
				ADC_start_sampling();
    2ae6:	0e 94 28 34 	call	0x6850	; 0x6850 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2af0:	c3 cf       	rjmp	.-122    	; 0x2a78 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2af2:	0e 94 95 31 	call	0x632a	; 0x632a <SCD30_is_sampling_done>
    2af6:	88 23       	and	r24, r24
    2af8:	d9 f1       	breq	.+118    	; 0x2b70 <stage_3+0xfc>
    2afa:	0e 94 5d 31 	call	0x62ba	; 0x62ba <ADC_is_sampling_done>
    2afe:	88 23       	and	r24, r24
    2b00:	c9 f1       	breq	.+114    	; 0x2b74 <stage_3+0x100>
				state_s3=STAGE_UPDATE_MRPP;
    2b02:	85 e0       	ldi	r24, 0x05	; 5
    2b04:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2b08:	b7 cf       	rjmp	.-146    	; 0x2a78 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2b0a:	27 e7       	ldi	r18, 0x77	; 119
    2b0c:	3f e0       	ldi	r19, 0x0F	; 15
    2b0e:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2b12:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2b16:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2b1a:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2b1e:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2b22:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2b26:	0e 94 8f 13 	call	0x271e	; 0x271e <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2b2a:	4a ec       	ldi	r20, 0xCA	; 202
    2b2c:	5a e0       	ldi	r21, 0x0A	; 10
    2b2e:	67 e7       	ldi	r22, 0x77	; 119
    2b30:	7f e0       	ldi	r23, 0x0F	; 15
    2b32:	87 e0       	ldi	r24, 0x07	; 7
    2b34:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2b38:	42 e7       	ldi	r20, 0x72	; 114
    2b3a:	58 e0       	ldi	r21, 0x08	; 8
    2b3c:	67 e7       	ldi	r22, 0x77	; 119
    2b3e:	7f e0       	ldi	r23, 0x0F	; 15
    2b40:	86 e0       	ldi	r24, 0x06	; 6
    2b42:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2b4c:	95 cf       	rjmp	.-214    	; 0x2a78 <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    2b4e:	66 ed       	ldi	r22, 0xD6	; 214
    2b50:	72 e0       	ldi	r23, 0x02	; 2
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				SCD30_deinit_sampling();
    2b58:	0e 94 71 33 	call	0x66e2	; 0x66e2 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2b5c:	0e 94 6e 34 	call	0x68dc	; 0x68dc <SCD30_sensor_off>
				ADC_deinit_sampling();
    2b60:	0e 94 a6 32 	call	0x654c	; 0x654c <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    2b64:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	05 c0       	rjmp	.+10     	; 0x2b76 <stage_3+0x102>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b6c:	83 e0       	ldi	r24, 0x03	; 3
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <stage_3+0x102>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	01 c0       	rjmp	.+2      	; 0x2b76 <stage_3+0x102>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00001014 <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    1020:	c0 e0       	ldi	r28, 0x00	; 0
    1022:	1a c0       	rjmp	.+52     	; 0x1058 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    1024:	c6 e0       	ldi	r28, 0x06	; 6
    1026:	18 c0       	rjmp	.+48     	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1028:	c5 e0       	ldi	r28, 0x05	; 5
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <MAINPG_start+0x44>
    102c:	c5 e0       	ldi	r28, 0x05	; 5
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <MAINPG_start+0x44>
    1030:	c5 e0       	ldi	r28, 0x05	; 5
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <MAINPG_start+0x44>
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    1034:	c5 e0       	ldi	r28, 0x05	; 5
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1038:	c6 e1       	ldi	r28, 0x16	; 22
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    103c:	c6 e1       	ldi	r28, 0x16	; 22
    103e:	0c c0       	rjmp	.+24     	; 0x1058 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1040:	c6 e1       	ldi	r28, 0x16	; 22
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1044:	c6 e1       	ldi	r28, 0x16	; 22
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1048:	c6 e1       	ldi	r28, 0x16	; 22
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    104c:	cd 2f       	mov	r28, r29
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <MAINPG_start+0x44>
    1050:	cd 2f       	mov	r28, r29
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    1054:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1056:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	uint8_t groupId=0;
	

	while(1){
		switch(state){
    1058:	ec 2f       	mov	r30, r28
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e8 31       	cpi	r30, 0x18	; 24
    105e:	f1 05       	cpc	r31, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <MAINPG_start+0x44>
    1062:	e2 5a       	subi	r30, 0xA2	; 162
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	0c 94 03 34 	jmp	0x6806	; 0x6806 <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    106a:	68 ee       	ldi	r22, 0xE8	; 232
    106c:	72 e0       	ldi	r23, 0x02	; 2
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    1074:	10 92 af 0f 	sts	0x0FAF, r1	; 0x800faf <state_s0>
				state_s1=STAGE_INIT;
    1078:	10 92 ae 0f 	sts	0x0FAE, r1	; 0x800fae <state_s1>
				state_s2=STAGE_INIT;
    107c:	10 92 ad 0f 	sts	0x0FAD, r1	; 0x800fad <state_s2>
				state_s3=STAGE_INIT;
    1080:	10 92 ac 0f 	sts	0x0FAC, r1	; 0x800fac <state_s3>
				bodyIndex=-1;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
    1088:	90 93 94 0f 	sts	0x0F94, r25	; 0x800f94 <bodyIndex+0x1>
    108c:	80 93 93 0f 	sts	0x0F93, r24	; 0x800f93 <bodyIndex>
				
				uart0_hal_init();
    1090:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <uart0_hal_init>
				uart1_hal_init();
    1094:	0e 94 0c 2c 	call	0x5818	; 0x5818 <uart1_hal_init>
				TWI_HAL_init();
    1098:	0e 94 ba 32 	call	0x6574	; 0x6574 <TWI_HAL_init>
				TC2_HAL_init();
    109c:	0e 94 b4 30 	call	0x6168	; 0x6168 <TC2_HAL_init>
				rn2483_init();
    10a0:	0e 94 4a 34 	call	0x6894	; 0x6894 <rn2483_init>
				SCD30_HAL_init();
    10a4:	0e 94 2b 33 	call	0x6656	; 0x6656 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    10a8:	0e 94 08 33 	call	0x6610	; 0x6610 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    10ac:	0e 94 0f 33 	call	0x661e	; 0x661e <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    10b0:	0e 94 1d 33 	call	0x663a	; 0x663a <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    10b4:	0e 94 16 33 	call	0x662c	; 0x662c <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    10b8:	0e 94 24 33 	call	0x6648	; 0x6648 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    10bc:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <fromSleep>
    10c0:	81 11       	cpse	r24, r1
    10c2:	b0 cf       	rjmp	.-160    	; 0x1024 <MAINPG_start+0x10>
    10c4:	c1 e0       	ldi	r28, 0x01	; 1
    10c6:	c8 cf       	rjmp	.-112    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    10c8:	67 ef       	ldi	r22, 0xF7	; 247
    10ca:	72 e0       	ldi	r23, 0x02	; 2
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    10d2:	0e 94 15 32 	call	0x642a	; 0x642a <EM_has_deveui>
    10d6:	88 23       	and	r24, r24
    10d8:	09 f4       	brne	.+2      	; 0x10dc <MAINPG_start+0xc8>
    10da:	a6 cf       	rjmp	.-180    	; 0x1028 <MAINPG_start+0x14>
    10dc:	0e 94 20 32 	call	0x6440	; 0x6440 <EM_has_appeui>
    10e0:	88 23       	and	r24, r24
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <MAINPG_start+0xd2>
    10e4:	a3 cf       	rjmp	.-186    	; 0x102c <MAINPG_start+0x18>
    10e6:	0e 94 2b 32 	call	0x6456	; 0x6456 <EM_has_appkey>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <MAINPG_start+0xdc>
    10ee:	a0 cf       	rjmp	.-192    	; 0x1030 <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
    10f0:	0e 94 6f 25 	call	0x4ade	; 0x4ade <read_eeprom>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <MAINPG_start+0xe6>
    10f8:	9d cf       	rjmp	.-198    	; 0x1034 <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    10fa:	c2 e0       	ldi	r28, 0x02	; 2
    10fc:	ad cf       	rjmp	.-166    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    10fe:	65 e0       	ldi	r22, 0x05	; 5
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				LED_start_try_join();
    1108:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <LED_start_try_join>
				lmStatus=join_lora();
    110c:	0e 94 d5 32 	call	0x65aa	; 0x65aa <join_lora>
    1110:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    1112:	0e 94 00 33 	call	0x6600	; 0x6600 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    1116:	8c 2f       	mov	r24, r28
    1118:	0e 94 a3 31 	call	0x6346	; 0x6346 <decode_join_response>
    111c:	c8 2f       	mov	r28, r24
			break;
    111e:	9c cf       	rjmp	.-200    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    1120:	66 e1       	ldi	r22, 0x16	; 22
    1122:	73 e0       	ldi	r23, 0x03	; 3
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				LED_join_success();
    112a:	0e 94 34 2b 	call	0x5668	; 0x5668 <LED_join_success>
				state=MAINPG_INIT_MODULES;
    112e:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    1130:	93 cf       	rjmp	.-218    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    1132:	6a e2       	ldi	r22, 0x2A	; 42
    1134:	73 e0       	ldi	r23, 0x03	; 3
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				lmStatus=LM_wake_up();
    113c:	0e 94 8a 34 	call	0x6914	; 0x6914 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1140:	81 11       	cpse	r24, r1
    1142:	7a cf       	rjmp	.-268    	; 0x1038 <MAINPG_start+0x24>
    1144:	ca e0       	ldi	r28, 0x0A	; 10
    1146:	88 cf       	rjmp	.-240    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    1148:	6e e3       	ldi	r22, 0x3E	; 62
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				LED_join_denied();
    1152:	0e 94 5e 34 	call	0x68bc	; 0x68bc <LED_join_denied>
    1156:	2a ea       	ldi	r18, 0xAA	; 170
    1158:	36 ee       	ldi	r19, 0xE6	; 230
    115a:	86 e9       	ldi	r24, 0x96	; 150
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	d9 f7       	brne	.-10     	; 0x115e <__stack+0x5f>
    1168:	00 00       	nop
				_delay_ms(20000);
				state=MAINPG_LORA_JOIN_NETWORK;
    116a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    116c:	75 cf       	rjmp	.-278    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    116e:	64 e5       	ldi	r22, 0x54	; 84
    1170:	73 e0       	ldi	r23, 0x03	; 3
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    1178:	e0 90 6b 0f 	lds	r14, 0x0F6B	; 0x800f6b <ppmx>
    117c:	f0 90 6c 0f 	lds	r15, 0x0F6C	; 0x800f6c <ppmx+0x1>
    1180:	00 91 6d 0f 	lds	r16, 0x0F6D	; 0x800f6d <ppmx+0x2>
    1184:	10 91 6e 0f 	lds	r17, 0x0F6E	; 0x800f6e <ppmx+0x3>
    1188:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <rrlx>
    118c:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <rrlx+0x1>
    1190:	40 91 71 0f 	lds	r20, 0x0F71	; 0x800f71 <rrlx+0x2>
    1194:	50 91 72 0f 	lds	r21, 0x0F72	; 0x800f72 <rrlx+0x3>
    1198:	60 91 73 0f 	lds	r22, 0x0F73	; 0x800f73 <vccx>
    119c:	70 91 74 0f 	lds	r23, 0x0F74	; 0x800f74 <vccx+0x1>
    11a0:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <vccx+0x2>
    11a4:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <vccx+0x3>
    11a8:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    11ac:	0e 94 61 30 	call	0x60c2	; 0x60c2 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    11b0:	81 11       	cpse	r24, r1
    11b2:	44 cf       	rjmp	.-376    	; 0x103c <MAINPG_start+0x28>
    11b4:	c7 e0       	ldi	r28, 0x07	; 7
    11b6:	50 cf       	rjmp	.-352    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    11b8:	68 e6       	ldi	r22, 0x68	; 104
    11ba:	73 e0       	ldi	r23, 0x03	; 3
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    11c8:	81 11       	cpse	r24, r1
    11ca:	3a cf       	rjmp	.-396    	; 0x1040 <MAINPG_start+0x2c>
    11cc:	c9 e0       	ldi	r28, 0x09	; 9
    11ce:	44 cf       	rjmp	.-376    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    11d0:	68 e7       	ldi	r22, 0x78	; 120
    11d2:	73 e0       	ldi	r23, 0x03	; 3
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    11da:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    11de:	81 11       	cpse	r24, r1
    11e0:	31 cf       	rjmp	.-414    	; 0x1044 <MAINPG_start+0x30>
    11e2:	c8 e0       	ldi	r28, 0x08	; 8
    11e4:	39 cf       	rjmp	.-398    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    11e6:	69 e8       	ldi	r22, 0x89	; 137
    11e8:	73 e0       	ldi	r23, 0x03	; 3
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				rtcStatus=set_wakeup();
    11f0:	0e 94 3c 34 	call	0x6878	; 0x6878 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    11f4:	81 11       	cpse	r24, r1
    11f6:	28 cf       	rjmp	.-432    	; 0x1048 <MAINPG_start+0x34>
    11f8:	cb e0       	ldi	r28, 0x0B	; 11
    11fa:	2e cf       	rjmp	.-420    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    11fc:	6f e9       	ldi	r22, 0x9F	; 159
    11fe:	73 e0       	ldi	r23, 0x03	; 3
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				groupId=EM_get_group_id();
    1206:	0e 94 df 33 	call	0x67be	; 0x67be <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    120a:	48 2f       	mov	r20, r24
    120c:	67 e0       	ldi	r22, 0x07	; 7
    120e:	80 ed       	ldi	r24, 0xD0	; 208
    1210:	9e e0       	ldi	r25, 0x0E	; 14
    1212:	0e 94 be 31 	call	0x637c	; 0x637c <MRPP_init_group>
				EM_set_group_id(groupId);
    1216:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    121a:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    121c:	1d cf       	rjmp	.-454    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    121e:	0e 94 2d 34 	call	0x685a	; 0x685a <LM_is_free>
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <__stack+0x129>
    1226:	18 cf       	rjmp	.-464    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    1228:	60 eb       	ldi	r22, 0xB0	; 176
    122a:	73 e0       	ldi	r23, 0x03	; 3
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				lmStatus=send_header();
    1232:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1236:	4c e0       	ldi	r20, 0x0C	; 12
    1238:	6d e0       	ldi	r22, 0x0D	; 13
    123a:	0e 94 30 31 	call	0x6260	; 0x6260 <decode_header_tail_response>
    123e:	c8 2f       	mov	r28, r24
			break;
    1240:	0b cf       	rjmp	.-490    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    1242:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1246:	6e e0       	ldi	r22, 0x0E	; 14
    1248:	0e 94 36 32 	call	0x646c	; 0x646c <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    124c:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    124e:	c8 2f       	mov	r28, r24
			break;
    1250:	03 cf       	rjmp	.-506    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    1252:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1256:	6f e0       	ldi	r22, 0x0F	; 15
    1258:	0e 94 36 32 	call	0x646c	; 0x646c <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    125c:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    125e:	c8 2f       	mov	r28, r24
			break;
    1260:	fb ce       	rjmp	.-522    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    1262:	0e 94 ad 14 	call	0x295a	; 0x295a <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1266:	60 e1       	ldi	r22, 0x10	; 16
    1268:	0e 94 36 32 	call	0x646c	; 0x646c <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    126c:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    126e:	c8 2f       	mov	r28, r24
			break;
    1270:	f3 ce       	rjmp	.-538    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    1272:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1276:	62 e1       	ldi	r22, 0x12	; 18
    1278:	0e 94 36 32 	call	0x646c	; 0x646c <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    127c:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    127e:	c8 2f       	mov	r28, r24
			break;
    1280:	eb ce       	rjmp	.-554    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    1282:	83 e9       	ldi	r24, 0x93	; 147
    1284:	9f e0       	ldi	r25, 0x0F	; 15
    1286:	0e 94 2e 30 	call	0x605c	; 0x605c <MRPP_is_body_package_ready>
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <__stack+0x191>
    128e:	de ce       	rjmp	.-580    	; 0x104c <MAINPG_start+0x38>
    1290:	0e 94 2d 34 	call	0x685a	; 0x685a <LM_is_free>
    1294:	88 23       	and	r24, r24
    1296:	09 f4       	brne	.+2      	; 0x129a <__stack+0x19b>
    1298:	db ce       	rjmp	.-586    	; 0x1050 <MAINPG_start+0x3c>
					lmStatus=send_body(bodyIndex);
    129a:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    129e:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    12a2:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    12a6:	4d 2f       	mov	r20, r29
    12a8:	68 2f       	mov	r22, r24
    12aa:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    12ae:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    12b2:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <decode_body_response>
    12b6:	c8 2f       	mov	r28, r24
    12b8:	cf ce       	rjmp	.-610    	; 0x1058 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    12ba:	0e 94 32 34 	call	0x6864	; 0x6864 <MRPP_all_body_package_sent>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <__stack+0x1c5>
    12c2:	c8 ce       	rjmp	.-624    	; 0x1054 <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    12c4:	c3 e1       	ldi	r28, 0x13	; 19
    12c6:	c8 ce       	rjmp	.-624    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    12c8:	0e 94 2d 34 	call	0x685a	; 0x685a <LM_is_free>
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <__stack+0x1d3>
    12d0:	c3 ce       	rjmp	.-634    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    12d2:	63 ec       	ldi	r22, 0xC3	; 195
    12d4:	73 e0       	ldi	r23, 0x03	; 3
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				lmStatus=send_tail();
    12dc:	0e 94 93 2b 	call	0x5726	; 0x5726 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    12e0:	43 e1       	ldi	r20, 0x13	; 19
    12e2:	64 e1       	ldi	r22, 0x14	; 20
    12e4:	0e 94 30 31 	call	0x6260	; 0x6260 <decode_header_tail_response>
    12e8:	c8 2f       	mov	r28, r24
				
			break;
    12ea:	b6 ce       	rjmp	.-660    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    12ec:	64 ed       	ldi	r22, 0xD4	; 212
    12ee:	73 e0       	ldi	r23, 0x03	; 3
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				lmStatus=LM_put_to_sleep();
    12f6:	0e 94 cc 32 	call	0x6598	; 0x6598 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	81 11       	cpse	r24, r1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	90 93 a9 0f 	sts	0x0FA9, r25	; 0x800fa9 <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	0e 94 4c 32 	call	0x6498	; 0x6498 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 56 32 	call	0x64ac	; 0x64ac <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 74 32 	call	0x64e8	; 0x64e8 <PM_HAL_LED_power>
				TC2_HAL_kill();
    1322:	0e 94 14 34 	call	0x6828	; 0x6828 <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    1326:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    1328:	97 ce       	rjmp	.-722    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    132a:	67 ee       	ldi	r22, 0xE7	; 231
    132c:	73 e0       	ldi	r23, 0x03	; 3
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				PM_HAL_enter_power_down();
    1334:	0e 94 b2 2b 	call	0x5764	; 0x5764 <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    1338:	64 ef       	ldi	r22, 0xF4	; 244
    133a:	73 e0       	ldi	r23, 0x03	; 3
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				state=MAINPG_INIT_HW;
    1342:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    1344:	89 ce       	rjmp	.-750    	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    1346:	6a e0       	ldi	r22, 0x0A	; 10
    1348:	74 e0       	ldi	r23, 0x04	; 4
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				LED_conf_err();
    1350:	0e 94 62 34 	call	0x68c4	; 0x68c4 <LED_conf_err>
				print_debug("Conf err\n\r");
    1354:	6a e1       	ldi	r22, 0x1A	; 26
    1356:	74 e0       	ldi	r23, 0x04	; 4
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				state=MAINPG_END;
    135e:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1360:	7b ce       	rjmp	.-778    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    1362:	65 e2       	ldi	r22, 0x25	; 37
    1364:	74 e0       	ldi	r23, 0x04	; 4
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				LED_fatal_err();
    136c:	0e 94 66 34 	call	0x68cc	; 0x68cc <LED_fatal_err>
				fromSleep=false;
    1370:	10 92 a9 0f 	sts	0x0FA9, r1	; 0x800fa9 <fromSleep>
				state=MAINPG_END;
    1374:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1376:	70 ce       	rjmp	.-800    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    1378:	66 e3       	ldi	r22, 0x36	; 54
    137a:	74 e0       	ldi	r23, 0x04	; 4
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <send_msg>
				return;
			break;	
		}
	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret

Disassembly of section .text.calc_crc8:

00005a8c <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    5a8c:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    5a90:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    5a92:	14 c0       	rjmp	.+40     	; 0x5abc <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    5a94:	fa 01       	movw	r30, r20
    5a96:	e3 0f       	add	r30, r19
    5a98:	f1 1d       	adc	r31, r1
    5a9a:	90 81       	ld	r25, Z
    5a9c:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    5a9e:	28 e0       	ldi	r18, 0x08	; 8
    5aa0:	0a c0       	rjmp	.+20     	; 0x5ab6 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    5aa2:	88 23       	and	r24, r24
    5aa4:	34 f4       	brge	.+12     	; 0x5ab2 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	88 0f       	add	r24, r24
    5aaa:	99 1f       	adc	r25, r25
    5aac:	91 e3       	ldi	r25, 0x31	; 49
    5aae:	89 27       	eor	r24, r25
    5ab0:	01 c0       	rjmp	.+2      	; 0x5ab4 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    5ab2:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    5ab4:	21 50       	subi	r18, 0x01	; 1
    5ab6:	21 11       	cpse	r18, r1
    5ab8:	f4 cf       	rjmp	.-24     	; 0x5aa2 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5aba:	3f 5f       	subi	r19, 0xFF	; 255
    5abc:	36 17       	cp	r19, r22
    5abe:	50 f3       	brcs	.-44     	; 0x5a94 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    5ac0:	08 95       	ret

Disassembly of section .text.get_decimal:

00003864 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    3864:	cf 92       	push	r12
    3866:	df 92       	push	r13
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3876:	10 e0       	ldi	r17, 0x00	; 0
    3878:	08 c0       	rjmp	.+16     	; 0x388a <get_decimal+0x26>
	{
		if(str[i]=='.'){
    387a:	cc 0d       	add	r28, r12
    387c:	dd 1d       	adc	r29, r13
    387e:	88 81       	ld	r24, Y
    3880:	8e 32       	cpi	r24, 0x2E	; 46
    3882:	11 f4       	brne	.+4      	; 0x3888 <get_decimal+0x24>
			index=i+1;
    3884:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    3886:	0c c0       	rjmp	.+24     	; 0x38a0 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3888:	1f 5f       	subi	r17, 0xFF	; 255
    388a:	c1 2f       	mov	r28, r17
    388c:	d0 e0       	ldi	r29, 0x00	; 0
    388e:	b6 01       	movw	r22, r12
    3890:	80 e8       	ldi	r24, 0x80	; 128
    3892:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	c8 17       	cp	r28, r24
    389a:	d9 07       	cpc	r29, r25
    389c:	70 f3       	brcs	.-36     	; 0x387a <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    389e:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    38a0:	11 23       	and	r17, r17
    38a2:	71 f1       	breq	.+92     	; 0x3900 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    38a4:	c1 0e       	add	r12, r17
    38a6:	d1 1c       	adc	r13, r1
    38a8:	80 e8       	ldi	r24, 0x80	; 128
    38aa:	e8 2e       	mov	r14, r24
    38ac:	8e 2d       	mov	r24, r14
    38ae:	b6 01       	movw	r22, r12
    38b0:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    38b4:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    38b6:	8e 2d       	mov	r24, r14
    38b8:	b6 01       	movw	r22, r12
    38ba:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
    38be:	8c 01       	movw	r16, r24
	float divisor=1;
    38c0:	0f 2e       	mov	r0, r31
    38c2:	c1 2c       	mov	r12, r1
    38c4:	d1 2c       	mov	r13, r1
    38c6:	f0 e8       	ldi	r31, 0x80	; 128
    38c8:	ef 2e       	mov	r14, r31
    38ca:	ff e3       	ldi	r31, 0x3F	; 63
    38cc:	ff 2e       	mov	r15, r31
    38ce:	f0 2d       	mov	r31, r0
	
	while(len>0){
    38d0:	0b c0       	rjmp	.+22     	; 0x38e8 <get_decimal+0x84>
		divisor*=10;
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	c7 01       	movw	r24, r14
    38dc:	b6 01       	movw	r22, r12
    38de:	0e 94 76 34 	call	0x68ec	; 0x68ec <__mulsf3>
    38e2:	6b 01       	movw	r12, r22
    38e4:	7c 01       	movw	r14, r24
		len--;
    38e6:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    38e8:	c1 11       	cpse	r28, r1
    38ea:	f3 cf       	rjmp	.-26     	; 0x38d2 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    38ec:	b8 01       	movw	r22, r16
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__floatunsisf>
    38f6:	a7 01       	movw	r20, r14
    38f8:	96 01       	movw	r18, r12
    38fa:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__divsf3>
    38fe:	03 c0       	rjmp	.+6      	; 0x3906 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	08 95       	ret

Disassembly of section .text.str2flaot:

00004f18 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    4f18:	cf 92       	push	r12
    4f1a:	df 92       	push	r13
    4f1c:	ef 92       	push	r14
    4f1e:	ff 92       	push	r15
    4f20:	0f 93       	push	r16
    4f22:	1f 93       	push	r17
    4f24:	cf 93       	push	r28
    4f26:	df 93       	push	r29
    4f28:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    4f2a:	bc 01       	movw	r22, r24
    4f2c:	80 e8       	ldi	r24, 0x80	; 128
    4f2e:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <atoi>
    4f32:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    4f34:	c8 01       	movw	r24, r16
    4f36:	0e 94 32 1c 	call	0x3864	; 0x3864 <get_decimal>
    4f3a:	6b 01       	movw	r12, r22
    4f3c:	7c 01       	movw	r14, r24
	return intVal+deci;
    4f3e:	be 01       	movw	r22, r28
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__floatunsisf>
    4f48:	9b 01       	movw	r18, r22
    4f4a:	ac 01       	movw	r20, r24
    4f4c:	c7 01       	movw	r24, r14
    4f4e:	b6 01       	movw	r22, r12
    4f50:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__addsf3>
	
	
}
    4f54:	df 91       	pop	r29
    4f56:	cf 91       	pop	r28
    4f58:	1f 91       	pop	r17
    4f5a:	0f 91       	pop	r16
    4f5c:	ff 90       	pop	r15
    4f5e:	ef 90       	pop	r14
    4f60:	df 90       	pop	r13
    4f62:	cf 90       	pop	r12
    4f64:	08 95       	ret

Disassembly of section .text.is_float:

00004b90 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    4b90:	ef 92       	push	r14
    4b92:	ff 92       	push	r15
    4b94:	0f 93       	push	r16
    4b96:	1f 93       	push	r17
    4b98:	cf 93       	push	r28
    4b9a:	df 93       	push	r29
    4b9c:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4b9e:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    4ba0:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    4ba2:	0d c0       	rjmp	.+26     	; 0x4bbe <is_float+0x2e>
	{
		if(str[i]=='.'){
    4ba4:	ce 0d       	add	r28, r14
    4ba6:	df 1d       	adc	r29, r15
    4ba8:	88 81       	ld	r24, Y
    4baa:	8e 32       	cpi	r24, 0x2E	; 46
    4bac:	21 f4       	brne	.+8      	; 0x4bb6 <is_float+0x26>
			if (got_dot)
    4bae:	01 11       	cpse	r16, r1
    4bb0:	11 c0       	rjmp	.+34     	; 0x4bd4 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    4bb2:	01 e0       	ldi	r16, 0x01	; 1
    4bb4:	03 c0       	rjmp	.+6      	; 0x4bbc <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4bb6:	80 53       	subi	r24, 0x30	; 48
    4bb8:	8a 30       	cpi	r24, 0x0A	; 10
    4bba:	70 f4       	brcc	.+28     	; 0x4bd8 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4bbc:	1f 5f       	subi	r17, 0xFF	; 255
    4bbe:	c1 2f       	mov	r28, r17
    4bc0:	d0 e0       	ldi	r29, 0x00	; 0
    4bc2:	b7 01       	movw	r22, r14
    4bc4:	80 e8       	ldi	r24, 0x80	; 128
    4bc6:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strlen>
    4bca:	c8 17       	cp	r28, r24
    4bcc:	d9 07       	cpc	r29, r25
    4bce:	50 f3       	brcs	.-44     	; 0x4ba4 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	03 c0       	rjmp	.+6      	; 0x4bda <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	01 c0       	rjmp	.+2      	; 0x4bda <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	ef 90       	pop	r14
    4be6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000066f0 <__subsf3>:
    66f0:	50 58       	subi	r21, 0x80	; 128

000066f2 <__addsf3>:
    66f2:	bb 27       	eor	r27, r27
    66f4:	aa 27       	eor	r26, r26
    66f6:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__addsf3x>
    66fa:	0c 94 83 30 	jmp	0x6106	; 0x6106 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000034a2 <__addsf3x>:
    34a2:	11 c0       	rjmp	.+34     	; 0x34c6 <__addsf3x+0x24>
    34a4:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__fp_pscA>
    34a8:	38 f0       	brcs	.+14     	; 0x34b8 <__addsf3x+0x16>
    34aa:	0e 94 86 33 	call	0x670c	; 0x670c <__fp_pscB>
    34ae:	20 f0       	brcs	.+8      	; 0x34b8 <__addsf3x+0x16>
    34b0:	39 f4       	brne	.+14     	; 0x34c0 <__addsf3x+0x1e>
    34b2:	9f 3f       	cpi	r25, 0xFF	; 255
    34b4:	19 f4       	brne	.+6      	; 0x34bc <__addsf3x+0x1a>
    34b6:	26 f4       	brtc	.+8      	; 0x34c0 <__addsf3x+0x1e>
    34b8:	0c 94 96 34 	jmp	0x692c	; 0x692c <__fp_nan>
    34bc:	0e f4       	brtc	.+2      	; 0x34c0 <__addsf3x+0x1e>
    34be:	e0 95       	com	r30
    34c0:	e7 fb       	bst	r30, 7
    34c2:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__fp_inf>
    34c6:	e9 2f       	mov	r30, r25
    34c8:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fp_split3>
    34cc:	58 f3       	brcs	.-42     	; 0x34a4 <__addsf3x+0x2>
    34ce:	ba 17       	cp	r27, r26
    34d0:	62 07       	cpc	r22, r18
    34d2:	73 07       	cpc	r23, r19
    34d4:	84 07       	cpc	r24, r20
    34d6:	95 07       	cpc	r25, r21
    34d8:	20 f0       	brcs	.+8      	; 0x34e2 <__addsf3x+0x40>
    34da:	79 f4       	brne	.+30     	; 0x34fa <__addsf3x+0x58>
    34dc:	a6 f5       	brtc	.+104    	; 0x3546 <__addsf3x+0xa4>
    34de:	0c 94 8d 33 	jmp	0x671a	; 0x671a <__fp_zero>
    34e2:	0e f4       	brtc	.+2      	; 0x34e6 <__addsf3x+0x44>
    34e4:	e0 95       	com	r30
    34e6:	0b 2e       	mov	r0, r27
    34e8:	ba 2f       	mov	r27, r26
    34ea:	a0 2d       	mov	r26, r0
    34ec:	0b 01       	movw	r0, r22
    34ee:	b9 01       	movw	r22, r18
    34f0:	90 01       	movw	r18, r0
    34f2:	0c 01       	movw	r0, r24
    34f4:	ca 01       	movw	r24, r20
    34f6:	a0 01       	movw	r20, r0
    34f8:	11 24       	eor	r1, r1
    34fa:	ff 27       	eor	r31, r31
    34fc:	59 1b       	sub	r21, r25
    34fe:	99 f0       	breq	.+38     	; 0x3526 <__addsf3x+0x84>
    3500:	59 3f       	cpi	r21, 0xF9	; 249
    3502:	50 f4       	brcc	.+20     	; 0x3518 <__addsf3x+0x76>
    3504:	50 3e       	cpi	r21, 0xE0	; 224
    3506:	68 f1       	brcs	.+90     	; 0x3562 <__addsf3x+0xc0>
    3508:	1a 16       	cp	r1, r26
    350a:	f0 40       	sbci	r31, 0x00	; 0
    350c:	a2 2f       	mov	r26, r18
    350e:	23 2f       	mov	r18, r19
    3510:	34 2f       	mov	r19, r20
    3512:	44 27       	eor	r20, r20
    3514:	58 5f       	subi	r21, 0xF8	; 248
    3516:	f3 cf       	rjmp	.-26     	; 0x34fe <__addsf3x+0x5c>
    3518:	46 95       	lsr	r20
    351a:	37 95       	ror	r19
    351c:	27 95       	ror	r18
    351e:	a7 95       	ror	r26
    3520:	f0 40       	sbci	r31, 0x00	; 0
    3522:	53 95       	inc	r21
    3524:	c9 f7       	brne	.-14     	; 0x3518 <__addsf3x+0x76>
    3526:	7e f4       	brtc	.+30     	; 0x3546 <__addsf3x+0xa4>
    3528:	1f 16       	cp	r1, r31
    352a:	ba 0b       	sbc	r27, r26
    352c:	62 0b       	sbc	r22, r18
    352e:	73 0b       	sbc	r23, r19
    3530:	84 0b       	sbc	r24, r20
    3532:	ba f0       	brmi	.+46     	; 0x3562 <__addsf3x+0xc0>
    3534:	91 50       	subi	r25, 0x01	; 1
    3536:	a1 f0       	breq	.+40     	; 0x3560 <__addsf3x+0xbe>
    3538:	ff 0f       	add	r31, r31
    353a:	bb 1f       	adc	r27, r27
    353c:	66 1f       	adc	r22, r22
    353e:	77 1f       	adc	r23, r23
    3540:	88 1f       	adc	r24, r24
    3542:	c2 f7       	brpl	.-16     	; 0x3534 <__addsf3x+0x92>
    3544:	0e c0       	rjmp	.+28     	; 0x3562 <__addsf3x+0xc0>
    3546:	ba 0f       	add	r27, r26
    3548:	62 1f       	adc	r22, r18
    354a:	73 1f       	adc	r23, r19
    354c:	84 1f       	adc	r24, r20
    354e:	48 f4       	brcc	.+18     	; 0x3562 <__addsf3x+0xc0>
    3550:	87 95       	ror	r24
    3552:	77 95       	ror	r23
    3554:	67 95       	ror	r22
    3556:	b7 95       	ror	r27
    3558:	f7 95       	ror	r31
    355a:	9e 3f       	cpi	r25, 0xFE	; 254
    355c:	08 f0       	brcs	.+2      	; 0x3560 <__addsf3x+0xbe>
    355e:	b0 cf       	rjmp	.-160    	; 0x34c0 <__addsf3x+0x1e>
    3560:	93 95       	inc	r25
    3562:	88 0f       	add	r24, r24
    3564:	08 f0       	brcs	.+2      	; 0x3568 <__addsf3x+0xc6>
    3566:	99 27       	eor	r25, r25
    3568:	ee 0f       	add	r30, r30
    356a:	97 95       	ror	r25
    356c:	87 95       	ror	r24
    356e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000068e4 <__divsf3>:
    68e4:	0e 94 a2 18 	call	0x3144	; 0x3144 <__divsf3x>
    68e8:	0c 94 83 30 	jmp	0x6106	; 0x6106 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003144 <__divsf3x>:
    3144:	10 c0       	rjmp	.+32     	; 0x3166 <__divsf3x+0x22>
    3146:	0e 94 86 33 	call	0x670c	; 0x670c <__fp_pscB>
    314a:	58 f0       	brcs	.+22     	; 0x3162 <__divsf3x+0x1e>
    314c:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__fp_pscA>
    3150:	40 f0       	brcs	.+16     	; 0x3162 <__divsf3x+0x1e>
    3152:	29 f4       	brne	.+10     	; 0x315e <__divsf3x+0x1a>
    3154:	5f 3f       	cpi	r21, 0xFF	; 255
    3156:	29 f0       	breq	.+10     	; 0x3162 <__divsf3x+0x1e>
    3158:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__fp_inf>
    315c:	51 11       	cpse	r21, r1
    315e:	0c 94 8e 33 	jmp	0x671c	; 0x671c <__fp_szero>
    3162:	0c 94 96 34 	jmp	0x692c	; 0x692c <__fp_nan>
    3166:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fp_split3>
    316a:	68 f3       	brcs	.-38     	; 0x3146 <__divsf3x+0x2>

0000316c <__divsf3_pse>:
    316c:	99 23       	and	r25, r25
    316e:	b1 f3       	breq	.-20     	; 0x315c <__divsf3x+0x18>
    3170:	55 23       	and	r21, r21
    3172:	91 f3       	breq	.-28     	; 0x3158 <__divsf3x+0x14>
    3174:	95 1b       	sub	r25, r21
    3176:	55 0b       	sbc	r21, r21
    3178:	bb 27       	eor	r27, r27
    317a:	aa 27       	eor	r26, r26
    317c:	62 17       	cp	r22, r18
    317e:	73 07       	cpc	r23, r19
    3180:	84 07       	cpc	r24, r20
    3182:	38 f0       	brcs	.+14     	; 0x3192 <__divsf3_pse+0x26>
    3184:	9f 5f       	subi	r25, 0xFF	; 255
    3186:	5f 4f       	sbci	r21, 0xFF	; 255
    3188:	22 0f       	add	r18, r18
    318a:	33 1f       	adc	r19, r19
    318c:	44 1f       	adc	r20, r20
    318e:	aa 1f       	adc	r26, r26
    3190:	a9 f3       	breq	.-22     	; 0x317c <__divsf3_pse+0x10>
    3192:	35 d0       	rcall	.+106    	; 0x31fe <__divsf3_pse+0x92>
    3194:	0e 2e       	mov	r0, r30
    3196:	3a f0       	brmi	.+14     	; 0x31a6 <__divsf3_pse+0x3a>
    3198:	e0 e8       	ldi	r30, 0x80	; 128
    319a:	32 d0       	rcall	.+100    	; 0x3200 <__divsf3_pse+0x94>
    319c:	91 50       	subi	r25, 0x01	; 1
    319e:	50 40       	sbci	r21, 0x00	; 0
    31a0:	e6 95       	lsr	r30
    31a2:	00 1c       	adc	r0, r0
    31a4:	ca f7       	brpl	.-14     	; 0x3198 <__divsf3_pse+0x2c>
    31a6:	2b d0       	rcall	.+86     	; 0x31fe <__divsf3_pse+0x92>
    31a8:	fe 2f       	mov	r31, r30
    31aa:	29 d0       	rcall	.+82     	; 0x31fe <__divsf3_pse+0x92>
    31ac:	66 0f       	add	r22, r22
    31ae:	77 1f       	adc	r23, r23
    31b0:	88 1f       	adc	r24, r24
    31b2:	bb 1f       	adc	r27, r27
    31b4:	26 17       	cp	r18, r22
    31b6:	37 07       	cpc	r19, r23
    31b8:	48 07       	cpc	r20, r24
    31ba:	ab 07       	cpc	r26, r27
    31bc:	b0 e8       	ldi	r27, 0x80	; 128
    31be:	09 f0       	breq	.+2      	; 0x31c2 <__divsf3_pse+0x56>
    31c0:	bb 0b       	sbc	r27, r27
    31c2:	80 2d       	mov	r24, r0
    31c4:	bf 01       	movw	r22, r30
    31c6:	ff 27       	eor	r31, r31
    31c8:	93 58       	subi	r25, 0x83	; 131
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255
    31cc:	3a f0       	brmi	.+14     	; 0x31dc <__divsf3_pse+0x70>
    31ce:	9e 3f       	cpi	r25, 0xFE	; 254
    31d0:	51 05       	cpc	r21, r1
    31d2:	78 f0       	brcs	.+30     	; 0x31f2 <__divsf3_pse+0x86>
    31d4:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__fp_inf>
    31d8:	0c 94 8e 33 	jmp	0x671c	; 0x671c <__fp_szero>
    31dc:	5f 3f       	cpi	r21, 0xFF	; 255
    31de:	e4 f3       	brlt	.-8      	; 0x31d8 <__divsf3_pse+0x6c>
    31e0:	98 3e       	cpi	r25, 0xE8	; 232
    31e2:	d4 f3       	brlt	.-12     	; 0x31d8 <__divsf3_pse+0x6c>
    31e4:	86 95       	lsr	r24
    31e6:	77 95       	ror	r23
    31e8:	67 95       	ror	r22
    31ea:	b7 95       	ror	r27
    31ec:	f7 95       	ror	r31
    31ee:	9f 5f       	subi	r25, 0xFF	; 255
    31f0:	c9 f7       	brne	.-14     	; 0x31e4 <__divsf3_pse+0x78>
    31f2:	88 0f       	add	r24, r24
    31f4:	91 1d       	adc	r25, r1
    31f6:	96 95       	lsr	r25
    31f8:	87 95       	ror	r24
    31fa:	97 f9       	bld	r25, 7
    31fc:	08 95       	ret
    31fe:	e1 e0       	ldi	r30, 0x01	; 1
    3200:	66 0f       	add	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	88 1f       	adc	r24, r24
    3206:	bb 1f       	adc	r27, r27
    3208:	62 17       	cp	r22, r18
    320a:	73 07       	cpc	r23, r19
    320c:	84 07       	cpc	r24, r20
    320e:	ba 07       	cpc	r27, r26
    3210:	20 f0       	brcs	.+8      	; 0x321a <__divsf3_pse+0xae>
    3212:	62 1b       	sub	r22, r18
    3214:	73 0b       	sbc	r23, r19
    3216:	84 0b       	sbc	r24, r20
    3218:	ba 0b       	sbc	r27, r26
    321a:	ee 1f       	adc	r30, r30
    321c:	88 f7       	brcc	.-30     	; 0x3200 <__divsf3_pse+0x94>
    321e:	e0 95       	com	r30
    3220:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000049ca <__fixunssfsi>:
    49ca:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <__fp_splitA>
    49ce:	88 f0       	brcs	.+34     	; 0x49f2 <__fixunssfsi+0x28>
    49d0:	9f 57       	subi	r25, 0x7F	; 127
    49d2:	98 f0       	brcs	.+38     	; 0x49fa <__fixunssfsi+0x30>
    49d4:	b9 2f       	mov	r27, r25
    49d6:	99 27       	eor	r25, r25
    49d8:	b7 51       	subi	r27, 0x17	; 23
    49da:	b0 f0       	brcs	.+44     	; 0x4a08 <__fixunssfsi+0x3e>
    49dc:	e1 f0       	breq	.+56     	; 0x4a16 <__fixunssfsi+0x4c>
    49de:	66 0f       	add	r22, r22
    49e0:	77 1f       	adc	r23, r23
    49e2:	88 1f       	adc	r24, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	1a f0       	brmi	.+6      	; 0x49ee <__fixunssfsi+0x24>
    49e8:	ba 95       	dec	r27
    49ea:	c9 f7       	brne	.-14     	; 0x49de <__fixunssfsi+0x14>
    49ec:	14 c0       	rjmp	.+40     	; 0x4a16 <__fixunssfsi+0x4c>
    49ee:	b1 30       	cpi	r27, 0x01	; 1
    49f0:	91 f0       	breq	.+36     	; 0x4a16 <__fixunssfsi+0x4c>
    49f2:	0e 94 8d 33 	call	0x671a	; 0x671a <__fp_zero>
    49f6:	b1 e0       	ldi	r27, 0x01	; 1
    49f8:	08 95       	ret
    49fa:	0c 94 8d 33 	jmp	0x671a	; 0x671a <__fp_zero>
    49fe:	67 2f       	mov	r22, r23
    4a00:	78 2f       	mov	r23, r24
    4a02:	88 27       	eor	r24, r24
    4a04:	b8 5f       	subi	r27, 0xF8	; 248
    4a06:	39 f0       	breq	.+14     	; 0x4a16 <__fixunssfsi+0x4c>
    4a08:	b9 3f       	cpi	r27, 0xF9	; 249
    4a0a:	cc f3       	brlt	.-14     	; 0x49fe <__fixunssfsi+0x34>
    4a0c:	86 95       	lsr	r24
    4a0e:	77 95       	ror	r23
    4a10:	67 95       	ror	r22
    4a12:	b3 95       	inc	r27
    4a14:	d9 f7       	brne	.-10     	; 0x4a0c <__fixunssfsi+0x42>
    4a16:	3e f4       	brtc	.+14     	; 0x4a26 <__fixunssfsi+0x5c>
    4a18:	90 95       	com	r25
    4a1a:	80 95       	com	r24
    4a1c:	70 95       	com	r23
    4a1e:	61 95       	neg	r22
    4a20:	7f 4f       	sbci	r23, 0xFF	; 255
    4a22:	8f 4f       	sbci	r24, 0xFF	; 255
    4a24:	9f 4f       	sbci	r25, 0xFF	; 255
    4a26:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000041ea <__floatunsisf>:
    41ea:	e8 94       	clt
    41ec:	09 c0       	rjmp	.+18     	; 0x4200 <__floatsisf+0x12>

000041ee <__floatsisf>:
    41ee:	97 fb       	bst	r25, 7
    41f0:	3e f4       	brtc	.+14     	; 0x4200 <__floatsisf+0x12>
    41f2:	90 95       	com	r25
    41f4:	80 95       	com	r24
    41f6:	70 95       	com	r23
    41f8:	61 95       	neg	r22
    41fa:	7f 4f       	sbci	r23, 0xFF	; 255
    41fc:	8f 4f       	sbci	r24, 0xFF	; 255
    41fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4200:	99 23       	and	r25, r25
    4202:	a9 f0       	breq	.+42     	; 0x422e <__floatsisf+0x40>
    4204:	f9 2f       	mov	r31, r25
    4206:	96 e9       	ldi	r25, 0x96	; 150
    4208:	bb 27       	eor	r27, r27
    420a:	93 95       	inc	r25
    420c:	f6 95       	lsr	r31
    420e:	87 95       	ror	r24
    4210:	77 95       	ror	r23
    4212:	67 95       	ror	r22
    4214:	b7 95       	ror	r27
    4216:	f1 11       	cpse	r31, r1
    4218:	f8 cf       	rjmp	.-16     	; 0x420a <__floatsisf+0x1c>
    421a:	fa f4       	brpl	.+62     	; 0x425a <__floatsisf+0x6c>
    421c:	bb 0f       	add	r27, r27
    421e:	11 f4       	brne	.+4      	; 0x4224 <__floatsisf+0x36>
    4220:	60 ff       	sbrs	r22, 0
    4222:	1b c0       	rjmp	.+54     	; 0x425a <__floatsisf+0x6c>
    4224:	6f 5f       	subi	r22, 0xFF	; 255
    4226:	7f 4f       	sbci	r23, 0xFF	; 255
    4228:	8f 4f       	sbci	r24, 0xFF	; 255
    422a:	9f 4f       	sbci	r25, 0xFF	; 255
    422c:	16 c0       	rjmp	.+44     	; 0x425a <__floatsisf+0x6c>
    422e:	88 23       	and	r24, r24
    4230:	11 f0       	breq	.+4      	; 0x4236 <__floatsisf+0x48>
    4232:	96 e9       	ldi	r25, 0x96	; 150
    4234:	11 c0       	rjmp	.+34     	; 0x4258 <__floatsisf+0x6a>
    4236:	77 23       	and	r23, r23
    4238:	21 f0       	breq	.+8      	; 0x4242 <__floatsisf+0x54>
    423a:	9e e8       	ldi	r25, 0x8E	; 142
    423c:	87 2f       	mov	r24, r23
    423e:	76 2f       	mov	r23, r22
    4240:	05 c0       	rjmp	.+10     	; 0x424c <__floatsisf+0x5e>
    4242:	66 23       	and	r22, r22
    4244:	71 f0       	breq	.+28     	; 0x4262 <__floatsisf+0x74>
    4246:	96 e8       	ldi	r25, 0x86	; 134
    4248:	86 2f       	mov	r24, r22
    424a:	70 e0       	ldi	r23, 0x00	; 0
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	2a f0       	brmi	.+10     	; 0x425a <__floatsisf+0x6c>
    4250:	9a 95       	dec	r25
    4252:	66 0f       	add	r22, r22
    4254:	77 1f       	adc	r23, r23
    4256:	88 1f       	adc	r24, r24
    4258:	da f7       	brpl	.-10     	; 0x4250 <__floatsisf+0x62>
    425a:	88 0f       	add	r24, r24
    425c:	96 95       	lsr	r25
    425e:	87 95       	ror	r24
    4260:	97 f9       	bld	r25, 7
    4262:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000067fa <__fp_inf>:
    67fa:	97 f9       	bld	r25, 7
    67fc:	9f 67       	ori	r25, 0x7F	; 127
    67fe:	80 e8       	ldi	r24, 0x80	; 128
    6800:	70 e0       	ldi	r23, 0x00	; 0
    6802:	60 e0       	ldi	r22, 0x00	; 0
    6804:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000692c <__fp_nan>:
    692c:	9f ef       	ldi	r25, 0xFF	; 255
    692e:	80 ec       	ldi	r24, 0xC0	; 192
    6930:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000066fe <__fp_pscA>:
    66fe:	00 24       	eor	r0, r0
    6700:	0a 94       	dec	r0
    6702:	16 16       	cp	r1, r22
    6704:	17 06       	cpc	r1, r23
    6706:	18 06       	cpc	r1, r24
    6708:	09 06       	cpc	r0, r25
    670a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000670c <__fp_pscB>:
    670c:	00 24       	eor	r0, r0
    670e:	0a 94       	dec	r0
    6710:	12 16       	cp	r1, r18
    6712:	13 06       	cpc	r1, r19
    6714:	14 06       	cpc	r1, r20
    6716:	05 06       	cpc	r0, r21
    6718:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006106 <__fp_round>:
    6106:	09 2e       	mov	r0, r25
    6108:	03 94       	inc	r0
    610a:	00 0c       	add	r0, r0
    610c:	11 f4       	brne	.+4      	; 0x6112 <__fp_round+0xc>
    610e:	88 23       	and	r24, r24
    6110:	52 f0       	brmi	.+20     	; 0x6126 <__fp_round+0x20>
    6112:	bb 0f       	add	r27, r27
    6114:	40 f4       	brcc	.+16     	; 0x6126 <__fp_round+0x20>
    6116:	bf 2b       	or	r27, r31
    6118:	11 f4       	brne	.+4      	; 0x611e <__fp_round+0x18>
    611a:	60 ff       	sbrs	r22, 0
    611c:	04 c0       	rjmp	.+8      	; 0x6126 <__fp_round+0x20>
    611e:	6f 5f       	subi	r22, 0xFF	; 255
    6120:	7f 4f       	sbci	r23, 0xFF	; 255
    6122:	8f 4f       	sbci	r24, 0xFF	; 255
    6124:	9f 4f       	sbci	r25, 0xFF	; 255
    6126:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000054d6 <__fp_split3>:
    54d6:	57 fd       	sbrc	r21, 7
    54d8:	90 58       	subi	r25, 0x80	; 128
    54da:	44 0f       	add	r20, r20
    54dc:	55 1f       	adc	r21, r21
    54de:	59 f0       	breq	.+22     	; 0x54f6 <__fp_splitA+0x10>
    54e0:	5f 3f       	cpi	r21, 0xFF	; 255
    54e2:	71 f0       	breq	.+28     	; 0x5500 <__fp_splitA+0x1a>
    54e4:	47 95       	ror	r20

000054e6 <__fp_splitA>:
    54e6:	88 0f       	add	r24, r24
    54e8:	97 fb       	bst	r25, 7
    54ea:	99 1f       	adc	r25, r25
    54ec:	61 f0       	breq	.+24     	; 0x5506 <__fp_splitA+0x20>
    54ee:	9f 3f       	cpi	r25, 0xFF	; 255
    54f0:	79 f0       	breq	.+30     	; 0x5510 <__fp_splitA+0x2a>
    54f2:	87 95       	ror	r24
    54f4:	08 95       	ret
    54f6:	12 16       	cp	r1, r18
    54f8:	13 06       	cpc	r1, r19
    54fa:	14 06       	cpc	r1, r20
    54fc:	55 1f       	adc	r21, r21
    54fe:	f2 cf       	rjmp	.-28     	; 0x54e4 <__fp_split3+0xe>
    5500:	46 95       	lsr	r20
    5502:	f1 df       	rcall	.-30     	; 0x54e6 <__fp_splitA>
    5504:	08 c0       	rjmp	.+16     	; 0x5516 <__fp_splitA+0x30>
    5506:	16 16       	cp	r1, r22
    5508:	17 06       	cpc	r1, r23
    550a:	18 06       	cpc	r1, r24
    550c:	99 1f       	adc	r25, r25
    550e:	f1 cf       	rjmp	.-30     	; 0x54f2 <__fp_splitA+0xc>
    5510:	86 95       	lsr	r24
    5512:	71 05       	cpc	r23, r1
    5514:	61 05       	cpc	r22, r1
    5516:	08 94       	sec
    5518:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000671a <__fp_zero>:
    671a:	e8 94       	clt

0000671c <__fp_szero>:
    671c:	bb 27       	eor	r27, r27
    671e:	66 27       	eor	r22, r22
    6720:	77 27       	eor	r23, r23
    6722:	cb 01       	movw	r24, r22
    6724:	97 f9       	bld	r25, 7
    6726:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000068ec <__mulsf3>:
    68ec:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__mulsf3x>
    68f0:	0c 94 83 30 	jmp	0x6106	; 0x6106 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000033ce <__mulsf3x>:
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <__mulsf3x+0x20>
    33d0:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__fp_pscA>
    33d4:	38 f0       	brcs	.+14     	; 0x33e4 <__mulsf3x+0x16>
    33d6:	0e 94 86 33 	call	0x670c	; 0x670c <__fp_pscB>
    33da:	20 f0       	brcs	.+8      	; 0x33e4 <__mulsf3x+0x16>
    33dc:	95 23       	and	r25, r21
    33de:	11 f0       	breq	.+4      	; 0x33e4 <__mulsf3x+0x16>
    33e0:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__fp_inf>
    33e4:	0c 94 96 34 	jmp	0x692c	; 0x692c <__fp_nan>
    33e8:	11 24       	eor	r1, r1
    33ea:	0c 94 8e 33 	jmp	0x671c	; 0x671c <__fp_szero>
    33ee:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fp_split3>
    33f2:	70 f3       	brcs	.-36     	; 0x33d0 <__mulsf3x+0x2>

000033f4 <__mulsf3_pse>:
    33f4:	95 9f       	mul	r25, r21
    33f6:	c1 f3       	breq	.-16     	; 0x33e8 <__mulsf3x+0x1a>
    33f8:	95 0f       	add	r25, r21
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	55 1f       	adc	r21, r21
    33fe:	62 9f       	mul	r22, r18
    3400:	f0 01       	movw	r30, r0
    3402:	72 9f       	mul	r23, r18
    3404:	bb 27       	eor	r27, r27
    3406:	f0 0d       	add	r31, r0
    3408:	b1 1d       	adc	r27, r1
    340a:	63 9f       	mul	r22, r19
    340c:	aa 27       	eor	r26, r26
    340e:	f0 0d       	add	r31, r0
    3410:	b1 1d       	adc	r27, r1
    3412:	aa 1f       	adc	r26, r26
    3414:	64 9f       	mul	r22, r20
    3416:	66 27       	eor	r22, r22
    3418:	b0 0d       	add	r27, r0
    341a:	a1 1d       	adc	r26, r1
    341c:	66 1f       	adc	r22, r22
    341e:	82 9f       	mul	r24, r18
    3420:	22 27       	eor	r18, r18
    3422:	b0 0d       	add	r27, r0
    3424:	a1 1d       	adc	r26, r1
    3426:	62 1f       	adc	r22, r18
    3428:	73 9f       	mul	r23, r19
    342a:	b0 0d       	add	r27, r0
    342c:	a1 1d       	adc	r26, r1
    342e:	62 1f       	adc	r22, r18
    3430:	83 9f       	mul	r24, r19
    3432:	a0 0d       	add	r26, r0
    3434:	61 1d       	adc	r22, r1
    3436:	22 1f       	adc	r18, r18
    3438:	74 9f       	mul	r23, r20
    343a:	33 27       	eor	r19, r19
    343c:	a0 0d       	add	r26, r0
    343e:	61 1d       	adc	r22, r1
    3440:	23 1f       	adc	r18, r19
    3442:	84 9f       	mul	r24, r20
    3444:	60 0d       	add	r22, r0
    3446:	21 1d       	adc	r18, r1
    3448:	82 2f       	mov	r24, r18
    344a:	76 2f       	mov	r23, r22
    344c:	6a 2f       	mov	r22, r26
    344e:	11 24       	eor	r1, r1
    3450:	9f 57       	subi	r25, 0x7F	; 127
    3452:	50 40       	sbci	r21, 0x00	; 0
    3454:	9a f0       	brmi	.+38     	; 0x347c <__mulsf3_pse+0x88>
    3456:	f1 f0       	breq	.+60     	; 0x3494 <__mulsf3_pse+0xa0>
    3458:	88 23       	and	r24, r24
    345a:	4a f0       	brmi	.+18     	; 0x346e <__mulsf3_pse+0x7a>
    345c:	ee 0f       	add	r30, r30
    345e:	ff 1f       	adc	r31, r31
    3460:	bb 1f       	adc	r27, r27
    3462:	66 1f       	adc	r22, r22
    3464:	77 1f       	adc	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	91 50       	subi	r25, 0x01	; 1
    346a:	50 40       	sbci	r21, 0x00	; 0
    346c:	a9 f7       	brne	.-22     	; 0x3458 <__mulsf3_pse+0x64>
    346e:	9e 3f       	cpi	r25, 0xFE	; 254
    3470:	51 05       	cpc	r21, r1
    3472:	80 f0       	brcs	.+32     	; 0x3494 <__mulsf3_pse+0xa0>
    3474:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__fp_inf>
    3478:	0c 94 8e 33 	jmp	0x671c	; 0x671c <__fp_szero>
    347c:	5f 3f       	cpi	r21, 0xFF	; 255
    347e:	e4 f3       	brlt	.-8      	; 0x3478 <__mulsf3_pse+0x84>
    3480:	98 3e       	cpi	r25, 0xE8	; 232
    3482:	d4 f3       	brlt	.-12     	; 0x3478 <__mulsf3_pse+0x84>
    3484:	86 95       	lsr	r24
    3486:	77 95       	ror	r23
    3488:	67 95       	ror	r22
    348a:	b7 95       	ror	r27
    348c:	f7 95       	ror	r31
    348e:	e7 95       	ror	r30
    3490:	9f 5f       	subi	r25, 0xFF	; 255
    3492:	c1 f7       	brne	.-16     	; 0x3484 <__mulsf3_pse+0x90>
    3494:	fe 2b       	or	r31, r30
    3496:	88 0f       	add	r24, r24
    3498:	91 1d       	adc	r25, r1
    349a:	96 95       	lsr	r25
    349c:	87 95       	ror	r24
    349e:	97 f9       	bld	r25, 7
    34a0:	08 95       	ret

Disassembly of section .text.avrlibc:

000008d0 <vfprintf>:
     8d0:	a4 e1       	ldi	r26, 0x14	; 20
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ee e6       	ldi	r30, 0x6E	; 110
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	0c 94 0f 2d 	jmp	0x5a1e	; 0x5a1e <__prologue_saves__>
     8dc:	6c 01       	movw	r12, r24
     8de:	1a 01       	movw	r2, r20
     8e0:	46 2e       	mov	r4, r22
     8e2:	59 01       	movw	r10, r18
     8e4:	fc 01       	movw	r30, r24
     8e6:	10 86       	std	Z+8, r1	; 0x08
     8e8:	17 82       	std	Z+7, r1	; 0x07
     8ea:	84 81       	ldd	r24, Z+4	; 0x04
     8ec:	81 ff       	sbrs	r24, 1
     8ee:	62 c3       	rjmp	.+1732   	; 0xfb4 <vfprintf+0x6e4>
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	9d 87       	std	Y+13, r25	; 0x0d
     8f6:	8c 87       	std	Y+12, r24	; 0x0c
     8f8:	a0 e8       	ldi	r26, 0x80	; 128
     8fa:	8a 8b       	std	Y+18, r24	; 0x12
     8fc:	9b 8b       	std	Y+19, r25	; 0x13
     8fe:	ac 8b       	std	Y+20, r26	; 0x14
     900:	f1 01       	movw	r30, r2
     902:	84 91       	lpm	r24, Z
     904:	47 fc       	sbrc	r4, 7
     906:	80 81       	ld	r24, Z
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <vfprintf+0x3e>
     90c:	4f c3       	rjmp	.+1694   	; 0xfac <vfprintf+0x6dc>
     90e:	44 2d       	mov	r20, r4
     910:	91 01       	movw	r18, r2
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	85 32       	cpi	r24, 0x25	; 37
     91a:	19 f0       	breq	.+6      	; 0x922 <vfprintf+0x52>
     91c:	19 01       	movw	r2, r18
     91e:	44 2e       	mov	r4, r20
     920:	0a c0       	rjmp	.+20     	; 0x936 <vfprintf+0x66>
     922:	f9 01       	movw	r30, r18
     924:	84 91       	lpm	r24, Z
     926:	47 fd       	sbrc	r20, 7
     928:	80 81       	ld	r24, Z
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	29 0e       	add	r2, r25
     92e:	31 1c       	adc	r3, r1
     930:	41 1c       	adc	r4, r1
     932:	85 32       	cpi	r24, 0x25	; 37
     934:	49 f4       	brne	.+18     	; 0x948 <vfprintf+0x78>
     936:	b6 01       	movw	r22, r12
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     93e:	bf 86       	std	Y+15, r11	; 0x0f
     940:	ae 86       	std	Y+14, r10	; 0x0e
     942:	ae 84       	ldd	r10, Y+14	; 0x0e
     944:	bf 84       	ldd	r11, Y+15	; 0x0f
     946:	dc cf       	rjmp	.-72     	; 0x900 <vfprintf+0x30>
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	f1 2c       	mov	r15, r1
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	00 32       	cpi	r16, 0x20	; 32
     950:	a0 f4       	brcc	.+40     	; 0x97a <vfprintf+0xaa>
     952:	8b 32       	cpi	r24, 0x2B	; 43
     954:	69 f0       	breq	.+26     	; 0x970 <vfprintf+0xa0>
     956:	30 f4       	brcc	.+12     	; 0x964 <vfprintf+0x94>
     958:	80 32       	cpi	r24, 0x20	; 32
     95a:	59 f0       	breq	.+22     	; 0x972 <vfprintf+0xa2>
     95c:	83 32       	cpi	r24, 0x23	; 35
     95e:	69 f4       	brne	.+26     	; 0x97a <vfprintf+0xaa>
     960:	00 61       	ori	r16, 0x10	; 16
     962:	2c c0       	rjmp	.+88     	; 0x9bc <vfprintf+0xec>
     964:	8d 32       	cpi	r24, 0x2D	; 45
     966:	39 f0       	breq	.+14     	; 0x976 <vfprintf+0xa6>
     968:	80 33       	cpi	r24, 0x30	; 48
     96a:	39 f4       	brne	.+14     	; 0x97a <vfprintf+0xaa>
     96c:	01 60       	ori	r16, 0x01	; 1
     96e:	26 c0       	rjmp	.+76     	; 0x9bc <vfprintf+0xec>
     970:	02 60       	ori	r16, 0x02	; 2
     972:	04 60       	ori	r16, 0x04	; 4
     974:	23 c0       	rjmp	.+70     	; 0x9bc <vfprintf+0xec>
     976:	08 60       	ori	r16, 0x08	; 8
     978:	21 c0       	rjmp	.+66     	; 0x9bc <vfprintf+0xec>
     97a:	07 fd       	sbrc	r16, 7
     97c:	29 c0       	rjmp	.+82     	; 0x9d0 <vfprintf+0x100>
     97e:	90 ed       	ldi	r25, 0xD0	; 208
     980:	98 0f       	add	r25, r24
     982:	9a 30       	cpi	r25, 0x0A	; 10
     984:	78 f4       	brcc	.+30     	; 0x9a4 <vfprintf+0xd4>
     986:	06 ff       	sbrs	r16, 6
     988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0xc6>
     98a:	aa e0       	ldi	r26, 0x0A	; 10
     98c:	1a 9f       	mul	r17, r26
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	19 2f       	mov	r17, r25
     994:	13 c0       	rjmp	.+38     	; 0x9bc <vfprintf+0xec>
     996:	ea e0       	ldi	r30, 0x0A	; 10
     998:	fe 9e       	mul	r15, r30
     99a:	90 0d       	add	r25, r0
     99c:	11 24       	eor	r1, r1
     99e:	f9 2e       	mov	r15, r25
     9a0:	00 62       	ori	r16, 0x20	; 32
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <vfprintf+0xec>
     9a4:	8e 32       	cpi	r24, 0x2E	; 46
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0xe0>
     9a8:	06 fd       	sbrc	r16, 6
     9aa:	00 c3       	rjmp	.+1536   	; 0xfac <vfprintf+0x6dc>
     9ac:	00 64       	ori	r16, 0x40	; 64
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <vfprintf+0xec>
     9b0:	8c 36       	cpi	r24, 0x6C	; 108
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <vfprintf+0xe8>
     9b4:	00 68       	ori	r16, 0x80	; 128
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0xec>
     9b8:	88 36       	cpi	r24, 0x68	; 104
     9ba:	51 f4       	brne	.+20     	; 0x9d0 <vfprintf+0x100>
     9bc:	f1 01       	movw	r30, r2
     9be:	84 91       	lpm	r24, Z
     9c0:	47 fc       	sbrc	r4, 7
     9c2:	80 81       	ld	r24, Z
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	2f 1a       	sub	r2, r31
     9c8:	3f 0a       	sbc	r3, r31
     9ca:	4f 0a       	sbc	r4, r31
     9cc:	81 11       	cpse	r24, r1
     9ce:	bf cf       	rjmp	.-130    	; 0x94e <vfprintf+0x7e>
     9d0:	9b eb       	ldi	r25, 0xBB	; 187
     9d2:	98 0f       	add	r25, r24
     9d4:	93 30       	cpi	r25, 0x03	; 3
     9d6:	18 f4       	brcc	.+6      	; 0x9de <vfprintf+0x10e>
     9d8:	00 61       	ori	r16, 0x10	; 16
     9da:	80 5e       	subi	r24, 0xE0	; 224
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <vfprintf+0x11a>
     9de:	9b e9       	ldi	r25, 0x9B	; 155
     9e0:	98 0f       	add	r25, r24
     9e2:	93 30       	cpi	r25, 0x03	; 3
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <vfprintf+0x118>
     9e6:	66 c1       	rjmp	.+716    	; 0xcb4 <vfprintf+0x3e4>
     9e8:	0f 7e       	andi	r16, 0xEF	; 239
     9ea:	06 ff       	sbrs	r16, 6
     9ec:	16 e0       	ldi	r17, 0x06	; 6
     9ee:	0f 73       	andi	r16, 0x3F	; 63
     9f0:	70 2e       	mov	r7, r16
     9f2:	85 36       	cpi	r24, 0x65	; 101
     9f4:	21 f4       	brne	.+8      	; 0x9fe <vfprintf+0x12e>
     9f6:	20 2f       	mov	r18, r16
     9f8:	20 64       	ori	r18, 0x40	; 64
     9fa:	72 2e       	mov	r7, r18
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <vfprintf+0x13e>
     9fe:	86 36       	cpi	r24, 0x66	; 102
     a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0x13a>
     a02:	80 2f       	mov	r24, r16
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	78 2e       	mov	r7, r24
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x13e>
     a0a:	11 11       	cpse	r17, r1
     a0c:	11 50       	subi	r17, 0x01	; 1
     a0e:	77 fe       	sbrs	r7, 7
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <vfprintf+0x150>
     a12:	1c 33       	cpi	r17, 0x3C	; 60
     a14:	50 f4       	brcc	.+20     	; 0xa2a <vfprintf+0x15a>
     a16:	ee 24       	eor	r14, r14
     a18:	e3 94       	inc	r14
     a1a:	e1 0e       	add	r14, r17
     a1c:	27 e0       	ldi	r18, 0x07	; 7
     a1e:	0b c0       	rjmp	.+22     	; 0xa36 <vfprintf+0x166>
     a20:	18 30       	cpi	r17, 0x08	; 8
     a22:	38 f0       	brcs	.+14     	; 0xa32 <vfprintf+0x162>
     a24:	27 e0       	ldi	r18, 0x07	; 7
     a26:	17 e0       	ldi	r17, 0x07	; 7
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <vfprintf+0x164>
     a2a:	27 e0       	ldi	r18, 0x07	; 7
     a2c:	6c e3       	ldi	r22, 0x3C	; 60
     a2e:	e6 2e       	mov	r14, r22
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <vfprintf+0x166>
     a32:	21 2f       	mov	r18, r17
     a34:	e1 2c       	mov	r14, r1
     a36:	f5 01       	movw	r30, r10
     a38:	34 96       	adiw	r30, 0x04	; 4
     a3a:	ff 87       	std	Y+15, r31	; 0x0f
     a3c:	ee 87       	std	Y+14, r30	; 0x0e
     a3e:	f5 01       	movw	r30, r10
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	0e 2d       	mov	r16, r14
     a4a:	ae 01       	movw	r20, r28
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__ftoa_engine>
     a54:	5c 01       	movw	r10, r24
     a56:	59 80       	ldd	r5, Y+1	; 0x01
     a58:	50 fe       	sbrs	r5, 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x190>
     a5c:	53 fe       	sbrs	r5, 3
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0x19c>
     a60:	71 fc       	sbrc	r7, 1
     a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x1a0>
     a64:	72 fe       	sbrs	r7, 2
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x1a4>
     a68:	00 e2       	ldi	r16, 0x20	; 32
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <vfprintf+0x1a6>
     a6c:	0d e2       	ldi	r16, 0x2D	; 45
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x1a6>
     a70:	0b e2       	ldi	r16, 0x2B	; 43
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <vfprintf+0x1a6>
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	85 2d       	mov	r24, r5
     a78:	8c 70       	andi	r24, 0x0C	; 12
     a7a:	19 f0       	breq	.+6      	; 0xa82 <vfprintf+0x1b2>
     a7c:	01 11       	cpse	r16, r1
     a7e:	73 c2       	rjmp	.+1254   	; 0xf66 <vfprintf+0x696>
     a80:	be c2       	rjmp	.+1404   	; 0xffe <vfprintf+0x72e>
     a82:	77 fe       	sbrs	r7, 7
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <vfprintf+0x1d4>
     a86:	ea 0c       	add	r14, r10
     a88:	54 fe       	sbrs	r5, 4
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <vfprintf+0x1c4>
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	81 33       	cpi	r24, 0x31	; 49
     a90:	09 f4       	brne	.+2      	; 0xa94 <vfprintf+0x1c4>
     a92:	ea 94       	dec	r14
     a94:	1e 14       	cp	r1, r14
     a96:	74 f5       	brge	.+92     	; 0xaf4 <vfprintf+0x224>
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	2e 15       	cp	r18, r14
     a9c:	78 f5       	brcc	.+94     	; 0xafc <vfprintf+0x22c>
     a9e:	38 e0       	ldi	r19, 0x08	; 8
     aa0:	e3 2e       	mov	r14, r19
     aa2:	2c c0       	rjmp	.+88     	; 0xafc <vfprintf+0x22c>
     aa4:	76 fc       	sbrc	r7, 6
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <vfprintf+0x22c>
     aa8:	81 2f       	mov	r24, r17
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	8a 15       	cp	r24, r10
     aae:	9b 05       	cpc	r25, r11
     ab0:	9c f0       	brlt	.+38     	; 0xad8 <vfprintf+0x208>
     ab2:	8c ef       	ldi	r24, 0xFC	; 252
     ab4:	a8 16       	cp	r10, r24
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	b8 06       	cpc	r11, r24
     aba:	74 f0       	brlt	.+28     	; 0xad8 <vfprintf+0x208>
     abc:	97 2d       	mov	r25, r7
     abe:	90 68       	ori	r25, 0x80	; 128
     ac0:	79 2e       	mov	r7, r25
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <vfprintf+0x208>
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ec 0f       	add	r30, r28
     aca:	fd 1f       	adc	r31, r29
     acc:	e1 0f       	add	r30, r17
     ace:	f1 1d       	adc	r31, r1
     ad0:	80 81       	ld	r24, Z
     ad2:	80 33       	cpi	r24, 0x30	; 48
     ad4:	19 f4       	brne	.+6      	; 0xadc <vfprintf+0x20c>
     ad6:	11 50       	subi	r17, 0x01	; 1
     ad8:	11 11       	cpse	r17, r1
     ada:	f4 cf       	rjmp	.-24     	; 0xac4 <vfprintf+0x1f4>
     adc:	77 fe       	sbrs	r7, 7
     ade:	0e c0       	rjmp	.+28     	; 0xafc <vfprintf+0x22c>
     ae0:	ee 24       	eor	r14, r14
     ae2:	e3 94       	inc	r14
     ae4:	e1 0e       	add	r14, r17
     ae6:	81 2f       	mov	r24, r17
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a8 16       	cp	r10, r24
     aec:	b9 06       	cpc	r11, r25
     aee:	2c f4       	brge	.+10     	; 0xafa <vfprintf+0x22a>
     af0:	1a 19       	sub	r17, r10
     af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x22c>
     af4:	ee 24       	eor	r14, r14
     af6:	e3 94       	inc	r14
     af8:	01 c0       	rjmp	.+2      	; 0xafc <vfprintf+0x22c>
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	77 fe       	sbrs	r7, 7
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <vfprintf+0x23c>
     b00:	1a 14       	cp	r1, r10
     b02:	1b 04       	cpc	r1, r11
     b04:	34 f4       	brge	.+12     	; 0xb12 <vfprintf+0x242>
     b06:	c5 01       	movw	r24, r10
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <vfprintf+0x246>
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x246>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	01 11       	cpse	r16, r1
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	11 23       	and	r17, r17
     b1c:	31 f0       	breq	.+12     	; 0xb2a <vfprintf+0x25a>
     b1e:	21 2f       	mov	r18, r17
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	2f 2d       	mov	r18, r15
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	14 f4       	brge	.+4      	; 0xb38 <vfprintf+0x268>
     b34:	f8 1a       	sub	r15, r24
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <vfprintf+0x26a>
     b38:	f1 2c       	mov	r15, r1
     b3a:	87 2d       	mov	r24, r7
     b3c:	89 70       	andi	r24, 0x09	; 9
     b3e:	49 f4       	brne	.+18     	; 0xb52 <vfprintf+0x282>
     b40:	ff 20       	and	r15, r15
     b42:	39 f0       	breq	.+14     	; 0xb52 <vfprintf+0x282>
     b44:	b6 01       	movw	r22, r12
     b46:	80 e2       	ldi	r24, 0x20	; 32
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     b4e:	fa 94       	dec	r15
     b50:	f7 cf       	rjmp	.-18     	; 0xb40 <vfprintf+0x270>
     b52:	00 23       	and	r16, r16
     b54:	29 f0       	breq	.+10     	; 0xb60 <vfprintf+0x290>
     b56:	b6 01       	movw	r22, r12
     b58:	80 2f       	mov	r24, r16
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     b60:	73 fc       	sbrc	r7, 3
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <vfprintf+0x2a6>
     b64:	ff 20       	and	r15, r15
     b66:	39 f0       	breq	.+14     	; 0xb76 <vfprintf+0x2a6>
     b68:	b6 01       	movw	r22, r12
     b6a:	80 e3       	ldi	r24, 0x30	; 48
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     b72:	fa 94       	dec	r15
     b74:	f7 cf       	rjmp	.-18     	; 0xb64 <vfprintf+0x294>
     b76:	77 fe       	sbrs	r7, 7
     b78:	49 c0       	rjmp	.+146    	; 0xc0c <vfprintf+0x33c>
     b7a:	35 01       	movw	r6, r10
     b7c:	b7 fe       	sbrs	r11, 7
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x2b4>
     b80:	61 2c       	mov	r6, r1
     b82:	71 2c       	mov	r7, r1
     b84:	c5 01       	movw	r24, r10
     b86:	86 19       	sub	r24, r6
     b88:	97 09       	sbc	r25, r7
     b8a:	88 24       	eor	r8, r8
     b8c:	83 94       	inc	r8
     b8e:	91 2c       	mov	r9, r1
     b90:	8c 0e       	add	r8, r28
     b92:	9d 1e       	adc	r9, r29
     b94:	88 0e       	add	r8, r24
     b96:	99 1e       	adc	r9, r25
     b98:	f5 01       	movw	r30, r10
     b9a:	ee 19       	sub	r30, r14
     b9c:	f1 09       	sbc	r31, r1
     b9e:	f9 8b       	std	Y+17, r31	; 0x11
     ba0:	e8 8b       	std	Y+16, r30	; 0x10
     ba2:	01 2f       	mov	r16, r17
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	11 95       	neg	r17
     ba8:	01 95       	neg	r16
     baa:	11 09       	sbc	r17, r1
     bac:	ff ef       	ldi	r31, 0xFF	; 255
     bae:	6f 16       	cp	r6, r31
     bb0:	7f 06       	cpc	r7, r31
     bb2:	29 f4       	brne	.+10     	; 0xbbe <vfprintf+0x2ee>
     bb4:	b6 01       	movw	r22, r12
     bb6:	8e e2       	ldi	r24, 0x2E	; 46
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     bbe:	a6 14       	cp	r10, r6
     bc0:	b7 04       	cpc	r11, r7
     bc2:	44 f0       	brlt	.+16     	; 0xbd4 <vfprintf+0x304>
     bc4:	88 89       	ldd	r24, Y+16	; 0x10
     bc6:	99 89       	ldd	r25, Y+17	; 0x11
     bc8:	86 15       	cp	r24, r6
     bca:	97 05       	cpc	r25, r7
     bcc:	1c f4       	brge	.+6      	; 0xbd4 <vfprintf+0x304>
     bce:	f4 01       	movw	r30, r8
     bd0:	81 81       	ldd	r24, Z+1	; 0x01
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vfprintf+0x306>
     bd4:	80 e3       	ldi	r24, 0x30	; 48
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	6f 1a       	sub	r6, r31
     bda:	71 08       	sbc	r7, r1
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	82 1a       	sub	r8, r18
     be0:	92 0a       	sbc	r9, r18
     be2:	60 16       	cp	r6, r16
     be4:	71 06       	cpc	r7, r17
     be6:	2c f0       	brlt	.+10     	; 0xbf2 <vfprintf+0x322>
     be8:	b6 01       	movw	r22, r12
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     bf0:	dd cf       	rjmp	.-70     	; 0xbac <vfprintf+0x2dc>
     bf2:	a6 14       	cp	r10, r6
     bf4:	b7 04       	cpc	r11, r7
     bf6:	39 f4       	brne	.+14     	; 0xc06 <vfprintf+0x336>
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	96 33       	cpi	r25, 0x36	; 54
     bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x334>
     bfe:	95 33       	cpi	r25, 0x35	; 53
     c00:	11 f4       	brne	.+4      	; 0xc06 <vfprintf+0x336>
     c02:	54 fe       	sbrs	r5, 4
     c04:	81 e3       	ldi	r24, 0x31	; 49
     c06:	b6 01       	movw	r22, r12
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	51 c0       	rjmp	.+162    	; 0xcae <vfprintf+0x3de>
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	81 33       	cpi	r24, 0x31	; 49
     c10:	19 f0       	breq	.+6      	; 0xc18 <vfprintf+0x348>
     c12:	95 2d       	mov	r25, r5
     c14:	9f 7e       	andi	r25, 0xEF	; 239
     c16:	59 2e       	mov	r5, r25
     c18:	b6 01       	movw	r22, r12
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     c20:	11 11       	cpse	r17, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <vfprintf+0x35e>
     c24:	74 fc       	sbrc	r7, 4
     c26:	1c c0       	rjmp	.+56     	; 0xc60 <vfprintf+0x390>
     c28:	85 e6       	ldi	r24, 0x65	; 101
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <vfprintf+0x394>
     c2e:	b6 01       	movw	r22, r12
     c30:	8e e2       	ldi	r24, 0x2E	; 46
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     c38:	02 e0       	ldi	r16, 0x02	; 2
     c3a:	01 0f       	add	r16, r17
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	18 0f       	add	r17, r24
     c42:	e1 e0       	ldi	r30, 0x01	; 1
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	e8 0f       	add	r30, r24
     c4c:	f1 1d       	adc	r31, r1
     c4e:	80 81       	ld	r24, Z
     c50:	b6 01       	movw	r22, r12
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     c58:	81 2f       	mov	r24, r17
     c5a:	10 13       	cpse	r17, r16
     c5c:	f0 cf       	rjmp	.-32     	; 0xc3e <vfprintf+0x36e>
     c5e:	e2 cf       	rjmp	.-60     	; 0xc24 <vfprintf+0x354>
     c60:	85 e4       	ldi	r24, 0x45	; 69
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     c6a:	b7 fc       	sbrc	r11, 7
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x3a8>
     c6e:	a1 14       	cp	r10, r1
     c70:	b1 04       	cpc	r11, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <vfprintf+0x3b2>
     c74:	54 fe       	sbrs	r5, 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x3b2>
     c78:	b1 94       	neg	r11
     c7a:	a1 94       	neg	r10
     c7c:	b1 08       	sbc	r11, r1
     c7e:	8d e2       	ldi	r24, 0x2D	; 45
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <vfprintf+0x3b4>
     c82:	8b e2       	ldi	r24, 0x2B	; 43
     c84:	b6 01       	movw	r22, r12
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	ea e0       	ldi	r30, 0x0A	; 10
     c90:	ae 16       	cp	r10, r30
     c92:	b1 04       	cpc	r11, r1
     c94:	2c f0       	brlt	.+10     	; 0xca0 <vfprintf+0x3d0>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	aa e0       	ldi	r26, 0x0A	; 10
     c9a:	aa 1a       	sub	r10, r26
     c9c:	b1 08       	sbc	r11, r1
     c9e:	f7 cf       	rjmp	.-18     	; 0xc8e <vfprintf+0x3be>
     ca0:	b6 01       	movw	r22, r12
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     ca8:	b6 01       	movw	r22, r12
     caa:	c5 01       	movw	r24, r10
     cac:	c0 96       	adiw	r24, 0x30	; 48
     cae:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     cb2:	72 c1       	rjmp	.+740    	; 0xf98 <vfprintf+0x6c8>
     cb4:	83 36       	cpi	r24, 0x63	; 99
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <vfprintf+0x3f4>
     cb8:	83 37       	cpi	r24, 0x73	; 115
     cba:	91 f0       	breq	.+36     	; 0xce0 <vfprintf+0x410>
     cbc:	83 35       	cpi	r24, 0x53	; 83
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x3f2>
     cc0:	5d c0       	rjmp	.+186    	; 0xd7c <vfprintf+0x4ac>
     cc2:	24 c0       	rjmp	.+72     	; 0xd0c <vfprintf+0x43c>
     cc4:	c5 01       	movw	r24, r10
     cc6:	02 96       	adiw	r24, 0x02	; 2
     cc8:	9f 87       	std	Y+15, r25	; 0x0f
     cca:	8e 87       	std	Y+14, r24	; 0x0e
     ccc:	f5 01       	movw	r30, r10
     cce:	80 81       	ld	r24, Z
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 88       	ldd	r6, Y+18	; 0x12
     cd4:	7b 88       	ldd	r7, Y+19	; 0x13
     cd6:	8c 88       	ldd	r8, Y+20	; 0x14
     cd8:	aa 24       	eor	r10, r10
     cda:	a3 94       	inc	r10
     cdc:	b1 2c       	mov	r11, r1
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <vfprintf+0x438>
     ce0:	c5 01       	movw	r24, r10
     ce2:	03 96       	adiw	r24, 0x03	; 3
     ce4:	9f 87       	std	Y+15, r25	; 0x0f
     ce6:	8e 87       	std	Y+14, r24	; 0x0e
     ce8:	f5 01       	movw	r30, r10
     cea:	60 80       	ld	r6, Z
     cec:	71 80       	ldd	r7, Z+1	; 0x01
     cee:	82 80       	ldd	r8, Z+2	; 0x02
     cf0:	06 ff       	sbrs	r16, 6
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x42a>
     cf4:	41 2f       	mov	r20, r17
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x42e>
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	5f ef       	ldi	r21, 0xFF	; 255
     cfe:	88 2d       	mov	r24, r8
     d00:	b3 01       	movw	r22, r6
     d02:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <strnlen>
     d06:	5c 01       	movw	r10, r24
     d08:	0f 77       	andi	r16, 0x7F	; 127
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <vfprintf+0x466>
     d0c:	c5 01       	movw	r24, r10
     d0e:	03 96       	adiw	r24, 0x03	; 3
     d10:	9f 87       	std	Y+15, r25	; 0x0f
     d12:	8e 87       	std	Y+14, r24	; 0x0e
     d14:	f5 01       	movw	r30, r10
     d16:	60 80       	ld	r6, Z
     d18:	71 80       	ldd	r7, Z+1	; 0x01
     d1a:	82 80       	ldd	r8, Z+2	; 0x02
     d1c:	06 ff       	sbrs	r16, 6
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <vfprintf+0x456>
     d20:	41 2f       	mov	r20, r17
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x45a>
     d26:	4f ef       	ldi	r20, 0xFF	; 255
     d28:	5f ef       	ldi	r21, 0xFF	; 255
     d2a:	88 2d       	mov	r24, r8
     d2c:	b3 01       	movw	r22, r6
     d2e:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <strnlen>
     d32:	5c 01       	movw	r10, r24
     d34:	00 68       	ori	r16, 0x80	; 128
     d36:	03 fd       	sbrc	r16, 3
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <vfprintf+0x4a4>
     d3a:	8f 2d       	mov	r24, r15
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a8 16       	cp	r10, r24
     d40:	b9 06       	cpc	r11, r25
     d42:	c0 f4       	brcc	.+48     	; 0xd74 <vfprintf+0x4a4>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     d4e:	fa 94       	dec	r15
     d50:	f4 cf       	rjmp	.-24     	; 0xd3a <vfprintf+0x46a>
     d52:	f3 01       	movw	r30, r6
     d54:	84 91       	lpm	r24, Z
     d56:	87 fc       	sbrc	r8, 7
     d58:	80 81       	ld	r24, Z
     d5a:	ff ef       	ldi	r31, 0xFF	; 255
     d5c:	6f 1a       	sub	r6, r31
     d5e:	7f 0a       	sbc	r7, r31
     d60:	8f 0a       	sbc	r8, r31
     d62:	b6 01       	movw	r22, r12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     d6a:	f1 10       	cpse	r15, r1
     d6c:	fa 94       	dec	r15
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	a2 1a       	sub	r10, r18
     d72:	b1 08       	sbc	r11, r1
     d74:	a1 14       	cp	r10, r1
     d76:	b1 04       	cpc	r11, r1
     d78:	61 f7       	brne	.-40     	; 0xd52 <vfprintf+0x482>
     d7a:	0e c1       	rjmp	.+540    	; 0xf98 <vfprintf+0x6c8>
     d7c:	84 36       	cpi	r24, 0x64	; 100
     d7e:	11 f0       	breq	.+4      	; 0xd84 <vfprintf+0x4b4>
     d80:	89 36       	cpi	r24, 0x69	; 105
     d82:	79 f5       	brne	.+94     	; 0xde2 <vfprintf+0x512>
     d84:	c5 01       	movw	r24, r10
     d86:	07 ff       	sbrs	r16, 7
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x4cc>
     d8a:	04 96       	adiw	r24, 0x04	; 4
     d8c:	9f 87       	std	Y+15, r25	; 0x0f
     d8e:	8e 87       	std	Y+14, r24	; 0x0e
     d90:	f5 01       	movw	r30, r10
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <vfprintf+0x4e0>
     d9c:	02 96       	adiw	r24, 0x02	; 2
     d9e:	9f 87       	std	Y+15, r25	; 0x0f
     da0:	8e 87       	std	Y+14, r24	; 0x0e
     da2:	f5 01       	movw	r30, r10
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	07 2e       	mov	r0, r23
     daa:	00 0c       	add	r0, r0
     dac:	88 0b       	sbc	r24, r24
     dae:	99 0b       	sbc	r25, r25
     db0:	0f 76       	andi	r16, 0x6F	; 111
     db2:	e0 2e       	mov	r14, r16
     db4:	97 ff       	sbrs	r25, 7
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <vfprintf+0x4fc>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	f0 2f       	mov	r31, r16
     dc8:	f0 68       	ori	r31, 0x80	; 128
     dca:	ef 2e       	mov	r14, r31
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__ultoa_invert>
     dda:	a8 2e       	mov	r10, r24
     ddc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dde:	a2 1a       	sub	r10, r18
     de0:	4b c0       	rjmp	.+150    	; 0xe78 <vfprintf+0x5a8>
     de2:	85 37       	cpi	r24, 0x75	; 117
     de4:	29 f4       	brne	.+10     	; 0xdf0 <vfprintf+0x520>
     de6:	0f 7e       	andi	r16, 0xEF	; 239
     de8:	e0 2e       	mov	r14, r16
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	25 c0       	rjmp	.+74     	; 0xe3a <vfprintf+0x56a>
     df0:	90 2f       	mov	r25, r16
     df2:	99 7f       	andi	r25, 0xF9	; 249
     df4:	e9 2e       	mov	r14, r25
     df6:	8f 36       	cpi	r24, 0x6F	; 111
     df8:	c1 f0       	breq	.+48     	; 0xe2a <vfprintf+0x55a>
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x532>
     dfc:	88 35       	cpi	r24, 0x58	; 88
     dfe:	79 f0       	breq	.+30     	; 0xe1e <vfprintf+0x54e>
     e00:	d5 c0       	rjmp	.+426    	; 0xfac <vfprintf+0x6dc>
     e02:	80 37       	cpi	r24, 0x70	; 112
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x53c>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	21 f0       	breq	.+8      	; 0xe12 <vfprintf+0x542>
     e0a:	d0 c0       	rjmp	.+416    	; 0xfac <vfprintf+0x6dc>
     e0c:	a9 2f       	mov	r26, r25
     e0e:	a0 61       	ori	r26, 0x10	; 16
     e10:	ea 2e       	mov	r14, r26
     e12:	e4 fe       	sbrs	r14, 4
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x560>
     e16:	ee 2d       	mov	r30, r14
     e18:	e4 60       	ori	r30, 0x04	; 4
     e1a:	ee 2e       	mov	r14, r30
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x560>
     e1e:	04 ff       	sbrs	r16, 4
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <vfprintf+0x566>
     e22:	f9 2f       	mov	r31, r25
     e24:	f6 60       	ori	r31, 0x06	; 6
     e26:	ef 2e       	mov	r14, r31
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x566>
     e2a:	28 e0       	ldi	r18, 0x08	; 8
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x56a>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x56a>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	c5 01       	movw	r24, r10
     e3c:	e7 fe       	sbrs	r14, 7
     e3e:	09 c0       	rjmp	.+18     	; 0xe52 <vfprintf+0x582>
     e40:	04 96       	adiw	r24, 0x04	; 4
     e42:	9f 87       	std	Y+15, r25	; 0x0f
     e44:	8e 87       	std	Y+14, r24	; 0x0e
     e46:	f5 01       	movw	r30, r10
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x592>
     e52:	02 96       	adiw	r24, 0x02	; 2
     e54:	9f 87       	std	Y+15, r25	; 0x0f
     e56:	8e 87       	std	Y+14, r24	; 0x0e
     e58:	f5 01       	movw	r30, r10
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ae 01       	movw	r20, r28
     e64:	4f 5f       	subi	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__ultoa_invert>
     e6c:	a8 2e       	mov	r10, r24
     e6e:	fc 85       	ldd	r31, Y+12	; 0x0c
     e70:	af 1a       	sub	r10, r31
     e72:	2e 2d       	mov	r18, r14
     e74:	2f 77       	andi	r18, 0x7F	; 127
     e76:	e2 2e       	mov	r14, r18
     e78:	e6 fe       	sbrs	r14, 6
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <vfprintf+0x5c2>
     e7c:	0e 2d       	mov	r16, r14
     e7e:	0e 7f       	andi	r16, 0xFE	; 254
     e80:	a1 16       	cp	r10, r17
     e82:	50 f4       	brcc	.+20     	; 0xe98 <vfprintf+0x5c8>
     e84:	e4 fe       	sbrs	r14, 4
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <vfprintf+0x5cc>
     e88:	e2 fc       	sbrc	r14, 2
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <vfprintf+0x5cc>
     e8c:	0e 2d       	mov	r16, r14
     e8e:	0e 7e       	andi	r16, 0xEE	; 238
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <vfprintf+0x5cc>
     e92:	ba 2c       	mov	r11, r10
     e94:	0e 2d       	mov	r16, r14
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x5ce>
     e98:	ba 2c       	mov	r11, r10
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <vfprintf+0x5ce>
     e9c:	b1 2e       	mov	r11, r17
     e9e:	04 ff       	sbrs	r16, 4
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <vfprintf+0x5ec>
     ea2:	fe 01       	movw	r30, r28
     ea4:	ea 0d       	add	r30, r10
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	11 f4       	brne	.+4      	; 0xeb2 <vfprintf+0x5e2>
     eae:	09 7e       	andi	r16, 0xE9	; 233
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <vfprintf+0x5f4>
     eb2:	02 ff       	sbrs	r16, 2
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x5f2>
     eb6:	b3 94       	inc	r11
     eb8:	b3 94       	inc	r11
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <vfprintf+0x5f4>
     ebc:	80 2f       	mov	r24, r16
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	09 f0       	breq	.+2      	; 0xec4 <vfprintf+0x5f4>
     ec2:	b3 94       	inc	r11
     ec4:	03 fd       	sbrc	r16, 3
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0x61a>
     ec8:	00 ff       	sbrs	r16, 0
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x608>
     ecc:	bf 14       	cp	r11, r15
     ece:	88 f4       	brcc	.+34     	; 0xef2 <vfprintf+0x622>
     ed0:	fa 0c       	add	r15, r10
     ed2:	1f 2d       	mov	r17, r15
     ed4:	1b 19       	sub	r17, r11
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <vfprintf+0x624>
     ed8:	bf 14       	cp	r11, r15
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x624>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x608>
     eea:	bf 14       	cp	r11, r15
     eec:	18 f4       	brcc	.+6      	; 0xef4 <vfprintf+0x624>
     eee:	fb 18       	sub	r15, r11
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x626>
     ef2:	1a 2d       	mov	r17, r10
     ef4:	f1 2c       	mov	r15, r1
     ef6:	04 ff       	sbrs	r16, 4
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x64a>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     f04:	02 ff       	sbrs	r16, 2
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <vfprintf+0x666>
     f08:	01 fd       	sbrc	r16, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x642>
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x646>
     f12:	88 e5       	ldi	r24, 0x58	; 88
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	b6 01       	movw	r22, r12
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <vfprintf+0x662>
     f1a:	80 2f       	mov	r24, r16
     f1c:	86 78       	andi	r24, 0x86	; 134
     f1e:	59 f0       	breq	.+22     	; 0xf36 <vfprintf+0x666>
     f20:	01 ff       	sbrs	r16, 1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x658>
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x65a>
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	07 fd       	sbrc	r16, 7
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     f36:	a1 16       	cp	r10, r17
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x678>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     f44:	11 50       	subi	r17, 0x01	; 1
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x666>
     f48:	aa 94       	dec	r10
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ec 0f       	add	r30, r28
     f50:	fd 1f       	adc	r31, r29
     f52:	ea 0d       	add	r30, r10
     f54:	f1 1d       	adc	r31, r1
     f56:	80 81       	ld	r24, Z
     f58:	b6 01       	movw	r22, r12
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     f60:	a1 10       	cpse	r10, r1
     f62:	f2 cf       	rjmp	.-28     	; 0xf48 <vfprintf+0x678>
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <vfprintf+0x6c8>
     f66:	f4 e0       	ldi	r31, 0x04	; 4
     f68:	ff 15       	cp	r31, r15
     f6a:	80 f5       	brcc	.+96     	; 0xfcc <vfprintf+0x6fc>
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	f8 1a       	sub	r15, r24
     f70:	73 fe       	sbrs	r7, 3
     f72:	23 c0       	rjmp	.+70     	; 0xfba <vfprintf+0x6ea>
     f74:	01 11       	cpse	r16, r1
     f76:	2b c0       	rjmp	.+86     	; 0xfce <vfprintf+0x6fe>
     f78:	53 fe       	sbrs	r5, 3
     f7a:	2f c0       	rjmp	.+94     	; 0xfda <vfprintf+0x70a>
     f7c:	5b eb       	ldi	r21, 0xBB	; 187
     f7e:	85 2e       	mov	r8, r21
     f80:	58 e0       	ldi	r21, 0x08	; 8
     f82:	95 2e       	mov	r9, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	a5 2e       	mov	r10, r21
     f88:	07 2d       	mov	r16, r7
     f8a:	00 71       	andi	r16, 0x10	; 16
     f8c:	f4 01       	movw	r30, r8
     f8e:	84 91       	lpm	r24, Z
     f90:	a7 fc       	sbrc	r10, 7
     f92:	80 81       	ld	r24, Z
     f94:	81 11       	cpse	r24, r1
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <vfprintf+0x718>
     f98:	ff 20       	and	r15, r15
     f9a:	09 f4       	brne	.+2      	; 0xf9e <vfprintf+0x6ce>
     f9c:	d2 cc       	rjmp	.-1628   	; 0x942 <vfprintf+0x72>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     fa8:	fa 94       	dec	r15
     faa:	f6 cf       	rjmp	.-20     	; 0xf98 <vfprintf+0x6c8>
     fac:	f6 01       	movw	r30, r12
     fae:	87 81       	ldd	r24, Z+7	; 0x07
     fb0:	90 85       	ldd	r25, Z+8	; 0x08
     fb2:	2c c0       	rjmp	.+88     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	29 c0       	rjmp	.+82     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fba:	b6 01       	movw	r22, r12
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     fc4:	fa 94       	dec	r15
     fc6:	f1 10       	cpse	r15, r1
     fc8:	f8 cf       	rjmp	.-16     	; 0xfba <vfprintf+0x6ea>
     fca:	d4 cf       	rjmp	.-88     	; 0xf74 <vfprintf+0x6a4>
     fcc:	f1 2c       	mov	r15, r1
     fce:	b6 01       	movw	r22, r12
     fd0:	80 2f       	mov	r24, r16
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     fd8:	cf cf       	rjmp	.-98     	; 0xf78 <vfprintf+0x6a8>
     fda:	47 eb       	ldi	r20, 0xB7	; 183
     fdc:	84 2e       	mov	r8, r20
     fde:	48 e0       	ldi	r20, 0x08	; 8
     fe0:	94 2e       	mov	r9, r20
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	a4 2e       	mov	r10, r20
     fe6:	d0 cf       	rjmp	.-96     	; 0xf88 <vfprintf+0x6b8>
     fe8:	01 11       	cpse	r16, r1
     fea:	80 52       	subi	r24, 0x20	; 32
     fec:	b6 01       	movw	r22, r12
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
     ff4:	ff ef       	ldi	r31, 0xFF	; 255
     ff6:	8f 1a       	sub	r8, r31
     ff8:	9f 0a       	sbc	r9, r31
     ffa:	af 0a       	sbc	r10, r31
     ffc:	c7 cf       	rjmp	.-114    	; 0xf8c <vfprintf+0x6bc>
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	2f 15       	cp	r18, r15
    1002:	10 f4       	brcc	.+4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	b3 cf       	rjmp	.-154    	; 0xf6e <vfprintf+0x69e>
    1008:	f1 2c       	mov	r15, r1
    100a:	b6 cf       	rjmp	.-148    	; 0xf78 <vfprintf+0x6a8>
    100c:	64 96       	adiw	r28, 0x14	; 20
    100e:	e2 e1       	ldi	r30, 0x12	; 18
    1010:	0c 94 61 2d 	jmp	0x5ac2	; 0x5ac2 <__epilogue_restores__>

Disassembly of section .text.libgcc:

00006806 <__tablejump2__>:
    6806:	ee 0f       	add	r30, r30
    6808:	ff 1f       	adc	r31, r31
    680a:	05 90       	lpm	r0, Z+
    680c:	f4 91       	lpm	r31, Z
    680e:	e0 2d       	mov	r30, r0
    6810:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000627e <__umulhisi3>:
    627e:	a2 9f       	mul	r26, r18
    6280:	b0 01       	movw	r22, r0
    6282:	b3 9f       	mul	r27, r19
    6284:	c0 01       	movw	r24, r0
    6286:	a3 9f       	mul	r26, r19
    6288:	70 0d       	add	r23, r0
    628a:	81 1d       	adc	r24, r1
    628c:	11 24       	eor	r1, r1
    628e:	91 1d       	adc	r25, r1
    6290:	b2 9f       	mul	r27, r18
    6292:	70 0d       	add	r23, r0
    6294:	81 1d       	adc	r24, r1
    6296:	11 24       	eor	r1, r1
    6298:	91 1d       	adc	r25, r1
    629a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00005a1e <__prologue_saves__>:
    5a1e:	2f 92       	push	r2
    5a20:	3f 92       	push	r3
    5a22:	4f 92       	push	r4
    5a24:	5f 92       	push	r5
    5a26:	6f 92       	push	r6
    5a28:	7f 92       	push	r7
    5a2a:	8f 92       	push	r8
    5a2c:	9f 92       	push	r9
    5a2e:	af 92       	push	r10
    5a30:	bf 92       	push	r11
    5a32:	cf 92       	push	r12
    5a34:	df 92       	push	r13
    5a36:	ef 92       	push	r14
    5a38:	ff 92       	push	r15
    5a3a:	0f 93       	push	r16
    5a3c:	1f 93       	push	r17
    5a3e:	cf 93       	push	r28
    5a40:	df 93       	push	r29
    5a42:	cd b7       	in	r28, 0x3d	; 61
    5a44:	de b7       	in	r29, 0x3e	; 62
    5a46:	ca 1b       	sub	r28, r26
    5a48:	db 0b       	sbc	r29, r27
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	f8 94       	cli
    5a4e:	de bf       	out	0x3e, r29	; 62
    5a50:	0f be       	out	0x3f, r0	; 63
    5a52:	cd bf       	out	0x3d, r28	; 61
    5a54:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00005ac2 <__epilogue_restores__>:
    5ac2:	2a 88       	ldd	r2, Y+18	; 0x12
    5ac4:	39 88       	ldd	r3, Y+17	; 0x11
    5ac6:	48 88       	ldd	r4, Y+16	; 0x10
    5ac8:	5f 84       	ldd	r5, Y+15	; 0x0f
    5aca:	6e 84       	ldd	r6, Y+14	; 0x0e
    5acc:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ace:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ad0:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ad2:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ad4:	b9 84       	ldd	r11, Y+9	; 0x09
    5ad6:	c8 84       	ldd	r12, Y+8	; 0x08
    5ad8:	df 80       	ldd	r13, Y+7	; 0x07
    5ada:	ee 80       	ldd	r14, Y+6	; 0x06
    5adc:	fd 80       	ldd	r15, Y+5	; 0x05
    5ade:	0c 81       	ldd	r16, Y+4	; 0x04
    5ae0:	1b 81       	ldd	r17, Y+3	; 0x03
    5ae2:	aa 81       	ldd	r26, Y+2	; 0x02
    5ae4:	b9 81       	ldd	r27, Y+1	; 0x01
    5ae6:	ce 0f       	add	r28, r30
    5ae8:	d1 1d       	adc	r29, r1
    5aea:	0f b6       	in	r0, 0x3f	; 63
    5aec:	f8 94       	cli
    5aee:	de bf       	out	0x3e, r29	; 62
    5af0:	0f be       	out	0x3f, r0	; 63
    5af2:	cd bf       	out	0x3d, r28	; 61
    5af4:	ed 01       	movw	r28, r26
    5af6:	08 95       	ret

Disassembly of section .text.avrlibc:

000068f4 <atoi>:
    68f4:	0e 94 94 33 	call	0x6728	; 0x6728 <atol>
    68f8:	cb 01       	movw	r24, r22
    68fa:	08 95       	ret

Disassembly of section .text.avrlibc:

00006728 <atol>:
    6728:	2a e0       	ldi	r18, 0x0A	; 10
    672a:	30 e0       	ldi	r19, 0x00	; 0
    672c:	40 e0       	ldi	r20, 0x00	; 0
    672e:	50 e0       	ldi	r21, 0x00	; 0
    6730:	0e 94 c8 09 	call	0x1390	; 0x1390 <strtol>
    6734:	08 95       	ret

Disassembly of section .text.avrlibc:

00001390 <strtol>:
    1390:	2f 92       	push	r2
    1392:	3f 92       	push	r3
    1394:	4f 92       	push	r4
    1396:	5f 92       	push	r5
    1398:	6f 92       	push	r6
    139a:	7f 92       	push	r7
    139c:	8f 92       	push	r8
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <strtol+0x22>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <strtol+0x24>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <strtol+0x26>
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	3b 01       	movw	r6, r22
    13bc:	88 2e       	mov	r8, r24
    13be:	5a 01       	movw	r10, r20
    13c0:	19 01       	movw	r2, r18
    13c2:	41 15       	cp	r20, r1
    13c4:	51 05       	cpc	r21, r1
    13c6:	21 f0       	breq	.+8      	; 0x13d0 <strtol+0x40>
    13c8:	fa 01       	movw	r30, r20
    13ca:	60 83       	st	Z, r22
    13cc:	71 83       	std	Z+1, r23	; 0x01
    13ce:	82 83       	std	Z+2, r24	; 0x02
    13d0:	21 14       	cp	r2, r1
    13d2:	31 04       	cpc	r3, r1
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <strtol+0x50>
    13d6:	c1 01       	movw	r24, r2
    13d8:	02 97       	sbiw	r24, 0x02	; 2
    13da:	83 97       	sbiw	r24, 0x23	; 35
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <strtol+0x50>
    13de:	1a c1       	rjmp	.+564    	; 0x1614 <strtol+0x284>
    13e0:	e8 2c       	mov	r14, r8
    13e2:	63 01       	movw	r12, r6
    13e4:	ff ef       	ldi	r31, 0xFF	; 255
    13e6:	cf 1a       	sub	r12, r31
    13e8:	df 0a       	sbc	r13, r31
    13ea:	ef 0a       	sbc	r14, r31
    13ec:	f3 01       	movw	r30, r6
    13ee:	14 91       	lpm	r17, Z
    13f0:	87 fc       	sbrc	r8, 7
    13f2:	10 81       	ld	r17, Z
    13f4:	81 2f       	mov	r24, r17
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 de 32 	call	0x65bc	; 0x65bc <isspace>
    13fc:	4c 2d       	mov	r20, r12
    13fe:	3d 2d       	mov	r19, r13
    1400:	2e 2d       	mov	r18, r14
    1402:	89 2b       	or	r24, r25
    1404:	19 f0       	breq	.+6      	; 0x140c <strtol+0x7c>
    1406:	36 01       	movw	r6, r12
    1408:	8e 2c       	mov	r8, r14
    140a:	ea cf       	rjmp	.-44     	; 0x13e0 <strtol+0x50>
    140c:	1d 32       	cpi	r17, 0x2D	; 45
    140e:	69 f4       	brne	.+26     	; 0x142a <strtol+0x9a>
    1410:	e8 2c       	mov	r14, r8
    1412:	63 01       	movw	r12, r6
    1414:	52 e0       	ldi	r21, 0x02	; 2
    1416:	c5 0e       	add	r12, r21
    1418:	d1 1c       	adc	r13, r1
    141a:	e1 1c       	adc	r14, r1
    141c:	e4 2f       	mov	r30, r20
    141e:	f3 2f       	mov	r31, r19
    1420:	14 91       	lpm	r17, Z
    1422:	27 fd       	sbrc	r18, 7
    1424:	10 81       	ld	r17, Z
    1426:	01 e0       	ldi	r16, 0x01	; 1
    1428:	0e c0       	rjmp	.+28     	; 0x1446 <strtol+0xb6>
    142a:	1b 32       	cpi	r17, 0x2B	; 43
    142c:	59 f4       	brne	.+22     	; 0x1444 <strtol+0xb4>
    142e:	e8 2c       	mov	r14, r8
    1430:	63 01       	movw	r12, r6
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	c8 0e       	add	r12, r24
    1436:	d1 1c       	adc	r13, r1
    1438:	e1 1c       	adc	r14, r1
    143a:	e4 2f       	mov	r30, r20
    143c:	f3 2f       	mov	r31, r19
    143e:	14 91       	lpm	r17, Z
    1440:	27 fd       	sbrc	r18, 7
    1442:	10 81       	ld	r17, Z
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	21 14       	cp	r2, r1
    1448:	31 04       	cpc	r3, r1
    144a:	09 f1       	breq	.+66     	; 0x148e <strtol+0xfe>
    144c:	90 e1       	ldi	r25, 0x10	; 16
    144e:	29 16       	cp	r2, r25
    1450:	31 04       	cpc	r3, r1
    1452:	29 f4       	brne	.+10     	; 0x145e <strtol+0xce>
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <strtol+0x144>
    1456:	10 e3       	ldi	r17, 0x30	; 48
    1458:	21 14       	cp	r2, r1
    145a:	31 04       	cpc	r3, r1
    145c:	21 f1       	breq	.+72     	; 0x14a6 <strtol+0x116>
    145e:	f8 e0       	ldi	r31, 0x08	; 8
    1460:	2f 16       	cp	r2, r31
    1462:	31 04       	cpc	r3, r1
    1464:	01 f1       	breq	.+64     	; 0x14a6 <strtol+0x116>
    1466:	54 f4       	brge	.+20     	; 0x147c <strtol+0xec>
    1468:	32 e0       	ldi	r19, 0x02	; 2
    146a:	23 16       	cp	r2, r19
    146c:	31 04       	cpc	r3, r1
    146e:	21 f5       	brne	.+72     	; 0x14b8 <strtol+0x128>
    1470:	41 2c       	mov	r4, r1
    1472:	51 2c       	mov	r5, r1
    1474:	61 2c       	mov	r6, r1
    1476:	50 e4       	ldi	r21, 0x40	; 64
    1478:	75 2e       	mov	r7, r21
    147a:	4b c0       	rjmp	.+150    	; 0x1512 <strtol+0x182>
    147c:	4a e0       	ldi	r20, 0x0A	; 10
    147e:	24 16       	cp	r2, r20
    1480:	31 04       	cpc	r3, r1
    1482:	39 f0       	breq	.+14     	; 0x1492 <strtol+0x102>
    1484:	50 e1       	ldi	r21, 0x10	; 16
    1486:	25 16       	cp	r2, r21
    1488:	31 04       	cpc	r3, r1
    148a:	b1 f4       	brne	.+44     	; 0x14b8 <strtol+0x128>
    148c:	3d c0       	rjmp	.+122    	; 0x1508 <strtol+0x178>
    148e:	10 33       	cpi	r17, 0x30	; 48
    1490:	19 f1       	breq	.+70     	; 0x14d8 <strtol+0x148>
    1492:	3a e0       	ldi	r19, 0x0A	; 10
    1494:	23 2e       	mov	r2, r19
    1496:	31 2c       	mov	r3, r1
    1498:	4c ec       	ldi	r20, 0xCC	; 204
    149a:	44 2e       	mov	r4, r20
    149c:	54 2c       	mov	r5, r4
    149e:	64 2c       	mov	r6, r4
    14a0:	4c e0       	ldi	r20, 0x0C	; 12
    14a2:	74 2e       	mov	r7, r20
    14a4:	36 c0       	rjmp	.+108    	; 0x1512 <strtol+0x182>
    14a6:	98 e0       	ldi	r25, 0x08	; 8
    14a8:	29 2e       	mov	r2, r25
    14aa:	31 2c       	mov	r3, r1
    14ac:	41 2c       	mov	r4, r1
    14ae:	51 2c       	mov	r5, r1
    14b0:	61 2c       	mov	r6, r1
    14b2:	20 e1       	ldi	r18, 0x10	; 16
    14b4:	72 2e       	mov	r7, r18
    14b6:	2d c0       	rjmp	.+90     	; 0x1512 <strtol+0x182>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e8       	ldi	r25, 0x80	; 128
    14c0:	91 01       	movw	r18, r2
    14c2:	03 2c       	mov	r0, r3
    14c4:	00 0c       	add	r0, r0
    14c6:	44 0b       	sbc	r20, r20
    14c8:	55 0b       	sbc	r21, r21
    14ca:	0e 94 af 2a 	call	0x555e	; 0x555e <__udivmodsi4>
    14ce:	29 01       	movw	r4, r18
    14d0:	3a 01       	movw	r6, r20
    14d2:	1f c0       	rjmp	.+62     	; 0x1512 <strtol+0x182>
    14d4:	10 33       	cpi	r17, 0x30	; 48
    14d6:	c1 f4       	brne	.+48     	; 0x1508 <strtol+0x178>
    14d8:	f6 01       	movw	r30, r12
    14da:	84 91       	lpm	r24, Z
    14dc:	e7 fc       	sbrc	r14, 7
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7d       	andi	r24, 0xDF	; 223
    14e2:	88 35       	cpi	r24, 0x58	; 88
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <strtol+0x158>
    14e6:	b7 cf       	rjmp	.-146    	; 0x1456 <strtol+0xc6>
    14e8:	ae 2d       	mov	r26, r14
    14ea:	c6 01       	movw	r24, r12
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	fc 01       	movw	r30, r24
    14f2:	14 91       	lpm	r17, Z
    14f4:	a7 fd       	sbrc	r26, 7
    14f6:	10 81       	ld	r17, Z
    14f8:	e2 e0       	ldi	r30, 0x02	; 2
    14fa:	ce 0e       	add	r12, r30
    14fc:	d1 1c       	adc	r13, r1
    14fe:	e1 1c       	adc	r14, r1
    1500:	02 60       	ori	r16, 0x02	; 2
    1502:	60 e1       	ldi	r22, 0x10	; 16
    1504:	26 2e       	mov	r2, r22
    1506:	31 2c       	mov	r3, r1
    1508:	41 2c       	mov	r4, r1
    150a:	51 2c       	mov	r5, r1
    150c:	61 2c       	mov	r6, r1
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	78 2e       	mov	r7, r24
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	cb 01       	movw	r24, r22
    151a:	91 01       	movw	r18, r2
    151c:	03 2c       	mov	r0, r3
    151e:	00 0c       	add	r0, r0
    1520:	44 0b       	sbc	r20, r20
    1522:	55 0b       	sbc	r21, r21
    1524:	29 83       	std	Y+1, r18	; 0x01
    1526:	3a 83       	std	Y+2, r19	; 0x02
    1528:	4b 83       	std	Y+3, r20	; 0x03
    152a:	5c 83       	std	Y+4, r21	; 0x04
    152c:	e0 ed       	ldi	r30, 0xD0	; 208
    152e:	e1 0f       	add	r30, r17
    1530:	ea 30       	cpi	r30, 0x0A	; 10
    1532:	60 f0       	brcs	.+24     	; 0x154c <strtol+0x1bc>
    1534:	2f eb       	ldi	r18, 0xBF	; 191
    1536:	21 0f       	add	r18, r17
    1538:	2a 31       	cpi	r18, 0x1A	; 26
    153a:	10 f4       	brcc	.+4      	; 0x1540 <strtol+0x1b0>
    153c:	e9 ec       	ldi	r30, 0xC9	; 201
    153e:	05 c0       	rjmp	.+10     	; 0x154a <strtol+0x1ba>
    1540:	2f e9       	ldi	r18, 0x9F	; 159
    1542:	21 0f       	add	r18, r17
    1544:	2a 31       	cpi	r18, 0x1A	; 26
    1546:	50 f5       	brcc	.+84     	; 0x159c <strtol+0x20c>
    1548:	e9 ea       	ldi	r30, 0xA9	; 169
    154a:	e1 0f       	add	r30, r17
    154c:	2e 2f       	mov	r18, r30
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	22 15       	cp	r18, r2
    1552:	33 05       	cpc	r19, r3
    1554:	1c f5       	brge	.+70     	; 0x159c <strtol+0x20c>
    1556:	a7 fd       	sbrc	r26, 7
    1558:	18 c0       	rjmp	.+48     	; 0x158a <strtol+0x1fa>
    155a:	46 16       	cp	r4, r22
    155c:	57 06       	cpc	r5, r23
    155e:	68 06       	cpc	r6, r24
    1560:	79 06       	cpc	r7, r25
    1562:	80 f0       	brcs	.+32     	; 0x1584 <strtol+0x1f4>
    1564:	29 81       	ldd	r18, Y+1	; 0x01
    1566:	3a 81       	ldd	r19, Y+2	; 0x02
    1568:	4b 81       	ldd	r20, Y+3	; 0x03
    156a:	5c 81       	ldd	r21, Y+4	; 0x04
    156c:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsi3>
    1570:	6e 0f       	add	r22, r30
    1572:	71 1d       	adc	r23, r1
    1574:	81 1d       	adc	r24, r1
    1576:	91 1d       	adc	r25, r1
    1578:	61 30       	cpi	r22, 0x01	; 1
    157a:	71 05       	cpc	r23, r1
    157c:	81 05       	cpc	r24, r1
    157e:	30 e8       	ldi	r19, 0x80	; 128
    1580:	93 07       	cpc	r25, r19
    1582:	10 f0       	brcs	.+4      	; 0x1588 <strtol+0x1f8>
    1584:	af ef       	ldi	r26, 0xFF	; 255
    1586:	01 c0       	rjmp	.+2      	; 0x158a <strtol+0x1fa>
    1588:	a1 e0       	ldi	r26, 0x01	; 1
    158a:	f6 01       	movw	r30, r12
    158c:	14 91       	lpm	r17, Z
    158e:	e7 fc       	sbrc	r14, 7
    1590:	10 81       	ld	r17, Z
    1592:	4f ef       	ldi	r20, 0xFF	; 255
    1594:	c4 1a       	sub	r12, r20
    1596:	d4 0a       	sbc	r13, r20
    1598:	e4 0a       	sbc	r14, r20
    159a:	c8 cf       	rjmp	.-112    	; 0x152c <strtol+0x19c>
    159c:	20 2f       	mov	r18, r16
    159e:	21 70       	andi	r18, 0x01	; 1
    15a0:	a1 14       	cp	r10, r1
    15a2:	b1 04       	cpc	r11, r1
    15a4:	b1 f0       	breq	.+44     	; 0x15d2 <strtol+0x242>
    15a6:	aa 23       	and	r26, r26
    15a8:	49 f0       	breq	.+18     	; 0x15bc <strtol+0x22c>
    15aa:	51 e0       	ldi	r21, 0x01	; 1
    15ac:	c5 1a       	sub	r12, r21
    15ae:	d1 08       	sbc	r13, r1
    15b0:	e1 08       	sbc	r14, r1
    15b2:	f5 01       	movw	r30, r10
    15b4:	c0 82       	st	Z, r12
    15b6:	d1 82       	std	Z+1, r13	; 0x01
    15b8:	e2 82       	std	Z+2, r14	; 0x02
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <strtol+0x242>
    15bc:	01 ff       	sbrs	r16, 1
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <strtol+0x26a>
    15c0:	f2 e0       	ldi	r31, 0x02	; 2
    15c2:	cf 1a       	sub	r12, r31
    15c4:	d1 08       	sbc	r13, r1
    15c6:	e1 08       	sbc	r14, r1
    15c8:	f5 01       	movw	r30, r10
    15ca:	c0 82       	st	Z, r12
    15cc:	d1 82       	std	Z+1, r13	; 0x01
    15ce:	e2 82       	std	Z+2, r14	; 0x02
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <strtol+0x26a>
    15d2:	a7 ff       	sbrs	r26, 7
    15d4:	12 c0       	rjmp	.+36     	; 0x15fa <strtol+0x26a>
    15d6:	22 23       	and	r18, r18
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <strtol+0x254>
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e8       	ldi	r25, 0x80	; 128
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <strtol+0x25c>
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	7f ef       	ldi	r23, 0xFF	; 255
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	9f e7       	ldi	r25, 0x7F	; 127
    15ec:	22 e2       	ldi	r18, 0x22	; 34
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	30 93 71 08 	sts	0x0871, r19	; 0x800871 <errno+0x1>
    15f4:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <errno>
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <strtol+0x27c>
    15fa:	22 23       	and	r18, r18
    15fc:	81 f0       	breq	.+32     	; 0x161e <strtol+0x28e>
    15fe:	90 95       	com	r25
    1600:	80 95       	com	r24
    1602:	70 95       	com	r23
    1604:	61 95       	neg	r22
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	46 2f       	mov	r20, r22
    160e:	37 2f       	mov	r19, r23
    1610:	28 2f       	mov	r18, r24
    1612:	12 c0       	rjmp	.+36     	; 0x1638 <strtol+0x2a8>
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <strtol+0x2a8>
    161e:	97 ff       	sbrs	r25, 7
    1620:	f5 cf       	rjmp	.-22     	; 0x160c <strtol+0x27c>
    1622:	82 e2       	ldi	r24, 0x22	; 34
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <errno+0x1>
    162a:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <errno>
    162e:	6f ef       	ldi	r22, 0xFF	; 255
    1630:	7f ef       	ldi	r23, 0xFF	; 255
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	9f e7       	ldi	r25, 0x7F	; 127
    1636:	ea cf       	rjmp	.-44     	; 0x160c <strtol+0x27c>
    1638:	64 2f       	mov	r22, r20
    163a:	73 2f       	mov	r23, r19
    163c:	82 2f       	mov	r24, r18
    163e:	26 96       	adiw	r28, 0x06	; 6
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	af 90       	pop	r10
    165c:	8f 90       	pop	r8
    165e:	7f 90       	pop	r7
    1660:	6f 90       	pop	r6
    1662:	5f 90       	pop	r5
    1664:	4f 90       	pop	r4
    1666:	3f 90       	pop	r3
    1668:	2f 90       	pop	r2
    166a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001db2 <__ftoa_engine>:
    1db2:	28 30       	cpi	r18, 0x08	; 8
    1db4:	08 f0       	brcs	.+2      	; 0x1db8 <__ftoa_engine+0x6>
    1db6:	27 e0       	ldi	r18, 0x07	; 7
    1db8:	33 27       	eor	r19, r19
    1dba:	da 01       	movw	r26, r20
    1dbc:	99 0f       	add	r25, r25
    1dbe:	31 1d       	adc	r19, r1
    1dc0:	87 fd       	sbrc	r24, 7
    1dc2:	91 60       	ori	r25, 0x01	; 1
    1dc4:	00 96       	adiw	r24, 0x00	; 0
    1dc6:	61 05       	cpc	r22, r1
    1dc8:	71 05       	cpc	r23, r1
    1dca:	39 f4       	brne	.+14     	; 0x1dda <__ftoa_engine+0x28>
    1dcc:	32 60       	ori	r19, 0x02	; 2
    1dce:	2e 5f       	subi	r18, 0xFE	; 254
    1dd0:	3d 93       	st	X+, r19
    1dd2:	30 e3       	ldi	r19, 0x30	; 48
    1dd4:	2a 95       	dec	r18
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <__ftoa_engine+0x1e>
    1dd8:	08 95       	ret
    1dda:	9f 3f       	cpi	r25, 0xFF	; 255
    1ddc:	30 f0       	brcs	.+12     	; 0x1dea <__ftoa_engine+0x38>
    1dde:	80 38       	cpi	r24, 0x80	; 128
    1de0:	71 05       	cpc	r23, r1
    1de2:	61 05       	cpc	r22, r1
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <__ftoa_engine+0x36>
    1de6:	3c 5f       	subi	r19, 0xFC	; 252
    1de8:	3c 5f       	subi	r19, 0xFC	; 252
    1dea:	3d 93       	st	X+, r19
    1dec:	91 30       	cpi	r25, 0x01	; 1
    1dee:	08 f0       	brcs	.+2      	; 0x1df2 <__ftoa_engine+0x40>
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	91 1d       	adc	r25, r1
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	1f 93       	push	r17
    1dfa:	0f 93       	push	r16
    1dfc:	ff 92       	push	r15
    1dfe:	ef 92       	push	r14
    1e00:	19 2f       	mov	r17, r25
    1e02:	98 7f       	andi	r25, 0xF8	; 248
    1e04:	96 95       	lsr	r25
    1e06:	e9 2f       	mov	r30, r25
    1e08:	96 95       	lsr	r25
    1e0a:	96 95       	lsr	r25
    1e0c:	e9 0f       	add	r30, r25
    1e0e:	ff 27       	eor	r31, r31
    1e10:	e0 59       	subi	r30, 0x90	; 144
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	99 27       	eor	r25, r25
    1e16:	33 27       	eor	r19, r19
    1e18:	ee 24       	eor	r14, r14
    1e1a:	ff 24       	eor	r15, r15
    1e1c:	a7 01       	movw	r20, r14
    1e1e:	e7 01       	movw	r28, r14
    1e20:	05 90       	lpm	r0, Z+
    1e22:	08 94       	sec
    1e24:	07 94       	ror	r0
    1e26:	28 f4       	brcc	.+10     	; 0x1e32 <__ftoa_engine+0x80>
    1e28:	36 0f       	add	r19, r22
    1e2a:	e7 1e       	adc	r14, r23
    1e2c:	f8 1e       	adc	r15, r24
    1e2e:	49 1f       	adc	r20, r25
    1e30:	51 1d       	adc	r21, r1
    1e32:	66 0f       	add	r22, r22
    1e34:	77 1f       	adc	r23, r23
    1e36:	88 1f       	adc	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	06 94       	lsr	r0
    1e3c:	a1 f7       	brne	.-24     	; 0x1e26 <__ftoa_engine+0x74>
    1e3e:	05 90       	lpm	r0, Z+
    1e40:	07 94       	ror	r0
    1e42:	28 f4       	brcc	.+10     	; 0x1e4e <__ftoa_engine+0x9c>
    1e44:	e7 0e       	add	r14, r23
    1e46:	f8 1e       	adc	r15, r24
    1e48:	49 1f       	adc	r20, r25
    1e4a:	56 1f       	adc	r21, r22
    1e4c:	c1 1d       	adc	r28, r1
    1e4e:	77 0f       	add	r23, r23
    1e50:	88 1f       	adc	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	66 1f       	adc	r22, r22
    1e56:	06 94       	lsr	r0
    1e58:	a1 f7       	brne	.-24     	; 0x1e42 <__ftoa_engine+0x90>
    1e5a:	05 90       	lpm	r0, Z+
    1e5c:	07 94       	ror	r0
    1e5e:	28 f4       	brcc	.+10     	; 0x1e6a <__ftoa_engine+0xb8>
    1e60:	f8 0e       	add	r15, r24
    1e62:	49 1f       	adc	r20, r25
    1e64:	56 1f       	adc	r21, r22
    1e66:	c7 1f       	adc	r28, r23
    1e68:	d1 1d       	adc	r29, r1
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	66 1f       	adc	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	06 94       	lsr	r0
    1e74:	a1 f7       	brne	.-24     	; 0x1e5e <__ftoa_engine+0xac>
    1e76:	05 90       	lpm	r0, Z+
    1e78:	07 94       	ror	r0
    1e7a:	20 f4       	brcc	.+8      	; 0x1e84 <__ftoa_engine+0xd2>
    1e7c:	49 0f       	add	r20, r25
    1e7e:	56 1f       	adc	r21, r22
    1e80:	c7 1f       	adc	r28, r23
    1e82:	d8 1f       	adc	r29, r24
    1e84:	99 0f       	add	r25, r25
    1e86:	66 1f       	adc	r22, r22
    1e88:	77 1f       	adc	r23, r23
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	06 94       	lsr	r0
    1e8e:	a9 f7       	brne	.-22     	; 0x1e7a <__ftoa_engine+0xc8>
    1e90:	84 91       	lpm	r24, Z
    1e92:	10 95       	com	r17
    1e94:	17 70       	andi	r17, 0x07	; 7
    1e96:	41 f0       	breq	.+16     	; 0x1ea8 <__ftoa_engine+0xf6>
    1e98:	d6 95       	lsr	r29
    1e9a:	c7 95       	ror	r28
    1e9c:	57 95       	ror	r21
    1e9e:	47 95       	ror	r20
    1ea0:	f7 94       	ror	r15
    1ea2:	e7 94       	ror	r14
    1ea4:	1a 95       	dec	r17
    1ea6:	c1 f7       	brne	.-16     	; 0x1e98 <__ftoa_engine+0xe6>
    1ea8:	e6 e1       	ldi	r30, 0x16	; 22
    1eaa:	f1 e0       	ldi	r31, 0x01	; 1
    1eac:	68 94       	set
    1eae:	15 90       	lpm	r1, Z+
    1eb0:	15 91       	lpm	r17, Z+
    1eb2:	35 91       	lpm	r19, Z+
    1eb4:	65 91       	lpm	r22, Z+
    1eb6:	95 91       	lpm	r25, Z+
    1eb8:	05 90       	lpm	r0, Z+
    1eba:	7f e2       	ldi	r23, 0x2F	; 47
    1ebc:	73 95       	inc	r23
    1ebe:	e1 18       	sub	r14, r1
    1ec0:	f1 0a       	sbc	r15, r17
    1ec2:	43 0b       	sbc	r20, r19
    1ec4:	56 0b       	sbc	r21, r22
    1ec6:	c9 0b       	sbc	r28, r25
    1ec8:	d0 09       	sbc	r29, r0
    1eca:	c0 f7       	brcc	.-16     	; 0x1ebc <__ftoa_engine+0x10a>
    1ecc:	e1 0c       	add	r14, r1
    1ece:	f1 1e       	adc	r15, r17
    1ed0:	43 1f       	adc	r20, r19
    1ed2:	56 1f       	adc	r21, r22
    1ed4:	c9 1f       	adc	r28, r25
    1ed6:	d0 1d       	adc	r29, r0
    1ed8:	7e f4       	brtc	.+30     	; 0x1ef8 <__ftoa_engine+0x146>
    1eda:	70 33       	cpi	r23, 0x30	; 48
    1edc:	11 f4       	brne	.+4      	; 0x1ee2 <__ftoa_engine+0x130>
    1ede:	8a 95       	dec	r24
    1ee0:	e6 cf       	rjmp	.-52     	; 0x1eae <__ftoa_engine+0xfc>
    1ee2:	e8 94       	clt
    1ee4:	01 50       	subi	r16, 0x01	; 1
    1ee6:	30 f0       	brcs	.+12     	; 0x1ef4 <__ftoa_engine+0x142>
    1ee8:	08 0f       	add	r16, r24
    1eea:	0a f4       	brpl	.+2      	; 0x1eee <__ftoa_engine+0x13c>
    1eec:	00 27       	eor	r16, r16
    1eee:	02 17       	cp	r16, r18
    1ef0:	08 f4       	brcc	.+2      	; 0x1ef4 <__ftoa_engine+0x142>
    1ef2:	20 2f       	mov	r18, r16
    1ef4:	23 95       	inc	r18
    1ef6:	02 2f       	mov	r16, r18
    1ef8:	7a 33       	cpi	r23, 0x3A	; 58
    1efa:	28 f0       	brcs	.+10     	; 0x1f06 <__ftoa_engine+0x154>
    1efc:	79 e3       	ldi	r23, 0x39	; 57
    1efe:	7d 93       	st	X+, r23
    1f00:	2a 95       	dec	r18
    1f02:	e9 f7       	brne	.-6      	; 0x1efe <__ftoa_engine+0x14c>
    1f04:	10 c0       	rjmp	.+32     	; 0x1f26 <__ftoa_engine+0x174>
    1f06:	7d 93       	st	X+, r23
    1f08:	2a 95       	dec	r18
    1f0a:	89 f6       	brne	.-94     	; 0x1eae <__ftoa_engine+0xfc>
    1f0c:	06 94       	lsr	r0
    1f0e:	97 95       	ror	r25
    1f10:	67 95       	ror	r22
    1f12:	37 95       	ror	r19
    1f14:	17 95       	ror	r17
    1f16:	17 94       	ror	r1
    1f18:	e1 18       	sub	r14, r1
    1f1a:	f1 0a       	sbc	r15, r17
    1f1c:	43 0b       	sbc	r20, r19
    1f1e:	56 0b       	sbc	r21, r22
    1f20:	c9 0b       	sbc	r28, r25
    1f22:	d0 09       	sbc	r29, r0
    1f24:	98 f0       	brcs	.+38     	; 0x1f4c <__ftoa_engine+0x19a>
    1f26:	23 95       	inc	r18
    1f28:	7e 91       	ld	r23, -X
    1f2a:	73 95       	inc	r23
    1f2c:	7a 33       	cpi	r23, 0x3A	; 58
    1f2e:	08 f0       	brcs	.+2      	; 0x1f32 <__ftoa_engine+0x180>
    1f30:	70 e3       	ldi	r23, 0x30	; 48
    1f32:	7c 93       	st	X, r23
    1f34:	20 13       	cpse	r18, r16
    1f36:	b8 f7       	brcc	.-18     	; 0x1f26 <__ftoa_engine+0x174>
    1f38:	7e 91       	ld	r23, -X
    1f3a:	70 61       	ori	r23, 0x10	; 16
    1f3c:	7d 93       	st	X+, r23
    1f3e:	30 f0       	brcs	.+12     	; 0x1f4c <__ftoa_engine+0x19a>
    1f40:	83 95       	inc	r24
    1f42:	71 e3       	ldi	r23, 0x31	; 49
    1f44:	7d 93       	st	X+, r23
    1f46:	70 e3       	ldi	r23, 0x30	; 48
    1f48:	2a 95       	dec	r18
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <__ftoa_engine+0x192>
    1f4c:	11 24       	eor	r1, r1
    1f4e:	ef 90       	pop	r14
    1f50:	ff 90       	pop	r15
    1f52:	0f 91       	pop	r16
    1f54:	1f 91       	pop	r17
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	99 27       	eor	r25, r25
    1f5c:	87 fd       	sbrc	r24, 7
    1f5e:	90 95       	com	r25
    1f60:	08 95       	ret

Disassembly of section .text.avrlibc:

000065bc <isspace>:
    65bc:	91 11       	cpse	r25, r1
    65be:	0c 94 99 34 	jmp	0x6932	; 0x6932 <__ctype_isfalse>
    65c2:	80 32       	cpi	r24, 0x20	; 32
    65c4:	19 f0       	breq	.+6      	; 0x65cc <isspace+0x10>
    65c6:	89 50       	subi	r24, 0x09	; 9
    65c8:	85 50       	subi	r24, 0x05	; 5
    65ca:	c8 f7       	brcc	.-14     	; 0x65be <isspace+0x2>
    65cc:	08 95       	ret

Disassembly of section .text.avrlibc:

00005c60 <memcpy>:
    5c60:	cf 92       	push	r12
    5c62:	df 92       	push	r13
    5c64:	ef 92       	push	r14
    5c66:	dc 01       	movw	r26, r24
    5c68:	6a 01       	movw	r12, r20
    5c6a:	e6 2e       	mov	r14, r22
    5c6c:	28 0f       	add	r18, r24
    5c6e:	39 1f       	adc	r19, r25
    5c70:	a2 17       	cp	r26, r18
    5c72:	b3 07       	cpc	r27, r19
    5c74:	51 f0       	breq	.+20     	; 0x5c8a <memcpy+0x2a>
    5c76:	f6 01       	movw	r30, r12
    5c78:	44 91       	lpm	r20, Z
    5c7a:	e7 fc       	sbrc	r14, 7
    5c7c:	40 81       	ld	r20, Z
    5c7e:	4d 93       	st	X+, r20
    5c80:	4f ef       	ldi	r20, 0xFF	; 255
    5c82:	c4 1a       	sub	r12, r20
    5c84:	d4 0a       	sbc	r13, r20
    5c86:	e4 0a       	sbc	r14, r20
    5c88:	f3 cf       	rjmp	.-26     	; 0x5c70 <memcpy+0x10>
    5c8a:	ef 90       	pop	r14
    5c8c:	df 90       	pop	r13
    5c8e:	cf 90       	pop	r12
    5c90:	08 95       	ret

Disassembly of section .text.avrlibc:

00005ecc <strcat>:
    5ecc:	9a 01       	movw	r18, r20
    5ece:	46 2f       	mov	r20, r22
    5ed0:	dc 01       	movw	r26, r24
    5ed2:	bd 01       	movw	r22, r26
    5ed4:	6f 5f       	subi	r22, 0xFF	; 255
    5ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed8:	5c 91       	ld	r21, X
    5eda:	55 23       	and	r21, r21
    5edc:	11 f0       	breq	.+4      	; 0x5ee2 <strcat+0x16>
    5ede:	db 01       	movw	r26, r22
    5ee0:	f8 cf       	rjmp	.-16     	; 0x5ed2 <strcat+0x6>
    5ee2:	f9 01       	movw	r30, r18
    5ee4:	54 91       	lpm	r21, Z
    5ee6:	47 fd       	sbrc	r20, 7
    5ee8:	50 81       	ld	r21, Z
    5eea:	5d 93       	st	X+, r21
    5eec:	55 23       	and	r21, r21
    5eee:	21 f0       	breq	.+8      	; 0x5ef8 <strcat+0x2c>
    5ef0:	2f 5f       	subi	r18, 0xFF	; 255
    5ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef4:	4f 4f       	sbci	r20, 0xFF	; 255
    5ef6:	f5 cf       	rjmp	.-22     	; 0x5ee2 <strcat+0x16>
    5ef8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005626 <strcmp>:
    5626:	cf 92       	push	r12
    5628:	df 92       	push	r13
    562a:	ef 92       	push	r14
    562c:	6b 01       	movw	r12, r22
    562e:	e8 2e       	mov	r14, r24
    5630:	f6 01       	movw	r30, r12
    5632:	84 91       	lpm	r24, Z
    5634:	e7 fc       	sbrc	r14, 7
    5636:	80 81       	ld	r24, Z
    5638:	f9 01       	movw	r30, r18
    563a:	54 91       	lpm	r21, Z
    563c:	47 fd       	sbrc	r20, 7
    563e:	50 81       	ld	r21, Z
    5640:	85 13       	cpse	r24, r21
    5642:	0b c0       	rjmp	.+22     	; 0x565a <strcmp+0x34>
    5644:	88 23       	and	r24, r24
    5646:	41 f0       	breq	.+16     	; 0x5658 <strcmp+0x32>
    5648:	8f ef       	ldi	r24, 0xFF	; 255
    564a:	c8 1a       	sub	r12, r24
    564c:	d8 0a       	sbc	r13, r24
    564e:	e8 0a       	sbc	r14, r24
    5650:	2f 5f       	subi	r18, 0xFF	; 255
    5652:	3f 4f       	sbci	r19, 0xFF	; 255
    5654:	4f 4f       	sbci	r20, 0xFF	; 255
    5656:	ec cf       	rjmp	.-40     	; 0x5630 <strcmp+0xa>
    5658:	58 2f       	mov	r21, r24
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	85 1b       	sub	r24, r21
    565e:	91 09       	sbc	r25, r1
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	cf 90       	pop	r12
    5666:	08 95       	ret

Disassembly of section .text.avrlibc:

000047cc <strncmp>:
    47cc:	cf 92       	push	r12
    47ce:	df 92       	push	r13
    47d0:	ef 92       	push	r14
    47d2:	0f 93       	push	r16
    47d4:	1f 93       	push	r17
    47d6:	6b 01       	movw	r12, r22
    47d8:	e8 2e       	mov	r14, r24
    47da:	01 15       	cp	r16, r1
    47dc:	11 05       	cpc	r17, r1
    47de:	19 f1       	breq	.+70     	; 0x4826 <strncmp+0x5a>
    47e0:	01 50       	subi	r16, 0x01	; 1
    47e2:	11 09       	sbc	r17, r1
    47e4:	f6 01       	movw	r30, r12
    47e6:	84 91       	lpm	r24, Z
    47e8:	e7 fc       	sbrc	r14, 7
    47ea:	80 81       	ld	r24, Z
    47ec:	88 23       	and	r24, r24
    47ee:	99 f0       	breq	.+38     	; 0x4816 <strncmp+0x4a>
    47f0:	f9 01       	movw	r30, r18
    47f2:	94 91       	lpm	r25, Z
    47f4:	47 fd       	sbrc	r20, 7
    47f6:	90 81       	ld	r25, Z
    47f8:	99 23       	and	r25, r25
    47fa:	69 f0       	breq	.+26     	; 0x4816 <strncmp+0x4a>
    47fc:	01 15       	cp	r16, r1
    47fe:	11 05       	cpc	r17, r1
    4800:	51 f0       	breq	.+20     	; 0x4816 <strncmp+0x4a>
    4802:	89 13       	cpse	r24, r25
    4804:	08 c0       	rjmp	.+16     	; 0x4816 <strncmp+0x4a>
    4806:	8f ef       	ldi	r24, 0xFF	; 255
    4808:	c8 1a       	sub	r12, r24
    480a:	d8 0a       	sbc	r13, r24
    480c:	e8 0a       	sbc	r14, r24
    480e:	2f 5f       	subi	r18, 0xFF	; 255
    4810:	3f 4f       	sbci	r19, 0xFF	; 255
    4812:	4f 4f       	sbci	r20, 0xFF	; 255
    4814:	e5 cf       	rjmp	.-54     	; 0x47e0 <strncmp+0x14>
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	f9 01       	movw	r30, r18
    481a:	24 91       	lpm	r18, Z
    481c:	47 fd       	sbrc	r20, 7
    481e:	20 81       	ld	r18, Z
    4820:	82 1b       	sub	r24, r18
    4822:	91 09       	sbc	r25, r1
    4824:	02 c0       	rjmp	.+4      	; 0x482a <strncmp+0x5e>
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	1f 91       	pop	r17
    482c:	0f 91       	pop	r16
    482e:	ef 90       	pop	r14
    4830:	df 90       	pop	r13
    4832:	cf 90       	pop	r12
    4834:	08 95       	ret

Disassembly of section .text.avrlibc:

00005efa <strlen>:
    5efa:	cf 92       	push	r12
    5efc:	df 92       	push	r13
    5efe:	ef 92       	push	r14
    5f00:	6b 01       	movw	r12, r22
    5f02:	e8 2e       	mov	r14, r24
    5f04:	a8 2f       	mov	r26, r24
    5f06:	cb 01       	movw	r24, r22
    5f08:	fc 01       	movw	r30, r24
    5f0a:	24 91       	lpm	r18, Z
    5f0c:	a7 fd       	sbrc	r26, 7
    5f0e:	20 81       	ld	r18, Z
    5f10:	22 23       	and	r18, r18
    5f12:	19 f0       	breq	.+6      	; 0x5f1a <strlen+0x20>
    5f14:	01 96       	adiw	r24, 0x01	; 1
    5f16:	a1 1d       	adc	r26, r1
    5f18:	f7 cf       	rjmp	.-18     	; 0x5f08 <strlen+0xe>
    5f1a:	8c 19       	sub	r24, r12
    5f1c:	9d 09       	sbc	r25, r13
    5f1e:	ef 90       	pop	r14
    5f20:	df 90       	pop	r13
    5f22:	cf 90       	pop	r12
    5f24:	08 95       	ret

Disassembly of section .text.avrlibc:

0000629c <strcpy>:
    629c:	9a 01       	movw	r18, r20
    629e:	46 2f       	mov	r20, r22
    62a0:	dc 01       	movw	r26, r24
    62a2:	f9 01       	movw	r30, r18
    62a4:	54 91       	lpm	r21, Z
    62a6:	47 fd       	sbrc	r20, 7
    62a8:	50 81       	ld	r21, Z
    62aa:	5d 93       	st	X+, r21
    62ac:	55 23       	and	r21, r21
    62ae:	21 f0       	breq	.+8      	; 0x62b8 <strcpy+0x1c>
    62b0:	2f 5f       	subi	r18, 0xFF	; 255
    62b2:	3f 4f       	sbci	r19, 0xFF	; 255
    62b4:	4f 4f       	sbci	r20, 0xFF	; 255
    62b6:	f5 cf       	rjmp	.-22     	; 0x62a2 <strcpy+0x6>
    62b8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005af8 <strnlen>:
    5af8:	cf 92       	push	r12
    5afa:	df 92       	push	r13
    5afc:	ef 92       	push	r14
    5afe:	6b 01       	movw	r12, r22
    5b00:	e8 2e       	mov	r14, r24
    5b02:	a8 2f       	mov	r26, r24
    5b04:	cb 01       	movw	r24, r22
    5b06:	41 15       	cp	r20, r1
    5b08:	51 05       	cpc	r21, r1
    5b0a:	31 f4       	brne	.+12     	; 0x5b18 <strnlen+0x20>
    5b0c:	8c 19       	sub	r24, r12
    5b0e:	9d 09       	sbc	r25, r13
    5b10:	ef 90       	pop	r14
    5b12:	df 90       	pop	r13
    5b14:	cf 90       	pop	r12
    5b16:	08 95       	ret
    5b18:	fc 01       	movw	r30, r24
    5b1a:	24 91       	lpm	r18, Z
    5b1c:	a7 fd       	sbrc	r26, 7
    5b1e:	20 81       	ld	r18, Z
    5b20:	22 23       	and	r18, r18
    5b22:	a1 f3       	breq	.-24     	; 0x5b0c <strnlen+0x14>
    5b24:	01 96       	adiw	r24, 0x01	; 1
    5b26:	a1 1d       	adc	r26, r1
    5b28:	41 50       	subi	r20, 0x01	; 1
    5b2a:	51 09       	sbc	r21, r1
    5b2c:	ec cf       	rjmp	.-40     	; 0x5b06 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00004444 <fputc>:
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	cf 93       	push	r28
    444a:	df 93       	push	r29
    444c:	fb 01       	movw	r30, r22
    444e:	24 81       	ldd	r18, Z+4	; 0x04
    4450:	21 fd       	sbrc	r18, 1
    4452:	03 c0       	rjmp	.+6      	; 0x445a <fputc+0x16>
    4454:	8f ef       	ldi	r24, 0xFF	; 255
    4456:	9f ef       	ldi	r25, 0xFF	; 255
    4458:	2c c0       	rjmp	.+88     	; 0x44b2 <fputc+0x6e>
    445a:	22 ff       	sbrs	r18, 2
    445c:	16 c0       	rjmp	.+44     	; 0x448a <fputc+0x46>
    445e:	47 81       	ldd	r20, Z+7	; 0x07
    4460:	50 85       	ldd	r21, Z+8	; 0x08
    4462:	25 81       	ldd	r18, Z+5	; 0x05
    4464:	36 81       	ldd	r19, Z+6	; 0x06
    4466:	42 17       	cp	r20, r18
    4468:	53 07       	cpc	r21, r19
    446a:	44 f4       	brge	.+16     	; 0x447c <fputc+0x38>
    446c:	a0 81       	ld	r26, Z
    446e:	b1 81       	ldd	r27, Z+1	; 0x01
    4470:	9d 01       	movw	r18, r26
    4472:	2f 5f       	subi	r18, 0xFF	; 255
    4474:	3f 4f       	sbci	r19, 0xFF	; 255
    4476:	31 83       	std	Z+1, r19	; 0x01
    4478:	20 83       	st	Z, r18
    447a:	8c 93       	st	X, r24
    447c:	27 81       	ldd	r18, Z+7	; 0x07
    447e:	30 85       	ldd	r19, Z+8	; 0x08
    4480:	2f 5f       	subi	r18, 0xFF	; 255
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	30 87       	std	Z+8, r19	; 0x08
    4486:	27 83       	std	Z+7, r18	; 0x07
    4488:	14 c0       	rjmp	.+40     	; 0x44b2 <fputc+0x6e>
    448a:	8b 01       	movw	r16, r22
    448c:	ec 01       	movw	r28, r24
    448e:	fb 01       	movw	r30, r22
    4490:	01 84       	ldd	r0, Z+9	; 0x09
    4492:	f2 85       	ldd	r31, Z+10	; 0x0a
    4494:	e0 2d       	mov	r30, r0
    4496:	09 95       	icall
    4498:	89 2b       	or	r24, r25
    449a:	e1 f6       	brne	.-72     	; 0x4454 <fputc+0x10>
    449c:	d8 01       	movw	r26, r16
    449e:	17 96       	adiw	r26, 0x07	; 7
    44a0:	8d 91       	ld	r24, X+
    44a2:	9c 91       	ld	r25, X
    44a4:	18 97       	sbiw	r26, 0x08	; 8
    44a6:	01 96       	adiw	r24, 0x01	; 1
    44a8:	18 96       	adiw	r26, 0x08	; 8
    44aa:	9c 93       	st	X, r25
    44ac:	8e 93       	st	-X, r24
    44ae:	17 97       	sbiw	r26, 0x07	; 7
    44b0:	ce 01       	movw	r24, r28
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

Disassembly of section .text.avrlibc:

00005490 <sprintf>:
    5490:	af e0       	ldi	r26, 0x0F	; 15
    5492:	b0 e0       	ldi	r27, 0x00	; 0
    5494:	ee e4       	ldi	r30, 0x4E	; 78
    5496:	fa e2       	ldi	r31, 0x2A	; 42
    5498:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__prologue_saves__+0x1c>
    549c:	0e 89       	ldd	r16, Y+22	; 0x16
    549e:	1f 89       	ldd	r17, Y+23	; 0x17
    54a0:	86 e0       	ldi	r24, 0x06	; 6
    54a2:	8d 83       	std	Y+5, r24	; 0x05
    54a4:	1a 83       	std	Y+2, r17	; 0x02
    54a6:	09 83       	std	Y+1, r16	; 0x01
    54a8:	8f ef       	ldi	r24, 0xFF	; 255
    54aa:	9f e7       	ldi	r25, 0x7F	; 127
    54ac:	9f 83       	std	Y+7, r25	; 0x07
    54ae:	8e 83       	std	Y+6, r24	; 0x06
    54b0:	9e 01       	movw	r18, r28
    54b2:	25 5e       	subi	r18, 0xE5	; 229
    54b4:	3f 4f       	sbci	r19, 0xFF	; 255
    54b6:	48 8d       	ldd	r20, Y+24	; 0x18
    54b8:	59 8d       	ldd	r21, Y+25	; 0x19
    54ba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    54bc:	ce 01       	movw	r24, r28
    54be:	01 96       	adiw	r24, 0x01	; 1
    54c0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <vfprintf>
    54c4:	e8 85       	ldd	r30, Y+8	; 0x08
    54c6:	f9 85       	ldd	r31, Y+9	; 0x09
    54c8:	e0 0f       	add	r30, r16
    54ca:	f1 1f       	adc	r31, r17
    54cc:	10 82       	st	Z, r1
    54ce:	2f 96       	adiw	r28, 0x0f	; 15
    54d0:	e4 e0       	ldi	r30, 0x04	; 4
    54d2:	0c 94 6f 2d 	jmp	0x5ade	; 0x5ade <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000036f0 <__ultoa_invert>:
    36f0:	fa 01       	movw	r30, r20
    36f2:	aa 27       	eor	r26, r26
    36f4:	28 30       	cpi	r18, 0x08	; 8
    36f6:	51 f1       	breq	.+84     	; 0x374c <__ultoa_invert+0x5c>
    36f8:	20 31       	cpi	r18, 0x10	; 16
    36fa:	81 f1       	breq	.+96     	; 0x375c <__ultoa_invert+0x6c>
    36fc:	e8 94       	clt
    36fe:	6f 93       	push	r22
    3700:	6e 7f       	andi	r22, 0xFE	; 254
    3702:	6e 5f       	subi	r22, 0xFE	; 254
    3704:	7f 4f       	sbci	r23, 0xFF	; 255
    3706:	8f 4f       	sbci	r24, 0xFF	; 255
    3708:	9f 4f       	sbci	r25, 0xFF	; 255
    370a:	af 4f       	sbci	r26, 0xFF	; 255
    370c:	b1 e0       	ldi	r27, 0x01	; 1
    370e:	3e d0       	rcall	.+124    	; 0x378c <__ultoa_invert+0x9c>
    3710:	b4 e0       	ldi	r27, 0x04	; 4
    3712:	3c d0       	rcall	.+120    	; 0x378c <__ultoa_invert+0x9c>
    3714:	67 0f       	add	r22, r23
    3716:	78 1f       	adc	r23, r24
    3718:	89 1f       	adc	r24, r25
    371a:	9a 1f       	adc	r25, r26
    371c:	a1 1d       	adc	r26, r1
    371e:	68 0f       	add	r22, r24
    3720:	79 1f       	adc	r23, r25
    3722:	8a 1f       	adc	r24, r26
    3724:	91 1d       	adc	r25, r1
    3726:	a1 1d       	adc	r26, r1
    3728:	6a 0f       	add	r22, r26
    372a:	71 1d       	adc	r23, r1
    372c:	81 1d       	adc	r24, r1
    372e:	91 1d       	adc	r25, r1
    3730:	a1 1d       	adc	r26, r1
    3732:	20 d0       	rcall	.+64     	; 0x3774 <__ultoa_invert+0x84>
    3734:	09 f4       	brne	.+2      	; 0x3738 <__ultoa_invert+0x48>
    3736:	68 94       	set
    3738:	3f 91       	pop	r19
    373a:	2a e0       	ldi	r18, 0x0A	; 10
    373c:	26 9f       	mul	r18, r22
    373e:	11 24       	eor	r1, r1
    3740:	30 19       	sub	r19, r0
    3742:	30 5d       	subi	r19, 0xD0	; 208
    3744:	31 93       	st	Z+, r19
    3746:	de f6       	brtc	.-74     	; 0x36fe <__ultoa_invert+0xe>
    3748:	cf 01       	movw	r24, r30
    374a:	08 95       	ret
    374c:	46 2f       	mov	r20, r22
    374e:	47 70       	andi	r20, 0x07	; 7
    3750:	40 5d       	subi	r20, 0xD0	; 208
    3752:	41 93       	st	Z+, r20
    3754:	b3 e0       	ldi	r27, 0x03	; 3
    3756:	0f d0       	rcall	.+30     	; 0x3776 <__ultoa_invert+0x86>
    3758:	c9 f7       	brne	.-14     	; 0x374c <__ultoa_invert+0x5c>
    375a:	f6 cf       	rjmp	.-20     	; 0x3748 <__ultoa_invert+0x58>
    375c:	46 2f       	mov	r20, r22
    375e:	4f 70       	andi	r20, 0x0F	; 15
    3760:	40 5d       	subi	r20, 0xD0	; 208
    3762:	4a 33       	cpi	r20, 0x3A	; 58
    3764:	18 f0       	brcs	.+6      	; 0x376c <__ultoa_invert+0x7c>
    3766:	49 5d       	subi	r20, 0xD9	; 217
    3768:	31 fd       	sbrc	r19, 1
    376a:	40 52       	subi	r20, 0x20	; 32
    376c:	41 93       	st	Z+, r20
    376e:	02 d0       	rcall	.+4      	; 0x3774 <__ultoa_invert+0x84>
    3770:	a9 f7       	brne	.-22     	; 0x375c <__ultoa_invert+0x6c>
    3772:	ea cf       	rjmp	.-44     	; 0x3748 <__ultoa_invert+0x58>
    3774:	b4 e0       	ldi	r27, 0x04	; 4
    3776:	a6 95       	lsr	r26
    3778:	97 95       	ror	r25
    377a:	87 95       	ror	r24
    377c:	77 95       	ror	r23
    377e:	67 95       	ror	r22
    3780:	ba 95       	dec	r27
    3782:	c9 f7       	brne	.-14     	; 0x3776 <__ultoa_invert+0x86>
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	61 05       	cpc	r22, r1
    3788:	71 05       	cpc	r23, r1
    378a:	08 95       	ret
    378c:	9b 01       	movw	r18, r22
    378e:	ac 01       	movw	r20, r24
    3790:	0a 2e       	mov	r0, r26
    3792:	06 94       	lsr	r0
    3794:	57 95       	ror	r21
    3796:	47 95       	ror	r20
    3798:	37 95       	ror	r19
    379a:	27 95       	ror	r18
    379c:	ba 95       	dec	r27
    379e:	c9 f7       	brne	.-14     	; 0x3792 <__ultoa_invert+0xa2>
    37a0:	62 0f       	add	r22, r18
    37a2:	73 1f       	adc	r23, r19
    37a4:	84 1f       	adc	r24, r20
    37a6:	95 1f       	adc	r25, r21
    37a8:	a0 1d       	adc	r26, r0
    37aa:	08 95       	ret

Disassembly of section .text.avrlibc:

00006932 <__ctype_isfalse>:
    6932:	99 27       	eor	r25, r25
    6934:	88 27       	eor	r24, r24

00006936 <__ctype_istrue>:
    6936:	08 95       	ret

Disassembly of section .text.avrlibc:

00006014 <eeprom_read_block>:
    6014:	ba 01       	movw	r22, r20
    6016:	a9 01       	movw	r20, r18
    6018:	dc 01       	movw	r26, r24
    601a:	cb 01       	movw	r24, r22

0000601c <eeprom_read_blraw>:
    601c:	fc 01       	movw	r30, r24
    601e:	f9 99       	sbic	0x1f, 1	; 31
    6020:	fe cf       	rjmp	.-4      	; 0x601e <eeprom_read_blraw+0x2>
    6022:	06 c0       	rjmp	.+12     	; 0x6030 <eeprom_read_blraw+0x14>
    6024:	f2 bd       	out	0x22, r31	; 34
    6026:	e1 bd       	out	0x21, r30	; 33
    6028:	f8 9a       	sbi	0x1f, 0	; 31
    602a:	31 96       	adiw	r30, 0x01	; 1
    602c:	00 b4       	in	r0, 0x20	; 32
    602e:	0d 92       	st	X+, r0
    6030:	41 50       	subi	r20, 0x01	; 1
    6032:	50 40       	sbci	r21, 0x00	; 0
    6034:	b8 f7       	brcc	.-18     	; 0x6024 <eeprom_read_blraw+0x8>
    6036:	08 95       	ret

Disassembly of section .text.avrlibc:

000065ce <eeprom_read_byte>:
    65ce:	cb 01       	movw	r24, r22
    65d0:	f9 99       	sbic	0x1f, 1	; 31
    65d2:	fe cf       	rjmp	.-4      	; 0x65d0 <eeprom_read_byte+0x2>
    65d4:	92 bd       	out	0x22, r25	; 34
    65d6:	81 bd       	out	0x21, r24	; 33
    65d8:	f8 9a       	sbi	0x1f, 0	; 31
    65da:	99 27       	eor	r25, r25
    65dc:	80 b5       	in	r24, 0x20	; 32
    65de:	08 95       	ret

Disassembly of section .text.avrlibc:

00006736 <eeprom_read_dword>:
    6736:	cb 01       	movw	r24, r22
    6738:	a6 e1       	ldi	r26, 0x16	; 22
    673a:	b0 e0       	ldi	r27, 0x00	; 0
    673c:	44 e0       	ldi	r20, 0x04	; 4
    673e:	50 e0       	ldi	r21, 0x00	; 0
    6740:	0c 94 0e 30 	jmp	0x601c	; 0x601c <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00006744 <eeprom_read_word>:
    6744:	cb 01       	movw	r24, r22
    6746:	a8 e1       	ldi	r26, 0x18	; 24
    6748:	b0 e0       	ldi	r27, 0x00	; 0
    674a:	42 e0       	ldi	r20, 0x02	; 2
    674c:	50 e0       	ldi	r21, 0x00	; 0
    674e:	0c 94 0e 30 	jmp	0x601c	; 0x601c <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000551a <eeprom_update_block>:
    551a:	cf 92       	push	r12
    551c:	df 92       	push	r13
    551e:	ef 92       	push	r14
    5520:	21 50       	subi	r18, 0x01	; 1
    5522:	31 09       	sbc	r19, r1
    5524:	c0 f0       	brcs	.+48     	; 0x5556 <eeprom_update_block+0x3c>
    5526:	6b 01       	movw	r12, r22
    5528:	e8 2e       	mov	r14, r24
    552a:	c2 0e       	add	r12, r18
    552c:	d3 1e       	adc	r13, r19
    552e:	e1 1c       	adc	r14, r1
    5530:	ca 01       	movw	r24, r20
    5532:	82 0f       	add	r24, r18
    5534:	93 1f       	adc	r25, r19
    5536:	42 2f       	mov	r20, r18
    5538:	73 2f       	mov	r23, r19
    553a:	f6 01       	movw	r30, r12
    553c:	5e 2d       	mov	r21, r14
    553e:	0e 94 41 34 	call	0x6882	; 0x6882 <__xload_1>
    5542:	26 2f       	mov	r18, r22
    5544:	0e 94 1d 30 	call	0x603a	; 0x603a <eeprom_update_r18>
    5548:	31 e0       	ldi	r19, 0x01	; 1
    554a:	c3 1a       	sub	r12, r19
    554c:	d1 08       	sbc	r13, r1
    554e:	e1 08       	sbc	r14, r1
    5550:	41 50       	subi	r20, 0x01	; 1
    5552:	70 40       	sbci	r23, 0x00	; 0
    5554:	90 f7       	brcc	.-28     	; 0x553a <eeprom_update_block+0x20>
    5556:	ef 90       	pop	r14
    5558:	df 90       	pop	r13
    555a:	cf 90       	pop	r12
    555c:	08 95       	ret

Disassembly of section .text.avrlibc:

00006038 <eeprom_update_byte>:
    6038:	26 2f       	mov	r18, r22

0000603a <eeprom_update_r18>:
    603a:	f9 99       	sbic	0x1f, 1	; 31
    603c:	fe cf       	rjmp	.-4      	; 0x603a <eeprom_update_r18>
    603e:	92 bd       	out	0x22, r25	; 34
    6040:	81 bd       	out	0x21, r24	; 33
    6042:	f8 9a       	sbi	0x1f, 0	; 31
    6044:	01 97       	sbiw	r24, 0x01	; 1
    6046:	00 b4       	in	r0, 0x20	; 32
    6048:	02 16       	cp	r0, r18
    604a:	39 f0       	breq	.+14     	; 0x605a <eeprom_update_r18+0x20>
    604c:	1f ba       	out	0x1f, r1	; 31
    604e:	20 bd       	out	0x20, r18	; 32
    6050:	0f b6       	in	r0, 0x3f	; 63
    6052:	f8 94       	cli
    6054:	fa 9a       	sbi	0x1f, 2	; 31
    6056:	f9 9a       	sbi	0x1f, 1	; 31
    6058:	0f be       	out	0x3f, r0	; 63
    605a:	08 95       	ret

Disassembly of section .text.avrlibc:

00006412 <eeprom_update_dword>:
    6412:	03 96       	adiw	r24, 0x03	; 3
    6414:	27 2f       	mov	r18, r23
    6416:	0e 94 1d 30 	call	0x603a	; 0x603a <eeprom_update_r18>
    641a:	0e 94 1c 30 	call	0x6038	; 0x6038 <eeprom_update_byte>
    641e:	25 2f       	mov	r18, r21
    6420:	0e 94 1d 30 	call	0x603a	; 0x603a <eeprom_update_r18>
    6424:	24 2f       	mov	r18, r20
    6426:	0c 94 1d 30 	jmp	0x603a	; 0x603a <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00006812 <eeprom_update_word>:
    6812:	01 96       	adiw	r24, 0x01	; 1
    6814:	27 2f       	mov	r18, r23
    6816:	0e 94 1d 30 	call	0x603a	; 0x603a <eeprom_update_r18>
    681a:	0c 94 1c 30 	jmp	0x6038	; 0x6038 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

000061c8 <__mulsi3>:
    61c8:	db 01       	movw	r26, r22
    61ca:	8f 93       	push	r24
    61cc:	9f 93       	push	r25
    61ce:	0e 94 41 32 	call	0x6482	; 0x6482 <__muluhisi3>
    61d2:	bf 91       	pop	r27
    61d4:	af 91       	pop	r26
    61d6:	a2 9f       	mul	r26, r18
    61d8:	80 0d       	add	r24, r0
    61da:	91 1d       	adc	r25, r1
    61dc:	a3 9f       	mul	r26, r19
    61de:	90 0d       	add	r25, r0
    61e0:	b2 9f       	mul	r27, r18
    61e2:	90 0d       	add	r25, r0
    61e4:	11 24       	eor	r1, r1
    61e6:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000555e <__udivmodsi4>:
    555e:	a1 e2       	ldi	r26, 0x21	; 33
    5560:	1a 2e       	mov	r1, r26
    5562:	aa 1b       	sub	r26, r26
    5564:	bb 1b       	sub	r27, r27
    5566:	fd 01       	movw	r30, r26
    5568:	0d c0       	rjmp	.+26     	; 0x5584 <__udivmodsi4_ep>

0000556a <__udivmodsi4_loop>:
    556a:	aa 1f       	adc	r26, r26
    556c:	bb 1f       	adc	r27, r27
    556e:	ee 1f       	adc	r30, r30
    5570:	ff 1f       	adc	r31, r31
    5572:	a2 17       	cp	r26, r18
    5574:	b3 07       	cpc	r27, r19
    5576:	e4 07       	cpc	r30, r20
    5578:	f5 07       	cpc	r31, r21
    557a:	20 f0       	brcs	.+8      	; 0x5584 <__udivmodsi4_ep>
    557c:	a2 1b       	sub	r26, r18
    557e:	b3 0b       	sbc	r27, r19
    5580:	e4 0b       	sbc	r30, r20
    5582:	f5 0b       	sbc	r31, r21

00005584 <__udivmodsi4_ep>:
    5584:	66 1f       	adc	r22, r22
    5586:	77 1f       	adc	r23, r23
    5588:	88 1f       	adc	r24, r24
    558a:	99 1f       	adc	r25, r25
    558c:	1a 94       	dec	r1
    558e:	69 f7       	brne	.-38     	; 0x556a <__udivmodsi4_loop>
    5590:	60 95       	com	r22
    5592:	70 95       	com	r23
    5594:	80 95       	com	r24
    5596:	90 95       	com	r25
    5598:	9b 01       	movw	r18, r22
    559a:	ac 01       	movw	r20, r24
    559c:	bd 01       	movw	r22, r26
    559e:	cf 01       	movw	r24, r30
    55a0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00006482 <__muluhisi3>:
    6482:	0e 94 3f 31 	call	0x627e	; 0x627e <__umulhisi3>
    6486:	a5 9f       	mul	r26, r21
    6488:	90 0d       	add	r25, r0
    648a:	b4 9f       	mul	r27, r20
    648c:	90 0d       	add	r25, r0
    648e:	a4 9f       	mul	r26, r20
    6490:	80 0d       	add	r24, r0
    6492:	91 1d       	adc	r25, r1
    6494:	11 24       	eor	r1, r1
    6496:	08 95       	ret

Disassembly of section .text.libgcc:

00006882 <__xload_1>:
    6882:	57 fd       	sbrc	r21, 7
    6884:	60 81       	ld	r22, Z
    6886:	57 ff       	sbrs	r21, 7
    6888:	64 91       	lpm	r22, Z
    688a:	08 95       	ret
