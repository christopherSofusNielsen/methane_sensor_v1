
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000404e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  0000404e  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000404e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  000040a9  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000920  00000000  00000000  00004120  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bee1  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025c4  00000000  00000000  00010921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000442e  00000000  00000000  00012ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001798  00000000  00000000  00017314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  00018aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004fa8  00000000  00000000  00019474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0001e41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00003f8a  00003f8a  0000403e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001eb34  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00003dac  00003dac  00003e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003cce  00003cce  00003d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00003dba  00003dba  00003e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003ce2  00003ce2  00003d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00003dc8  00003dc8  00003e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00003cf6  00003cf6  00003daa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  00003d0a  00003d0a  00003dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_init 00000008  00003f3c  00003f3c  00003ff0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_active 00000008  00003f44  00003f44  00003ff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_deactive 00000008  00003f4c  00003f4c  00004000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_init 0000000e  00003dd6  00003dd6  00003e8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_data_ready 0000000a  00003f14  00003f14  00003fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_16 0000004e  00002f86  00002f86  0000303a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss._cb      00000002  00800726  00800726  0000404e  2**0
                  ALLOC
 29 .text.__vector_13 0000004e  00002fd4  00002fd4  00003088  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  00800728  00800728  0000404e  2**0
                  ALLOC
 31 .text.__vector_9 00000098  00002472  00002472  00002526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.cnt      00000001  0080072a  0080072a  0000404e  2**0
                  ALLOC
 33 .bss.callbacks 0000000a  00800710  00800710  0000404e  2**0
                  ALLOC
 34 .text.start_and_write_data 0000004c  00003070  00003070  00003124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.read_and_stop 0000005a  00002d32  00002d32  00002de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.TWI_API_write_data 00000006  00003f6c  00003f6c  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TWI_API_write_data_stop 00000010  00003d7c  00003d7c  00003e30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_API_read_data_ack_end_nack_stop 00000024  00003a4e  00003a4e  00003b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_API_repeat_read_data_stop 00000022  00003aba  00003aba  00003b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_HAL_init 00000012  00003d46  00003d46  00003dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_HAL_start 00000048  00003316  00003316  000033ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_HAL_repeated_start 00000042  000034b6  000034b6  0000356a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_HAL_write_byte 00000020  00003b20  00003b20  00003bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TWI_HAL_read_byte_ack 00000014  00003d1e  00003d1e  00003dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_HAL_read_byte_nack 00000014  00003d32  00003d32  00003de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_HAL_stop 00000010  00003d8c  00003d8c  00003e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.copy_buffer 0000002e  000038d2  000038d2  00003986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.uart0_hal_init 0000003c  0000353a  0000353a  000035ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.uart0_hal_send_string 0000006a  00002b98  00002b98  00002c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.uart0_hal_message_ready 0000000e  00003de4  00003de4  00003e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.uart0_hal_clear_rx_buffer 0000000a  00003f1e  00003f1e  00003fd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.uart0_hal_read_message_as_str 00000028  00003988  00003988  00003a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.__vector_22 0000004a  00003238  00003238  000032ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__vector_20 00000074  00002a44  00002a44  00002af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .bss.rx_buffer_has_message 00000001  0080072b  0080072b  0000404e  2**0
                  ALLOC
 56 .bss.rx_buffer_data_len 00000001  0080072c  0080072c  0000404e  2**0
                  ALLOC
 57 .bss.tx_buffer_cursor 00000001  0080072d  0080072d  0000404e  2**0
                  ALLOC
 58 .bss.tx_buffer_data_len 00000001  0080072e  0080072e  0000404e  2**0
                  ALLOC
 59 .text.copy_buffer 0000002e  00003900  00003900  000039b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.uart1_hal_init 0000003c  00003576  00003576  0000362a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart1_hal_send_string 0000008a  00002760  00002760  00002814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart1_hal_message_ready 0000000e  00003df2  00003df2  00003ea6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart1_hal_rx_full 0000000e  00003e00  00003e00  00003eb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart1_hal_clear_rx_buffer 0000000a  00003f28  00003f28  00003fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart1_hal_read_message_as_str 00000028  000039b0  000039b0  00003a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__vector_30 0000004a  00003282  00003282  00003336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__vector_28 00000070  00002ab8  00002ab8  00002b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .bss.rx_buffer_has_message 00000001  0080072f  0080072f  0000404e  2**0
                  ALLOC
 69 .bss.rx_buffer_data_len 00000001  00800730  00800730  0000404e  2**0
                  ALLOC
 70 .bss.rx_buffer 00000096  00800616  00800616  0000404e  2**0
                  ALLOC
 71 .bss.tx_buffer_cursor 00000001  00800731  00800731  0000404e  2**0
                  ALLOC
 72 .bss.tx_buffer_data_len 00000001  00800732  00800732  0000404e  2**0
                  ALLOC
 73 .bss.tx_buffer 0000012c  008004ea  008004ea  0000404e  2**0
                  ALLOC
 74 .text.main    00000018  00003c46  00003c46  00003cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.calc_ppm_methane 00000096  000025a2  000025a2  00002656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.ADC_get_value 00000056  00002de4  00002de4  00002e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .data.PPM_factor 00000004  0080071a  00003f8e  00004042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 78 .data.RRL     00000004  0080071e  00003f92  00004046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 79 .data.Vc      00000004  00800722  00003f96  0000404a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 80 .text.EM_has_deveui 00000016  00003c76  00003c76  00003d2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.EM_has_appeui 00000016  00003c8c  00003c8c  00003d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.EM_has_appkey 00000016  00003ca2  00003ca2  00003d56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.EM_set_deveui 0000003a  000035b2  000035b2  00003666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.EM_get_deveui 00000030  00003842  00003842  000038f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_set_appeui 0000003a  000035ec  000035ec  000036a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_get_appeui 00000030  00003872  00003872  00003926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_set_appkey 0000003a  00003626  00003626  000036da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_get_appkey 00000030  000038a2  000038a2  00003956  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_set_ppmfactor 0000000e  00003e0e  00003e0e  00003ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_get_ppmfactor 0000001e  00003b60  00003b60  00003c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_set_RRL 0000000e  00003e1c  00003e1c  00003ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_get_RRL 0000001e  00003b7e  00003b7e  00003c32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_set_Vcc 0000000e  00003e2a  00003e2a  00003ede  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_get_Vcc 0000001e  00003b9c  00003b9c  00003c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_collections 0000000e  00003e38  00003e38  00003eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_collections 00000010  00003d9c  00003d9c  00003e50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_heat_up_time 0000000c  00003ea8  00003ea8  00003f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_heat_up_time 0000000c  00003eb4  00003eb4  00003f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_air_pump_time 0000000c  00003ec0  00003ec0  00003f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_air_pump_time 0000000c  00003ecc  00003ecc  00003f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_sp_interval 0000000c  00003ed8  00003ed8  00003f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_sp_interval 0000000c  00003ee4  00003ee4  00003f98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.LM_reset_module 00000006  00003f72  00003f72  00004026  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.LM_forward_msg 00000006  00003f78  00003f78  0000402c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .progmemx.data 00000073  0000049b  0000049b  0000054f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
106 .text.attach_ending 0000001c  00003bf6  00003bf6  00003caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.util_strbeginswith 0000004a  000032cc  000032cc  00003380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .progmemx.data 00000007  0000057c  0000057c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
109 .text.util_reset_module 00000046  0000335e  0000335e  00003412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.util_lora_forward_msg 00000038  00003660  00003660  00003714  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.datetime_to_BCD 00000100  00001ab8  00001ab8  00001b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.RTC_get_current_time 00000140  00001602  00001602  000016b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.RTC_set_current_time 00000068  00002c6c  00002c6c  00002d20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .progmemx.data.CMD_READ_TIME_POINTER 00000001  0000058f  0000058f  00000643  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .text.bytes_2_uint 0000001a  00003c12  00003c12  00003cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.init_measurement 00000038  00003698  00003698  0000374c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.validate_data 00000032  000037de  000037de  00003892  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.read_value 000000a2  000023d0  000023d0  00002484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.SCD30_sensor_on 00000022  00003adc  00003adc  00003b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.SCD30_get_reading 0000001a  00003c2c  00003c2c  00003ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .progmemx.data.READ_DATA_CMD 00000002  0000058d  0000058d  00000641  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
122 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000583  00000583  00000637  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
123 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000588  00000588  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
124 .text.parse_cmd 00000028  000039d8  000039d8  00003a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.validate_cmd 00000056  00002e3a  00002e3a  00002eee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .progmemx.data 000000a4  0000037c  0000037c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
127 .text.CONF_enter 0000012e  00001742  00001742  000017f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .progmemx.data 00000066  0000050e  0000050e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
129 .text.CON_RN2483_parse 00000026  00003a28  00003a28  00003adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.CON_RN2483 000000e8  00001cb6  00001cb6  00001d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.CONNECT 00000054  00002e90  00002e90  00002f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .progmemx.data 00000188  000001f4  000001f4  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.read_cols 000000bc  00002100  00002100  000021b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.read_time 00000092  000026ce  000026ce  00002782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.write_deveui 00000078  00002864  00002864  00002918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.write_appeui 00000078  000028dc  000028dc  00002990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.write_appkey 00000078  00002954  00002954  00002a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.write_PPM_factor 0000004c  000030bc  000030bc  00003170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.write_RRL 0000004c  00003108  00003108  000031bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.write_VCC 0000004c  00003154  00003154  00003208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.get_time_par 00000034  000037aa  000037aa  0000385e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.write_cols 0000012e  00001870  00001870  00001924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.write_heat_up 0000004c  000031a0  000031a0  00003254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.write_air_pump 00000050  00002f36  00002f36  00002fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.write_sp_interval 0000004c  000031ec  000031ec  000032a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.write_reset 000000e2  00001d9e  00001d9e  00001e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.write_time 000000fe  00001bb8  00001bb8  00001c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.handle_read 000002a2  00000fb0  00000fb0  00001064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.handle_write 00000200  00001252  00001252  00001306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .bss.arg      00000050  008006ac  008006ac  0000404e  2**0
                  ALLOC
151 .progmemx.data 0000007b  00000420  00000420  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
152 .text.handle_methane 0000011a  0000199e  0000199e  00001a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.handle_co2 000000a4  0000232c  0000232c  000023e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.handle_sample 00000098  0000250a  0000250a  000025be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.init_methane_SCD30 00000028  00003a00  00003a00  00003ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .bss.par      00000014  008006fc  008006fc  0000404e  2**0
                  ALLOC
157 .text.count_parameters 00000052  00002ee4  00002ee4  00002f98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.par_index 00000070  00002b28  00002b28  00002bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.get_parameter 00000096  00002638  00002638  000026ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.calc_crc8 00000036  00003708  00003708  000037bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.get_decimal 000000b4  00002278  00002278  0000232c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.str2flaot 0000004e  00003022  00003022  000030d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.is_float 00000058  00002d8c  00002d8c  00002e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.avrlibc.fplib 0000000e  00003e46  00003e46  00003efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.avrlibc.fplib 000000ce  00002032  00002032  000020e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.avrlibc.fplib 00000008  00003f54  00003f54  00004008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.avrlibc.fplib 000000de  00001e80  00001e80  00001f34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.avrlibc.fplib 0000005e  00002cd4  00002cd4  00002d88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.avrlibc.fplib 0000007a  000027ea  000027ea  0000289e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.avrlibc.fplib 0000000c  00003ef0  00003ef0  00003fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.avrlibc.fplib 00000006  00003f7e  00003f7e  00004032  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.avrlibc.fplib 0000000e  00003e54  00003e54  00003f08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.avrlibc.fplib 0000000e  00003e62  00003e62  00003f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.avrlibc.fplib 00000022  00003afe  00003afe  00003bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.avrlibc.fplib 00000044  000033ea  000033ea  0000349e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc.fplib 0000000e  00003e70  00003e70  00003f24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc.fplib 00000008  00003f5c  00003f5c  00004010  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc.fplib 000000d4  00001f5e  00001f5e  00002012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .progmemx.data 00000008  00000574  00000574  00000628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
180 .text.avrlibc 00000744  00000590  00000590  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.libgcc  0000000c  00003efc  00003efc  00003fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.libgcc.mul 0000001e  00003bba  00003bba  00003c6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.libgcc.prologue 00000038  000036d0  000036d0  00003784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.libgcc.prologue 00000036  0000373e  0000373e  000037f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.avrlibc 00000008  00003f64  00003f64  00004018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.avrlibc 0000000e  00003e7e  00003e7e  00003f32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.avrlibc 000002dc  00000cd4  00000cd4  00000d88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.avrlibc 000001b0  00001452  00001452  00001506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc 00000012  00003d58  00003d58  00003e0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc 00000032  00003810  00003810  000038c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.avrlibc 0000002e  0000392e  0000392e  000039e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc 00000042  000034f8  000034f8  000035ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc 0000006a  00002c02  00002c02  00002cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc 0000002c  0000395c  0000395c  00003a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc 0000001e  00003bd8  00003bd8  00003c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc 00000036  00003774  00003774  00003828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 00000078  000029cc  000029cc  00002a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 00000046  000033a4  000033a4  00003458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc 000000bc  000021bc  000021bc  00002270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 00000006  00003f84  00003f84  00004038  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 00000024  00003a72  00003a72  00003b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 00000012  00003d6a  00003d6a  00003e1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 0000000e  00003e8c  00003e8c  00003f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc 0000000e  00003e9a  00003e9a  00003f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc 00000044  0000342e  0000342e  000034e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc 00000024  00003a96  00003a96  00003b4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc 00000018  00003c5e  00003c5e  00003d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc 0000000c  00003f08  00003f08  00003fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 00000020  00003b40  00003b40  00003bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.div 00000044  00003472  00003472  00003526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.mul 00000016  00003cb8  00003cb8  00003d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  0000000a  00003f32  00003f32  00003fe6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
   8:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
   c:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__vector_3>
  10:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  14:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  18:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  1c:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  20:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  24:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_9>
  28:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  2c:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  30:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  34:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__vector_13>
  38:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  3c:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  40:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__vector_16>
  44:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  48:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  4c:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  50:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__vector_20>
  54:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  58:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__vector_22>
  5c:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  60:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  64:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  68:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  6c:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  70:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__vector_28>
  74:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__bad_interrupt>
  78:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__vector_30>
  7c:	bc 0b       	sbc	r27, r28
  7e:	d1 0b       	sbc	r29, r17
  80:	2d 0c       	add	r2, r13
  82:	da 0b       	sbc	r29, r26
  84:	36 0c       	add	r3, r6
  86:	1f 0c       	add	r1, r15
  88:	26 0c       	add	r2, r6
  8a:	ea 0b       	sbc	r30, r26
  8c:	f6 0b       	sbc	r31, r22
  8e:	02 0c       	add	r0, r2
  90:	0c 0c       	add	r0, r12
  92:	18 0c       	add	r1, r8

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	07 1a       	sub	r0, r23
  98:	80 07       	cpc	r24, r16
  9a:	1a 07       	cpc	r17, r26
  9c:	26 00       	.word	0x0026	; ????
  9e:	3f 8e       	std	Y+31, r3	; 0x1f
  a0:	07 26       	eor	r0, r23
  a2:	07 33       	cpi	r16, 0x37	; 55
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x15c>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

00003f8a <__bad_interrupt>:
    3f8a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003dac <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3dac:	81 b1       	in	r24, 0x01	; 1
    3dae:	88 60       	ori	r24, 0x08	; 8
    3db0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3db2:	82 b1       	in	r24, 0x02	; 2
    3db4:	87 7f       	andi	r24, 0xF7	; 247
    3db6:	82 b9       	out	0x02, r24	; 2
    3db8:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003cce <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3cce:	88 23       	and	r24, r24
    3cd0:	21 f0       	breq	.+8      	; 0x3cda <PM_HAL_adc_power+0xc>
    3cd2:	82 b1       	in	r24, 0x02	; 2
    3cd4:	88 60       	ori	r24, 0x08	; 8
    3cd6:	82 b9       	out	0x02, r24	; 2
    3cd8:	08 95       	ret
    3cda:	82 b1       	in	r24, 0x02	; 2
    3cdc:	87 7f       	andi	r24, 0xF7	; 247
    3cde:	82 b9       	out	0x02, r24	; 2
    3ce0:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003dba <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3dba:	81 b1       	in	r24, 0x01	; 1
    3dbc:	80 62       	ori	r24, 0x20	; 32
    3dbe:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3dc0:	82 b1       	in	r24, 0x02	; 2
    3dc2:	8f 7d       	andi	r24, 0xDF	; 223
    3dc4:	82 b9       	out	0x02, r24	; 2
    3dc6:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003ce2 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3ce2:	88 23       	and	r24, r24
    3ce4:	21 f0       	breq	.+8      	; 0x3cee <PM_HAL_meth_power+0xc>
    3ce6:	82 b1       	in	r24, 0x02	; 2
    3ce8:	80 62       	ori	r24, 0x20	; 32
    3cea:	82 b9       	out	0x02, r24	; 2
    3cec:	08 95       	ret
    3cee:	82 b1       	in	r24, 0x02	; 2
    3cf0:	8f 7d       	andi	r24, 0xDF	; 223
    3cf2:	82 b9       	out	0x02, r24	; 2
    3cf4:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003dc8 <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3dc8:	81 b1       	in	r24, 0x01	; 1
    3dca:	80 61       	ori	r24, 0x10	; 16
    3dcc:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3dce:	82 b1       	in	r24, 0x02	; 2
    3dd0:	8f 7e       	andi	r24, 0xEF	; 239
    3dd2:	82 b9       	out	0x02, r24	; 2
    3dd4:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003cf6 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3cf6:	88 23       	and	r24, r24
    3cf8:	21 f0       	breq	.+8      	; 0x3d02 <PM_HAL_SCD30_power+0xc>
    3cfa:	82 b1       	in	r24, 0x02	; 2
    3cfc:	80 61       	ori	r24, 0x10	; 16
    3cfe:	82 b9       	out	0x02, r24	; 2
    3d00:	08 95       	ret
    3d02:	82 b1       	in	r24, 0x02	; 2
    3d04:	8f 7e       	andi	r24, 0xEF	; 239
    3d06:	82 b9       	out	0x02, r24	; 2
    3d08:	08 95       	ret

Disassembly of section .text.__vector_3:

00003d0a <__vector_3>:
}

ISR(INT2_vect){
    3d0a:	1f 92       	push	r1
    3d0c:	0f 92       	push	r0
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	0f 92       	push	r0
    3d12:	11 24       	eor	r1, r1
	
}
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	0f 90       	pop	r0
    3d1a:	1f 90       	pop	r1
    3d1c:	18 95       	reti

Disassembly of section .text.rn2483_init:

00003f3c <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    3f3c:	84 b1       	in	r24, 0x04	; 4
    3f3e:	80 61       	ori	r24, 0x10	; 16
    3f40:	84 b9       	out	0x04, r24	; 4
    3f42:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00003f44 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3f44:	85 b1       	in	r24, 0x05	; 5
    3f46:	8f 7e       	andi	r24, 0xEF	; 239
    3f48:	85 b9       	out	0x05, r24	; 5
    3f4a:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00003f4c <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    3f4c:	85 b1       	in	r24, 0x05	; 5
    3f4e:	80 61       	ori	r24, 0x10	; 16
    3f50:	85 b9       	out	0x05, r24	; 5
    3f52:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003dd6 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3dd6:	87 b1       	in	r24, 0x07	; 7
    3dd8:	8f 7b       	andi	r24, 0xBF	; 191
    3dda:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3ddc:	88 b1       	in	r24, 0x08	; 8
    3dde:	8f 7b       	andi	r24, 0xBF	; 191
    3de0:	88 b9       	out	0x08, r24	; 8
    3de2:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00003f14 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    3f14:	86 b1       	in	r24, 0x06	; 6
    3f16:	86 fb       	bst	r24, 6
    3f18:	88 27       	eor	r24, r24
    3f1a:	80 f9       	bld	r24, 0
    3f1c:	08 95       	ret

Disassembly of section .text.__vector_16:

00002f86 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    2f86:	1f 92       	push	r1
    2f88:	0f 92       	push	r0
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	0f 92       	push	r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	2f 93       	push	r18
    2f92:	3f 93       	push	r19
    2f94:	4f 93       	push	r20
    2f96:	5f 93       	push	r21
    2f98:	6f 93       	push	r22
    2f9a:	7f 93       	push	r23
    2f9c:	8f 93       	push	r24
    2f9e:	9f 93       	push	r25
    2fa0:	af 93       	push	r26
    2fa2:	bf 93       	push	r27
    2fa4:	ef 93       	push	r30
    2fa6:	ff 93       	push	r31
	_cb();
    2fa8:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <_cb>
    2fac:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <_cb+0x1>
    2fb0:	09 95       	icall
}
    2fb2:	ff 91       	pop	r31
    2fb4:	ef 91       	pop	r30
    2fb6:	bf 91       	pop	r27
    2fb8:	af 91       	pop	r26
    2fba:	9f 91       	pop	r25
    2fbc:	8f 91       	pop	r24
    2fbe:	7f 91       	pop	r23
    2fc0:	6f 91       	pop	r22
    2fc2:	5f 91       	pop	r21
    2fc4:	4f 91       	pop	r20
    2fc6:	3f 91       	pop	r19
    2fc8:	2f 91       	pop	r18
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	0f 90       	pop	r0
    2fd0:	1f 90       	pop	r1
    2fd2:	18 95       	reti

Disassembly of section .text.__vector_13:

00002fd4 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    2fd4:	1f 92       	push	r1
    2fd6:	0f 92       	push	r0
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	0f 92       	push	r0
    2fdc:	11 24       	eor	r1, r1
    2fde:	2f 93       	push	r18
    2fe0:	3f 93       	push	r19
    2fe2:	4f 93       	push	r20
    2fe4:	5f 93       	push	r21
    2fe6:	6f 93       	push	r22
    2fe8:	7f 93       	push	r23
    2fea:	8f 93       	push	r24
    2fec:	9f 93       	push	r25
    2fee:	af 93       	push	r26
    2ff0:	bf 93       	push	r27
    2ff2:	ef 93       	push	r30
    2ff4:	ff 93       	push	r31
	_cb();
    2ff6:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <_cb>
    2ffa:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <_cb+0x1>
    2ffe:	09 95       	icall
    3000:	ff 91       	pop	r31
    3002:	ef 91       	pop	r30
    3004:	bf 91       	pop	r27
    3006:	af 91       	pop	r26
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	7f 91       	pop	r23
    300e:	6f 91       	pop	r22
    3010:	5f 91       	pop	r21
    3012:	4f 91       	pop	r20
    3014:	3f 91       	pop	r19
    3016:	2f 91       	pop	r18
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	0f 90       	pop	r0
    301e:	1f 90       	pop	r1
    3020:	18 95       	reti

Disassembly of section .text.__vector_9:

00002472 <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	2f 93       	push	r18
    247e:	3f 93       	push	r19
    2480:	4f 93       	push	r20
    2482:	5f 93       	push	r21
    2484:	6f 93       	push	r22
    2486:	7f 93       	push	r23
    2488:	8f 93       	push	r24
    248a:	9f 93       	push	r25
    248c:	af 93       	push	r26
    248e:	bf 93       	push	r27
    2490:	cf 93       	push	r28
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
	cnt++;
    2496:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <cnt>
    249a:	9f 5f       	subi	r25, 0xFF	; 255
    249c:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <cnt>
	
	if(cnt % 31==0){
    24a0:	89 e0       	ldi	r24, 0x09	; 9
    24a2:	98 9f       	mul	r25, r24
    24a4:	21 2d       	mov	r18, r1
    24a6:	11 24       	eor	r1, r1
    24a8:	89 2f       	mov	r24, r25
    24aa:	82 1b       	sub	r24, r18
    24ac:	86 95       	lsr	r24
    24ae:	82 0f       	add	r24, r18
    24b0:	82 95       	swap	r24
    24b2:	8f 70       	andi	r24, 0x0F	; 15
    24b4:	2f e1       	ldi	r18, 0x1F	; 31
    24b6:	82 9f       	mul	r24, r18
    24b8:	90 19       	sub	r25, r0
    24ba:	11 24       	eor	r1, r1
    24bc:	91 11       	cpse	r25, r1
    24be:	13 c0       	rjmp	.+38     	; 0x24e6 <__vector_9+0x74>
		cnt=0;
    24c0:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    24c4:	c0 e0       	ldi	r28, 0x00	; 0
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <__vector_9+0x70>
		{
			if(callbacks[i]!=NULL){
    24c8:	ec 2f       	mov	r30, r28
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	e0 5f       	subi	r30, 0xF0	; 240
    24d2:	f8 4f       	sbci	r31, 0xF8	; 248
    24d4:	01 90       	ld	r0, Z+
    24d6:	f0 81       	ld	r31, Z
    24d8:	e0 2d       	mov	r30, r0
    24da:	30 97       	sbiw	r30, 0x00	; 0
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <__vector_9+0x6e>
				callbacks[i]();
    24de:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt % 31==0){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    24e0:	cf 5f       	subi	r28, 0xFF	; 255
    24e2:	c5 30       	cpi	r28, 0x05	; 5
    24e4:	88 f3       	brcs	.-30     	; 0x24c8 <__vector_9+0x56>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    24e6:	ff 91       	pop	r31
    24e8:	ef 91       	pop	r30
    24ea:	cf 91       	pop	r28
    24ec:	bf 91       	pop	r27
    24ee:	af 91       	pop	r26
    24f0:	9f 91       	pop	r25
    24f2:	8f 91       	pop	r24
    24f4:	7f 91       	pop	r23
    24f6:	6f 91       	pop	r22
    24f8:	5f 91       	pop	r21
    24fa:	4f 91       	pop	r20
    24fc:	3f 91       	pop	r19
    24fe:	2f 91       	pop	r18
    2500:	0f 90       	pop	r0
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	0f 90       	pop	r0
    2506:	1f 90       	pop	r1
    2508:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00003070 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3070:	cf 92       	push	r12
    3072:	df 92       	push	r13
    3074:	ef 92       	push	r14
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	6a 01       	movw	r12, r20
    307c:	e6 2e       	mov	r14, r22
    307e:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    3080:	60 e0       	ldi	r22, 0x00	; 0
    3082:	0e 94 8b 19 	call	0x3316	; 0x3316 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3086:	81 11       	cpse	r24, r1
    3088:	13 c0       	rjmp	.+38     	; 0x30b0 <start_and_write_data+0x40>
    308a:	c0 e0       	ldi	r28, 0x00	; 0
    308c:	0e c0       	rjmp	.+28     	; 0x30aa <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    308e:	ae 2d       	mov	r26, r14
    3090:	c6 01       	movw	r24, r12
    3092:	8c 0f       	add	r24, r28
    3094:	91 1d       	adc	r25, r1
    3096:	a1 1d       	adc	r26, r1
    3098:	fc 01       	movw	r30, r24
    309a:	84 91       	lpm	r24, Z
    309c:	a7 fd       	sbrc	r26, 7
    309e:	80 81       	ld	r24, Z
    30a0:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    30a4:	81 11       	cpse	r24, r1
    30a6:	04 c0       	rjmp	.+8      	; 0x30b0 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    30a8:	cf 5f       	subi	r28, 0xFF	; 255
    30aa:	cd 17       	cp	r28, r29
    30ac:	80 f3       	brcs	.-32     	; 0x308e <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    30ae:	80 e0       	ldi	r24, 0x00	; 0
}
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002d32 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	8c 01       	movw	r16, r24
    2d40:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2d42:	c0 e0       	ldi	r28, 0x00	; 0
    2d44:	08 c0       	rjmp	.+16     	; 0x2d56 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2d46:	78 01       	movw	r14, r16
    2d48:	ec 0e       	add	r14, r28
    2d4a:	f1 1c       	adc	r15, r1
    2d4c:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TWI_HAL_read_byte_ack>
    2d50:	f7 01       	movw	r30, r14
    2d52:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2d54:	cf 5f       	subi	r28, 0xFF	; 255
    2d56:	2c 2f       	mov	r18, r28
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	8d 2f       	mov	r24, r29
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	28 17       	cp	r18, r24
    2d62:	39 07       	cpc	r19, r25
    2d64:	84 f3       	brlt	.-32     	; 0x2d46 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2d66:	8d 2f       	mov	r24, r29
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	e8 01       	movw	r28, r16
    2d6e:	c8 0f       	add	r28, r24
    2d70:	d9 1f       	adc	r29, r25
    2d72:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <TWI_HAL_read_byte_nack>
    2d76:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2d78:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003f6c <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    3f6c:	0e 94 38 18 	call	0x3070	; 0x3070 <start_and_write_data>
}
    3f70:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003d7c <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3d7c:	0e 94 38 18 	call	0x3070	; 0x3070 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    3d80:	81 11       	cpse	r24, r1
    3d82:	03 c0       	rjmp	.+6      	; 0x3d8a <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    3d84:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    3d88:	80 e0       	ldi	r24, 0x00	; 0
}
    3d8a:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003a4e <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3a4e:	1f 93       	push	r17
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	eb 01       	movw	r28, r22
    3a56:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3a58:	61 e0       	ldi	r22, 0x01	; 1
    3a5a:	0e 94 8b 19 	call	0x3316	; 0x3316 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3a5e:	81 11       	cpse	r24, r1
    3a60:	04 c0       	rjmp	.+8      	; 0x3a6a <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    3a62:	61 2f       	mov	r22, r17
    3a64:	ce 01       	movw	r24, r28
    3a66:	0e 94 99 16 	call	0x2d32	; 0x2d32 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003aba <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	eb 01       	movw	r28, r22
    3ac2:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3ac4:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3ac8:	81 11       	cpse	r24, r1
    3aca:	04 c0       	rjmp	.+8      	; 0x3ad4 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    3acc:	61 2f       	mov	r22, r17
    3ace:	ce 01       	movw	r24, r28
    3ad0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <read_and_stop>
	
}
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003d46 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3d46:	80 e2       	ldi	r24, 0x20	; 32
    3d48:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    3d4c:	e9 eb       	ldi	r30, 0xB9	; 185
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	8c 7f       	andi	r24, 0xFC	; 252
    3d54:	80 83       	st	Z, r24
    3d56:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00003316 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    331e:	84 ea       	ldi	r24, 0xA4	; 164
    3320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3324:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3328:	99 23       	and	r25, r25
    332a:	e4 f7       	brge	.-8      	; 0x3324 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    332c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3330:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    3332:	88 30       	cpi	r24, 0x08	; 8
    3334:	99 f4       	brne	.+38     	; 0x335c <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    3336:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    333a:	84 e8       	ldi	r24, 0x84	; 132
    333c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3340:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3344:	88 23       	and	r24, r24
    3346:	e4 f7       	brge	.-8      	; 0x3340 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3348:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    334c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    334e:	88 31       	cpi	r24, 0x18	; 24
    3350:	21 f0       	breq	.+8      	; 0x335a <TWI_HAL_start+0x44>
    3352:	80 34       	cpi	r24, 0x40	; 64
    3354:	19 f4       	brne	.+6      	; 0x335c <TWI_HAL_start+0x46>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	08 95       	ret
    335a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    335c:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

000034b6 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	88 0f       	add	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	28 2f       	mov	r18, r24
    34be:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    34c0:	84 ea       	ldi	r24, 0xA4	; 164
    34c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    34c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    34ca:	99 23       	and	r25, r25
    34cc:	e4 f7       	brge	.-8      	; 0x34c6 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    34ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    34d2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    34d4:	80 31       	cpi	r24, 0x10	; 16
    34d6:	79 f4       	brne	.+30     	; 0x34f6 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    34d8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    34dc:	84 e8       	ldi	r24, 0x84	; 132
    34de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    34e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    34e6:	88 23       	and	r24, r24
    34e8:	e4 f7       	brge	.-8      	; 0x34e2 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    34ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    34ee:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    34f0:	80 34       	cpi	r24, 0x40	; 64
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <TWI_HAL_repeated_start+0x40>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    34f6:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003b20 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3b20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3b24:	84 e8       	ldi	r24, 0x84	; 132
    3b26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3b2a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3b2e:	88 23       	and	r24, r24
    3b30:	e4 f7       	brge	.-8      	; 0x3b2a <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3b32:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3b36:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3b38:	88 32       	cpi	r24, 0x28	; 40
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <TWI_HAL_write_byte+0x1e>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3b3e:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003d1e <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3d1e:	84 ec       	ldi	r24, 0xC4	; 196
    3d20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3d24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3d28:	88 23       	and	r24, r24
    3d2a:	e4 f7       	brge	.-8      	; 0x3d24 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3d2c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3d30:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003d32 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3d32:	84 e8       	ldi	r24, 0x84	; 132
    3d34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3d38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3d3c:	88 23       	and	r24, r24
    3d3e:	e4 f7       	brge	.-8      	; 0x3d38 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3d40:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3d44:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003d8c <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3d8c:	84 e9       	ldi	r24, 0x94	; 148
    3d8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3d92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3d96:	84 fd       	sbrc	r24, 4
    3d98:	fc cf       	rjmp	.-8      	; 0x3d92 <TWI_HAL_stop+0x6>
}
    3d9a:	08 95       	ret

Disassembly of section .text.copy_buffer:

000038d2 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    38d2:	bc 01       	movw	r22, r24
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	09 c0       	rjmp	.+18     	; 0x38ea <copy_buffer+0x18>
    38d8:	fb 01       	movw	r30, r22
    38da:	e9 0f       	add	r30, r25
    38dc:	f1 1d       	adc	r31, r1
    38de:	da 01       	movw	r26, r20
    38e0:	a0 50       	subi	r26, 0x00	; 0
    38e2:	bf 4f       	sbci	r27, 0xFF	; 255
    38e4:	2c 91       	ld	r18, X
    38e6:	20 83       	st	Z, r18
    38e8:	9f 5f       	subi	r25, 0xFF	; 255
    38ea:	49 2f       	mov	r20, r25
    38ec:	50 e0       	ldi	r21, 0x00	; 0
    38ee:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <rx_buffer_data_len>
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	22 50       	subi	r18, 0x02	; 2
    38f6:	31 09       	sbc	r19, r1
    38f8:	42 17       	cp	r20, r18
    38fa:	53 07       	cpc	r21, r19
    38fc:	6c f3       	brlt	.-38     	; 0x38d8 <copy_buffer+0x6>
    38fe:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000353a <uart0_hal_init>:
    353a:	e1 ec       	ldi	r30, 0xC1	; 193
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	80 61       	ori	r24, 0x10	; 16
    3542:	80 83       	st	Z, r24
    3544:	80 81       	ld	r24, Z
    3546:	88 60       	ori	r24, 0x08	; 8
    3548:	80 83       	st	Z, r24
    354a:	80 81       	ld	r24, Z
    354c:	80 68       	ori	r24, 0x80	; 128
    354e:	80 83       	st	Z, r24
    3550:	80 81       	ld	r24, Z
    3552:	80 64       	ori	r24, 0x40	; 64
    3554:	80 83       	st	Z, r24
    3556:	e0 ec       	ldi	r30, 0xC0	; 192
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	82 60       	ori	r24, 0x02	; 2
    355e:	80 83       	st	Z, r24
    3560:	86 e0       	ldi	r24, 0x06	; 6
    3562:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3566:	80 e1       	ldi	r24, 0x10	; 16
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    356e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3572:	78 94       	sei
    3574:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002b98 <uart0_hal_send_string>:
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	6b 01       	movw	r12, r22
    2ba6:	e8 2e       	mov	r14, r24
    2ba8:	c0 e0       	ldi	r28, 0x00	; 0
    2baa:	12 c0       	rjmp	.+36     	; 0x2bd0 <uart0_hal_send_string+0x38>
    2bac:	8c 2f       	mov	r24, r28
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	4e 2d       	mov	r20, r14
    2bb2:	96 01       	movw	r18, r12
    2bb4:	20 0f       	add	r18, r16
    2bb6:	31 1f       	adc	r19, r17
    2bb8:	41 1d       	adc	r20, r1
    2bba:	17 fd       	sbrc	r17, 7
    2bbc:	4a 95       	dec	r20
    2bbe:	f9 01       	movw	r30, r18
    2bc0:	24 91       	lpm	r18, Z
    2bc2:	47 fd       	sbrc	r20, 7
    2bc4:	20 81       	ld	r18, Z
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	ec 59       	subi	r30, 0x9C	; 156
    2bca:	fe 4f       	sbci	r31, 0xFE	; 254
    2bcc:	20 83       	st	Z, r18
    2bce:	cf 5f       	subi	r28, 0xFF	; 255
    2bd0:	0c 2f       	mov	r16, r28
    2bd2:	10 e0       	ldi	r17, 0x00	; 0
    2bd4:	8e 2d       	mov	r24, r14
    2bd6:	b6 01       	movw	r22, r12
    2bd8:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2bdc:	08 17       	cp	r16, r24
    2bde:	19 07       	cpc	r17, r25
    2be0:	28 f3       	brcs	.-54     	; 0x2bac <uart0_hal_send_string+0x14>
    2be2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <tx_buffer_data_len>
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <tx_buffer_cursor>
    2bec:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2bf0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	ef 90       	pop	r14
    2bfc:	df 90       	pop	r13
    2bfe:	cf 90       	pop	r12
    2c00:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003de4 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3de4:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <rx_buffer_has_message>
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	91 11       	cpse	r25, r1
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <uart0_hal_message_ready+0xc>
    3dee:	80 e0       	ldi	r24, 0x00	; 0
}
    3df0:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00003f1e <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    3f1e:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    3f22:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <rx_buffer_data_len>
    3f26:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003988 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(char msg[]){
    3988:	0f 93       	push	r16
    398a:	1f 93       	push	r17
    398c:	cf 93       	push	r28
    398e:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3990:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3994:	c0 91 2c 07 	lds	r28, 0x072C	; 0x80072c <rx_buffer_data_len>
    3998:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    399a:	f8 01       	movw	r30, r16
    399c:	ec 0f       	add	r30, r28
    399e:	f1 1d       	adc	r31, r1
    39a0:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    39a2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <uart0_hal_clear_rx_buffer>
	return len;
}
    39a6:	8c 2f       	mov	r24, r28
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	08 95       	ret

Disassembly of section .text.__vector_22:

00003238 <__vector_22>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3238:	1f 92       	push	r1
    323a:	0f 92       	push	r0
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	0f 92       	push	r0
    3240:	11 24       	eor	r1, r1
    3242:	8f 93       	push	r24
    3244:	ef 93       	push	r30
    3246:	ff 93       	push	r31
    3248:	e0 91 2d 07 	lds	r30, 0x072D	; 0x80072d <tx_buffer_cursor>
    324c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <tx_buffer_data_len>
    3250:	e8 17       	cp	r30, r24
    3252:	58 f4       	brcc	.+22     	; 0x326a <__vector_22+0x32>
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	8e 0f       	add	r24, r30
    3258:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <tx_buffer_cursor>
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	ec 59       	subi	r30, 0x9C	; 156
    3260:	fe 4f       	sbci	r31, 0xFE	; 254
    3262:	80 81       	ld	r24, Z
    3264:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3268:	04 c0       	rjmp	.+8      	; 0x3272 <__vector_22+0x3a>
    326a:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <tx_buffer_cursor>
    326e:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <tx_buffer_data_len>
    3272:	ff 91       	pop	r31
    3274:	ef 91       	pop	r30
    3276:	8f 91       	pop	r24
    3278:	0f 90       	pop	r0
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	0f 90       	pop	r0
    327e:	1f 90       	pop	r1
    3280:	18 95       	reti

Disassembly of section .text.__vector_20:

00002a44 <__vector_20>:
    2a44:	1f 92       	push	r1
    2a46:	0f 92       	push	r0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	2f 93       	push	r18
    2a50:	8f 93       	push	r24
    2a52:	9f 93       	push	r25
    2a54:	ef 93       	push	r30
    2a56:	ff 93       	push	r31
    2a58:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <rx_buffer_has_message>
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	0e c0       	rjmp	.+28     	; 0x2a7c <__vector_20+0x38>
    2a60:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <rx_buffer_data_len>
    2a64:	e4 36       	cpi	r30, 0x64	; 100
    2a66:	50 f4       	brcc	.+20     	; 0x2a7c <__vector_20+0x38>
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	8e 0f       	add	r24, r30
    2a6c:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <rx_buffer_data_len>
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a76:	e0 50       	subi	r30, 0x00	; 0
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 83       	st	Z, r24
    2a7c:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <rx_buffer_data_len>
    2a80:	83 30       	cpi	r24, 0x03	; 3
    2a82:	80 f0       	brcs	.+32     	; 0x2aa4 <__vector_20+0x60>
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	fc 01       	movw	r30, r24
    2a88:	e1 50       	subi	r30, 0x01	; 1
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	20 81       	ld	r18, Z
    2a8e:	2a 30       	cpi	r18, 0x0A	; 10
    2a90:	49 f4       	brne	.+18     	; 0x2aa4 <__vector_20+0x60>
    2a92:	fc 01       	movw	r30, r24
    2a94:	e2 50       	subi	r30, 0x02	; 2
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	8d 30       	cpi	r24, 0x0D	; 13
    2a9c:	19 f4       	brne	.+6      	; 0x2aa4 <__vector_20+0x60>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <rx_buffer_has_message>
    2aa4:	ff 91       	pop	r31
    2aa6:	ef 91       	pop	r30
    2aa8:	9f 91       	pop	r25
    2aaa:	8f 91       	pop	r24
    2aac:	2f 91       	pop	r18
    2aae:	0f 90       	pop	r0
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	0f 90       	pop	r0
    2ab4:	1f 90       	pop	r1
    2ab6:	18 95       	reti

Disassembly of section .text.copy_buffer:

00003900 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3900:	bc 01       	movw	r22, r24
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	09 c0       	rjmp	.+18     	; 0x3918 <copy_buffer+0x18>
    3906:	fb 01       	movw	r30, r22
    3908:	e9 0f       	add	r30, r25
    390a:	f1 1d       	adc	r31, r1
    390c:	da 01       	movw	r26, r20
    390e:	aa 5e       	subi	r26, 0xEA	; 234
    3910:	b9 4f       	sbci	r27, 0xF9	; 249
    3912:	2c 91       	ld	r18, X
    3914:	20 83       	st	Z, r18
    3916:	9f 5f       	subi	r25, 0xFF	; 255
    3918:	49 2f       	mov	r20, r25
    391a:	50 e0       	ldi	r21, 0x00	; 0
    391c:	20 91 30 07 	lds	r18, 0x0730	; 0x800730 <rx_buffer_data_len>
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	22 50       	subi	r18, 0x02	; 2
    3924:	31 09       	sbc	r19, r1
    3926:	42 17       	cp	r20, r18
    3928:	53 07       	cpc	r21, r19
    392a:	6c f3       	brlt	.-38     	; 0x3906 <copy_buffer+0x6>
    392c:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00003576 <uart1_hal_init>:
    3576:	e9 ec       	ldi	r30, 0xC9	; 201
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	80 61       	ori	r24, 0x10	; 16
    357e:	80 83       	st	Z, r24
    3580:	80 81       	ld	r24, Z
    3582:	88 60       	ori	r24, 0x08	; 8
    3584:	80 83       	st	Z, r24
    3586:	80 81       	ld	r24, Z
    3588:	80 68       	ori	r24, 0x80	; 128
    358a:	80 83       	st	Z, r24
    358c:	80 81       	ld	r24, Z
    358e:	80 64       	ori	r24, 0x40	; 64
    3590:	80 83       	st	Z, r24
    3592:	e8 ec       	ldi	r30, 0xC8	; 200
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	82 60       	ori	r24, 0x02	; 2
    359a:	80 83       	st	Z, r24
    359c:	86 e0       	ldi	r24, 0x06	; 6
    359e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    35a2:	80 e1       	ldi	r24, 0x10	; 16
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    35aa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    35ae:	78 94       	sei
    35b0:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002760 <uart1_hal_send_string>:
    2760:	6f 92       	push	r6
    2762:	7f 92       	push	r7
    2764:	8f 92       	push	r8
    2766:	cf 92       	push	r12
    2768:	df 92       	push	r13
    276a:	ef 92       	push	r14
    276c:	3b 01       	movw	r6, r22
    276e:	88 2e       	mov	r8, r24
    2770:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <tx_buffer_data_len>
    2774:	81 11       	cpse	r24, r1
    2776:	fc cf       	rjmp	.-8      	; 0x2770 <uart1_hal_send_string+0x10>
    2778:	88 2d       	mov	r24, r8
    277a:	b3 01       	movw	r22, r6
    277c:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2780:	bc 01       	movw	r22, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	12 c0       	rjmp	.+36     	; 0x27aa <uart1_hal_send_string+0x4a>
    2786:	29 2f       	mov	r18, r25
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	e8 2c       	mov	r14, r8
    278c:	63 01       	movw	r12, r6
    278e:	c4 0e       	add	r12, r20
    2790:	d5 1e       	adc	r13, r21
    2792:	e1 1c       	adc	r14, r1
    2794:	57 fd       	sbrc	r21, 7
    2796:	ea 94       	dec	r14
    2798:	f6 01       	movw	r30, r12
    279a:	44 91       	lpm	r20, Z
    279c:	e7 fc       	sbrc	r14, 7
    279e:	40 81       	ld	r20, Z
    27a0:	f9 01       	movw	r30, r18
    27a2:	e6 51       	subi	r30, 0x16	; 22
    27a4:	fb 4f       	sbci	r31, 0xFB	; 251
    27a6:	40 83       	st	Z, r20
    27a8:	9f 5f       	subi	r25, 0xFF	; 255
    27aa:	49 2f       	mov	r20, r25
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	46 17       	cp	r20, r22
    27b0:	57 07       	cpc	r21, r23
    27b2:	48 f3       	brcs	.-46     	; 0x2786 <uart1_hal_send_string+0x26>
    27b4:	fb 01       	movw	r30, r22
    27b6:	e6 51       	subi	r30, 0x16	; 22
    27b8:	fb 4f       	sbci	r31, 0xFB	; 251
    27ba:	8d e0       	ldi	r24, 0x0D	; 13
    27bc:	80 83       	st	Z, r24
    27be:	fb 01       	movw	r30, r22
    27c0:	e5 51       	subi	r30, 0x15	; 21
    27c2:	fb 4f       	sbci	r31, 0xFB	; 251
    27c4:	8a e0       	ldi	r24, 0x0A	; 10
    27c6:	80 83       	st	Z, r24
    27c8:	6e 5f       	subi	r22, 0xFE	; 254
    27ca:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <tx_buffer_data_len>
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <tx_buffer_cursor>
    27d4:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <tx_buffer>
    27d8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    27dc:	ef 90       	pop	r14
    27de:	df 90       	pop	r13
    27e0:	cf 90       	pop	r12
    27e2:	8f 90       	pop	r8
    27e4:	7f 90       	pop	r7
    27e6:	6f 90       	pop	r6
    27e8:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00003df2 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    3df2:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <rx_buffer_has_message>
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	91 11       	cpse	r25, r1
    3dfa:	01 c0       	rjmp	.+2      	; 0x3dfe <uart1_hal_message_ready+0xc>
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
}
    3dfe:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00003e00 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    3e00:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <rx_buffer_data_len>
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	95 39       	cpi	r25, 0x95	; 149
    3e08:	08 f4       	brcc	.+2      	; 0x3e0c <uart1_hal_rx_full+0xc>
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
}
    3e0c:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00003f28 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    3f28:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <rx_buffer_has_message>
	rx_buffer_data_len=0;
    3f2c:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <rx_buffer_data_len>
    3f30:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

000039b0 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	8c 01       	movw	r16, r24
    39b8:	0e 94 80 1c 	call	0x3900	; 0x3900 <copy_buffer>
    39bc:	c0 91 30 07 	lds	r28, 0x0730	; 0x800730 <rx_buffer_data_len>
    39c0:	c2 50       	subi	r28, 0x02	; 2
    39c2:	f8 01       	movw	r30, r16
    39c4:	ec 0f       	add	r30, r28
    39c6:	f1 1d       	adc	r31, r1
    39c8:	10 82       	st	Z, r1
    39ca:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <uart1_hal_clear_rx_buffer>
    39ce:	8c 2f       	mov	r24, r28
    39d0:	cf 91       	pop	r28
    39d2:	1f 91       	pop	r17
    39d4:	0f 91       	pop	r16
    39d6:	08 95       	ret

Disassembly of section .text.__vector_30:

00003282 <__vector_30>:
    3282:	1f 92       	push	r1
    3284:	0f 92       	push	r0
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	0f 92       	push	r0
    328a:	11 24       	eor	r1, r1
    328c:	8f 93       	push	r24
    328e:	ef 93       	push	r30
    3290:	ff 93       	push	r31
    3292:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <tx_buffer_cursor>
    3296:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <tx_buffer_data_len>
    329a:	e8 17       	cp	r30, r24
    329c:	58 f4       	brcc	.+22     	; 0x32b4 <__vector_30+0x32>
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	8e 0f       	add	r24, r30
    32a2:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <tx_buffer_cursor>
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	e6 51       	subi	r30, 0x16	; 22
    32aa:	fb 4f       	sbci	r31, 0xFB	; 251
    32ac:	80 81       	ld	r24, Z
    32ae:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    32b2:	04 c0       	rjmp	.+8      	; 0x32bc <__vector_30+0x3a>
    32b4:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <tx_buffer_cursor>
    32b8:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <tx_buffer_data_len>
    32bc:	ff 91       	pop	r31
    32be:	ef 91       	pop	r30
    32c0:	8f 91       	pop	r24
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	0f 90       	pop	r0
    32c8:	1f 90       	pop	r1
    32ca:	18 95       	reti

Disassembly of section .text.__vector_28:

00002ab8 <__vector_28>:
    2ab8:	1f 92       	push	r1
    2aba:	0f 92       	push	r0
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	0f 92       	push	r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	2f 93       	push	r18
    2ac4:	8f 93       	push	r24
    2ac6:	9f 93       	push	r25
    2ac8:	ef 93       	push	r30
    2aca:	ff 93       	push	r31
    2acc:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <rx_buffer_has_message>
    2ad0:	81 11       	cpse	r24, r1
    2ad2:	0e c0       	rjmp	.+28     	; 0x2af0 <__vector_28+0x38>
    2ad4:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <rx_buffer_data_len>
    2ad8:	e6 39       	cpi	r30, 0x96	; 150
    2ada:	50 f4       	brcc	.+20     	; 0x2af0 <__vector_28+0x38>
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	8e 0f       	add	r24, r30
    2ae0:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <rx_buffer_data_len>
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2aea:	ea 5e       	subi	r30, 0xEA	; 234
    2aec:	f9 4f       	sbci	r31, 0xF9	; 249
    2aee:	80 83       	st	Z, r24
    2af0:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <rx_buffer_data_len>
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	fc 01       	movw	r30, r24
    2af8:	eb 5e       	subi	r30, 0xEB	; 235
    2afa:	f9 4f       	sbci	r31, 0xF9	; 249
    2afc:	20 81       	ld	r18, Z
    2afe:	2a 30       	cpi	r18, 0x0A	; 10
    2b00:	49 f4       	brne	.+18     	; 0x2b14 <__vector_28+0x5c>
    2b02:	fc 01       	movw	r30, r24
    2b04:	ec 5e       	subi	r30, 0xEC	; 236
    2b06:	f9 4f       	sbci	r31, 0xF9	; 249
    2b08:	80 81       	ld	r24, Z
    2b0a:	8d 30       	cpi	r24, 0x0D	; 13
    2b0c:	19 f4       	brne	.+6      	; 0x2b14 <__vector_28+0x5c>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <rx_buffer_has_message>
    2b14:	ff 91       	pop	r31
    2b16:	ef 91       	pop	r30
    2b18:	9f 91       	pop	r25
    2b1a:	8f 91       	pop	r24
    2b1c:	2f 91       	pop	r18
    2b1e:	0f 90       	pop	r0
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	0f 90       	pop	r0
    2b24:	1f 90       	pop	r1
    2b26:	18 95       	reti

Disassembly of section .text.main:

00003c46 <main>:
	//test_runner();
	
	while(1)
    {
		if(1){
			CONF_enter();
    3c46:	0e 94 a1 0b 	call	0x1742	; 0x1742 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c4a:	2f ef       	ldi	r18, 0xFF	; 255
    3c4c:	81 e1       	ldi	r24, 0x11	; 17
    3c4e:	9a e7       	ldi	r25, 0x7A	; 122
    3c50:	21 50       	subi	r18, 0x01	; 1
    3c52:	80 40       	sbci	r24, 0x00	; 0
    3c54:	90 40       	sbci	r25, 0x00	; 0
    3c56:	e1 f7       	brne	.-8      	; 0x3c50 <main+0xa>
    3c58:	00 c0       	rjmp	.+0      	; 0x3c5a <main+0x14>
    3c5a:	00 00       	nop
    3c5c:	f4 cf       	rjmp	.-24     	; 0x3c46 <main>

Disassembly of section .text.calc_ppm_methane:

000025a2 <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    25a2:	8f 92       	push	r8
    25a4:	9f 92       	push	r9
    25a6:	af 92       	push	r10
    25a8:	bf 92       	push	r11
    25aa:	cf 92       	push	r12
    25ac:	df 92       	push	r13
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	bc 01       	movw	r22, r24
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__floatunsisf>
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	59 e3       	ldi	r21, 0x39	; 57
    25c4:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__mulsf3>
    25c8:	80 90 22 07 	lds	r8, 0x0722	; 0x800722 <Vc>
    25cc:	90 90 23 07 	lds	r9, 0x0723	; 0x800723 <Vc+0x1>
    25d0:	a0 90 24 07 	lds	r10, 0x0724	; 0x800724 <Vc+0x2>
    25d4:	b0 90 25 07 	lds	r11, 0x0725	; 0x800725 <Vc+0x3>
    25d8:	a5 01       	movw	r20, r10
    25da:	94 01       	movw	r18, r8
    25dc:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__mulsf3>
    25e0:	6b 01       	movw	r12, r22
    25e2:	7c 01       	movw	r14, r24
    25e4:	9b 01       	movw	r18, r22
    25e6:	ac 01       	movw	r20, r24
    25e8:	c5 01       	movw	r24, r10
    25ea:	b4 01       	movw	r22, r8
    25ec:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__subsf3>
    25f0:	a7 01       	movw	r20, r14
    25f2:	96 01       	movw	r18, r12
    25f4:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__divsf3>
    25f8:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <RRL>
    25fc:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <RRL+0x1>
    2600:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <RRL+0x2>
    2604:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <RRL+0x3>
    2608:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__mulsf3>
    260c:	20 91 1a 07 	lds	r18, 0x071A	; 0x80071a <PPM_factor>
    2610:	30 91 1b 07 	lds	r19, 0x071B	; 0x80071b <PPM_factor+0x1>
    2614:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <PPM_factor+0x2>
    2618:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <PPM_factor+0x3>
    261c:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__mulsf3>
    2620:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__fixunssfsi>
    2624:	cb 01       	movw	r24, r22
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	df 90       	pop	r13
    262c:	cf 90       	pop	r12
    262e:	bf 90       	pop	r11
    2630:	af 90       	pop	r10
    2632:	9f 90       	pop	r9
    2634:	8f 90       	pop	r8
    2636:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002de4 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <ADC_get_value+0xa>
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2df4:	8f ef       	ldi	r24, 0xFF	; 255
    2df6:	9f ef       	ldi	r25, 0xFF	; 255
    2df8:	f8 01       	movw	r30, r16
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2dfe:	42 e0       	ldi	r20, 0x02	; 2
    2e00:	be 01       	movw	r22, r28
    2e02:	6f 5f       	subi	r22, 0xFF	; 255
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255
    2e06:	8d e4       	ldi	r24, 0x4D	; 77
    2e08:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	0d c0       	rjmp	.+26     	; 0x2e2a <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	98 2f       	mov	r25, r24
    2e16:	88 27       	eor	r24, r24
    2e18:	2a 81       	ldd	r18, Y+2	; 0x02
	*value=calc_ppm_methane(bit_value);
    2e1a:	82 2b       	or	r24, r18
    2e1c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <calc_ppm_methane>
    2e20:	f8 01       	movw	r30, r16
    2e22:	91 83       	std	Z+1, r25	; 0x01
    2e24:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003c76 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3c76:	60 e4       	ldi	r22, 0x40	; 64
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	80 e8       	ldi	r24, 0x80	; 128
    3c7c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <eeprom_read_byte>
    3c80:	91 e0       	ldi	r25, 0x01	; 1
    3c82:	81 11       	cpse	r24, r1
    3c84:	01 c0       	rjmp	.+2      	; 0x3c88 <EM_has_deveui+0x12>
    3c86:	90 e0       	ldi	r25, 0x00	; 0
}
    3c88:	89 2f       	mov	r24, r25
    3c8a:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003c8c <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3c8c:	61 e4       	ldi	r22, 0x41	; 65
    3c8e:	70 e0       	ldi	r23, 0x00	; 0
    3c90:	80 e8       	ldi	r24, 0x80	; 128
    3c92:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <eeprom_read_byte>
    3c96:	91 e0       	ldi	r25, 0x01	; 1
    3c98:	81 11       	cpse	r24, r1
    3c9a:	01 c0       	rjmp	.+2      	; 0x3c9e <EM_has_appeui+0x12>
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
}
    3c9e:	89 2f       	mov	r24, r25
    3ca0:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003ca2 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3ca2:	62 e4       	ldi	r22, 0x42	; 66
    3ca4:	70 e0       	ldi	r23, 0x00	; 0
    3ca6:	80 e8       	ldi	r24, 0x80	; 128
    3ca8:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <eeprom_read_byte>
    3cac:	91 e0       	ldi	r25, 0x01	; 1
    3cae:	81 11       	cpse	r24, r1
    3cb0:	01 c0       	rjmp	.+2      	; 0x3cb4 <EM_has_appkey+0x12>
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
}
    3cb4:	89 2f       	mov	r24, r25
    3cb6:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000035b2 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	6b 01       	movw	r12, r22
    35ba:	e8 2e       	mov	r14, r24
    35bc:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    35c0:	40 97       	sbiw	r24, 0x10	; 16
    35c2:	79 f4       	brne	.+30     	; 0x35e2 <EM_set_deveui+0x30>
    35c4:	20 e1       	ldi	r18, 0x10	; 16
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	8e 2d       	mov	r24, r14
    35ce:	b6 01       	movw	r22, r12
    35d0:	0e 94 17 1a 	call	0x342e	; 0x342e <eeprom_update_block>
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	80 e4       	ldi	r24, 0x40	; 64
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <eeprom_update_byte>
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	01 c0       	rjmp	.+2      	; 0x35e4 <EM_set_deveui+0x32>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	ef 90       	pop	r14
    35e6:	df 90       	pop	r13
    35e8:	cf 90       	pop	r12
    35ea:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003842 <EM_get_deveui>:
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	8c 01       	movw	r16, r24
    384a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <EM_has_deveui>
    384e:	c8 2f       	mov	r28, r24
    3850:	88 23       	and	r24, r24
    3852:	51 f0       	breq	.+20     	; 0x3868 <EM_get_deveui+0x26>
    3854:	20 e1       	ldi	r18, 0x10	; 16
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e0       	ldi	r20, 0x00	; 0
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	c8 01       	movw	r24, r16
    3860:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <eeprom_read_block>
    3864:	f8 01       	movw	r30, r16
    3866:	10 8a       	std	Z+16, r1	; 0x10
    3868:	8c 2f       	mov	r24, r28
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000035ec <EM_set_appeui>:
    35ec:	cf 92       	push	r12
    35ee:	df 92       	push	r13
    35f0:	ef 92       	push	r14
    35f2:	6b 01       	movw	r12, r22
    35f4:	e8 2e       	mov	r14, r24
    35f6:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    35fa:	40 97       	sbiw	r24, 0x10	; 16
    35fc:	79 f4       	brne	.+30     	; 0x361c <EM_set_appeui+0x30>
    35fe:	20 e1       	ldi	r18, 0x10	; 16
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e1       	ldi	r20, 0x10	; 16
    3604:	50 e0       	ldi	r21, 0x00	; 0
    3606:	8e 2d       	mov	r24, r14
    3608:	b6 01       	movw	r22, r12
    360a:	0e 94 17 1a 	call	0x342e	; 0x342e <eeprom_update_block>
    360e:	61 e0       	ldi	r22, 0x01	; 1
    3610:	81 e4       	ldi	r24, 0x41	; 65
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <eeprom_update_byte>
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	01 c0       	rjmp	.+2      	; 0x361e <EM_set_appeui+0x32>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	ef 90       	pop	r14
    3620:	df 90       	pop	r13
    3622:	cf 90       	pop	r12
    3624:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003872 <EM_get_appeui>:
    3872:	0f 93       	push	r16
    3874:	1f 93       	push	r17
    3876:	cf 93       	push	r28
    3878:	8c 01       	movw	r16, r24
    387a:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <EM_has_appeui>
    387e:	c8 2f       	mov	r28, r24
    3880:	88 23       	and	r24, r24
    3882:	51 f0       	breq	.+20     	; 0x3898 <EM_get_appeui+0x26>
    3884:	20 e1       	ldi	r18, 0x10	; 16
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e1       	ldi	r20, 0x10	; 16
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	c8 01       	movw	r24, r16
    3890:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <eeprom_read_block>
    3894:	f8 01       	movw	r30, r16
    3896:	10 8a       	std	Z+16, r1	; 0x10
    3898:	8c 2f       	mov	r24, r28
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00003626 <EM_set_appkey>:
    3626:	cf 92       	push	r12
    3628:	df 92       	push	r13
    362a:	ef 92       	push	r14
    362c:	6b 01       	movw	r12, r22
    362e:	e8 2e       	mov	r14, r24
    3630:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    3634:	80 97       	sbiw	r24, 0x20	; 32
    3636:	79 f4       	brne	.+30     	; 0x3656 <EM_set_appkey+0x30>
    3638:	20 e2       	ldi	r18, 0x20	; 32
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e2       	ldi	r20, 0x20	; 32
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	8e 2d       	mov	r24, r14
    3642:	b6 01       	movw	r22, r12
    3644:	0e 94 17 1a 	call	0x342e	; 0x342e <eeprom_update_block>
    3648:	61 e0       	ldi	r22, 0x01	; 1
    364a:	82 e4       	ldi	r24, 0x42	; 66
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <eeprom_update_byte>
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <EM_set_appkey+0x32>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	cf 90       	pop	r12
    365e:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

000038a2 <EM_get_appkey>:
    38a2:	0f 93       	push	r16
    38a4:	1f 93       	push	r17
    38a6:	cf 93       	push	r28
    38a8:	8c 01       	movw	r16, r24
    38aa:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <EM_has_appkey>
    38ae:	c8 2f       	mov	r28, r24
    38b0:	88 23       	and	r24, r24
    38b2:	51 f0       	breq	.+20     	; 0x38c8 <EM_get_appkey+0x26>
    38b4:	20 e2       	ldi	r18, 0x20	; 32
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e2       	ldi	r20, 0x20	; 32
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	c8 01       	movw	r24, r16
    38c0:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <eeprom_read_block>
    38c4:	f8 01       	movw	r30, r16
    38c6:	10 a2       	std	Z+32, r1	; 0x20
    38c8:	8c 2f       	mov	r24, r28
    38ca:	cf 91       	pop	r28
    38cc:	1f 91       	pop	r17
    38ce:	0f 91       	pop	r16
    38d0:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00003e0e <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    3e0e:	ab 01       	movw	r20, r22
    3e10:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    3e12:	83 e4       	ldi	r24, 0x43	; 67
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <eeprom_update_dword>
    3e1a:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003b60 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	ec 01       	movw	r28, r24
    3b66:	63 e4       	ldi	r22, 0x43	; 67
    3b68:	70 e0       	ldi	r23, 0x00	; 0
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <eeprom_read_dword>
    3b70:	68 83       	st	Y, r22
    3b72:	79 83       	std	Y+1, r23	; 0x01
    3b74:	8a 83       	std	Y+2, r24	; 0x02
    3b76:	9b 83       	std	Y+3, r25	; 0x03
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00003e1c <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    3e1c:	ab 01       	movw	r20, r22
    3e1e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    3e20:	87 e4       	ldi	r24, 0x47	; 71
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <eeprom_update_dword>
    3e28:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003b7e <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	ec 01       	movw	r28, r24
    3b84:	67 e4       	ldi	r22, 0x47	; 71
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <eeprom_read_dword>
    3b8e:	68 83       	st	Y, r22
    3b90:	79 83       	std	Y+1, r23	; 0x01
    3b92:	8a 83       	std	Y+2, r24	; 0x02
    3b94:	9b 83       	std	Y+3, r25	; 0x03
    3b96:	df 91       	pop	r29
    3b98:	cf 91       	pop	r28
    3b9a:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00003e2a <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    3e2a:	ab 01       	movw	r20, r22
    3e2c:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    3e2e:	8b e4       	ldi	r24, 0x4B	; 75
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <eeprom_update_dword>
    3e36:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003b9c <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	ec 01       	movw	r28, r24
    3ba2:	6b e4       	ldi	r22, 0x4B	; 75
    3ba4:	70 e0       	ldi	r23, 0x00	; 0
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <eeprom_read_dword>
    3bac:	68 83       	st	Y, r22
    3bae:	79 83       	std	Y+1, r23	; 0x01
    3bb0:	8a 83       	std	Y+2, r24	; 0x02
    3bb2:	9b 83       	std	Y+3, r25	; 0x03
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00003e38 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    3e38:	24 2f       	mov	r18, r20
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	44 e6       	ldi	r20, 0x64	; 100
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	0e 94 17 1a 	call	0x342e	; 0x342e <eeprom_update_block>
    3e44:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00003d9c <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    3d9c:	26 2f       	mov	r18, r22
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	44 e6       	ldi	r20, 0x64	; 100
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	60 e0       	ldi	r22, 0x00	; 0
    3da6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <eeprom_read_block>
    3daa:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00003ea8 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    3ea8:	68 2f       	mov	r22, r24
    3eaa:	8f e4       	ldi	r24, 0x4F	; 79
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <eeprom_update_byte>
    3eb2:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00003eb4 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    3eb4:	6f e4       	ldi	r22, 0x4F	; 79
    3eb6:	70 e0       	ldi	r23, 0x00	; 0
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <eeprom_read_byte>
}
    3ebe:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00003ec0 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	80 e5       	ldi	r24, 0x50	; 80
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <eeprom_update_word>
    3eca:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00003ecc <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    3ecc:	60 e5       	ldi	r22, 0x50	; 80
    3ece:	70 e0       	ldi	r23, 0x00	; 0
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <eeprom_read_word>
}
    3ed6:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

00003ed8 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    3ed8:	68 2f       	mov	r22, r24
    3eda:	82 e5       	ldi	r24, 0x52	; 82
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <eeprom_update_byte>
    3ee2:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00003ee4 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    3ee4:	62 e5       	ldi	r22, 0x52	; 82
    3ee6:	70 e0       	ldi	r23, 0x00	; 0
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <eeprom_read_byte>
    3eee:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00003f72 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    3f72:	0e 94 af 19 	call	0x335e	; 0x335e <util_reset_module>
}
    3f76:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00003f78 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    3f78:	0e 94 30 1b 	call	0x3660	; 0x3660 <util_lora_forward_msg>
    3f7c:	08 95       	ret

Disassembly of section .text.attach_ending:

00003bf6 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	01 90       	ld	r0, Z+
    3bfa:	00 20       	and	r0, r0
    3bfc:	e9 f7       	brne	.-6      	; 0x3bf8 <attach_ending+0x2>
    3bfe:	cf 01       	movw	r24, r30
    3c00:	23 e0       	ldi	r18, 0x03	; 3
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 ea       	ldi	r20, 0xA0	; 160
    3c06:	54 e0       	ldi	r21, 0x04	; 4
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
    3c10:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

000032cc <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	3b 01       	movw	r6, r22
    32de:	88 2e       	mov	r8, r24
    32e0:	69 01       	movw	r12, r18
    32e2:	e4 2e       	mov	r14, r20
    32e4:	84 2f       	mov	r24, r20
    32e6:	b9 01       	movw	r22, r18
    32e8:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    32ec:	8c 01       	movw	r16, r24
    32ee:	4e 2d       	mov	r20, r14
    32f0:	96 01       	movw	r18, r12
    32f2:	88 2d       	mov	r24, r8
    32f4:	b3 01       	movw	r22, r6
    32f6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <strncmp>
    32fa:	21 e0       	ldi	r18, 0x01	; 1
    32fc:	89 2b       	or	r24, r25
    32fe:	09 f0       	breq	.+2      	; 0x3302 <util_strbeginswith+0x36>
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	82 2f       	mov	r24, r18
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	ef 90       	pop	r14
    330a:	df 90       	pop	r13
    330c:	cf 90       	pop	r12
    330e:	8f 90       	pop	r8
    3310:	7f 90       	pop	r7
    3312:	6f 90       	pop	r6
    3314:	08 95       	ret

Disassembly of section .text.util_reset_module:

0000335e <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    335e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <rn2483_reset_active>
    3362:	2f ef       	ldi	r18, 0xFF	; 255
    3364:	89 e6       	ldi	r24, 0x69	; 105
    3366:	98 e1       	ldi	r25, 0x18	; 24
    3368:	21 50       	subi	r18, 0x01	; 1
    336a:	80 40       	sbci	r24, 0x00	; 0
    336c:	90 40       	sbci	r25, 0x00	; 0
    336e:	e1 f7       	brne	.-8      	; 0x3368 <util_reset_module+0xa>
    3370:	00 c0       	rjmp	.+0      	; 0x3372 <util_reset_module+0x14>
    3372:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    3374:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    3378:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uart0_hal_message_ready>
    337c:	88 23       	and	r24, r24
    337e:	e1 f3       	breq	.-8      	; 0x3378 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    3380:	80 e9       	ldi	r24, 0x90	; 144
    3382:	92 e0       	ldi	r25, 0x02	; 2
    3384:	0e 94 c4 1c 	call	0x3988	; 0x3988 <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    3388:	60 e9       	ldi	r22, 0x90	; 144
    338a:	72 e0       	ldi	r23, 0x02	; 2
    338c:	80 e8       	ldi	r24, 0x80	; 128
    338e:	2c e7       	ldi	r18, 0x7C	; 124
    3390:	35 e0       	ldi	r19, 0x05	; 5
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	0e 94 66 19 	call	0x32cc	; 0x32cc <util_strbeginswith>
    3398:	88 23       	and	r24, r24
    339a:	11 f0       	breq	.+4      	; 0x33a0 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    33a2:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00003660 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    3666:	ab 01       	movw	r20, r22
    3668:	68 2f       	mov	r22, r24
    366a:	80 e9       	ldi	r24, 0x90	; 144
    366c:	92 e0       	ldi	r25, 0x02	; 2
    366e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <strcpy>
	attach_ending(lm_msg);
    3672:	80 e9       	ldi	r24, 0x90	; 144
    3674:	92 e0       	ldi	r25, 0x02	; 2
    3676:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <attach_ending>
	uart0_hal_send_string(lm_msg);
    367a:	60 e9       	ldi	r22, 0x90	; 144
    367c:	72 e0       	ldi	r23, 0x02	; 2
    367e:	80 e8       	ldi	r24, 0x80	; 128
    3680:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    3684:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uart0_hal_message_ready>
    3688:	88 23       	and	r24, r24
    368a:	e1 f3       	breq	.-8      	; 0x3684 <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    368c:	ce 01       	movw	r24, r28
    368e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <uart0_hal_read_message_as_str>
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001ab8 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <datetime_to_BCD+0x8>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <datetime_to_BCD+0xa>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <datetime_to_BCD+0xc>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	f9 01       	movw	r30, r18
    1aca:	3d ec       	ldi	r19, 0xCD	; 205
    1acc:	43 9f       	mul	r20, r19
    1ace:	21 2d       	mov	r18, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	26 95       	lsr	r18
    1ad4:	26 95       	lsr	r18
    1ad6:	26 95       	lsr	r18
    1ad8:	10 e1       	ldi	r17, 0x10	; 16
    1ada:	21 9f       	mul	r18, r17
    1adc:	d0 01       	movw	r26, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	22 0f       	add	r18, r18
    1ae2:	b2 2f       	mov	r27, r18
    1ae4:	bb 0f       	add	r27, r27
    1ae6:	bb 0f       	add	r27, r27
    1ae8:	2b 0f       	add	r18, r27
    1aea:	42 1b       	sub	r20, r18
    1aec:	4a 2b       	or	r20, r26
    1aee:	40 83       	st	Z, r20
    1af0:	53 9f       	mul	r21, r19
    1af2:	21 2d       	mov	r18, r1
    1af4:	11 24       	eor	r1, r1
    1af6:	26 95       	lsr	r18
    1af8:	26 95       	lsr	r18
    1afa:	26 95       	lsr	r18
    1afc:	40 e1       	ldi	r20, 0x10	; 16
    1afe:	24 9f       	mul	r18, r20
    1b00:	d0 01       	movw	r26, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	22 0f       	add	r18, r18
    1b06:	42 2f       	mov	r20, r18
    1b08:	44 0f       	add	r20, r20
    1b0a:	44 0f       	add	r20, r20
    1b0c:	24 0f       	add	r18, r20
    1b0e:	52 1b       	sub	r21, r18
    1b10:	5a 2b       	or	r21, r26
    1b12:	51 83       	std	Z+1, r21	; 0x01
    1b14:	63 9f       	mul	r22, r19
    1b16:	41 2d       	mov	r20, r1
    1b18:	11 24       	eor	r1, r1
    1b1a:	46 95       	lsr	r20
    1b1c:	46 95       	lsr	r20
    1b1e:	46 95       	lsr	r20
    1b20:	10 e1       	ldi	r17, 0x10	; 16
    1b22:	41 9f       	mul	r20, r17
    1b24:	d0 01       	movw	r26, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	44 0f       	add	r20, r20
    1b2a:	24 2f       	mov	r18, r20
    1b2c:	22 0f       	add	r18, r18
    1b2e:	22 0f       	add	r18, r18
    1b30:	42 0f       	add	r20, r18
    1b32:	64 1b       	sub	r22, r20
    1b34:	6a 2b       	or	r22, r26
    1b36:	62 83       	std	Z+2, r22	; 0x02
    1b38:	73 9f       	mul	r23, r19
    1b3a:	41 2d       	mov	r20, r1
    1b3c:	11 24       	eor	r1, r1
    1b3e:	46 95       	lsr	r20
    1b40:	46 95       	lsr	r20
    1b42:	46 95       	lsr	r20
    1b44:	20 e1       	ldi	r18, 0x10	; 16
    1b46:	42 9f       	mul	r20, r18
    1b48:	d0 01       	movw	r26, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	44 0f       	add	r20, r20
    1b4e:	24 2f       	mov	r18, r20
    1b50:	22 0f       	add	r18, r18
    1b52:	22 0f       	add	r18, r18
    1b54:	42 0f       	add	r20, r18
    1b56:	74 1b       	sub	r23, r20
    1b58:	7a 2b       	or	r23, r26
    1b5a:	73 83       	std	Z+3, r23	; 0x03
    1b5c:	83 9f       	mul	r24, r19
    1b5e:	41 2d       	mov	r20, r1
    1b60:	11 24       	eor	r1, r1
    1b62:	46 95       	lsr	r20
    1b64:	46 95       	lsr	r20
    1b66:	46 95       	lsr	r20
    1b68:	10 e1       	ldi	r17, 0x10	; 16
    1b6a:	41 9f       	mul	r20, r17
    1b6c:	b0 01       	movw	r22, r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	44 0f       	add	r20, r20
    1b72:	24 2f       	mov	r18, r20
    1b74:	22 0f       	add	r18, r18
    1b76:	22 0f       	add	r18, r18
    1b78:	42 0f       	add	r20, r18
    1b7a:	84 1b       	sub	r24, r20
    1b7c:	86 2b       	or	r24, r22
    1b7e:	84 83       	std	Z+4, r24	; 0x04
    1b80:	93 9f       	mul	r25, r19
    1b82:	31 2d       	mov	r19, r1
    1b84:	11 24       	eor	r1, r1
    1b86:	36 95       	lsr	r19
    1b88:	36 95       	lsr	r19
    1b8a:	36 95       	lsr	r19
    1b8c:	20 e1       	ldi	r18, 0x10	; 16
    1b8e:	32 9f       	mul	r19, r18
    1b90:	a0 01       	movw	r20, r0
    1b92:	11 24       	eor	r1, r1
    1b94:	33 0f       	add	r19, r19
    1b96:	83 2f       	mov	r24, r19
    1b98:	88 0f       	add	r24, r24
    1b9a:	88 0f       	add	r24, r24
    1b9c:	38 0f       	add	r19, r24
    1b9e:	93 1b       	sub	r25, r19
    1ba0:	94 2b       	or	r25, r20
    1ba2:	95 83       	std	Z+5, r25	; 0x05
    1ba4:	26 96       	adiw	r28, 0x06	; 6
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001602 <RTC_get_current_time>:
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	27 97       	sbiw	r28, 0x07	; 7
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	8c 01       	movw	r16, r24
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	4f e8       	ldi	r20, 0x8F	; 143
    1620:	55 e0       	ldi	r21, 0x05	; 5
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	81 e5       	ldi	r24, 0x51	; 81
    1626:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <TWI_API_write_data>
    162a:	81 11       	cpse	r24, r1
    162c:	7c c0       	rjmp	.+248    	; 0x1726 <RTC_get_current_time+0x124>
    162e:	47 e0       	ldi	r20, 0x07	; 7
    1630:	be 01       	movw	r22, r28
    1632:	6f 5f       	subi	r22, 0xFF	; 255
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	81 e5       	ldi	r24, 0x51	; 81
    1638:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <TWI_API_repeat_read_data_stop>
    163c:	81 11       	cpse	r24, r1
    163e:	75 c0       	rjmp	.+234    	; 0x172a <RTC_get_current_time+0x128>
    1640:	29 81       	ldd	r18, Y+1	; 0x01
    1642:	82 2f       	mov	r24, r18
    1644:	8f 77       	andi	r24, 0x7F	; 127
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	95 95       	asr	r25
    164a:	87 95       	ror	r24
    164c:	95 95       	asr	r25
    164e:	87 95       	ror	r24
    1650:	95 95       	asr	r25
    1652:	87 95       	ror	r24
    1654:	95 95       	asr	r25
    1656:	87 95       	ror	r24
    1658:	88 0f       	add	r24, r24
    165a:	98 2f       	mov	r25, r24
    165c:	99 0f       	add	r25, r25
    165e:	99 0f       	add	r25, r25
    1660:	89 0f       	add	r24, r25
    1662:	2f 70       	andi	r18, 0x0F	; 15
    1664:	82 0f       	add	r24, r18
    1666:	f8 01       	movw	r30, r16
    1668:	80 83       	st	Z, r24
    166a:	2a 81       	ldd	r18, Y+2	; 0x02
    166c:	82 2f       	mov	r24, r18
    166e:	8f 77       	andi	r24, 0x7F	; 127
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	95 95       	asr	r25
    1674:	87 95       	ror	r24
    1676:	95 95       	asr	r25
    1678:	87 95       	ror	r24
    167a:	95 95       	asr	r25
    167c:	87 95       	ror	r24
    167e:	95 95       	asr	r25
    1680:	87 95       	ror	r24
    1682:	88 0f       	add	r24, r24
    1684:	98 2f       	mov	r25, r24
    1686:	99 0f       	add	r25, r25
    1688:	99 0f       	add	r25, r25
    168a:	89 0f       	add	r24, r25
    168c:	2f 70       	andi	r18, 0x0F	; 15
    168e:	82 0f       	add	r24, r18
    1690:	81 83       	std	Z+1, r24	; 0x01
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	82 2f       	mov	r24, r18
    1696:	8f 73       	andi	r24, 0x3F	; 63
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	95 95       	asr	r25
    169c:	87 95       	ror	r24
    169e:	95 95       	asr	r25
    16a0:	87 95       	ror	r24
    16a2:	95 95       	asr	r25
    16a4:	87 95       	ror	r24
    16a6:	95 95       	asr	r25
    16a8:	87 95       	ror	r24
    16aa:	88 0f       	add	r24, r24
    16ac:	98 2f       	mov	r25, r24
    16ae:	99 0f       	add	r25, r25
    16b0:	99 0f       	add	r25, r25
    16b2:	89 0f       	add	r24, r25
    16b4:	2f 70       	andi	r18, 0x0F	; 15
    16b6:	82 0f       	add	r24, r18
    16b8:	82 83       	std	Z+2, r24	; 0x02
    16ba:	2c 81       	ldd	r18, Y+4	; 0x04
    16bc:	82 2f       	mov	r24, r18
    16be:	8f 73       	andi	r24, 0x3F	; 63
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	95 95       	asr	r25
    16c4:	87 95       	ror	r24
    16c6:	95 95       	asr	r25
    16c8:	87 95       	ror	r24
    16ca:	95 95       	asr	r25
    16cc:	87 95       	ror	r24
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	88 0f       	add	r24, r24
    16d4:	98 2f       	mov	r25, r24
    16d6:	99 0f       	add	r25, r25
    16d8:	99 0f       	add	r25, r25
    16da:	89 0f       	add	r24, r25
    16dc:	2f 70       	andi	r18, 0x0F	; 15
    16de:	82 0f       	add	r24, r18
    16e0:	83 83       	std	Z+3, r24	; 0x03
    16e2:	2e 81       	ldd	r18, Y+6	; 0x06
    16e4:	82 2f       	mov	r24, r18
    16e6:	8f 71       	andi	r24, 0x1F	; 31
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	95 95       	asr	r25
    16ec:	87 95       	ror	r24
    16ee:	95 95       	asr	r25
    16f0:	87 95       	ror	r24
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	95 95       	asr	r25
    16f8:	87 95       	ror	r24
    16fa:	88 0f       	add	r24, r24
    16fc:	98 2f       	mov	r25, r24
    16fe:	99 0f       	add	r25, r25
    1700:	99 0f       	add	r25, r25
    1702:	89 0f       	add	r24, r25
    1704:	2f 70       	andi	r18, 0x0F	; 15
    1706:	82 0f       	add	r24, r18
    1708:	84 83       	std	Z+4, r24	; 0x04
    170a:	8f 81       	ldd	r24, Y+7	; 0x07
    170c:	98 2f       	mov	r25, r24
    170e:	92 95       	swap	r25
    1710:	9f 70       	andi	r25, 0x0F	; 15
    1712:	99 0f       	add	r25, r25
    1714:	29 2f       	mov	r18, r25
    1716:	22 0f       	add	r18, r18
    1718:	22 0f       	add	r18, r18
    171a:	92 0f       	add	r25, r18
    171c:	8f 70       	andi	r24, 0x0F	; 15
    171e:	89 0f       	add	r24, r25
    1720:	85 83       	std	Z+5, r24	; 0x05
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	03 c0       	rjmp	.+6      	; 0x172c <RTC_get_current_time+0x12a>
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	01 c0       	rjmp	.+2      	; 0x172c <RTC_get_current_time+0x12a>
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	27 96       	adiw	r28, 0x07	; 7
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00002c6c <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	64 97       	sbiw	r28, 0x14	; 20
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    2c80:	9e 01       	movw	r18, r28
    2c82:	27 5f       	subi	r18, 0xF7	; 247
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <datetime_to_BCD>
	
	data[0]=0x02;
    2c8a:	82 e0       	ldi	r24, 0x02	; 2
    2c8c:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    2c92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c94:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    2c96:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c98:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    2c9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    2c9e:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    2ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca2:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    2ca4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ca6:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    2ca8:	ae 01       	movw	r20, r28
    2caa:	4f 5f       	subi	r20, 0xFF	; 255
    2cac:	5f 4f       	sbci	r21, 0xFF	; 255
    2cae:	60 e8       	ldi	r22, 0x80	; 128
    2cb0:	28 e0       	ldi	r18, 0x08	; 8
    2cb2:	81 e5       	ldi	r24, 0x51	; 81
    2cb4:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2cb8:	88 23       	and	r24, r24
    2cba:	11 f0       	breq	.+4      	; 0x2cc0 <RTC_set_current_time+0x54>
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
}
    2cc2:	64 96       	adiw	r28, 0x14	; 20
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003c12 <bytes_2_uint>:
	TC1_HAL_start();
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    3c12:	fc 01       	movw	r30, r24
    3c14:	54 81       	ldd	r21, Z+4	; 0x04
    3c16:	43 81       	ldd	r20, Z+3	; 0x03
    3c18:	31 81       	ldd	r19, Z+1	; 0x01
    3c1a:	20 81       	ld	r18, Z
    3c1c:	65 2f       	mov	r22, r21
    3c1e:	74 2f       	mov	r23, r20
    3c20:	83 2f       	mov	r24, r19
    3c22:	92 2f       	mov	r25, r18
    3c24:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__fixunssfsi>
    3c28:	cb 01       	movw	r24, r22
    3c2a:	08 95       	ret

Disassembly of section .text.init_measurement:

00003698 <init_measurement>:
    3698:	25 e0       	ldi	r18, 0x05	; 5
    369a:	43 e8       	ldi	r20, 0x83	; 131
    369c:	55 e0       	ldi	r21, 0x05	; 5
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	81 e6       	ldi	r24, 0x61	; 97
    36a2:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <TWI_API_write_data_stop>
    36a6:	81 11       	cpse	r24, r1
    36a8:	0f c0       	rjmp	.+30     	; 0x36c8 <init_measurement+0x30>
    36aa:	25 e0       	ldi	r18, 0x05	; 5
    36ac:	48 e8       	ldi	r20, 0x88	; 136
    36ae:	55 e0       	ldi	r21, 0x05	; 5
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	81 e6       	ldi	r24, 0x61	; 97
    36b4:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <TWI_API_write_data_stop>
    36b8:	81 11       	cpse	r24, r1
    36ba:	08 c0       	rjmp	.+16     	; 0x36cc <init_measurement+0x34>
    36bc:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <SCD30_HAL_data_ready>
    36c0:	88 23       	and	r24, r24
    36c2:	e1 f3       	breq	.-8      	; 0x36bc <init_measurement+0x24>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	08 95       	ret
    36c8:	82 e0       	ldi	r24, 0x02	; 2
    36ca:	08 95       	ret
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	08 95       	ret

Disassembly of section .text.validate_data:

000037de <validate_data>:
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	ec 01       	movw	r28, r24
    37e4:	62 e0       	ldi	r22, 0x02	; 2
    37e6:	0e 94 84 1b 	call	0x3708	; 0x3708 <calc_crc8>
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	89 13       	cpse	r24, r25
    37ee:	0a c0       	rjmp	.+20     	; 0x3804 <validate_data+0x26>
    37f0:	62 e0       	ldi	r22, 0x02	; 2
    37f2:	ce 01       	movw	r24, r28
    37f4:	03 96       	adiw	r24, 0x03	; 3
    37f6:	0e 94 84 1b 	call	0x3708	; 0x3708 <calc_crc8>
    37fa:	9d 81       	ldd	r25, Y+5	; 0x05
    37fc:	89 17       	cp	r24, r25
    37fe:	21 f0       	breq	.+8      	; 0x3808 <validate_data+0x2a>
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	03 c0       	rjmp	.+6      	; 0x380a <validate_data+0x2c>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	01 c0       	rjmp	.+2      	; 0x380a <validate_data+0x2c>
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	08 95       	ret

Disassembly of section .text.read_value:

000023d0 <read_value>:
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	00 d0       	rcall	.+0      	; 0x23da <read_value+0xa>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <read_value+0xc>
    23dc:	00 d0       	rcall	.+0      	; 0x23de <read_value+0xe>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	8c 01       	movw	r16, r24
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	9f ef       	ldi	r25, 0xFF	; 255
    23e8:	f8 01       	movw	r30, r16
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
    23ee:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <SCD30_HAL_data_ready>
    23f2:	81 11       	cpse	r24, r1
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <read_value+0x34>
    23f6:	8e ef       	ldi	r24, 0xFE	; 254
    23f8:	9f ef       	ldi	r25, 0xFF	; 255
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	83 e0       	ldi	r24, 0x03	; 3
    2402:	2c c0       	rjmp	.+88     	; 0x245c <read_value+0x8c>
    2404:	22 e0       	ldi	r18, 0x02	; 2
    2406:	4d e8       	ldi	r20, 0x8D	; 141
    2408:	55 e0       	ldi	r21, 0x05	; 5
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	81 e6       	ldi	r24, 0x61	; 97
    240e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <TWI_API_write_data_stop>
    2412:	81 11       	cpse	r24, r1
    2414:	1e c0       	rjmp	.+60     	; 0x2452 <read_value+0x82>
    2416:	8f e3       	ldi	r24, 0x3F	; 63
    2418:	9f e1       	ldi	r25, 0x1F	; 31
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <read_value+0x4a>
    241e:	00 c0       	rjmp	.+0      	; 0x2420 <read_value+0x50>
    2420:	00 00       	nop
    2422:	46 e0       	ldi	r20, 0x06	; 6
    2424:	be 01       	movw	r22, r28
    2426:	6f 5f       	subi	r22, 0xFF	; 255
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	81 e6       	ldi	r24, 0x61	; 97
    242c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <TWI_API_read_data_ack_end_nack_stop>
    2430:	81 11       	cpse	r24, r1
    2432:	11 c0       	rjmp	.+34     	; 0x2456 <read_value+0x86>
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	0e 94 ef 1b 	call	0x37de	; 0x37de <validate_data>
    243c:	88 23       	and	r24, r24
    243e:	69 f0       	breq	.+26     	; 0x245a <read_value+0x8a>
    2440:	ce 01       	movw	r24, r28
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <bytes_2_uint>
    2448:	f8 01       	movw	r30, r16
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	05 c0       	rjmp	.+10     	; 0x245c <read_value+0x8c>
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	03 c0       	rjmp	.+6      	; 0x245c <read_value+0x8c>
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	01 c0       	rjmp	.+2      	; 0x245c <read_value+0x8c>
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	26 96       	adiw	r28, 0x06	; 6
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003adc <SCD30_sensor_on>:
    3adc:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <SCD30_HAL_init>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <PM_HAL_SCD30_power>
    3ae6:	2f ef       	ldi	r18, 0xFF	; 255
    3ae8:	83 ed       	ldi	r24, 0xD3	; 211
    3aea:	90 e3       	ldi	r25, 0x30	; 48
    3aec:	21 50       	subi	r18, 0x01	; 1
    3aee:	80 40       	sbci	r24, 0x00	; 0
    3af0:	90 40       	sbci	r25, 0x00	; 0
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <SCD30_sensor_on+0x10>
    3af4:	00 c0       	rjmp	.+0      	; 0x3af6 <SCD30_sensor_on+0x1a>
    3af6:	00 00       	nop
    3af8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <init_measurement>
    3afc:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003c2c <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3c32:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <SCD30_HAL_data_ready>
    3c36:	88 23       	and	r24, r24
    3c38:	e1 f3       	breq	.-8      	; 0x3c32 <SCD30_get_reading+0x6>
	
	return read_value(value);
    3c3a:	ce 01       	movw	r24, r28
    3c3c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <read_value>
}
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	08 95       	ret

Disassembly of section .text.parse_cmd:

000039d8 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    39d8:	fc 01       	movw	r30, r24
    39da:	80 81       	ld	r24, Z
    39dc:	82 37       	cpi	r24, 0x72	; 114
    39de:	41 f0       	breq	.+16     	; 0x39f0 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    39e0:	87 37       	cpi	r24, 0x77	; 119
    39e2:	41 f0       	breq	.+16     	; 0x39f4 <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    39e4:	83 36       	cpi	r24, 0x63	; 99
    39e6:	41 f0       	breq	.+16     	; 0x39f8 <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    39e8:	83 37       	cpi	r24, 0x73	; 115
    39ea:	41 f4       	brne	.+16     	; 0x39fc <parse_cmd+0x24>
    39ec:	8a e0       	ldi	r24, 0x0A	; 10
    39ee:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    39f0:	87 e0       	ldi	r24, 0x07	; 7
    39f2:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    39f4:	88 e0       	ldi	r24, 0x08	; 8
    39f6:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    39f8:	89 e0       	ldi	r24, 0x09	; 9
    39fa:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    39fc:	85 e0       	ldi	r24, 0x05	; 5
}
    39fe:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002e3a <validate_cmd>:

static bool validate_cmd(char msg[]){
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    2e40:	bc 01       	movw	r22, r24
    2e42:	80 e8       	ldi	r24, 0x80	; 128
    2e44:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2e48:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	31 97       	sbiw	r30, 0x01	; 1
    2e4e:	ec 0f       	add	r30, r28
    2e50:	fd 1f       	adc	r31, r29
    2e52:	80 81       	ld	r24, Z
    2e54:	80 32       	cpi	r24, 0x20	; 32
    2e56:	b1 f0       	breq	.+44     	; 0x2e84 <validate_cmd+0x4a>
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0d c0       	rjmp	.+26     	; 0x2e7a <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    2e60:	fe 01       	movw	r30, r28
    2e62:	e2 0f       	add	r30, r18
    2e64:	f3 1f       	adc	r31, r19
    2e66:	90 81       	ld	r25, Z
    2e68:	90 32       	cpi	r25, 0x20	; 32
    2e6a:	21 f4       	brne	.+8      	; 0x2e74 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2e6c:	41 11       	cpse	r20, r1
    2e6e:	0c c0       	rjmp	.+24     	; 0x2e88 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    2e70:	41 e0       	ldi	r20, 0x01	; 1
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2e74:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2e76:	2f 5f       	subi	r18, 0xFF	; 255
    2e78:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7a:	26 17       	cp	r18, r22
    2e7c:	37 07       	cpc	r19, r23
    2e7e:	80 f3       	brcs	.-32     	; 0x2e60 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    2e88:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001742 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1742:	cf 93       	push	r28
	uart1_hal_init();
    1744:	0e 94 bb 1a 	call	0x3576	; 0x3576 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1748:	c0 e0       	ldi	r28, 0x00	; 0
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <CONF_enter+0x24>
				uart1_hal_send_string("Setting modules up... Please wait");
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    174c:	c2 e0       	ldi	r28, 0x02	; 2
    174e:	0b c0       	rjmp	.+22     	; 0x1766 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1750:	c5 e0       	ldi	r28, 0x05	; 5
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1754:	c6 e0       	ldi	r28, 0x06	; 6
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1758:	c5 e0       	ldi	r28, 0x05	; 5
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    175c:	c5 e0       	ldi	r28, 0x05	; 5
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1760:	c5 e0       	ldi	r28, 0x05	; 5
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1764:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1766:	ec 2f       	mov	r30, r28
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	ec 30       	cpi	r30, 0x0C	; 12
    176c:	f1 05       	cpc	r31, r1
    176e:	d8 f7       	brcc	.-10     	; 0x1766 <CONF_enter+0x24>
    1770:	e2 5c       	subi	r30, 0xC2	; 194
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1778:	6c e7       	ldi	r22, 0x7C	; 124
    177a:	73 e0       	ldi	r23, 0x03	; 3
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1782:	62 ea       	ldi	r22, 0xA2	; 162
    1784:	73 e0       	ldi	r23, 0x03	; 3
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				if(!init_methane_SCD30()){
    178c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <init_methane_SCD30>
    1790:	81 11       	cpse	r24, r1
    1792:	dc cf       	rjmp	.-72     	; 0x174c <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    1794:	64 ec       	ldi	r22, 0xC4	; 196
    1796:	73 e0       	ldi	r23, 0x03	; 3
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
					state=CONF_EXIT;
    179e:	c4 e0       	ldi	r28, 0x04	; 4
    17a0:	e2 cf       	rjmp	.-60     	; 0x1766 <CONF_enter+0x24>
				}
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    17a2:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <uart1_hal_message_ready>
    17a6:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    17a8:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    17aa:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <uart1_hal_rx_full>
    17ae:	81 11       	cpse	r24, r1
    17b0:	cf cf       	rjmp	.-98     	; 0x1750 <CONF_enter+0xe>
    17b2:	d9 cf       	rjmp	.-78     	; 0x1766 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	94 e0       	ldi	r25, 0x04	; 4
    17b8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    17bc:	80 e2       	ldi	r24, 0x20	; 32
    17be:	94 e0       	ldi	r25, 0x04	; 4
    17c0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <validate_cmd>
    17c4:	88 23       	and	r24, r24
    17c6:	31 f2       	breq	.-116    	; 0x1754 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	94 e0       	ldi	r25, 0x04	; 4
    17cc:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <parse_cmd>
    17d0:	c8 2f       	mov	r28, r24
    17d2:	c9 cf       	rjmp	.-110    	; 0x1766 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    17d4:	60 e2       	ldi	r22, 0x20	; 32
    17d6:	74 e0       	ldi	r23, 0x04	; 4
    17d8:	80 e8       	ldi	r24, 0x80	; 128
    17da:	48 e5       	ldi	r20, 0x58	; 88
    17dc:	53 e0       	ldi	r21, 0x03	; 3
    17de:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <handle_read>
    17e2:	88 23       	and	r24, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <CONF_enter+0xa6>
    17e6:	b8 cf       	rjmp	.-144    	; 0x1758 <CONF_enter+0x16>
					state=CONF_REPLY;
    17e8:	cb e0       	ldi	r28, 0x0B	; 11
    17ea:	bd cf       	rjmp	.-134    	; 0x1766 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    17ec:	60 e2       	ldi	r22, 0x20	; 32
    17ee:	74 e0       	ldi	r23, 0x04	; 4
    17f0:	80 e8       	ldi	r24, 0x80	; 128
    17f2:	48 e5       	ldi	r20, 0x58	; 88
    17f4:	53 e0       	ldi	r21, 0x03	; 3
    17f6:	0e 94 29 09 	call	0x1252	; 0x1252 <handle_write>
    17fa:	88 23       	and	r24, r24
    17fc:	09 f4       	brne	.+2      	; 0x1800 <CONF_enter+0xbe>
    17fe:	ae cf       	rjmp	.-164    	; 0x175c <CONF_enter+0x1a>
					state=CONF_REPLY;
    1800:	cb e0       	ldi	r28, 0x0B	; 11
    1802:	b1 cf       	rjmp	.-158    	; 0x1766 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1804:	60 e2       	ldi	r22, 0x20	; 32
    1806:	74 e0       	ldi	r23, 0x04	; 4
    1808:	80 e8       	ldi	r24, 0x80	; 128
    180a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <CONNECT>
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <CONF_enter+0xd2>
    1812:	a6 cf       	rjmp	.-180    	; 0x1760 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    1814:	c2 e0       	ldi	r28, 0x02	; 2
    1816:	a7 cf       	rjmp	.-178    	; 0x1766 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    1818:	60 e2       	ldi	r22, 0x20	; 32
    181a:	74 e0       	ldi	r23, 0x04	; 4
    181c:	80 e8       	ldi	r24, 0x80	; 128
    181e:	48 e5       	ldi	r20, 0x58	; 88
    1820:	53 e0       	ldi	r21, 0x03	; 3
    1822:	0e 94 85 12 	call	0x250a	; 0x250a <handle_sample>
    1826:	88 23       	and	r24, r24
    1828:	09 f4       	brne	.+2      	; 0x182c <CONF_enter+0xea>
    182a:	9c cf       	rjmp	.-200    	; 0x1764 <CONF_enter+0x22>
					state=CONF_REPLY;
    182c:	cb e0       	ldi	r28, 0x0B	; 11
    182e:	9b cf       	rjmp	.-202    	; 0x1766 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1830:	68 e5       	ldi	r22, 0x58	; 88
    1832:	73 e0       	ldi	r23, 0x03	; 3
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    183a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    183c:	94 cf       	rjmp	.-216    	; 0x1766 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    183e:	63 ee       	ldi	r22, 0xE3	; 227
    1840:	73 e0       	ldi	r23, 0x03	; 3
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1848:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    184a:	8d cf       	rjmp	.-230    	; 0x1766 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    184c:	6d ee       	ldi	r22, 0xED	; 237
    184e:	73 e0       	ldi	r23, 0x03	; 3
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1856:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1858:	86 cf       	rjmp	.-244    	; 0x1766 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    185a:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    185e:	6a ef       	ldi	r22, 0xFA	; 250
    1860:	73 e0       	ldi	r23, 0x03	; 3
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1868:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    186a:	7d cf       	rjmp	.-262    	; 0x1766 <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00003a28 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	80 e8       	ldi	r24, 0x80	; 128
    3a30:	04 e0       	ldi	r16, 0x04	; 4
    3a32:	10 e0       	ldi	r17, 0x00	; 0
    3a34:	2e e0       	ldi	r18, 0x0E	; 14
    3a36:	35 e0       	ldi	r19, 0x05	; 5
    3a38:	40 e0       	ldi	r20, 0x00	; 0
    3a3a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <strncmp>
    3a3e:	89 2b       	or	r24, r25
    3a40:	11 f4       	brne	.+4      	; 0x3a46 <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    3a42:	84 e0       	ldi	r24, 0x04	; 4
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    3a46:	83 e0       	ldi	r24, 0x03	; 3
    3a48:	1f 91       	pop	r17
    3a4a:	0f 91       	pop	r16
    3a4c:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001cb6 <CON_RN2483>:
	}else{
		return false;
	}
}

static bool CON_RN2483(){
    1cb6:	6f 92       	push	r6
    1cb8:	7f 92       	push	r7
    1cba:	8f 92       	push	r8
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1cc6:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1cc8:	c2 30       	cpi	r28, 0x02	; 2
    1cca:	19 f1       	breq	.+70     	; 0x1d12 <CON_RN2483+0x5c>
    1ccc:	28 f4       	brcc	.+10     	; 0x1cd8 <CON_RN2483+0x22>
    1cce:	cc 23       	and	r28, r28
    1cd0:	49 f0       	breq	.+18     	; 0x1ce4 <CON_RN2483+0x2e>
    1cd2:	c1 30       	cpi	r28, 0x01	; 1
    1cd4:	a1 f0       	breq	.+40     	; 0x1cfe <CON_RN2483+0x48>
    1cd6:	f8 cf       	rjmp	.-16     	; 0x1cc8 <CON_RN2483+0x12>
    1cd8:	c3 30       	cpi	r28, 0x03	; 3
    1cda:	09 f1       	breq	.+66     	; 0x1d1e <CON_RN2483+0x68>
    1cdc:	c4 30       	cpi	r28, 0x04	; 4
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <CON_RN2483+0x2c>
    1ce0:	4d c0       	rjmp	.+154    	; 0x1d7c <CON_RN2483+0xc6>
    1ce2:	f2 cf       	rjmp	.-28     	; 0x1cc8 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1ce4:	0e 94 9d 1a 	call	0x353a	; 0x353a <uart0_hal_init>
				rn2483_init();
    1ce8:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <rn2483_init>
				LM_reset_module();
    1cec:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1cf0:	63 e1       	ldi	r22, 0x13	; 19
    1cf2:	75 e0       	ldi	r23, 0x05	; 5
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1cfa:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1cfc:	e5 cf       	rjmp	.-54     	; 0x1cc8 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1cfe:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <uart1_hal_message_ready>
    1d02:	88 23       	and	r24, r24
    1d04:	09 f3       	breq	.-62     	; 0x1cc8 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1d06:	80 e2       	ldi	r24, 0x20	; 32
    1d08:	94 e0       	ldi	r25, 0x04	; 4
    1d0a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1d0e:	c2 e0       	ldi	r28, 0x02	; 2
    1d10:	db cf       	rjmp	.-74     	; 0x1cc8 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1d12:	80 e2       	ldi	r24, 0x20	; 32
    1d14:	94 e0       	ldi	r25, 0x04	; 4
    1d16:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CON_RN2483_parse>
    1d1a:	c8 2f       	mov	r28, r24
			break;
    1d1c:	d5 cf       	rjmp	.-86     	; 0x1cc8 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1d1e:	80 e2       	ldi	r24, 0x20	; 32
    1d20:	94 e0       	ldi	r25, 0x04	; 4
    1d22:	6c 01       	movw	r12, r24
    1d24:	20 e8       	ldi	r18, 0x80	; 128
    1d26:	e2 2e       	mov	r14, r18
    1d28:	2f 93       	push	r18
    1d2a:	df 92       	push	r13
    1d2c:	8f 93       	push	r24
    1d2e:	89 e4       	ldi	r24, 0x49	; 73
    1d30:	95 e0       	ldi	r25, 0x05	; 5
    1d32:	a0 e0       	ldi	r26, 0x00	; 0
    1d34:	af 93       	push	r26
    1d36:	9f 93       	push	r25
    1d38:	8f 93       	push	r24
    1d3a:	c8 e5       	ldi	r28, 0x58	; 88
    1d3c:	d3 e0       	ldi	r29, 0x03	; 3
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1d46:	3e 01       	movw	r6, r28
    1d48:	20 e8       	ldi	r18, 0x80	; 128
    1d4a:	82 2e       	mov	r8, r18
    1d4c:	88 2d       	mov	r24, r8
    1d4e:	b3 01       	movw	r22, r6
    1d50:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1d54:	ae 01       	movw	r20, r28
    1d56:	6c 2d       	mov	r22, r12
    1d58:	7d 2d       	mov	r23, r13
    1d5a:	8e 2d       	mov	r24, r14
    1d5c:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    1d60:	88 2d       	mov	r24, r8
    1d62:	b3 01       	movw	r22, r6
    1d64:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1d68:	8d b7       	in	r24, 0x3d	; 61
    1d6a:	9e b7       	in	r25, 0x3e	; 62
    1d6c:	08 96       	adiw	r24, 0x08	; 8
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	9e bf       	out	0x3e, r25	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1d78:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1d7a:	a6 cf       	rjmp	.-180    	; 0x1cc8 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1d7c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1d80:	6f e4       	ldi	r22, 0x4F	; 79
    1d82:	75 e0       	ldi	r23, 0x05	; 5
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	0e 94 b0 13 	call	0x2760	; 0x2760 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	8f 90       	pop	r8
    1d98:	7f 90       	pop	r7
    1d9a:	6f 90       	pop	r6
    1d9c:	08 95       	ret

Disassembly of section .text.CONNECT:

00002e90 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	64 97       	sbiw	r28, 0x14	; 20
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    2ea4:	21 e0       	ldi	r18, 0x01	; 1
    2ea6:	ae 01       	movw	r20, r28
    2ea8:	4f 5f       	subi	r20, 0xFF	; 255
    2eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    2eac:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    2eb0:	88 23       	and	r24, r24
    2eb2:	79 f0       	breq	.+30     	; 0x2ed2 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    2eb4:	be 01       	movw	r22, r28
    2eb6:	6f 5f       	subi	r22, 0xFF	; 255
    2eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eba:	80 e8       	ldi	r24, 0x80	; 128
    2ebc:	2f e6       	ldi	r18, 0x6F	; 111
    2ebe:	35 e0       	ldi	r19, 0x05	; 5
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    2ec6:	89 2b       	or	r24, r25
    2ec8:	19 f4       	brne	.+6      	; 0x2ed0 <CONNECT+0x40>
		return CON_RN2483();
    2eca:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <CON_RN2483>
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <CONNECT+0x42>
	}else{
		return false;
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ed2:	64 96       	adiw	r28, 0x14	; 20
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

Disassembly of section .text.read_cols:

00002100 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	a3 97       	sbiw	r28, 0x23	; 35
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2120:	63 e2       	ldi	r22, 0x23	; 35
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <EM_get_collections>
	res[0]='\0';
    212a:	f7 01       	movw	r30, r14
    212c:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    212e:	10 e0       	ldi	r17, 0x00	; 0
    2130:	35 c0       	rjmp	.+106    	; 0x219c <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    2132:	81 2f       	mov	r24, r17
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	fc 01       	movw	r30, r24
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	e8 0f       	add	r30, r24
    2142:	f9 1f       	adc	r31, r25
    2144:	21 e0       	ldi	r18, 0x01	; 1
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	2c 0f       	add	r18, r28
    214a:	3d 1f       	adc	r19, r29
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	23 81       	ldd	r18, Z+3	; 0x03
    2152:	2f 93       	push	r18
    2154:	22 81       	ldd	r18, Z+2	; 0x02
    2156:	2f 93       	push	r18
    2158:	21 81       	ldd	r18, Z+1	; 0x01
    215a:	2f 93       	push	r18
    215c:	20 81       	ld	r18, Z
    215e:	2f 93       	push	r18
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	9f 93       	push	r25
    2164:	8f 93       	push	r24
    2166:	84 ef       	ldi	r24, 0xF4	; 244
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	a0 e0       	ldi	r26, 0x00	; 0
    216c:	af 93       	push	r26
    216e:	9f 93       	push	r25
    2170:	8f 93       	push	r24
    2172:	0f 2e       	mov	r0, r31
    2174:	fc ea       	ldi	r31, 0xAC	; 172
    2176:	cf 2e       	mov	r12, r31
    2178:	f6 e0       	ldi	r31, 0x06	; 6
    217a:	df 2e       	mov	r13, r31
    217c:	f0 2d       	mov	r31, r0
    217e:	df 92       	push	r13
    2180:	cf 92       	push	r12
    2182:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
		strcat(res, arg);
    2186:	a6 01       	movw	r20, r12
    2188:	60 e8       	ldi	r22, 0x80	; 128
    218a:	c7 01       	movw	r24, r14
    218c:	0e 94 97 1c 	call	0x392e	; 0x392e <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    2190:	1f 5f       	subi	r17, 0xFF	; 255
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	17 30       	cpi	r17, 0x07	; 7
    219e:	48 f2       	brcs	.-110    	; 0x2132 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    21a0:	a3 96       	adiw	r28, 0x23	; 35
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	1f 91       	pop	r17
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	08 95       	ret

Disassembly of section .text.read_time:

000026ce <read_time>:

static void read_time(char res[]){
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <read_time+0xa>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <read_time+0xc>
    26da:	00 d0       	rcall	.+0      	; 0x26dc <read_time+0xe>
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	18 2f       	mov	r17, r24
    26e2:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    26e4:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <TWI_HAL_init>
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	0e 94 01 0b 	call	0x1602	; 0x1602 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    26f0:	88 23       	and	r24, r24
    26f2:	51 f0       	breq	.+20     	; 0x2708 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    26f4:	24 e1       	ldi	r18, 0x14	; 20
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e0       	ldi	r20, 0x0A	; 10
    26fa:	52 e0       	ldi	r21, 0x02	; 2
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	81 2f       	mov	r24, r17
    2700:	90 2f       	mov	r25, r16
    2702:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
    2706:	21 c0       	rjmp	.+66     	; 0x274a <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    2708:	59 81       	ldd	r21, Y+1	; 0x01
    270a:	4a 81       	ldd	r20, Y+2	; 0x02
    270c:	3b 81       	ldd	r19, Y+3	; 0x03
    270e:	2c 81       	ldd	r18, Y+4	; 0x04
    2710:	9d 81       	ldd	r25, Y+5	; 0x05
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	1f 92       	push	r1
    2716:	5f 93       	push	r21
    2718:	1f 92       	push	r1
    271a:	4f 93       	push	r20
    271c:	1f 92       	push	r1
    271e:	3f 93       	push	r19
    2720:	1f 92       	push	r1
    2722:	2f 93       	push	r18
    2724:	1f 92       	push	r1
    2726:	9f 93       	push	r25
    2728:	1f 92       	push	r1
    272a:	8f 93       	push	r24
    272c:	8e e1       	ldi	r24, 0x1E	; 30
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	a0 e0       	ldi	r26, 0x00	; 0
    2732:	af 93       	push	r26
    2734:	9f 93       	push	r25
    2736:	8f 93       	push	r24
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
	}
}
    274a:	26 96       	adiw	r28, 0x06	; 6
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	08 95       	ret

Disassembly of section .text.write_deveui:

00002864 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    2864:	cf 92       	push	r12
    2866:	df 92       	push	r13
    2868:	ef 92       	push	r14
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2872:	22 e0       	ldi	r18, 0x02	; 2
    2874:	4c ea       	ldi	r20, 0xAC	; 172
    2876:	56 e0       	ldi	r21, 0x06	; 6
    2878:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    287c:	c8 2f       	mov	r28, r24
    287e:	88 23       	and	r24, r24
    2880:	29 f1       	breq	.+74     	; 0x28cc <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    2882:	8c ea       	ldi	r24, 0xAC	; 172
    2884:	96 e0       	ldi	r25, 0x06	; 6
    2886:	6c 01       	movw	r12, r24
    2888:	20 e8       	ldi	r18, 0x80	; 128
    288a:	e2 2e       	mov	r14, r18
    288c:	8e 2d       	mov	r24, r14
    288e:	b6 01       	movw	r22, r12
    2890:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2894:	40 97       	sbiw	r24, 0x10	; 16
    2896:	c9 f4       	brne	.+50     	; 0x28ca <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2898:	8e 2d       	mov	r24, r14
    289a:	b6 01       	movw	r22, r12
    289c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <EM_set_deveui>
    28a0:	c8 2f       	mov	r28, r24
    28a2:	81 11       	cpse	r24, r1
    28a4:	09 c0       	rjmp	.+18     	; 0x28b8 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    28a6:	27 e0       	ldi	r18, 0x07	; 7
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4c e3       	ldi	r20, 0x3C	; 60
    28ac:	52 e0       	ldi	r21, 0x02	; 2
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	c8 01       	movw	r24, r16
    28b2:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return false;
    28b6:	0a c0       	rjmp	.+20     	; 0x28cc <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    28b8:	28 e0       	ldi	r18, 0x08	; 8
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	43 e4       	ldi	r20, 0x43	; 67
    28be:	52 e0       	ldi	r21, 0x02	; 2
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	c8 01       	movw	r24, r16
    28c4:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    28ca:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    28cc:	8c 2f       	mov	r24, r28
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ef 90       	pop	r14
    28d6:	df 90       	pop	r13
    28d8:	cf 90       	pop	r12
    28da:	08 95       	ret

Disassembly of section .text.write_appeui:

000028dc <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    28ea:	22 e0       	ldi	r18, 0x02	; 2
    28ec:	4c ea       	ldi	r20, 0xAC	; 172
    28ee:	56 e0       	ldi	r21, 0x06	; 6
    28f0:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    28f4:	c8 2f       	mov	r28, r24
    28f6:	88 23       	and	r24, r24
    28f8:	29 f1       	breq	.+74     	; 0x2944 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    28fa:	8c ea       	ldi	r24, 0xAC	; 172
    28fc:	96 e0       	ldi	r25, 0x06	; 6
    28fe:	6c 01       	movw	r12, r24
    2900:	20 e8       	ldi	r18, 0x80	; 128
    2902:	e2 2e       	mov	r14, r18
    2904:	8e 2d       	mov	r24, r14
    2906:	b6 01       	movw	r22, r12
    2908:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    290c:	40 97       	sbiw	r24, 0x10	; 16
    290e:	c9 f4       	brne	.+50     	; 0x2942 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    2910:	8e 2d       	mov	r24, r14
    2912:	b6 01       	movw	r22, r12
    2914:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <EM_set_appeui>
    2918:	c8 2f       	mov	r28, r24
    291a:	81 11       	cpse	r24, r1
    291c:	09 c0       	rjmp	.+18     	; 0x2930 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    291e:	27 e0       	ldi	r18, 0x07	; 7
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	4c e3       	ldi	r20, 0x3C	; 60
    2924:	52 e0       	ldi	r21, 0x02	; 2
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	c8 01       	movw	r24, r16
    292a:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return false;
    292e:	0a c0       	rjmp	.+20     	; 0x2944 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2930:	28 e0       	ldi	r18, 0x08	; 8
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	43 e4       	ldi	r20, 0x43	; 67
    2936:	52 e0       	ldi	r21, 0x02	; 2
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	c8 01       	movw	r24, r16
    293c:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    2940:	01 c0       	rjmp	.+2      	; 0x2944 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2942:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2944:	8c 2f       	mov	r24, r28
    2946:	cf 91       	pop	r28
    2948:	1f 91       	pop	r17
    294a:	0f 91       	pop	r16
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	08 95       	ret

Disassembly of section .text.write_appkey:

00002954 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2962:	22 e0       	ldi	r18, 0x02	; 2
    2964:	4c ea       	ldi	r20, 0xAC	; 172
    2966:	56 e0       	ldi	r21, 0x06	; 6
    2968:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    296c:	c8 2f       	mov	r28, r24
    296e:	88 23       	and	r24, r24
    2970:	29 f1       	breq	.+74     	; 0x29bc <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    2972:	8c ea       	ldi	r24, 0xAC	; 172
    2974:	96 e0       	ldi	r25, 0x06	; 6
    2976:	6c 01       	movw	r12, r24
    2978:	20 e8       	ldi	r18, 0x80	; 128
    297a:	e2 2e       	mov	r14, r18
    297c:	8e 2d       	mov	r24, r14
    297e:	b6 01       	movw	r22, r12
    2980:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2984:	80 97       	sbiw	r24, 0x20	; 32
    2986:	c9 f4       	brne	.+50     	; 0x29ba <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2988:	8e 2d       	mov	r24, r14
    298a:	b6 01       	movw	r22, r12
    298c:	0e 94 13 1b 	call	0x3626	; 0x3626 <EM_set_appkey>
    2990:	c8 2f       	mov	r28, r24
    2992:	81 11       	cpse	r24, r1
    2994:	09 c0       	rjmp	.+18     	; 0x29a8 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2996:	27 e0       	ldi	r18, 0x07	; 7
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4c e3       	ldi	r20, 0x3C	; 60
    299c:	52 e0       	ldi	r21, 0x02	; 2
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	c8 01       	movw	r24, r16
    29a2:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return false;
    29a6:	0a c0       	rjmp	.+20     	; 0x29bc <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    29a8:	28 e0       	ldi	r18, 0x08	; 8
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	43 e4       	ldi	r20, 0x43	; 67
    29ae:	52 e0       	ldi	r21, 0x02	; 2
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	c8 01       	movw	r24, r16
    29b4:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    29ba:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    29bc:	8c 2f       	mov	r24, r28
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	ef 90       	pop	r14
    29c6:	df 90       	pop	r13
    29c8:	cf 90       	pop	r12
    29ca:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

000030bc <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    30c4:	22 e0       	ldi	r18, 0x02	; 2
    30c6:	4c ea       	ldi	r20, 0xAC	; 172
    30c8:	56 e0       	ldi	r21, 0x06	; 6
    30ca:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    30ce:	c8 2f       	mov	r28, r24
    30d0:	88 23       	and	r24, r24
    30d2:	a9 f0       	breq	.+42     	; 0x30fe <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    30d4:	8c ea       	ldi	r24, 0xAC	; 172
    30d6:	96 e0       	ldi	r25, 0x06	; 6
    30d8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <is_float>
    30dc:	c8 2f       	mov	r28, r24
    30de:	88 23       	and	r24, r24
    30e0:	71 f0       	breq	.+28     	; 0x30fe <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    30e2:	8c ea       	ldi	r24, 0xAC	; 172
    30e4:	96 e0       	ldi	r25, 0x06	; 6
    30e6:	0e 94 11 18 	call	0x3022	; 0x3022 <str2flaot>
	EM_set_ppmfactor(val);
    30ea:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    30ee:	28 e0       	ldi	r18, 0x08	; 8
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	43 e4       	ldi	r20, 0x43	; 67
    30f4:	52 e0       	ldi	r21, 0x02	; 2
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	c8 01       	movw	r24, r16
    30fa:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
}
    30fe:	8c 2f       	mov	r24, r28
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	08 95       	ret

Disassembly of section .text.write_RRL:

00003108 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3110:	22 e0       	ldi	r18, 0x02	; 2
    3112:	4c ea       	ldi	r20, 0xAC	; 172
    3114:	56 e0       	ldi	r21, 0x06	; 6
    3116:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    311a:	c8 2f       	mov	r28, r24
    311c:	88 23       	and	r24, r24
    311e:	a9 f0       	breq	.+42     	; 0x314a <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    3120:	8c ea       	ldi	r24, 0xAC	; 172
    3122:	96 e0       	ldi	r25, 0x06	; 6
    3124:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <is_float>
    3128:	c8 2f       	mov	r28, r24
    312a:	88 23       	and	r24, r24
    312c:	71 f0       	breq	.+28     	; 0x314a <write_RRL+0x42>
	
	float val=str2flaot(arg);
    312e:	8c ea       	ldi	r24, 0xAC	; 172
    3130:	96 e0       	ldi	r25, 0x06	; 6
    3132:	0e 94 11 18 	call	0x3022	; 0x3022 <str2flaot>
	EM_set_RRL(val);
    3136:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    313a:	28 e0       	ldi	r18, 0x08	; 8
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	43 e4       	ldi	r20, 0x43	; 67
    3140:	52 e0       	ldi	r21, 0x02	; 2
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	c8 01       	movw	r24, r16
    3146:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
}
    314a:	8c 2f       	mov	r24, r28
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	08 95       	ret

Disassembly of section .text.write_VCC:

00003154 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    315c:	22 e0       	ldi	r18, 0x02	; 2
    315e:	4c ea       	ldi	r20, 0xAC	; 172
    3160:	56 e0       	ldi	r21, 0x06	; 6
    3162:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    3166:	c8 2f       	mov	r28, r24
    3168:	88 23       	and	r24, r24
    316a:	a9 f0       	breq	.+42     	; 0x3196 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    316c:	8c ea       	ldi	r24, 0xAC	; 172
    316e:	96 e0       	ldi	r25, 0x06	; 6
    3170:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <is_float>
    3174:	c8 2f       	mov	r28, r24
    3176:	88 23       	and	r24, r24
    3178:	71 f0       	breq	.+28     	; 0x3196 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    317a:	8c ea       	ldi	r24, 0xAC	; 172
    317c:	96 e0       	ldi	r25, 0x06	; 6
    317e:	0e 94 11 18 	call	0x3022	; 0x3022 <str2flaot>
	EM_set_Vcc(val);
    3182:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    3186:	28 e0       	ldi	r18, 0x08	; 8
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	43 e4       	ldi	r20, 0x43	; 67
    318c:	52 e0       	ldi	r21, 0x02	; 2
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	c8 01       	movw	r24, r16
    3192:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
}
    3196:	8c 2f       	mov	r24, r28
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	08 95       	ret

Disassembly of section .text.get_time_par:

000037aa <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	00 d0       	rcall	.+0      	; 0x37b0 <get_time_par+0x6>
    37b0:	1f 92       	push	r1
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    37b6:	fc 01       	movw	r30, r24
    37b8:	e6 0f       	add	r30, r22
    37ba:	f1 1d       	adc	r31, r1
    37bc:	80 81       	ld	r24, Z
    37be:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    37c0:	81 81       	ldd	r24, Z+1	; 0x01
    37c2:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    37c4:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    37c6:	be 01       	movw	r22, r28
    37c8:	6f 5f       	subi	r22, 0xFF	; 255
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
    37cc:	80 e8       	ldi	r24, 0x80	; 128
    37ce:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
}
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	08 95       	ret

Disassembly of section .text.write_cols:

00001870 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	a3 97       	sbiw	r28, 0x23	; 35
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	3b 01       	movw	r6, r22
    18a0:	88 2e       	mov	r8, r24
    18a2:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    18a4:	22 e0       	ldi	r18, 0x02	; 2
    18a6:	4c ea       	ldi	r20, 0xAC	; 172
    18a8:	56 e0       	ldi	r21, 0x06	; 6
    18aa:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    18ae:	18 2f       	mov	r17, r24
    18b0:	88 23       	and	r24, r24
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <write_cols+0x46>
    18b4:	5d c0       	rjmp	.+186    	; 0x1970 <write_cols+0x100>
	index=atoi(arg);
    18b6:	8c ea       	ldi	r24, 0xAC	; 172
    18b8:	96 e0       	ldi	r25, 0x06	; 6
    18ba:	6c 01       	movw	r12, r24
    18bc:	20 e8       	ldi	r18, 0x80	; 128
    18be:	e2 2e       	mov	r14, r18
    18c0:	8e 2d       	mov	r24, r14
    18c2:	b6 01       	movw	r22, r12
    18c4:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
	if(index<1 || index>7) return false;
    18c8:	0f ef       	ldi	r16, 0xFF	; 255
    18ca:	08 0f       	add	r16, r24
    18cc:	07 30       	cpi	r16, 0x07	; 7
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <write_cols+0x62>
    18d0:	4a c0       	rjmp	.+148    	; 0x1966 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    18d2:	23 e0       	ldi	r18, 0x03	; 3
    18d4:	4c ea       	ldi	r20, 0xAC	; 172
    18d6:	56 e0       	ldi	r21, 0x06	; 6
    18d8:	88 2d       	mov	r24, r8
    18da:	b3 01       	movw	r22, r6
    18dc:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    18e0:	18 2f       	mov	r17, r24
    18e2:	88 23       	and	r24, r24
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <write_cols+0x78>
    18e6:	44 c0       	rjmp	.+136    	; 0x1970 <write_cols+0x100>
	samplings=atoi(arg);
    18e8:	8e 2d       	mov	r24, r14
    18ea:	b6 01       	movw	r22, r12
    18ec:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
    18f0:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    18f2:	02 97       	sbiw	r24, 0x02	; 2
    18f4:	8b 32       	cpi	r24, 0x2B	; 43
    18f6:	91 40       	sbci	r25, 0x01	; 1
    18f8:	c0 f5       	brcc	.+112    	; 0x196a <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    18fa:	24 e0       	ldi	r18, 0x04	; 4
    18fc:	4c ea       	ldi	r20, 0xAC	; 172
    18fe:	56 e0       	ldi	r21, 0x06	; 6
    1900:	88 2d       	mov	r24, r8
    1902:	b3 01       	movw	r22, r6
    1904:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    1908:	18 2f       	mov	r17, r24
    190a:	88 23       	and	r24, r24
    190c:	89 f1       	breq	.+98     	; 0x1970 <write_cols+0x100>
	samplingInterval=atoi(arg);
    190e:	8e 2d       	mov	r24, r14
    1910:	b6 01       	movw	r22, r12
    1912:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
    1916:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1918:	02 97       	sbiw	r24, 0x02	; 2
    191a:	87 35       	cpi	r24, 0x57	; 87
    191c:	92 40       	sbci	r25, 0x02	; 2
    191e:	38 f5       	brcc	.+78     	; 0x196e <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1920:	63 e2       	ldi	r22, 0x23	; 35
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	7c 01       	movw	r14, r24
    1928:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <EM_get_collections>
	
	cols[index].samplings=samplings;
    192c:	80 2f       	mov	r24, r16
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	ee 0f       	add	r30, r30
    1934:	ff 1f       	adc	r31, r31
    1936:	ee 0f       	add	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	e8 0f       	add	r30, r24
    193c:	f9 1f       	adc	r31, r25
    193e:	ee 0d       	add	r30, r14
    1940:	ff 1d       	adc	r31, r15
    1942:	51 82       	std	Z+1, r5	; 0x01
    1944:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1946:	d3 82       	std	Z+3, r13	; 0x03
    1948:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    194a:	b7 01       	movw	r22, r14
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	43 e2       	ldi	r20, 0x23	; 35
    1950:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1954:	28 e0       	ldi	r18, 0x08	; 8
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	43 e4       	ldi	r20, 0x43	; 67
    195a:	52 e0       	ldi	r21, 0x02	; 2
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	c5 01       	movw	r24, r10
    1960:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;	
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    196e:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1970:	81 2f       	mov	r24, r17
    1972:	a3 96       	adiw	r28, 0x23	; 35
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	bf 90       	pop	r11
    1990:	af 90       	pop	r10
    1992:	8f 90       	pop	r8
    1994:	7f 90       	pop	r7
    1996:	6f 90       	pop	r6
    1998:	5f 90       	pop	r5
    199a:	4f 90       	pop	r4
    199c:	08 95       	ret

Disassembly of section .text.write_heat_up:

000031a0 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    31a8:	22 e0       	ldi	r18, 0x02	; 2
    31aa:	4c ea       	ldi	r20, 0xAC	; 172
    31ac:	56 e0       	ldi	r21, 0x06	; 6
    31ae:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    31b2:	c8 2f       	mov	r28, r24
    31b4:	88 23       	and	r24, r24
    31b6:	a9 f0       	breq	.+42     	; 0x31e2 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    31b8:	6c ea       	ldi	r22, 0xAC	; 172
    31ba:	76 e0       	ldi	r23, 0x06	; 6
    31bc:	80 e8       	ldi	r24, 0x80	; 128
    31be:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
	
	if(val<1 || val>200) return false;
    31c2:	9f ef       	ldi	r25, 0xFF	; 255
    31c4:	98 0f       	add	r25, r24
    31c6:	98 3c       	cpi	r25, 0xC8	; 200
    31c8:	58 f4       	brcc	.+22     	; 0x31e0 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    31ca:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    31ce:	28 e0       	ldi	r18, 0x08	; 8
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	43 e4       	ldi	r20, 0x43	; 67
    31d4:	52 e0       	ldi	r21, 0x02	; 2
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	c8 01       	movw	r24, r16
    31da:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
    31de:	01 c0       	rjmp	.+2      	; 0x31e2 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    31e0:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    31e2:	8c 2f       	mov	r24, r28
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	08 95       	ret

Disassembly of section .text.write_air_pump:

00002f36 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2f3e:	22 e0       	ldi	r18, 0x02	; 2
    2f40:	4c ea       	ldi	r20, 0xAC	; 172
    2f42:	56 e0       	ldi	r21, 0x06	; 6
    2f44:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    2f48:	c8 2f       	mov	r28, r24
    2f4a:	88 23       	and	r24, r24
    2f4c:	b9 f0       	breq	.+46     	; 0x2f7c <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    2f4e:	6c ea       	ldi	r22, 0xAC	; 172
    2f50:	76 e0       	ldi	r23, 0x06	; 6
    2f52:	80 e8       	ldi	r24, 0x80	; 128
    2f54:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
	
	if(val<10 || val>1000) return false;
    2f58:	9c 01       	movw	r18, r24
    2f5a:	2a 50       	subi	r18, 0x0A	; 10
    2f5c:	31 09       	sbc	r19, r1
    2f5e:	2f 3d       	cpi	r18, 0xDF	; 223
    2f60:	33 40       	sbci	r19, 0x03	; 3
    2f62:	58 f4       	brcc	.+22     	; 0x2f7a <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    2f64:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    2f68:	28 e0       	ldi	r18, 0x08	; 8
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	43 e4       	ldi	r20, 0x43	; 67
    2f6e:	52 e0       	ldi	r21, 0x02	; 2
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	c8 01       	movw	r24, r16
    2f74:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<10 || val>1000) return false;
    2f7a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    2f7c:	8c 2f       	mov	r24, r28
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000031ec <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    31f4:	22 e0       	ldi	r18, 0x02	; 2
    31f6:	4c ea       	ldi	r20, 0xAC	; 172
    31f8:	56 e0       	ldi	r21, 0x06	; 6
    31fa:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    31fe:	c8 2f       	mov	r28, r24
    3200:	88 23       	and	r24, r24
    3202:	a9 f0       	breq	.+42     	; 0x322e <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    3204:	6c ea       	ldi	r22, 0xAC	; 172
    3206:	76 e0       	ldi	r23, 0x06	; 6
    3208:	80 e8       	ldi	r24, 0x80	; 128
    320a:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
	
	if(val<6 || val>24) return false;
    320e:	9a ef       	ldi	r25, 0xFA	; 250
    3210:	98 0f       	add	r25, r24
    3212:	93 31       	cpi	r25, 0x13	; 19
    3214:	58 f4       	brcc	.+22     	; 0x322c <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    3216:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    321a:	28 e0       	ldi	r18, 0x08	; 8
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	43 e4       	ldi	r20, 0x43	; 67
    3220:	52 e0       	ldi	r21, 0x02	; 2
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	c8 01       	movw	r24, r16
    3226:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
    322a:	01 c0       	rjmp	.+2      	; 0x322e <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    322c:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    322e:	8c 2f       	mov	r24, r28
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	08 95       	ret

Disassembly of section .text.write_reset:

00001d9e <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	a3 97       	sbiw	r28, 0x23	; 35
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    1db8:	6b e4       	ldi	r22, 0x4B	; 75
    1dba:	72 e0       	ldi	r23, 0x02	; 2
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    1dc2:	6b e4       	ldi	r22, 0x4B	; 75
    1dc4:	72 e0       	ldi	r23, 0x02	; 2
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1dcc:	6c e5       	ldi	r22, 0x5C	; 92
    1dce:	72 e0       	ldi	r23, 0x02	; 2
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	0e 94 13 1b 	call	0x3626	; 0x3626 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	80 e8       	ldi	r24, 0x80	; 128
    1ddc:	9f e3       	ldi	r25, 0x3F	; 63
    1dde:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	70 e4       	ldi	r23, 0x40	; 64
    1de6:	8c e1       	ldi	r24, 0x1C	; 28
    1de8:	95 e4       	ldi	r25, 0x45	; 69
    1dea:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <EM_set_RRL>
	EM_set_Vcc(5.00);
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	80 ea       	ldi	r24, 0xA0	; 160
    1df4:	90 e4       	ldi	r25, 0x40	; 64
    1df6:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <EM_set_heat_up_time>
	EM_set_air_pump_time(10);
    1e00:	8a e0       	ldi	r24, 0x0A	; 10
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1e08:	86 e0       	ldi	r24, 0x06	; 6
    1e0a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	1a c0       	rjmp	.+52     	; 0x1e46 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1e12:	e8 2f       	mov	r30, r24
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	9f 01       	movw	r18, r30
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	21 e0       	ldi	r18, 0x01	; 1
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	2c 0f       	add	r18, r28
    1e2a:	3d 1f       	adc	r19, r29
    1e2c:	e2 0f       	add	r30, r18
    1e2e:	f3 1f       	adc	r31, r19
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1e34:	22 e0       	ldi	r18, 0x02	; 2
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	31 83       	std	Z+1, r19	; 0x01
    1e3a:	20 83       	st	Z, r18
		cols[i].samplingInterval=10;
    1e3c:	2a e0       	ldi	r18, 0x0A	; 10
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	33 83       	std	Z+3, r19	; 0x03
    1e42:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(10);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	87 30       	cpi	r24, 0x07	; 7
    1e48:	20 f3       	brcs	.-56     	; 0x1e12 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=10;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1e4a:	be 01       	movw	r22, r28
    1e4c:	6f 5f       	subi	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	80 e8       	ldi	r24, 0x80	; 128
    1e52:	43 e2       	ldi	r20, 0x23	; 35
    1e54:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1e58:	23 e1       	ldi	r18, 0x13	; 19
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4d e7       	ldi	r20, 0x7D	; 125
    1e5e:	52 e0       	ldi	r21, 0x02	; 2
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
}
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	a3 96       	adiw	r28, 0x23	; 35
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	08 95       	ret

Disassembly of section .text.write_time:

00001bb8 <write_time>:

static bool write_time(const char cmd[], char res[]){
    1bb8:	6f 92       	push	r6
    1bba:	7f 92       	push	r7
    1bbc:	8f 92       	push	r8
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <write_time+0x16>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <write_time+0x18>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <write_time+0x1a>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	3b 01       	movw	r6, r22
    1bd8:	88 2e       	mov	r8, r24
    1bda:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    1bdc:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    1be0:	22 e0       	ldi	r18, 0x02	; 2
    1be2:	4c ea       	ldi	r20, 0xAC	; 172
    1be4:	56 e0       	ldi	r21, 0x06	; 6
    1be6:	88 2d       	mov	r24, r8
    1be8:	b3 01       	movw	r22, r6
    1bea:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    1bee:	18 2f       	mov	r17, r24
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <write_time+0x3e>
    1bf4:	4e c0       	rjmp	.+156    	; 0x1c92 <write_time+0xda>
	if(strlen(arg)!=17){
    1bf6:	6c ea       	ldi	r22, 0xAC	; 172
    1bf8:	76 e0       	ldi	r23, 0x06	; 6
    1bfa:	80 e8       	ldi	r24, 0x80	; 128
    1bfc:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    1c00:	41 97       	sbiw	r24, 0x11	; 17
    1c02:	49 f0       	breq	.+18     	; 0x1c16 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    1c04:	25 e2       	ldi	r18, 0x25	; 37
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e9       	ldi	r20, 0x90	; 144
    1c0a:	52 e0       	ldi	r21, 0x02	; 2
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	c7 01       	movw	r24, r14
    1c10:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    1c14:	3e c0       	rjmp	.+124    	; 0x1c92 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	8c ea       	ldi	r24, 0xAC	; 172
    1c1a:	96 e0       	ldi	r25, 0x06	; 6
    1c1c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <get_time_par>
    1c20:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	8c ea       	ldi	r24, 0xAC	; 172
    1c26:	96 e0       	ldi	r25, 0x06	; 6
    1c28:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <get_time_par>
    1c2c:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    1c2e:	66 e0       	ldi	r22, 0x06	; 6
    1c30:	8c ea       	ldi	r24, 0xAC	; 172
    1c32:	96 e0       	ldi	r25, 0x06	; 6
    1c34:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <get_time_par>
    1c38:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    1c3a:	69 e0       	ldi	r22, 0x09	; 9
    1c3c:	8c ea       	ldi	r24, 0xAC	; 172
    1c3e:	96 e0       	ldi	r25, 0x06	; 6
    1c40:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <get_time_par>
    1c44:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    1c46:	6c e0       	ldi	r22, 0x0C	; 12
    1c48:	8c ea       	ldi	r24, 0xAC	; 172
    1c4a:	96 e0       	ldi	r25, 0x06	; 6
    1c4c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <get_time_par>
    1c50:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    1c52:	6f e0       	ldi	r22, 0x0F	; 15
    1c54:	8c ea       	ldi	r24, 0xAC	; 172
    1c56:	96 e0       	ldi	r25, 0x06	; 6
    1c58:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	5d 2d       	mov	r21, r13
    1c60:	60 2f       	mov	r22, r16
    1c62:	76 2d       	mov	r23, r6
    1c64:	87 2d       	mov	r24, r7
    1c66:	98 2d       	mov	r25, r8
    1c68:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    1c6c:	88 23       	and	r24, r24
    1c6e:	49 f0       	breq	.+18     	; 0x1c82 <write_time+0xca>
		strcpy(res, "Failed to set time");
    1c70:	23 e1       	ldi	r18, 0x13	; 19
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	45 eb       	ldi	r20, 0xB5	; 181
    1c76:	52 e0       	ldi	r21, 0x02	; 2
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    1c80:	08 c0       	rjmp	.+16     	; 0x1c92 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    1c82:	28 e0       	ldi	r18, 0x08	; 8
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	43 e4       	ldi	r20, 0x43	; 67
    1c88:	52 e0       	ldi	r21, 0x02	; 2
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
	return true;
}
    1c92:	81 2f       	mov	r24, r17
    1c94:	26 96       	adiw	r28, 0x06	; 6
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	8f 90       	pop	r8
    1cb0:	7f 90       	pop	r7
    1cb2:	6f 90       	pop	r6
    1cb4:	08 95       	ret

Disassembly of section .text.handle_read:

00000fb0 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	68 97       	sbiw	r28, 0x18	; 24
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	6b 01       	movw	r12, r22
     fd2:	e8 2e       	mov	r14, r24
     fd4:	f4 2e       	mov	r15, r20
     fd6:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	ae 01       	movw	r20, r28
     fdc:	4f 5f       	subi	r20, 0xFF	; 255
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
     fe4:	18 2f       	mov	r17, r24
     fe6:	88 23       	and	r24, r24
     fe8:	09 f4       	brne	.+2      	; 0xfec <handle_read+0x3c>
     fea:	23 c1       	rjmp	.+582    	; 0x1232 <__stack+0x133>
     fec:	8e 2d       	mov	r24, r14
     fee:	b6 01       	movw	r22, r12
     ff0:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <count_parameters>
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	09 f4       	brne	.+2      	; 0xffa <handle_read+0x4a>
     ff8:	1b c1       	rjmp	.+566    	; 0x1230 <__stack+0x131>
	
	if (strcmp(par, RW_DEVEUI)==0)
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	6c 01       	movw	r12, r24
    1000:	20 e8       	ldi	r18, 0x80	; 128
    1002:	e2 2e       	mov	r14, r18
    1004:	28 ec       	ldi	r18, 0xC8	; 200
    1006:	32 e0       	ldi	r19, 0x02	; 2
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	8e 2d       	mov	r24, r14
    100c:	b6 01       	movw	r22, r12
    100e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    1012:	89 2b       	or	r24, r25
    1014:	29 f4       	brne	.+10     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
	{
		EM_get_deveui(res);
    1016:	8f 2d       	mov	r24, r15
    1018:	90 2f       	mov	r25, r16
    101a:	0e 94 21 1c 	call	0x3842	; 0x3842 <EM_get_deveui>
    101e:	09 c1       	rjmp	.+530    	; 0x1232 <__stack+0x133>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1020:	2f ec       	ldi	r18, 0xCF	; 207
    1022:	32 e0       	ldi	r19, 0x02	; 2
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	8e 2d       	mov	r24, r14
    1028:	b6 01       	movw	r22, r12
    102a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    102e:	89 2b       	or	r24, r25
    1030:	29 f4       	brne	.+10     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
	{
		EM_get_appeui(res);
    1032:	8f 2d       	mov	r24, r15
    1034:	90 2f       	mov	r25, r16
    1036:	0e 94 39 1c 	call	0x3872	; 0x3872 <EM_get_appeui>
    103a:	fb c0       	rjmp	.+502    	; 0x1232 <__stack+0x133>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    103c:	26 ed       	ldi	r18, 0xD6	; 214
    103e:	32 e0       	ldi	r19, 0x02	; 2
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	8e 2d       	mov	r24, r14
    1044:	b6 01       	movw	r22, r12
    1046:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    104a:	89 2b       	or	r24, r25
    104c:	29 f4       	brne	.+10     	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
	{
		EM_get_appkey(res);
    104e:	8f 2d       	mov	r24, r15
    1050:	90 2f       	mov	r25, r16
    1052:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <EM_get_appkey>
    1056:	ed c0       	rjmp	.+474    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1058:	2d ed       	ldi	r18, 0xDD	; 221
    105a:	32 e0       	ldi	r19, 0x02	; 2
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	8e 2d       	mov	r24, r14
    1060:	b6 01       	movw	r22, r12
    1062:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    1066:	89 2b       	or	r24, r25
    1068:	e1 f4       	brne	.+56     	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
	{
		EM_get_ppmfactor(&val);
    106a:	ce 01       	movw	r24, r28
    106c:	45 96       	adiw	r24, 0x15	; 21
    106e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1072:	88 8d       	ldd	r24, Y+24	; 0x18
    1074:	8f 93       	push	r24
    1076:	8f 89       	ldd	r24, Y+23	; 0x17
    1078:	8f 93       	push	r24
    107a:	8e 89       	ldd	r24, Y+22	; 0x16
    107c:	8f 93       	push	r24
    107e:	8d 89       	ldd	r24, Y+21	; 0x15
    1080:	8f 93       	push	r24
    1082:	82 ee       	ldi	r24, 0xE2	; 226
    1084:	92 e0       	ldi	r25, 0x02	; 2
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	af 93       	push	r26
    108a:	9f 93       	push	r25
    108c:	8f 93       	push	r24
    108e:	0f 93       	push	r16
    1090:	ff 92       	push	r15
    1092:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	c8 c0       	rjmp	.+400    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_RRL)==0)
    10a2:	27 ee       	ldi	r18, 0xE7	; 231
    10a4:	32 e0       	ldi	r19, 0x02	; 2
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	8e 2d       	mov	r24, r14
    10aa:	b6 01       	movw	r22, r12
    10ac:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    10b0:	89 2b       	or	r24, r25
    10b2:	e1 f4       	brne	.+56     	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
	{
		EM_get_RRL(&val);
    10b4:	ce 01       	movw	r24, r28
    10b6:	45 96       	adiw	r24, 0x15	; 21
    10b8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <EM_get_RRL>
		sprintf(res, "%.2f", val);
    10bc:	88 8d       	ldd	r24, Y+24	; 0x18
    10be:	8f 93       	push	r24
    10c0:	8f 89       	ldd	r24, Y+23	; 0x17
    10c2:	8f 93       	push	r24
    10c4:	8e 89       	ldd	r24, Y+22	; 0x16
    10c6:	8f 93       	push	r24
    10c8:	8d 89       	ldd	r24, Y+21	; 0x15
    10ca:	8f 93       	push	r24
    10cc:	82 ee       	ldi	r24, 0xE2	; 226
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	a0 e0       	ldi	r26, 0x00	; 0
    10d2:	af 93       	push	r26
    10d4:	9f 93       	push	r25
    10d6:	8f 93       	push	r24
    10d8:	0f 93       	push	r16
    10da:	ff 92       	push	r15
    10dc:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	a3 c0       	rjmp	.+326    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_VCC)==0)
    10ec:	2c ee       	ldi	r18, 0xEC	; 236
    10ee:	32 e0       	ldi	r19, 0x02	; 2
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	8e 2d       	mov	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    10fa:	89 2b       	or	r24, r25
    10fc:	e1 f4       	brne	.+56     	; 0x1136 <__stack+0x37>
	{
		EM_get_Vcc(&val);
    10fe:	ce 01       	movw	r24, r28
    1100:	45 96       	adiw	r24, 0x15	; 21
    1102:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1106:	88 8d       	ldd	r24, Y+24	; 0x18
    1108:	8f 93       	push	r24
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	8f 93       	push	r24
    110e:	8e 89       	ldd	r24, Y+22	; 0x16
    1110:	8f 93       	push	r24
    1112:	8d 89       	ldd	r24, Y+21	; 0x15
    1114:	8f 93       	push	r24
    1116:	82 ee       	ldi	r24, 0xE2	; 226
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	af 93       	push	r26
    111e:	9f 93       	push	r25
    1120:	8f 93       	push	r24
    1122:	0f 93       	push	r16
    1124:	ff 92       	push	r15
    1126:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	7e c0       	rjmp	.+252    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_COLS)==0)
    1136:	21 ef       	ldi	r18, 0xF1	; 241
    1138:	32 e0       	ldi	r19, 0x02	; 2
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	8e 2d       	mov	r24, r14
    113e:	b6 01       	movw	r22, r12
    1140:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    1144:	89 2b       	or	r24, r25
    1146:	29 f4       	brne	.+10     	; 0x1152 <__stack+0x53>
	{
		read_cols(res);
    1148:	8f 2d       	mov	r24, r15
    114a:	90 2f       	mov	r25, r16
    114c:	0e 94 80 10 	call	0x2100	; 0x2100 <read_cols>
    1150:	70 c0       	rjmp	.+224    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1152:	26 ef       	ldi	r18, 0xF6	; 246
    1154:	32 e0       	ldi	r19, 0x02	; 2
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	8e 2d       	mov	r24, r14
    115a:	b6 01       	movw	r22, r12
    115c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    1160:	89 2b       	or	r24, r25
    1162:	a1 f4       	brne	.+40     	; 0x118c <__stack+0x8d>
	{
		uint8_t val=EM_get_heat_up_time();
    1164:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1168:	1f 92       	push	r1
    116a:	8f 93       	push	r24
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	af 93       	push	r26
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	0f 93       	push	r16
    117a:	ff 92       	push	r15
    117c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	53 c0       	rjmp	.+166    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    118c:	22 e1       	ldi	r18, 0x12	; 18
    118e:	33 e0       	ldi	r19, 0x03	; 3
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	8e 2d       	mov	r24, r14
    1194:	b6 01       	movw	r22, r12
    1196:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    119a:	89 2b       	or	r24, r25
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <__stack+0xc7>
	{
		uint16_t val=EM_get_air_pump_time();
    119e:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	8d e1       	ldi	r24, 0x1D	; 29
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	a0 e0       	ldi	r26, 0x00	; 0
    11ac:	af 93       	push	r26
    11ae:	9f 93       	push	r25
    11b0:	8f 93       	push	r24
    11b2:	0f 93       	push	r16
    11b4:	ff 92       	push	r15
    11b6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	36 c0       	rjmp	.+108    	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    11c6:	20 e3       	ldi	r18, 0x30	; 48
    11c8:	33 e0       	ldi	r19, 0x03	; 3
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	8e 2d       	mov	r24, r14
    11ce:	b6 01       	movw	r22, r12
    11d0:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    11d4:	89 2b       	or	r24, r25
    11d6:	a1 f4       	brne	.+40     	; 0x1200 <__stack+0x101>
	{
		uint8_t val=EM_get_sp_interval();
    11d8:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    11dc:	1f 92       	push	r1
    11de:	8f 93       	push	r24
    11e0:	8c e3       	ldi	r24, 0x3C	; 60
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	af 93       	push	r26
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	0f 93       	push	r16
    11ee:	ff 92       	push	r15
    11f0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	19 c0       	rjmp	.+50     	; 0x1232 <__stack+0x133>
	}
	else if(strcmp(par, RW_TIME)==0)
    1200:	2b e5       	ldi	r18, 0x5B	; 91
    1202:	33 e0       	ldi	r19, 0x03	; 3
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	8e 2d       	mov	r24, r14
    1208:	b6 01       	movw	r22, r12
    120a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    120e:	89 2b       	or	r24, r25
    1210:	29 f4       	brne	.+10     	; 0x121c <__stack+0x11d>
	{
		read_time(res);
    1212:	8f 2d       	mov	r24, r15
    1214:	90 2f       	mov	r25, r16
    1216:	0e 94 67 13 	call	0x26ce	; 0x26ce <read_time>
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <__stack+0x133>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    121c:	26 e1       	ldi	r18, 0x16	; 22
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e6       	ldi	r20, 0x60	; 96
    1222:	53 e0       	ldi	r21, 0x03	; 3
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	8f 2d       	mov	r24, r15
    1228:	90 2f       	mov	r25, r16
    122a:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <__stack+0x133>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1230:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1232:	81 2f       	mov	r24, r17
    1234:	68 96       	adiw	r28, 0x18	; 24
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	08 95       	ret

Disassembly of section .text.handle_write:

00001252 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1252:	6f 92       	push	r6
    1254:	7f 92       	push	r7
    1256:	8f 92       	push	r8
    1258:	af 92       	push	r10
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	64 97       	sbiw	r28, 0x14	; 20
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	3b 01       	movw	r6, r22
    127a:	88 2e       	mov	r8, r24
    127c:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	ae 01       	movw	r20, r28
    1282:	4f 5f       	subi	r20, 0xFF	; 255
    1284:	5f 4f       	sbci	r21, 0xFF	; 255
    1286:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    128a:	18 2f       	mov	r17, r24
    128c:	88 23       	and	r24, r24
    128e:	09 f4       	brne	.+2      	; 0x1292 <handle_write+0x40>
    1290:	cd c0       	rjmp	.+410    	; 0x142c <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	6c 01       	movw	r12, r24
    1298:	20 e8       	ldi	r18, 0x80	; 128
    129a:	e2 2e       	mov	r14, r18
    129c:	28 ec       	ldi	r18, 0xC8	; 200
    129e:	32 e0       	ldi	r19, 0x02	; 2
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	8e 2d       	mov	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    12aa:	89 2b       	or	r24, r25
    12ac:	39 f4       	brne	.+14     	; 0x12bc <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    12ae:	a5 01       	movw	r20, r10
    12b0:	88 2d       	mov	r24, r8
    12b2:	b3 01       	movw	r22, r6
    12b4:	0e 94 32 14 	call	0x2864	; 0x2864 <write_deveui>
    12b8:	18 2f       	mov	r17, r24
    12ba:	b8 c0       	rjmp	.+368    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    12bc:	2f ec       	ldi	r18, 0xCF	; 207
    12be:	32 e0       	ldi	r19, 0x02	; 2
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	8e 2d       	mov	r24, r14
    12c4:	b6 01       	movw	r22, r12
    12c6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    12ca:	89 2b       	or	r24, r25
    12cc:	39 f4       	brne	.+14     	; 0x12dc <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    12ce:	a5 01       	movw	r20, r10
    12d0:	88 2d       	mov	r24, r8
    12d2:	b3 01       	movw	r22, r6
    12d4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <write_appeui>
    12d8:	18 2f       	mov	r17, r24
    12da:	a8 c0       	rjmp	.+336    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    12dc:	26 ed       	ldi	r18, 0xD6	; 214
    12de:	32 e0       	ldi	r19, 0x02	; 2
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	8e 2d       	mov	r24, r14
    12e4:	b6 01       	movw	r22, r12
    12e6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    12ea:	89 2b       	or	r24, r25
    12ec:	39 f4       	brne	.+14     	; 0x12fc <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    12ee:	a5 01       	movw	r20, r10
    12f0:	88 2d       	mov	r24, r8
    12f2:	b3 01       	movw	r22, r6
    12f4:	0e 94 aa 14 	call	0x2954	; 0x2954 <write_appkey>
    12f8:	18 2f       	mov	r17, r24
    12fa:	98 c0       	rjmp	.+304    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    12fc:	2d ed       	ldi	r18, 0xDD	; 221
    12fe:	32 e0       	ldi	r19, 0x02	; 2
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	8e 2d       	mov	r24, r14
    1304:	b6 01       	movw	r22, r12
    1306:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    130a:	89 2b       	or	r24, r25
    130c:	39 f4       	brne	.+14     	; 0x131c <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    130e:	a5 01       	movw	r20, r10
    1310:	88 2d       	mov	r24, r8
    1312:	b3 01       	movw	r22, r6
    1314:	0e 94 5e 18 	call	0x30bc	; 0x30bc <write_PPM_factor>
    1318:	18 2f       	mov	r17, r24
    131a:	88 c0       	rjmp	.+272    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    131c:	27 ee       	ldi	r18, 0xE7	; 231
    131e:	32 e0       	ldi	r19, 0x02	; 2
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	8e 2d       	mov	r24, r14
    1324:	b6 01       	movw	r22, r12
    1326:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    132a:	89 2b       	or	r24, r25
    132c:	39 f4       	brne	.+14     	; 0x133c <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    132e:	a5 01       	movw	r20, r10
    1330:	88 2d       	mov	r24, r8
    1332:	b3 01       	movw	r22, r6
    1334:	0e 94 84 18 	call	0x3108	; 0x3108 <write_RRL>
    1338:	18 2f       	mov	r17, r24
    133a:	78 c0       	rjmp	.+240    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    133c:	2c ee       	ldi	r18, 0xEC	; 236
    133e:	32 e0       	ldi	r19, 0x02	; 2
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	8e 2d       	mov	r24, r14
    1344:	b6 01       	movw	r22, r12
    1346:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    134a:	89 2b       	or	r24, r25
    134c:	39 f4       	brne	.+14     	; 0x135c <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    134e:	a5 01       	movw	r20, r10
    1350:	88 2d       	mov	r24, r8
    1352:	b3 01       	movw	r22, r6
    1354:	0e 94 aa 18 	call	0x3154	; 0x3154 <write_VCC>
    1358:	18 2f       	mov	r17, r24
    135a:	68 c0       	rjmp	.+208    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    135c:	21 ef       	ldi	r18, 0xF1	; 241
    135e:	32 e0       	ldi	r19, 0x02	; 2
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	8e 2d       	mov	r24, r14
    1364:	b6 01       	movw	r22, r12
    1366:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    136a:	89 2b       	or	r24, r25
    136c:	39 f4       	brne	.+14     	; 0x137c <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    136e:	a5 01       	movw	r20, r10
    1370:	88 2d       	mov	r24, r8
    1372:	b3 01       	movw	r22, r6
    1374:	0e 94 38 0c 	call	0x1870	; 0x1870 <write_cols>
    1378:	18 2f       	mov	r17, r24
    137a:	58 c0       	rjmp	.+176    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    137c:	26 ef       	ldi	r18, 0xF6	; 246
    137e:	32 e0       	ldi	r19, 0x02	; 2
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	8e 2d       	mov	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    138a:	89 2b       	or	r24, r25
    138c:	39 f4       	brne	.+14     	; 0x139c <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    138e:	a5 01       	movw	r20, r10
    1390:	88 2d       	mov	r24, r8
    1392:	b3 01       	movw	r22, r6
    1394:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <write_heat_up>
    1398:	18 2f       	mov	r17, r24
    139a:	48 c0       	rjmp	.+144    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    139c:	22 e1       	ldi	r18, 0x12	; 18
    139e:	33 e0       	ldi	r19, 0x03	; 3
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	8e 2d       	mov	r24, r14
    13a4:	b6 01       	movw	r22, r12
    13a6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    13aa:	89 2b       	or	r24, r25
    13ac:	39 f4       	brne	.+14     	; 0x13bc <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    13ae:	a5 01       	movw	r20, r10
    13b0:	88 2d       	mov	r24, r8
    13b2:	b3 01       	movw	r22, r6
    13b4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <write_air_pump>
    13b8:	18 2f       	mov	r17, r24
    13ba:	38 c0       	rjmp	.+112    	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    13bc:	20 e3       	ldi	r18, 0x30	; 48
    13be:	33 e0       	ldi	r19, 0x03	; 3
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	8e 2d       	mov	r24, r14
    13c4:	b6 01       	movw	r22, r12
    13c6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    13ca:	89 2b       	or	r24, r25
    13cc:	39 f4       	brne	.+14     	; 0x13dc <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    13ce:	a5 01       	movw	r20, r10
    13d0:	88 2d       	mov	r24, r8
    13d2:	b3 01       	movw	r22, r6
    13d4:	0e 94 f6 18 	call	0x31ec	; 0x31ec <write_sp_interval>
    13d8:	18 2f       	mov	r17, r24
    13da:	28 c0       	rjmp	.+80     	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    13dc:	26 e7       	ldi	r18, 0x76	; 118
    13de:	33 e0       	ldi	r19, 0x03	; 3
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	8e 2d       	mov	r24, r14
    13e4:	b6 01       	movw	r22, r12
    13e6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    13ea:	89 2b       	or	r24, r25
    13ec:	39 f4       	brne	.+14     	; 0x13fc <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    13ee:	a5 01       	movw	r20, r10
    13f0:	88 2d       	mov	r24, r8
    13f2:	b3 01       	movw	r22, r6
    13f4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <write_reset>
    13f8:	18 2f       	mov	r17, r24
    13fa:	18 c0       	rjmp	.+48     	; 0x142c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    13fc:	2b e5       	ldi	r18, 0x5B	; 91
    13fe:	33 e0       	ldi	r19, 0x03	; 3
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	8e 2d       	mov	r24, r14
    1404:	b6 01       	movw	r22, r12
    1406:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    140a:	89 2b       	or	r24, r25
    140c:	39 f4       	brne	.+14     	; 0x141c <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    140e:	a5 01       	movw	r20, r10
    1410:	88 2d       	mov	r24, r8
    1412:	b3 01       	movw	r22, r6
    1414:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <write_time>
    1418:	18 2f       	mov	r17, r24
    141a:	08 c0       	rjmp	.+16     	; 0x142c <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    141c:	26 e1       	ldi	r18, 0x16	; 22
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e6       	ldi	r20, 0x60	; 96
    1422:	53 e0       	ldi	r21, 0x03	; 3
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	c5 01       	movw	r24, r10
    1428:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
	}
	
}
    142c:	81 2f       	mov	r24, r17
    142e:	64 96       	adiw	r28, 0x14	; 20
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	8f 90       	pop	r8
    144c:	7f 90       	pop	r7
    144e:	6f 90       	pop	r6
    1450:	08 95       	ret

Disassembly of section .text.handle_methane:

0000199e <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <handle_methane+0x12>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	f4 2e       	mov	r15, r20
    19b6:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    19b8:	22 e0       	ldi	r18, 0x02	; 2
    19ba:	4c ef       	ldi	r20, 0xFC	; 252
    19bc:	56 e0       	ldi	r21, 0x06	; 6
    19be:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    19c2:	18 2f       	mov	r17, r24
    19c4:	88 23       	and	r24, r24
    19c6:	09 f4       	brne	.+2      	; 0x19ca <handle_methane+0x2c>
    19c8:	6b c0       	rjmp	.+214    	; 0x1aa0 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    19ca:	8c ef       	ldi	r24, 0xFC	; 252
    19cc:	96 e0       	ldi	r25, 0x06	; 6
    19ce:	6c 01       	movw	r12, r24
    19d0:	20 e8       	ldi	r18, 0x80	; 128
    19d2:	e2 2e       	mov	r14, r18
    19d4:	20 e2       	ldi	r18, 0x20	; 32
    19d6:	34 e0       	ldi	r19, 0x04	; 4
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	8e 2d       	mov	r24, r14
    19dc:	b6 01       	movw	r22, r12
    19de:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    19e2:	89 2b       	or	r24, r25
    19e4:	79 f4       	brne	.+30     	; 0x1a04 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    19e6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    19f0:	28 e1       	ldi	r18, 0x18	; 24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	43 e2       	ldi	r20, 0x23	; 35
    19f6:	54 e0       	ldi	r21, 0x04	; 4
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	8f 2d       	mov	r24, r15
    19fc:	90 2f       	mov	r25, r16
    19fe:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    1a02:	4e c0       	rjmp	.+156    	; 0x1aa0 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1a04:	2b e3       	ldi	r18, 0x3B	; 59
    1a06:	34 e0       	ldi	r19, 0x04	; 4
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	8e 2d       	mov	r24, r14
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    1a12:	89 2b       	or	r24, r25
    1a14:	79 f4       	brne	.+30     	; 0x1a34 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    1a16:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1a20:	29 e1       	ldi	r18, 0x19	; 25
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4f e3       	ldi	r20, 0x3F	; 63
    1a26:	54 e0       	ldi	r21, 0x04	; 4
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	8f 2d       	mov	r24, r15
    1a2c:	90 2f       	mov	r25, r16
    1a2e:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
    1a32:	36 c0       	rjmp	.+108    	; 0x1aa0 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1a34:	28 e5       	ldi	r18, 0x58	; 88
    1a36:	34 e0       	ldi	r19, 0x04	; 4
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	8e 2d       	mov	r24, r14
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    1a42:	89 2b       	or	r24, r25
    1a44:	21 f5       	brne	.+72     	; 0x1a8e <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <ADC_get_value>
    1a4e:	88 23       	and	r24, r24
    1a50:	51 f0       	breq	.+20     	; 0x1a66 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1a52:	28 e1       	ldi	r18, 0x18	; 24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4d e5       	ldi	r20, 0x5D	; 93
    1a58:	54 e0       	ldi	r21, 0x04	; 4
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	8f 2d       	mov	r24, r15
    1a5e:	90 2f       	mov	r25, r16
    1a60:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
    1a64:	1d c0       	rjmp	.+58     	; 0x1aa0 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	8f 93       	push	r24
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	8f 93       	push	r24
    1a6e:	85 e7       	ldi	r24, 0x75	; 117
    1a70:	94 e0       	ldi	r25, 0x04	; 4
    1a72:	a0 e0       	ldi	r26, 0x00	; 0
    1a74:	af 93       	push	r26
    1a76:	9f 93       	push	r25
    1a78:	8f 93       	push	r24
    1a7a:	0f 93       	push	r16
    1a7c:	ff 92       	push	r15
    1a7e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1a8e:	26 e1       	ldi	r18, 0x16	; 22
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4c e7       	ldi	r20, 0x7C	; 124
    1a94:	54 e0       	ldi	r21, 0x04	; 4
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	8f 2d       	mov	r24, r15
    1a9a:	90 2f       	mov	r25, r16
    1a9c:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
	}
	return false;
}
    1aa0:	81 2f       	mov	r24, r17
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	08 95       	ret

Disassembly of section .text.handle_co2:

0000232c <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	00 d0       	rcall	.+0      	; 0x2338 <handle_co2+0xc>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	f4 2e       	mov	r15, r20
    233e:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    2340:	22 e0       	ldi	r18, 0x02	; 2
    2342:	4c ef       	ldi	r20, 0xFC	; 252
    2344:	56 e0       	ldi	r21, 0x06	; 6
    2346:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    234a:	18 2f       	mov	r17, r24
    234c:	88 23       	and	r24, r24
    234e:	b9 f1       	breq	.+110    	; 0x23be <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    2350:	6c ef       	ldi	r22, 0xFC	; 252
    2352:	76 e0       	ldi	r23, 0x06	; 6
    2354:	80 e8       	ldi	r24, 0x80	; 128
    2356:	28 e5       	ldi	r18, 0x58	; 88
    2358:	34 e0       	ldi	r19, 0x04	; 4
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    2360:	89 2b       	or	r24, r25
    2362:	21 f5       	brne	.+72     	; 0x23ac <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    2364:	ce 01       	movw	r24, r28
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <SCD30_get_reading>
    236c:	88 23       	and	r24, r24
    236e:	51 f0       	breq	.+20     	; 0x2384 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    2370:	28 e1       	ldi	r18, 0x18	; 24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4d e5       	ldi	r20, 0x5D	; 93
    2376:	54 e0       	ldi	r21, 0x04	; 4
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	8f 2d       	mov	r24, r15
    237c:	90 2f       	mov	r25, r16
    237e:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
    2382:	1d c0       	rjmp	.+58     	; 0x23be <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	8f 93       	push	r24
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	8f 93       	push	r24
    238c:	85 e7       	ldi	r24, 0x75	; 117
    238e:	94 e0       	ldi	r25, 0x04	; 4
    2390:	a0 e0       	ldi	r26, 0x00	; 0
    2392:	af 93       	push	r26
    2394:	9f 93       	push	r25
    2396:	8f 93       	push	r24
    2398:	0f 93       	push	r16
    239a:	ff 92       	push	r15
    239c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <sprintf>
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    23ac:	26 e1       	ldi	r18, 0x16	; 22
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4c e7       	ldi	r20, 0x7C	; 124
    23b2:	54 e0       	ldi	r21, 0x04	; 4
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	8f 2d       	mov	r24, r15
    23b8:	90 2f       	mov	r25, r16
    23ba:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
	}
}
    23be:	81 2f       	mov	r24, r17
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	08 95       	ret

Disassembly of section .text.handle_sample:

0000250a <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    250a:	6f 92       	push	r6
    250c:	7f 92       	push	r7
    250e:	8f 92       	push	r8
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	3b 01       	movw	r6, r22
    251e:	88 2e       	mov	r8, r24
    2520:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2522:	21 e0       	ldi	r18, 0x01	; 1
    2524:	4c ef       	ldi	r20, 0xFC	; 252
    2526:	56 e0       	ldi	r21, 0x06	; 6
    2528:	0e 94 1c 13 	call	0x2638	; 0x2638 <get_parameter>
    252c:	c8 2f       	mov	r28, r24
    252e:	88 23       	and	r24, r24
    2530:	69 f1       	breq	.+90     	; 0x258c <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    2532:	8c ef       	ldi	r24, 0xFC	; 252
    2534:	96 e0       	ldi	r25, 0x06	; 6
    2536:	6c 01       	movw	r12, r24
    2538:	20 e8       	ldi	r18, 0x80	; 128
    253a:	e2 2e       	mov	r14, r18
    253c:	22 e9       	ldi	r18, 0x92	; 146
    253e:	34 e0       	ldi	r19, 0x04	; 4
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	8e 2d       	mov	r24, r14
    2544:	b6 01       	movw	r22, r12
    2546:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    254a:	89 2b       	or	r24, r25
    254c:	39 f4       	brne	.+14     	; 0x255c <handle_sample+0x52>
		return handle_methane(cmd, res);
    254e:	a8 01       	movw	r20, r16
    2550:	88 2d       	mov	r24, r8
    2552:	b3 01       	movw	r22, r6
    2554:	0e 94 cf 0c 	call	0x199e	; 0x199e <handle_methane>
    2558:	c8 2f       	mov	r28, r24
    255a:	18 c0       	rjmp	.+48     	; 0x258c <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    255c:	27 e9       	ldi	r18, 0x97	; 151
    255e:	34 e0       	ldi	r19, 0x04	; 4
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	8e 2d       	mov	r24, r14
    2564:	b6 01       	movw	r22, r12
    2566:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <strcmp>
    256a:	89 2b       	or	r24, r25
    256c:	39 f4       	brne	.+14     	; 0x257c <handle_sample+0x72>
		return handle_co2(cmd, res);
    256e:	a8 01       	movw	r20, r16
    2570:	88 2d       	mov	r24, r8
    2572:	b3 01       	movw	r22, r6
    2574:	0e 94 96 11 	call	0x232c	; 0x232c <handle_co2>
    2578:	c8 2f       	mov	r28, r24
    257a:	08 c0       	rjmp	.+16     	; 0x258c <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    257c:	26 e1       	ldi	r18, 0x16	; 22
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4c e7       	ldi	r20, 0x7C	; 124
    2582:	54 e0       	ldi	r21, 0x04	; 4
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	c8 01       	movw	r24, r16
    2588:	0e 94 08 1c 	call	0x3810	; 0x3810 <memcpy>
		return true;
	}
}
    258c:	8c 2f       	mov	r24, r28
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ef 90       	pop	r14
    2596:	df 90       	pop	r13
    2598:	cf 90       	pop	r12
    259a:	8f 90       	pop	r8
    259c:	7f 90       	pop	r7
    259e:	6f 90       	pop	r6
    25a0:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00003a00 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    3a00:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3a04:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	0e 94 67 1e 	call	0x3cce	; 0x3cce <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    3a0e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    3a18:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3a1c:	88 23       	and	r24, r24
    3a1e:	11 f0       	breq	.+4      	; 0x3a24 <init_methane_SCD30+0x24>
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	08 95       	ret
	return true;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3a26:	08 95       	ret

Disassembly of section .text.count_parameters:

00002ee4 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    2ee4:	6f 92       	push	r6
    2ee6:	7f 92       	push	r7
    2ee8:	8f 92       	push	r8
    2eea:	cf 92       	push	r12
    2eec:	df 92       	push	r13
    2eee:	ef 92       	push	r14
    2ef0:	3b 01       	movw	r6, r22
    2ef2:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    2ef4:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2ef8:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    2efe:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    2f00:	10 c0       	rjmp	.+32     	; 0x2f22 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    2f02:	e8 2c       	mov	r14, r8
    2f04:	63 01       	movw	r12, r6
    2f06:	c2 0e       	add	r12, r18
    2f08:	d3 1e       	adc	r13, r19
    2f0a:	e1 1c       	adc	r14, r1
    2f0c:	37 fd       	sbrc	r19, 7
    2f0e:	ea 94       	dec	r14
    2f10:	f6 01       	movw	r30, r12
    2f12:	94 91       	lpm	r25, Z
    2f14:	e7 fc       	sbrc	r14, 7
    2f16:	90 81       	ld	r25, Z
    2f18:	90 32       	cpi	r25, 0x20	; 32
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <count_parameters+0x3a>
			cnt++;
    2f1c:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2f1e:	2f 5f       	subi	r18, 0xFF	; 255
    2f20:	3f 4f       	sbci	r19, 0xFF	; 255
    2f22:	26 17       	cp	r18, r22
    2f24:	37 07       	cpc	r19, r23
    2f26:	68 f3       	brcs	.-38     	; 0x2f02 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	8f 90       	pop	r8
    2f30:	7f 90       	pop	r7
    2f32:	6f 90       	pop	r6
    2f34:	08 95       	ret

Disassembly of section .text.par_index:

00002b28 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2b28:	cf 92       	push	r12
    2b2a:	df 92       	push	r13
    2b2c:	ef 92       	push	r14
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2b36:	44 23       	and	r20, r20
    2b38:	29 f1       	breq	.+74     	; 0x2b84 <par_index+0x5c>
    2b3a:	04 2f       	mov	r16, r20
    2b3c:	6b 01       	movw	r12, r22
    2b3e:	e8 2e       	mov	r14, r24
    2b40:	c0 e0       	ldi	r28, 0x00	; 0
    2b42:	d0 e0       	ldi	r29, 0x00	; 0
    2b44:	10 e0       	ldi	r17, 0x00	; 0
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2b48:	ae 2d       	mov	r26, r14
    2b4a:	c6 01       	movw	r24, r12
    2b4c:	8c 0f       	add	r24, r28
    2b4e:	9d 1f       	adc	r25, r29
    2b50:	a1 1d       	adc	r26, r1
    2b52:	d7 fd       	sbrc	r29, 7
    2b54:	aa 95       	dec	r26
    2b56:	fc 01       	movw	r30, r24
    2b58:	84 91       	lpm	r24, Z
    2b5a:	a7 fd       	sbrc	r26, 7
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 32       	cpi	r24, 0x20	; 32
    2b60:	31 f4       	brne	.+12     	; 0x2b6e <par_index+0x46>
			cnt++;
    2b62:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2b64:	01 13       	cpse	r16, r17
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <par_index+0x46>
				return i+1;
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	0d c0       	rjmp	.+26     	; 0x2b88 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2b6e:	21 96       	adiw	r28, 0x01	; 1
    2b70:	8e 2d       	mov	r24, r14
    2b72:	b6 01       	movw	r22, r12
    2b74:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2b78:	c8 17       	cp	r28, r24
    2b7a:	d9 07       	cpc	r29, r25
    2b7c:	28 f3       	brcs	.-54     	; 0x2b48 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ef 90       	pop	r14
    2b92:	df 90       	pop	r13
    2b94:	cf 90       	pop	r12
    2b96:	08 95       	ret

Disassembly of section .text.get_parameter:

00002638 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    2638:	8f 92       	push	r8
    263a:	9f 92       	push	r9
    263c:	af 92       	push	r10
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	6b 01       	movw	r12, r22
    2650:	e8 2e       	mov	r14, r24
    2652:	ea 01       	movw	r28, r20
    2654:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    2656:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <count_parameters>
	if(pars<parNo) return false;
    265a:	8f 15       	cp	r24, r15
    265c:	58 f1       	brcs	.+86     	; 0x26b4 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    265e:	8e 2d       	mov	r24, r14
    2660:	b6 01       	movw	r22, r12
    2662:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2666:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    2668:	4f 2d       	mov	r20, r15
    266a:	8e 2d       	mov	r24, r14
    266c:	b6 01       	movw	r22, r12
    266e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <par_index>
	uint8_t parLen=0;
    2672:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    2674:	15 c0       	rjmp	.+42     	; 0x26a0 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    2676:	46 01       	movw	r8, r12
    2678:	ae 2c       	mov	r10, r14
    267a:	82 0e       	add	r8, r18
    267c:	93 1e       	adc	r9, r19
    267e:	a1 1c       	adc	r10, r1
    2680:	37 fd       	sbrc	r19, 7
    2682:	aa 94       	dec	r10
    2684:	4a 2d       	mov	r20, r10
    2686:	94 01       	movw	r18, r8
    2688:	f4 01       	movw	r30, r8
    268a:	24 91       	lpm	r18, Z
    268c:	47 fd       	sbrc	r20, 7
    268e:	20 81       	ld	r18, Z
    2690:	20 32       	cpi	r18, 0x20	; 32
    2692:	59 f0       	breq	.+22     	; 0x26aa <get_parameter+0x72>
		par[parLen++]=src[i];
    2694:	fe 01       	movw	r30, r28
    2696:	e9 0f       	add	r30, r25
    2698:	f1 1d       	adc	r31, r1
    269a:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    269c:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    269e:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	20 17       	cp	r18, r16
    26a6:	31 07       	cpc	r19, r17
    26a8:	30 f3       	brcs	.-52     	; 0x2676 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    26aa:	c9 0f       	add	r28, r25
    26ac:	d1 1d       	adc	r29, r1
    26ae:	18 82       	st	Y, r1
	
	return true;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    26b4:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	8f 90       	pop	r8
    26cc:	08 95       	ret

Disassembly of section .text.calc_crc8:

00003708 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    3708:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    370a:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    370c:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    370e:	14 c0       	rjmp	.+40     	; 0x3738 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    3710:	fa 01       	movw	r30, r20
    3712:	e3 0f       	add	r30, r19
    3714:	f1 1d       	adc	r31, r1
    3716:	90 81       	ld	r25, Z
    3718:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    371a:	28 e0       	ldi	r18, 0x08	; 8
    371c:	0a c0       	rjmp	.+20     	; 0x3732 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    371e:	88 23       	and	r24, r24
    3720:	34 f4       	brge	.+12     	; 0x372e <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	88 0f       	add	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	91 e3       	ldi	r25, 0x31	; 49
    372a:	89 27       	eor	r24, r25
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    372e:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    3730:	21 50       	subi	r18, 0x01	; 1
    3732:	21 11       	cpse	r18, r1
    3734:	f4 cf       	rjmp	.-24     	; 0x371e <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3736:	3f 5f       	subi	r19, 0xFF	; 255
    3738:	36 17       	cp	r19, r22
    373a:	50 f3       	brcs	.-44     	; 0x3710 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    373c:	08 95       	ret

Disassembly of section .text.get_decimal:

00002278 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    2278:	cf 92       	push	r12
    227a:	df 92       	push	r13
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    228a:	10 e0       	ldi	r17, 0x00	; 0
    228c:	08 c0       	rjmp	.+16     	; 0x229e <get_decimal+0x26>
	{
		if(str[i]=='.'){
    228e:	cc 0d       	add	r28, r12
    2290:	dd 1d       	adc	r29, r13
    2292:	88 81       	ld	r24, Y
    2294:	8e 32       	cpi	r24, 0x2E	; 46
    2296:	11 f4       	brne	.+4      	; 0x229c <get_decimal+0x24>
			index=i+1;
    2298:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    229a:	0c c0       	rjmp	.+24     	; 0x22b4 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    229c:	1f 5f       	subi	r17, 0xFF	; 255
    229e:	c1 2f       	mov	r28, r17
    22a0:	d0 e0       	ldi	r29, 0x00	; 0
    22a2:	b6 01       	movw	r22, r12
    22a4:	80 e8       	ldi	r24, 0x80	; 128
    22a6:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	c8 17       	cp	r28, r24
    22ae:	d9 07       	cpc	r29, r25
    22b0:	70 f3       	brcs	.-36     	; 0x228e <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    22b2:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    22b4:	11 23       	and	r17, r17
    22b6:	71 f1       	breq	.+92     	; 0x2314 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    22b8:	c1 0e       	add	r12, r17
    22ba:	d1 1c       	adc	r13, r1
    22bc:	80 e8       	ldi	r24, 0x80	; 128
    22be:	e8 2e       	mov	r14, r24
    22c0:	8e 2d       	mov	r24, r14
    22c2:	b6 01       	movw	r22, r12
    22c4:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    22c8:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    22ca:	8e 2d       	mov	r24, r14
    22cc:	b6 01       	movw	r22, r12
    22ce:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
    22d2:	8c 01       	movw	r16, r24
	float divisor=1;
    22d4:	0f 2e       	mov	r0, r31
    22d6:	c1 2c       	mov	r12, r1
    22d8:	d1 2c       	mov	r13, r1
    22da:	f0 e8       	ldi	r31, 0x80	; 128
    22dc:	ef 2e       	mov	r14, r31
    22de:	ff e3       	ldi	r31, 0x3F	; 63
    22e0:	ff 2e       	mov	r15, r31
    22e2:	f0 2d       	mov	r31, r0
	
	while(len>0){
    22e4:	0b c0       	rjmp	.+22     	; 0x22fc <get_decimal+0x84>
		divisor*=10;
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	c7 01       	movw	r24, r14
    22f0:	b6 01       	movw	r22, r12
    22f2:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__mulsf3>
    22f6:	6b 01       	movw	r12, r22
    22f8:	7c 01       	movw	r14, r24
		len--;
    22fa:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    22fc:	c1 11       	cpse	r28, r1
    22fe:	f3 cf       	rjmp	.-26     	; 0x22e6 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    2300:	b8 01       	movw	r22, r16
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__floatunsisf>
    230a:	a7 01       	movw	r20, r14
    230c:	96 01       	movw	r18, r12
    230e:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__divsf3>
    2312:	03 c0       	rjmp	.+6      	; 0x231a <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	cf 90       	pop	r12
    232a:	08 95       	ret

Disassembly of section .text.str2flaot:

00003022 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    3034:	bc 01       	movw	r22, r24
    3036:	80 e8       	ldi	r24, 0x80	; 128
    3038:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <atoi>
    303c:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    303e:	c8 01       	movw	r24, r16
    3040:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_decimal>
    3044:	6b 01       	movw	r12, r22
    3046:	7c 01       	movw	r14, r24
	return intVal+deci;
    3048:	be 01       	movw	r22, r28
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__floatunsisf>
    3052:	9b 01       	movw	r18, r22
    3054:	ac 01       	movw	r20, r24
    3056:	c7 01       	movw	r24, r14
    3058:	b6 01       	movw	r22, r12
    305a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__addsf3>
	
	
}
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	df 90       	pop	r13
    306c:	cf 90       	pop	r12
    306e:	08 95       	ret

Disassembly of section .text.is_float:

00002d8c <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2d9a:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    2d9c:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    2d9e:	0d c0       	rjmp	.+26     	; 0x2dba <is_float+0x2e>
	{
		if(str[i]=='.'){
    2da0:	ce 0d       	add	r28, r14
    2da2:	df 1d       	adc	r29, r15
    2da4:	88 81       	ld	r24, Y
    2da6:	8e 32       	cpi	r24, 0x2E	; 46
    2da8:	21 f4       	brne	.+8      	; 0x2db2 <is_float+0x26>
			if (got_dot)
    2daa:	01 11       	cpse	r16, r1
    2dac:	11 c0       	rjmp	.+34     	; 0x2dd0 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    2dae:	01 e0       	ldi	r16, 0x01	; 1
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2db2:	80 53       	subi	r24, 0x30	; 48
    2db4:	8a 30       	cpi	r24, 0x0A	; 10
    2db6:	70 f4       	brcc	.+28     	; 0x2dd4 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2db8:	1f 5f       	subi	r17, 0xFF	; 255
    2dba:	c1 2f       	mov	r28, r17
    2dbc:	d0 e0       	ldi	r29, 0x00	; 0
    2dbe:	b7 01       	movw	r22, r14
    2dc0:	80 e8       	ldi	r24, 0x80	; 128
    2dc2:	0e 94 ae 1c 	call	0x395c	; 0x395c <strlen>
    2dc6:	c8 17       	cp	r28, r24
    2dc8:	d9 07       	cpc	r29, r25
    2dca:	50 f3       	brcs	.-44     	; 0x2da0 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	ff 90       	pop	r15
    2de0:	ef 90       	pop	r14
    2de2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003e46 <__subsf3>:
    3e46:	50 58       	subi	r21, 0x80	; 128

00003e48 <__addsf3>:
    3e48:	bb 27       	eor	r27, r27
    3e4a:	aa 27       	eor	r26, r26
    3e4c:	0e 94 19 10 	call	0x2032	; 0x2032 <__addsf3x>
    3e50:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002032 <__addsf3x>:
    2032:	11 c0       	rjmp	.+34     	; 0x2056 <__addsf3x+0x24>
    2034:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__fp_pscA>
    2038:	38 f0       	brcs	.+14     	; 0x2048 <__addsf3x+0x16>
    203a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscB>
    203e:	20 f0       	brcs	.+8      	; 0x2048 <__addsf3x+0x16>
    2040:	39 f4       	brne	.+14     	; 0x2050 <__addsf3x+0x1e>
    2042:	9f 3f       	cpi	r25, 0xFF	; 255
    2044:	19 f4       	brne	.+6      	; 0x204c <__addsf3x+0x1a>
    2046:	26 f4       	brtc	.+8      	; 0x2050 <__addsf3x+0x1e>
    2048:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_nan>
    204c:	0e f4       	brtc	.+2      	; 0x2050 <__addsf3x+0x1e>
    204e:	e0 95       	com	r30
    2050:	e7 fb       	bst	r30, 7
    2052:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_inf>
    2056:	e9 2f       	mov	r30, r25
    2058:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_split3>
    205c:	58 f3       	brcs	.-42     	; 0x2034 <__addsf3x+0x2>
    205e:	ba 17       	cp	r27, r26
    2060:	62 07       	cpc	r22, r18
    2062:	73 07       	cpc	r23, r19
    2064:	84 07       	cpc	r24, r20
    2066:	95 07       	cpc	r25, r21
    2068:	20 f0       	brcs	.+8      	; 0x2072 <__addsf3x+0x40>
    206a:	79 f4       	brne	.+30     	; 0x208a <__addsf3x+0x58>
    206c:	a6 f5       	brtc	.+104    	; 0x20d6 <__addsf3x+0xa4>
    206e:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__fp_zero>
    2072:	0e f4       	brtc	.+2      	; 0x2076 <__addsf3x+0x44>
    2074:	e0 95       	com	r30
    2076:	0b 2e       	mov	r0, r27
    2078:	ba 2f       	mov	r27, r26
    207a:	a0 2d       	mov	r26, r0
    207c:	0b 01       	movw	r0, r22
    207e:	b9 01       	movw	r22, r18
    2080:	90 01       	movw	r18, r0
    2082:	0c 01       	movw	r0, r24
    2084:	ca 01       	movw	r24, r20
    2086:	a0 01       	movw	r20, r0
    2088:	11 24       	eor	r1, r1
    208a:	ff 27       	eor	r31, r31
    208c:	59 1b       	sub	r21, r25
    208e:	99 f0       	breq	.+38     	; 0x20b6 <__addsf3x+0x84>
    2090:	59 3f       	cpi	r21, 0xF9	; 249
    2092:	50 f4       	brcc	.+20     	; 0x20a8 <__addsf3x+0x76>
    2094:	50 3e       	cpi	r21, 0xE0	; 224
    2096:	68 f1       	brcs	.+90     	; 0x20f2 <__addsf3x+0xc0>
    2098:	1a 16       	cp	r1, r26
    209a:	f0 40       	sbci	r31, 0x00	; 0
    209c:	a2 2f       	mov	r26, r18
    209e:	23 2f       	mov	r18, r19
    20a0:	34 2f       	mov	r19, r20
    20a2:	44 27       	eor	r20, r20
    20a4:	58 5f       	subi	r21, 0xF8	; 248
    20a6:	f3 cf       	rjmp	.-26     	; 0x208e <__addsf3x+0x5c>
    20a8:	46 95       	lsr	r20
    20aa:	37 95       	ror	r19
    20ac:	27 95       	ror	r18
    20ae:	a7 95       	ror	r26
    20b0:	f0 40       	sbci	r31, 0x00	; 0
    20b2:	53 95       	inc	r21
    20b4:	c9 f7       	brne	.-14     	; 0x20a8 <__addsf3x+0x76>
    20b6:	7e f4       	brtc	.+30     	; 0x20d6 <__addsf3x+0xa4>
    20b8:	1f 16       	cp	r1, r31
    20ba:	ba 0b       	sbc	r27, r26
    20bc:	62 0b       	sbc	r22, r18
    20be:	73 0b       	sbc	r23, r19
    20c0:	84 0b       	sbc	r24, r20
    20c2:	ba f0       	brmi	.+46     	; 0x20f2 <__addsf3x+0xc0>
    20c4:	91 50       	subi	r25, 0x01	; 1
    20c6:	a1 f0       	breq	.+40     	; 0x20f0 <__addsf3x+0xbe>
    20c8:	ff 0f       	add	r31, r31
    20ca:	bb 1f       	adc	r27, r27
    20cc:	66 1f       	adc	r22, r22
    20ce:	77 1f       	adc	r23, r23
    20d0:	88 1f       	adc	r24, r24
    20d2:	c2 f7       	brpl	.-16     	; 0x20c4 <__addsf3x+0x92>
    20d4:	0e c0       	rjmp	.+28     	; 0x20f2 <__addsf3x+0xc0>
    20d6:	ba 0f       	add	r27, r26
    20d8:	62 1f       	adc	r22, r18
    20da:	73 1f       	adc	r23, r19
    20dc:	84 1f       	adc	r24, r20
    20de:	48 f4       	brcc	.+18     	; 0x20f2 <__addsf3x+0xc0>
    20e0:	87 95       	ror	r24
    20e2:	77 95       	ror	r23
    20e4:	67 95       	ror	r22
    20e6:	b7 95       	ror	r27
    20e8:	f7 95       	ror	r31
    20ea:	9e 3f       	cpi	r25, 0xFE	; 254
    20ec:	08 f0       	brcs	.+2      	; 0x20f0 <__addsf3x+0xbe>
    20ee:	b0 cf       	rjmp	.-160    	; 0x2050 <__addsf3x+0x1e>
    20f0:	93 95       	inc	r25
    20f2:	88 0f       	add	r24, r24
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <__addsf3x+0xc6>
    20f6:	99 27       	eor	r25, r25
    20f8:	ee 0f       	add	r30, r30
    20fa:	97 95       	ror	r25
    20fc:	87 95       	ror	r24
    20fe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003f54 <__divsf3>:
    3f54:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__divsf3x>
    3f58:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001e80 <__divsf3x>:
    1e80:	10 c0       	rjmp	.+32     	; 0x1ea2 <__divsf3x+0x22>
    1e82:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscB>
    1e86:	58 f0       	brcs	.+22     	; 0x1e9e <__divsf3x+0x1e>
    1e88:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__fp_pscA>
    1e8c:	40 f0       	brcs	.+16     	; 0x1e9e <__divsf3x+0x1e>
    1e8e:	29 f4       	brne	.+10     	; 0x1e9a <__divsf3x+0x1a>
    1e90:	5f 3f       	cpi	r21, 0xFF	; 255
    1e92:	29 f0       	breq	.+10     	; 0x1e9e <__divsf3x+0x1e>
    1e94:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_inf>
    1e98:	51 11       	cpse	r21, r1
    1e9a:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__fp_szero>
    1e9e:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_nan>
    1ea2:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_split3>
    1ea6:	68 f3       	brcs	.-38     	; 0x1e82 <__divsf3x+0x2>

00001ea8 <__divsf3_pse>:
    1ea8:	99 23       	and	r25, r25
    1eaa:	b1 f3       	breq	.-20     	; 0x1e98 <__divsf3x+0x18>
    1eac:	55 23       	and	r21, r21
    1eae:	91 f3       	breq	.-28     	; 0x1e94 <__divsf3x+0x14>
    1eb0:	95 1b       	sub	r25, r21
    1eb2:	55 0b       	sbc	r21, r21
    1eb4:	bb 27       	eor	r27, r27
    1eb6:	aa 27       	eor	r26, r26
    1eb8:	62 17       	cp	r22, r18
    1eba:	73 07       	cpc	r23, r19
    1ebc:	84 07       	cpc	r24, r20
    1ebe:	38 f0       	brcs	.+14     	; 0x1ece <__divsf3_pse+0x26>
    1ec0:	9f 5f       	subi	r25, 0xFF	; 255
    1ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	44 1f       	adc	r20, r20
    1eca:	aa 1f       	adc	r26, r26
    1ecc:	a9 f3       	breq	.-22     	; 0x1eb8 <__divsf3_pse+0x10>
    1ece:	35 d0       	rcall	.+106    	; 0x1f3a <__divsf3_pse+0x92>
    1ed0:	0e 2e       	mov	r0, r30
    1ed2:	3a f0       	brmi	.+14     	; 0x1ee2 <__divsf3_pse+0x3a>
    1ed4:	e0 e8       	ldi	r30, 0x80	; 128
    1ed6:	32 d0       	rcall	.+100    	; 0x1f3c <__divsf3_pse+0x94>
    1ed8:	91 50       	subi	r25, 0x01	; 1
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	e6 95       	lsr	r30
    1ede:	00 1c       	adc	r0, r0
    1ee0:	ca f7       	brpl	.-14     	; 0x1ed4 <__divsf3_pse+0x2c>
    1ee2:	2b d0       	rcall	.+86     	; 0x1f3a <__divsf3_pse+0x92>
    1ee4:	fe 2f       	mov	r31, r30
    1ee6:	29 d0       	rcall	.+82     	; 0x1f3a <__divsf3_pse+0x92>
    1ee8:	66 0f       	add	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	88 1f       	adc	r24, r24
    1eee:	bb 1f       	adc	r27, r27
    1ef0:	26 17       	cp	r18, r22
    1ef2:	37 07       	cpc	r19, r23
    1ef4:	48 07       	cpc	r20, r24
    1ef6:	ab 07       	cpc	r26, r27
    1ef8:	b0 e8       	ldi	r27, 0x80	; 128
    1efa:	09 f0       	breq	.+2      	; 0x1efe <__divsf3_pse+0x56>
    1efc:	bb 0b       	sbc	r27, r27
    1efe:	80 2d       	mov	r24, r0
    1f00:	bf 01       	movw	r22, r30
    1f02:	ff 27       	eor	r31, r31
    1f04:	93 58       	subi	r25, 0x83	; 131
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	3a f0       	brmi	.+14     	; 0x1f18 <__divsf3_pse+0x70>
    1f0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f0c:	51 05       	cpc	r21, r1
    1f0e:	78 f0       	brcs	.+30     	; 0x1f2e <__divsf3_pse+0x86>
    1f10:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_inf>
    1f14:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__fp_szero>
    1f18:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1a:	e4 f3       	brlt	.-8      	; 0x1f14 <__divsf3_pse+0x6c>
    1f1c:	98 3e       	cpi	r25, 0xE8	; 232
    1f1e:	d4 f3       	brlt	.-12     	; 0x1f14 <__divsf3_pse+0x6c>
    1f20:	86 95       	lsr	r24
    1f22:	77 95       	ror	r23
    1f24:	67 95       	ror	r22
    1f26:	b7 95       	ror	r27
    1f28:	f7 95       	ror	r31
    1f2a:	9f 5f       	subi	r25, 0xFF	; 255
    1f2c:	c9 f7       	brne	.-14     	; 0x1f20 <__divsf3_pse+0x78>
    1f2e:	88 0f       	add	r24, r24
    1f30:	91 1d       	adc	r25, r1
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	97 f9       	bld	r25, 7
    1f38:	08 95       	ret
    1f3a:	e1 e0       	ldi	r30, 0x01	; 1
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	bb 1f       	adc	r27, r27
    1f44:	62 17       	cp	r22, r18
    1f46:	73 07       	cpc	r23, r19
    1f48:	84 07       	cpc	r24, r20
    1f4a:	ba 07       	cpc	r27, r26
    1f4c:	20 f0       	brcs	.+8      	; 0x1f56 <__divsf3_pse+0xae>
    1f4e:	62 1b       	sub	r22, r18
    1f50:	73 0b       	sbc	r23, r19
    1f52:	84 0b       	sbc	r24, r20
    1f54:	ba 0b       	sbc	r27, r26
    1f56:	ee 1f       	adc	r30, r30
    1f58:	88 f7       	brcc	.-30     	; 0x1f3c <__divsf3_pse+0x94>
    1f5a:	e0 95       	com	r30
    1f5c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cd4 <__fixunssfsi>:
    2cd4:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__fp_splitA>
    2cd8:	88 f0       	brcs	.+34     	; 0x2cfc <__fixunssfsi+0x28>
    2cda:	9f 57       	subi	r25, 0x7F	; 127
    2cdc:	98 f0       	brcs	.+38     	; 0x2d04 <__fixunssfsi+0x30>
    2cde:	b9 2f       	mov	r27, r25
    2ce0:	99 27       	eor	r25, r25
    2ce2:	b7 51       	subi	r27, 0x17	; 23
    2ce4:	b0 f0       	brcs	.+44     	; 0x2d12 <__fixunssfsi+0x3e>
    2ce6:	e1 f0       	breq	.+56     	; 0x2d20 <__fixunssfsi+0x4c>
    2ce8:	66 0f       	add	r22, r22
    2cea:	77 1f       	adc	r23, r23
    2cec:	88 1f       	adc	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	1a f0       	brmi	.+6      	; 0x2cf8 <__fixunssfsi+0x24>
    2cf2:	ba 95       	dec	r27
    2cf4:	c9 f7       	brne	.-14     	; 0x2ce8 <__fixunssfsi+0x14>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <__fixunssfsi+0x4c>
    2cf8:	b1 30       	cpi	r27, 0x01	; 1
    2cfa:	91 f0       	breq	.+36     	; 0x2d20 <__fixunssfsi+0x4c>
    2cfc:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__fp_zero>
    2d00:	b1 e0       	ldi	r27, 0x01	; 1
    2d02:	08 95       	ret
    2d04:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__fp_zero>
    2d08:	67 2f       	mov	r22, r23
    2d0a:	78 2f       	mov	r23, r24
    2d0c:	88 27       	eor	r24, r24
    2d0e:	b8 5f       	subi	r27, 0xF8	; 248
    2d10:	39 f0       	breq	.+14     	; 0x2d20 <__fixunssfsi+0x4c>
    2d12:	b9 3f       	cpi	r27, 0xF9	; 249
    2d14:	cc f3       	brlt	.-14     	; 0x2d08 <__fixunssfsi+0x34>
    2d16:	86 95       	lsr	r24
    2d18:	77 95       	ror	r23
    2d1a:	67 95       	ror	r22
    2d1c:	b3 95       	inc	r27
    2d1e:	d9 f7       	brne	.-10     	; 0x2d16 <__fixunssfsi+0x42>
    2d20:	3e f4       	brtc	.+14     	; 0x2d30 <__fixunssfsi+0x5c>
    2d22:	90 95       	com	r25
    2d24:	80 95       	com	r24
    2d26:	70 95       	com	r23
    2d28:	61 95       	neg	r22
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000027ea <__floatunsisf>:
    27ea:	e8 94       	clt
    27ec:	09 c0       	rjmp	.+18     	; 0x2800 <__floatsisf+0x12>

000027ee <__floatsisf>:
    27ee:	97 fb       	bst	r25, 7
    27f0:	3e f4       	brtc	.+14     	; 0x2800 <__floatsisf+0x12>
    27f2:	90 95       	com	r25
    27f4:	80 95       	com	r24
    27f6:	70 95       	com	r23
    27f8:	61 95       	neg	r22
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	8f 4f       	sbci	r24, 0xFF	; 255
    27fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2800:	99 23       	and	r25, r25
    2802:	a9 f0       	breq	.+42     	; 0x282e <__floatsisf+0x40>
    2804:	f9 2f       	mov	r31, r25
    2806:	96 e9       	ldi	r25, 0x96	; 150
    2808:	bb 27       	eor	r27, r27
    280a:	93 95       	inc	r25
    280c:	f6 95       	lsr	r31
    280e:	87 95       	ror	r24
    2810:	77 95       	ror	r23
    2812:	67 95       	ror	r22
    2814:	b7 95       	ror	r27
    2816:	f1 11       	cpse	r31, r1
    2818:	f8 cf       	rjmp	.-16     	; 0x280a <__floatsisf+0x1c>
    281a:	fa f4       	brpl	.+62     	; 0x285a <__floatsisf+0x6c>
    281c:	bb 0f       	add	r27, r27
    281e:	11 f4       	brne	.+4      	; 0x2824 <__floatsisf+0x36>
    2820:	60 ff       	sbrs	r22, 0
    2822:	1b c0       	rjmp	.+54     	; 0x285a <__floatsisf+0x6c>
    2824:	6f 5f       	subi	r22, 0xFF	; 255
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8f 4f       	sbci	r24, 0xFF	; 255
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	16 c0       	rjmp	.+44     	; 0x285a <__floatsisf+0x6c>
    282e:	88 23       	and	r24, r24
    2830:	11 f0       	breq	.+4      	; 0x2836 <__floatsisf+0x48>
    2832:	96 e9       	ldi	r25, 0x96	; 150
    2834:	11 c0       	rjmp	.+34     	; 0x2858 <__floatsisf+0x6a>
    2836:	77 23       	and	r23, r23
    2838:	21 f0       	breq	.+8      	; 0x2842 <__floatsisf+0x54>
    283a:	9e e8       	ldi	r25, 0x8E	; 142
    283c:	87 2f       	mov	r24, r23
    283e:	76 2f       	mov	r23, r22
    2840:	05 c0       	rjmp	.+10     	; 0x284c <__floatsisf+0x5e>
    2842:	66 23       	and	r22, r22
    2844:	71 f0       	breq	.+28     	; 0x2862 <__floatsisf+0x74>
    2846:	96 e8       	ldi	r25, 0x86	; 134
    2848:	86 2f       	mov	r24, r22
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	2a f0       	brmi	.+10     	; 0x285a <__floatsisf+0x6c>
    2850:	9a 95       	dec	r25
    2852:	66 0f       	add	r22, r22
    2854:	77 1f       	adc	r23, r23
    2856:	88 1f       	adc	r24, r24
    2858:	da f7       	brpl	.-10     	; 0x2850 <__floatsisf+0x62>
    285a:	88 0f       	add	r24, r24
    285c:	96 95       	lsr	r25
    285e:	87 95       	ror	r24
    2860:	97 f9       	bld	r25, 7
    2862:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003ef0 <__fp_inf>:
    3ef0:	97 f9       	bld	r25, 7
    3ef2:	9f 67       	ori	r25, 0x7F	; 127
    3ef4:	80 e8       	ldi	r24, 0x80	; 128
    3ef6:	70 e0       	ldi	r23, 0x00	; 0
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003f7e <__fp_nan>:
    3f7e:	9f ef       	ldi	r25, 0xFF	; 255
    3f80:	80 ec       	ldi	r24, 0xC0	; 192
    3f82:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003e54 <__fp_pscA>:
    3e54:	00 24       	eor	r0, r0
    3e56:	0a 94       	dec	r0
    3e58:	16 16       	cp	r1, r22
    3e5a:	17 06       	cpc	r1, r23
    3e5c:	18 06       	cpc	r1, r24
    3e5e:	09 06       	cpc	r0, r25
    3e60:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003e62 <__fp_pscB>:
    3e62:	00 24       	eor	r0, r0
    3e64:	0a 94       	dec	r0
    3e66:	12 16       	cp	r1, r18
    3e68:	13 06       	cpc	r1, r19
    3e6a:	14 06       	cpc	r1, r20
    3e6c:	05 06       	cpc	r0, r21
    3e6e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003afe <__fp_round>:
    3afe:	09 2e       	mov	r0, r25
    3b00:	03 94       	inc	r0
    3b02:	00 0c       	add	r0, r0
    3b04:	11 f4       	brne	.+4      	; 0x3b0a <__fp_round+0xc>
    3b06:	88 23       	and	r24, r24
    3b08:	52 f0       	brmi	.+20     	; 0x3b1e <__fp_round+0x20>
    3b0a:	bb 0f       	add	r27, r27
    3b0c:	40 f4       	brcc	.+16     	; 0x3b1e <__fp_round+0x20>
    3b0e:	bf 2b       	or	r27, r31
    3b10:	11 f4       	brne	.+4      	; 0x3b16 <__fp_round+0x18>
    3b12:	60 ff       	sbrs	r22, 0
    3b14:	04 c0       	rjmp	.+8      	; 0x3b1e <__fp_round+0x20>
    3b16:	6f 5f       	subi	r22, 0xFF	; 255
    3b18:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000033ea <__fp_split3>:
    33ea:	57 fd       	sbrc	r21, 7
    33ec:	90 58       	subi	r25, 0x80	; 128
    33ee:	44 0f       	add	r20, r20
    33f0:	55 1f       	adc	r21, r21
    33f2:	59 f0       	breq	.+22     	; 0x340a <__fp_splitA+0x10>
    33f4:	5f 3f       	cpi	r21, 0xFF	; 255
    33f6:	71 f0       	breq	.+28     	; 0x3414 <__fp_splitA+0x1a>
    33f8:	47 95       	ror	r20

000033fa <__fp_splitA>:
    33fa:	88 0f       	add	r24, r24
    33fc:	97 fb       	bst	r25, 7
    33fe:	99 1f       	adc	r25, r25
    3400:	61 f0       	breq	.+24     	; 0x341a <__fp_splitA+0x20>
    3402:	9f 3f       	cpi	r25, 0xFF	; 255
    3404:	79 f0       	breq	.+30     	; 0x3424 <__fp_splitA+0x2a>
    3406:	87 95       	ror	r24
    3408:	08 95       	ret
    340a:	12 16       	cp	r1, r18
    340c:	13 06       	cpc	r1, r19
    340e:	14 06       	cpc	r1, r20
    3410:	55 1f       	adc	r21, r21
    3412:	f2 cf       	rjmp	.-28     	; 0x33f8 <__fp_split3+0xe>
    3414:	46 95       	lsr	r20
    3416:	f1 df       	rcall	.-30     	; 0x33fa <__fp_splitA>
    3418:	08 c0       	rjmp	.+16     	; 0x342a <__fp_splitA+0x30>
    341a:	16 16       	cp	r1, r22
    341c:	17 06       	cpc	r1, r23
    341e:	18 06       	cpc	r1, r24
    3420:	99 1f       	adc	r25, r25
    3422:	f1 cf       	rjmp	.-30     	; 0x3406 <__fp_splitA+0xc>
    3424:	86 95       	lsr	r24
    3426:	71 05       	cpc	r23, r1
    3428:	61 05       	cpc	r22, r1
    342a:	08 94       	sec
    342c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003e70 <__fp_zero>:
    3e70:	e8 94       	clt

00003e72 <__fp_szero>:
    3e72:	bb 27       	eor	r27, r27
    3e74:	66 27       	eor	r22, r22
    3e76:	77 27       	eor	r23, r23
    3e78:	cb 01       	movw	r24, r22
    3e7a:	97 f9       	bld	r25, 7
    3e7c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003f5c <__mulsf3>:
    3f5c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__mulsf3x>
    3f60:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f5e <__mulsf3x>:
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <__mulsf3x+0x20>
    1f60:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__fp_pscA>
    1f64:	38 f0       	brcs	.+14     	; 0x1f74 <__mulsf3x+0x16>
    1f66:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_pscB>
    1f6a:	20 f0       	brcs	.+8      	; 0x1f74 <__mulsf3x+0x16>
    1f6c:	95 23       	and	r25, r21
    1f6e:	11 f0       	breq	.+4      	; 0x1f74 <__mulsf3x+0x16>
    1f70:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_inf>
    1f74:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_nan>
    1f78:	11 24       	eor	r1, r1
    1f7a:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__fp_szero>
    1f7e:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_split3>
    1f82:	70 f3       	brcs	.-36     	; 0x1f60 <__mulsf3x+0x2>

00001f84 <__mulsf3_pse>:
    1f84:	95 9f       	mul	r25, r21
    1f86:	c1 f3       	breq	.-16     	; 0x1f78 <__mulsf3x+0x1a>
    1f88:	95 0f       	add	r25, r21
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	55 1f       	adc	r21, r21
    1f8e:	62 9f       	mul	r22, r18
    1f90:	f0 01       	movw	r30, r0
    1f92:	72 9f       	mul	r23, r18
    1f94:	bb 27       	eor	r27, r27
    1f96:	f0 0d       	add	r31, r0
    1f98:	b1 1d       	adc	r27, r1
    1f9a:	63 9f       	mul	r22, r19
    1f9c:	aa 27       	eor	r26, r26
    1f9e:	f0 0d       	add	r31, r0
    1fa0:	b1 1d       	adc	r27, r1
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	64 9f       	mul	r22, r20
    1fa6:	66 27       	eor	r22, r22
    1fa8:	b0 0d       	add	r27, r0
    1faa:	a1 1d       	adc	r26, r1
    1fac:	66 1f       	adc	r22, r22
    1fae:	82 9f       	mul	r24, r18
    1fb0:	22 27       	eor	r18, r18
    1fb2:	b0 0d       	add	r27, r0
    1fb4:	a1 1d       	adc	r26, r1
    1fb6:	62 1f       	adc	r22, r18
    1fb8:	73 9f       	mul	r23, r19
    1fba:	b0 0d       	add	r27, r0
    1fbc:	a1 1d       	adc	r26, r1
    1fbe:	62 1f       	adc	r22, r18
    1fc0:	83 9f       	mul	r24, r19
    1fc2:	a0 0d       	add	r26, r0
    1fc4:	61 1d       	adc	r22, r1
    1fc6:	22 1f       	adc	r18, r18
    1fc8:	74 9f       	mul	r23, r20
    1fca:	33 27       	eor	r19, r19
    1fcc:	a0 0d       	add	r26, r0
    1fce:	61 1d       	adc	r22, r1
    1fd0:	23 1f       	adc	r18, r19
    1fd2:	84 9f       	mul	r24, r20
    1fd4:	60 0d       	add	r22, r0
    1fd6:	21 1d       	adc	r18, r1
    1fd8:	82 2f       	mov	r24, r18
    1fda:	76 2f       	mov	r23, r22
    1fdc:	6a 2f       	mov	r22, r26
    1fde:	11 24       	eor	r1, r1
    1fe0:	9f 57       	subi	r25, 0x7F	; 127
    1fe2:	50 40       	sbci	r21, 0x00	; 0
    1fe4:	9a f0       	brmi	.+38     	; 0x200c <__mulsf3_pse+0x88>
    1fe6:	f1 f0       	breq	.+60     	; 0x2024 <__mulsf3_pse+0xa0>
    1fe8:	88 23       	and	r24, r24
    1fea:	4a f0       	brmi	.+18     	; 0x1ffe <__mulsf3_pse+0x7a>
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	66 1f       	adc	r22, r22
    1ff4:	77 1f       	adc	r23, r23
    1ff6:	88 1f       	adc	r24, r24
    1ff8:	91 50       	subi	r25, 0x01	; 1
    1ffa:	50 40       	sbci	r21, 0x00	; 0
    1ffc:	a9 f7       	brne	.-22     	; 0x1fe8 <__mulsf3_pse+0x64>
    1ffe:	9e 3f       	cpi	r25, 0xFE	; 254
    2000:	51 05       	cpc	r21, r1
    2002:	80 f0       	brcs	.+32     	; 0x2024 <__mulsf3_pse+0xa0>
    2004:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_inf>
    2008:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__fp_szero>
    200c:	5f 3f       	cpi	r21, 0xFF	; 255
    200e:	e4 f3       	brlt	.-8      	; 0x2008 <__mulsf3_pse+0x84>
    2010:	98 3e       	cpi	r25, 0xE8	; 232
    2012:	d4 f3       	brlt	.-12     	; 0x2008 <__mulsf3_pse+0x84>
    2014:	86 95       	lsr	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	b7 95       	ror	r27
    201c:	f7 95       	ror	r31
    201e:	e7 95       	ror	r30
    2020:	9f 5f       	subi	r25, 0xFF	; 255
    2022:	c1 f7       	brne	.-16     	; 0x2014 <__mulsf3_pse+0x90>
    2024:	fe 2b       	or	r31, r30
    2026:	88 0f       	add	r24, r24
    2028:	91 1d       	adc	r25, r1
    202a:	96 95       	lsr	r25
    202c:	87 95       	ror	r24
    202e:	97 f9       	bld	r25, 7
    2030:	08 95       	ret

Disassembly of section .text.avrlibc:

00000590 <vfprintf>:
 590:	a4 e1       	ldi	r26, 0x14	; 20
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	ee ec       	ldi	r30, 0xCE	; 206
 596:	f2 e0       	ldi	r31, 0x02	; 2
 598:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__prologue_saves__>
 59c:	6c 01       	movw	r12, r24
 59e:	1a 01       	movw	r2, r20
 5a0:	46 2e       	mov	r4, r22
 5a2:	59 01       	movw	r10, r18
 5a4:	fc 01       	movw	r30, r24
 5a6:	10 86       	std	Z+8, r1	; 0x08
 5a8:	17 82       	std	Z+7, r1	; 0x07
 5aa:	84 81       	ldd	r24, Z+4	; 0x04
 5ac:	81 ff       	sbrs	r24, 1
 5ae:	62 c3       	rjmp	.+1732   	; 0xc74 <__EEPROM_REGION_LENGTH__+0x474>
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	9d 87       	std	Y+13, r25	; 0x0d
 5b6:	8c 87       	std	Y+12, r24	; 0x0c
 5b8:	a0 e8       	ldi	r26, 0x80	; 128
 5ba:	8a 8b       	std	Y+18, r24	; 0x12
 5bc:	9b 8b       	std	Y+19, r25	; 0x13
 5be:	ac 8b       	std	Y+20, r26	; 0x14
 5c0:	f1 01       	movw	r30, r2
 5c2:	84 91       	lpm	r24, Z
 5c4:	47 fc       	sbrc	r4, 7
 5c6:	80 81       	ld	r24, Z
 5c8:	88 23       	and	r24, r24
 5ca:	09 f4       	brne	.+2      	; 0x5ce <vfprintf+0x3e>
 5cc:	4f c3       	rjmp	.+1694   	; 0xc6c <__EEPROM_REGION_LENGTH__+0x46c>
 5ce:	44 2d       	mov	r20, r4
 5d0:	91 01       	movw	r18, r2
 5d2:	2f 5f       	subi	r18, 0xFF	; 255
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	4f 4f       	sbci	r20, 0xFF	; 255
 5d8:	85 32       	cpi	r24, 0x25	; 37
 5da:	19 f0       	breq	.+6      	; 0x5e2 <vfprintf+0x52>
 5dc:	19 01       	movw	r2, r18
 5de:	44 2e       	mov	r4, r20
 5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <vfprintf+0x66>
 5e2:	f9 01       	movw	r30, r18
 5e4:	84 91       	lpm	r24, Z
 5e6:	47 fd       	sbrc	r20, 7
 5e8:	80 81       	ld	r24, Z
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	29 0e       	add	r2, r25
 5ee:	31 1c       	adc	r3, r1
 5f0:	41 1c       	adc	r4, r1
 5f2:	85 32       	cpi	r24, 0x25	; 37
 5f4:	49 f4       	brne	.+18     	; 0x608 <vfprintf+0x78>
 5f6:	b6 01       	movw	r22, r12
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 5fe:	bf 86       	std	Y+15, r11	; 0x0f
 600:	ae 86       	std	Y+14, r10	; 0x0e
 602:	ae 84       	ldd	r10, Y+14	; 0x0e
 604:	bf 84       	ldd	r11, Y+15	; 0x0f
 606:	dc cf       	rjmp	.-72     	; 0x5c0 <vfprintf+0x30>
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	f1 2c       	mov	r15, r1
 60c:	00 e0       	ldi	r16, 0x00	; 0
 60e:	00 32       	cpi	r16, 0x20	; 32
 610:	a0 f4       	brcc	.+40     	; 0x63a <vfprintf+0xaa>
 612:	8b 32       	cpi	r24, 0x2B	; 43
 614:	69 f0       	breq	.+26     	; 0x630 <vfprintf+0xa0>
 616:	30 f4       	brcc	.+12     	; 0x624 <vfprintf+0x94>
 618:	80 32       	cpi	r24, 0x20	; 32
 61a:	59 f0       	breq	.+22     	; 0x632 <vfprintf+0xa2>
 61c:	83 32       	cpi	r24, 0x23	; 35
 61e:	69 f4       	brne	.+26     	; 0x63a <vfprintf+0xaa>
 620:	00 61       	ori	r16, 0x10	; 16
 622:	2c c0       	rjmp	.+88     	; 0x67c <vfprintf+0xec>
 624:	8d 32       	cpi	r24, 0x2D	; 45
 626:	39 f0       	breq	.+14     	; 0x636 <vfprintf+0xa6>
 628:	80 33       	cpi	r24, 0x30	; 48
 62a:	39 f4       	brne	.+14     	; 0x63a <vfprintf+0xaa>
 62c:	01 60       	ori	r16, 0x01	; 1
 62e:	26 c0       	rjmp	.+76     	; 0x67c <vfprintf+0xec>
 630:	02 60       	ori	r16, 0x02	; 2
 632:	04 60       	ori	r16, 0x04	; 4
 634:	23 c0       	rjmp	.+70     	; 0x67c <vfprintf+0xec>
 636:	08 60       	ori	r16, 0x08	; 8
 638:	21 c0       	rjmp	.+66     	; 0x67c <vfprintf+0xec>
 63a:	07 fd       	sbrc	r16, 7
 63c:	29 c0       	rjmp	.+82     	; 0x690 <vfprintf+0x100>
 63e:	90 ed       	ldi	r25, 0xD0	; 208
 640:	98 0f       	add	r25, r24
 642:	9a 30       	cpi	r25, 0x0A	; 10
 644:	78 f4       	brcc	.+30     	; 0x664 <vfprintf+0xd4>
 646:	06 ff       	sbrs	r16, 6
 648:	06 c0       	rjmp	.+12     	; 0x656 <vfprintf+0xc6>
 64a:	aa e0       	ldi	r26, 0x0A	; 10
 64c:	1a 9f       	mul	r17, r26
 64e:	90 0d       	add	r25, r0
 650:	11 24       	eor	r1, r1
 652:	19 2f       	mov	r17, r25
 654:	13 c0       	rjmp	.+38     	; 0x67c <vfprintf+0xec>
 656:	ea e0       	ldi	r30, 0x0A	; 10
 658:	fe 9e       	mul	r15, r30
 65a:	90 0d       	add	r25, r0
 65c:	11 24       	eor	r1, r1
 65e:	f9 2e       	mov	r15, r25
 660:	00 62       	ori	r16, 0x20	; 32
 662:	0c c0       	rjmp	.+24     	; 0x67c <vfprintf+0xec>
 664:	8e 32       	cpi	r24, 0x2E	; 46
 666:	21 f4       	brne	.+8      	; 0x670 <vfprintf+0xe0>
 668:	06 fd       	sbrc	r16, 6
 66a:	00 c3       	rjmp	.+1536   	; 0xc6c <__EEPROM_REGION_LENGTH__+0x46c>
 66c:	00 64       	ori	r16, 0x40	; 64
 66e:	06 c0       	rjmp	.+12     	; 0x67c <vfprintf+0xec>
 670:	8c 36       	cpi	r24, 0x6C	; 108
 672:	11 f4       	brne	.+4      	; 0x678 <vfprintf+0xe8>
 674:	00 68       	ori	r16, 0x80	; 128
 676:	02 c0       	rjmp	.+4      	; 0x67c <vfprintf+0xec>
 678:	88 36       	cpi	r24, 0x68	; 104
 67a:	51 f4       	brne	.+20     	; 0x690 <vfprintf+0x100>
 67c:	f1 01       	movw	r30, r2
 67e:	84 91       	lpm	r24, Z
 680:	47 fc       	sbrc	r4, 7
 682:	80 81       	ld	r24, Z
 684:	ff ef       	ldi	r31, 0xFF	; 255
 686:	2f 1a       	sub	r2, r31
 688:	3f 0a       	sbc	r3, r31
 68a:	4f 0a       	sbc	r4, r31
 68c:	81 11       	cpse	r24, r1
 68e:	bf cf       	rjmp	.-130    	; 0x60e <vfprintf+0x7e>
 690:	9b eb       	ldi	r25, 0xBB	; 187
 692:	98 0f       	add	r25, r24
 694:	93 30       	cpi	r25, 0x03	; 3
 696:	18 f4       	brcc	.+6      	; 0x69e <vfprintf+0x10e>
 698:	00 61       	ori	r16, 0x10	; 16
 69a:	80 5e       	subi	r24, 0xE0	; 224
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <vfprintf+0x11a>
 69e:	9b e9       	ldi	r25, 0x9B	; 155
 6a0:	98 0f       	add	r25, r24
 6a2:	93 30       	cpi	r25, 0x03	; 3
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <vfprintf+0x118>
 6a6:	66 c1       	rjmp	.+716    	; 0x974 <__EEPROM_REGION_LENGTH__+0x174>
 6a8:	0f 7e       	andi	r16, 0xEF	; 239
 6aa:	06 ff       	sbrs	r16, 6
 6ac:	16 e0       	ldi	r17, 0x06	; 6
 6ae:	0f 73       	andi	r16, 0x3F	; 63
 6b0:	70 2e       	mov	r7, r16
 6b2:	85 36       	cpi	r24, 0x65	; 101
 6b4:	21 f4       	brne	.+8      	; 0x6be <vfprintf+0x12e>
 6b6:	20 2f       	mov	r18, r16
 6b8:	20 64       	ori	r18, 0x40	; 64
 6ba:	72 2e       	mov	r7, r18
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <vfprintf+0x13e>
 6be:	86 36       	cpi	r24, 0x66	; 102
 6c0:	21 f4       	brne	.+8      	; 0x6ca <vfprintf+0x13a>
 6c2:	80 2f       	mov	r24, r16
 6c4:	80 68       	ori	r24, 0x80	; 128
 6c6:	78 2e       	mov	r7, r24
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <vfprintf+0x13e>
 6ca:	11 11       	cpse	r17, r1
 6cc:	11 50       	subi	r17, 0x01	; 1
 6ce:	77 fe       	sbrs	r7, 7
 6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <vfprintf+0x150>
 6d2:	1c 33       	cpi	r17, 0x3C	; 60
 6d4:	50 f4       	brcc	.+20     	; 0x6ea <vfprintf+0x15a>
 6d6:	ee 24       	eor	r14, r14
 6d8:	e3 94       	inc	r14
 6da:	e1 0e       	add	r14, r17
 6dc:	27 e0       	ldi	r18, 0x07	; 7
 6de:	0b c0       	rjmp	.+22     	; 0x6f6 <vfprintf+0x166>
 6e0:	18 30       	cpi	r17, 0x08	; 8
 6e2:	38 f0       	brcs	.+14     	; 0x6f2 <vfprintf+0x162>
 6e4:	27 e0       	ldi	r18, 0x07	; 7
 6e6:	17 e0       	ldi	r17, 0x07	; 7
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <vfprintf+0x164>
 6ea:	27 e0       	ldi	r18, 0x07	; 7
 6ec:	6c e3       	ldi	r22, 0x3C	; 60
 6ee:	e6 2e       	mov	r14, r22
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x166>
 6f2:	21 2f       	mov	r18, r17
 6f4:	e1 2c       	mov	r14, r1
 6f6:	f5 01       	movw	r30, r10
 6f8:	34 96       	adiw	r30, 0x04	; 4
 6fa:	ff 87       	std	Y+15, r31	; 0x0f
 6fc:	ee 87       	std	Y+14, r30	; 0x0e
 6fe:	f5 01       	movw	r30, r10
 700:	60 81       	ld	r22, Z
 702:	71 81       	ldd	r23, Z+1	; 0x01
 704:	82 81       	ldd	r24, Z+2	; 0x02
 706:	93 81       	ldd	r25, Z+3	; 0x03
 708:	0e 2d       	mov	r16, r14
 70a:	ae 01       	movw	r20, r28
 70c:	4f 5f       	subi	r20, 0xFF	; 255
 70e:	5f 4f       	sbci	r21, 0xFF	; 255
 710:	0e 94 29 0a 	call	0x1452	; 0x1452 <__ftoa_engine>
 714:	5c 01       	movw	r10, r24
 716:	59 80       	ldd	r5, Y+1	; 0x01
 718:	50 fe       	sbrs	r5, 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <vfprintf+0x190>
 71c:	53 fe       	sbrs	r5, 3
 71e:	06 c0       	rjmp	.+12     	; 0x72c <vfprintf+0x19c>
 720:	71 fc       	sbrc	r7, 1
 722:	06 c0       	rjmp	.+12     	; 0x730 <vfprintf+0x1a0>
 724:	72 fe       	sbrs	r7, 2
 726:	06 c0       	rjmp	.+12     	; 0x734 <vfprintf+0x1a4>
 728:	00 e2       	ldi	r16, 0x20	; 32
 72a:	05 c0       	rjmp	.+10     	; 0x736 <vfprintf+0x1a6>
 72c:	0d e2       	ldi	r16, 0x2D	; 45
 72e:	03 c0       	rjmp	.+6      	; 0x736 <vfprintf+0x1a6>
 730:	0b e2       	ldi	r16, 0x2B	; 43
 732:	01 c0       	rjmp	.+2      	; 0x736 <vfprintf+0x1a6>
 734:	00 e0       	ldi	r16, 0x00	; 0
 736:	85 2d       	mov	r24, r5
 738:	8c 70       	andi	r24, 0x0C	; 12
 73a:	19 f0       	breq	.+6      	; 0x742 <vfprintf+0x1b2>
 73c:	01 11       	cpse	r16, r1
 73e:	73 c2       	rjmp	.+1254   	; 0xc26 <__EEPROM_REGION_LENGTH__+0x426>
 740:	be c2       	rjmp	.+1404   	; 0xcbe <__EEPROM_REGION_LENGTH__+0x4be>
 742:	77 fe       	sbrs	r7, 7
 744:	0f c0       	rjmp	.+30     	; 0x764 <vfprintf+0x1d4>
 746:	ea 0c       	add	r14, r10
 748:	54 fe       	sbrs	r5, 4
 74a:	04 c0       	rjmp	.+8      	; 0x754 <vfprintf+0x1c4>
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	81 33       	cpi	r24, 0x31	; 49
 750:	09 f4       	brne	.+2      	; 0x754 <vfprintf+0x1c4>
 752:	ea 94       	dec	r14
 754:	1e 14       	cp	r1, r14
 756:	74 f5       	brge	.+92     	; 0x7b4 <vfprintf+0x224>
 758:	28 e0       	ldi	r18, 0x08	; 8
 75a:	2e 15       	cp	r18, r14
 75c:	78 f5       	brcc	.+94     	; 0x7bc <vfprintf+0x22c>
 75e:	38 e0       	ldi	r19, 0x08	; 8
 760:	e3 2e       	mov	r14, r19
 762:	2c c0       	rjmp	.+88     	; 0x7bc <vfprintf+0x22c>
 764:	76 fc       	sbrc	r7, 6
 766:	2a c0       	rjmp	.+84     	; 0x7bc <vfprintf+0x22c>
 768:	81 2f       	mov	r24, r17
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	8a 15       	cp	r24, r10
 76e:	9b 05       	cpc	r25, r11
 770:	9c f0       	brlt	.+38     	; 0x798 <vfprintf+0x208>
 772:	8c ef       	ldi	r24, 0xFC	; 252
 774:	a8 16       	cp	r10, r24
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	b8 06       	cpc	r11, r24
 77a:	74 f0       	brlt	.+28     	; 0x798 <vfprintf+0x208>
 77c:	97 2d       	mov	r25, r7
 77e:	90 68       	ori	r25, 0x80	; 128
 780:	79 2e       	mov	r7, r25
 782:	0a c0       	rjmp	.+20     	; 0x798 <vfprintf+0x208>
 784:	e2 e0       	ldi	r30, 0x02	; 2
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	ec 0f       	add	r30, r28
 78a:	fd 1f       	adc	r31, r29
 78c:	e1 0f       	add	r30, r17
 78e:	f1 1d       	adc	r31, r1
 790:	80 81       	ld	r24, Z
 792:	80 33       	cpi	r24, 0x30	; 48
 794:	19 f4       	brne	.+6      	; 0x79c <vfprintf+0x20c>
 796:	11 50       	subi	r17, 0x01	; 1
 798:	11 11       	cpse	r17, r1
 79a:	f4 cf       	rjmp	.-24     	; 0x784 <vfprintf+0x1f4>
 79c:	77 fe       	sbrs	r7, 7
 79e:	0e c0       	rjmp	.+28     	; 0x7bc <vfprintf+0x22c>
 7a0:	ee 24       	eor	r14, r14
 7a2:	e3 94       	inc	r14
 7a4:	e1 0e       	add	r14, r17
 7a6:	81 2f       	mov	r24, r17
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	a8 16       	cp	r10, r24
 7ac:	b9 06       	cpc	r11, r25
 7ae:	2c f4       	brge	.+10     	; 0x7ba <vfprintf+0x22a>
 7b0:	1a 19       	sub	r17, r10
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <vfprintf+0x22c>
 7b4:	ee 24       	eor	r14, r14
 7b6:	e3 94       	inc	r14
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <vfprintf+0x22c>
 7ba:	10 e0       	ldi	r17, 0x00	; 0
 7bc:	77 fe       	sbrs	r7, 7
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <vfprintf+0x23c>
 7c0:	1a 14       	cp	r1, r10
 7c2:	1b 04       	cpc	r1, r11
 7c4:	34 f4       	brge	.+12     	; 0x7d2 <vfprintf+0x242>
 7c6:	c5 01       	movw	r24, r10
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <vfprintf+0x246>
 7cc:	85 e0       	ldi	r24, 0x05	; 5
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x246>
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	01 11       	cpse	r16, r1
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	11 23       	and	r17, r17
 7dc:	31 f0       	breq	.+12     	; 0x7ea <vfprintf+0x25a>
 7de:	21 2f       	mov	r18, r17
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	2f 5f       	subi	r18, 0xFF	; 255
 7e4:	3f 4f       	sbci	r19, 0xFF	; 255
 7e6:	82 0f       	add	r24, r18
 7e8:	93 1f       	adc	r25, r19
 7ea:	2f 2d       	mov	r18, r15
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	82 17       	cp	r24, r18
 7f0:	93 07       	cpc	r25, r19
 7f2:	14 f4       	brge	.+4      	; 0x7f8 <vfprintf+0x268>
 7f4:	f8 1a       	sub	r15, r24
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <vfprintf+0x26a>
 7f8:	f1 2c       	mov	r15, r1
 7fa:	87 2d       	mov	r24, r7
 7fc:	89 70       	andi	r24, 0x09	; 9
 7fe:	49 f4       	brne	.+18     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 800:	ff 20       	and	r15, r15
 802:	39 f0       	breq	.+14     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 804:	b6 01       	movw	r22, r12
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 80e:	fa 94       	dec	r15
 810:	f7 cf       	rjmp	.-18     	; 0x800 <__EEPROM_REGION_LENGTH__>
 812:	00 23       	and	r16, r16
 814:	29 f0       	breq	.+10     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 816:	b6 01       	movw	r22, r12
 818:	80 2f       	mov	r24, r16
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 820:	73 fc       	sbrc	r7, 3
 822:	09 c0       	rjmp	.+18     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 824:	ff 20       	and	r15, r15
 826:	39 f0       	breq	.+14     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 828:	b6 01       	movw	r22, r12
 82a:	80 e3       	ldi	r24, 0x30	; 48
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 832:	fa 94       	dec	r15
 834:	f7 cf       	rjmp	.-18     	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 836:	77 fe       	sbrs	r7, 7
 838:	49 c0       	rjmp	.+146    	; 0x8cc <__EEPROM_REGION_LENGTH__+0xcc>
 83a:	35 01       	movw	r6, r10
 83c:	b7 fe       	sbrs	r11, 7
 83e:	02 c0       	rjmp	.+4      	; 0x844 <__EEPROM_REGION_LENGTH__+0x44>
 840:	61 2c       	mov	r6, r1
 842:	71 2c       	mov	r7, r1
 844:	c5 01       	movw	r24, r10
 846:	86 19       	sub	r24, r6
 848:	97 09       	sbc	r25, r7
 84a:	88 24       	eor	r8, r8
 84c:	83 94       	inc	r8
 84e:	91 2c       	mov	r9, r1
 850:	8c 0e       	add	r8, r28
 852:	9d 1e       	adc	r9, r29
 854:	88 0e       	add	r8, r24
 856:	99 1e       	adc	r9, r25
 858:	f5 01       	movw	r30, r10
 85a:	ee 19       	sub	r30, r14
 85c:	f1 09       	sbc	r31, r1
 85e:	f9 8b       	std	Y+17, r31	; 0x11
 860:	e8 8b       	std	Y+16, r30	; 0x10
 862:	01 2f       	mov	r16, r17
 864:	10 e0       	ldi	r17, 0x00	; 0
 866:	11 95       	neg	r17
 868:	01 95       	neg	r16
 86a:	11 09       	sbc	r17, r1
 86c:	ff ef       	ldi	r31, 0xFF	; 255
 86e:	6f 16       	cp	r6, r31
 870:	7f 06       	cpc	r7, r31
 872:	29 f4       	brne	.+10     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 874:	b6 01       	movw	r22, r12
 876:	8e e2       	ldi	r24, 0x2E	; 46
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 87e:	a6 14       	cp	r10, r6
 880:	b7 04       	cpc	r11, r7
 882:	44 f0       	brlt	.+16     	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 884:	88 89       	ldd	r24, Y+16	; 0x10
 886:	99 89       	ldd	r25, Y+17	; 0x11
 888:	86 15       	cp	r24, r6
 88a:	97 05       	cpc	r25, r7
 88c:	1c f4       	brge	.+6      	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 88e:	f4 01       	movw	r30, r8
 890:	81 81       	ldd	r24, Z+1	; 0x01
 892:	01 c0       	rjmp	.+2      	; 0x896 <__EEPROM_REGION_LENGTH__+0x96>
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	f1 e0       	ldi	r31, 0x01	; 1
 898:	6f 1a       	sub	r6, r31
 89a:	71 08       	sbc	r7, r1
 89c:	2f ef       	ldi	r18, 0xFF	; 255
 89e:	82 1a       	sub	r8, r18
 8a0:	92 0a       	sbc	r9, r18
 8a2:	60 16       	cp	r6, r16
 8a4:	71 06       	cpc	r7, r17
 8a6:	2c f0       	brlt	.+10     	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
 8a8:	b6 01       	movw	r22, r12
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 8b0:	dd cf       	rjmp	.-70     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 8b2:	a6 14       	cp	r10, r6
 8b4:	b7 04       	cpc	r11, r7
 8b6:	39 f4       	brne	.+14     	; 0x8c6 <__EEPROM_REGION_LENGTH__+0xc6>
 8b8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ba:	96 33       	cpi	r25, 0x36	; 54
 8bc:	18 f4       	brcc	.+6      	; 0x8c4 <__EEPROM_REGION_LENGTH__+0xc4>
 8be:	95 33       	cpi	r25, 0x35	; 53
 8c0:	11 f4       	brne	.+4      	; 0x8c6 <__EEPROM_REGION_LENGTH__+0xc6>
 8c2:	54 fe       	sbrs	r5, 4
 8c4:	81 e3       	ldi	r24, 0x31	; 49
 8c6:	b6 01       	movw	r22, r12
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	51 c0       	rjmp	.+162    	; 0x96e <__EEPROM_REGION_LENGTH__+0x16e>
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	81 33       	cpi	r24, 0x31	; 49
 8d0:	19 f0       	breq	.+6      	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8d2:	95 2d       	mov	r25, r5
 8d4:	9f 7e       	andi	r25, 0xEF	; 239
 8d6:	59 2e       	mov	r5, r25
 8d8:	b6 01       	movw	r22, r12
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 8e0:	11 11       	cpse	r17, r1
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <__EEPROM_REGION_LENGTH__+0xee>
 8e4:	74 fc       	sbrc	r7, 4
 8e6:	1c c0       	rjmp	.+56     	; 0x920 <__EEPROM_REGION_LENGTH__+0x120>
 8e8:	85 e6       	ldi	r24, 0x65	; 101
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	1b c0       	rjmp	.+54     	; 0x924 <__EEPROM_REGION_LENGTH__+0x124>
 8ee:	b6 01       	movw	r22, r12
 8f0:	8e e2       	ldi	r24, 0x2E	; 46
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 8f8:	02 e0       	ldi	r16, 0x02	; 2
 8fa:	01 0f       	add	r16, r17
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	11 e0       	ldi	r17, 0x01	; 1
 900:	18 0f       	add	r17, r24
 902:	e1 e0       	ldi	r30, 0x01	; 1
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	ec 0f       	add	r30, r28
 908:	fd 1f       	adc	r31, r29
 90a:	e8 0f       	add	r30, r24
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	b6 01       	movw	r22, r12
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 918:	81 2f       	mov	r24, r17
 91a:	10 13       	cpse	r17, r16
 91c:	f0 cf       	rjmp	.-32     	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
 91e:	e2 cf       	rjmp	.-60     	; 0x8e4 <__EEPROM_REGION_LENGTH__+0xe4>
 920:	85 e4       	ldi	r24, 0x45	; 69
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b6 01       	movw	r22, r12
 926:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 92a:	b7 fc       	sbrc	r11, 7
 92c:	05 c0       	rjmp	.+10     	; 0x938 <__EEPROM_REGION_LENGTH__+0x138>
 92e:	a1 14       	cp	r10, r1
 930:	b1 04       	cpc	r11, r1
 932:	39 f4       	brne	.+14     	; 0x942 <__EEPROM_REGION_LENGTH__+0x142>
 934:	54 fe       	sbrs	r5, 4
 936:	05 c0       	rjmp	.+10     	; 0x942 <__EEPROM_REGION_LENGTH__+0x142>
 938:	b1 94       	neg	r11
 93a:	a1 94       	neg	r10
 93c:	b1 08       	sbc	r11, r1
 93e:	8d e2       	ldi	r24, 0x2D	; 45
 940:	01 c0       	rjmp	.+2      	; 0x944 <__EEPROM_REGION_LENGTH__+0x144>
 942:	8b e2       	ldi	r24, 0x2B	; 43
 944:	b6 01       	movw	r22, r12
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 94c:	80 e3       	ldi	r24, 0x30	; 48
 94e:	ea e0       	ldi	r30, 0x0A	; 10
 950:	ae 16       	cp	r10, r30
 952:	b1 04       	cpc	r11, r1
 954:	2c f0       	brlt	.+10     	; 0x960 <__EEPROM_REGION_LENGTH__+0x160>
 956:	8f 5f       	subi	r24, 0xFF	; 255
 958:	aa e0       	ldi	r26, 0x0A	; 10
 95a:	aa 1a       	sub	r10, r26
 95c:	b1 08       	sbc	r11, r1
 95e:	f7 cf       	rjmp	.-18     	; 0x94e <__EEPROM_REGION_LENGTH__+0x14e>
 960:	b6 01       	movw	r22, r12
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 968:	b6 01       	movw	r22, r12
 96a:	c5 01       	movw	r24, r10
 96c:	c0 96       	adiw	r24, 0x30	; 48
 96e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 972:	72 c1       	rjmp	.+740    	; 0xc58 <__EEPROM_REGION_LENGTH__+0x458>
 974:	83 36       	cpi	r24, 0x63	; 99
 976:	31 f0       	breq	.+12     	; 0x984 <__EEPROM_REGION_LENGTH__+0x184>
 978:	83 37       	cpi	r24, 0x73	; 115
 97a:	91 f0       	breq	.+36     	; 0x9a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 97c:	83 35       	cpi	r24, 0x53	; 83
 97e:	09 f0       	breq	.+2      	; 0x982 <__EEPROM_REGION_LENGTH__+0x182>
 980:	5d c0       	rjmp	.+186    	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 982:	24 c0       	rjmp	.+72     	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 984:	c5 01       	movw	r24, r10
 986:	02 96       	adiw	r24, 0x02	; 2
 988:	9f 87       	std	Y+15, r25	; 0x0f
 98a:	8e 87       	std	Y+14, r24	; 0x0e
 98c:	f5 01       	movw	r30, r10
 98e:	80 81       	ld	r24, Z
 990:	89 83       	std	Y+1, r24	; 0x01
 992:	6a 88       	ldd	r6, Y+18	; 0x12
 994:	7b 88       	ldd	r7, Y+19	; 0x13
 996:	8c 88       	ldd	r8, Y+20	; 0x14
 998:	aa 24       	eor	r10, r10
 99a:	a3 94       	inc	r10
 99c:	b1 2c       	mov	r11, r1
 99e:	14 c0       	rjmp	.+40     	; 0x9c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 9a0:	c5 01       	movw	r24, r10
 9a2:	03 96       	adiw	r24, 0x03	; 3
 9a4:	9f 87       	std	Y+15, r25	; 0x0f
 9a6:	8e 87       	std	Y+14, r24	; 0x0e
 9a8:	f5 01       	movw	r30, r10
 9aa:	60 80       	ld	r6, Z
 9ac:	71 80       	ldd	r7, Z+1	; 0x01
 9ae:	82 80       	ldd	r8, Z+2	; 0x02
 9b0:	06 ff       	sbrs	r16, 6
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <__EEPROM_REGION_LENGTH__+0x1ba>
 9b4:	41 2f       	mov	r20, r17
 9b6:	50 e0       	ldi	r21, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <__EEPROM_REGION_LENGTH__+0x1be>
 9ba:	4f ef       	ldi	r20, 0xFF	; 255
 9bc:	5f ef       	ldi	r21, 0xFF	; 255
 9be:	88 2d       	mov	r24, r8
 9c0:	b3 01       	movw	r22, r6
 9c2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <strnlen>
 9c6:	5c 01       	movw	r10, r24
 9c8:	0f 77       	andi	r16, 0x7F	; 127
 9ca:	15 c0       	rjmp	.+42     	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 9cc:	c5 01       	movw	r24, r10
 9ce:	03 96       	adiw	r24, 0x03	; 3
 9d0:	9f 87       	std	Y+15, r25	; 0x0f
 9d2:	8e 87       	std	Y+14, r24	; 0x0e
 9d4:	f5 01       	movw	r30, r10
 9d6:	60 80       	ld	r6, Z
 9d8:	71 80       	ldd	r7, Z+1	; 0x01
 9da:	82 80       	ldd	r8, Z+2	; 0x02
 9dc:	06 ff       	sbrs	r16, 6
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 9e0:	41 2f       	mov	r20, r17
 9e2:	50 e0       	ldi	r21, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__EEPROM_REGION_LENGTH__+0x1ea>
 9e6:	4f ef       	ldi	r20, 0xFF	; 255
 9e8:	5f ef       	ldi	r21, 0xFF	; 255
 9ea:	88 2d       	mov	r24, r8
 9ec:	b3 01       	movw	r22, r6
 9ee:	0e 94 ba 1b 	call	0x3774	; 0x3774 <strnlen>
 9f2:	5c 01       	movw	r10, r24
 9f4:	00 68       	ori	r16, 0x80	; 128
 9f6:	03 fd       	sbrc	r16, 3
 9f8:	1d c0       	rjmp	.+58     	; 0xa34 <__EEPROM_REGION_LENGTH__+0x234>
 9fa:	8f 2d       	mov	r24, r15
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	a8 16       	cp	r10, r24
 a00:	b9 06       	cpc	r11, r25
 a02:	c0 f4       	brcc	.+48     	; 0xa34 <__EEPROM_REGION_LENGTH__+0x234>
 a04:	b6 01       	movw	r22, r12
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 a0e:	fa 94       	dec	r15
 a10:	f4 cf       	rjmp	.-24     	; 0x9fa <__EEPROM_REGION_LENGTH__+0x1fa>
 a12:	f3 01       	movw	r30, r6
 a14:	84 91       	lpm	r24, Z
 a16:	87 fc       	sbrc	r8, 7
 a18:	80 81       	ld	r24, Z
 a1a:	ff ef       	ldi	r31, 0xFF	; 255
 a1c:	6f 1a       	sub	r6, r31
 a1e:	7f 0a       	sbc	r7, r31
 a20:	8f 0a       	sbc	r8, r31
 a22:	b6 01       	movw	r22, r12
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 a2a:	f1 10       	cpse	r15, r1
 a2c:	fa 94       	dec	r15
 a2e:	21 e0       	ldi	r18, 0x01	; 1
 a30:	a2 1a       	sub	r10, r18
 a32:	b1 08       	sbc	r11, r1
 a34:	a1 14       	cp	r10, r1
 a36:	b1 04       	cpc	r11, r1
 a38:	61 f7       	brne	.-40     	; 0xa12 <__EEPROM_REGION_LENGTH__+0x212>
 a3a:	0e c1       	rjmp	.+540    	; 0xc58 <__EEPROM_REGION_LENGTH__+0x458>
 a3c:	84 36       	cpi	r24, 0x64	; 100
 a3e:	11 f0       	breq	.+4      	; 0xa44 <__EEPROM_REGION_LENGTH__+0x244>
 a40:	89 36       	cpi	r24, 0x69	; 105
 a42:	79 f5       	brne	.+94     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 a44:	c5 01       	movw	r24, r10
 a46:	07 ff       	sbrs	r16, 7
 a48:	09 c0       	rjmp	.+18     	; 0xa5c <__EEPROM_REGION_LENGTH__+0x25c>
 a4a:	04 96       	adiw	r24, 0x04	; 4
 a4c:	9f 87       	std	Y+15, r25	; 0x0f
 a4e:	8e 87       	std	Y+14, r24	; 0x0e
 a50:	f5 01       	movw	r30, r10
 a52:	60 81       	ld	r22, Z
 a54:	71 81       	ldd	r23, Z+1	; 0x01
 a56:	82 81       	ldd	r24, Z+2	; 0x02
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	0a c0       	rjmp	.+20     	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 a5c:	02 96       	adiw	r24, 0x02	; 2
 a5e:	9f 87       	std	Y+15, r25	; 0x0f
 a60:	8e 87       	std	Y+14, r24	; 0x0e
 a62:	f5 01       	movw	r30, r10
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	07 2e       	mov	r0, r23
 a6a:	00 0c       	add	r0, r0
 a6c:	88 0b       	sbc	r24, r24
 a6e:	99 0b       	sbc	r25, r25
 a70:	0f 76       	andi	r16, 0x6F	; 111
 a72:	e0 2e       	mov	r14, r16
 a74:	97 ff       	sbrs	r25, 7
 a76:	0a c0       	rjmp	.+20     	; 0xa8c <__EEPROM_REGION_LENGTH__+0x28c>
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	f0 2f       	mov	r31, r16
 a88:	f0 68       	ori	r31, 0x80	; 128
 a8a:	ef 2e       	mov	r14, r31
 a8c:	2a e0       	ldi	r18, 0x0A	; 10
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	ae 01       	movw	r20, r28
 a92:	4f 5f       	subi	r20, 0xFF	; 255
 a94:	5f 4f       	sbci	r21, 0xFF	; 255
 a96:	0e 94 de 10 	call	0x21bc	; 0x21bc <__ultoa_invert>
 a9a:	a8 2e       	mov	r10, r24
 a9c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a9e:	a2 1a       	sub	r10, r18
 aa0:	4b c0       	rjmp	.+150    	; 0xb38 <__EEPROM_REGION_LENGTH__+0x338>
 aa2:	85 37       	cpi	r24, 0x75	; 117
 aa4:	29 f4       	brne	.+10     	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 aa6:	0f 7e       	andi	r16, 0xEF	; 239
 aa8:	e0 2e       	mov	r14, r16
 aaa:	2a e0       	ldi	r18, 0x0A	; 10
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	25 c0       	rjmp	.+74     	; 0xafa <__EEPROM_REGION_LENGTH__+0x2fa>
 ab0:	90 2f       	mov	r25, r16
 ab2:	99 7f       	andi	r25, 0xF9	; 249
 ab4:	e9 2e       	mov	r14, r25
 ab6:	8f 36       	cpi	r24, 0x6F	; 111
 ab8:	c1 f0       	breq	.+48     	; 0xaea <__EEPROM_REGION_LENGTH__+0x2ea>
 aba:	18 f4       	brcc	.+6      	; 0xac2 <__EEPROM_REGION_LENGTH__+0x2c2>
 abc:	88 35       	cpi	r24, 0x58	; 88
 abe:	79 f0       	breq	.+30     	; 0xade <__EEPROM_REGION_LENGTH__+0x2de>
 ac0:	d5 c0       	rjmp	.+426    	; 0xc6c <__EEPROM_REGION_LENGTH__+0x46c>
 ac2:	80 37       	cpi	r24, 0x70	; 112
 ac4:	19 f0       	breq	.+6      	; 0xacc <__EEPROM_REGION_LENGTH__+0x2cc>
 ac6:	88 37       	cpi	r24, 0x78	; 120
 ac8:	21 f0       	breq	.+8      	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 aca:	d0 c0       	rjmp	.+416    	; 0xc6c <__EEPROM_REGION_LENGTH__+0x46c>
 acc:	a9 2f       	mov	r26, r25
 ace:	a0 61       	ori	r26, 0x10	; 16
 ad0:	ea 2e       	mov	r14, r26
 ad2:	e4 fe       	sbrs	r14, 4
 ad4:	0d c0       	rjmp	.+26     	; 0xaf0 <__EEPROM_REGION_LENGTH__+0x2f0>
 ad6:	ee 2d       	mov	r30, r14
 ad8:	e4 60       	ori	r30, 0x04	; 4
 ada:	ee 2e       	mov	r14, r30
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__EEPROM_REGION_LENGTH__+0x2f0>
 ade:	04 ff       	sbrs	r16, 4
 ae0:	0a c0       	rjmp	.+20     	; 0xaf6 <__EEPROM_REGION_LENGTH__+0x2f6>
 ae2:	f9 2f       	mov	r31, r25
 ae4:	f6 60       	ori	r31, 0x06	; 6
 ae6:	ef 2e       	mov	r14, r31
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <__EEPROM_REGION_LENGTH__+0x2f6>
 aea:	28 e0       	ldi	r18, 0x08	; 8
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	05 c0       	rjmp	.+10     	; 0xafa <__EEPROM_REGION_LENGTH__+0x2fa>
 af0:	20 e1       	ldi	r18, 0x10	; 16
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	02 c0       	rjmp	.+4      	; 0xafa <__EEPROM_REGION_LENGTH__+0x2fa>
 af6:	20 e1       	ldi	r18, 0x10	; 16
 af8:	32 e0       	ldi	r19, 0x02	; 2
 afa:	c5 01       	movw	r24, r10
 afc:	e7 fe       	sbrs	r14, 7
 afe:	09 c0       	rjmp	.+18     	; 0xb12 <__EEPROM_REGION_LENGTH__+0x312>
 b00:	04 96       	adiw	r24, 0x04	; 4
 b02:	9f 87       	std	Y+15, r25	; 0x0f
 b04:	8e 87       	std	Y+14, r24	; 0x0e
 b06:	f5 01       	movw	r30, r10
 b08:	60 81       	ld	r22, Z
 b0a:	71 81       	ldd	r23, Z+1	; 0x01
 b0c:	82 81       	ldd	r24, Z+2	; 0x02
 b0e:	93 81       	ldd	r25, Z+3	; 0x03
 b10:	08 c0       	rjmp	.+16     	; 0xb22 <__EEPROM_REGION_LENGTH__+0x322>
 b12:	02 96       	adiw	r24, 0x02	; 2
 b14:	9f 87       	std	Y+15, r25	; 0x0f
 b16:	8e 87       	std	Y+14, r24	; 0x0e
 b18:	f5 01       	movw	r30, r10
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	ae 01       	movw	r20, r28
 b24:	4f 5f       	subi	r20, 0xFF	; 255
 b26:	5f 4f       	sbci	r21, 0xFF	; 255
 b28:	0e 94 de 10 	call	0x21bc	; 0x21bc <__ultoa_invert>
 b2c:	a8 2e       	mov	r10, r24
 b2e:	fc 85       	ldd	r31, Y+12	; 0x0c
 b30:	af 1a       	sub	r10, r31
 b32:	2e 2d       	mov	r18, r14
 b34:	2f 77       	andi	r18, 0x7F	; 127
 b36:	e2 2e       	mov	r14, r18
 b38:	e6 fe       	sbrs	r14, 6
 b3a:	0b c0       	rjmp	.+22     	; 0xb52 <__EEPROM_REGION_LENGTH__+0x352>
 b3c:	0e 2d       	mov	r16, r14
 b3e:	0e 7f       	andi	r16, 0xFE	; 254
 b40:	a1 16       	cp	r10, r17
 b42:	50 f4       	brcc	.+20     	; 0xb58 <__EEPROM_REGION_LENGTH__+0x358>
 b44:	e4 fe       	sbrs	r14, 4
 b46:	0a c0       	rjmp	.+20     	; 0xb5c <__EEPROM_REGION_LENGTH__+0x35c>
 b48:	e2 fc       	sbrc	r14, 2
 b4a:	08 c0       	rjmp	.+16     	; 0xb5c <__EEPROM_REGION_LENGTH__+0x35c>
 b4c:	0e 2d       	mov	r16, r14
 b4e:	0e 7e       	andi	r16, 0xEE	; 238
 b50:	05 c0       	rjmp	.+10     	; 0xb5c <__EEPROM_REGION_LENGTH__+0x35c>
 b52:	ba 2c       	mov	r11, r10
 b54:	0e 2d       	mov	r16, r14
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <__EEPROM_REGION_LENGTH__+0x35e>
 b58:	ba 2c       	mov	r11, r10
 b5a:	01 c0       	rjmp	.+2      	; 0xb5e <__EEPROM_REGION_LENGTH__+0x35e>
 b5c:	b1 2e       	mov	r11, r17
 b5e:	04 ff       	sbrs	r16, 4
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <__EEPROM_REGION_LENGTH__+0x37c>
 b62:	fe 01       	movw	r30, r28
 b64:	ea 0d       	add	r30, r10
 b66:	f1 1d       	adc	r31, r1
 b68:	80 81       	ld	r24, Z
 b6a:	80 33       	cpi	r24, 0x30	; 48
 b6c:	11 f4       	brne	.+4      	; 0xb72 <__EEPROM_REGION_LENGTH__+0x372>
 b6e:	09 7e       	andi	r16, 0xE9	; 233
 b70:	09 c0       	rjmp	.+18     	; 0xb84 <__EEPROM_REGION_LENGTH__+0x384>
 b72:	02 ff       	sbrs	r16, 2
 b74:	06 c0       	rjmp	.+12     	; 0xb82 <__EEPROM_REGION_LENGTH__+0x382>
 b76:	b3 94       	inc	r11
 b78:	b3 94       	inc	r11
 b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__EEPROM_REGION_LENGTH__+0x384>
 b7c:	80 2f       	mov	r24, r16
 b7e:	86 78       	andi	r24, 0x86	; 134
 b80:	09 f0       	breq	.+2      	; 0xb84 <__EEPROM_REGION_LENGTH__+0x384>
 b82:	b3 94       	inc	r11
 b84:	03 fd       	sbrc	r16, 3
 b86:	11 c0       	rjmp	.+34     	; 0xbaa <__EEPROM_REGION_LENGTH__+0x3aa>
 b88:	00 ff       	sbrs	r16, 0
 b8a:	06 c0       	rjmp	.+12     	; 0xb98 <__EEPROM_REGION_LENGTH__+0x398>
 b8c:	bf 14       	cp	r11, r15
 b8e:	88 f4       	brcc	.+34     	; 0xbb2 <__EEPROM_REGION_LENGTH__+0x3b2>
 b90:	fa 0c       	add	r15, r10
 b92:	1f 2d       	mov	r17, r15
 b94:	1b 19       	sub	r17, r11
 b96:	0e c0       	rjmp	.+28     	; 0xbb4 <__EEPROM_REGION_LENGTH__+0x3b4>
 b98:	bf 14       	cp	r11, r15
 b9a:	60 f4       	brcc	.+24     	; 0xbb4 <__EEPROM_REGION_LENGTH__+0x3b4>
 b9c:	b6 01       	movw	r22, r12
 b9e:	80 e2       	ldi	r24, 0x20	; 32
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 ba6:	b3 94       	inc	r11
 ba8:	f7 cf       	rjmp	.-18     	; 0xb98 <__EEPROM_REGION_LENGTH__+0x398>
 baa:	bf 14       	cp	r11, r15
 bac:	18 f4       	brcc	.+6      	; 0xbb4 <__EEPROM_REGION_LENGTH__+0x3b4>
 bae:	fb 18       	sub	r15, r11
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <__EEPROM_REGION_LENGTH__+0x3b6>
 bb2:	1a 2d       	mov	r17, r10
 bb4:	f1 2c       	mov	r15, r1
 bb6:	04 ff       	sbrs	r16, 4
 bb8:	10 c0       	rjmp	.+32     	; 0xbda <__EEPROM_REGION_LENGTH__+0x3da>
 bba:	b6 01       	movw	r22, r12
 bbc:	80 e3       	ldi	r24, 0x30	; 48
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 bc4:	02 ff       	sbrs	r16, 2
 bc6:	17 c0       	rjmp	.+46     	; 0xbf6 <__EEPROM_REGION_LENGTH__+0x3f6>
 bc8:	01 fd       	sbrc	r16, 1
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <__EEPROM_REGION_LENGTH__+0x3d2>
 bcc:	88 e7       	ldi	r24, 0x78	; 120
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__EEPROM_REGION_LENGTH__+0x3d6>
 bd2:	88 e5       	ldi	r24, 0x58	; 88
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	b6 01       	movw	r22, r12
 bd8:	0c c0       	rjmp	.+24     	; 0xbf2 <__EEPROM_REGION_LENGTH__+0x3f2>
 bda:	80 2f       	mov	r24, r16
 bdc:	86 78       	andi	r24, 0x86	; 134
 bde:	59 f0       	breq	.+22     	; 0xbf6 <__EEPROM_REGION_LENGTH__+0x3f6>
 be0:	01 ff       	sbrs	r16, 1
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 be4:	8b e2       	ldi	r24, 0x2B	; 43
 be6:	01 c0       	rjmp	.+2      	; 0xbea <__EEPROM_REGION_LENGTH__+0x3ea>
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	07 fd       	sbrc	r16, 7
 bec:	8d e2       	ldi	r24, 0x2D	; 45
 bee:	b6 01       	movw	r22, r12
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 bf6:	a1 16       	cp	r10, r17
 bf8:	38 f4       	brcc	.+14     	; 0xc08 <__EEPROM_REGION_LENGTH__+0x408>
 bfa:	b6 01       	movw	r22, r12
 bfc:	80 e3       	ldi	r24, 0x30	; 48
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 c04:	11 50       	subi	r17, 0x01	; 1
 c06:	f7 cf       	rjmp	.-18     	; 0xbf6 <__EEPROM_REGION_LENGTH__+0x3f6>
 c08:	aa 94       	dec	r10
 c0a:	e1 e0       	ldi	r30, 0x01	; 1
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	ec 0f       	add	r30, r28
 c10:	fd 1f       	adc	r31, r29
 c12:	ea 0d       	add	r30, r10
 c14:	f1 1d       	adc	r31, r1
 c16:	80 81       	ld	r24, Z
 c18:	b6 01       	movw	r22, r12
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 c20:	a1 10       	cpse	r10, r1
 c22:	f2 cf       	rjmp	.-28     	; 0xc08 <__EEPROM_REGION_LENGTH__+0x408>
 c24:	19 c0       	rjmp	.+50     	; 0xc58 <__EEPROM_REGION_LENGTH__+0x458>
 c26:	f4 e0       	ldi	r31, 0x04	; 4
 c28:	ff 15       	cp	r31, r15
 c2a:	80 f5       	brcc	.+96     	; 0xc8c <__EEPROM_REGION_LENGTH__+0x48c>
 c2c:	84 e0       	ldi	r24, 0x04	; 4
 c2e:	f8 1a       	sub	r15, r24
 c30:	73 fe       	sbrs	r7, 3
 c32:	23 c0       	rjmp	.+70     	; 0xc7a <__EEPROM_REGION_LENGTH__+0x47a>
 c34:	01 11       	cpse	r16, r1
 c36:	2b c0       	rjmp	.+86     	; 0xc8e <__EEPROM_REGION_LENGTH__+0x48e>
 c38:	53 fe       	sbrs	r5, 3
 c3a:	2f c0       	rjmp	.+94     	; 0xc9a <__EEPROM_REGION_LENGTH__+0x49a>
 c3c:	58 e7       	ldi	r21, 0x78	; 120
 c3e:	85 2e       	mov	r8, r21
 c40:	55 e0       	ldi	r21, 0x05	; 5
 c42:	95 2e       	mov	r9, r21
 c44:	50 e0       	ldi	r21, 0x00	; 0
 c46:	a5 2e       	mov	r10, r21
 c48:	07 2d       	mov	r16, r7
 c4a:	00 71       	andi	r16, 0x10	; 16
 c4c:	f4 01       	movw	r30, r8
 c4e:	84 91       	lpm	r24, Z
 c50:	a7 fc       	sbrc	r10, 7
 c52:	80 81       	ld	r24, Z
 c54:	81 11       	cpse	r24, r1
 c56:	28 c0       	rjmp	.+80     	; 0xca8 <__EEPROM_REGION_LENGTH__+0x4a8>
 c58:	ff 20       	and	r15, r15
 c5a:	09 f4       	brne	.+2      	; 0xc5e <__EEPROM_REGION_LENGTH__+0x45e>
 c5c:	d2 cc       	rjmp	.-1628   	; 0x602 <vfprintf+0x72>
 c5e:	b6 01       	movw	r22, r12
 c60:	80 e2       	ldi	r24, 0x20	; 32
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 c68:	fa 94       	dec	r15
 c6a:	f6 cf       	rjmp	.-20     	; 0xc58 <__EEPROM_REGION_LENGTH__+0x458>
 c6c:	f6 01       	movw	r30, r12
 c6e:	87 81       	ldd	r24, Z+7	; 0x07
 c70:	90 85       	ldd	r25, Z+8	; 0x08
 c72:	2c c0       	rjmp	.+88     	; 0xccc <__EEPROM_REGION_LENGTH__+0x4cc>
 c74:	8f ef       	ldi	r24, 0xFF	; 255
 c76:	9f ef       	ldi	r25, 0xFF	; 255
 c78:	29 c0       	rjmp	.+82     	; 0xccc <__EEPROM_REGION_LENGTH__+0x4cc>
 c7a:	b6 01       	movw	r22, r12
 c7c:	80 e2       	ldi	r24, 0x20	; 32
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 c84:	fa 94       	dec	r15
 c86:	f1 10       	cpse	r15, r1
 c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__EEPROM_REGION_LENGTH__+0x47a>
 c8a:	d4 cf       	rjmp	.-88     	; 0xc34 <__EEPROM_REGION_LENGTH__+0x434>
 c8c:	f1 2c       	mov	r15, r1
 c8e:	b6 01       	movw	r22, r12
 c90:	80 2f       	mov	r24, r16
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 c98:	cf cf       	rjmp	.-98     	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 c9a:	44 e7       	ldi	r20, 0x74	; 116
 c9c:	84 2e       	mov	r8, r20
 c9e:	45 e0       	ldi	r20, 0x05	; 5
 ca0:	94 2e       	mov	r9, r20
 ca2:	40 e0       	ldi	r20, 0x00	; 0
 ca4:	a4 2e       	mov	r10, r20
 ca6:	d0 cf       	rjmp	.-96     	; 0xc48 <__EEPROM_REGION_LENGTH__+0x448>
 ca8:	01 11       	cpse	r16, r1
 caa:	80 52       	subi	r24, 0x20	; 32
 cac:	b6 01       	movw	r22, r12
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <fputc>
 cb4:	ff ef       	ldi	r31, 0xFF	; 255
 cb6:	8f 1a       	sub	r8, r31
 cb8:	9f 0a       	sbc	r9, r31
 cba:	af 0a       	sbc	r10, r31
 cbc:	c7 cf       	rjmp	.-114    	; 0xc4c <__EEPROM_REGION_LENGTH__+0x44c>
 cbe:	23 e0       	ldi	r18, 0x03	; 3
 cc0:	2f 15       	cp	r18, r15
 cc2:	10 f4       	brcc	.+4      	; 0xcc8 <__EEPROM_REGION_LENGTH__+0x4c8>
 cc4:	83 e0       	ldi	r24, 0x03	; 3
 cc6:	b3 cf       	rjmp	.-154    	; 0xc2e <__EEPROM_REGION_LENGTH__+0x42e>
 cc8:	f1 2c       	mov	r15, r1
 cca:	b6 cf       	rjmp	.-148    	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 ccc:	64 96       	adiw	r28, 0x14	; 20
 cce:	e2 e1       	ldi	r30, 0x12	; 18
 cd0:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__epilogue_restores__>

Disassembly of section .text.libgcc:

00003efc <__tablejump2__>:
    3efc:	ee 0f       	add	r30, r30
    3efe:	ff 1f       	adc	r31, r31
    3f00:	05 90       	lpm	r0, Z+
    3f02:	f4 91       	lpm	r31, Z
    3f04:	e0 2d       	mov	r30, r0
    3f06:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003bba <__umulhisi3>:
    3bba:	a2 9f       	mul	r26, r18
    3bbc:	b0 01       	movw	r22, r0
    3bbe:	b3 9f       	mul	r27, r19
    3bc0:	c0 01       	movw	r24, r0
    3bc2:	a3 9f       	mul	r26, r19
    3bc4:	70 0d       	add	r23, r0
    3bc6:	81 1d       	adc	r24, r1
    3bc8:	11 24       	eor	r1, r1
    3bca:	91 1d       	adc	r25, r1
    3bcc:	b2 9f       	mul	r27, r18
    3bce:	70 0d       	add	r23, r0
    3bd0:	81 1d       	adc	r24, r1
    3bd2:	11 24       	eor	r1, r1
    3bd4:	91 1d       	adc	r25, r1
    3bd6:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000036d0 <__prologue_saves__>:
    36d0:	2f 92       	push	r2
    36d2:	3f 92       	push	r3
    36d4:	4f 92       	push	r4
    36d6:	5f 92       	push	r5
    36d8:	6f 92       	push	r6
    36da:	7f 92       	push	r7
    36dc:	8f 92       	push	r8
    36de:	9f 92       	push	r9
    36e0:	af 92       	push	r10
    36e2:	bf 92       	push	r11
    36e4:	cf 92       	push	r12
    36e6:	df 92       	push	r13
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	ca 1b       	sub	r28, r26
    36fa:	db 0b       	sbc	r29, r27
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000373e <__epilogue_restores__>:
    373e:	2a 88       	ldd	r2, Y+18	; 0x12
    3740:	39 88       	ldd	r3, Y+17	; 0x11
    3742:	48 88       	ldd	r4, Y+16	; 0x10
    3744:	5f 84       	ldd	r5, Y+15	; 0x0f
    3746:	6e 84       	ldd	r6, Y+14	; 0x0e
    3748:	7d 84       	ldd	r7, Y+13	; 0x0d
    374a:	8c 84       	ldd	r8, Y+12	; 0x0c
    374c:	9b 84       	ldd	r9, Y+11	; 0x0b
    374e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3750:	b9 84       	ldd	r11, Y+9	; 0x09
    3752:	c8 84       	ldd	r12, Y+8	; 0x08
    3754:	df 80       	ldd	r13, Y+7	; 0x07
    3756:	ee 80       	ldd	r14, Y+6	; 0x06
    3758:	fd 80       	ldd	r15, Y+5	; 0x05
    375a:	0c 81       	ldd	r16, Y+4	; 0x04
    375c:	1b 81       	ldd	r17, Y+3	; 0x03
    375e:	aa 81       	ldd	r26, Y+2	; 0x02
    3760:	b9 81       	ldd	r27, Y+1	; 0x01
    3762:	ce 0f       	add	r28, r30
    3764:	d1 1d       	adc	r29, r1
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	ed 01       	movw	r28, r26
    3772:	08 95       	ret

Disassembly of section .text.avrlibc:

00003f64 <atoi>:
    3f64:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <atol>
    3f68:	cb 01       	movw	r24, r22
    3f6a:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e7e <atol>:
    3e7e:	2a e0       	ldi	r18, 0x0A	; 10
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <strtol>
    3e8a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000cd4 <strtol>:
 cd4:	2f 92       	push	r2
 cd6:	3f 92       	push	r3
 cd8:	4f 92       	push	r4
 cda:	5f 92       	push	r5
 cdc:	6f 92       	push	r6
 cde:	7f 92       	push	r7
 ce0:	8f 92       	push	r8
 ce2:	af 92       	push	r10
 ce4:	bf 92       	push	r11
 ce6:	cf 92       	push	r12
 ce8:	df 92       	push	r13
 cea:	ef 92       	push	r14
 cec:	0f 93       	push	r16
 cee:	1f 93       	push	r17
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	00 d0       	rcall	.+0      	; 0xcf6 <strtol+0x22>
 cf6:	00 d0       	rcall	.+0      	; 0xcf8 <strtol+0x24>
 cf8:	00 d0       	rcall	.+0      	; 0xcfa <strtol+0x26>
 cfa:	cd b7       	in	r28, 0x3d	; 61
 cfc:	de b7       	in	r29, 0x3e	; 62
 cfe:	3b 01       	movw	r6, r22
 d00:	88 2e       	mov	r8, r24
 d02:	5a 01       	movw	r10, r20
 d04:	19 01       	movw	r2, r18
 d06:	41 15       	cp	r20, r1
 d08:	51 05       	cpc	r21, r1
 d0a:	21 f0       	breq	.+8      	; 0xd14 <strtol+0x40>
 d0c:	fa 01       	movw	r30, r20
 d0e:	60 83       	st	Z, r22
 d10:	71 83       	std	Z+1, r23	; 0x01
 d12:	82 83       	std	Z+2, r24	; 0x02
 d14:	21 14       	cp	r2, r1
 d16:	31 04       	cpc	r3, r1
 d18:	29 f0       	breq	.+10     	; 0xd24 <strtol+0x50>
 d1a:	c1 01       	movw	r24, r2
 d1c:	02 97       	sbiw	r24, 0x02	; 2
 d1e:	83 97       	sbiw	r24, 0x23	; 35
 d20:	08 f0       	brcs	.+2      	; 0xd24 <strtol+0x50>
 d22:	1a c1       	rjmp	.+564    	; 0xf58 <strtol+0x284>
 d24:	e8 2c       	mov	r14, r8
 d26:	63 01       	movw	r12, r6
 d28:	ff ef       	ldi	r31, 0xFF	; 255
 d2a:	cf 1a       	sub	r12, r31
 d2c:	df 0a       	sbc	r13, r31
 d2e:	ef 0a       	sbc	r14, r31
 d30:	f3 01       	movw	r30, r6
 d32:	14 91       	lpm	r17, Z
 d34:	87 fc       	sbrc	r8, 7
 d36:	10 81       	ld	r17, Z
 d38:	81 2f       	mov	r24, r17
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <isspace>
 d40:	4c 2d       	mov	r20, r12
 d42:	3d 2d       	mov	r19, r13
 d44:	2e 2d       	mov	r18, r14
 d46:	89 2b       	or	r24, r25
 d48:	19 f0       	breq	.+6      	; 0xd50 <strtol+0x7c>
 d4a:	36 01       	movw	r6, r12
 d4c:	8e 2c       	mov	r8, r14
 d4e:	ea cf       	rjmp	.-44     	; 0xd24 <strtol+0x50>
 d50:	1d 32       	cpi	r17, 0x2D	; 45
 d52:	69 f4       	brne	.+26     	; 0xd6e <strtol+0x9a>
 d54:	e8 2c       	mov	r14, r8
 d56:	63 01       	movw	r12, r6
 d58:	52 e0       	ldi	r21, 0x02	; 2
 d5a:	c5 0e       	add	r12, r21
 d5c:	d1 1c       	adc	r13, r1
 d5e:	e1 1c       	adc	r14, r1
 d60:	e4 2f       	mov	r30, r20
 d62:	f3 2f       	mov	r31, r19
 d64:	14 91       	lpm	r17, Z
 d66:	27 fd       	sbrc	r18, 7
 d68:	10 81       	ld	r17, Z
 d6a:	01 e0       	ldi	r16, 0x01	; 1
 d6c:	0e c0       	rjmp	.+28     	; 0xd8a <strtol+0xb6>
 d6e:	1b 32       	cpi	r17, 0x2B	; 43
 d70:	59 f4       	brne	.+22     	; 0xd88 <strtol+0xb4>
 d72:	e8 2c       	mov	r14, r8
 d74:	63 01       	movw	r12, r6
 d76:	82 e0       	ldi	r24, 0x02	; 2
 d78:	c8 0e       	add	r12, r24
 d7a:	d1 1c       	adc	r13, r1
 d7c:	e1 1c       	adc	r14, r1
 d7e:	e4 2f       	mov	r30, r20
 d80:	f3 2f       	mov	r31, r19
 d82:	14 91       	lpm	r17, Z
 d84:	27 fd       	sbrc	r18, 7
 d86:	10 81       	ld	r17, Z
 d88:	00 e0       	ldi	r16, 0x00	; 0
 d8a:	21 14       	cp	r2, r1
 d8c:	31 04       	cpc	r3, r1
 d8e:	09 f1       	breq	.+66     	; 0xdd2 <strtol+0xfe>
 d90:	90 e1       	ldi	r25, 0x10	; 16
 d92:	29 16       	cp	r2, r25
 d94:	31 04       	cpc	r3, r1
 d96:	29 f4       	brne	.+10     	; 0xda2 <strtol+0xce>
 d98:	3f c0       	rjmp	.+126    	; 0xe18 <strtol+0x144>
 d9a:	10 e3       	ldi	r17, 0x30	; 48
 d9c:	21 14       	cp	r2, r1
 d9e:	31 04       	cpc	r3, r1
 da0:	21 f1       	breq	.+72     	; 0xdea <strtol+0x116>
 da2:	f8 e0       	ldi	r31, 0x08	; 8
 da4:	2f 16       	cp	r2, r31
 da6:	31 04       	cpc	r3, r1
 da8:	01 f1       	breq	.+64     	; 0xdea <strtol+0x116>
 daa:	54 f4       	brge	.+20     	; 0xdc0 <strtol+0xec>
 dac:	32 e0       	ldi	r19, 0x02	; 2
 dae:	23 16       	cp	r2, r19
 db0:	31 04       	cpc	r3, r1
 db2:	21 f5       	brne	.+72     	; 0xdfc <strtol+0x128>
 db4:	41 2c       	mov	r4, r1
 db6:	51 2c       	mov	r5, r1
 db8:	61 2c       	mov	r6, r1
 dba:	50 e4       	ldi	r21, 0x40	; 64
 dbc:	75 2e       	mov	r7, r21
 dbe:	4b c0       	rjmp	.+150    	; 0xe56 <strtol+0x182>
 dc0:	4a e0       	ldi	r20, 0x0A	; 10
 dc2:	24 16       	cp	r2, r20
 dc4:	31 04       	cpc	r3, r1
 dc6:	39 f0       	breq	.+14     	; 0xdd6 <strtol+0x102>
 dc8:	50 e1       	ldi	r21, 0x10	; 16
 dca:	25 16       	cp	r2, r21
 dcc:	31 04       	cpc	r3, r1
 dce:	b1 f4       	brne	.+44     	; 0xdfc <strtol+0x128>
 dd0:	3d c0       	rjmp	.+122    	; 0xe4c <strtol+0x178>
 dd2:	10 33       	cpi	r17, 0x30	; 48
 dd4:	19 f1       	breq	.+70     	; 0xe1c <strtol+0x148>
 dd6:	3a e0       	ldi	r19, 0x0A	; 10
 dd8:	23 2e       	mov	r2, r19
 dda:	31 2c       	mov	r3, r1
 ddc:	4c ec       	ldi	r20, 0xCC	; 204
 dde:	44 2e       	mov	r4, r20
 de0:	54 2c       	mov	r5, r4
 de2:	64 2c       	mov	r6, r4
 de4:	4c e0       	ldi	r20, 0x0C	; 12
 de6:	74 2e       	mov	r7, r20
 de8:	36 c0       	rjmp	.+108    	; 0xe56 <strtol+0x182>
 dea:	98 e0       	ldi	r25, 0x08	; 8
 dec:	29 2e       	mov	r2, r25
 dee:	31 2c       	mov	r3, r1
 df0:	41 2c       	mov	r4, r1
 df2:	51 2c       	mov	r5, r1
 df4:	61 2c       	mov	r6, r1
 df6:	20 e1       	ldi	r18, 0x10	; 16
 df8:	72 2e       	mov	r7, r18
 dfa:	2d c0       	rjmp	.+90     	; 0xe56 <strtol+0x182>
 dfc:	60 e0       	ldi	r22, 0x00	; 0
 dfe:	70 e0       	ldi	r23, 0x00	; 0
 e00:	80 e0       	ldi	r24, 0x00	; 0
 e02:	90 e8       	ldi	r25, 0x80	; 128
 e04:	91 01       	movw	r18, r2
 e06:	03 2c       	mov	r0, r3
 e08:	00 0c       	add	r0, r0
 e0a:	44 0b       	sbc	r20, r20
 e0c:	55 0b       	sbc	r21, r21
 e0e:	0e 94 39 1a 	call	0x3472	; 0x3472 <__udivmodsi4>
 e12:	29 01       	movw	r4, r18
 e14:	3a 01       	movw	r6, r20
 e16:	1f c0       	rjmp	.+62     	; 0xe56 <strtol+0x182>
 e18:	10 33       	cpi	r17, 0x30	; 48
 e1a:	c1 f4       	brne	.+48     	; 0xe4c <strtol+0x178>
 e1c:	f6 01       	movw	r30, r12
 e1e:	84 91       	lpm	r24, Z
 e20:	e7 fc       	sbrc	r14, 7
 e22:	80 81       	ld	r24, Z
 e24:	8f 7d       	andi	r24, 0xDF	; 223
 e26:	88 35       	cpi	r24, 0x58	; 88
 e28:	09 f0       	breq	.+2      	; 0xe2c <strtol+0x158>
 e2a:	b7 cf       	rjmp	.-146    	; 0xd9a <strtol+0xc6>
 e2c:	ae 2d       	mov	r26, r14
 e2e:	c6 01       	movw	r24, r12
 e30:	01 96       	adiw	r24, 0x01	; 1
 e32:	a1 1d       	adc	r26, r1
 e34:	fc 01       	movw	r30, r24
 e36:	14 91       	lpm	r17, Z
 e38:	a7 fd       	sbrc	r26, 7
 e3a:	10 81       	ld	r17, Z
 e3c:	e2 e0       	ldi	r30, 0x02	; 2
 e3e:	ce 0e       	add	r12, r30
 e40:	d1 1c       	adc	r13, r1
 e42:	e1 1c       	adc	r14, r1
 e44:	02 60       	ori	r16, 0x02	; 2
 e46:	60 e1       	ldi	r22, 0x10	; 16
 e48:	26 2e       	mov	r2, r22
 e4a:	31 2c       	mov	r3, r1
 e4c:	41 2c       	mov	r4, r1
 e4e:	51 2c       	mov	r5, r1
 e50:	61 2c       	mov	r6, r1
 e52:	88 e0       	ldi	r24, 0x08	; 8
 e54:	78 2e       	mov	r7, r24
 e56:	a0 e0       	ldi	r26, 0x00	; 0
 e58:	60 e0       	ldi	r22, 0x00	; 0
 e5a:	70 e0       	ldi	r23, 0x00	; 0
 e5c:	cb 01       	movw	r24, r22
 e5e:	91 01       	movw	r18, r2
 e60:	03 2c       	mov	r0, r3
 e62:	00 0c       	add	r0, r0
 e64:	44 0b       	sbc	r20, r20
 e66:	55 0b       	sbc	r21, r21
 e68:	29 83       	std	Y+1, r18	; 0x01
 e6a:	3a 83       	std	Y+2, r19	; 0x02
 e6c:	4b 83       	std	Y+3, r20	; 0x03
 e6e:	5c 83       	std	Y+4, r21	; 0x04
 e70:	e0 ed       	ldi	r30, 0xD0	; 208
 e72:	e1 0f       	add	r30, r17
 e74:	ea 30       	cpi	r30, 0x0A	; 10
 e76:	60 f0       	brcs	.+24     	; 0xe90 <strtol+0x1bc>
 e78:	2f eb       	ldi	r18, 0xBF	; 191
 e7a:	21 0f       	add	r18, r17
 e7c:	2a 31       	cpi	r18, 0x1A	; 26
 e7e:	10 f4       	brcc	.+4      	; 0xe84 <strtol+0x1b0>
 e80:	e9 ec       	ldi	r30, 0xC9	; 201
 e82:	05 c0       	rjmp	.+10     	; 0xe8e <strtol+0x1ba>
 e84:	2f e9       	ldi	r18, 0x9F	; 159
 e86:	21 0f       	add	r18, r17
 e88:	2a 31       	cpi	r18, 0x1A	; 26
 e8a:	50 f5       	brcc	.+84     	; 0xee0 <strtol+0x20c>
 e8c:	e9 ea       	ldi	r30, 0xA9	; 169
 e8e:	e1 0f       	add	r30, r17
 e90:	2e 2f       	mov	r18, r30
 e92:	30 e0       	ldi	r19, 0x00	; 0
 e94:	22 15       	cp	r18, r2
 e96:	33 05       	cpc	r19, r3
 e98:	1c f5       	brge	.+70     	; 0xee0 <strtol+0x20c>
 e9a:	a7 fd       	sbrc	r26, 7
 e9c:	18 c0       	rjmp	.+48     	; 0xece <strtol+0x1fa>
 e9e:	46 16       	cp	r4, r22
 ea0:	57 06       	cpc	r5, r23
 ea2:	68 06       	cpc	r6, r24
 ea4:	79 06       	cpc	r7, r25
 ea6:	80 f0       	brcs	.+32     	; 0xec8 <strtol+0x1f4>
 ea8:	29 81       	ldd	r18, Y+1	; 0x01
 eaa:	3a 81       	ldd	r19, Y+2	; 0x02
 eac:	4b 81       	ldd	r20, Y+3	; 0x03
 eae:	5c 81       	ldd	r21, Y+4	; 0x04
 eb0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__mulsi3>
 eb4:	6e 0f       	add	r22, r30
 eb6:	71 1d       	adc	r23, r1
 eb8:	81 1d       	adc	r24, r1
 eba:	91 1d       	adc	r25, r1
 ebc:	61 30       	cpi	r22, 0x01	; 1
 ebe:	71 05       	cpc	r23, r1
 ec0:	81 05       	cpc	r24, r1
 ec2:	30 e8       	ldi	r19, 0x80	; 128
 ec4:	93 07       	cpc	r25, r19
 ec6:	10 f0       	brcs	.+4      	; 0xecc <strtol+0x1f8>
 ec8:	af ef       	ldi	r26, 0xFF	; 255
 eca:	01 c0       	rjmp	.+2      	; 0xece <strtol+0x1fa>
 ecc:	a1 e0       	ldi	r26, 0x01	; 1
 ece:	f6 01       	movw	r30, r12
 ed0:	14 91       	lpm	r17, Z
 ed2:	e7 fc       	sbrc	r14, 7
 ed4:	10 81       	ld	r17, Z
 ed6:	4f ef       	ldi	r20, 0xFF	; 255
 ed8:	c4 1a       	sub	r12, r20
 eda:	d4 0a       	sbc	r13, r20
 edc:	e4 0a       	sbc	r14, r20
 ede:	c8 cf       	rjmp	.-112    	; 0xe70 <strtol+0x19c>
 ee0:	20 2f       	mov	r18, r16
 ee2:	21 70       	andi	r18, 0x01	; 1
 ee4:	a1 14       	cp	r10, r1
 ee6:	b1 04       	cpc	r11, r1
 ee8:	b1 f0       	breq	.+44     	; 0xf16 <strtol+0x242>
 eea:	aa 23       	and	r26, r26
 eec:	49 f0       	breq	.+18     	; 0xf00 <strtol+0x22c>
 eee:	51 e0       	ldi	r21, 0x01	; 1
 ef0:	c5 1a       	sub	r12, r21
 ef2:	d1 08       	sbc	r13, r1
 ef4:	e1 08       	sbc	r14, r1
 ef6:	f5 01       	movw	r30, r10
 ef8:	c0 82       	st	Z, r12
 efa:	d1 82       	std	Z+1, r13	; 0x01
 efc:	e2 82       	std	Z+2, r14	; 0x02
 efe:	0b c0       	rjmp	.+22     	; 0xf16 <strtol+0x242>
 f00:	01 ff       	sbrs	r16, 1
 f02:	1d c0       	rjmp	.+58     	; 0xf3e <strtol+0x26a>
 f04:	f2 e0       	ldi	r31, 0x02	; 2
 f06:	cf 1a       	sub	r12, r31
 f08:	d1 08       	sbc	r13, r1
 f0a:	e1 08       	sbc	r14, r1
 f0c:	f5 01       	movw	r30, r10
 f0e:	c0 82       	st	Z, r12
 f10:	d1 82       	std	Z+1, r13	; 0x01
 f12:	e2 82       	std	Z+2, r14	; 0x02
 f14:	14 c0       	rjmp	.+40     	; 0xf3e <strtol+0x26a>
 f16:	a7 ff       	sbrs	r26, 7
 f18:	12 c0       	rjmp	.+36     	; 0xf3e <strtol+0x26a>
 f1a:	22 23       	and	r18, r18
 f1c:	29 f0       	breq	.+10     	; 0xf28 <strtol+0x254>
 f1e:	60 e0       	ldi	r22, 0x00	; 0
 f20:	70 e0       	ldi	r23, 0x00	; 0
 f22:	80 e0       	ldi	r24, 0x00	; 0
 f24:	90 e8       	ldi	r25, 0x80	; 128
 f26:	04 c0       	rjmp	.+8      	; 0xf30 <strtol+0x25c>
 f28:	6f ef       	ldi	r22, 0xFF	; 255
 f2a:	7f ef       	ldi	r23, 0xFF	; 255
 f2c:	8f ef       	ldi	r24, 0xFF	; 255
 f2e:	9f e7       	ldi	r25, 0x7F	; 127
 f30:	22 e2       	ldi	r18, 0x22	; 34
 f32:	30 e0       	ldi	r19, 0x00	; 0
 f34:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 f38:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 f3c:	09 c0       	rjmp	.+18     	; 0xf50 <strtol+0x27c>
 f3e:	22 23       	and	r18, r18
 f40:	81 f0       	breq	.+32     	; 0xf62 <strtol+0x28e>
 f42:	90 95       	com	r25
 f44:	80 95       	com	r24
 f46:	70 95       	com	r23
 f48:	61 95       	neg	r22
 f4a:	7f 4f       	sbci	r23, 0xFF	; 255
 f4c:	8f 4f       	sbci	r24, 0xFF	; 255
 f4e:	9f 4f       	sbci	r25, 0xFF	; 255
 f50:	46 2f       	mov	r20, r22
 f52:	37 2f       	mov	r19, r23
 f54:	28 2f       	mov	r18, r24
 f56:	12 c0       	rjmp	.+36     	; 0xf7c <strtol+0x2a8>
 f58:	40 e0       	ldi	r20, 0x00	; 0
 f5a:	30 e0       	ldi	r19, 0x00	; 0
 f5c:	20 e0       	ldi	r18, 0x00	; 0
 f5e:	90 e0       	ldi	r25, 0x00	; 0
 f60:	0d c0       	rjmp	.+26     	; 0xf7c <strtol+0x2a8>
 f62:	97 ff       	sbrs	r25, 7
 f64:	f5 cf       	rjmp	.-22     	; 0xf50 <strtol+0x27c>
 f66:	82 e2       	ldi	r24, 0x22	; 34
 f68:	90 e0       	ldi	r25, 0x00	; 0
 f6a:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 f6e:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 f72:	6f ef       	ldi	r22, 0xFF	; 255
 f74:	7f ef       	ldi	r23, 0xFF	; 255
 f76:	8f ef       	ldi	r24, 0xFF	; 255
 f78:	9f e7       	ldi	r25, 0x7F	; 127
 f7a:	ea cf       	rjmp	.-44     	; 0xf50 <strtol+0x27c>
 f7c:	64 2f       	mov	r22, r20
 f7e:	73 2f       	mov	r23, r19
 f80:	82 2f       	mov	r24, r18
 f82:	26 96       	adiw	r28, 0x06	; 6
 f84:	0f b6       	in	r0, 0x3f	; 63
 f86:	f8 94       	cli
 f88:	de bf       	out	0x3e, r29	; 62
 f8a:	0f be       	out	0x3f, r0	; 63
 f8c:	cd bf       	out	0x3d, r28	; 61
 f8e:	df 91       	pop	r29
 f90:	cf 91       	pop	r28
 f92:	1f 91       	pop	r17
 f94:	0f 91       	pop	r16
 f96:	ef 90       	pop	r14
 f98:	df 90       	pop	r13
 f9a:	cf 90       	pop	r12
 f9c:	bf 90       	pop	r11
 f9e:	af 90       	pop	r10
 fa0:	8f 90       	pop	r8
 fa2:	7f 90       	pop	r7
 fa4:	6f 90       	pop	r6
 fa6:	5f 90       	pop	r5
 fa8:	4f 90       	pop	r4
 faa:	3f 90       	pop	r3
 fac:	2f 90       	pop	r2
 fae:	08 95       	ret

Disassembly of section .text.avrlibc:

00001452 <__ftoa_engine>:
    1452:	28 30       	cpi	r18, 0x08	; 8
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__ftoa_engine+0x6>
    1456:	27 e0       	ldi	r18, 0x07	; 7
    1458:	33 27       	eor	r19, r19
    145a:	da 01       	movw	r26, r20
    145c:	99 0f       	add	r25, r25
    145e:	31 1d       	adc	r19, r1
    1460:	87 fd       	sbrc	r24, 7
    1462:	91 60       	ori	r25, 0x01	; 1
    1464:	00 96       	adiw	r24, 0x00	; 0
    1466:	61 05       	cpc	r22, r1
    1468:	71 05       	cpc	r23, r1
    146a:	39 f4       	brne	.+14     	; 0x147a <__ftoa_engine+0x28>
    146c:	32 60       	ori	r19, 0x02	; 2
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3d 93       	st	X+, r19
    1472:	30 e3       	ldi	r19, 0x30	; 48
    1474:	2a 95       	dec	r18
    1476:	e1 f7       	brne	.-8      	; 0x1470 <__ftoa_engine+0x1e>
    1478:	08 95       	ret
    147a:	9f 3f       	cpi	r25, 0xFF	; 255
    147c:	30 f0       	brcs	.+12     	; 0x148a <__ftoa_engine+0x38>
    147e:	80 38       	cpi	r24, 0x80	; 128
    1480:	71 05       	cpc	r23, r1
    1482:	61 05       	cpc	r22, r1
    1484:	09 f0       	breq	.+2      	; 0x1488 <__ftoa_engine+0x36>
    1486:	3c 5f       	subi	r19, 0xFC	; 252
    1488:	3c 5f       	subi	r19, 0xFC	; 252
    148a:	3d 93       	st	X+, r19
    148c:	91 30       	cpi	r25, 0x01	; 1
    148e:	08 f0       	brcs	.+2      	; 0x1492 <__ftoa_engine+0x40>
    1490:	80 68       	ori	r24, 0x80	; 128
    1492:	91 1d       	adc	r25, r1
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	1f 93       	push	r17
    149a:	0f 93       	push	r16
    149c:	ff 92       	push	r15
    149e:	ef 92       	push	r14
    14a0:	19 2f       	mov	r17, r25
    14a2:	98 7f       	andi	r25, 0xF8	; 248
    14a4:	96 95       	lsr	r25
    14a6:	e9 2f       	mov	r30, r25
    14a8:	96 95       	lsr	r25
    14aa:	96 95       	lsr	r25
    14ac:	e9 0f       	add	r30, r25
    14ae:	ff 27       	eor	r31, r31
    14b0:	e0 50       	subi	r30, 0x00	; 0
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	99 27       	eor	r25, r25
    14b6:	33 27       	eor	r19, r19
    14b8:	ee 24       	eor	r14, r14
    14ba:	ff 24       	eor	r15, r15
    14bc:	a7 01       	movw	r20, r14
    14be:	e7 01       	movw	r28, r14
    14c0:	05 90       	lpm	r0, Z+
    14c2:	08 94       	sec
    14c4:	07 94       	ror	r0
    14c6:	28 f4       	brcc	.+10     	; 0x14d2 <__ftoa_engine+0x80>
    14c8:	36 0f       	add	r19, r22
    14ca:	e7 1e       	adc	r14, r23
    14cc:	f8 1e       	adc	r15, r24
    14ce:	49 1f       	adc	r20, r25
    14d0:	51 1d       	adc	r21, r1
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	06 94       	lsr	r0
    14dc:	a1 f7       	brne	.-24     	; 0x14c6 <__ftoa_engine+0x74>
    14de:	05 90       	lpm	r0, Z+
    14e0:	07 94       	ror	r0
    14e2:	28 f4       	brcc	.+10     	; 0x14ee <__ftoa_engine+0x9c>
    14e4:	e7 0e       	add	r14, r23
    14e6:	f8 1e       	adc	r15, r24
    14e8:	49 1f       	adc	r20, r25
    14ea:	56 1f       	adc	r21, r22
    14ec:	c1 1d       	adc	r28, r1
    14ee:	77 0f       	add	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	66 1f       	adc	r22, r22
    14f6:	06 94       	lsr	r0
    14f8:	a1 f7       	brne	.-24     	; 0x14e2 <__ftoa_engine+0x90>
    14fa:	05 90       	lpm	r0, Z+
    14fc:	07 94       	ror	r0
    14fe:	28 f4       	brcc	.+10     	; 0x150a <__ftoa_engine+0xb8>
    1500:	f8 0e       	add	r15, r24
    1502:	49 1f       	adc	r20, r25
    1504:	56 1f       	adc	r21, r22
    1506:	c7 1f       	adc	r28, r23
    1508:	d1 1d       	adc	r29, r1
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	66 1f       	adc	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	06 94       	lsr	r0
    1514:	a1 f7       	brne	.-24     	; 0x14fe <__ftoa_engine+0xac>
    1516:	05 90       	lpm	r0, Z+
    1518:	07 94       	ror	r0
    151a:	20 f4       	brcc	.+8      	; 0x1524 <__ftoa_engine+0xd2>
    151c:	49 0f       	add	r20, r25
    151e:	56 1f       	adc	r21, r22
    1520:	c7 1f       	adc	r28, r23
    1522:	d8 1f       	adc	r29, r24
    1524:	99 0f       	add	r25, r25
    1526:	66 1f       	adc	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	06 94       	lsr	r0
    152e:	a9 f7       	brne	.-22     	; 0x151a <__ftoa_engine+0xc8>
    1530:	84 91       	lpm	r24, Z
    1532:	10 95       	com	r17
    1534:	17 70       	andi	r17, 0x07	; 7
    1536:	41 f0       	breq	.+16     	; 0x1548 <__ftoa_engine+0xf6>
    1538:	d6 95       	lsr	r29
    153a:	c7 95       	ror	r28
    153c:	57 95       	ror	r21
    153e:	47 95       	ror	r20
    1540:	f7 94       	ror	r15
    1542:	e7 94       	ror	r14
    1544:	1a 95       	dec	r17
    1546:	c1 f7       	brne	.-16     	; 0x1538 <__ftoa_engine+0xe6>
    1548:	e6 ea       	ldi	r30, 0xA6	; 166
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	68 94       	set
    154e:	15 90       	lpm	r1, Z+
    1550:	15 91       	lpm	r17, Z+
    1552:	35 91       	lpm	r19, Z+
    1554:	65 91       	lpm	r22, Z+
    1556:	95 91       	lpm	r25, Z+
    1558:	05 90       	lpm	r0, Z+
    155a:	7f e2       	ldi	r23, 0x2F	; 47
    155c:	73 95       	inc	r23
    155e:	e1 18       	sub	r14, r1
    1560:	f1 0a       	sbc	r15, r17
    1562:	43 0b       	sbc	r20, r19
    1564:	56 0b       	sbc	r21, r22
    1566:	c9 0b       	sbc	r28, r25
    1568:	d0 09       	sbc	r29, r0
    156a:	c0 f7       	brcc	.-16     	; 0x155c <__ftoa_engine+0x10a>
    156c:	e1 0c       	add	r14, r1
    156e:	f1 1e       	adc	r15, r17
    1570:	43 1f       	adc	r20, r19
    1572:	56 1f       	adc	r21, r22
    1574:	c9 1f       	adc	r28, r25
    1576:	d0 1d       	adc	r29, r0
    1578:	7e f4       	brtc	.+30     	; 0x1598 <__ftoa_engine+0x146>
    157a:	70 33       	cpi	r23, 0x30	; 48
    157c:	11 f4       	brne	.+4      	; 0x1582 <__ftoa_engine+0x130>
    157e:	8a 95       	dec	r24
    1580:	e6 cf       	rjmp	.-52     	; 0x154e <__ftoa_engine+0xfc>
    1582:	e8 94       	clt
    1584:	01 50       	subi	r16, 0x01	; 1
    1586:	30 f0       	brcs	.+12     	; 0x1594 <__ftoa_engine+0x142>
    1588:	08 0f       	add	r16, r24
    158a:	0a f4       	brpl	.+2      	; 0x158e <__ftoa_engine+0x13c>
    158c:	00 27       	eor	r16, r16
    158e:	02 17       	cp	r16, r18
    1590:	08 f4       	brcc	.+2      	; 0x1594 <__ftoa_engine+0x142>
    1592:	20 2f       	mov	r18, r16
    1594:	23 95       	inc	r18
    1596:	02 2f       	mov	r16, r18
    1598:	7a 33       	cpi	r23, 0x3A	; 58
    159a:	28 f0       	brcs	.+10     	; 0x15a6 <__ftoa_engine+0x154>
    159c:	79 e3       	ldi	r23, 0x39	; 57
    159e:	7d 93       	st	X+, r23
    15a0:	2a 95       	dec	r18
    15a2:	e9 f7       	brne	.-6      	; 0x159e <__ftoa_engine+0x14c>
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <__ftoa_engine+0x174>
    15a6:	7d 93       	st	X+, r23
    15a8:	2a 95       	dec	r18
    15aa:	89 f6       	brne	.-94     	; 0x154e <__ftoa_engine+0xfc>
    15ac:	06 94       	lsr	r0
    15ae:	97 95       	ror	r25
    15b0:	67 95       	ror	r22
    15b2:	37 95       	ror	r19
    15b4:	17 95       	ror	r17
    15b6:	17 94       	ror	r1
    15b8:	e1 18       	sub	r14, r1
    15ba:	f1 0a       	sbc	r15, r17
    15bc:	43 0b       	sbc	r20, r19
    15be:	56 0b       	sbc	r21, r22
    15c0:	c9 0b       	sbc	r28, r25
    15c2:	d0 09       	sbc	r29, r0
    15c4:	98 f0       	brcs	.+38     	; 0x15ec <__ftoa_engine+0x19a>
    15c6:	23 95       	inc	r18
    15c8:	7e 91       	ld	r23, -X
    15ca:	73 95       	inc	r23
    15cc:	7a 33       	cpi	r23, 0x3A	; 58
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <__ftoa_engine+0x180>
    15d0:	70 e3       	ldi	r23, 0x30	; 48
    15d2:	7c 93       	st	X, r23
    15d4:	20 13       	cpse	r18, r16
    15d6:	b8 f7       	brcc	.-18     	; 0x15c6 <__ftoa_engine+0x174>
    15d8:	7e 91       	ld	r23, -X
    15da:	70 61       	ori	r23, 0x10	; 16
    15dc:	7d 93       	st	X+, r23
    15de:	30 f0       	brcs	.+12     	; 0x15ec <__ftoa_engine+0x19a>
    15e0:	83 95       	inc	r24
    15e2:	71 e3       	ldi	r23, 0x31	; 49
    15e4:	7d 93       	st	X+, r23
    15e6:	70 e3       	ldi	r23, 0x30	; 48
    15e8:	2a 95       	dec	r18
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <__ftoa_engine+0x192>
    15ec:	11 24       	eor	r1, r1
    15ee:	ef 90       	pop	r14
    15f0:	ff 90       	pop	r15
    15f2:	0f 91       	pop	r16
    15f4:	1f 91       	pop	r17
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	99 27       	eor	r25, r25
    15fc:	87 fd       	sbrc	r24, 7
    15fe:	90 95       	com	r25
    1600:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d58 <isspace>:
    3d58:	91 11       	cpse	r25, r1
    3d5a:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__ctype_isfalse>
    3d5e:	80 32       	cpi	r24, 0x20	; 32
    3d60:	19 f0       	breq	.+6      	; 0x3d68 <isspace+0x10>
    3d62:	89 50       	subi	r24, 0x09	; 9
    3d64:	85 50       	subi	r24, 0x05	; 5
    3d66:	c8 f7       	brcc	.-14     	; 0x3d5a <isspace+0x2>
    3d68:	08 95       	ret

Disassembly of section .text.avrlibc:

00003810 <memcpy>:
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	dc 01       	movw	r26, r24
    3818:	6a 01       	movw	r12, r20
    381a:	e6 2e       	mov	r14, r22
    381c:	28 0f       	add	r18, r24
    381e:	39 1f       	adc	r19, r25
    3820:	a2 17       	cp	r26, r18
    3822:	b3 07       	cpc	r27, r19
    3824:	51 f0       	breq	.+20     	; 0x383a <memcpy+0x2a>
    3826:	f6 01       	movw	r30, r12
    3828:	44 91       	lpm	r20, Z
    382a:	e7 fc       	sbrc	r14, 7
    382c:	40 81       	ld	r20, Z
    382e:	4d 93       	st	X+, r20
    3830:	4f ef       	ldi	r20, 0xFF	; 255
    3832:	c4 1a       	sub	r12, r20
    3834:	d4 0a       	sbc	r13, r20
    3836:	e4 0a       	sbc	r14, r20
    3838:	f3 cf       	rjmp	.-26     	; 0x3820 <memcpy+0x10>
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	08 95       	ret

Disassembly of section .text.avrlibc:

0000392e <strcat>:
    392e:	9a 01       	movw	r18, r20
    3930:	46 2f       	mov	r20, r22
    3932:	dc 01       	movw	r26, r24
    3934:	bd 01       	movw	r22, r26
    3936:	6f 5f       	subi	r22, 0xFF	; 255
    3938:	7f 4f       	sbci	r23, 0xFF	; 255
    393a:	5c 91       	ld	r21, X
    393c:	55 23       	and	r21, r21
    393e:	11 f0       	breq	.+4      	; 0x3944 <strcat+0x16>
    3940:	db 01       	movw	r26, r22
    3942:	f8 cf       	rjmp	.-16     	; 0x3934 <strcat+0x6>
    3944:	f9 01       	movw	r30, r18
    3946:	54 91       	lpm	r21, Z
    3948:	47 fd       	sbrc	r20, 7
    394a:	50 81       	ld	r21, Z
    394c:	5d 93       	st	X+, r21
    394e:	55 23       	and	r21, r21
    3950:	21 f0       	breq	.+8      	; 0x395a <strcat+0x2c>
    3952:	2f 5f       	subi	r18, 0xFF	; 255
    3954:	3f 4f       	sbci	r19, 0xFF	; 255
    3956:	4f 4f       	sbci	r20, 0xFF	; 255
    3958:	f5 cf       	rjmp	.-22     	; 0x3944 <strcat+0x16>
    395a:	08 95       	ret

Disassembly of section .text.avrlibc:

000034f8 <strcmp>:
    34f8:	cf 92       	push	r12
    34fa:	df 92       	push	r13
    34fc:	ef 92       	push	r14
    34fe:	6b 01       	movw	r12, r22
    3500:	e8 2e       	mov	r14, r24
    3502:	f6 01       	movw	r30, r12
    3504:	84 91       	lpm	r24, Z
    3506:	e7 fc       	sbrc	r14, 7
    3508:	80 81       	ld	r24, Z
    350a:	f9 01       	movw	r30, r18
    350c:	54 91       	lpm	r21, Z
    350e:	47 fd       	sbrc	r20, 7
    3510:	50 81       	ld	r21, Z
    3512:	85 13       	cpse	r24, r21
    3514:	0b c0       	rjmp	.+22     	; 0x352c <strcmp+0x34>
    3516:	88 23       	and	r24, r24
    3518:	41 f0       	breq	.+16     	; 0x352a <strcmp+0x32>
    351a:	8f ef       	ldi	r24, 0xFF	; 255
    351c:	c8 1a       	sub	r12, r24
    351e:	d8 0a       	sbc	r13, r24
    3520:	e8 0a       	sbc	r14, r24
    3522:	2f 5f       	subi	r18, 0xFF	; 255
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	4f 4f       	sbci	r20, 0xFF	; 255
    3528:	ec cf       	rjmp	.-40     	; 0x3502 <strcmp+0xa>
    352a:	58 2f       	mov	r21, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	85 1b       	sub	r24, r21
    3530:	91 09       	sbc	r25, r1
    3532:	ef 90       	pop	r14
    3534:	df 90       	pop	r13
    3536:	cf 90       	pop	r12
    3538:	08 95       	ret

Disassembly of section .text.avrlibc:

00002c02 <strncmp>:
    2c02:	cf 92       	push	r12
    2c04:	df 92       	push	r13
    2c06:	ef 92       	push	r14
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	6b 01       	movw	r12, r22
    2c0e:	e8 2e       	mov	r14, r24
    2c10:	01 15       	cp	r16, r1
    2c12:	11 05       	cpc	r17, r1
    2c14:	19 f1       	breq	.+70     	; 0x2c5c <strncmp+0x5a>
    2c16:	01 50       	subi	r16, 0x01	; 1
    2c18:	11 09       	sbc	r17, r1
    2c1a:	f6 01       	movw	r30, r12
    2c1c:	84 91       	lpm	r24, Z
    2c1e:	e7 fc       	sbrc	r14, 7
    2c20:	80 81       	ld	r24, Z
    2c22:	88 23       	and	r24, r24
    2c24:	99 f0       	breq	.+38     	; 0x2c4c <strncmp+0x4a>
    2c26:	f9 01       	movw	r30, r18
    2c28:	94 91       	lpm	r25, Z
    2c2a:	47 fd       	sbrc	r20, 7
    2c2c:	90 81       	ld	r25, Z
    2c2e:	99 23       	and	r25, r25
    2c30:	69 f0       	breq	.+26     	; 0x2c4c <strncmp+0x4a>
    2c32:	01 15       	cp	r16, r1
    2c34:	11 05       	cpc	r17, r1
    2c36:	51 f0       	breq	.+20     	; 0x2c4c <strncmp+0x4a>
    2c38:	89 13       	cpse	r24, r25
    2c3a:	08 c0       	rjmp	.+16     	; 0x2c4c <strncmp+0x4a>
    2c3c:	8f ef       	ldi	r24, 0xFF	; 255
    2c3e:	c8 1a       	sub	r12, r24
    2c40:	d8 0a       	sbc	r13, r24
    2c42:	e8 0a       	sbc	r14, r24
    2c44:	2f 5f       	subi	r18, 0xFF	; 255
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	4f 4f       	sbci	r20, 0xFF	; 255
    2c4a:	e5 cf       	rjmp	.-54     	; 0x2c16 <strncmp+0x14>
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	f9 01       	movw	r30, r18
    2c50:	24 91       	lpm	r18, Z
    2c52:	47 fd       	sbrc	r20, 7
    2c54:	20 81       	ld	r18, Z
    2c56:	82 1b       	sub	r24, r18
    2c58:	91 09       	sbc	r25, r1
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <strncmp+0x5e>
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ef 90       	pop	r14
    2c66:	df 90       	pop	r13
    2c68:	cf 90       	pop	r12
    2c6a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000395c <strlen>:
    395c:	cf 92       	push	r12
    395e:	df 92       	push	r13
    3960:	ef 92       	push	r14
    3962:	6b 01       	movw	r12, r22
    3964:	e8 2e       	mov	r14, r24
    3966:	a8 2f       	mov	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	fc 01       	movw	r30, r24
    396c:	24 91       	lpm	r18, Z
    396e:	a7 fd       	sbrc	r26, 7
    3970:	20 81       	ld	r18, Z
    3972:	22 23       	and	r18, r18
    3974:	19 f0       	breq	.+6      	; 0x397c <strlen+0x20>
    3976:	01 96       	adiw	r24, 0x01	; 1
    3978:	a1 1d       	adc	r26, r1
    397a:	f7 cf       	rjmp	.-18     	; 0x396a <strlen+0xe>
    397c:	8c 19       	sub	r24, r12
    397e:	9d 09       	sbc	r25, r13
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bd8 <strcpy>:
    3bd8:	9a 01       	movw	r18, r20
    3bda:	46 2f       	mov	r20, r22
    3bdc:	dc 01       	movw	r26, r24
    3bde:	f9 01       	movw	r30, r18
    3be0:	54 91       	lpm	r21, Z
    3be2:	47 fd       	sbrc	r20, 7
    3be4:	50 81       	ld	r21, Z
    3be6:	5d 93       	st	X+, r21
    3be8:	55 23       	and	r21, r21
    3bea:	21 f0       	breq	.+8      	; 0x3bf4 <strcpy+0x1c>
    3bec:	2f 5f       	subi	r18, 0xFF	; 255
    3bee:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf0:	4f 4f       	sbci	r20, 0xFF	; 255
    3bf2:	f5 cf       	rjmp	.-22     	; 0x3bde <strcpy+0x6>
    3bf4:	08 95       	ret

Disassembly of section .text.avrlibc:

00003774 <strnlen>:
    3774:	cf 92       	push	r12
    3776:	df 92       	push	r13
    3778:	ef 92       	push	r14
    377a:	6b 01       	movw	r12, r22
    377c:	e8 2e       	mov	r14, r24
    377e:	a8 2f       	mov	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	41 15       	cp	r20, r1
    3784:	51 05       	cpc	r21, r1
    3786:	31 f4       	brne	.+12     	; 0x3794 <strnlen+0x20>
    3788:	8c 19       	sub	r24, r12
    378a:	9d 09       	sbc	r25, r13
    378c:	ef 90       	pop	r14
    378e:	df 90       	pop	r13
    3790:	cf 90       	pop	r12
    3792:	08 95       	ret
    3794:	fc 01       	movw	r30, r24
    3796:	24 91       	lpm	r18, Z
    3798:	a7 fd       	sbrc	r26, 7
    379a:	20 81       	ld	r18, Z
    379c:	22 23       	and	r18, r18
    379e:	a1 f3       	breq	.-24     	; 0x3788 <strnlen+0x14>
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	a1 1d       	adc	r26, r1
    37a4:	41 50       	subi	r20, 0x01	; 1
    37a6:	51 09       	sbc	r21, r1
    37a8:	ec cf       	rjmp	.-40     	; 0x3782 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000029cc <fputc>:
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	fb 01       	movw	r30, r22
    29d6:	24 81       	ldd	r18, Z+4	; 0x04
    29d8:	21 fd       	sbrc	r18, 1
    29da:	03 c0       	rjmp	.+6      	; 0x29e2 <fputc+0x16>
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	9f ef       	ldi	r25, 0xFF	; 255
    29e0:	2c c0       	rjmp	.+88     	; 0x2a3a <fputc+0x6e>
    29e2:	22 ff       	sbrs	r18, 2
    29e4:	16 c0       	rjmp	.+44     	; 0x2a12 <fputc+0x46>
    29e6:	47 81       	ldd	r20, Z+7	; 0x07
    29e8:	50 85       	ldd	r21, Z+8	; 0x08
    29ea:	25 81       	ldd	r18, Z+5	; 0x05
    29ec:	36 81       	ldd	r19, Z+6	; 0x06
    29ee:	42 17       	cp	r20, r18
    29f0:	53 07       	cpc	r21, r19
    29f2:	44 f4       	brge	.+16     	; 0x2a04 <fputc+0x38>
    29f4:	a0 81       	ld	r26, Z
    29f6:	b1 81       	ldd	r27, Z+1	; 0x01
    29f8:	9d 01       	movw	r18, r26
    29fa:	2f 5f       	subi	r18, 0xFF	; 255
    29fc:	3f 4f       	sbci	r19, 0xFF	; 255
    29fe:	31 83       	std	Z+1, r19	; 0x01
    2a00:	20 83       	st	Z, r18
    2a02:	8c 93       	st	X, r24
    2a04:	27 81       	ldd	r18, Z+7	; 0x07
    2a06:	30 85       	ldd	r19, Z+8	; 0x08
    2a08:	2f 5f       	subi	r18, 0xFF	; 255
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	30 87       	std	Z+8, r19	; 0x08
    2a0e:	27 83       	std	Z+7, r18	; 0x07
    2a10:	14 c0       	rjmp	.+40     	; 0x2a3a <fputc+0x6e>
    2a12:	8b 01       	movw	r16, r22
    2a14:	ec 01       	movw	r28, r24
    2a16:	fb 01       	movw	r30, r22
    2a18:	01 84       	ldd	r0, Z+9	; 0x09
    2a1a:	f2 85       	ldd	r31, Z+10	; 0x0a
    2a1c:	e0 2d       	mov	r30, r0
    2a1e:	09 95       	icall
    2a20:	89 2b       	or	r24, r25
    2a22:	e1 f6       	brne	.-72     	; 0x29dc <fputc+0x10>
    2a24:	d8 01       	movw	r26, r16
    2a26:	17 96       	adiw	r26, 0x07	; 7
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	18 97       	sbiw	r26, 0x08	; 8
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	18 96       	adiw	r26, 0x08	; 8
    2a32:	9c 93       	st	X, r25
    2a34:	8e 93       	st	-X, r24
    2a36:	17 97       	sbiw	r26, 0x07	; 7
    2a38:	ce 01       	movw	r24, r28
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	08 95       	ret

Disassembly of section .text.avrlibc:

000033a4 <sprintf>:
    33a4:	af e0       	ldi	r26, 0x0F	; 15
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e8 ed       	ldi	r30, 0xD8	; 216
    33aa:	f9 e1       	ldi	r31, 0x19	; 25
    33ac:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__prologue_saves__+0x1c>
    33b0:	0e 89       	ldd	r16, Y+22	; 0x16
    33b2:	1f 89       	ldd	r17, Y+23	; 0x17
    33b4:	86 e0       	ldi	r24, 0x06	; 6
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	1a 83       	std	Y+2, r17	; 0x02
    33ba:	09 83       	std	Y+1, r16	; 0x01
    33bc:	8f ef       	ldi	r24, 0xFF	; 255
    33be:	9f e7       	ldi	r25, 0x7F	; 127
    33c0:	9f 83       	std	Y+7, r25	; 0x07
    33c2:	8e 83       	std	Y+6, r24	; 0x06
    33c4:	9e 01       	movw	r18, r28
    33c6:	25 5e       	subi	r18, 0xE5	; 229
    33c8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ca:	48 8d       	ldd	r20, Y+24	; 0x18
    33cc:	59 8d       	ldd	r21, Y+25	; 0x19
    33ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    33d0:	ce 01       	movw	r24, r28
    33d2:	01 96       	adiw	r24, 0x01	; 1
    33d4:	0e 94 c8 02 	call	0x590	; 0x590 <vfprintf>
    33d8:	e8 85       	ldd	r30, Y+8	; 0x08
    33da:	f9 85       	ldd	r31, Y+9	; 0x09
    33dc:	e0 0f       	add	r30, r16
    33de:	f1 1f       	adc	r31, r17
    33e0:	10 82       	st	Z, r1
    33e2:	2f 96       	adiw	r28, 0x0f	; 15
    33e4:	e4 e0       	ldi	r30, 0x04	; 4
    33e6:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000021bc <__ultoa_invert>:
    21bc:	fa 01       	movw	r30, r20
    21be:	aa 27       	eor	r26, r26
    21c0:	28 30       	cpi	r18, 0x08	; 8
    21c2:	51 f1       	breq	.+84     	; 0x2218 <__ultoa_invert+0x5c>
    21c4:	20 31       	cpi	r18, 0x10	; 16
    21c6:	81 f1       	breq	.+96     	; 0x2228 <__ultoa_invert+0x6c>
    21c8:	e8 94       	clt
    21ca:	6f 93       	push	r22
    21cc:	6e 7f       	andi	r22, 0xFE	; 254
    21ce:	6e 5f       	subi	r22, 0xFE	; 254
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 4f       	sbci	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	af 4f       	sbci	r26, 0xFF	; 255
    21d8:	b1 e0       	ldi	r27, 0x01	; 1
    21da:	3e d0       	rcall	.+124    	; 0x2258 <__ultoa_invert+0x9c>
    21dc:	b4 e0       	ldi	r27, 0x04	; 4
    21de:	3c d0       	rcall	.+120    	; 0x2258 <__ultoa_invert+0x9c>
    21e0:	67 0f       	add	r22, r23
    21e2:	78 1f       	adc	r23, r24
    21e4:	89 1f       	adc	r24, r25
    21e6:	9a 1f       	adc	r25, r26
    21e8:	a1 1d       	adc	r26, r1
    21ea:	68 0f       	add	r22, r24
    21ec:	79 1f       	adc	r23, r25
    21ee:	8a 1f       	adc	r24, r26
    21f0:	91 1d       	adc	r25, r1
    21f2:	a1 1d       	adc	r26, r1
    21f4:	6a 0f       	add	r22, r26
    21f6:	71 1d       	adc	r23, r1
    21f8:	81 1d       	adc	r24, r1
    21fa:	91 1d       	adc	r25, r1
    21fc:	a1 1d       	adc	r26, r1
    21fe:	20 d0       	rcall	.+64     	; 0x2240 <__ultoa_invert+0x84>
    2200:	09 f4       	brne	.+2      	; 0x2204 <__ultoa_invert+0x48>
    2202:	68 94       	set
    2204:	3f 91       	pop	r19
    2206:	2a e0       	ldi	r18, 0x0A	; 10
    2208:	26 9f       	mul	r18, r22
    220a:	11 24       	eor	r1, r1
    220c:	30 19       	sub	r19, r0
    220e:	30 5d       	subi	r19, 0xD0	; 208
    2210:	31 93       	st	Z+, r19
    2212:	de f6       	brtc	.-74     	; 0x21ca <__ultoa_invert+0xe>
    2214:	cf 01       	movw	r24, r30
    2216:	08 95       	ret
    2218:	46 2f       	mov	r20, r22
    221a:	47 70       	andi	r20, 0x07	; 7
    221c:	40 5d       	subi	r20, 0xD0	; 208
    221e:	41 93       	st	Z+, r20
    2220:	b3 e0       	ldi	r27, 0x03	; 3
    2222:	0f d0       	rcall	.+30     	; 0x2242 <__ultoa_invert+0x86>
    2224:	c9 f7       	brne	.-14     	; 0x2218 <__ultoa_invert+0x5c>
    2226:	f6 cf       	rjmp	.-20     	; 0x2214 <__ultoa_invert+0x58>
    2228:	46 2f       	mov	r20, r22
    222a:	4f 70       	andi	r20, 0x0F	; 15
    222c:	40 5d       	subi	r20, 0xD0	; 208
    222e:	4a 33       	cpi	r20, 0x3A	; 58
    2230:	18 f0       	brcs	.+6      	; 0x2238 <__ultoa_invert+0x7c>
    2232:	49 5d       	subi	r20, 0xD9	; 217
    2234:	31 fd       	sbrc	r19, 1
    2236:	40 52       	subi	r20, 0x20	; 32
    2238:	41 93       	st	Z+, r20
    223a:	02 d0       	rcall	.+4      	; 0x2240 <__ultoa_invert+0x84>
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__ultoa_invert+0x6c>
    223e:	ea cf       	rjmp	.-44     	; 0x2214 <__ultoa_invert+0x58>
    2240:	b4 e0       	ldi	r27, 0x04	; 4
    2242:	a6 95       	lsr	r26
    2244:	97 95       	ror	r25
    2246:	87 95       	ror	r24
    2248:	77 95       	ror	r23
    224a:	67 95       	ror	r22
    224c:	ba 95       	dec	r27
    224e:	c9 f7       	brne	.-14     	; 0x2242 <__ultoa_invert+0x86>
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	61 05       	cpc	r22, r1
    2254:	71 05       	cpc	r23, r1
    2256:	08 95       	ret
    2258:	9b 01       	movw	r18, r22
    225a:	ac 01       	movw	r20, r24
    225c:	0a 2e       	mov	r0, r26
    225e:	06 94       	lsr	r0
    2260:	57 95       	ror	r21
    2262:	47 95       	ror	r20
    2264:	37 95       	ror	r19
    2266:	27 95       	ror	r18
    2268:	ba 95       	dec	r27
    226a:	c9 f7       	brne	.-14     	; 0x225e <__ultoa_invert+0xa2>
    226c:	62 0f       	add	r22, r18
    226e:	73 1f       	adc	r23, r19
    2270:	84 1f       	adc	r24, r20
    2272:	95 1f       	adc	r25, r21
    2274:	a0 1d       	adc	r26, r0
    2276:	08 95       	ret

Disassembly of section .text.avrlibc:

00003f84 <__ctype_isfalse>:
    3f84:	99 27       	eor	r25, r25
    3f86:	88 27       	eor	r24, r24

00003f88 <__ctype_istrue>:
    3f88:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a72 <eeprom_read_block>:
    3a72:	ba 01       	movw	r22, r20
    3a74:	a9 01       	movw	r20, r18
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22

00003a7a <eeprom_read_blraw>:
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	f9 99       	sbic	0x1f, 1	; 31
    3a7e:	fe cf       	rjmp	.-4      	; 0x3a7c <eeprom_read_blraw+0x2>
    3a80:	06 c0       	rjmp	.+12     	; 0x3a8e <eeprom_read_blraw+0x14>
    3a82:	f2 bd       	out	0x22, r31	; 34
    3a84:	e1 bd       	out	0x21, r30	; 33
    3a86:	f8 9a       	sbi	0x1f, 0	; 31
    3a88:	31 96       	adiw	r30, 0x01	; 1
    3a8a:	00 b4       	in	r0, 0x20	; 32
    3a8c:	0d 92       	st	X+, r0
    3a8e:	41 50       	subi	r20, 0x01	; 1
    3a90:	50 40       	sbci	r21, 0x00	; 0
    3a92:	b8 f7       	brcc	.-18     	; 0x3a82 <eeprom_read_blraw+0x8>
    3a94:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d6a <eeprom_read_byte>:
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	f9 99       	sbic	0x1f, 1	; 31
    3d6e:	fe cf       	rjmp	.-4      	; 0x3d6c <eeprom_read_byte+0x2>
    3d70:	92 bd       	out	0x22, r25	; 34
    3d72:	81 bd       	out	0x21, r24	; 33
    3d74:	f8 9a       	sbi	0x1f, 0	; 31
    3d76:	99 27       	eor	r25, r25
    3d78:	80 b5       	in	r24, 0x20	; 32
    3d7a:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e8c <eeprom_read_dword>:
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	a6 e1       	ldi	r26, 0x16	; 22
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	44 e0       	ldi	r20, 0x04	; 4
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003e9a <eeprom_read_word>:
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	a8 e1       	ldi	r26, 0x18	; 24
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	42 e0       	ldi	r20, 0x02	; 2
    3ea2:	50 e0       	ldi	r21, 0x00	; 0
    3ea4:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000342e <eeprom_update_block>:
    342e:	cf 92       	push	r12
    3430:	df 92       	push	r13
    3432:	ef 92       	push	r14
    3434:	21 50       	subi	r18, 0x01	; 1
    3436:	31 09       	sbc	r19, r1
    3438:	c0 f0       	brcs	.+48     	; 0x346a <eeprom_update_block+0x3c>
    343a:	6b 01       	movw	r12, r22
    343c:	e8 2e       	mov	r14, r24
    343e:	c2 0e       	add	r12, r18
    3440:	d3 1e       	adc	r13, r19
    3442:	e1 1c       	adc	r14, r1
    3444:	ca 01       	movw	r24, r20
    3446:	82 0f       	add	r24, r18
    3448:	93 1f       	adc	r25, r19
    344a:	42 2f       	mov	r20, r18
    344c:	73 2f       	mov	r23, r19
    344e:	f6 01       	movw	r30, r12
    3450:	5e 2d       	mov	r21, r14
    3452:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__xload_1>
    3456:	26 2f       	mov	r18, r22
    3458:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <eeprom_update_r18>
    345c:	31 e0       	ldi	r19, 0x01	; 1
    345e:	c3 1a       	sub	r12, r19
    3460:	d1 08       	sbc	r13, r1
    3462:	e1 08       	sbc	r14, r1
    3464:	41 50       	subi	r20, 0x01	; 1
    3466:	70 40       	sbci	r23, 0x00	; 0
    3468:	90 f7       	brcc	.-28     	; 0x344e <eeprom_update_block+0x20>
    346a:	ef 90       	pop	r14
    346c:	df 90       	pop	r13
    346e:	cf 90       	pop	r12
    3470:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a96 <eeprom_update_byte>:
    3a96:	26 2f       	mov	r18, r22

00003a98 <eeprom_update_r18>:
    3a98:	f9 99       	sbic	0x1f, 1	; 31
    3a9a:	fe cf       	rjmp	.-4      	; 0x3a98 <eeprom_update_r18>
    3a9c:	92 bd       	out	0x22, r25	; 34
    3a9e:	81 bd       	out	0x21, r24	; 33
    3aa0:	f8 9a       	sbi	0x1f, 0	; 31
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	00 b4       	in	r0, 0x20	; 32
    3aa6:	02 16       	cp	r0, r18
    3aa8:	39 f0       	breq	.+14     	; 0x3ab8 <eeprom_update_r18+0x20>
    3aaa:	1f ba       	out	0x1f, r1	; 31
    3aac:	20 bd       	out	0x20, r18	; 32
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	fa 9a       	sbi	0x1f, 2	; 31
    3ab4:	f9 9a       	sbi	0x1f, 1	; 31
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003c5e <eeprom_update_dword>:
    3c5e:	03 96       	adiw	r24, 0x03	; 3
    3c60:	27 2f       	mov	r18, r23
    3c62:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <eeprom_update_r18>
    3c66:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <eeprom_update_byte>
    3c6a:	25 2f       	mov	r18, r21
    3c6c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <eeprom_update_r18>
    3c70:	24 2f       	mov	r18, r20
    3c72:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00003f08 <eeprom_update_word>:
    3f08:	01 96       	adiw	r24, 0x01	; 1
    3f0a:	27 2f       	mov	r18, r23
    3f0c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <eeprom_update_r18>
    3f10:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00003b40 <__mulsi3>:
    3b40:	db 01       	movw	r26, r22
    3b42:	8f 93       	push	r24
    3b44:	9f 93       	push	r25
    3b46:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__muluhisi3>
    3b4a:	bf 91       	pop	r27
    3b4c:	af 91       	pop	r26
    3b4e:	a2 9f       	mul	r26, r18
    3b50:	80 0d       	add	r24, r0
    3b52:	91 1d       	adc	r25, r1
    3b54:	a3 9f       	mul	r26, r19
    3b56:	90 0d       	add	r25, r0
    3b58:	b2 9f       	mul	r27, r18
    3b5a:	90 0d       	add	r25, r0
    3b5c:	11 24       	eor	r1, r1
    3b5e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003472 <__udivmodsi4>:
    3472:	a1 e2       	ldi	r26, 0x21	; 33
    3474:	1a 2e       	mov	r1, r26
    3476:	aa 1b       	sub	r26, r26
    3478:	bb 1b       	sub	r27, r27
    347a:	fd 01       	movw	r30, r26
    347c:	0d c0       	rjmp	.+26     	; 0x3498 <__udivmodsi4_ep>

0000347e <__udivmodsi4_loop>:
    347e:	aa 1f       	adc	r26, r26
    3480:	bb 1f       	adc	r27, r27
    3482:	ee 1f       	adc	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	a2 17       	cp	r26, r18
    3488:	b3 07       	cpc	r27, r19
    348a:	e4 07       	cpc	r30, r20
    348c:	f5 07       	cpc	r31, r21
    348e:	20 f0       	brcs	.+8      	; 0x3498 <__udivmodsi4_ep>
    3490:	a2 1b       	sub	r26, r18
    3492:	b3 0b       	sbc	r27, r19
    3494:	e4 0b       	sbc	r30, r20
    3496:	f5 0b       	sbc	r31, r21

00003498 <__udivmodsi4_ep>:
    3498:	66 1f       	adc	r22, r22
    349a:	77 1f       	adc	r23, r23
    349c:	88 1f       	adc	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	1a 94       	dec	r1
    34a2:	69 f7       	brne	.-38     	; 0x347e <__udivmodsi4_loop>
    34a4:	60 95       	com	r22
    34a6:	70 95       	com	r23
    34a8:	80 95       	com	r24
    34aa:	90 95       	com	r25
    34ac:	9b 01       	movw	r18, r22
    34ae:	ac 01       	movw	r20, r24
    34b0:	bd 01       	movw	r22, r26
    34b2:	cf 01       	movw	r24, r30
    34b4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003cb8 <__muluhisi3>:
    3cb8:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__umulhisi3>
    3cbc:	a5 9f       	mul	r26, r21
    3cbe:	90 0d       	add	r25, r0
    3cc0:	b4 9f       	mul	r27, r20
    3cc2:	90 0d       	add	r25, r0
    3cc4:	a4 9f       	mul	r26, r20
    3cc6:	80 0d       	add	r24, r0
    3cc8:	91 1d       	adc	r25, r1
    3cca:	11 24       	eor	r1, r1
    3ccc:	08 95       	ret

Disassembly of section .text.libgcc:

00003f32 <__xload_1>:
    3f32:	57 fd       	sbrc	r21, 7
    3f34:	60 81       	ld	r22, Z
    3f36:	57 ff       	sbrs	r21, 7
    3f38:	64 91       	lpm	r22, Z
    3f3a:	08 95       	ret
