
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004673  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000612  00800100  00800100  00004673  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00004673  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000046ce  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00004708  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd5a  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a91  00000000  00000000  00012e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050ee  00000000  00000000  000158bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001878  00000000  00000000  0001a9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000106c  00000000  00000000  0001c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000560f  00000000  00000000  0001d290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  0002289f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00004502  00004502  00004656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000230d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  000042d0  000042d0  00004424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00004194  00004194  000042e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  000042de  000042de  00004432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000041a8  000041a8  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000042ec  000042ec  00004440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000041bc  000041bc  00004310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  000042fa  000042fa  0000444e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  000041d0  000041d0  00004324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00004308  00004308  0000445c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  000041e4  000041e4  00004338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00004460  00004460  000045b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 00000042  00003534  00003534  00003688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  000041f8  000041f8  0000434c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00004468  00004468  000045bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00004470  00004470  000045c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  00004478  00004478  000045cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00004316  00004316  0000446a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  0000441a  0000441a  0000456e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  00003eac  00003eac  00004000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  000044c0  000044c0  00004614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  00004506  00004506  0000465a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00002fc8  00002fc8  0000311c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800e1b  00800e1b  00004673  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  0000396a  0000396a  00003abe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  000043a2  000043a2  000044f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  000043ae  000043ae  00004502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00003016  00003016  0000316a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800e1d  00800e1d  00004673  2**0
                  ALLOC
 43 .text.start_timer 00000008  00004480  00004480  000045d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.stop_timer 00000006  000044c6  000044c6  0000461a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TC2_HAL_init 00000020  00003ecc  00003ecc  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_subscribe 00000054  00002f24  00002f24  00003078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_cancel 0000003a  000037b0  000037b0  00003904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_9 00000098  00002540  00002540  00002694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.cnt      00000001  00800e33  00800e33  00004673  2**0
                  ALLOC
 50 .bss.cbCounter 00000001  00800e34  00800e34  00004673  2**0
                  ALLOC
 51 .bss.callbacks 0000000a  00800dea  00800dea  00004673  2**0
                  ALLOC
 52 .text.start_and_write_data 0000004c  000030b2  000030b2  00003206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.read_and_stop 0000005a  00002dc2  00002dc2  00002f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_API_write_data 00000006  000044cc  000044cc  00004620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_API_write_data_stop 00000010  00004290  00004290  000043e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_read_data_ack_end_nack_stop 00000024  00003d52  00003d52  00003ea6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_repeat_read_data_stop 00000022  00003dbe  00003dbe  00003f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_init 00000012  00004248  00004248  0000439c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_start 00000048  00003274  00003274  000033c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_repeated_start 00000042  00003576  00003576  000036ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_write_byte 00000020  00003eec  00003eec  00004040  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_read_byte_ack 00000014  0000420c  0000420c  00004360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_read_byte_nack 00000014  00004220  00004220  00004374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_stop 00000010  000042a0  000042a0  000043f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.copy_buffer 0000002e  00003c50  00003c50  00003da4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_init 0000003c  00003738  00003738  0000388c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_message 00000034  0000399e  0000399e  00003af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_message_ready 0000000e  00004324  00004324  00004478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_clear_rx_buffer 0000000a  00004424  00004424  00004578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_read_message_as_str 00000028  00003d02  00003d02  00003e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_send_break 00000046  00003394  00003394  000034e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_22 0000004a  00003196  00003196  000032ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_20 00000074  00002a1c  00002a1c  00002b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .bss.rx_buffer_has_message 00000001  00800e35  00800e35  00004673  2**0
                  ALLOC
 75 .bss.rx_buffer_data_len 00000001  00800e36  00800e36  00004673  2**0
                  ALLOC
 76 .bss.tx_buffer_cursor 00000001  00800e37  00800e37  00004673  2**0
                  ALLOC
 77 .bss.tx_buffer_data_len 00000001  00800e38  00800e38  00004673  2**0
                  ALLOC
 78 .text.uart1_hal_init 0000003c  00003774  00003774  000038c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.uart1_hal_send_string 0000008a  00002796  00002796  000028ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_30 0000004a  000031e0  000031e0  00003334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_28 00000070  00002a90  00002a90  00002be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .bss.rx_buffer_has_message 00000001  00800e39  00800e39  00004673  2**0
                  ALLOC
 83 .bss.rx_buffer_data_len 00000001  00800e3a  00800e3a  00004673  2**0
                  ALLOC
 84 .bss.rx_buffer 00000096  00800cee  00800cee  00004673  2**0
                  ALLOC
 85 .bss.tx_buffer_cursor 00000001  00800e3b  00800e3b  00004673  2**0
                  ALLOC
 86 .bss.tx_buffer_data_len 00000001  00800e3c  00800e3c  00004673  2**0
                  ALLOC
 87 .bss.tx_buffer 0000012c  00800bc2  00800bc2  00004673  2**0
                  ALLOC
 88 .text.main    00000018  000040dc  000040dc  00004230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.calc_ppm_methane 00000096  000025d8  000025d8  0000272c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.vect_ADC_heat_timeout 00000018  000040f4  000040f4  00004248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ADC_init_sampling 00000066  00002c42  00002c42  00002d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ADC_deinit_sampling 00000014  00004234  00004234  00004388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.ADC_is_sampling_done 0000001c  00003ffe  00003ffe  00004152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.ADC_get_value 00000056  00002ece  00002ece  00003022  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.vect_ADC_do_sample 00000046  000033da  000033da  0000352e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ADC_start_sampling 0000000a  0000442e  0000442e  00004582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.ADC_meth_sens_power_on 0000001e  00003f2c  00003f2c  00004080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ADC_meth_sens_power_off 00000008  00004488  00004488  000045dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ADC_meth_sens_ready 00000012  0000425a  0000425a  000043ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.ADC_set_conf_parameters 00000042  000035b8  000035b8  0000370c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .bss.cntPowerUpTime 00000001  00800e3d  00800e3d  00004673  2**0
                  ALLOC
102 .bss._powerUpTime 00000001  00800e3e  00800e3e  00004673  2**0
                  ALLOC
103 .bss.cntSamples 00000002  00800e1f  00800e1f  00004673  2**0
                  ALLOC
104 .bss._data    00000002  00800e21  00800e21  00004673  2**0
                  ALLOC
105 .bss._nSamples 00000002  00800e23  00800e23  00004673  2**0
                  ALLOC
106 .data.PPM_factor 00000004  00800dff  0000450f  00004663  2**0
                  CONTENTS, ALLOC, LOAD, DATA
107 .data.RRL     00000004  00800e03  00004513  00004667  2**0
                  CONTENTS, ALLOC, LOAD, DATA
108 .data.Vc      00000004  00800e07  00004517  0000466b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
109 .text.EM_has_deveui 00000016  0000413c  0000413c  00004290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.EM_has_appeui 00000016  00004152  00004152  000042a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.EM_has_appkey 00000016  00004168  00004168  000042bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.EM_get_deveui 00000030  00003b00  00003b00  00003c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.EM_get_appeui 00000030  00003b30  00003b30  00003c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.EM_get_appkey 00000030  00003b60  00003b60  00003cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.EM_get_ppmfactor 0000001e  00003f4a  00003f4a  0000409e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.EM_get_RRL 0000001e  00003f68  00003f68  000040bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.EM_get_Vcc 0000001e  00003f86  00003f86  000040da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.EM_get_collections 00000010  000042b0  000042b0  00004404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.EM_get_heat_up_time 0000000c  000043ba  000043ba  0000450e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_get_air_pump_time 0000000c  000043c6  000043c6  0000451a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_get_sp_interval 0000000c  000043d2  000043d2  00004526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.cb_blink 00000006  000044d2  000044d2  00004626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.blink   0000004c  000030fe  000030fe  00003252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.err_code 00000038  000037ea  000037ea  0000393e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.LED_start_try_join 0000000e  00004332  00004332  00004486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.LED_stop_try_join 00000010  000042c0  000042c0  00004414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.LED_join_success 00000040  0000363c  0000363c  00003790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.LED_join_denied 00000008  00004490  00004490  000045e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.LED_conf_err 00000008  00004498  00004498  000045ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.LED_fatal_err 00000008  000044a0  000044a0  000045f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .bss.cbPointer 00000001  00800e3f  00800e3f  00004673  2**0
                  ALLOC
132 .progmemx.data 00000038  00000354  00000354  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.JN_join_network 00000296  00000e50  00000e50  00000fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.set_block_uplink 00000018  0000410c  0000410c  00004260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.cb_block_uplink 0000001c  0000401a  0000401a  0000416e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.LM_join_network 00000006  000044d8  000044d8  0000462c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.LM_send_uplink 0000002e  00003c7e  00003c7e  00003dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.LM_put_to_sleep 00000006  000044de  000044de  00004632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.LM_wake_up 00000006  000044e4  000044e4  00004638  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.LM_is_free 0000000a  00004438  00004438  0000458c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .bss.subPointer 00000001  00800e40  00800e40  00004673  2**0
                  ALLOC
142 .bss.busy     00000001  00800e41  00800e41  00004673  2**0
                  ALLOC
143 .bss.cnt      00000001  00800e42  00800e42  00004673  2**0
                  ALLOC
144 .progmemx.data 00000073  000002e1  000002e1  00000435  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
145 .text.tohex   00000084  000028a6  000028a6  000029fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.attach_ending 0000001c  00004036  00004036  0000418a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.cmd_with_ending 00000032  00003a06  00003a06  00003b5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.sys_sleep_cmd 0000005e  00002ca8  00002ca8  00002dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.mac_set_parameter 0000004e  00003064  00003064  000031b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.mac_set_deveui 00000048  000032bc  000032bc  00003410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.mac_set_appeui 00000048  00003304  00003304  00003458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.mac_set_appkey 00000048  0000334c  0000334c  000034a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.mac_set_ADR 00000030  00003b90  00003b90  00003ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.mac_tx_confirmed 000000ac  000022ac  000022ac  00002400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.beginsWidth 0000004a  0000322a  0000322a  0000337e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .progmemx.data 00000038  0000038c  0000038c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
157 .text.decode_tx_response 00000068  00002bda  00002bda  00002d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SU_send_uplink 000000fc  00001a38  00001a38  00001b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .progmemx.data 00000003  000003fd  000003fd  00000551  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
160 .text.SC_put_to_sleep 0000004c  0000314a  0000314a  0000329e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SC_wake_up 00000032  00003a38  00003a38  00003b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.util_setPendingStates 0000000c  000043de  000043de  00004532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.util_setMatchCase 0000000c  000043ea  000043ea  0000453e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.util_transmit_msg 0000001c  00004052  00004052  000041a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.util_read_msg 00000006  000044ea  000044ea  0000463e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .progmemx.data 00000027  000003c4  000003c4  00000518  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
167 .text.util_parse_err 00000058  00002e76  00002e76  00002fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.util_strbeginswith 00000044  000034ac  000034ac  00003600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.util_matchMessage 0000005e  00002d06  00002d06  00002e5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.get_group_id 00000006  000044f0  000044f0  00004644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.set_group_id 00000006  000044f6  000044f6  0000464a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.MRPP_init_group 00000032  00003a6a  00003a6a  00003bbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.MRPP_add_collection_data_INT16 00000070  00002b00  00002b00  00002c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.MRPP_is_body_package_ready 00000022  00003de0  00003de0  00003f34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.MRPP_get_ready_body_package 00000096  0000266e  0000266e  000027c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.MRPP_set_body_sent 0000000c  000043f6  000043f6  0000454a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.MRPP_get_header_package 00000022  00003e02  00003e02  00003f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.MRPP_get_tail_package 00000022  00003e24  00003e24  00003f78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.MRPP_all_body_package_sent 0000000a  00004442  00004442  00004596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .bss._groupId 00000001  00800e43  00800e43  00004673  2**0
                  ALLOC
181 .text.mrpp_data_add_int16 00000092  00002704  00002704  00002858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.mrpp_data_get 00000030  00003bc0  00003bc0  00003d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.add_data_types 000000d8  00001df2  00001df2  00001f46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.update_bodies 00000162  00001454  00001454  000015a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.mrpp_state_init 000001be  000010e6  000010e6  0000123a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.mrpp_state_get_header 000000a2  000023fc  000023fc  00002550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.mrpp_state_get_tail 000000a4  00002358  00002358  000024ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.mrpp_state_set_collection 00000086  00002820  00002820  00002974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.mrpp_state_is_body_ready 00000030  00003bf0  00003bf0  00003d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.mrpp_state_all_bodies_sent 0000002a  00003cd8  00003cd8  00003e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.mrpp_state_get_ready_body 0000011a  00001818  00001818  0000196c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.mrpp_state_set_body_sent 00000020  00003f0c  00003f0c  00004060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.mrpp_state_get_collection_address 00000036  00003892  00003892  000039e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.cb_cnt_time 00000030  00003c20  00003c20  00003d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.PUMP_start 00000024  00003d76  00003d76  00003eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.PUMP_is_done 0000001c  0000406e  0000406e  000041c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .bss.eventPointer 00000001  00800e44  00800e44  00004673  2**0
                  ALLOC
198 .bss.cnt      00000002  00800e25  00800e25  00004673  2**0
                  ALLOC
199 .bss._seconds 00000002  00800e27  00800e27  00004673  2**0
                  ALLOC
200 .text.RTC_set_clock_out 00000050  00002f78  00002f78  000030cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.RTC_clear_wake_up_interrupt 00000034  000039d2  000039d2  00003b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.RTC_get_current_time 00000140  000015b6  000015b6  0000170a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .rodata       00000005  00800dfa  0000450a  0000465e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
204 .text.RTC_set_wake_up_interrupt_minutes 000000c4  0000206c  0000206c  000021c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.RTC_datetime_to_ts 00000122  000016f6  000016f6  0000184a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000402  00000402  00000556  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
207 .text.bytes_2_uint 0000001a  000040c2  000040c2  00004216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.init_measurement 00000038  00003822  00003822  00003976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.validate_data 00000032  00003a9c  00003a9c  00003bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.read_value 000000a2  0000249e  0000249e  000025f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.vect_SCD_do_sample 00000046  00003420  00003420  00003574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.SCD30_sensor_on 00000022  00003e46  00003e46  00003f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.SCD30_sensor_off 00000008  000044a8  000044a8  000045fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.SCD30_init_sampling 00000022  00003e68  00003e68  00003fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.SCD30_deinit_sampling 0000000e  00004340  00004340  00004494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.SCD30_start_sampling 0000000a  0000444c  0000444c  000045a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.SCD30_is_sampling_done 0000001c  0000408a  0000408a  000041de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .bss.cntSamples 00000002  00800e29  00800e29  00004673  2**0
                  ALLOC
219 .bss._data    00000002  00800e2b  00800e2b  00004673  2**0
                  ALLOC
220 .bss._nSamples 00000002  00800e2d  00800e2d  00004673  2**0
                  ALLOC
221 .progmemx.data.READ_DATA_CMD 00000002  00000400  00000400  00000554  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
222 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000003f3  000003f3  00000547  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
223 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000003f8  000003f8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
224 .text.decode_stage_response 00000016  0000417e  0000417e  000042d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.decode_join_response 0000001c  000040a6  000040a6  000041fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.decode_header_tail_response 0000001e  00003fa4  00003fa4  000040f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.read_eeprom 0000005a  00002e1c  00002e1c  00002f70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.join_lora 00000012  0000426c  0000426c  000043c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.set_wakeup 0000000a  00004456  00004456  000045aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.send_header 0000003e  000036bc  000036bc  00003810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.stage_0 000000c0  00002130  00002130  00002284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.stage_1 000000ec  00001c28  00001c28  00001d7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.stage_2 00000106  00001932  00001932  00001a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.stage_3 000000f4  00001b34  00001b34  00001c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.send_body 00000040  0000367c  0000367c  000037d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.decode_body_response 00000028  00003d2a  00003d2a  00003e7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.send_tail 0000003e  000036fa  000036fa  0000384e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.send_msg 00000018  00004124  00004124  00004278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .progmemx.data 0000008f  00000252  00000252  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
240 .text.MAINPG_start 00000308  00000b48  00000b48  00000c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .bss.samplingProcessInterval 00000001  00800e45  00800e45  00004673  2**0
                  ALLOC
242 .data.methHeatUpTime 00000001  00800e46  00000403  00000557  2**0
                  CONTENTS, ALLOC, LOAD, DATA
243 .data.airPumpTime 00000002  00800e2f  0000451b  0000466f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
244 .bss.ppmx     00000004  00800e0b  00800e0b  00004673  2**0
                  ALLOC
245 .bss.rrlx     00000004  00800e0f  00800e0f  00004673  2**0
                  ALLOC
246 .bss.vccx     00000004  00800e13  00800e13  00004673  2**0
                  ALLOC
247 .bss.cols     00000023  00800d84  00800d84  00004673  2**0
                  ALLOC
248 .bss.appkey   00000021  00800da7  00800da7  00004673  2**0
                  ALLOC
249 .bss.appeui   00000011  00800dc8  00800dc8  00004673  2**0
                  ALLOC
250 .bss.deveui   00000011  00800dd9  00800dd9  00004673  2**0
                  ALLOC
251 .bss.dt       00000006  00800df4  00800df4  00004673  2**0
                  ALLOC
252 .bss.ts       00000004  00800e17  00800e17  00004673  2**0
                  ALLOC
253 .bss.meth_data 00000258  00800712  00800712  00004673  2**0
                  ALLOC
254 .bss.co2_data 00000258  0080096a  0080096a  00004673  2**0
                  ALLOC
255 .data.bodyIndex 00000002  00800e31  0000451d  00004671  2**0
                  CONTENTS, ALLOC, LOAD, DATA
256 .bss.state_s3 00000001  00800e47  00800e47  00004673  2**0
                  ALLOC
257 .bss.state_s2 00000001  00800e48  00800e48  00004673  2**0
                  ALLOC
258 .bss.state_s1 00000001  00800e49  00800e49  00004673  2**0
                  ALLOC
259 .bss.state_s0 00000001  00800e4a  00800e4a  00004673  2**0
                  ALLOC
260 .text.calc_crc8 00000036  000038c8  000038c8  00003a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.avrlibc.fplib 0000000e  0000434e  0000434e  000044a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.avrlibc.fplib 000000ce  00001f9e  00001f9e  000020f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.avrlibc.fplib 00000008  000044b0  000044b0  00004604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .text.avrlibc.fplib 000000de  00001d14  00001d14  00001e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.avrlibc.fplib 0000005e  00002d64  00002d64  00002eb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.avrlibc.fplib 0000007a  0000292a  0000292a  00002a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.avrlibc.fplib 0000000c  00004402  00004402  00004556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.avrlibc.fplib 00000006  000044fc  000044fc  00004650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.avrlibc.fplib 0000000e  0000435c  0000435c  000044b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.avrlibc.fplib 0000000e  0000436a  0000436a  000044be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.avrlibc.fplib 00000022  00003e8a  00003e8a  00003fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.avrlibc.fplib 00000044  000034f0  000034f0  00003644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.avrlibc.fplib 0000000e  00004378  00004378  000044cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.avrlibc.fplib 00000008  000044b8  000044b8  0000460c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.avrlibc.fplib 000000d4  00001eca  00001eca  0000201e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .progmemx.data 00000008  000003eb  000003eb  0000053f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
277 .text.avrlibc 00000744  00000404  00000404  00000558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.libgcc  0000000c  0000440e  0000440e  00004562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.libgcc.mul 0000001e  00003fc2  00003fc2  00004116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.libgcc.prologue 00000038  0000385a  0000385a  000039ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.libgcc.prologue 00000036  000038fe  000038fe  00003a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .text.avrlibc 000001b0  000012a4  000012a4  000013f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.avrlibc 00000032  00003ace  00003ace  00003c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.avrlibc 00000042  000035fa  000035fa  0000374e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.avrlibc 0000006a  00002b70  00002b70  00002cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.avrlibc 0000002c  00003cac  00003cac  00003e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.avrlibc 0000001e  00003fe0  00003fe0  00004134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.avrlibc 00000036  00003934  00003934  00003a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.avrlibc 00000078  000029a4  000029a4  00002af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.avrlibc 00000046  00003466  00003466  000035ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.avrlibc 000000bc  000021f0  000021f0  00002344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.avrlibc 00000024  00003d9a  00003d9a  00003eee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.avrlibc 00000012  0000427e  0000427e  000043d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.avrlibc 0000000e  00004386  00004386  000044da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.avrlibc 0000000e  00004394  00004394  000044e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
   4:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
   8:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
   c:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__vector_3>
  10:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  14:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  18:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  1c:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  20:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  24:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__vector_9>
  28:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  2c:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  30:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  34:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__vector_13>
  38:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  3c:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  40:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__vector_16>
  44:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  48:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  4c:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  50:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__vector_20>
  54:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  58:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__vector_22>
  5c:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  60:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  64:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  68:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  6c:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  70:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__vector_28>
  74:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__bad_interrupt>
  78:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__vector_30>
  7c:	46 07       	cpc	r20, r22
  7e:	4f 08       	sbc	r4, r15
  80:	65 07       	cpc	r22, r21
  82:	82 07       	cpc	r24, r18
  84:	a1 07       	cpc	r26, r17
  86:	c0 07       	cpc	r28, r16
  88:	df 07       	cpc	r29, r31
  8a:	fe 07       	cpc	r31, r30
  8c:	1b 08       	sbc	r1, r11
  8e:	38 08       	sbc	r3, r8
  90:	4a 08       	sbc	r4, r10
  92:	60 08       	sbc	r6, r0
  94:	62 08       	sbc	r6, r2
  96:	38 0d       	add	r19, r8
  98:	6b 0d       	add	r22, r11
  9a:	59 0d       	add	r21, r9
  9c:	89 0d       	add	r24, r9
  9e:	89 0d       	add	r24, r9
  a0:	78 0d       	add	r23, r8
  a2:	76 0d       	add	r23, r6
  a4:	8b 0d       	add	r24, r11
  a6:	72 0d       	add	r23, r2
  a8:	74 0d       	add	r23, r4
  aa:	d1 05       	cpc	r29, r1
  ac:	f1 05       	cpc	r31, r1
  ae:	07 06       	cpc	r0, r23
  b0:	18 06       	cpc	r1, r24
  b2:	27 06       	cpc	r2, r23
  b4:	09 07       	cpc	r16, r25
  b6:	1c 06       	cpc	r1, r28
  b8:	39 06       	cpc	r3, r25
  ba:	50 06       	cpc	r5, r16
  bc:	45 06       	cpc	r4, r21
  be:	67 06       	cpc	r6, r23
  c0:	5b 06       	cpc	r5, r27
  c2:	87 06       	cpc	r8, r23
  c4:	94 06       	cpc	r9, r20
  c6:	9c 06       	cpc	r9, r28
  c8:	a4 06       	cpc	r10, r20
  ca:	ac 06       	cpc	r10, r28
  cc:	b4 06       	cpc	r11, r20
  ce:	d0 06       	cpc	r13, r16
  d0:	d7 06       	cpc	r13, r23
  d2:	e4 06       	cpc	r14, r20
  d4:	fb 06       	cpc	r15, r27
  d6:	12 07       	cpc	r17, r18
  d8:	1b 07       	cpc	r17, r27

000000da <.dinit>:
  da:	01 00       	.word	0x0001	; ????
  dc:	0d fa       	.word	0xfa0d	; ????
  de:	80 0d       	add	r24, r0
  e0:	fa 0e       	add	r15, r26
  e2:	0b 00       	.word	0x000b	; ????
  e4:	45 0a       	sbc	r4, r21
  e6:	0e 0b       	sbc	r16, r30
  e8:	0e 2f       	mov	r16, r30
  ea:	80 0e       	add	r8, r16
  ec:	2f 0e       	add	r2, r31
  ee:	33 00       	.word	0x0033	; ????
  f0:	45 1b       	sub	r20, r21
  f2:	0e 33       	cpi	r16, 0x3E	; 62
  f4:	0e 46       	sbci	r16, 0x6E	; 110
  f6:	80 0e       	add	r8, r16
  f8:	46 0e       	add	r4, r22
  fa:	47 00       	.word	0x0047	; ????
  fc:	04 03       	mulsu	r16, r20
  fe:	0e 47       	sbci	r16, 0x7E	; 126
 100:	0e 4b       	sbci	r16, 0xBE	; 190
 102:	80 00       	.word	0x0080	; ????

00000104 <__trampolines_end>:
 104:	00 40       	sbci	r16, 0x00	; 0
 106:	7a 10       	cpse	r7, r10
 108:	f3 5a       	subi	r31, 0xA3	; 163
 10a:	00 a0       	ldd	r0, Z+32	; 0x20
 10c:	72 4e       	sbci	r23, 0xE2	; 226
 10e:	18 09       	sbc	r17, r8
 110:	00 10       	cpse	r0, r0
 112:	a5 d4       	rcall	.+2378   	; 0xa5e <__EEPROM_REGION_LENGTH__+0x25e>
 114:	e8 00       	.word	0x00e8	; ????
 116:	00 e8       	ldi	r16, 0x80	; 128
 118:	76 48       	sbci	r23, 0x86	; 134
 11a:	17 00       	.word	0x0017	; ????
 11c:	00 e4       	ldi	r16, 0x40	; 64
 11e:	0b 54       	subi	r16, 0x4B	; 75
 120:	02 00       	.word	0x0002	; ????
 122:	00 ca       	rjmp	.-3072   	; 0xfffff524 <__eeprom_end+0xff7ef524>
 124:	9a 3b       	cpi	r25, 0xBA	; 186
 126:	00 00       	nop
 128:	00 e1       	ldi	r16, 0x10	; 16
 12a:	f5 05       	cpc	r31, r5
 12c:	00 00       	nop
 12e:	80 96       	adiw	r24, 0x20	; 32
 130:	98 00       	.word	0x0098	; ????
 132:	00 00       	nop
 134:	40 42       	sbci	r20, 0x20	; 32
 136:	0f 00       	.word	0x000f	; ????
 138:	00 00       	nop
 13a:	a0 86       	std	Z+8, r10	; 0x08
 13c:	01 00       	.word	0x0001	; ????
 13e:	00 00       	nop
 140:	10 27       	eor	r17, r16
 142:	00 00       	nop
 144:	00 00       	nop
 146:	e8 03       	fmulsu	r22, r16
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	64 00       	.word	0x0064	; ????
 14e:	00 00       	nop
 150:	00 00       	nop
 152:	0a 00       	.word	0x000a	; ????
 154:	00 00       	nop
 156:	00 00       	nop
 158:	01 00       	.word	0x0001	; ????
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	2c 76       	andi	r18, 0x6C	; 108
 160:	d8 88       	ldd	r13, Y+16	; 0x10
 162:	dc 67       	ori	r29, 0x7C	; 124
 164:	4f 08       	sbc	r4, r15
 166:	23 df       	rcall	.-442    	; 0xffffffae <__eeprom_end+0xff7effae>
 168:	c1 df       	rcall	.-126    	; 0xec <.dinit+0x12>
 16a:	ae 59       	subi	r26, 0x9E	; 158
 16c:	e1 b1       	in	r30, 0x01	; 1
 16e:	b7 96       	adiw	r30, 0x27	; 39
 170:	e5 e3       	ldi	r30, 0x35	; 53
 172:	e4 53       	subi	r30, 0x34	; 52
 174:	c6 3a       	cpi	r28, 0xA6	; 166
 176:	e6 51       	subi	r30, 0x16	; 22
 178:	99 76       	andi	r25, 0x69	; 105
 17a:	96 e8       	ldi	r25, 0x86	; 134
 17c:	e6 c2       	rjmp	.+1484   	; 0x74a <vfprintf+0x346>
 17e:	84 26       	eor	r8, r20
 180:	eb 89       	ldd	r30, Y+19	; 0x13
 182:	8c 9b       	sbis	0x11, 4	; 17
 184:	62 ed       	ldi	r22, 0xD2	; 210
 186:	40 7c       	andi	r20, 0xC0	; 192
 188:	6f fc       	.word	0xfc6f	; ????
 18a:	ef bc       	out	0x2f, r14	; 47
 18c:	9c 9f       	mul	r25, r28
 18e:	40 f2       	brcs	.-112    	; 0x120 <__trampolines_end+0x1c>
 190:	ba a5       	ldd	r27, Y+42	; 0x2a
 192:	6f a5       	ldd	r22, Y+47	; 0x2f
 194:	f4 90       	lpm	r15, Z
 196:	05 5a       	subi	r16, 0xA5	; 165
 198:	2a f7       	brpl	.-54     	; 0x164 <__trampolines_end+0x60>
 19a:	5c 93       	st	X, r21
 19c:	6b 6c       	ori	r22, 0xCB	; 203
 19e:	f9 67       	ori	r31, 0x79	; 121
 1a0:	6d c1       	rjmp	.+730    	; 0x47c <vfprintf+0x78>
 1a2:	1b fc       	.word	0xfc1b	; ????
 1a4:	e0 e4       	ldi	r30, 0x40	; 64
 1a6:	0d 47       	sbci	r16, 0x7D	; 125
 1a8:	fe f5       	brtc	.+126    	; 0x228 <__do_copy_data+0x1e>
 1aa:	20 e6       	ldi	r18, 0x60	; 96
 1ac:	b5 00       	.word	0x00b5	; ????
 1ae:	d0 ed       	ldi	r29, 0xD0	; 208
 1b0:	90 2e       	mov	r9, r16
 1b2:	03 00       	.word	0x0003	; ????
 1b4:	94 35       	cpi	r25, 0x54	; 84
 1b6:	77 05       	cpc	r23, r7
 1b8:	00 80       	ld	r0, Z
 1ba:	84 1e       	adc	r8, r20
 1bc:	08 00       	.word	0x0008	; ????
 1be:	00 20       	and	r0, r0
 1c0:	4e 0a       	sbc	r4, r30
 1c2:	00 00       	nop
 1c4:	00 c8       	rjmp	.-4096   	; 0xfffff1c6 <__eeprom_end+0xff7ef1c6>
 1c6:	0c 33       	cpi	r16, 0x3C	; 60
 1c8:	33 33       	cpi	r19, 0x33	; 51
 1ca:	33 0f       	add	r19, r19
 1cc:	98 6e       	ori	r25, 0xE8	; 232
 1ce:	12 83       	std	Z+2, r17	; 0x02
 1d0:	11 41       	sbci	r17, 0x11	; 17
 1d2:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1d4:	21 14       	cp	r2, r1
 1d6:	89 3b       	cpi	r24, 0xB9	; 185
 1d8:	e6 55       	subi	r30, 0x56	; 86
 1da:	16 cf       	rjmp	.-468    	; 0x8 <__FUSE_REGION_LENGTH__+0x5>
 1dc:	fe e6       	ldi	r31, 0x6E	; 110
 1de:	db 18       	sub	r13, r11
 1e0:	d1 84       	ldd	r13, Z+9	; 0x09
 1e2:	4b 38       	cpi	r20, 0x8B	; 139
 1e4:	1b f7       	brvc	.-58     	; 0x1ac <__trampolines_end+0xa8>
 1e6:	7c 1d       	adc	r23, r12
 1e8:	90 1d       	adc	r25, r0
 1ea:	a4 bb       	out	0x14, r26	; 20
 1ec:	e4 24       	eor	r14, r4
 1ee:	20 32       	cpi	r18, 0x20	; 32
 1f0:	84 72       	andi	r24, 0x24	; 36
 1f2:	5e 22       	and	r5, r30
 1f4:	81 00       	.word	0x0081	; ????
 1f6:	c9 f1       	breq	.+114    	; 0x26a <_etext+0x18>
 1f8:	24 ec       	ldi	r18, 0xC4	; 196
 1fa:	a1 e5       	ldi	r26, 0x51	; 81
 1fc:	3d 27       	eor	r19, r29

000001fe <__ctors_end>:
 1fe:	11 24       	eor	r1, r1
 200:	1f be       	out	0x3f, r1	; 63
 202:	cf ef       	ldi	r28, 0xFF	; 255
 204:	d0 e1       	ldi	r29, 0x10	; 16
 206:	de bf       	out	0x3e, r29	; 62
 208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
 20a:	ea ed       	ldi	r30, 0xDA	; 218
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	17 c0       	rjmp	.+46     	; 0x240 <__do_clear_bss+0x8>
 212:	b5 91       	lpm	r27, Z+
 214:	a5 91       	lpm	r26, Z+
 216:	35 91       	lpm	r19, Z+
 218:	25 91       	lpm	r18, Z+
 21a:	05 91       	lpm	r16, Z+
 21c:	07 fd       	sbrc	r16, 7
 21e:	0c c0       	rjmp	.+24     	; 0x238 <__do_clear_bss>
 220:	95 91       	lpm	r25, Z+
 222:	85 91       	lpm	r24, Z+
 224:	ef 01       	movw	r28, r30
 226:	f9 2f       	mov	r31, r25
 228:	e8 2f       	mov	r30, r24
 22a:	05 90       	lpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	a2 17       	cp	r26, r18
 230:	b3 07       	cpc	r27, r19
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x20>
 234:	fe 01       	movw	r30, r28
 236:	04 c0       	rjmp	.+8      	; 0x240 <__do_clear_bss+0x8>

00000238 <__do_clear_bss>:
 238:	1d 92       	st	X+, r1
 23a:	a2 17       	cp	r26, r18
 23c:	b3 07       	cpc	r27, r19
 23e:	e1 f7       	brne	.-8      	; 0x238 <__do_clear_bss>
 240:	e3 30       	cpi	r30, 0x03	; 3
 242:	f4 07       	cpc	r31, r20
 244:	31 f7       	brne	.-52     	; 0x212 <__do_copy_data+0x8>
 246:	0e 94 6e 20 	call	0x40dc	; 0x40dc <main>
 24a:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>

Disassembly of section .text:

00004502 <__bad_interrupt>:
    4502:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

000042d0 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    42d0:	81 b1       	in	r24, 0x01	; 1
    42d2:	88 60       	ori	r24, 0x08	; 8
    42d4:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    42d6:	82 b1       	in	r24, 0x02	; 2
    42d8:	87 7f       	andi	r24, 0xF7	; 247
    42da:	82 b9       	out	0x02, r24	; 2
    42dc:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00004194 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    4194:	88 23       	and	r24, r24
    4196:	21 f0       	breq	.+8      	; 0x41a0 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    4198:	82 b1       	in	r24, 0x02	; 2
    419a:	88 60       	ori	r24, 0x08	; 8
    419c:	82 b9       	out	0x02, r24	; 2
    419e:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    41a0:	82 b1       	in	r24, 0x02	; 2
    41a2:	87 7f       	andi	r24, 0xF7	; 247
    41a4:	82 b9       	out	0x02, r24	; 2
    41a6:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000042de <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    42de:	81 b1       	in	r24, 0x01	; 1
    42e0:	80 62       	ori	r24, 0x20	; 32
    42e2:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    42e4:	82 b1       	in	r24, 0x02	; 2
    42e6:	8f 7d       	andi	r24, 0xDF	; 223
    42e8:	82 b9       	out	0x02, r24	; 2
    42ea:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000041a8 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    41a8:	88 23       	and	r24, r24
    41aa:	21 f0       	breq	.+8      	; 0x41b4 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    41ac:	82 b1       	in	r24, 0x02	; 2
    41ae:	80 62       	ori	r24, 0x20	; 32
    41b0:	82 b9       	out	0x02, r24	; 2
    41b2:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    41b4:	82 b1       	in	r24, 0x02	; 2
    41b6:	8f 7d       	andi	r24, 0xDF	; 223
    41b8:	82 b9       	out	0x02, r24	; 2
    41ba:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000042ec <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    42ec:	81 b1       	in	r24, 0x01	; 1
    42ee:	80 61       	ori	r24, 0x10	; 16
    42f0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    42f2:	82 b1       	in	r24, 0x02	; 2
    42f4:	8f 7e       	andi	r24, 0xEF	; 239
    42f6:	82 b9       	out	0x02, r24	; 2
    42f8:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000041bc <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    41bc:	88 23       	and	r24, r24
    41be:	21 f0       	breq	.+8      	; 0x41c8 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    41c0:	82 b1       	in	r24, 0x02	; 2
    41c2:	80 61       	ori	r24, 0x10	; 16
    41c4:	82 b9       	out	0x02, r24	; 2
    41c6:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    41c8:	82 b1       	in	r24, 0x02	; 2
    41ca:	8f 7e       	andi	r24, 0xEF	; 239
    41cc:	82 b9       	out	0x02, r24	; 2
    41ce:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

000042fa <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    42fa:	8a b1       	in	r24, 0x0a	; 10
    42fc:	80 61       	ori	r24, 0x10	; 16
    42fe:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    4300:	8b b1       	in	r24, 0x0b	; 11
    4302:	8f 7e       	andi	r24, 0xEF	; 239
    4304:	8b b9       	out	0x0b, r24	; 11
    4306:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

000041d0 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    41d0:	88 23       	and	r24, r24
    41d2:	21 f0       	breq	.+8      	; 0x41dc <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    41d4:	8b b1       	in	r24, 0x0b	; 11
    41d6:	80 61       	ori	r24, 0x10	; 16
    41d8:	8b b9       	out	0x0b, r24	; 11
    41da:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    41dc:	8b b1       	in	r24, 0x0b	; 11
    41de:	8f 7e       	andi	r24, 0xEF	; 239
    41e0:	8b b9       	out	0x0b, r24	; 11
    41e2:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00004308 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    4308:	81 b1       	in	r24, 0x01	; 1
    430a:	80 68       	ori	r24, 0x80	; 128
    430c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    430e:	82 b1       	in	r24, 0x02	; 2
    4310:	8f 77       	andi	r24, 0x7F	; 127
    4312:	82 b9       	out	0x02, r24	; 2
    4314:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

000041e4 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    41e4:	88 23       	and	r24, r24
    41e6:	21 f0       	breq	.+8      	; 0x41f0 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    41e8:	82 b1       	in	r24, 0x02	; 2
    41ea:	80 68       	ori	r24, 0x80	; 128
    41ec:	82 b9       	out	0x02, r24	; 2
    41ee:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    41f0:	82 b1       	in	r24, 0x02	; 2
    41f2:	8f 77       	andi	r24, 0x7F	; 127
    41f4:	82 b9       	out	0x02, r24	; 2
    41f6:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00004460 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    4460:	82 b1       	in	r24, 0x02	; 2
    4462:	80 58       	subi	r24, 0x80	; 128
    4464:	82 b9       	out	0x02, r24	; 2
    4466:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00003534 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    3534:	84 b1       	in	r24, 0x04	; 4
    3536:	8b 7f       	andi	r24, 0xFB	; 251
    3538:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    353a:	85 b1       	in	r24, 0x05	; 5
    353c:	84 60       	ori	r24, 0x04	; 4
    353e:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    3540:	e9 e6       	ldi	r30, 0x69	; 105
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	8f 7e       	andi	r24, 0xEF	; 239
    3548:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    354a:	80 81       	ld	r24, Z
    354c:	80 62       	ori	r24, 0x20	; 32
    354e:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    3550:	8d b3       	in	r24, 0x1d	; 29
    3552:	84 60       	ori	r24, 0x04	; 4
    3554:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3556:	83 b7       	in	r24, 0x33	; 51
    3558:	81 7f       	andi	r24, 0xF1	; 241
    355a:	84 60       	ori	r24, 0x04	; 4
    355c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    355e:	83 b7       	in	r24, 0x33	; 51
    3560:	81 60       	ori	r24, 0x01	; 1
    3562:	83 bf       	out	0x33, r24	; 51
	sei();
    3564:	78 94       	sei
	sleep_cpu();
    3566:	88 95       	sleep
	sleep_disable();
    3568:	83 b7       	in	r24, 0x33	; 51
    356a:	8e 7f       	andi	r24, 0xFE	; 254
    356c:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    356e:	8d b3       	in	r24, 0x1d	; 29
    3570:	8b 7f       	andi	r24, 0xFB	; 251
    3572:	8d bb       	out	0x1d, r24	; 29
    3574:	08 95       	ret

Disassembly of section .text.__vector_3:

000041f8 <__vector_3>:
}

ISR(INT2_vect){
    41f8:	1f 92       	push	r1
    41fa:	0f 92       	push	r0
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	0f 92       	push	r0
    4200:	11 24       	eor	r1, r1
	
}
    4202:	0f 90       	pop	r0
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	0f 90       	pop	r0
    4208:	1f 90       	pop	r1
    420a:	18 95       	reti

Disassembly of section .text.rn2483_init:

00004468 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    4468:	84 b1       	in	r24, 0x04	; 4
    446a:	80 61       	ori	r24, 0x10	; 16
    446c:	84 b9       	out	0x04, r24	; 4
    446e:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00004470 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    4470:	85 b1       	in	r24, 0x05	; 5
    4472:	8f 7e       	andi	r24, 0xEF	; 239
    4474:	85 b9       	out	0x05, r24	; 5
    4476:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00004478 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    4478:	85 b1       	in	r24, 0x05	; 5
    447a:	80 61       	ori	r24, 0x10	; 16
    447c:	85 b9       	out	0x05, r24	; 5
    447e:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00004316 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    4316:	87 b1       	in	r24, 0x07	; 7
    4318:	8f 7b       	andi	r24, 0xBF	; 191
    431a:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    431c:	88 b1       	in	r24, 0x08	; 8
    431e:	8f 7b       	andi	r24, 0xBF	; 191
    4320:	88 b9       	out	0x08, r24	; 8
    4322:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000441a <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    441a:	86 b1       	in	r24, 0x06	; 6
    441c:	86 fb       	bst	r24, 6
    441e:	88 27       	eor	r24, r24
    4420:	80 f9       	bld	r24, 0
    4422:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00003eac <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    3eac:	92 e0       	ldi	r25, 0x02	; 2
    3eae:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    3eb0:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    3eb2:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    3eb4:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    3eb6:	ee e6       	ldi	r30, 0x6E	; 110
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	80 81       	ld	r24, Z
    3ebc:	82 60       	ori	r24, 0x02	; 2
    3ebe:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    3ec0:	78 94       	sei
	
	//Set callback
	_cb=cb;
    3ec2:	70 93 1c 0e 	sts	0x0E1C, r23	; 0x800e1c <_cb+0x1>
    3ec6:	60 93 1b 0e 	sts	0x0E1B, r22	; 0x800e1b <_cb>
    3eca:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

000044c0 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    44c0:	86 e0       	ldi	r24, 0x06	; 6
    44c2:	85 bd       	out	0x25, r24	; 37
    44c4:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00004506 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    4506:	15 bc       	out	0x25, r1	; 37
    4508:	08 95       	ret

Disassembly of section .text.__vector_16:

00002fc8 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    2fc8:	1f 92       	push	r1
    2fca:	0f 92       	push	r0
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	2f 93       	push	r18
    2fd4:	3f 93       	push	r19
    2fd6:	4f 93       	push	r20
    2fd8:	5f 93       	push	r21
    2fda:	6f 93       	push	r22
    2fdc:	7f 93       	push	r23
    2fde:	8f 93       	push	r24
    2fe0:	9f 93       	push	r25
    2fe2:	af 93       	push	r26
    2fe4:	bf 93       	push	r27
    2fe6:	ef 93       	push	r30
    2fe8:	ff 93       	push	r31
	_cb();
    2fea:	e0 91 1b 0e 	lds	r30, 0x0E1B	; 0x800e1b <_cb>
    2fee:	f0 91 1c 0e 	lds	r31, 0x0E1C	; 0x800e1c <_cb+0x1>
    2ff2:	09 95       	icall
}
    2ff4:	ff 91       	pop	r31
    2ff6:	ef 91       	pop	r30
    2ff8:	bf 91       	pop	r27
    2ffa:	af 91       	pop	r26
    2ffc:	9f 91       	pop	r25
    2ffe:	8f 91       	pop	r24
    3000:	7f 91       	pop	r23
    3002:	6f 91       	pop	r22
    3004:	5f 91       	pop	r21
    3006:	4f 91       	pop	r20
    3008:	3f 91       	pop	r19
    300a:	2f 91       	pop	r18
    300c:	0f 90       	pop	r0
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	0f 90       	pop	r0
    3012:	1f 90       	pop	r1
    3014:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

0000396a <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    396a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    396e:	28 e0       	ldi	r18, 0x08	; 8
    3970:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    3974:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    3978:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    397c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3980:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3984:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    3988:	ef e6       	ldi	r30, 0x6F	; 111
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	82 60       	ori	r24, 0x02	; 2
    3990:	80 83       	st	Z, r24
	sei();
    3992:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    3994:	70 93 1e 0e 	sts	0x0E1E, r23	; 0x800e1e <_cb+0x1>
    3998:	60 93 1d 0e 	sts	0x0E1D, r22	; 0x800e1d <_cb>
    399c:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000043a2 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    43a2:	e1 e8       	ldi	r30, 0x81	; 129
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	80 81       	ld	r24, Z
    43a8:	86 60       	ori	r24, 0x06	; 6
    43aa:	80 83       	st	Z, r24
    43ac:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000043ae <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    43ae:	e1 e8       	ldi	r30, 0x81	; 129
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	80 81       	ld	r24, Z
    43b4:	88 7f       	andi	r24, 0xF8	; 248
    43b6:	80 83       	st	Z, r24
    43b8:	08 95       	ret

Disassembly of section .text.__vector_13:

00003016 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    3016:	1f 92       	push	r1
    3018:	0f 92       	push	r0
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	0f 92       	push	r0
    301e:	11 24       	eor	r1, r1
    3020:	2f 93       	push	r18
    3022:	3f 93       	push	r19
    3024:	4f 93       	push	r20
    3026:	5f 93       	push	r21
    3028:	6f 93       	push	r22
    302a:	7f 93       	push	r23
    302c:	8f 93       	push	r24
    302e:	9f 93       	push	r25
    3030:	af 93       	push	r26
    3032:	bf 93       	push	r27
    3034:	ef 93       	push	r30
    3036:	ff 93       	push	r31
	_cb();
    3038:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <_cb>
    303c:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <_cb+0x1>
    3040:	09 95       	icall
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	7f 91       	pop	r23
    3050:	6f 91       	pop	r22
    3052:	5f 91       	pop	r21
    3054:	4f 91       	pop	r20
    3056:	3f 91       	pop	r19
    3058:	2f 91       	pop	r18
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	0f 90       	pop	r0
    3060:	1f 90       	pop	r1
    3062:	18 95       	reti

Disassembly of section .text.start_timer:

00004480 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    4480:	87 e0       	ldi	r24, 0x07	; 7
    4482:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    4486:	08 95       	ret

Disassembly of section .text.stop_timer:

000044c6 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    44c6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    44ca:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00003ecc <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    3ecc:	82 e0       	ldi	r24, 0x02	; 2
    3ece:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    3ed2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3ed6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    3eda:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    3ede:	9b ef       	ldi	r25, 0xFB	; 251
    3ee0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    3ee4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    3ee8:	78 94       	sei
    3eea:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00002f24 <TC2_HAL_subscribe>:
    2f24:	cf 93       	push	r28
    2f26:	dc 01       	movw	r26, r24
    2f28:	60 91 34 0e 	lds	r22, 0x0E34	; 0x800e34 <cbCounter>
    2f2c:	65 30       	cpi	r22, 0x05	; 5
    2f2e:	00 f5       	brcc	.+64     	; 0x2f70 <TC2_HAL_subscribe+0x4c>
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	15 c0       	rjmp	.+42     	; 0x2f5e <TC2_HAL_subscribe+0x3a>
    2f34:	29 2f       	mov	r18, r25
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	f9 01       	movw	r30, r18
    2f3a:	ee 0f       	add	r30, r30
    2f3c:	ff 1f       	adc	r31, r31
    2f3e:	e6 51       	subi	r30, 0x16	; 22
    2f40:	f2 4f       	sbci	r31, 0xF2	; 242
    2f42:	40 81       	ld	r20, Z
    2f44:	51 81       	ldd	r21, Z+1	; 0x01
    2f46:	45 2b       	or	r20, r21
    2f48:	49 f4       	brne	.+18     	; 0x2f5c <TC2_HAL_subscribe+0x38>
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	f9 01       	movw	r30, r18
    2f50:	e6 51       	subi	r30, 0x16	; 22
    2f52:	f2 4f       	sbci	r31, 0xF2	; 242
    2f54:	b1 83       	std	Z+1, r27	; 0x01
    2f56:	a0 83       	st	Z, r26
    2f58:	c9 2f       	mov	r28, r25
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <TC2_HAL_subscribe+0x40>
    2f5c:	9f 5f       	subi	r25, 0xFF	; 255
    2f5e:	95 30       	cpi	r25, 0x05	; 5
    2f60:	48 f3       	brcs	.-46     	; 0x2f34 <TC2_HAL_subscribe+0x10>
    2f62:	cf ef       	ldi	r28, 0xFF	; 255
    2f64:	6f 5f       	subi	r22, 0xFF	; 255
    2f66:	60 93 34 0e 	sts	0x0E34, r22	; 0x800e34 <cbCounter>
    2f6a:	0e 94 40 22 	call	0x4480	; 0x4480 <start_timer>
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <TC2_HAL_subscribe+0x4e>
    2f70:	cf ef       	ldi	r28, 0xFF	; 255
    2f72:	8c 2f       	mov	r24, r28
    2f74:	cf 91       	pop	r28
    2f76:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000037b0 <TC2_HAL_cancel>:
    37b0:	08 2e       	mov	r0, r24
    37b2:	00 0c       	add	r0, r0
    37b4:	99 0b       	sbc	r25, r25
    37b6:	fc 01       	movw	r30, r24
    37b8:	ee 0f       	add	r30, r30
    37ba:	ff 1f       	adc	r31, r31
    37bc:	e6 51       	subi	r30, 0x16	; 22
    37be:	f2 4f       	sbci	r31, 0xF2	; 242
    37c0:	20 81       	ld	r18, Z
    37c2:	31 81       	ldd	r19, Z+1	; 0x01
    37c4:	23 2b       	or	r18, r19
    37c6:	81 f0       	breq	.+32     	; 0x37e8 <TC2_HAL_cancel+0x38>
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	fc 01       	movw	r30, r24
    37ce:	e6 51       	subi	r30, 0x16	; 22
    37d0:	f2 4f       	sbci	r31, 0xF2	; 242
    37d2:	11 82       	std	Z+1, r1	; 0x01
    37d4:	10 82       	st	Z, r1
    37d6:	80 91 34 0e 	lds	r24, 0x0E34	; 0x800e34 <cbCounter>
    37da:	81 50       	subi	r24, 0x01	; 1
    37dc:	80 93 34 0e 	sts	0x0E34, r24	; 0x800e34 <cbCounter>
    37e0:	81 11       	cpse	r24, r1
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <TC2_HAL_cancel+0x38>
    37e4:	0e 94 63 22 	call	0x44c6	; 0x44c6 <stop_timer>
    37e8:	08 95       	ret

Disassembly of section .text.__vector_9:

00002540 <__vector_9>:
    2540:	1f 92       	push	r1
    2542:	0f 92       	push	r0
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	0f 92       	push	r0
    2548:	11 24       	eor	r1, r1
    254a:	2f 93       	push	r18
    254c:	3f 93       	push	r19
    254e:	4f 93       	push	r20
    2550:	5f 93       	push	r21
    2552:	6f 93       	push	r22
    2554:	7f 93       	push	r23
    2556:	8f 93       	push	r24
    2558:	9f 93       	push	r25
    255a:	af 93       	push	r26
    255c:	bf 93       	push	r27
    255e:	cf 93       	push	r28
    2560:	ef 93       	push	r30
    2562:	ff 93       	push	r31
    2564:	90 91 33 0e 	lds	r25, 0x0E33	; 0x800e33 <cnt>
    2568:	9f 5f       	subi	r25, 0xFF	; 255
    256a:	90 93 33 0e 	sts	0x0E33, r25	; 0x800e33 <cnt>
    256e:	89 e0       	ldi	r24, 0x09	; 9
    2570:	98 9f       	mul	r25, r24
    2572:	21 2d       	mov	r18, r1
    2574:	11 24       	eor	r1, r1
    2576:	89 2f       	mov	r24, r25
    2578:	82 1b       	sub	r24, r18
    257a:	86 95       	lsr	r24
    257c:	82 0f       	add	r24, r18
    257e:	82 95       	swap	r24
    2580:	8f 70       	andi	r24, 0x0F	; 15
    2582:	2f e1       	ldi	r18, 0x1F	; 31
    2584:	82 9f       	mul	r24, r18
    2586:	90 19       	sub	r25, r0
    2588:	11 24       	eor	r1, r1
    258a:	91 11       	cpse	r25, r1
    258c:	13 c0       	rjmp	.+38     	; 0x25b4 <__vector_9+0x74>
    258e:	10 92 33 0e 	sts	0x0E33, r1	; 0x800e33 <cnt>
    2592:	c0 e0       	ldi	r28, 0x00	; 0
    2594:	0d c0       	rjmp	.+26     	; 0x25b0 <__vector_9+0x70>
    2596:	ec 2f       	mov	r30, r28
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	e6 51       	subi	r30, 0x16	; 22
    25a0:	f2 4f       	sbci	r31, 0xF2	; 242
    25a2:	01 90       	ld	r0, Z+
    25a4:	f0 81       	ld	r31, Z
    25a6:	e0 2d       	mov	r30, r0
    25a8:	30 97       	sbiw	r30, 0x00	; 0
    25aa:	09 f0       	breq	.+2      	; 0x25ae <__vector_9+0x6e>
    25ac:	09 95       	icall
    25ae:	cf 5f       	subi	r28, 0xFF	; 255
    25b0:	c5 30       	cpi	r28, 0x05	; 5
    25b2:	88 f3       	brcs	.-30     	; 0x2596 <__vector_9+0x56>
    25b4:	ff 91       	pop	r31
    25b6:	ef 91       	pop	r30
    25b8:	cf 91       	pop	r28
    25ba:	bf 91       	pop	r27
    25bc:	af 91       	pop	r26
    25be:	9f 91       	pop	r25
    25c0:	8f 91       	pop	r24
    25c2:	7f 91       	pop	r23
    25c4:	6f 91       	pop	r22
    25c6:	5f 91       	pop	r21
    25c8:	4f 91       	pop	r20
    25ca:	3f 91       	pop	r19
    25cc:	2f 91       	pop	r18
    25ce:	0f 90       	pop	r0
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	0f 90       	pop	r0
    25d4:	1f 90       	pop	r1
    25d6:	18 95       	reti

Disassembly of section .text.start_and_write_data:

000030b2 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    30b2:	cf 92       	push	r12
    30b4:	df 92       	push	r13
    30b6:	ef 92       	push	r14
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	6a 01       	movw	r12, r20
    30be:	e6 2e       	mov	r14, r22
    30c0:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    30c2:	60 e0       	ldi	r22, 0x00	; 0
    30c4:	0e 94 3a 19 	call	0x3274	; 0x3274 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    30c8:	81 11       	cpse	r24, r1
    30ca:	13 c0       	rjmp	.+38     	; 0x30f2 <start_and_write_data+0x40>
    30cc:	c0 e0       	ldi	r28, 0x00	; 0
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    30d0:	ae 2d       	mov	r26, r14
    30d2:	c6 01       	movw	r24, r12
    30d4:	8c 0f       	add	r24, r28
    30d6:	91 1d       	adc	r25, r1
    30d8:	a1 1d       	adc	r26, r1
    30da:	fc 01       	movw	r30, r24
    30dc:	84 91       	lpm	r24, Z
    30de:	a7 fd       	sbrc	r26, 7
    30e0:	80 81       	ld	r24, Z
    30e2:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    30e6:	81 11       	cpse	r24, r1
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    30ea:	cf 5f       	subi	r28, 0xFF	; 255
    30ec:	cd 17       	cp	r28, r29
    30ee:	80 f3       	brcs	.-32     	; 0x30d0 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    30f0:	80 e0       	ldi	r24, 0x00	; 0
}
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	ef 90       	pop	r14
    30f8:	df 90       	pop	r13
    30fa:	cf 90       	pop	r12
    30fc:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002dc2 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	8c 01       	movw	r16, r24
    2dd0:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2dd2:	c0 e0       	ldi	r28, 0x00	; 0
    2dd4:	08 c0       	rjmp	.+16     	; 0x2de6 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2dd6:	78 01       	movw	r14, r16
    2dd8:	ec 0e       	add	r14, r28
    2dda:	f1 1c       	adc	r15, r1
    2ddc:	0e 94 06 21 	call	0x420c	; 0x420c <TWI_HAL_read_byte_ack>
    2de0:	f7 01       	movw	r30, r14
    2de2:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2de4:	cf 5f       	subi	r28, 0xFF	; 255
    2de6:	2c 2f       	mov	r18, r28
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	8d 2f       	mov	r24, r29
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	28 17       	cp	r18, r24
    2df2:	39 07       	cpc	r19, r25
    2df4:	84 f3       	brlt	.-32     	; 0x2dd6 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2df6:	8d 2f       	mov	r24, r29
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	e8 01       	movw	r28, r16
    2dfe:	c8 0f       	add	r28, r24
    2e00:	d9 1f       	adc	r29, r25
    2e02:	0e 94 10 21 	call	0x4220	; 0x4220 <TWI_HAL_read_byte_nack>
    2e06:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2e08:	0e 94 50 21 	call	0x42a0	; 0x42a0 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

000044cc <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    44cc:	0e 94 59 18 	call	0x30b2	; 0x30b2 <start_and_write_data>
}
    44d0:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00004290 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    4290:	0e 94 59 18 	call	0x30b2	; 0x30b2 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    4294:	81 11       	cpse	r24, r1
    4296:	03 c0       	rjmp	.+6      	; 0x429e <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    4298:	0e 94 50 21 	call	0x42a0	; 0x42a0 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    429c:	80 e0       	ldi	r24, 0x00	; 0
}
    429e:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003d52 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	eb 01       	movw	r28, r22
    3d5a:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3d5c:	61 e0       	ldi	r22, 0x01	; 1
    3d5e:	0e 94 3a 19 	call	0x3274	; 0x3274 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3d62:	81 11       	cpse	r24, r1
    3d64:	04 c0       	rjmp	.+8      	; 0x3d6e <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    3d66:	61 2f       	mov	r22, r17
    3d68:	ce 01       	movw	r24, r28
    3d6a:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003dbe <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3dbe:	1f 93       	push	r17
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	eb 01       	movw	r28, r22
    3dc6:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3dc8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3dcc:	81 11       	cpse	r24, r1
    3dce:	04 c0       	rjmp	.+8      	; 0x3dd8 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    3dd0:	61 2f       	mov	r22, r17
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <read_and_stop>
	
}
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	1f 91       	pop	r17
    3dde:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00004248 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    4248:	80 e2       	ldi	r24, 0x20	; 32
    424a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    424e:	e9 eb       	ldi	r30, 0xB9	; 185
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	80 81       	ld	r24, Z
    4254:	8c 7f       	andi	r24, 0xFC	; 252
    4256:	80 83       	st	Z, r24
    4258:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00003274 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    327c:	84 ea       	ldi	r24, 0xA4	; 164
    327e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3282:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3286:	99 23       	and	r25, r25
    3288:	e4 f7       	brge	.-8      	; 0x3282 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    328a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    328e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    3290:	88 30       	cpi	r24, 0x08	; 8
    3292:	99 f4       	brne	.+38     	; 0x32ba <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    3294:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3298:	84 e8       	ldi	r24, 0x84	; 132
    329a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    329e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    32a2:	88 23       	and	r24, r24
    32a4:	e4 f7       	brge	.-8      	; 0x329e <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    32a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    32aa:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    32ac:	88 31       	cpi	r24, 0x18	; 24
    32ae:	21 f0       	breq	.+8      	; 0x32b8 <TWI_HAL_start+0x44>
    32b0:	80 34       	cpi	r24, 0x40	; 64
    32b2:	19 f4       	brne	.+6      	; 0x32ba <TWI_HAL_start+0x46>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	08 95       	ret
    32b8:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    32ba:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003576 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	28 2f       	mov	r18, r24
    357e:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3580:	84 ea       	ldi	r24, 0xA4	; 164
    3582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3586:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    358a:	99 23       	and	r25, r25
    358c:	e4 f7       	brge	.-8      	; 0x3586 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    358e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3592:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    3594:	80 31       	cpi	r24, 0x10	; 16
    3596:	79 f4       	brne	.+30     	; 0x35b6 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    3598:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    359c:	84 e8       	ldi	r24, 0x84	; 132
    359e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    35a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35a6:	88 23       	and	r24, r24
    35a8:	e4 f7       	brge	.-8      	; 0x35a2 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    35aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35ae:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    35b0:	80 34       	cpi	r24, 0x40	; 64
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <TWI_HAL_repeated_start+0x40>
    35b4:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    35b6:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003eec <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3eec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3ef0:	84 e8       	ldi	r24, 0x84	; 132
    3ef2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3ef6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3efa:	88 23       	and	r24, r24
    3efc:	e4 f7       	brge	.-8      	; 0x3ef6 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3efe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3f02:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3f04:	88 32       	cpi	r24, 0x28	; 40
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <TWI_HAL_write_byte+0x1e>
    3f08:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3f0a:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

0000420c <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    420c:	84 ec       	ldi	r24, 0xC4	; 196
    420e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    4212:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4216:	88 23       	and	r24, r24
    4218:	e4 f7       	brge	.-8      	; 0x4212 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    421a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    421e:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00004220 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    4220:	84 e8       	ldi	r24, 0x84	; 132
    4222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    4226:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    422a:	88 23       	and	r24, r24
    422c:	e4 f7       	brge	.-8      	; 0x4226 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    422e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4232:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000042a0 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    42a0:	84 e9       	ldi	r24, 0x94	; 148
    42a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    42a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    42aa:	84 fd       	sbrc	r24, 4
    42ac:	fc cf       	rjmp	.-8      	; 0x42a6 <TWI_HAL_stop+0x6>
}
    42ae:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003c50 <copy_buffer>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    3c50:	bc 01       	movw	r22, r24
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	09 c0       	rjmp	.+18     	; 0x3c68 <copy_buffer+0x18>
    3c56:	fb 01       	movw	r30, r22
    3c58:	e9 0f       	add	r30, r25
    3c5a:	f1 1d       	adc	r31, r1
    3c5c:	da 01       	movw	r26, r20
    3c5e:	a0 50       	subi	r26, 0x00	; 0
    3c60:	bf 4f       	sbci	r27, 0xFF	; 255
    3c62:	2c 91       	ld	r18, X
    3c64:	20 83       	st	Z, r18
    3c66:	9f 5f       	subi	r25, 0xFF	; 255
    3c68:	49 2f       	mov	r20, r25
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	22 50       	subi	r18, 0x02	; 2
    3c74:	31 09       	sbc	r19, r1
    3c76:	42 17       	cp	r20, r18
    3c78:	53 07       	cpc	r21, r19
    3c7a:	6c f3       	brlt	.-38     	; 0x3c56 <copy_buffer+0x6>
    3c7c:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003738 <uart0_hal_init>:
    3738:	e1 ec       	ldi	r30, 0xC1	; 193
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	80 81       	ld	r24, Z
    373e:	80 61       	ori	r24, 0x10	; 16
    3740:	80 83       	st	Z, r24
    3742:	80 81       	ld	r24, Z
    3744:	88 60       	ori	r24, 0x08	; 8
    3746:	80 83       	st	Z, r24
    3748:	80 81       	ld	r24, Z
    374a:	80 68       	ori	r24, 0x80	; 128
    374c:	80 83       	st	Z, r24
    374e:	80 81       	ld	r24, Z
    3750:	80 64       	ori	r24, 0x40	; 64
    3752:	80 83       	st	Z, r24
    3754:	e0 ec       	ldi	r30, 0xC0	; 192
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	82 60       	ori	r24, 0x02	; 2
    375c:	80 83       	st	Z, r24
    375e:	86 e0       	ldi	r24, 0x06	; 6
    3760:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3764:	80 e1       	ldi	r24, 0x10	; 16
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    376c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3770:	78 94       	sei
    3772:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000399e <uart0_hal_send_message>:
    399e:	dc 01       	movw	r26, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0b c0       	rjmp	.+22     	; 0x39ba <uart0_hal_send_message+0x1c>
    39a4:	29 2f       	mov	r18, r25
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	fd 01       	movw	r30, r26
    39aa:	e2 0f       	add	r30, r18
    39ac:	f3 1f       	adc	r31, r19
    39ae:	40 81       	ld	r20, Z
    39b0:	f9 01       	movw	r30, r18
    39b2:	ec 59       	subi	r30, 0x9C	; 156
    39b4:	fe 4f       	sbci	r31, 0xFE	; 254
    39b6:	40 83       	st	Z, r20
    39b8:	9f 5f       	subi	r25, 0xFF	; 255
    39ba:	96 17       	cp	r25, r22
    39bc:	98 f3       	brcs	.-26     	; 0x39a4 <uart0_hal_send_message+0x6>
    39be:	60 93 38 0e 	sts	0x0E38, r22	; 0x800e38 <tx_buffer_data_len>
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <tx_buffer_cursor>
    39c8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    39cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    39d0:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00004324 <uart0_hal_message_ready>:

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    4324:	90 91 35 0e 	lds	r25, 0x0E35	; 0x800e35 <rx_buffer_has_message>
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	91 11       	cpse	r25, r1
    432c:	01 c0       	rjmp	.+2      	; 0x4330 <uart0_hal_message_ready+0xc>
    432e:	80 e0       	ldi	r24, 0x00	; 0
}
    4330:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00004424 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4424:	10 92 35 0e 	sts	0x0E35, r1	; 0x800e35 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4428:	10 92 36 0e 	sts	0x0E36, r1	; 0x800e36 <rx_buffer_data_len>
    442c:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003d02 <uart0_hal_read_message_as_str>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    3d02:	0f 93       	push	r16
    3d04:	1f 93       	push	r17
    3d06:	cf 93       	push	r28
    3d08:	8c 01       	movw	r16, r24
    3d0a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <copy_buffer>
    3d0e:	c0 91 36 0e 	lds	r28, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    3d12:	c2 50       	subi	r28, 0x02	; 2
    3d14:	f8 01       	movw	r30, r16
    3d16:	ec 0f       	add	r30, r28
    3d18:	f1 1d       	adc	r31, r1
    3d1a:	10 82       	st	Z, r1
    3d1c:	0e 94 12 22 	call	0x4424	; 0x4424 <uart0_hal_clear_rx_buffer>
    3d20:	8c 2f       	mov	r24, r28
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00003394 <uart0_hal_send_break>:
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	1f 92       	push	r1
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	9a b1       	in	r25, 0x0a	; 10
    33a0:	92 60       	ori	r25, 0x02	; 2
    33a2:	9a b9       	out	0x0a, r25	; 10
    33a4:	e1 ec       	ldi	r30, 0xC1	; 193
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	90 81       	ld	r25, Z
    33aa:	97 7f       	andi	r25, 0xF7	; 247
    33ac:	90 83       	st	Z, r25
    33ae:	9b b1       	in	r25, 0x0b	; 11
    33b0:	9d 7f       	andi	r25, 0xFD	; 253
    33b2:	9b b9       	out	0x0b, r25	; 11
    33b4:	af e9       	ldi	r26, 0x9F	; 159
    33b6:	bf e0       	ldi	r27, 0x0F	; 15
    33b8:	11 97       	sbiw	r26, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <uart0_hal_send_break+0x24>
    33bc:	00 c0       	rjmp	.+0      	; 0x33be <uart0_hal_send_break+0x2a>
    33be:	00 00       	nop
    33c0:	90 81       	ld	r25, Z
    33c2:	98 60       	ori	r25, 0x08	; 8
    33c4:	90 83       	st	Z, r25
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	ce 01       	movw	r24, r28
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	0e 94 cf 1c 	call	0x399e	; 0x399e <uart0_hal_send_message>
    33d2:	0f 90       	pop	r0
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	08 95       	ret

Disassembly of section .text.__vector_22:

00003196 <__vector_22>:
    3196:	1f 92       	push	r1
    3198:	0f 92       	push	r0
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	0f 92       	push	r0
    319e:	11 24       	eor	r1, r1
    31a0:	8f 93       	push	r24
    31a2:	ef 93       	push	r30
    31a4:	ff 93       	push	r31
    31a6:	e0 91 37 0e 	lds	r30, 0x0E37	; 0x800e37 <tx_buffer_cursor>
    31aa:	80 91 38 0e 	lds	r24, 0x0E38	; 0x800e38 <tx_buffer_data_len>
    31ae:	e8 17       	cp	r30, r24
    31b0:	58 f4       	brcc	.+22     	; 0x31c8 <__vector_22+0x32>
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	8e 0f       	add	r24, r30
    31b6:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <tx_buffer_cursor>
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	ec 59       	subi	r30, 0x9C	; 156
    31be:	fe 4f       	sbci	r31, 0xFE	; 254
    31c0:	80 81       	ld	r24, Z
    31c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    31c6:	04 c0       	rjmp	.+8      	; 0x31d0 <__vector_22+0x3a>
    31c8:	10 92 37 0e 	sts	0x0E37, r1	; 0x800e37 <tx_buffer_cursor>
    31cc:	10 92 38 0e 	sts	0x0E38, r1	; 0x800e38 <tx_buffer_data_len>
    31d0:	ff 91       	pop	r31
    31d2:	ef 91       	pop	r30
    31d4:	8f 91       	pop	r24
    31d6:	0f 90       	pop	r0
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	0f 90       	pop	r0
    31dc:	1f 90       	pop	r1
    31de:	18 95       	reti

Disassembly of section .text.__vector_20:

00002a1c <__vector_20>:
    2a1c:	1f 92       	push	r1
    2a1e:	0f 92       	push	r0
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	0f 92       	push	r0
    2a24:	11 24       	eor	r1, r1
    2a26:	2f 93       	push	r18
    2a28:	8f 93       	push	r24
    2a2a:	9f 93       	push	r25
    2a2c:	ef 93       	push	r30
    2a2e:	ff 93       	push	r31
    2a30:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <rx_buffer_has_message>
    2a34:	81 11       	cpse	r24, r1
    2a36:	0e c0       	rjmp	.+28     	; 0x2a54 <__vector_20+0x38>
    2a38:	e0 91 36 0e 	lds	r30, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    2a3c:	e4 36       	cpi	r30, 0x64	; 100
    2a3e:	50 f4       	brcc	.+20     	; 0x2a54 <__vector_20+0x38>
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	8e 0f       	add	r24, r30
    2a44:	80 93 36 0e 	sts	0x0E36, r24	; 0x800e36 <rx_buffer_data_len>
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a4e:	e0 50       	subi	r30, 0x00	; 0
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 83       	st	Z, r24
    2a54:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    2a58:	83 30       	cpi	r24, 0x03	; 3
    2a5a:	80 f0       	brcs	.+32     	; 0x2a7c <__vector_20+0x60>
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	fc 01       	movw	r30, r24
    2a60:	e1 50       	subi	r30, 0x01	; 1
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	20 81       	ld	r18, Z
    2a66:	2a 30       	cpi	r18, 0x0A	; 10
    2a68:	49 f4       	brne	.+18     	; 0x2a7c <__vector_20+0x60>
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e2 50       	subi	r30, 0x02	; 2
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	8d 30       	cpi	r24, 0x0D	; 13
    2a74:	19 f4       	brne	.+6      	; 0x2a7c <__vector_20+0x60>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <rx_buffer_has_message>
    2a7c:	ff 91       	pop	r31
    2a7e:	ef 91       	pop	r30
    2a80:	9f 91       	pop	r25
    2a82:	8f 91       	pop	r24
    2a84:	2f 91       	pop	r18
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00003774 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    3774:	e9 ec       	ldi	r30, 0xC9	; 201
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	80 61       	ori	r24, 0x10	; 16
    377c:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    377e:	80 81       	ld	r24, Z
    3780:	88 60       	ori	r24, 0x08	; 8
    3782:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    3784:	80 81       	ld	r24, Z
    3786:	80 68       	ori	r24, 0x80	; 128
    3788:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    378a:	80 81       	ld	r24, Z
    378c:	80 64       	ori	r24, 0x40	; 64
    378e:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    3790:	e8 ec       	ldi	r30, 0xC8	; 200
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	82 60       	ori	r24, 0x02	; 2
    3798:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    379a:	86 e0       	ldi	r24, 0x06	; 6
    379c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    37a0:	80 e1       	ldi	r24, 0x10	; 16
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    37a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    37ac:	78 94       	sei
    37ae:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002796 <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    2796:	6f 92       	push	r6
    2798:	7f 92       	push	r7
    279a:	8f 92       	push	r8
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	3b 01       	movw	r6, r22
    27a4:	88 2e       	mov	r8, r24
    27a6:	80 91 3c 0e 	lds	r24, 0x0E3C	; 0x800e3c <tx_buffer_data_len>
    27aa:	81 11       	cpse	r24, r1
    27ac:	fc cf       	rjmp	.-8      	; 0x27a6 <uart1_hal_send_string+0x10>
    27ae:	88 2d       	mov	r24, r8
    27b0:	b3 01       	movw	r22, r6
    27b2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    27b6:	bc 01       	movw	r22, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	12 c0       	rjmp	.+36     	; 0x27e0 <uart1_hal_send_string+0x4a>
    27bc:	29 2f       	mov	r18, r25
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	e8 2c       	mov	r14, r8
    27c2:	63 01       	movw	r12, r6
    27c4:	c4 0e       	add	r12, r20
    27c6:	d5 1e       	adc	r13, r21
    27c8:	e1 1c       	adc	r14, r1
    27ca:	57 fd       	sbrc	r21, 7
    27cc:	ea 94       	dec	r14
    27ce:	f6 01       	movw	r30, r12
    27d0:	44 91       	lpm	r20, Z
    27d2:	e7 fc       	sbrc	r14, 7
    27d4:	40 81       	ld	r20, Z
    27d6:	f9 01       	movw	r30, r18
    27d8:	ee 53       	subi	r30, 0x3E	; 62
    27da:	f4 4f       	sbci	r31, 0xF4	; 244
    27dc:	40 83       	st	Z, r20
    27de:	9f 5f       	subi	r25, 0xFF	; 255
    27e0:	49 2f       	mov	r20, r25
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	46 17       	cp	r20, r22
    27e6:	57 07       	cpc	r21, r23
    27e8:	48 f3       	brcs	.-46     	; 0x27bc <uart1_hal_send_string+0x26>
    27ea:	fb 01       	movw	r30, r22
    27ec:	ee 53       	subi	r30, 0x3E	; 62
    27ee:	f4 4f       	sbci	r31, 0xF4	; 244
    27f0:	8d e0       	ldi	r24, 0x0D	; 13
    27f2:	80 83       	st	Z, r24
    27f4:	fb 01       	movw	r30, r22
    27f6:	ed 53       	subi	r30, 0x3D	; 61
    27f8:	f4 4f       	sbci	r31, 0xF4	; 244
    27fa:	8a e0       	ldi	r24, 0x0A	; 10
    27fc:	80 83       	st	Z, r24
    27fe:	6e 5f       	subi	r22, 0xFE	; 254
    2800:	60 93 3c 0e 	sts	0x0E3C, r22	; 0x800e3c <tx_buffer_data_len>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <tx_buffer_cursor>
    280a:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <tx_buffer>
    280e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2812:	ef 90       	pop	r14
    2814:	df 90       	pop	r13
    2816:	cf 90       	pop	r12
    2818:	8f 90       	pop	r8
    281a:	7f 90       	pop	r7
    281c:	6f 90       	pop	r6
    281e:	08 95       	ret

Disassembly of section .text.__vector_30:

000031e0 <__vector_30>:
    31e0:	1f 92       	push	r1
    31e2:	0f 92       	push	r0
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	0f 92       	push	r0
    31e8:	11 24       	eor	r1, r1
    31ea:	8f 93       	push	r24
    31ec:	ef 93       	push	r30
    31ee:	ff 93       	push	r31
    31f0:	e0 91 3b 0e 	lds	r30, 0x0E3B	; 0x800e3b <tx_buffer_cursor>
    31f4:	80 91 3c 0e 	lds	r24, 0x0E3C	; 0x800e3c <tx_buffer_data_len>
    31f8:	e8 17       	cp	r30, r24
    31fa:	58 f4       	brcc	.+22     	; 0x3212 <__vector_30+0x32>
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	8e 0f       	add	r24, r30
    3200:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <tx_buffer_cursor>
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	ee 53       	subi	r30, 0x3E	; 62
    3208:	f4 4f       	sbci	r31, 0xF4	; 244
    320a:	80 81       	ld	r24, Z
    320c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3210:	04 c0       	rjmp	.+8      	; 0x321a <__vector_30+0x3a>
    3212:	10 92 3b 0e 	sts	0x0E3B, r1	; 0x800e3b <tx_buffer_cursor>
    3216:	10 92 3c 0e 	sts	0x0E3C, r1	; 0x800e3c <tx_buffer_data_len>
    321a:	ff 91       	pop	r31
    321c:	ef 91       	pop	r30
    321e:	8f 91       	pop	r24
    3220:	0f 90       	pop	r0
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	0f 90       	pop	r0
    3226:	1f 90       	pop	r1
    3228:	18 95       	reti

Disassembly of section .text.__vector_28:

00002a90 <__vector_28>:
    2a90:	1f 92       	push	r1
    2a92:	0f 92       	push	r0
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	0f 92       	push	r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	2f 93       	push	r18
    2a9c:	8f 93       	push	r24
    2a9e:	9f 93       	push	r25
    2aa0:	ef 93       	push	r30
    2aa2:	ff 93       	push	r31
    2aa4:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <rx_buffer_has_message>
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	0e c0       	rjmp	.+28     	; 0x2ac8 <__vector_28+0x38>
    2aac:	e0 91 3a 0e 	lds	r30, 0x0E3A	; 0x800e3a <rx_buffer_data_len>
    2ab0:	e6 39       	cpi	r30, 0x96	; 150
    2ab2:	50 f4       	brcc	.+20     	; 0x2ac8 <__vector_28+0x38>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	8e 0f       	add	r24, r30
    2ab8:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <rx_buffer_data_len>
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2ac2:	e2 51       	subi	r30, 0x12	; 18
    2ac4:	f3 4f       	sbci	r31, 0xF3	; 243
    2ac6:	80 83       	st	Z, r24
    2ac8:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <rx_buffer_data_len>
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	fc 01       	movw	r30, r24
    2ad0:	e3 51       	subi	r30, 0x13	; 19
    2ad2:	f3 4f       	sbci	r31, 0xF3	; 243
    2ad4:	20 81       	ld	r18, Z
    2ad6:	2a 30       	cpi	r18, 0x0A	; 10
    2ad8:	49 f4       	brne	.+18     	; 0x2aec <__vector_28+0x5c>
    2ada:	fc 01       	movw	r30, r24
    2adc:	e4 51       	subi	r30, 0x14	; 20
    2ade:	f3 4f       	sbci	r31, 0xF3	; 243
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8d 30       	cpi	r24, 0x0D	; 13
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <__vector_28+0x5c>
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <rx_buffer_has_message>
    2aec:	ff 91       	pop	r31
    2aee:	ef 91       	pop	r30
    2af0:	9f 91       	pop	r25
    2af2:	8f 91       	pop	r24
    2af4:	2f 91       	pop	r18
    2af6:	0f 90       	pop	r0
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	0f 90       	pop	r0
    2afc:	1f 90       	pop	r1
    2afe:	18 95       	reti

Disassembly of section .text.main:

000040dc <main>:
	while(1)
    {
		if(0){
			CONF_enter();
		}else{
			MAINPG_start();
    40dc:	0e 94 a4 05 	call	0xb48	; 0xb48 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    40e0:	2f ef       	ldi	r18, 0xFF	; 255
    40e2:	81 e1       	ldi	r24, 0x11	; 17
    40e4:	9a e7       	ldi	r25, 0x7A	; 122
    40e6:	21 50       	subi	r18, 0x01	; 1
    40e8:	80 40       	sbci	r24, 0x00	; 0
    40ea:	90 40       	sbci	r25, 0x00	; 0
    40ec:	e1 f7       	brne	.-8      	; 0x40e6 <main+0xa>
    40ee:	00 c0       	rjmp	.+0      	; 0x40f0 <main+0x14>
    40f0:	00 00       	nop
    40f2:	f4 cf       	rjmp	.-24     	; 0x40dc <main>

Disassembly of section .text.calc_ppm_methane:

000025d8 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    25d8:	8f 92       	push	r8
    25da:	9f 92       	push	r9
    25dc:	af 92       	push	r10
    25de:	bf 92       	push	r11
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    25e8:	bc 01       	movw	r22, r24
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 95 14 	call	0x292a	; 0x292a <__floatunsisf>
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	59 e3       	ldi	r21, 0x39	; 57
    25fa:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__mulsf3>
    25fe:	80 90 07 0e 	lds	r8, 0x0E07	; 0x800e07 <Vc>
    2602:	90 90 08 0e 	lds	r9, 0x0E08	; 0x800e08 <Vc+0x1>
    2606:	a0 90 09 0e 	lds	r10, 0x0E09	; 0x800e09 <Vc+0x2>
    260a:	b0 90 0a 0e 	lds	r11, 0x0E0A	; 0x800e0a <Vc+0x3>
    260e:	a5 01       	movw	r20, r10
    2610:	94 01       	movw	r18, r8
    2612:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__mulsf3>
    2616:	6b 01       	movw	r12, r22
    2618:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    261a:	9b 01       	movw	r18, r22
    261c:	ac 01       	movw	r20, r24
    261e:	c5 01       	movw	r24, r10
    2620:	b4 01       	movw	r22, r8
    2622:	0e 94 a7 21 	call	0x434e	; 0x434e <__subsf3>
    2626:	a7 01       	movw	r20, r14
    2628:	96 01       	movw	r18, r12
    262a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <__divsf3>
    262e:	20 91 03 0e 	lds	r18, 0x0E03	; 0x800e03 <RRL>
    2632:	30 91 04 0e 	lds	r19, 0x0E04	; 0x800e04 <RRL+0x1>
    2636:	40 91 05 0e 	lds	r20, 0x0E05	; 0x800e05 <RRL+0x2>
    263a:	50 91 06 0e 	lds	r21, 0x0E06	; 0x800e06 <RRL+0x3>
    263e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    2642:	20 91 ff 0d 	lds	r18, 0x0DFF	; 0x800dff <PPM_factor>
    2646:	30 91 00 0e 	lds	r19, 0x0E00	; 0x800e00 <PPM_factor+0x1>
    264a:	40 91 01 0e 	lds	r20, 0x0E01	; 0x800e01 <PPM_factor+0x2>
    264e:	50 91 02 0e 	lds	r21, 0x0E02	; 0x800e02 <PPM_factor+0x3>
    2652:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__mulsf3>
    2656:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__fixunssfsi>
	return PPM;
}
    265a:	cb 01       	movw	r24, r22
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	df 90       	pop	r13
    2662:	cf 90       	pop	r12
    2664:	bf 90       	pop	r11
    2666:	af 90       	pop	r10
    2668:	9f 90       	pop	r9
    266a:	8f 90       	pop	r8
    266c:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

000040f4 <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    40f4:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <cntPowerUpTime>
    40f8:	8f 5f       	subi	r24, 0xFF	; 255
    40fa:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    40fe:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <_powerUpTime>
    4102:	89 17       	cp	r24, r25
    4104:	10 f0       	brcs	.+4      	; 0x410a <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    4106:	0e 94 83 22 	call	0x4506	; 0x4506 <TC0_HAL_stop>
    410a:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00002c42 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    2c42:	cf 93       	push	r28
	_data=data;
    2c44:	50 93 22 0e 	sts	0x0E22, r21	; 0x800e22 <_data+0x1>
    2c48:	40 93 21 0e 	sts	0x0E21, r20	; 0x800e21 <_data>
	_nSamples=nSamples;
    2c4c:	70 93 24 0e 	sts	0x0E24, r23	; 0x800e24 <_nSamples+0x1>
    2c50:	60 93 23 0e 	sts	0x0E23, r22	; 0x800e23 <_nSamples>
	cntSamples=0;
    2c54:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <cntSamples+0x1>
    2c58:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    2c5c:	6d ee       	ldi	r22, 0xED	; 237
    2c5e:	79 e1       	ldi	r23, 0x19	; 25
    2c60:	0e 94 56 1f 	call	0x3eac	; 0x3eac <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	0e 94 ca 20 	call	0x4194	; 0x4194 <PM_HAL_adc_power>
    2c6a:	2f ef       	ldi	r18, 0xFF	; 255
    2c6c:	83 ec       	ldi	r24, 0xC3	; 195
    2c6e:	99 e0       	ldi	r25, 0x09	; 9
    2c70:	21 50       	subi	r18, 0x01	; 1
    2c72:	80 40       	sbci	r24, 0x00	; 0
    2c74:	90 40       	sbci	r25, 0x00	; 0
    2c76:	e1 f7       	brne	.-8      	; 0x2c70 <ADC_init_sampling+0x2e>
    2c78:	00 c0       	rjmp	.+0      	; 0x2c7a <ADC_init_sampling+0x38>
    2c7a:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	8d e4       	ldi	r24, 0x4D	; 77
    2c80:	0e 94 3a 19 	call	0x3274	; 0x3274 <TWI_HAL_start>
    2c84:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    2c86:	0e 94 50 21 	call	0x42a0	; 0x42a0 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    2c8a:	cc 23       	and	r28, r28
    2c8c:	51 f0       	breq	.+20     	; 0x2ca2 <ADC_init_sampling+0x60>
		_data=NULL;
    2c8e:	10 92 22 0e 	sts	0x0E22, r1	; 0x800e22 <_data+0x1>
    2c92:	10 92 21 0e 	sts	0x0E21, r1	; 0x800e21 <_data>
		_nSamples=0;
    2c96:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <_nSamples+0x1>
    2c9a:	10 92 23 0e 	sts	0x0E23, r1	; 0x800e23 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	01 c0       	rjmp	.+2      	; 0x2ca4 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
}
    2ca4:	cf 91       	pop	r28
    2ca6:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00004234 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    4234:	0e 94 83 22 	call	0x4506	; 0x4506 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	0e 94 ca 20 	call	0x4194	; 0x4194 <PM_HAL_adc_power>
	_data=NULL;
    423e:	10 92 22 0e 	sts	0x0E22, r1	; 0x800e22 <_data+0x1>
    4242:	10 92 21 0e 	sts	0x0E21, r1	; 0x800e21 <_data>
    4246:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00003ffe <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    3ffe:	40 91 1f 0e 	lds	r20, 0x0E1F	; 0x800e1f <cntSamples>
    4002:	50 91 20 0e 	lds	r21, 0x0E20	; 0x800e20 <cntSamples+0x1>
    4006:	20 91 23 0e 	lds	r18, 0x0E23	; 0x800e23 <_nSamples>
    400a:	30 91 24 0e 	lds	r19, 0x0E24	; 0x800e24 <_nSamples+0x1>
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	42 17       	cp	r20, r18
    4012:	53 07       	cpc	r21, r19
    4014:	08 f4       	brcc	.+2      	; 0x4018 <ADC_is_sampling_done+0x1a>
    4016:	80 e0       	ldi	r24, 0x00	; 0
}
    4018:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002ece <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <ADC_get_value+0xa>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2ede:	8f ef       	ldi	r24, 0xFF	; 255
    2ee0:	9f ef       	ldi	r25, 0xFF	; 255
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2ee8:	42 e0       	ldi	r20, 0x02	; 2
    2eea:	be 01       	movw	r22, r28
    2eec:	6f 5f       	subi	r22, 0xFF	; 255
    2eee:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef0:	8d e4       	ldi	r24, 0x4D	; 77
    2ef2:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2ef6:	81 11       	cpse	r24, r1
    2ef8:	0d c0       	rjmp	.+26     	; 0x2f14 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	98 2f       	mov	r25, r24
    2f00:	88 27       	eor	r24, r24
    2f02:	2a 81       	ldd	r18, Y+2	; 0x02
	*value=calc_ppm_methane(bit_value);
    2f04:	82 2b       	or	r24, r18
    2f06:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <calc_ppm_methane>
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

000033da <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    33da:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <_data>
    33de:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <_data+0x1>
    33e2:	20 91 1f 0e 	lds	r18, 0x0E1F	; 0x800e1f <cntSamples>
    33e6:	30 91 20 0e 	lds	r19, 0x0E20	; 0x800e20 <cntSamples+0x1>
    33ea:	a9 01       	movw	r20, r18
    33ec:	4f 5f       	subi	r20, 0xFF	; 255
    33ee:	5f 4f       	sbci	r21, 0xFF	; 255
    33f0:	50 93 20 0e 	sts	0x0E20, r21	; 0x800e20 <cntSamples+0x1>
    33f4:	40 93 1f 0e 	sts	0x0E1F, r20	; 0x800e1f <cntSamples>
    33f8:	22 0f       	add	r18, r18
    33fa:	33 1f       	adc	r19, r19
    33fc:	82 0f       	add	r24, r18
    33fe:	93 1f       	adc	r25, r19
    3400:	0e 94 67 17 	call	0x2ece	; 0x2ece <ADC_get_value>
	if(cntSamples>=_nSamples){
    3404:	20 91 1f 0e 	lds	r18, 0x0E1F	; 0x800e1f <cntSamples>
    3408:	30 91 20 0e 	lds	r19, 0x0E20	; 0x800e20 <cntSamples+0x1>
    340c:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <_nSamples>
    3410:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <_nSamples+0x1>
    3414:	28 17       	cp	r18, r24
    3416:	39 07       	cpc	r19, r25
    3418:	10 f0       	brcs	.+4      	; 0x341e <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    341a:	0e 94 83 22 	call	0x4506	; 0x4506 <TC0_HAL_stop>
    341e:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

0000442e <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    442e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <TC0_HAL_start>
	vect_ADC_do_sample();
    4432:	0e 94 ed 19 	call	0x33da	; 0x33da <vect_ADC_do_sample>
    4436:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00003f2c <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    3f2c:	80 93 3e 0e 	sts	0x0E3E, r24	; 0x800e3e <_powerUpTime>
	cntPowerUpTime=0;
    3f30:	10 92 3d 0e 	sts	0x0E3D, r1	; 0x800e3d <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <PM_HAL_meth_power>
	
	//Setup timer
	//TC0_HAL_init(60, &vect_ADC_heat_timeout);
	TC0_HAL_init(1, &vect_ADC_heat_timeout);
    3f3a:	6a e7       	ldi	r22, 0x7A	; 122
    3f3c:	70 e2       	ldi	r23, 0x20	; 32
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	0e 94 56 1f 	call	0x3eac	; 0x3eac <TC0_HAL_init>
	TC0_HAL_start();
    3f44:	0e 94 60 22 	call	0x44c0	; 0x44c0 <TC0_HAL_start>
    3f48:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

00004488 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <PM_HAL_meth_power>
    448e:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

0000425a <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    425a:	20 91 3d 0e 	lds	r18, 0x0E3D	; 0x800e3d <cntPowerUpTime>
    425e:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <_powerUpTime>
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	29 17       	cp	r18, r25
    4266:	08 f4       	brcc	.+2      	; 0x426a <ADC_meth_sens_ready+0x10>
    4268:	80 e0       	ldi	r24, 0x00	; 0
}
    426a:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

000035b8 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
	Vc=Vcc;
    35c0:	60 93 07 0e 	sts	0x0E07, r22	; 0x800e07 <Vc>
    35c4:	70 93 08 0e 	sts	0x0E08, r23	; 0x800e08 <Vc+0x1>
    35c8:	80 93 09 0e 	sts	0x0E09, r24	; 0x800e09 <Vc+0x2>
    35cc:	90 93 0a 0e 	sts	0x0E0A, r25	; 0x800e0a <Vc+0x3>
	RRL=Rrl;
    35d0:	20 93 03 0e 	sts	0x0E03, r18	; 0x800e03 <RRL>
    35d4:	30 93 04 0e 	sts	0x0E04, r19	; 0x800e04 <RRL+0x1>
    35d8:	40 93 05 0e 	sts	0x0E05, r20	; 0x800e05 <RRL+0x2>
    35dc:	50 93 06 0e 	sts	0x0E06, r21	; 0x800e06 <RRL+0x3>
	PPM_factor=PPMfactor;
    35e0:	e0 92 ff 0d 	sts	0x0DFF, r14	; 0x800dff <PPM_factor>
    35e4:	f0 92 00 0e 	sts	0x0E00, r15	; 0x800e00 <PPM_factor+0x1>
    35e8:	00 93 01 0e 	sts	0x0E01, r16	; 0x800e01 <PPM_factor+0x2>
    35ec:	10 93 02 0e 	sts	0x0E02, r17	; 0x800e02 <PPM_factor+0x3>
}
    35f0:	1f 91       	pop	r17
    35f2:	0f 91       	pop	r16
    35f4:	ff 90       	pop	r15
    35f6:	ef 90       	pop	r14
    35f8:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

0000413c <EM_has_deveui>:
uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
}

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    413c:	60 e4       	ldi	r22, 0x40	; 64
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	80 e8       	ldi	r24, 0x80	; 128
    4142:	0e 94 3f 21 	call	0x427e	; 0x427e <eeprom_read_byte>
    4146:	91 e0       	ldi	r25, 0x01	; 1
    4148:	81 11       	cpse	r24, r1
    414a:	01 c0       	rjmp	.+2      	; 0x414e <EM_has_deveui+0x12>
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	89 2f       	mov	r24, r25
    4150:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00004152 <EM_has_appeui>:
    4152:	61 e4       	ldi	r22, 0x41	; 65
    4154:	70 e0       	ldi	r23, 0x00	; 0
    4156:	80 e8       	ldi	r24, 0x80	; 128
    4158:	0e 94 3f 21 	call	0x427e	; 0x427e <eeprom_read_byte>
    415c:	91 e0       	ldi	r25, 0x01	; 1
    415e:	81 11       	cpse	r24, r1
    4160:	01 c0       	rjmp	.+2      	; 0x4164 <EM_has_appeui+0x12>
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	89 2f       	mov	r24, r25
    4166:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00004168 <EM_has_appkey>:
    4168:	62 e4       	ldi	r22, 0x42	; 66
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	80 e8       	ldi	r24, 0x80	; 128
    416e:	0e 94 3f 21 	call	0x427e	; 0x427e <eeprom_read_byte>
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	81 11       	cpse	r24, r1
    4176:	01 c0       	rjmp	.+2      	; 0x417a <EM_has_appkey+0x12>
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	89 2f       	mov	r24, r25
    417c:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003b00 <EM_get_deveui>:
    3b00:	0f 93       	push	r16
    3b02:	1f 93       	push	r17
    3b04:	cf 93       	push	r28
    3b06:	8c 01       	movw	r16, r24
    3b08:	0e 94 9e 20 	call	0x413c	; 0x413c <EM_has_deveui>
    3b0c:	c8 2f       	mov	r28, r24
    3b0e:	88 23       	and	r24, r24
    3b10:	51 f0       	breq	.+20     	; 0x3b26 <EM_get_deveui+0x26>
    3b12:	20 e1       	ldi	r18, 0x10	; 16
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e0       	ldi	r20, 0x00	; 0
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	c8 01       	movw	r24, r16
    3b1e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <eeprom_read_block>
    3b22:	f8 01       	movw	r30, r16
    3b24:	10 8a       	std	Z+16, r1	; 0x10
    3b26:	8c 2f       	mov	r24, r28
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003b30 <EM_get_appeui>:
    3b30:	0f 93       	push	r16
    3b32:	1f 93       	push	r17
    3b34:	cf 93       	push	r28
    3b36:	8c 01       	movw	r16, r24
    3b38:	0e 94 a9 20 	call	0x4152	; 0x4152 <EM_has_appeui>
    3b3c:	c8 2f       	mov	r28, r24
    3b3e:	88 23       	and	r24, r24
    3b40:	51 f0       	breq	.+20     	; 0x3b56 <EM_get_appeui+0x26>
    3b42:	20 e1       	ldi	r18, 0x10	; 16
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e1       	ldi	r20, 0x10	; 16
    3b48:	50 e0       	ldi	r21, 0x00	; 0
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	c8 01       	movw	r24, r16
    3b4e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <eeprom_read_block>
    3b52:	f8 01       	movw	r30, r16
    3b54:	10 8a       	std	Z+16, r1	; 0x10
    3b56:	8c 2f       	mov	r24, r28
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003b60 <EM_get_appkey>:
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	cf 93       	push	r28
    3b66:	8c 01       	movw	r16, r24
    3b68:	0e 94 b4 20 	call	0x4168	; 0x4168 <EM_has_appkey>
    3b6c:	c8 2f       	mov	r28, r24
    3b6e:	88 23       	and	r24, r24
    3b70:	51 f0       	breq	.+20     	; 0x3b86 <EM_get_appkey+0x26>
    3b72:	20 e2       	ldi	r18, 0x20	; 32
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	40 e2       	ldi	r20, 0x20	; 32
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	60 e0       	ldi	r22, 0x00	; 0
    3b7c:	c8 01       	movw	r24, r16
    3b7e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <eeprom_read_block>
    3b82:	f8 01       	movw	r30, r16
    3b84:	10 a2       	std	Z+32, r1	; 0x20
    3b86:	8c 2f       	mov	r24, r28
    3b88:	cf 91       	pop	r28
    3b8a:	1f 91       	pop	r17
    3b8c:	0f 91       	pop	r16
    3b8e:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003f4a <EM_get_ppmfactor>:
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
    3f4e:	ec 01       	movw	r28, r24
    3f50:	63 e4       	ldi	r22, 0x43	; 67
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	0e 94 c3 21 	call	0x4386	; 0x4386 <eeprom_read_dword>
    3f5a:	68 83       	st	Y, r22
    3f5c:	79 83       	std	Y+1, r23	; 0x01
    3f5e:	8a 83       	std	Y+2, r24	; 0x02
    3f60:	9b 83       	std	Y+3, r25	; 0x03
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003f68 <EM_get_RRL>:
    3f68:	cf 93       	push	r28
    3f6a:	df 93       	push	r29
    3f6c:	ec 01       	movw	r28, r24
    3f6e:	67 e4       	ldi	r22, 0x47	; 71
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	0e 94 c3 21 	call	0x4386	; 0x4386 <eeprom_read_dword>
    3f78:	68 83       	st	Y, r22
    3f7a:	79 83       	std	Y+1, r23	; 0x01
    3f7c:	8a 83       	std	Y+2, r24	; 0x02
    3f7e:	9b 83       	std	Y+3, r25	; 0x03
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003f86 <EM_get_Vcc>:
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	ec 01       	movw	r28, r24
    3f8c:	6b e4       	ldi	r22, 0x4B	; 75
    3f8e:	70 e0       	ldi	r23, 0x00	; 0
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	0e 94 c3 21 	call	0x4386	; 0x4386 <eeprom_read_dword>
    3f96:	68 83       	st	Y, r22
    3f98:	79 83       	std	Y+1, r23	; 0x01
    3f9a:	8a 83       	std	Y+2, r24	; 0x02
    3f9c:	9b 83       	std	Y+3, r25	; 0x03
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	08 95       	ret

Disassembly of section .text.EM_get_collections:

000042b0 <EM_get_collections>:
    42b0:	26 2f       	mov	r18, r22
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	44 e6       	ldi	r20, 0x64	; 100
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	60 e0       	ldi	r22, 0x00	; 0
    42ba:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <eeprom_read_block>
    42be:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

000043ba <EM_get_heat_up_time>:
    43ba:	6f e4       	ldi	r22, 0x4F	; 79
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	0e 94 3f 21 	call	0x427e	; 0x427e <eeprom_read_byte>
    43c4:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000043c6 <EM_get_air_pump_time>:
    43c6:	60 e5       	ldi	r22, 0x50	; 80
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	0e 94 ca 21 	call	0x4394	; 0x4394 <eeprom_read_word>
    43d0:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000043d2 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    43d2:	62 e5       	ldi	r22, 0x52	; 82
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	0e 94 3f 21 	call	0x427e	; 0x427e <eeprom_read_byte>
    43dc:	08 95       	ret

Disassembly of section .text.cb_blink:

000044d2 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    44d2:	0e 94 30 22 	call	0x4460	; 0x4460 <PM_HAL_LED_toggle>
    44d6:	08 95       	ret

Disassembly of section .text.blink:

000030fe <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    3104:	c0 e0       	ldi	r28, 0x00	; 0
    3106:	19 c0       	rjmp	.+50     	; 0x313a <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
    310e:	2f ef       	ldi	r18, 0xFF	; 255
    3110:	82 e5       	ldi	r24, 0x52	; 82
    3112:	97 e0       	ldi	r25, 0x07	; 7
    3114:	21 50       	subi	r18, 0x01	; 1
    3116:	80 40       	sbci	r24, 0x00	; 0
    3118:	90 40       	sbci	r25, 0x00	; 0
    311a:	e1 f7       	brne	.-8      	; 0x3114 <blink+0x16>
    311c:	00 c0       	rjmp	.+0      	; 0x311e <blink+0x20>
    311e:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
    3126:	2f ef       	ldi	r18, 0xFF	; 255
    3128:	82 e5       	ldi	r24, 0x52	; 82
    312a:	97 e0       	ldi	r25, 0x07	; 7
    312c:	21 50       	subi	r18, 0x01	; 1
    312e:	80 40       	sbci	r24, 0x00	; 0
    3130:	90 40       	sbci	r25, 0x00	; 0
    3132:	e1 f7       	brne	.-8      	; 0x312c <blink+0x2e>
    3134:	00 c0       	rjmp	.+0      	; 0x3136 <blink+0x38>
    3136:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    3138:	cf 5f       	subi	r28, 0xFF	; 255
    313a:	cd 17       	cp	r28, r29
    313c:	28 f3       	brcs	.-54     	; 0x3108 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
}
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	08 95       	ret

Disassembly of section .text.err_code:

000037ea <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    37ea:	cf 93       	push	r28
    37ec:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
    37f4:	2f ef       	ldi	r18, 0xFF	; 255
    37f6:	83 ed       	ldi	r24, 0xD3	; 211
    37f8:	90 e3       	ldi	r25, 0x30	; 48
    37fa:	21 50       	subi	r18, 0x01	; 1
    37fc:	80 40       	sbci	r24, 0x00	; 0
    37fe:	90 40       	sbci	r25, 0x00	; 0
    3800:	e1 f7       	brne	.-8      	; 0x37fa <err_code+0x10>
    3802:	00 c0       	rjmp	.+0      	; 0x3804 <err_code+0x1a>
    3804:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    3806:	8c 2f       	mov	r24, r28
    3808:	0e 94 7f 18 	call	0x30fe	; 0x30fe <blink>
    380c:	2f ef       	ldi	r18, 0xFF	; 255
    380e:	89 e6       	ldi	r24, 0x69	; 105
    3810:	98 e1       	ldi	r25, 0x18	; 24
    3812:	21 50       	subi	r18, 0x01	; 1
    3814:	80 40       	sbci	r24, 0x00	; 0
    3816:	90 40       	sbci	r25, 0x00	; 0
    3818:	e1 f7       	brne	.-8      	; 0x3812 <err_code+0x28>
    381a:	00 c0       	rjmp	.+0      	; 0x381c <err_code+0x32>
    381c:	00 00       	nop
	_delay_ms(1000);
}
    381e:	cf 91       	pop	r28
    3820:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00004332 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    4332:	89 e6       	ldi	r24, 0x69	; 105
    4334:	92 e2       	ldi	r25, 0x22	; 34
    4336:	0e 94 92 17 	call	0x2f24	; 0x2f24 <TC2_HAL_subscribe>
    433a:	80 93 3f 0e 	sts	0x0E3F, r24	; 0x800e3f <cbPointer>
    433e:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

000042c0 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    42c0:	80 91 3f 0e 	lds	r24, 0x0E3F	; 0x800e3f <cbPointer>
    42c4:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
    42ce:	08 95       	ret

Disassembly of section .text.LED_join_success:

0000363c <LED_join_success>:
}

void LED_join_success(){
    363c:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    363e:	c0 e0       	ldi	r28, 0x00	; 0
    3640:	19 c0       	rjmp	.+50     	; 0x3674 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
    3648:	2f ef       	ldi	r18, 0xFF	; 255
    364a:	80 e7       	ldi	r24, 0x70	; 112
    364c:	92 e0       	ldi	r25, 0x02	; 2
    364e:	21 50       	subi	r18, 0x01	; 1
    3650:	80 40       	sbci	r24, 0x00	; 0
    3652:	90 40       	sbci	r25, 0x00	; 0
    3654:	e1 f7       	brne	.-8      	; 0x364e <LED_join_success+0x12>
    3656:	00 c0       	rjmp	.+0      	; 0x3658 <LED_join_success+0x1c>
    3658:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
    3660:	2f ef       	ldi	r18, 0xFF	; 255
    3662:	80 e7       	ldi	r24, 0x70	; 112
    3664:	92 e0       	ldi	r25, 0x02	; 2
    3666:	21 50       	subi	r18, 0x01	; 1
    3668:	80 40       	sbci	r24, 0x00	; 0
    366a:	90 40       	sbci	r25, 0x00	; 0
    366c:	e1 f7       	brne	.-8      	; 0x3666 <LED_join_success+0x2a>
    366e:	00 c0       	rjmp	.+0      	; 0x3670 <LED_join_success+0x34>
    3670:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    3672:	cf 5f       	subi	r28, 0xFF	; 255
    3674:	ca 30       	cpi	r28, 0x0A	; 10
    3676:	28 f3       	brcs	.-54     	; 0x3642 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    3678:	cf 91       	pop	r28
    367a:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00004490 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    4490:	83 e0       	ldi	r24, 0x03	; 3
    4492:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <err_code>
    4496:	08 95       	ret

Disassembly of section .text.LED_conf_err:

00004498 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    4498:	85 e0       	ldi	r24, 0x05	; 5
    449a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <err_code>
    449e:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000044a0 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    44a0:	87 e0       	ldi	r24, 0x07	; 7
    44a2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <err_code>
    44a6:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000e50 <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	28 97       	sbiw	r28, 0x08	; 8
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	5c 01       	movw	r10, r24
     e74:	6b 01       	movw	r12, r22
     e76:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
     e78:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
     e7a:	e1 2f       	mov	r30, r17
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ed 30       	cpi	r30, 0x0D	; 13
     e80:	f1 05       	cpc	r31, r1
     e82:	d8 f7       	brcc	.-10     	; 0xe7a <JN_join_network+0x2a>
     e84:	e2 5c       	subi	r30, 0xC2	; 194
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	0c 94 07 22 	jmp	0x440e	; 0x440e <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
     e8c:	0e 94 38 22 	call	0x4470	; 0x4470 <rn2483_reset_active>
     e90:	2f ef       	ldi	r18, 0xFF	; 255
     e92:	89 e6       	ldi	r24, 0x69	; 105
     e94:	98 e1       	ldi	r25, 0x18	; 24
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	80 40       	sbci	r24, 0x00	; 0
     e9a:	90 40       	sbci	r25, 0x00	; 0
     e9c:	e1 f7       	brne	.-8      	; 0xe96 <JN_join_network+0x46>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <JN_join_network+0x50>
     ea0:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
     ea2:	0e 94 3c 22 	call	0x4478	; 0x4478 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
     ea6:	4c e0       	ldi	r20, 0x0C	; 12
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
     eb6:	24 e5       	ldi	r18, 0x54	; 84
     eb8:	33 e0       	ldi	r19, 0x03	; 3
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
     ec6:	11 e0       	ldi	r17, 0x01	; 1
			break;
     ec8:	d8 cf       	rjmp	.-80     	; 0xe7a <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
     eca:	4b e5       	ldi	r20, 0x5B	; 91
     ecc:	53 e0       	ldi	r21, 0x03	; 3
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	80 e9       	ldi	r24, 0x90	; 144
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <cmd_with_ending>
				util_transmit_msg(lm_msg);
     ed8:	80 e9       	ldi	r24, 0x90	; 144
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
     ee0:	4c e0       	ldi	r20, 0x0C	; 12
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	63 e0       	ldi	r22, 0x03	; 3
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     ef0:	29 e6       	ldi	r18, 0x69	; 105
     ef2:	33 e0       	ldi	r19, 0x03	; 3
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f00:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f02:	bb cf       	rjmp	.-138    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
     f04:	b5 01       	movw	r22, r10
     f06:	80 e9       	ldi	r24, 0x90	; 144
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <mac_set_deveui>
				attach_ending(lm_msg);
     f0e:	80 e9       	ldi	r24, 0x90	; 144
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 1b 20 	call	0x4036	; 0x4036 <attach_ending>
				util_transmit_msg(lm_msg);
     f16:	80 e9       	ldi	r24, 0x90	; 144
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
     f1e:	4c e0       	ldi	r20, 0x0C	; 12
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	64 e0       	ldi	r22, 0x04	; 4
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f2e:	29 e6       	ldi	r18, 0x69	; 105
     f30:	33 e0       	ldi	r19, 0x03	; 3
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f3e:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f40:	9c cf       	rjmp	.-200    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
     f42:	b7 01       	movw	r22, r14
     f44:	80 e9       	ldi	r24, 0x90	; 144
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 a6 19 	call	0x334c	; 0x334c <mac_set_appkey>
				attach_ending(lm_msg);
     f4c:	80 e9       	ldi	r24, 0x90	; 144
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	0e 94 1b 20 	call	0x4036	; 0x4036 <attach_ending>
				util_transmit_msg(lm_msg);
     f54:	80 e9       	ldi	r24, 0x90	; 144
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
     f5c:	4c e0       	ldi	r20, 0x0C	; 12
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	65 e0       	ldi	r22, 0x05	; 5
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f6c:	29 e6       	ldi	r18, 0x69	; 105
     f6e:	33 e0       	ldi	r19, 0x03	; 3
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f7c:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f7e:	7d cf       	rjmp	.-262    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
     f80:	b6 01       	movw	r22, r12
     f82:	80 e9       	ldi	r24, 0x90	; 144
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	0e 94 82 19 	call	0x3304	; 0x3304 <mac_set_appeui>
				attach_ending(lm_msg);
     f8a:	80 e9       	ldi	r24, 0x90	; 144
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 1b 20 	call	0x4036	; 0x4036 <attach_ending>
				util_transmit_msg(lm_msg);
     f92:	80 e9       	ldi	r24, 0x90	; 144
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
     f9a:	4c e0       	ldi	r20, 0x0C	; 12
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	66 e0       	ldi	r22, 0x06	; 6
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     faa:	29 e6       	ldi	r18, 0x69	; 105
     fac:	33 e0       	ldi	r19, 0x03	; 3
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     fba:	11 e0       	ldi	r17, 0x01	; 1
			break;
     fbc:	5e cf       	rjmp	.-324    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	80 e9       	ldi	r24, 0x90	; 144
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <mac_set_ADR>
				attach_ending(lm_msg);
     fc8:	80 e9       	ldi	r24, 0x90	; 144
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 1b 20 	call	0x4036	; 0x4036 <attach_ending>
				util_transmit_msg(lm_msg);
     fd0:	80 e9       	ldi	r24, 0x90	; 144
     fd2:	92 e0       	ldi	r25, 0x02	; 2
     fd4:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
     fd8:	4c e0       	ldi	r20, 0x0C	; 12
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	67 e0       	ldi	r22, 0x07	; 7
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     fe8:	29 e6       	ldi	r18, 0x69	; 105
     fea:	33 e0       	ldi	r19, 0x03	; 3
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     ff8:	11 e0       	ldi	r17, 0x01	; 1
			break;
     ffa:	3f cf       	rjmp	.-386    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
     ffc:	4c e6       	ldi	r20, 0x6C	; 108
     ffe:	53 e0       	ldi	r21, 0x03	; 3
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	80 e9       	ldi	r24, 0x90	; 144
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <cmd_with_ending>
				util_transmit_msg(lm_msg);
    100a:	80 e9       	ldi	r24, 0x90	; 144
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1012:	4c e0       	ldi	r20, 0x0C	; 12
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	68 e0       	ldi	r22, 0x08	; 8
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1022:	29 e6       	ldi	r18, 0x69	; 105
    1024:	33 e0       	ldi	r19, 0x03	; 3
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1032:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1034:	22 cf       	rjmp	.-444    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1036:	45 e7       	ldi	r20, 0x75	; 117
    1038:	53 e0       	ldi	r21, 0x03	; 3
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	80 e9       	ldi	r24, 0x90	; 144
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <cmd_with_ending>
				util_transmit_msg(lm_msg);
    1044:	80 e9       	ldi	r24, 0x90	; 144
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    104c:	4a e0       	ldi	r20, 0x0A	; 10
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	69 e0       	ldi	r22, 0x09	; 9
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    105c:	29 e6       	ldi	r18, 0x69	; 105
    105e:	33 e0       	ldi	r19, 0x03	; 3
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    106c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    106e:	05 cf       	rjmp	.-502    	; 0xe7a <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1070:	4a e0       	ldi	r20, 0x0A	; 10
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	6b e0       	ldi	r22, 0x0B	; 11
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    1080:	23 e8       	ldi	r18, 0x83	; 131
    1082:	33 e0       	ldi	r19, 0x03	; 3
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1090:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1092:	f3 ce       	rjmp	.-538    	; 0xe7a <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
    1094:	80 e9       	ldi	r24, 0x90	; 144
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <util_parse_err>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    109e:	0e 94 92 21 	call	0x4324	; 0x4324 <uart0_hal_message_ready>
    10a2:	88 23       	and	r24, r24
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
    10a6:	e9 ce       	rjmp	.-558    	; 0xe7a <JN_join_network+0x2a>
					util_read_msg(lm_msg);
    10a8:	80 e9       	ldi	r24, 0x90	; 144
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 75 22 	call	0x44ea	; 0x44ea <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    10b0:	60 e9       	ldi	r22, 0x90	; 144
    10b2:	72 e0       	ldi	r23, 0x02	; 2
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <util_matchMessage>
    10bc:	18 2f       	mov	r17, r24
    10be:	dd ce       	rjmp	.-582    	; 0xe7a <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    10c6:	28 96       	adiw	r28, 0x08	; 8
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	08 95       	ret

Disassembly of section .text.set_block_uplink:

0000410c <set_block_uplink>:
	util_lora_forward_msg(msg, res);
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    410c:	8d e0       	ldi	r24, 0x0D	; 13
    410e:	90 e2       	ldi	r25, 0x20	; 32
    4110:	0e 94 92 17 	call	0x2f24	; 0x2f24 <TC2_HAL_subscribe>
    4114:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <subPointer>
	busy=true;
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	80 93 41 0e 	sts	0x0E41, r24	; 0x800e41 <busy>
	cnt=0;
    411e:	10 92 42 0e 	sts	0x0E42, r1	; 0x800e42 <cnt>
    4122:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

0000401a <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    401a:	80 91 42 0e 	lds	r24, 0x0E42	; 0x800e42 <cnt>
    401e:	8f 5f       	subi	r24, 0xFF	; 255
    4020:	80 93 42 0e 	sts	0x0E42, r24	; 0x800e42 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    4024:	86 30       	cpi	r24, 0x06	; 6
    4026:	30 f0       	brcs	.+12     	; 0x4034 <cb_block_uplink+0x1a>
		busy=false;
    4028:	10 92 41 0e 	sts	0x0E41, r1	; 0x800e41 <busy>
		TC2_HAL_cancel(subPointer);
    402c:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <subPointer>
    4030:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <TC2_HAL_cancel>
    4034:	08 95       	ret

Disassembly of section .text.LM_join_network:

000044d8 <LM_join_network>:

static void cb_block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    44d8:	0e 94 28 07 	call	0xe50	; 0xe50 <JN_join_network>
}
    44dc:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00003c7e <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    3c7e:	1f 93       	push	r17
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    3c86:	90 91 41 0e 	lds	r25, 0x0E41	; 0x800e41 <busy>
    3c8a:	91 11       	cpse	r25, r1
    3c8c:	0a c0       	rjmp	.+20     	; 0x3ca2 <LM_send_uplink+0x24>
    3c8e:	16 2f       	mov	r17, r22
    3c90:	e9 01       	movw	r28, r18
	set_block_uplink();
    3c92:	0e 94 86 20 	call	0x410c	; 0x410c <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    3c96:	41 2f       	mov	r20, r17
    3c98:	be 01       	movw	r22, r28
    3c9a:	84 e6       	ldi	r24, 0x64	; 100
    3c9c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SU_send_uplink>
    3ca0:	01 c0       	rjmp	.+2      	; 0x3ca4 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    3ca2:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	1f 91       	pop	r17
    3caa:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

000044de <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    44de:	0e 94 a5 18 	call	0x314a	; 0x314a <SC_put_to_sleep>
}
    44e2:	08 95       	ret

Disassembly of section .text.LM_wake_up:

000044e4 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    44e4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <SC_wake_up>
}
    44e8:	08 95       	ret

Disassembly of section .text.LM_is_free:

00004438 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    4438:	90 91 41 0e 	lds	r25, 0x0E41	; 0x800e41 <busy>
}
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	89 27       	eor	r24, r25
    4440:	08 95       	ret

Disassembly of section .text.tohex:

000028a6 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	7c 01       	movw	r14, r24
    28ba:	3a 01       	movw	r6, r20
    28bc:	86 2e       	mov	r8, r22
    28be:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    28c0:	c0 e0       	ldi	r28, 0x00	; 0
    28c2:	d0 e0       	ldi	r29, 0x00	; 0
    28c4:	25 c0       	rjmp	.+74     	; 0x2910 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    28c6:	a8 2d       	mov	r26, r8
    28c8:	c3 01       	movw	r24, r6
    28ca:	8c 0f       	add	r24, r28
    28cc:	9d 1f       	adc	r25, r29
    28ce:	a1 1d       	adc	r26, r1
    28d0:	d7 fd       	sbrc	r29, 7
    28d2:	aa 95       	dec	r26
    28d4:	fc 01       	movw	r30, r24
    28d6:	24 91       	lpm	r18, Z
    28d8:	a7 fd       	sbrc	r26, 7
    28da:	20 81       	ld	r18, Z
    28dc:	ce 01       	movw	r24, r28
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	1f 92       	push	r1
    28e4:	2f 93       	push	r18
    28e6:	21 ee       	ldi	r18, 0xE1	; 225
    28e8:	32 e0       	ldi	r19, 0x02	; 2
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	4f 93       	push	r20
    28ee:	3f 93       	push	r19
    28f0:	2f 93       	push	r18
    28f2:	8e 0d       	add	r24, r14
    28f4:	9f 1d       	adc	r25, r15
    28f6:	9f 93       	push	r25
    28f8:	8f 93       	push	r24
    28fa:	0e 94 33 1a 	call	0x3466	; 0x3466 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    28fe:	21 96       	adiw	r28, 0x01	; 1
    2900:	8d b7       	in	r24, 0x3d	; 61
    2902:	9e b7       	in	r25, 0x3e	; 62
    2904:	07 96       	adiw	r24, 0x07	; 7
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	9e bf       	out	0x3e, r25	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	8d bf       	out	0x3d, r24	; 61
    2910:	c0 17       	cp	r28, r16
    2912:	d1 07       	cpc	r29, r17
    2914:	c4 f2       	brlt	.-80     	; 0x28c6 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	8f 90       	pop	r8
    2924:	7f 90       	pop	r7
    2926:	6f 90       	pop	r6
    2928:	08 95       	ret

Disassembly of section .text.attach_ending:

00004036 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    4036:	fc 01       	movw	r30, r24
    4038:	01 90       	ld	r0, Z+
    403a:	00 20       	and	r0, r0
    403c:	e9 f7       	brne	.-6      	; 0x4038 <attach_ending+0x2>
    403e:	cf 01       	movw	r24, r30
    4040:	23 e0       	ldi	r18, 0x03	; 3
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	46 ee       	ldi	r20, 0xE6	; 230
    4046:	52 e0       	ldi	r21, 0x02	; 2
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	0e 94 67 1d 	call	0x3ace	; 0x3ace <memcpy>
    4050:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00003a06 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    3a0c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    3a10:	fe 01       	movw	r30, r28
    3a12:	01 90       	ld	r0, Z+
    3a14:	00 20       	and	r0, r0
    3a16:	e9 f7       	brne	.-6      	; 0x3a12 <cmd_with_ending+0xc>
    3a18:	cf 01       	movw	r24, r30
    3a1a:	23 e0       	ldi	r18, 0x03	; 3
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	46 ee       	ldi	r20, 0xE6	; 230
    3a20:	52 e0       	ldi	r21, 0x02	; 2
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	0e 94 67 1d 	call	0x3ace	; 0x3ace <memcpy>
	return strlen(buffer);
    3a2a:	be 01       	movw	r22, r28
    3a2c:	80 e8       	ldi	r24, 0x80	; 128
    3a2e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
}
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00002ca8 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    2ca8:	cf 93       	push	r28
    2caa:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    2cac:	44 36       	cpi	r20, 0x64	; 100
    2cae:	51 05       	cpc	r21, r1
    2cb0:	61 05       	cpc	r22, r1
    2cb2:	71 05       	cpc	r23, r1
    2cb4:	18 f1       	brcs	.+70     	; 0x2cfc <sys_sleep_cmd+0x54>
    2cb6:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    2cb8:	7f 93       	push	r23
    2cba:	6f 93       	push	r22
    2cbc:	5f 93       	push	r21
    2cbe:	4f 93       	push	r20
    2cc0:	89 ee       	ldi	r24, 0xE9	; 233
    2cc2:	92 e0       	ldi	r25, 0x02	; 2
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	af 93       	push	r26
    2cc8:	9f 93       	push	r25
    2cca:	8f 93       	push	r24
    2ccc:	83 ef       	ldi	r24, 0xF3	; 243
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	a0 e0       	ldi	r26, 0x00	; 0
    2cd2:	af 93       	push	r26
    2cd4:	9f 93       	push	r25
    2cd6:	8f 93       	push	r24
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	0e 94 33 1a 	call	0x3466	; 0x3466 <sprintf>
    return strlen(buffer);
    2ce0:	be 01       	movw	r22, r28
    2ce2:	80 e8       	ldi	r24, 0x80	; 128
    2ce4:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    2ce8:	2d b7       	in	r18, 0x3d	; 61
    2cea:	3e b7       	in	r19, 0x3e	; 62
    2cec:	24 5f       	subi	r18, 0xF4	; 244
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	3e bf       	out	0x3e, r19	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	2d bf       	out	0x3d, r18	; 61
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00003064 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    306e:	2f 93       	push	r18
    3070:	1f 93       	push	r17
    3072:	0f 93       	push	r16
    3074:	6f 93       	push	r22
    3076:	5f 93       	push	r21
    3078:	4f 93       	push	r20
    307a:	8a ef       	ldi	r24, 0xFA	; 250
    307c:	92 e0       	ldi	r25, 0x02	; 2
    307e:	a0 e0       	ldi	r26, 0x00	; 0
    3080:	af 93       	push	r26
    3082:	9f 93       	push	r25
    3084:	8f 93       	push	r24
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	0e 94 33 1a 	call	0x3466	; 0x3466 <sprintf>
    return strlen(buffer);
    308e:	be 01       	movw	r22, r28
    3090:	80 e8       	ldi	r24, 0x80	; 128
    3092:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    3096:	2d b7       	in	r18, 0x3d	; 61
    3098:	3e b7       	in	r19, 0x3e	; 62
    309a:	25 5f       	subi	r18, 0xF5	; 245
    309c:	3f 4f       	sbci	r19, 0xFF	; 255
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	3e bf       	out	0x3e, r19	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	2d bf       	out	0x3d, r18	; 61
}
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	1f 91       	pop	r17
    30ae:	0f 91       	pop	r16
    30b0:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

000032bc <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    32bc:	cf 92       	push	r12
    32be:	df 92       	push	r13
    32c0:	ef 92       	push	r14
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    32cc:	6b 01       	movw	r12, r22
    32ce:	80 e8       	ldi	r24, 0x80	; 128
    32d0:	e8 2e       	mov	r14, r24
    32d2:	8e 2d       	mov	r24, r14
    32d4:	b6 01       	movw	r22, r12
    32d6:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    32da:	40 97       	sbiw	r24, 0x10	; 16
    32dc:	49 f4       	brne	.+18     	; 0x32f0 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    32de:	2e 2d       	mov	r18, r14
    32e0:	86 01       	movw	r16, r12
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	53 e0       	ldi	r21, 0x03	; 3
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	ce 01       	movw	r24, r28
    32ea:	0e 94 32 18 	call	0x3064	; 0x3064 <mac_set_parameter>
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	ef 90       	pop	r14
    32fe:	df 90       	pop	r13
    3300:	cf 90       	pop	r12
    3302:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00003304 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    3304:	cf 92       	push	r12
    3306:	df 92       	push	r13
    3308:	ef 92       	push	r14
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    3314:	6b 01       	movw	r12, r22
    3316:	80 e8       	ldi	r24, 0x80	; 128
    3318:	e8 2e       	mov	r14, r24
    331a:	8e 2d       	mov	r24, r14
    331c:	b6 01       	movw	r22, r12
    331e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    3322:	40 97       	sbiw	r24, 0x10	; 16
    3324:	49 f4       	brne	.+18     	; 0x3338 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    3326:	2e 2d       	mov	r18, r14
    3328:	86 01       	movw	r16, r12
    332a:	4f e0       	ldi	r20, 0x0F	; 15
    332c:	53 e0       	ldi	r21, 0x03	; 3
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	ce 01       	movw	r24, r28
    3332:	0e 94 32 18 	call	0x3064	; 0x3064 <mac_set_parameter>
    3336:	02 c0       	rjmp	.+4      	; 0x333c <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    3338:	8f ef       	ldi	r24, 0xFF	; 255
    333a:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ef 90       	pop	r14
    3346:	df 90       	pop	r13
    3348:	cf 90       	pop	r12
    334a:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

0000334c <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    335c:	6b 01       	movw	r12, r22
    335e:	80 e8       	ldi	r24, 0x80	; 128
    3360:	e8 2e       	mov	r14, r24
    3362:	8e 2d       	mov	r24, r14
    3364:	b6 01       	movw	r22, r12
    3366:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    336a:	80 97       	sbiw	r24, 0x20	; 32
    336c:	49 f4       	brne	.+18     	; 0x3380 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    336e:	2e 2d       	mov	r18, r14
    3370:	86 01       	movw	r16, r12
    3372:	4e e1       	ldi	r20, 0x1E	; 30
    3374:	53 e0       	ldi	r21, 0x03	; 3
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	ce 01       	movw	r24, r28
    337a:	0e 94 32 18 	call	0x3064	; 0x3064 <mac_set_parameter>
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    3380:	8f ef       	ldi	r24, 0xFF	; 255
    3382:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00003b90 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
	if(state==0){
    3b94:	61 11       	cpse	r22, r1
    3b96:	09 c0       	rjmp	.+18     	; 0x3baa <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    3b98:	0d e2       	ldi	r16, 0x2D	; 45
    3b9a:	13 e0       	ldi	r17, 0x03	; 3
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	41 e3       	ldi	r20, 0x31	; 49
    3ba0:	53 e0       	ldi	r21, 0x03	; 3
    3ba2:	60 e0       	ldi	r22, 0x00	; 0
    3ba4:	0e 94 32 18 	call	0x3064	; 0x3064 <mac_set_parameter>
    3ba8:	08 c0       	rjmp	.+16     	; 0x3bba <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    3baa:	0d e3       	ldi	r16, 0x3D	; 61
    3bac:	13 e0       	ldi	r17, 0x03	; 3
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	41 e3       	ldi	r20, 0x31	; 49
    3bb2:	53 e0       	ldi	r21, 0x03	; 3
    3bb4:	60 e0       	ldi	r22, 0x00	; 0
    3bb6:	0e 94 32 18 	call	0x3064	; 0x3064 <mac_set_parameter>
	}
}
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
    3bbe:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

000022ac <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	c7 56       	subi	r28, 0x67	; 103
    22c0:	d1 09       	sbc	r29, r1
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    22ce:	9f ef       	ldi	r25, 0xFF	; 255
    22d0:	96 0f       	add	r25, r22
    22d2:	9f 3d       	cpi	r25, 0xDF	; 223
    22d4:	68 f5       	brcc	.+90     	; 0x2330 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
    22d8:	92 0f       	add	r25, r18
    22da:	93 33       	cpi	r25, 0x33	; 51
    22dc:	60 f5       	brcc	.+88     	; 0x2336 <mac_tx_confirmed+0x8a>
    22de:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	60 e8       	ldi	r22, 0x80	; 128
    22e4:	ce 01       	movw	r24, r28
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	7c 01       	movw	r14, r24
    22ea:	0e 94 53 14 	call	0x28a6	; 0x28a6 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    22ee:	c7 01       	movw	r24, r14
    22f0:	a0 e8       	ldi	r26, 0x80	; 128
    22f2:	af 93       	push	r26
    22f4:	9f 93       	push	r25
    22f6:	ef 92       	push	r14
    22f8:	1f 92       	push	r1
    22fa:	df 92       	push	r13
    22fc:	80 e4       	ldi	r24, 0x40	; 64
    22fe:	93 e0       	ldi	r25, 0x03	; 3
    2300:	a0 e0       	ldi	r26, 0x00	; 0
    2302:	af 93       	push	r26
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	8b e4       	ldi	r24, 0x4B	; 75
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	a0 e0       	ldi	r26, 0x00	; 0
    230e:	af 93       	push	r26
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	1f 93       	push	r17
    2316:	0f 93       	push	r16
    2318:	0e 94 33 1a 	call	0x3466	; 0x3466 <sprintf>
    
	
    return strlen(buffer);
    231c:	b8 01       	movw	r22, r16
    231e:	80 e8       	ldi	r24, 0x80	; 128
    2320:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	05 c0       	rjmp	.+10     	; 0x233a <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f ef       	ldi	r25, 0xFF	; 255
    2334:	02 c0       	rjmp	.+4      	; 0x233a <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    233a:	c9 59       	subi	r28, 0x99	; 153
    233c:	df 4f       	sbci	r29, 0xFF	; 255
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	08 95       	ret

Disassembly of section .text.beginsWidth:

0000322a <beginsWidth>:
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    322a:	6f 92       	push	r6
    322c:	7f 92       	push	r7
    322e:	8f 92       	push	r8
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	3b 01       	movw	r6, r22
    323c:	88 2e       	mov	r8, r24
    323e:	69 01       	movw	r12, r18
    3240:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    3242:	84 2f       	mov	r24, r20
    3244:	b9 01       	movw	r22, r18
    3246:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    324a:	8c 01       	movw	r16, r24
    324c:	4e 2d       	mov	r20, r14
    324e:	96 01       	movw	r18, r12
    3250:	88 2d       	mov	r24, r8
    3252:	b3 01       	movw	r22, r6
    3254:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <strncmp>
    3258:	21 e0       	ldi	r18, 0x01	; 1
    325a:	89 2b       	or	r24, r25
    325c:	09 f0       	breq	.+2      	; 0x3260 <beginsWidth+0x36>
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	82 2f       	mov	r24, r18
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	ef 90       	pop	r14
    3268:	df 90       	pop	r13
    326a:	cf 90       	pop	r12
    326c:	8f 90       	pop	r8
    326e:	7f 90       	pop	r7
    3270:	6f 90       	pop	r6
    3272:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00002bda <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	6b 01       	movw	r12, r22
    2be2:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2be4:	2c e8       	ldi	r18, 0x8C	; 140
    2be6:	33 e0       	ldi	r19, 0x03	; 3
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2bee:	89 2b       	or	r24, r25
    2bf0:	e9 f0       	breq	.+58     	; 0x2c2c <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2bf2:	27 e9       	ldi	r18, 0x97	; 151
    2bf4:	33 e0       	ldi	r19, 0x03	; 3
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	8e 2d       	mov	r24, r14
    2bfa:	b6 01       	movw	r22, r12
    2bfc:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2c00:	89 2b       	or	r24, r25
    2c02:	b1 f0       	breq	.+44     	; 0x2c30 <decode_tx_response+0x56>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2c04:	2f e9       	ldi	r18, 0x9F	; 159
    2c06:	33 e0       	ldi	r19, 0x03	; 3
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	8e 2d       	mov	r24, r14
    2c0c:	b6 01       	movw	r22, r12
    2c0e:	0e 94 15 19 	call	0x322a	; 0x322a <beginsWidth>
    2c12:	81 11       	cpse	r24, r1
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <decode_tx_response+0x5a>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
    2c16:	26 ea       	ldi	r18, 0xA6	; 166
    2c18:	33 e0       	ldi	r19, 0x03	; 3
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	8e 2d       	mov	r24, r14
    2c1e:	b6 01       	movw	r22, r12
    2c20:	0e 94 15 19 	call	0x322a	; 0x322a <beginsWidth>
    2c24:	88 23       	and	r24, r24
    2c26:	41 f0       	breq	.+16     	; 0x2c38 <decode_tx_response+0x5e>
    2c28:	89 e0       	ldi	r24, 0x09	; 9
    2c2a:	07 c0       	rjmp	.+14     	; 0x2c3a <decode_tx_response+0x60>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2c2c:	87 e0       	ldi	r24, 0x07	; 7
    2c2e:	05 c0       	rjmp	.+10     	; 0x2c3a <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2c30:	88 e0       	ldi	r24, 0x08	; 8
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <decode_tx_response+0x60>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	01 c0       	rjmp	.+2      	; 0x2c3a <decode_tx_response+0x60>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
    2c38:	86 e0       	ldi	r24, 0x06	; 6
}
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00001a38 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	28 97       	sbiw	r28, 0x08	; 8
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	d8 2e       	mov	r13, r24
    1a58:	7b 01       	movw	r14, r22
    1a5a:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1a5e:	e1 2f       	mov	r30, r17
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	ea 30       	cpi	r30, 0x0A	; 10
    1a64:	f1 05       	cpc	r31, r1
    1a66:	d8 f7       	brcc	.-10     	; 0x1a5e <SU_send_uplink+0x26>
    1a68:	e5 5b       	subi	r30, 0xB5	; 181
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	0c 94 07 22 	jmp	0x440e	; 0x440e <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    1a70:	20 2f       	mov	r18, r16
    1a72:	a7 01       	movw	r20, r14
    1a74:	6d 2d       	mov	r22, r13
    1a76:	80 e9       	ldi	r24, 0x90	; 144
    1a78:	92 e0       	ldi	r25, 0x02	; 2
    1a7a:	0e 94 56 11 	call	0x22ac	; 0x22ac <mac_tx_confirmed>
				attach_ending(lm_msg);
    1a7e:	80 e9       	ldi	r24, 0x90	; 144
    1a80:	92 e0       	ldi	r25, 0x02	; 2
    1a82:	0e 94 1b 20 	call	0x4036	; 0x4036 <attach_ending>
				util_transmit_msg(lm_msg);
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	ce 01       	movw	r24, r28
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1a9e:	27 eb       	ldi	r18, 0xB7	; 183
    1aa0:	33 e0       	ldi	r19, 0x03	; 3
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1aae:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1ab0:	d6 cf       	rjmp	.-84     	; 0x1a5e <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	64 e0       	ldi	r22, 0x04	; 4
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	0e 94 ef 21 	call	0x43de	; 0x43de <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    1ac2:	2a eb       	ldi	r18, 0xBA	; 186
    1ac4:	33 e0       	ldi	r19, 0x03	; 3
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	ce 01       	movw	r24, r28
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	0e 94 f5 21 	call	0x43ea	; 0x43ea <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1ad2:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1ad4:	c4 cf       	rjmp	.-120    	; 0x1a5e <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    1ad6:	60 e9       	ldi	r22, 0x90	; 144
    1ad8:	72 e0       	ldi	r23, 0x02	; 2
    1ada:	80 e8       	ldi	r24, 0x80	; 128
    1adc:	0e 94 ed 15 	call	0x2bda	; 0x2bda <decode_tx_response>
    1ae0:	18 2f       	mov	r17, r24
			break;
    1ae2:	bd cf       	rjmp	.-134    	; 0x1a5e <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	18 c0       	rjmp	.+48     	; 0x1b18 <SU_send_uplink+0xe0>
				
			case SU_INV_DATA_LEN:
				return LM_STATUS_INV_DATA_LEN;
    1ae8:	85 e0       	ldi	r24, 0x05	; 5
    1aea:	16 c0       	rjmp	.+44     	; 0x1b18 <SU_send_uplink+0xe0>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <SU_send_uplink+0xe0>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1af0:	0e 94 92 21 	call	0x4324	; 0x4324 <uart0_hal_message_ready>
    1af4:	88 23       	and	r24, r24
    1af6:	09 f4       	brne	.+2      	; 0x1afa <SU_send_uplink+0xc2>
    1af8:	b2 cf       	rjmp	.-156    	; 0x1a5e <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    1afa:	80 e9       	ldi	r24, 0x90	; 144
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 75 22 	call	0x44ea	; 0x44ea <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    1b02:	60 e9       	ldi	r22, 0x90	; 144
    1b04:	72 e0       	ldi	r23, 0x02	; 2
    1b06:	ce 01       	movw	r24, r28
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <util_matchMessage>
    1b0e:	18 2f       	mov	r17, r24
    1b10:	a6 cf       	rjmp	.-180    	; 0x1a5e <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <SU_send_uplink+0xe0>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    1b16:	82 e0       	ldi	r24, 0x02	; 2
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    1b18:	28 96       	adiw	r28, 0x08	; 8
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

0000314a <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	5c e5       	ldi	r21, 0x5C	; 92
    314e:	66 e2       	ldi	r22, 0x26	; 38
    3150:	75 e0       	ldi	r23, 0x05	; 5
    3152:	80 e9       	ldi	r24, 0x90	; 144
    3154:	92 e0       	ldi	r25, 0x02	; 2
    3156:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <sys_sleep_cmd>
	attach_ending(lm_msg);
    315a:	80 e9       	ldi	r24, 0x90	; 144
    315c:	92 e0       	ldi	r25, 0x02	; 2
    315e:	0e 94 1b 20 	call	0x4036	; 0x4036 <attach_ending>
	util_transmit_msg(lm_msg);
    3162:	80 e9       	ldi	r24, 0x90	; 144
    3164:	92 e0       	ldi	r25, 0x02	; 2
    3166:	0e 94 29 20 	call	0x4052	; 0x4052 <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    316a:	0e 94 92 21 	call	0x4324	; 0x4324 <uart0_hal_message_ready>
    316e:	88 23       	and	r24, r24
    3170:	e1 f3       	breq	.-8      	; 0x316a <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    3172:	80 e9       	ldi	r24, 0x90	; 144
    3174:	92 e0       	ldi	r25, 0x02	; 2
    3176:	0e 94 75 22 	call	0x44ea	; 0x44ea <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    317a:	60 e9       	ldi	r22, 0x90	; 144
    317c:	72 e0       	ldi	r23, 0x02	; 2
    317e:	80 e8       	ldi	r24, 0x80	; 128
    3180:	2d ef       	ldi	r18, 0xFD	; 253
    3182:	33 e0       	ldi	r19, 0x03	; 3
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    318a:	89 2b       	or	r24, r25
    318c:	11 f4       	brne	.+4      	; 0x3192 <SC_put_to_sleep+0x48>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	08 95       	ret
	return LM_STATUS_FATAL_ERROR;
    3192:	81 e0       	ldi	r24, 0x01	; 1
}
    3194:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00003a38 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    3a38:	85 e5       	ldi	r24, 0x55	; 85
    3a3a:	0e 94 ca 19 	call	0x3394	; 0x3394 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3a3e:	0e 94 92 21 	call	0x4324	; 0x4324 <uart0_hal_message_ready>
    3a42:	88 23       	and	r24, r24
    3a44:	e1 f3       	breq	.-8      	; 0x3a3e <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    3a46:	80 e9       	ldi	r24, 0x90	; 144
    3a48:	92 e0       	ldi	r25, 0x02	; 2
    3a4a:	0e 94 75 22 	call	0x44ea	; 0x44ea <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3a4e:	60 e9       	ldi	r22, 0x90	; 144
    3a50:	72 e0       	ldi	r23, 0x02	; 2
    3a52:	80 e8       	ldi	r24, 0x80	; 128
    3a54:	2d ef       	ldi	r18, 0xFD	; 253
    3a56:	33 e0       	ldi	r19, 0x03	; 3
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    3a5e:	89 2b       	or	r24, r25
    3a60:	11 f4       	brne	.+4      	; 0x3a66 <SC_wake_up+0x2e>
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	08 95       	ret
	return LM_STATUS_FATAL_ERROR;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000043de <util_setPendingStates>:


char lm_msg[200];

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    43de:	fc 01       	movw	r30, r24
    43e0:	71 83       	std	Z+1, r23	; 0x01
    43e2:	60 83       	st	Z, r22
	sd->failure_state=failed;
    43e4:	53 83       	std	Z+3, r21	; 0x03
    43e6:	42 83       	std	Z+2, r20	; 0x02
    43e8:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000043ea <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    43ea:	fc 01       	movw	r30, r24
    43ec:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    43ee:	25 83       	std	Z+5, r18	; 0x05
    43f0:	36 83       	std	Z+6, r19	; 0x06
    43f2:	47 83       	std	Z+7, r20	; 0x07
    43f4:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

00004052 <util_transmit_msg>:
		default:
		return sd->failure_state;
	}
}

void util_transmit_msg(char msg[]){
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    4058:	bc 01       	movw	r22, r24
    405a:	80 e8       	ldi	r24, 0x80	; 128
    405c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    4060:	68 2f       	mov	r22, r24
    4062:	ce 01       	movw	r24, r28
    4064:	0e 94 cf 1c 	call	0x399e	; 0x399e <uart0_hal_send_message>
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

Disassembly of section .text.util_read_msg:

000044ea <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
    44ea:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <uart0_hal_read_message_as_str>
    44ee:	08 95       	ret

Disassembly of section .text.util_parse_err:

00002e76 <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    2e76:	cf 92       	push	r12
    2e78:	df 92       	push	r13
    2e7a:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2e7c:	6c 01       	movw	r12, r24
    2e7e:	20 e8       	ldi	r18, 0x80	; 128
    2e80:	e2 2e       	mov	r14, r18
    2e82:	24 ec       	ldi	r18, 0xC4	; 196
    2e84:	33 e0       	ldi	r19, 0x03	; 3
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	8e 2d       	mov	r24, r14
    2e8a:	b6 01       	movw	r22, r12
    2e8c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2e90:	89 2b       	or	r24, r25
    2e92:	a1 f0       	breq	.+40     	; 0x2ebc <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    2e94:	2f ec       	ldi	r18, 0xCF	; 207
    2e96:	33 e0       	ldi	r19, 0x03	; 3
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	8e 2d       	mov	r24, r14
    2e9c:	b6 01       	movw	r22, r12
    2e9e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2ea2:	89 2b       	or	r24, r25
    2ea4:	69 f0       	breq	.+26     	; 0x2ec0 <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    2ea6:	26 ed       	ldi	r18, 0xD6	; 214
    2ea8:	33 e0       	ldi	r19, 0x03	; 3
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	8e 2d       	mov	r24, r14
    2eae:	b6 01       	movw	r22, r12
    2eb0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2eb4:	89 2b       	or	r24, r25
    2eb6:	31 f4       	brne	.+12     	; 0x2ec4 <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    2eb8:	83 e0       	ldi	r24, 0x03	; 3
    2eba:	05 c0       	rjmp	.+10     	; 0x2ec6 <util_parse_err+0x50>
	uart0_hal_read_message_as_str(msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ec6:	ef 90       	pop	r14
    2ec8:	df 90       	pop	r13
    2eca:	cf 90       	pop	r12
    2ecc:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

000034ac <util_strbeginswith>:

bool util_strbeginswith(char *s1, const char *s2){
    34ac:	cf 92       	push	r12
    34ae:	df 92       	push	r13
    34b0:	ef 92       	push	r14
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	ec 01       	movw	r28, r24
    34bc:	6a 01       	movw	r12, r20
    34be:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    34c0:	86 2f       	mov	r24, r22
    34c2:	ba 01       	movw	r22, r20
    34c4:	0e 94 56 1e 	call	0x3cac	; 0x3cac <strlen>
    34c8:	8c 01       	movw	r16, r24
    34ca:	be 01       	movw	r22, r28
    34cc:	80 e8       	ldi	r24, 0x80	; 128
    34ce:	4e 2d       	mov	r20, r14
    34d0:	96 01       	movw	r18, r12
    34d2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <strncmp>
    34d6:	21 e0       	ldi	r18, 0x01	; 1
    34d8:	89 2b       	or	r24, r25
    34da:	09 f0       	breq	.+2      	; 0x34de <util_strbeginswith+0x32>
    34dc:	20 e0       	ldi	r18, 0x00	; 0
}
    34de:	82 2f       	mov	r24, r18
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	ef 90       	pop	r14
    34ea:	df 90       	pop	r13
    34ec:	cf 90       	pop	r12
    34ee:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00002d06 <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	ec 01       	movw	r28, r24
    2d0c:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	91 30       	cpi	r25, 0x01	; 1
    2d12:	91 f0       	breq	.+36     	; 0x2d38 <util_matchMessage+0x32>
    2d14:	18 f0       	brcs	.+6      	; 0x2d1c <util_matchMessage+0x16>
    2d16:	92 30       	cpi	r25, 0x02	; 2
    2d18:	e9 f0       	breq	.+58     	; 0x2d54 <util_matchMessage+0x4e>
    2d1a:	1f c0       	rjmp	.+62     	; 0x2d5a <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    2d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    2d1e:	3e 81       	ldd	r19, Y+6	; 0x06
    2d20:	4f 81       	ldd	r20, Y+7	; 0x07
    2d22:	80 e8       	ldi	r24, 0x80	; 128
    2d24:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2d28:	89 2b       	or	r24, r25
    2d2a:	19 f4       	brne	.+6      	; 0x2d32 <util_matchMessage+0x2c>
    2d2c:	88 81       	ld	r24, Y
    2d2e:	99 81       	ldd	r25, Y+1	; 0x01
    2d30:	16 c0       	rjmp	.+44     	; 0x2d5e <util_matchMessage+0x58>
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	13 c0       	rjmp	.+38     	; 0x2d5e <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    2d38:	4d 81       	ldd	r20, Y+5	; 0x05
    2d3a:	5e 81       	ldd	r21, Y+6	; 0x06
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	cf 01       	movw	r24, r30
    2d40:	0e 94 56 1a 	call	0x34ac	; 0x34ac <util_strbeginswith>
    2d44:	88 23       	and	r24, r24
    2d46:	19 f0       	breq	.+6      	; 0x2d4e <util_matchMessage+0x48>
    2d48:	88 81       	ld	r24, Y
    2d4a:	99 81       	ldd	r25, Y+1	; 0x01
    2d4c:	08 c0       	rjmp	.+16     	; 0x2d5e <util_matchMessage+0x58>
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	9b 81       	ldd	r25, Y+3	; 0x03
    2d52:	05 c0       	rjmp	.+10     	; 0x2d5e <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    2d54:	88 81       	ld	r24, Y
    2d56:	99 81       	ldd	r25, Y+1	; 0x01
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	08 95       	ret

Disassembly of section .text.get_group_id:

000044f0 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    44f0:	80 91 43 0e 	lds	r24, 0x0E43	; 0x800e43 <_groupId>
    44f4:	08 95       	ret

Disassembly of section .text.set_group_id:

000044f6 <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    44f6:	80 93 43 0e 	sts	0x0E43, r24	; 0x800e43 <_groupId>
    44fa:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00003a6a <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	8c 01       	movw	r16, r24
    3a74:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    3a76:	0e 94 78 22 	call	0x44f0	; 0x44f0 <get_group_id>
    3a7a:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    3a7c:	2d 2f       	mov	r18, r29
    3a7e:	a8 01       	movw	r20, r16
    3a80:	68 2f       	mov	r22, r24
    3a82:	88 e5       	ldi	r24, 0x58	; 88
    3a84:	93 e0       	ldi	r25, 0x03	; 3
    3a86:	0e 94 73 08 	call	0x10e6	; 0x10e6 <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	8c 0f       	add	r24, r28
    3a8e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <set_group_id>
}
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00002b00 <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	2a 97       	sbiw	r28, 0x0a	; 10
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	18 2f       	mov	r17, r24
    2b1c:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    2b1e:	9e 01       	movw	r18, r28
    2b20:	2f 5f       	subi	r18, 0xFF	; 255
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	ab 01       	movw	r20, r22
    2b26:	68 2f       	mov	r22, r24
    2b28:	88 e5       	ldi	r24, 0x58	; 88
    2b2a:	93 e0       	ldi	r25, 0x03	; 3
    2b2c:	0e 94 10 14 	call	0x2820	; 0x2820 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    2b30:	9e 01       	movw	r18, r28
    2b32:	27 5f       	subi	r18, 0xF7	; 247
    2b34:	3f 4f       	sbci	r19, 0xFF	; 255
    2b36:	ae 01       	movw	r20, r28
    2b38:	49 5f       	subi	r20, 0xF9	; 249
    2b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3c:	61 2f       	mov	r22, r17
    2b3e:	88 e5       	ldi	r24, 0x58	; 88
    2b40:	93 e0       	ldi	r25, 0x03	; 3
    2b42:	0e 94 49 1c 	call	0x3892	; 0x3892 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    2b46:	29 85       	ldd	r18, Y+9	; 0x09
    2b48:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b4a:	4f 81       	ldd	r20, Y+7	; 0x07
    2b4c:	58 85       	ldd	r21, Y+8	; 0x08
    2b4e:	b7 01       	movw	r22, r14
    2b50:	ce 01       	movw	r24, r28
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	0e 94 82 13 	call	0x2704	; 0x2704 <mrpp_data_add_int16>
}
    2b58:	2a 96       	adiw	r28, 0x0a	; 10
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	ff 90       	pop	r15
    2b6c:	ef 90       	pop	r14
    2b6e:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00003de0 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    3de0:	cf 93       	push	r28
    3de2:	df 93       	push	r29
    3de4:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    3de6:	88 e5       	ldi	r24, 0x58	; 88
    3de8:	93 e0       	ldi	r25, 0x03	; 3
    3dea:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <mrpp_state_is_body_ready>
    3dee:	88 83       	st	Y, r24
    3df0:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    3df2:	89 2f       	mov	r24, r25
    3df4:	80 95       	com	r24
    
}
    3df6:	88 1f       	adc	r24, r24
    3df8:	88 27       	eor	r24, r24
    3dfa:	88 1f       	adc	r24, r24
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

0000266e <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    266e:	af 92       	push	r10
    2670:	bf 92       	push	r11
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	00 d0       	rcall	.+0      	; 0x2684 <MRPP_get_ready_body_package+0x16>
    2684:	00 d0       	rcall	.+0      	; 0x2686 <MRPP_get_ready_body_package+0x18>
    2686:	1f 92       	push	r1
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	6b 01       	movw	r12, r22
    268e:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    2690:	9e 01       	movw	r18, r28
    2692:	2b 5f       	subi	r18, 0xFB	; 251
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	79 01       	movw	r14, r18
    2698:	8e 01       	movw	r16, r28
    269a:	0d 5f       	subi	r16, 0xFD	; 253
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	23 50       	subi	r18, 0x03	; 3
    26a0:	31 09       	sbc	r19, r1
    26a2:	ae 01       	movw	r20, r28
    26a4:	4f 5f       	subi	r20, 0xFF	; 255
    26a6:	5f 4f       	sbci	r21, 0xFF	; 255
    26a8:	bc 01       	movw	r22, r24
    26aa:	88 e5       	ldi	r24, 0x58	; 88
    26ac:	93 e0       	ldi	r25, 0x03	; 3
    26ae:	0e 94 0c 0c 	call	0x1818	; 0x1818 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    26b2:	88 23       	and	r24, r24
    26b4:	b1 f0       	breq	.+44     	; 0x26e2 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    26b6:	4d 81       	ldd	r20, Y+5	; 0x05
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	84 0f       	add	r24, r20
    26bc:	f5 01       	movw	r30, r10
    26be:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    26c0:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    26c4:	f6 01       	movw	r30, r12
    26c6:	80 83       	st	Z, r24
    package[1]=subId;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	6b 81       	ldd	r22, Y+3	; 0x03
    26d4:	7c 81       	ldd	r23, Y+4	; 0x04
    26d6:	c6 01       	movw	r24, r12
    26d8:	03 96       	adiw	r24, 0x03	; 3
    26da:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <mrpp_data_get>

    return true;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    26e2:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	af 90       	pop	r10
    2702:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000043f6 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    43f6:	bc 01       	movw	r22, r24
    43f8:	88 e5       	ldi	r24, 0x58	; 88
    43fa:	93 e0       	ldi	r25, 0x03	; 3
    43fc:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <mrpp_state_set_body_sent>
    4400:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00003e02 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3e08:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    3e10:	bf 01       	movw	r22, r30
    3e12:	88 e5       	ldi	r24, 0x58	; 88
    3e14:	93 e0       	ldi	r25, 0x03	; 3
    3e16:	0e 94 fe 11 	call	0x23fc	; 0x23fc <mrpp_state_get_header>
    *package_length+=1;
    3e1a:	8f 5f       	subi	r24, 0xFF	; 255
    3e1c:	88 83       	st	Y, r24
}
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003e24 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3e24:	cf 93       	push	r28
    3e26:	df 93       	push	r29
    3e28:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3e2a:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3e2e:	fc 01       	movw	r30, r24
    3e30:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    3e32:	bf 01       	movw	r22, r30
    3e34:	88 e5       	ldi	r24, 0x58	; 88
    3e36:	93 e0       	ldi	r25, 0x03	; 3
    3e38:	0e 94 ac 11 	call	0x2358	; 0x2358 <mrpp_state_get_tail>
    *package_length+=1;
    3e3c:	8f 5f       	subi	r24, 0xFF	; 255
    3e3e:	88 83       	st	Y, r24
}
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00004442 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    4442:	88 e5       	ldi	r24, 0x58	; 88
    4444:	93 e0       	ldi	r25, 0x03	; 3
    4446:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <mrpp_state_all_bodies_sent>
}
    444a:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00002704 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    2714:	94 2f       	mov	r25, r20
    2716:	0c c0       	rjmp	.+24     	; 0x2730 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    2718:	c9 2f       	mov	r28, r25
    271a:	d0 e0       	ldi	r29, 0x00	; 0
    271c:	e4 1b       	sub	r30, r20
    271e:	f5 0b       	sbc	r31, r21
    2720:	ea 0f       	add	r30, r26
    2722:	fb 1f       	adc	r31, r27
    2724:	80 81       	ld	r24, Z
    2726:	fe 01       	movw	r30, r28
    2728:	ee 50       	subi	r30, 0x0E	; 14
    272a:	fc 4f       	sbci	r31, 0xFC	; 252
    272c:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    272e:	9f 5f       	subi	r25, 0xFF	; 255
    2730:	e9 2f       	mov	r30, r25
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	6a 01       	movw	r12, r20
    2736:	86 e0       	ldi	r24, 0x06	; 6
    2738:	c8 0e       	add	r12, r24
    273a:	d1 1c       	adc	r13, r1
    273c:	ec 15       	cp	r30, r12
    273e:	fd 05       	cpc	r31, r13
    2740:	58 f3       	brcs	.-42     	; 0x2718 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    2742:	26 50       	subi	r18, 0x06	; 6
    2744:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    2746:	36 95       	lsr	r19
    2748:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    274a:	49 5f       	subi	r20, 0xF9	; 249
    274c:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	16 c0       	rjmp	.+44     	; 0x2780 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    2754:	cd 01       	movw	r24, r26
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	f6 01       	movw	r30, r12
    275c:	e8 0f       	add	r30, r24
    275e:	f9 1f       	adc	r31, r25
    2760:	8b 01       	movw	r16, r22
    2762:	08 0f       	add	r16, r24
    2764:	19 1f       	adc	r17, r25
    2766:	e8 01       	movw	r28, r16
    2768:	f9 80       	ldd	r15, Y+1	; 0x01
    276a:	ee 50       	subi	r30, 0x0E	; 14
    276c:	fc 4f       	sbci	r31, 0xFC	; 252
    276e:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    2770:	84 0f       	add	r24, r20
    2772:	95 1f       	adc	r25, r21
    2774:	18 81       	ld	r17, Y
    2776:	fc 01       	movw	r30, r24
    2778:	ee 50       	subi	r30, 0x0E	; 14
    277a:	fc 4f       	sbci	r31, 0xFC	; 252
    277c:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    277e:	11 96       	adiw	r26, 0x01	; 1
    2780:	a2 17       	cp	r26, r18
    2782:	b3 07       	cpc	r27, r19
    2784:	38 f3       	brcs	.-50     	; 0x2754 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
    2794:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003bc0 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	0c c0       	rjmp	.+24     	; 0x3be4 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    3bcc:	de 01       	movw	r26, r28
    3bce:	a2 0f       	add	r26, r18
    3bd0:	b3 1f       	adc	r27, r19
    3bd2:	f9 01       	movw	r30, r18
    3bd4:	e6 0f       	add	r30, r22
    3bd6:	f7 1f       	adc	r31, r23
    3bd8:	ee 50       	subi	r30, 0x0E	; 14
    3bda:	fc 4f       	sbci	r31, 0xFC	; 252
    3bdc:	90 81       	ld	r25, Z
    3bde:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3be0:	2f 5f       	subi	r18, 0xFF	; 255
    3be2:	3f 4f       	sbci	r19, 0xFF	; 255
    3be4:	24 17       	cp	r18, r20
    3be6:	35 07       	cpc	r19, r21
    3be8:	88 f3       	brcs	.-30     	; 0x3bcc <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	08 95       	ret

Disassembly of section .text.add_data_types:

00001df2 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	dc 01       	movw	r26, r24
    1e04:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    1e0a:	c1 2c       	mov	r12, r1
    1e0c:	d1 2c       	mov	r13, r1
    1e0e:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e10:	4a c0       	rjmp	.+148    	; 0x1ea6 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    1e12:	29 2f       	mov	r18, r25
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	f9 01       	movw	r30, r18
    1e18:	ee 0f       	add	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	e2 0f       	add	r30, r18
    1e2a:	f3 1f       	adc	r31, r19
    1e2c:	ea 0f       	add	r30, r26
    1e2e:	fb 1f       	adc	r31, r27
    1e30:	27 81       	ldd	r18, Z+7	; 0x07
    1e32:	22 30       	cpi	r18, 0x02	; 2
    1e34:	a9 f0       	breq	.+42     	; 0x1e60 <add_data_types+0x6e>
    1e36:	24 30       	cpi	r18, 0x04	; 4
    1e38:	21 f1       	breq	.+72     	; 0x1e82 <add_data_types+0x90>
    1e3a:	21 30       	cpi	r18, 0x01	; 1
    1e3c:	91 f5       	brne	.+100    	; 0x1ea2 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    1e3e:	01 e0       	ldi	r16, 0x01	; 1
    1e40:	10 e0       	ldi	r17, 0x00	; 0
    1e42:	04 2e       	mov	r0, r20
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <add_data_types+0x58>
    1e46:	00 0f       	add	r16, r16
    1e48:	11 1f       	adc	r17, r17
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <add_data_types+0x54>
    1e4e:	01 2e       	mov	r0, r17
    1e50:	00 0c       	add	r0, r0
    1e52:	22 0b       	sbc	r18, r18
    1e54:	33 0b       	sbc	r19, r19
    1e56:	c0 2a       	or	r12, r16
    1e58:	d1 2a       	or	r13, r17
    1e5a:	e2 2a       	or	r14, r18
    1e5c:	f3 2a       	or	r15, r19
                break;
    1e5e:	21 c0       	rjmp	.+66     	; 0x1ea2 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    1e60:	02 e0       	ldi	r16, 0x02	; 2
    1e62:	10 e0       	ldi	r17, 0x00	; 0
    1e64:	04 2e       	mov	r0, r20
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <add_data_types+0x7a>
    1e68:	00 0f       	add	r16, r16
    1e6a:	11 1f       	adc	r17, r17
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <add_data_types+0x76>
    1e70:	01 2e       	mov	r0, r17
    1e72:	00 0c       	add	r0, r0
    1e74:	22 0b       	sbc	r18, r18
    1e76:	33 0b       	sbc	r19, r19
    1e78:	c0 2a       	or	r12, r16
    1e7a:	d1 2a       	or	r13, r17
    1e7c:	e2 2a       	or	r14, r18
    1e7e:	f3 2a       	or	r15, r19
                break;
    1e80:	10 c0       	rjmp	.+32     	; 0x1ea2 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    1e82:	03 e0       	ldi	r16, 0x03	; 3
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	04 2e       	mov	r0, r20
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <add_data_types+0x9c>
    1e8a:	00 0f       	add	r16, r16
    1e8c:	11 1f       	adc	r17, r17
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <add_data_types+0x98>
    1e92:	01 2e       	mov	r0, r17
    1e94:	00 0c       	add	r0, r0
    1e96:	22 0b       	sbc	r18, r18
    1e98:	33 0b       	sbc	r19, r19
    1e9a:	c0 2a       	or	r12, r16
    1e9c:	d1 2a       	or	r13, r17
    1e9e:	e2 2a       	or	r14, r18
    1ea0:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    1ea2:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1ea4:	9f 5f       	subi	r25, 0xFF	; 255
    1ea6:	12 96       	adiw	r26, 0x02	; 2
    1ea8:	8c 91       	ld	r24, X
    1eaa:	12 97       	sbiw	r26, 0x02	; 2
    1eac:	98 17       	cp	r25, r24
    1eae:	08 f4       	brcc	.+2      	; 0x1eb2 <add_data_types+0xc0>
    1eb0:	b0 cf       	rjmp	.-160    	; 0x1e12 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    1eb2:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    1eb4:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1eb6:	cd 82       	std	Y+5, r12	; 0x05
} 
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	08 95       	ret

Disassembly of section .text.update_bodies:

00001454 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    1454:	cf 93       	push	r28
    1456:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    1458:	26 2f       	mov	r18, r22
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	c9 01       	movw	r24, r18
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f9 01       	movw	r30, r18
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	e2 0f       	add	r30, r18
    1474:	f3 1f       	adc	r31, r19
    1476:	ea 0f       	add	r30, r26
    1478:	fb 1f       	adc	r31, r27
    147a:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    147c:	c0 e0       	ldi	r28, 0x00	; 0
    147e:	25 c0       	rjmp	.+74     	; 0x14ca <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    1480:	82 17       	cp	r24, r18
    1482:	93 07       	cpc	r25, r19
    1484:	09 f1       	breq	.+66     	; 0x14c8 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    1486:	a9 01       	movw	r20, r18
    1488:	44 0f       	add	r20, r20
    148a:	55 1f       	adc	r21, r21
    148c:	44 0f       	add	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	44 0f       	add	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	f9 01       	movw	r30, r18
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	e4 0f       	add	r30, r20
    149c:	f5 1f       	adc	r31, r21
    149e:	ea 0f       	add	r30, r26
    14a0:	fb 1f       	adc	r31, r27
    14a2:	43 85       	ldd	r20, Z+11	; 0x0b
    14a4:	74 13       	cpse	r23, r20
    14a6:	10 c0       	rjmp	.+32     	; 0x14c8 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    14a8:	f9 01       	movw	r30, r18
    14aa:	ee 0f       	add	r30, r30
    14ac:	ff 1f       	adc	r31, r31
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	e2 0f       	add	r30, r18
    14bc:	f3 1f       	adc	r31, r19
    14be:	ea 0f       	add	r30, r26
    14c0:	fb 1f       	adc	r31, r27
    14c2:	24 85       	ldd	r18, Z+12	; 0x0c
    14c4:	23 30       	cpi	r18, 0x03	; 3
    14c6:	41 f4       	brne	.+16     	; 0x14d8 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    14c8:	cf 5f       	subi	r28, 0xFF	; 255
    14ca:	2c 2f       	mov	r18, r28
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	28 17       	cp	r18, r24
    14d0:	39 07       	cpc	r19, r25
    14d2:	b4 f2       	brlt	.-84     	; 0x1480 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    14d4:	21 e0       	ldi	r18, 0x01	; 1
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    14d8:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    14da:	22 23       	and	r18, r18
    14dc:	39 f0       	breq	.+14     	; 0x14ec <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    14de:	fd 01       	movw	r30, r26
    14e0:	e7 0f       	add	r30, r23
    14e2:	f1 1d       	adc	r31, r1
    14e4:	e4 58       	subi	r30, 0x84	; 132
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    14ec:	9c 01       	movw	r18, r24
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	fc 01       	movw	r30, r24
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	ea 0f       	add	r30, r26
    1506:	fb 1f       	adc	r31, r27
    1508:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    150a:	29 c0       	rjmp	.+82     	; 0x155e <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    150c:	46 2f       	mov	r20, r22
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	84 17       	cp	r24, r20
    1512:	95 07       	cpc	r25, r21
    1514:	19 f1       	breq	.+70     	; 0x155c <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    1516:	9a 01       	movw	r18, r20
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	f9 01       	movw	r30, r18
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	22 0f       	add	r18, r18
    152c:	33 1f       	adc	r19, r19
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	ea 0f       	add	r30, r26
    1534:	fb 1f       	adc	r31, r27
    1536:	20 81       	ld	r18, Z
    1538:	c2 13       	cpse	r28, r18
    153a:	10 c0       	rjmp	.+32     	; 0x155c <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    153c:	fa 01       	movw	r30, r20
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	44 0f       	add	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	44 0f       	add	r20, r20
    154c:	55 1f       	adc	r21, r21
    154e:	e4 0f       	add	r30, r20
    1550:	f5 1f       	adc	r31, r21
    1552:	ea 0f       	add	r30, r26
    1554:	fb 1f       	adc	r31, r27
    1556:	24 85       	ldd	r18, Z+12	; 0x0c
    1558:	23 30       	cpi	r18, 0x03	; 3
    155a:	41 f4       	brne	.+16     	; 0x156c <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	12 96       	adiw	r26, 0x02	; 2
    1560:	2c 91       	ld	r18, X
    1562:	12 97       	sbiw	r26, 0x02	; 2
    1564:	62 17       	cp	r22, r18
    1566:	90 f2       	brcs	.-92     	; 0x150c <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	01 c0       	rjmp	.+2      	; 0x156e <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    156c:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    156e:	88 23       	and	r24, r24
    1570:	41 f0       	breq	.+16     	; 0x1582 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    1572:	fd 01       	movw	r30, r26
    1574:	ec 0f       	add	r30, r28
    1576:	f1 1d       	adc	r31, r1
    1578:	e4 58       	subi	r30, 0x84	; 132
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 83       	st	Z, r24
    1580:	06 c0       	rjmp	.+12     	; 0x158e <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    1582:	fd 01       	movw	r30, r26
    1584:	ec 0f       	add	r30, r28
    1586:	f1 1d       	adc	r31, r1
    1588:	e4 58       	subi	r30, 0x84	; 132
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    158e:	8c 2f       	mov	r24, r28
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	87 1b       	sub	r24, r23
    1594:	91 09       	sbc	r25, r1
    1596:	02 97       	sbiw	r24, 0x02	; 2
    1598:	64 f0       	brlt	.+24     	; 0x15b2 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    159a:	7f 5f       	subi	r23, 0xFF	; 255
    159c:	08 c0       	rjmp	.+16     	; 0x15ae <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    159e:	fd 01       	movw	r30, r26
    15a0:	e7 0f       	add	r30, r23
    15a2:	f1 1d       	adc	r31, r1
    15a4:	e4 58       	subi	r30, 0x84	; 132
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    15ac:	7f 5f       	subi	r23, 0xFF	; 255
    15ae:	7c 17       	cp	r23, r28
    15b0:	b0 f3       	brcs	.-20     	; 0x159e <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

000010e6 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    10fe:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    1100:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1102:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    1108:	8f c0       	rjmp	.+286    	; 0x1228 <__stack+0x129>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    110a:	ed 2d       	mov	r30, r13
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	cf 01       	movw	r24, r30
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	8e 0f       	add	r24, r30
    111a:	9f 1f       	adc	r25, r31
    111c:	84 0f       	add	r24, r20
    111e:	95 1f       	adc	r25, r21
    1120:	dc 01       	movw	r26, r24
    1122:	12 96       	adiw	r26, 0x02	; 2
    1124:	6d 91       	ld	r22, X+
    1126:	7c 91       	ld	r23, X
    1128:	13 97       	sbiw	r26, 0x03	; 3
    112a:	df 01       	movw	r26, r30
    112c:	aa 0f       	add	r26, r26
    112e:	bb 1f       	adc	r27, r27
    1130:	9f 01       	movw	r18, r30
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	a2 0f       	add	r26, r18
    1140:	b3 1f       	adc	r27, r19
    1142:	5d 01       	movw	r10, r26
    1144:	ac 0e       	add	r10, r28
    1146:	bd 1e       	adc	r11, r29
    1148:	d5 01       	movw	r26, r10
    114a:	19 96       	adiw	r26, 0x09	; 9
    114c:	7c 93       	st	X, r23
    114e:	6e 93       	st	-X, r22
    1150:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    1152:	dc 01       	movw	r26, r24
    1154:	14 96       	adiw	r26, 0x04	; 4
    1156:	2c 91       	ld	r18, X
    1158:	d5 01       	movw	r26, r10
    115a:	17 96       	adiw	r26, 0x07	; 7
    115c:	2c 93       	st	X, r18
    115e:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	1c 93       	st	X, r17
    1164:	0e 93       	st	-X, r16
    1166:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    1168:	dc 01       	movw	r26, r24
    116a:	2d 91       	ld	r18, X+
    116c:	3c 91       	ld	r19, X
    116e:	11 97       	sbiw	r26, 0x01	; 1
    1170:	14 96       	adiw	r26, 0x04	; 4
    1172:	8c 91       	ld	r24, X
    1174:	82 9f       	mul	r24, r18
    1176:	70 01       	movw	r14, r0
    1178:	83 9f       	mul	r24, r19
    117a:	f0 0c       	add	r15, r0
    117c:	11 24       	eor	r1, r1
    117e:	b6 e0       	ldi	r27, 0x06	; 6
    1180:	eb 0e       	add	r14, r27
    1182:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    1184:	d5 01       	movw	r26, r10
    1186:	16 96       	adiw	r26, 0x06	; 6
    1188:	fc 92       	st	X, r15
    118a:	ee 92       	st	-X, r14
    118c:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    118e:	98 01       	movw	r18, r16
    1190:	ab ea       	ldi	r26, 0xAB	; 171
    1192:	ba ea       	ldi	r27, 0xAA	; 170
    1194:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	92 95       	swap	r25
    119e:	82 95       	swap	r24
    11a0:	8f 70       	andi	r24, 0x0F	; 15
    11a2:	89 27       	eor	r24, r25
    11a4:	9f 70       	andi	r25, 0x0F	; 15
    11a6:	89 27       	eor	r24, r25
    11a8:	9f 01       	movw	r18, r30
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	d9 01       	movw	r26, r18
    11b0:	aa 0f       	add	r26, r26
    11b2:	bb 1f       	adc	r27, r27
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	22 0f       	add	r18, r18
    11be:	33 1f       	adc	r19, r19
    11c0:	a2 0f       	add	r26, r18
    11c2:	b3 1f       	adc	r27, r19
    11c4:	ac 0f       	add	r26, r28
    11c6:	bd 1f       	adc	r27, r29
    11c8:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    11ca:	0e 0d       	add	r16, r14
    11cc:	1f 1d       	adc	r17, r15
    11ce:	98 01       	movw	r18, r16
    11d0:	ab ea       	ldi	r26, 0xAB	; 171
    11d2:	ba ea       	ldi	r27, 0xAA	; 170
    11d4:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    11d8:	7c 01       	movw	r14, r24
    11da:	f6 94       	lsr	r15
    11dc:	e7 94       	ror	r14
    11de:	f6 94       	lsr	r15
    11e0:	e7 94       	ror	r14
    11e2:	f6 94       	lsr	r15
    11e4:	e7 94       	ror	r14
    11e6:	f6 94       	lsr	r15
    11e8:	e7 94       	ror	r14
    11ea:	f6 94       	lsr	r15
    11ec:	e7 94       	ror	r14
    11ee:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    11f0:	20 e3       	ldi	r18, 0x30	; 48
    11f2:	2e 9d       	mul	r18, r14
    11f4:	c0 01       	movw	r24, r0
    11f6:	2f 9d       	mul	r18, r15
    11f8:	90 0d       	add	r25, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	08 17       	cp	r16, r24
    11fe:	19 07       	cpc	r17, r25
    1200:	19 f4       	brne	.+6      	; 0x1208 <__stack+0x109>
    1202:	bb 24       	eor	r11, r11
    1204:	ba 94       	dec	r11
    1206:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    1208:	cf 01       	movw	r24, r30
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	e8 0f       	add	r30, r24
    121c:	f9 1f       	adc	r31, r25
    121e:	ec 0f       	add	r30, r28
    1220:	fd 1f       	adc	r31, r29
    1222:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    1224:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1226:	d3 94       	inc	r13
    1228:	dc 14       	cp	r13, r12
    122a:	08 f4       	brcc	.+2      	; 0x122e <__stack+0x12f>
    122c:	6e cf       	rjmp	.-292    	; 0x110a <__stack+0xb>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    122e:	98 01       	movw	r18, r16
    1230:	ab ea       	ldi	r26, 0xAB	; 171
    1232:	ba ea       	ldi	r27, 0xAA	; 170
    1234:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    1238:	fc 01       	movw	r30, r24
    123a:	f6 95       	lsr	r31
    123c:	e7 95       	ror	r30
    123e:	f2 95       	swap	r31
    1240:	e2 95       	swap	r30
    1242:	ef 70       	andi	r30, 0x0F	; 15
    1244:	ef 27       	eor	r30, r31
    1246:	ff 70       	andi	r31, 0x0F	; 15
    1248:	ef 27       	eor	r30, r31
    124a:	4e 2f       	mov	r20, r30
    124c:	52 e0       	ldi	r21, 0x02	; 2
    124e:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    1250:	20 e3       	ldi	r18, 0x30	; 48
    1252:	2e 9f       	mul	r18, r30
    1254:	c0 01       	movw	r24, r0
    1256:	2f 9f       	mul	r18, r31
    1258:	90 0d       	add	r25, r0
    125a:	11 24       	eor	r1, r1
    125c:	08 1b       	sub	r16, r24
    125e:	19 0b       	sbc	r17, r25
    1260:	11 f4       	brne	.+4      	; 0x1266 <__stack+0x167>
    1262:	51 e0       	ldi	r21, 0x01	; 1
    1264:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    1266:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    1268:	01 2b       	or	r16, r17
    126a:	11 f0       	breq	.+4      	; 0x1270 <__stack+0x171>
    126c:	41 e0       	ldi	r20, 0x01	; 1
    126e:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1270:	fe 01       	movw	r30, r28
    1272:	e5 58       	subi	r30, 0x85	; 133
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	07 c0       	rjmp	.+14     	; 0x128a <__stack+0x18b>
    {
        state->bodies[i]=WAITING;
    127c:	fe 01       	movw	r30, r28
    127e:	e8 0f       	add	r30, r24
    1280:	f1 1d       	adc	r31, r1
    1282:	e4 58       	subi	r30, 0x84	; 132
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	84 17       	cp	r24, r20
    128c:	b8 f3       	brcs	.-18     	; 0x127c <__stack+0x17d>
    {
        state->bodies[i]=WAITING;
    }
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

000023fc <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	8c 01       	movw	r16, r24
    2406:	eb 01       	movw	r28, r22
    package[0]=0;
    2408:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    240a:	fc 01       	movw	r30, r24
    240c:	81 81       	ldd	r24, Z+1	; 0x01
    240e:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    2410:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    2412:	c8 01       	movw	r24, r16
    2414:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	35 c0       	rjmp	.+106    	; 0x2486 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    241c:	82 2f       	mov	r24, r18
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	dc 01       	movw	r26, r24
    2422:	aa 0f       	add	r26, r26
    2424:	bb 1f       	adc	r27, r27
    2426:	aa 0f       	add	r26, r26
    2428:	bb 1f       	adc	r27, r27
    242a:	ad 01       	movw	r20, r26
    242c:	4a 5f       	subi	r20, 0xFA	; 250
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	4c 0f       	add	r20, r28
    2432:	5d 1f       	adc	r21, r29
    2434:	fc 01       	movw	r30, r24
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	e8 0f       	add	r30, r24
    2448:	f9 1f       	adc	r31, r25
    244a:	bf 01       	movw	r22, r30
    244c:	60 0f       	add	r22, r16
    244e:	71 1f       	adc	r23, r17
    2450:	fb 01       	movw	r30, r22
    2452:	84 81       	ldd	r24, Z+4	; 0x04
    2454:	fa 01       	movw	r30, r20
    2456:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    2458:	cd 01       	movw	r24, r26
    245a:	07 96       	adiw	r24, 0x07	; 7
    245c:	8c 0f       	add	r24, r28
    245e:	9d 1f       	adc	r25, r29
    2460:	fb 01       	movw	r30, r22
    2462:	33 81       	ldd	r19, Z+3	; 0x03
    2464:	fc 01       	movw	r30, r24
    2466:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    2468:	cd 01       	movw	r24, r26
    246a:	08 96       	adiw	r24, 0x08	; 8
    246c:	8c 0f       	add	r24, r28
    246e:	9d 1f       	adc	r25, r29
    2470:	fb 01       	movw	r30, r22
    2472:	36 81       	ldd	r19, Z+6	; 0x06
    2474:	fc 01       	movw	r30, r24
    2476:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    2478:	19 96       	adiw	r26, 0x09	; 9
    247a:	ac 0f       	add	r26, r28
    247c:	bd 1f       	adc	r27, r29
    247e:	fb 01       	movw	r30, r22
    2480:	85 81       	ldd	r24, Z+5	; 0x05
    2482:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    2484:	2f 5f       	subi	r18, 0xFF	; 255
    2486:	f8 01       	movw	r30, r16
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	28 17       	cp	r18, r24
    248c:	38 f2       	brcs	.-114    	; 0x241c <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    248e:	88 0f       	add	r24, r24
    2490:	88 0f       	add	r24, r24
}
    2492:	8a 5f       	subi	r24, 0xFA	; 250
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00002358 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	8c 01       	movw	r16, r24
    2362:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    2364:	fc 01       	movw	r30, r24
    2366:	81 81       	ldd	r24, Z+1	; 0x01
    2368:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    236e:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    2370:	c8 01       	movw	r24, r16
    2372:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	35 c0       	rjmp	.+106    	; 0x23e4 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    237a:	82 2f       	mov	r24, r18
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	dc 01       	movw	r26, r24
    2380:	aa 0f       	add	r26, r26
    2382:	bb 1f       	adc	r27, r27
    2384:	aa 0f       	add	r26, r26
    2386:	bb 1f       	adc	r27, r27
    2388:	ad 01       	movw	r20, r26
    238a:	4a 5f       	subi	r20, 0xFA	; 250
    238c:	5f 4f       	sbci	r21, 0xFF	; 255
    238e:	4c 0f       	add	r20, r28
    2390:	5d 1f       	adc	r21, r29
    2392:	fc 01       	movw	r30, r24
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	e8 0f       	add	r30, r24
    23a6:	f9 1f       	adc	r31, r25
    23a8:	bf 01       	movw	r22, r30
    23aa:	60 0f       	add	r22, r16
    23ac:	71 1f       	adc	r23, r17
    23ae:	fb 01       	movw	r30, r22
    23b0:	84 81       	ldd	r24, Z+4	; 0x04
    23b2:	fa 01       	movw	r30, r20
    23b4:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    23b6:	cd 01       	movw	r24, r26
    23b8:	07 96       	adiw	r24, 0x07	; 7
    23ba:	8c 0f       	add	r24, r28
    23bc:	9d 1f       	adc	r25, r29
    23be:	fb 01       	movw	r30, r22
    23c0:	33 81       	ldd	r19, Z+3	; 0x03
    23c2:	fc 01       	movw	r30, r24
    23c4:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    23c6:	cd 01       	movw	r24, r26
    23c8:	08 96       	adiw	r24, 0x08	; 8
    23ca:	8c 0f       	add	r24, r28
    23cc:	9d 1f       	adc	r25, r29
    23ce:	fb 01       	movw	r30, r22
    23d0:	36 81       	ldd	r19, Z+6	; 0x06
    23d2:	fc 01       	movw	r30, r24
    23d4:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    23d6:	19 96       	adiw	r26, 0x09	; 9
    23d8:	ac 0f       	add	r26, r28
    23da:	bd 1f       	adc	r27, r29
    23dc:	fb 01       	movw	r30, r22
    23de:	85 81       	ldd	r24, Z+5	; 0x05
    23e0:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    23e2:	2f 5f       	subi	r18, 0xFF	; 255
    23e4:	f8 01       	movw	r30, r16
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	28 17       	cp	r18, r24
    23ea:	38 f2       	brcs	.-114    	; 0x237a <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    23ec:	88 0f       	add	r24, r24
    23ee:	88 0f       	add	r24, r24
}
    23f0:	8a 5f       	subi	r24, 0xFA	; 250
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00002820 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    282a:	a6 2f       	mov	r26, r22
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	11 97       	sbiw	r26, 0x01	; 1
    2830:	fd 01       	movw	r30, r26
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	cd 01       	movw	r24, r26
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	e8 0f       	add	r30, r24
    2846:	f9 1f       	adc	r31, r25
    2848:	e0 0f       	add	r30, r16
    284a:	f1 1f       	adc	r31, r17
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0a c0       	rjmp	.+20     	; 0x2868 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    2854:	e9 2f       	mov	r30, r25
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	e9 01       	movw	r28, r18
    285a:	ce 0f       	add	r28, r30
    285c:	df 1f       	adc	r29, r31
    285e:	e4 0f       	add	r30, r20
    2860:	f5 1f       	adc	r31, r21
    2862:	80 81       	ld	r24, Z
    2864:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2866:	9f 5f       	subi	r25, 0xFF	; 255
    2868:	94 30       	cpi	r25, 0x04	; 4
    286a:	a0 f3       	brcs	.-24     	; 0x2854 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    286c:	cd 01       	movw	r24, r26
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	aa 0f       	add	r26, r26
    2874:	bb 1f       	adc	r27, r27
    2876:	aa 0f       	add	r26, r26
    2878:	bb 1f       	adc	r27, r27
    287a:	aa 0f       	add	r26, r26
    287c:	bb 1f       	adc	r27, r27
    287e:	a8 0f       	add	r26, r24
    2880:	b9 1f       	adc	r27, r25
    2882:	a0 0f       	add	r26, r16
    2884:	b1 1f       	adc	r27, r17
    2886:	19 96       	adiw	r26, 0x09	; 9
    2888:	8c 91       	ld	r24, X
    288a:	19 97       	sbiw	r26, 0x09	; 9
    288c:	f9 01       	movw	r30, r18
    288e:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    2890:	18 96       	adiw	r26, 0x08	; 8
    2892:	8c 91       	ld	r24, X
    2894:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    2896:	c8 01       	movw	r24, r16
    2898:	0e 94 2a 0a 	call	0x1454	; 0x1454 <update_bodies>
}
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003bf0 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3bf0:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0b c0       	rjmp	.+22     	; 0x3c0c <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    3bf6:	29 2f       	mov	r18, r25
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	fa 01       	movw	r30, r20
    3bfc:	e2 0f       	add	r30, r18
    3bfe:	f3 1f       	adc	r31, r19
    3c00:	e4 58       	subi	r30, 0x84	; 132
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	81 30       	cpi	r24, 0x01	; 1
    3c08:	49 f0       	breq	.+18     	; 0x3c1c <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3c0a:	9f 5f       	subi	r25, 0xFF	; 255
    3c0c:	fa 01       	movw	r30, r20
    3c0e:	e5 58       	subi	r30, 0x85	; 133
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	80 81       	ld	r24, Z
    3c14:	98 17       	cp	r25, r24
    3c16:	78 f3       	brcs	.-34     	; 0x3bf6 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3c18:	2f ef       	ldi	r18, 0xFF	; 255
    3c1a:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    3c1c:	c9 01       	movw	r24, r18
    3c1e:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00003cd8 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    3cd8:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    3cde:	0a c0       	rjmp	.+20     	; 0x3cf4 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	e9 0f       	add	r30, r25
    3ce4:	f1 1d       	adc	r31, r1
    3ce6:	e4 58       	subi	r30, 0x84	; 132
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	40 81       	ld	r20, Z
    3cec:	42 30       	cpi	r20, 0x02	; 2
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3cf2:	9f 5f       	subi	r25, 0xFF	; 255
    3cf4:	f9 01       	movw	r30, r18
    3cf6:	e5 58       	subi	r30, 0x85	; 133
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	40 81       	ld	r20, Z
    3cfc:	94 17       	cp	r25, r20
    3cfe:	80 f3       	brcs	.-32     	; 0x3ce0 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3d00:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00001818 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    1818:	8f 92       	push	r8
    181a:	9f 92       	push	r9
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	6b 01       	movw	r12, r22
    1834:	4a 01       	movw	r8, r20
    1836:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    1838:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	92 07       	cpc	r25, r18
    1842:	09 f4       	brne	.+2      	; 0x1846 <mrpp_state_get_ready_body+0x2e>
    1844:	66 c0       	rjmp	.+204    	; 0x1912 <mrpp_state_get_ready_body+0xfa>
    1846:	8c 15       	cp	r24, r12
    1848:	9d 05       	cpc	r25, r13
    184a:	09 f0       	breq	.+2      	; 0x184e <mrpp_state_get_ready_body+0x36>
    184c:	64 c0       	rjmp	.+200    	; 0x1916 <mrpp_state_get_ready_body+0xfe>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    1852:	fe 01       	movw	r30, r28
    1854:	e8 0f       	add	r30, r24
    1856:	f1 1d       	adc	r31, r1
    1858:	e4 58       	subi	r30, 0x84	; 132
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	90 81       	ld	r25, Z
    185e:	91 30       	cpi	r25, 0x01	; 1
    1860:	41 f0       	breq	.+16     	; 0x1872 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	fe 01       	movw	r30, r28
    1866:	e5 58       	subi	r30, 0x85	; 133
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	90 81       	ld	r25, Z
    186c:	89 17       	cp	r24, r25
    186e:	88 f3       	brcs	.-30     	; 0x1852 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    1870:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	98 0f       	add	r25, r24
    1876:	f4 01       	movw	r30, r8
    1878:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    187a:	99 81       	ldd	r25, Y+1	; 0x01
    187c:	f5 01       	movw	r30, r10
    187e:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	40 e3       	ldi	r20, 0x30	; 48
    1884:	48 9f       	mul	r20, r24
    1886:	90 01       	movw	r18, r0
    1888:	49 9f       	mul	r20, r25
    188a:	30 0d       	add	r19, r0
    188c:	11 24       	eor	r1, r1
    188e:	f8 01       	movw	r30, r16
    1890:	31 83       	std	Z+1, r19	; 0x01
    1892:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    1894:	fe 01       	movw	r30, r28
    1896:	e5 58       	subi	r30, 0x85	; 133
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	20 81       	ld	r18, Z
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	21 50       	subi	r18, 0x01	; 1
    18a0:	31 09       	sbc	r19, r1
    18a2:	82 17       	cp	r24, r18
    18a4:	93 07       	cpc	r25, r19
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    18a8:	80 e3       	ldi	r24, 0x30	; 48
    18aa:	f7 01       	movw	r30, r14
    18ac:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	33 c0       	rjmp	.+102    	; 0x1918 <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	9c 01       	movw	r18, r24
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	c8 0f       	add	r28, r24
    18d0:	d9 1f       	adc	r29, r25
    18d2:	4b 81       	ldd	r20, Y+3	; 0x03
    18d4:	5c 81       	ldd	r21, Y+4	; 0x04
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	9e 81       	ldd	r25, Y+6	; 0x06
    18da:	48 0f       	add	r20, r24
    18dc:	59 1f       	adc	r21, r25
    18de:	9a 01       	movw	r18, r20
    18e0:	ab ea       	ldi	r26, 0xAB	; 171
    18e2:	ba ea       	ldi	r27, 0xAA	; 170
    18e4:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    18e8:	96 95       	lsr	r25
    18ea:	87 95       	ror	r24
    18ec:	92 95       	swap	r25
    18ee:	82 95       	swap	r24
    18f0:	8f 70       	andi	r24, 0x0F	; 15
    18f2:	89 27       	eor	r24, r25
    18f4:	9f 70       	andi	r25, 0x0F	; 15
    18f6:	89 27       	eor	r24, r25
    18f8:	60 e3       	ldi	r22, 0x30	; 48
    18fa:	68 9f       	mul	r22, r24
    18fc:	90 01       	movw	r18, r0
    18fe:	69 9f       	mul	r22, r25
    1900:	30 0d       	add	r19, r0
    1902:	11 24       	eor	r1, r1
    1904:	ca 01       	movw	r24, r20
    1906:	82 1b       	sub	r24, r18
    1908:	93 0b       	sbc	r25, r19
    190a:	f7 01       	movw	r30, r14
    190c:	80 83       	st	Z, r24
    } 
    return true; 
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <mrpp_state_get_ready_body+0x100>
    1916:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	df 90       	pop	r13
    1926:	cf 90       	pop	r12
    1928:	bf 90       	pop	r11
    192a:	af 90       	pop	r10
    192c:	9f 90       	pop	r9
    192e:	8f 90       	pop	r8
    1930:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00003f0c <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e5 58       	subi	r30, 0x85	; 133
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	20 81       	ld	r18, Z
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	62 17       	cp	r22, r18
    3f18:	73 07       	cpc	r23, r19
    3f1a:	3c f4       	brge	.+14     	; 0x3f2a <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    3f1c:	68 0f       	add	r22, r24
    3f1e:	79 1f       	adc	r23, r25
    3f20:	fb 01       	movw	r30, r22
    3f22:	e4 58       	subi	r30, 0x84	; 132
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	82 e0       	ldi	r24, 0x02	; 2
    3f28:	80 83       	st	Z, r24
    3f2a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00003892 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	61 50       	subi	r22, 0x01	; 1
    3896:	71 09       	sbc	r23, r1
    3898:	fb 01       	movw	r30, r22
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	66 0f       	add	r22, r22
    38a0:	77 1f       	adc	r23, r23
    38a2:	66 0f       	add	r22, r22
    38a4:	77 1f       	adc	r23, r23
    38a6:	66 0f       	add	r22, r22
    38a8:	77 1f       	adc	r23, r23
    38aa:	e6 0f       	add	r30, r22
    38ac:	f7 1f       	adc	r31, r23
    38ae:	e8 0f       	add	r30, r24
    38b0:	f9 1f       	adc	r31, r25
    38b2:	83 81       	ldd	r24, Z+3	; 0x03
    38b4:	94 81       	ldd	r25, Z+4	; 0x04
    38b6:	da 01       	movw	r26, r20
    38b8:	8d 93       	st	X+, r24
    38ba:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    38bc:	85 81       	ldd	r24, Z+5	; 0x05
    38be:	96 81       	ldd	r25, Z+6	; 0x06
    38c0:	f9 01       	movw	r30, r18
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	80 83       	st	Z, r24
    38c6:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00003c20 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    3c20:	80 91 25 0e 	lds	r24, 0x0E25	; 0x800e25 <cnt>
    3c24:	90 91 26 0e 	lds	r25, 0x0E26	; 0x800e26 <cnt+0x1>
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	90 93 26 0e 	sts	0x0E26, r25	; 0x800e26 <cnt+0x1>
    3c2e:	80 93 25 0e 	sts	0x0E25, r24	; 0x800e25 <cnt>
	if(cnt>=_seconds){
    3c32:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <_seconds>
    3c36:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <_seconds+0x1>
    3c3a:	82 17       	cp	r24, r18
    3c3c:	93 07       	cpc	r25, r19
    3c3e:	38 f0       	brcs	.+14     	; 0x3c4e <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    3c40:	80 91 44 0e 	lds	r24, 0x0E44	; 0x800e44 <eventPointer>
    3c44:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <PM_HAL_BC_power>
    3c4e:	08 95       	ret

Disassembly of section .text.PUMP_start:

00003d76 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    3d76:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <cnt+0x1>
    3d7a:	10 92 25 0e 	sts	0x0E25, r1	; 0x800e25 <cnt>
	_seconds=seconds;
    3d7e:	90 93 28 0e 	sts	0x0E28, r25	; 0x800e28 <_seconds+0x1>
    3d82:	80 93 27 0e 	sts	0x0E27, r24	; 0x800e27 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    3d86:	80 e1       	ldi	r24, 0x10	; 16
    3d88:	9e e1       	ldi	r25, 0x1E	; 30
    3d8a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <TC2_HAL_subscribe>
    3d8e:	80 93 44 0e 	sts	0x0E44, r24	; 0x800e44 <eventPointer>
	PM_HAL_BC_power(true);
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <PM_HAL_BC_power>
    3d98:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

0000406e <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    406e:	40 91 25 0e 	lds	r20, 0x0E25	; 0x800e25 <cnt>
    4072:	50 91 26 0e 	lds	r21, 0x0E26	; 0x800e26 <cnt+0x1>
    4076:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <_seconds>
    407a:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <_seconds+0x1>
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	42 17       	cp	r20, r18
    4082:	53 07       	cpc	r21, r19
    4084:	08 f4       	brcc	.+2      	; 0x4088 <PUMP_is_done+0x1a>
    4086:	80 e0       	ldi	r24, 0x00	; 0
}
    4088:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00002f78 <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <RTC_set_clock_out+0x6>
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    2f82:	9d e0       	ldi	r25, 0x0D	; 13
    2f84:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	31 f0       	breq	.+12     	; 0x2f96 <RTC_set_clock_out+0x1e>
    2f8a:	18 f0       	brcs	.+6      	; 0x2f92 <RTC_set_clock_out+0x1a>
    2f8c:	80 32       	cpi	r24, 0x20	; 32
    2f8e:	31 f0       	breq	.+12     	; 0x2f9c <RTC_set_clock_out+0x24>
    2f90:	13 c0       	rjmp	.+38     	; 0x2fb8 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    2f92:	1a 82       	std	Y+2, r1	; 0x02
			break;
    2f94:	05 c0       	rjmp	.+10     	; 0x2fa0 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    2f96:	83 e8       	ldi	r24, 0x83	; 131
    2f98:	8a 83       	std	Y+2, r24	; 0x02
			break;
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    2f9c:	82 e8       	ldi	r24, 0x82	; 130
    2f9e:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    2fa0:	ae 01       	movw	r20, r28
    2fa2:	4f 5f       	subi	r20, 0xFF	; 255
    2fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa6:	60 e8       	ldi	r22, 0x80	; 128
    2fa8:	22 e0       	ldi	r18, 0x02	; 2
    2faa:	81 e5       	ldi	r24, 0x51	; 81
    2fac:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2fb0:	88 23       	and	r24, r24
    2fb2:	21 f0       	breq	.+8      	; 0x2fbc <RTC_set_clock_out+0x44>
    2fb4:	82 e0       	ldi	r24, 0x02	; 2
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
}
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000039d2 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <RTC_clear_wake_up_interrupt+0x6>
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	89 83       	std	Y+1, r24	; 0x01
    39e0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    39e2:	ae 01       	movw	r20, r28
    39e4:	4f 5f       	subi	r20, 0xFF	; 255
    39e6:	5f 4f       	sbci	r21, 0xFF	; 255
    39e8:	60 e8       	ldi	r22, 0x80	; 128
    39ea:	22 e0       	ldi	r18, 0x02	; 2
    39ec:	81 e5       	ldi	r24, 0x51	; 81
    39ee:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    39f2:	88 23       	and	r24, r24
    39f4:	11 f0       	breq	.+4      	; 0x39fa <RTC_clear_wake_up_interrupt+0x28>
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	01 c0       	rjmp	.+2      	; 0x39fc <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
}
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

000015b6 <RTC_get_current_time>:
	bcd->minute=decToBCD(dt.minute);
	bcd->hour=decToBCD(dt.hour);
	bcd->day=decToBCD(dt.day);
	bcd->month=decToBCD(dt.month);
	bcd->year=decToBCD(dt.year);
}
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	27 97       	sbiw	r28, 0x07	; 7
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	8c 01       	movw	r16, r24
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	54 e0       	ldi	r21, 0x04	; 4
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	81 e5       	ldi	r24, 0x51	; 81
    15da:	0e 94 66 22 	call	0x44cc	; 0x44cc <TWI_API_write_data>
    15de:	81 11       	cpse	r24, r1
    15e0:	7c c0       	rjmp	.+248    	; 0x16da <RTC_get_current_time+0x124>
    15e2:	47 e0       	ldi	r20, 0x07	; 7
    15e4:	be 01       	movw	r22, r28
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	81 e5       	ldi	r24, 0x51	; 81
    15ec:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <TWI_API_repeat_read_data_stop>
    15f0:	81 11       	cpse	r24, r1
    15f2:	75 c0       	rjmp	.+234    	; 0x16de <RTC_get_current_time+0x128>
    15f4:	29 81       	ldd	r18, Y+1	; 0x01
    15f6:	82 2f       	mov	r24, r18
    15f8:	8f 77       	andi	r24, 0x7F	; 127
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	95 95       	asr	r25
    1602:	87 95       	ror	r24
    1604:	95 95       	asr	r25
    1606:	87 95       	ror	r24
    1608:	95 95       	asr	r25
    160a:	87 95       	ror	r24
    160c:	88 0f       	add	r24, r24
    160e:	98 2f       	mov	r25, r24
    1610:	99 0f       	add	r25, r25
    1612:	99 0f       	add	r25, r25
    1614:	89 0f       	add	r24, r25
    1616:	2f 70       	andi	r18, 0x0F	; 15
    1618:	82 0f       	add	r24, r18
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
    161e:	2a 81       	ldd	r18, Y+2	; 0x02
    1620:	82 2f       	mov	r24, r18
    1622:	8f 77       	andi	r24, 0x7F	; 127
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	95 95       	asr	r25
    1628:	87 95       	ror	r24
    162a:	95 95       	asr	r25
    162c:	87 95       	ror	r24
    162e:	95 95       	asr	r25
    1630:	87 95       	ror	r24
    1632:	95 95       	asr	r25
    1634:	87 95       	ror	r24
    1636:	88 0f       	add	r24, r24
    1638:	98 2f       	mov	r25, r24
    163a:	99 0f       	add	r25, r25
    163c:	99 0f       	add	r25, r25
    163e:	89 0f       	add	r24, r25
    1640:	2f 70       	andi	r18, 0x0F	; 15
    1642:	82 0f       	add	r24, r18
    1644:	81 83       	std	Z+1, r24	; 0x01
    1646:	2b 81       	ldd	r18, Y+3	; 0x03
    1648:	82 2f       	mov	r24, r18
    164a:	8f 73       	andi	r24, 0x3F	; 63
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	95 95       	asr	r25
    1650:	87 95       	ror	r24
    1652:	95 95       	asr	r25
    1654:	87 95       	ror	r24
    1656:	95 95       	asr	r25
    1658:	87 95       	ror	r24
    165a:	95 95       	asr	r25
    165c:	87 95       	ror	r24
    165e:	88 0f       	add	r24, r24
    1660:	98 2f       	mov	r25, r24
    1662:	99 0f       	add	r25, r25
    1664:	99 0f       	add	r25, r25
    1666:	89 0f       	add	r24, r25
    1668:	2f 70       	andi	r18, 0x0F	; 15
    166a:	82 0f       	add	r24, r18
    166c:	82 83       	std	Z+2, r24	; 0x02
    166e:	2c 81       	ldd	r18, Y+4	; 0x04
    1670:	82 2f       	mov	r24, r18
    1672:	8f 73       	andi	r24, 0x3F	; 63
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	95 95       	asr	r25
    1678:	87 95       	ror	r24
    167a:	95 95       	asr	r25
    167c:	87 95       	ror	r24
    167e:	95 95       	asr	r25
    1680:	87 95       	ror	r24
    1682:	95 95       	asr	r25
    1684:	87 95       	ror	r24
    1686:	88 0f       	add	r24, r24
    1688:	98 2f       	mov	r25, r24
    168a:	99 0f       	add	r25, r25
    168c:	99 0f       	add	r25, r25
    168e:	89 0f       	add	r24, r25
    1690:	2f 70       	andi	r18, 0x0F	; 15
    1692:	82 0f       	add	r24, r18
    1694:	83 83       	std	Z+3, r24	; 0x03
    1696:	2e 81       	ldd	r18, Y+6	; 0x06
    1698:	82 2f       	mov	r24, r18
    169a:	8f 71       	andi	r24, 0x1F	; 31
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	95 95       	asr	r25
    16a0:	87 95       	ror	r24
    16a2:	95 95       	asr	r25
    16a4:	87 95       	ror	r24
    16a6:	95 95       	asr	r25
    16a8:	87 95       	ror	r24
    16aa:	95 95       	asr	r25
    16ac:	87 95       	ror	r24
    16ae:	88 0f       	add	r24, r24
    16b0:	98 2f       	mov	r25, r24
    16b2:	99 0f       	add	r25, r25
    16b4:	99 0f       	add	r25, r25
    16b6:	89 0f       	add	r24, r25
    16b8:	2f 70       	andi	r18, 0x0F	; 15
    16ba:	82 0f       	add	r24, r18
    16bc:	84 83       	std	Z+4, r24	; 0x04
    16be:	8f 81       	ldd	r24, Y+7	; 0x07
    16c0:	98 2f       	mov	r25, r24
    16c2:	92 95       	swap	r25
    16c4:	9f 70       	andi	r25, 0x0F	; 15
    16c6:	99 0f       	add	r25, r25
    16c8:	29 2f       	mov	r18, r25
    16ca:	22 0f       	add	r18, r18
    16cc:	22 0f       	add	r18, r18
    16ce:	92 0f       	add	r25, r18
    16d0:	8f 70       	andi	r24, 0x0F	; 15
    16d2:	89 0f       	add	r24, r25
    16d4:	85 83       	std	Z+5, r24	; 0x05
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <RTC_get_current_time+0x12a>
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <RTC_get_current_time+0x12a>
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	27 96       	adiw	r28, 0x07	; 7
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

0000206c <RTC_set_wake_up_interrupt_minutes>:
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	2d 97       	sbiw	r28, 0x0d	; 13
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	18 2f       	mov	r17, r24
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	85 e0       	ldi	r24, 0x05	; 5
    208e:	ea ef       	ldi	r30, 0xFA	; 250
    2090:	fd e0       	ldi	r31, 0x0D	; 13
    2092:	de 01       	movw	r26, r28
    2094:	13 96       	adiw	r26, 0x03	; 3
    2096:	01 90       	ld	r0, Z+
    2098:	0d 92       	st	X+, r0
    209a:	8a 95       	dec	r24
    209c:	e1 f7       	brne	.-8      	; 0x2096 <RTC_set_wake_up_interrupt_minutes+0x2a>
    209e:	ce 01       	movw	r24, r28
    20a0:	08 96       	adiw	r24, 0x08	; 8
    20a2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <RTC_get_current_time>
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	81 0f       	add	r24, r17
    20aa:	99 e8       	ldi	r25, 0x89	; 137
    20ac:	89 9f       	mul	r24, r25
    20ae:	91 2d       	mov	r25, r1
    20b0:	11 24       	eor	r1, r1
    20b2:	92 95       	swap	r25
    20b4:	96 95       	lsr	r25
    20b6:	97 70       	andi	r25, 0x07	; 7
    20b8:	2c e3       	ldi	r18, 0x3C	; 60
    20ba:	92 9f       	mul	r25, r18
    20bc:	80 19       	sub	r24, r0
    20be:	11 24       	eor	r1, r1
    20c0:	89 87       	std	Y+9, r24	; 0x09
    20c2:	ae 01       	movw	r20, r28
    20c4:	4f 5f       	subi	r20, 0xFF	; 255
    20c6:	5f 4f       	sbci	r21, 0xFF	; 255
    20c8:	60 e8       	ldi	r22, 0x80	; 128
    20ca:	22 e0       	ldi	r18, 0x02	; 2
    20cc:	81 e5       	ldi	r24, 0x51	; 81
    20ce:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
    20d2:	81 11       	cpse	r24, r1
    20d4:	20 c0       	rjmp	.+64     	; 0x2116 <RTC_set_wake_up_interrupt_minutes+0xaa>
    20d6:	99 85       	ldd	r25, Y+9	; 0x09
    20d8:	8d ec       	ldi	r24, 0xCD	; 205
    20da:	98 9f       	mul	r25, r24
    20dc:	81 2d       	mov	r24, r1
    20de:	11 24       	eor	r1, r1
    20e0:	86 95       	lsr	r24
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	40 e1       	ldi	r20, 0x10	; 16
    20e8:	84 9f       	mul	r24, r20
    20ea:	90 01       	movw	r18, r0
    20ec:	11 24       	eor	r1, r1
    20ee:	88 0f       	add	r24, r24
    20f0:	38 2f       	mov	r19, r24
    20f2:	33 0f       	add	r19, r19
    20f4:	33 0f       	add	r19, r19
    20f6:	83 0f       	add	r24, r19
    20f8:	98 1b       	sub	r25, r24
    20fa:	92 2b       	or	r25, r18
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	ae 01       	movw	r20, r28
    2100:	4d 5f       	subi	r20, 0xFD	; 253
    2102:	5f 4f       	sbci	r21, 0xFF	; 255
    2104:	60 e8       	ldi	r22, 0x80	; 128
    2106:	25 e0       	ldi	r18, 0x05	; 5
    2108:	81 e5       	ldi	r24, 0x51	; 81
    210a:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
    210e:	88 23       	and	r24, r24
    2110:	21 f0       	breq	.+8      	; 0x211a <RTC_set_wake_up_interrupt_minutes+0xae>
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	03 c0       	rjmp	.+6      	; 0x211c <RTC_set_wake_up_interrupt_minutes+0xb0>
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	01 c0       	rjmp	.+2      	; 0x211c <RTC_set_wake_up_interrupt_minutes+0xb0>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	2d 96       	adiw	r28, 0x0d	; 13
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

000016f6 <RTC_datetime_to_ts>:
    16f6:	4f 92       	push	r4
    16f8:	5f 92       	push	r5
    16fa:	6f 92       	push	r6
    16fc:	7f 92       	push	r7
    16fe:	8f 92       	push	r8
    1700:	9f 92       	push	r9
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	00 d0       	rcall	.+0      	; 0x1718 <RTC_datetime_to_ts+0x22>
    1718:	00 d0       	rcall	.+0      	; 0x171a <RTC_datetime_to_ts+0x24>
    171a:	00 d0       	rcall	.+0      	; 0x171c <RTC_datetime_to_ts+0x26>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	f9 01       	movw	r30, r18
    1722:	49 2e       	mov	r4, r25
    1724:	51 2c       	mov	r5, r1
    1726:	61 2c       	mov	r6, r1
    1728:	71 2c       	mov	r7, r1
    172a:	03 2e       	mov	r0, r19
    172c:	3a e1       	ldi	r19, 0x1A	; 26
    172e:	44 0c       	add	r4, r4
    1730:	55 1c       	adc	r5, r5
    1732:	66 1c       	adc	r6, r6
    1734:	77 1c       	adc	r7, r7
    1736:	3a 95       	dec	r19
    1738:	d1 f7       	brne	.-12     	; 0x172e <RTC_datetime_to_ts+0x38>
    173a:	30 2d       	mov	r19, r0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	07 2e       	mov	r0, r23
    1744:	76 e1       	ldi	r23, 0x16	; 22
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	aa 1f       	adc	r26, r26
    174c:	bb 1f       	adc	r27, r27
    174e:	7a 95       	dec	r23
    1750:	d1 f7       	brne	.-12     	; 0x1746 <RTC_datetime_to_ts+0x50>
    1752:	70 2d       	mov	r23, r0
    1754:	84 29       	or	r24, r4
    1756:	95 29       	or	r25, r5
    1758:	a6 29       	or	r26, r6
    175a:	b7 29       	or	r27, r7
    175c:	87 2e       	mov	r8, r23
    175e:	91 2c       	mov	r9, r1
    1760:	a1 2c       	mov	r10, r1
    1762:	b1 2c       	mov	r11, r1
    1764:	07 2e       	mov	r0, r23
    1766:	71 e1       	ldi	r23, 0x11	; 17
    1768:	88 0c       	add	r8, r8
    176a:	99 1c       	adc	r9, r9
    176c:	aa 1c       	adc	r10, r10
    176e:	bb 1c       	adc	r11, r11
    1770:	7a 95       	dec	r23
    1772:	d1 f7       	brne	.-12     	; 0x1768 <RTC_datetime_to_ts+0x72>
    1774:	70 2d       	mov	r23, r0
    1776:	88 29       	or	r24, r8
    1778:	99 29       	or	r25, r9
    177a:	aa 29       	or	r26, r10
    177c:	bb 29       	or	r27, r11
    177e:	c6 2e       	mov	r12, r22
    1780:	d1 2c       	mov	r13, r1
    1782:	e1 2c       	mov	r14, r1
    1784:	f1 2c       	mov	r15, r1
    1786:	0b 2e       	mov	r0, r27
    1788:	bc e0       	ldi	r27, 0x0C	; 12
    178a:	cc 0c       	add	r12, r12
    178c:	dd 1c       	adc	r13, r13
    178e:	ee 1c       	adc	r14, r14
    1790:	ff 1c       	adc	r15, r15
    1792:	ba 95       	dec	r27
    1794:	d1 f7       	brne	.-12     	; 0x178a <RTC_datetime_to_ts+0x94>
    1796:	b0 2d       	mov	r27, r0
    1798:	8c 29       	or	r24, r12
    179a:	9d 29       	or	r25, r13
    179c:	ae 29       	or	r26, r14
    179e:	bf 29       	or	r27, r15
    17a0:	05 2f       	mov	r16, r21
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	00 0f       	add	r16, r16
    17aa:	11 1f       	adc	r17, r17
    17ac:	22 1f       	adc	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	00 0f       	add	r16, r16
    17b2:	11 1f       	adc	r17, r17
    17b4:	22 1f       	adc	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	00 0f       	add	r16, r16
    17ba:	11 1f       	adc	r17, r17
    17bc:	22 1f       	adc	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	00 0f       	add	r16, r16
    17c2:	11 1f       	adc	r17, r17
    17c4:	22 1f       	adc	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	00 0f       	add	r16, r16
    17ca:	11 1f       	adc	r17, r17
    17cc:	22 1f       	adc	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	00 0f       	add	r16, r16
    17d2:	11 1f       	adc	r17, r17
    17d4:	22 1f       	adc	r18, r18
    17d6:	33 1f       	adc	r19, r19
    17d8:	80 2b       	or	r24, r16
    17da:	91 2b       	or	r25, r17
    17dc:	a2 2b       	or	r26, r18
    17de:	b3 2b       	or	r27, r19
    17e0:	84 2b       	or	r24, r20
    17e2:	b0 83       	st	Z, r27
    17e4:	a1 83       	std	Z+1, r26	; 0x01
    17e6:	92 83       	std	Z+2, r25	; 0x02
    17e8:	83 83       	std	Z+3, r24	; 0x03
    17ea:	26 96       	adiw	r28, 0x06	; 6
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	7f 90       	pop	r7
    1810:	6f 90       	pop	r6
    1812:	5f 90       	pop	r5
    1814:	4f 90       	pop	r4
    1816:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

000040c2 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    40c2:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    40c4:	54 81       	ldd	r21, Z+4	; 0x04
    40c6:	43 81       	ldd	r20, Z+3	; 0x03
    40c8:	31 81       	ldd	r19, Z+1	; 0x01
    40ca:	20 81       	ld	r18, Z
    40cc:	65 2f       	mov	r22, r21
    40ce:	74 2f       	mov	r23, r20
    40d0:	83 2f       	mov	r24, r19
    40d2:	92 2f       	mov	r25, r18
    40d4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__fixunssfsi>
}
    40d8:	cb 01       	movw	r24, r22
    40da:	08 95       	ret

Disassembly of section .text.init_measurement:

00003822 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    3822:	25 e0       	ldi	r18, 0x05	; 5
    3824:	43 ef       	ldi	r20, 0xF3	; 243
    3826:	53 e0       	ldi	r21, 0x03	; 3
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	81 e6       	ldi	r24, 0x61	; 97
    382c:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3830:	81 11       	cpse	r24, r1
    3832:	0f c0       	rjmp	.+30     	; 0x3852 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    3834:	25 e0       	ldi	r18, 0x05	; 5
    3836:	48 ef       	ldi	r20, 0xF8	; 248
    3838:	53 e0       	ldi	r21, 0x03	; 3
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	81 e6       	ldi	r24, 0x61	; 97
    383e:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3842:	81 11       	cpse	r24, r1
    3844:	08 c0       	rjmp	.+16     	; 0x3856 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    3846:	0e 94 0d 22 	call	0x441a	; 0x441a <SCD30_HAL_data_ready>
    384a:	88 23       	and	r24, r24
    384c:	e1 f3       	breq	.-8      	; 0x3846 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3852:	82 e0       	ldi	r24, 0x02	; 2
    3854:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3856:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    3858:	08 95       	ret

Disassembly of section .text.validate_data:

00003a9c <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    3a9c:	cf 93       	push	r28
    3a9e:	df 93       	push	r29
    3aa0:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    3aa2:	62 e0       	ldi	r22, 0x02	; 2
    3aa4:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <calc_crc8>
	if(data[2]!=crc) return false;
    3aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aaa:	89 13       	cpse	r24, r25
    3aac:	0a c0       	rjmp	.+20     	; 0x3ac2 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    3aae:	62 e0       	ldi	r22, 0x02	; 2
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	03 96       	adiw	r24, 0x03	; 3
    3ab4:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <calc_crc8>
	if(data[5]!=crc) return false;
    3ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aba:	89 17       	cp	r24, r25
    3abc:	21 f0       	breq	.+8      	; 0x3ac6 <validate_data+0x2a>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	03 c0       	rjmp	.+6      	; 0x3ac8 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
}
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	08 95       	ret

Disassembly of section .text.read_value:

0000249e <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <read_value+0xa>
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <read_value+0xc>
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <read_value+0xe>
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    24b2:	8f ef       	ldi	r24, 0xFF	; 255
    24b4:	9f ef       	ldi	r25, 0xFF	; 255
    24b6:	f8 01       	movw	r30, r16
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    24bc:	0e 94 0d 22 	call	0x441a	; 0x441a <SCD30_HAL_data_ready>
    24c0:	81 11       	cpse	r24, r1
    24c2:	07 c0       	rjmp	.+14     	; 0x24d2 <read_value+0x34>
		*value=0xfffe;
    24c4:	8e ef       	ldi	r24, 0xFE	; 254
    24c6:	9f ef       	ldi	r25, 0xFF	; 255
    24c8:	f8 01       	movw	r30, r16
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    24ce:	83 e0       	ldi	r24, 0x03	; 3
    24d0:	2c c0       	rjmp	.+88     	; 0x252a <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    24d2:	22 e0       	ldi	r18, 0x02	; 2
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	54 e0       	ldi	r21, 0x04	; 4
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	81 e6       	ldi	r24, 0x61	; 97
    24dc:	0e 94 48 21 	call	0x4290	; 0x4290 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    24e0:	81 11       	cpse	r24, r1
    24e2:	1e c0       	rjmp	.+60     	; 0x2520 <read_value+0x82>
    24e4:	8f e3       	ldi	r24, 0x3F	; 63
    24e6:	9f e1       	ldi	r25, 0x1F	; 31
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <read_value+0x4a>
    24ec:	00 c0       	rjmp	.+0      	; 0x24ee <read_value+0x50>
    24ee:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    24f0:	46 e0       	ldi	r20, 0x06	; 6
    24f2:	be 01       	movw	r22, r28
    24f4:	6f 5f       	subi	r22, 0xFF	; 255
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	81 e6       	ldi	r24, 0x61	; 97
    24fa:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    24fe:	81 11       	cpse	r24, r1
    2500:	11 c0       	rjmp	.+34     	; 0x2524 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    2502:	ce 01       	movw	r24, r28
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <validate_data>
    250a:	88 23       	and	r24, r24
    250c:	69 f0       	breq	.+26     	; 0x2528 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    250e:	ce 01       	movw	r24, r28
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	0e 94 61 20 	call	0x40c2	; 0x40c2 <bytes_2_uint>
    2516:	f8 01       	movw	r30, r16
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	05 c0       	rjmp	.+10     	; 0x252a <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	03 c0       	rjmp	.+6      	; 0x252a <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	01 c0       	rjmp	.+2      	; 0x252a <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    2528:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    252a:	26 96       	adiw	r28, 0x06	; 6
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00003420 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    3420:	80 91 2b 0e 	lds	r24, 0x0E2B	; 0x800e2b <_data>
    3424:	90 91 2c 0e 	lds	r25, 0x0E2C	; 0x800e2c <_data+0x1>
    3428:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <cntSamples>
    342c:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <cntSamples+0x1>
    3430:	a9 01       	movw	r20, r18
    3432:	4f 5f       	subi	r20, 0xFF	; 255
    3434:	5f 4f       	sbci	r21, 0xFF	; 255
    3436:	50 93 2a 0e 	sts	0x0E2A, r21	; 0x800e2a <cntSamples+0x1>
    343a:	40 93 29 0e 	sts	0x0E29, r20	; 0x800e29 <cntSamples>
    343e:	22 0f       	add	r18, r18
    3440:	33 1f       	adc	r19, r19
    3442:	82 0f       	add	r24, r18
    3444:	93 1f       	adc	r25, r19
    3446:	0e 94 4f 12 	call	0x249e	; 0x249e <read_value>
	if(cntSamples>=_nSamples){
    344a:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <cntSamples>
    344e:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <cntSamples+0x1>
    3452:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <_nSamples>
    3456:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <_nSamples+0x1>
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	10 f0       	brcs	.+4      	; 0x3464 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    3460:	0e 94 d7 21 	call	0x43ae	; 0x43ae <TC1_HAL_stop>
    3464:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003e46 <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    3e46:	0e 94 8b 21 	call	0x4316	; 0x4316 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	0e 94 de 20 	call	0x41bc	; 0x41bc <PM_HAL_SCD30_power>
    3e50:	2f ef       	ldi	r18, 0xFF	; 255
    3e52:	83 ed       	ldi	r24, 0xD3	; 211
    3e54:	90 e3       	ldi	r25, 0x30	; 48
    3e56:	21 50       	subi	r18, 0x01	; 1
    3e58:	80 40       	sbci	r24, 0x00	; 0
    3e5a:	90 40       	sbci	r25, 0x00	; 0
    3e5c:	e1 f7       	brne	.-8      	; 0x3e56 <SCD30_sensor_on+0x10>
    3e5e:	00 c0       	rjmp	.+0      	; 0x3e60 <SCD30_sensor_on+0x1a>
    3e60:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    3e62:	0e 94 11 1c 	call	0x3822	; 0x3822 <init_measurement>
}
    3e66:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000044a8 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	0e 94 de 20 	call	0x41bc	; 0x41bc <PM_HAL_SCD30_power>
    44ae:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00003e68 <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    3e68:	70 93 2e 0e 	sts	0x0E2E, r23	; 0x800e2e <_nSamples+0x1>
    3e6c:	60 93 2d 0e 	sts	0x0E2D, r22	; 0x800e2d <_nSamples>
	cntSamples=0;
    3e70:	10 92 2a 0e 	sts	0x0E2A, r1	; 0x800e2a <cntSamples+0x1>
    3e74:	10 92 29 0e 	sts	0x0E29, r1	; 0x800e29 <cntSamples>
	_data=data;
    3e78:	50 93 2c 0e 	sts	0x0E2C, r21	; 0x800e2c <_data+0x1>
    3e7c:	40 93 2b 0e 	sts	0x0E2B, r20	; 0x800e2b <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    3e80:	60 e1       	ldi	r22, 0x10	; 16
    3e82:	7a e1       	ldi	r23, 0x1A	; 26
    3e84:	0e 94 b5 1c 	call	0x396a	; 0x396a <TC1_HAL_init>
    3e88:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00004340 <SCD30_deinit_sampling>:
	//
	//return init_measurement();
//}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    4340:	0e 94 d7 21 	call	0x43ae	; 0x43ae <TC1_HAL_stop>
	_data=NULL;
    4344:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <_data+0x1>
    4348:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <_data>
    434c:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000444c <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    444c:	0e 94 10 1a 	call	0x3420	; 0x3420 <vect_SCD_do_sample>
	TC1_HAL_start();
    4450:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <TC1_HAL_start>
    4454:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

0000408a <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    408a:	40 91 29 0e 	lds	r20, 0x0E29	; 0x800e29 <cntSamples>
    408e:	50 91 2a 0e 	lds	r21, 0x0E2A	; 0x800e2a <cntSamples+0x1>
    4092:	20 91 2d 0e 	lds	r18, 0x0E2D	; 0x800e2d <_nSamples>
    4096:	30 91 2e 0e 	lds	r19, 0x0E2E	; 0x800e2e <_nSamples+0x1>
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	42 17       	cp	r20, r18
    409e:	53 07       	cpc	r21, r19
    40a0:	08 f4       	brcc	.+2      	; 0x40a4 <SCD30_is_sampling_done+0x1a>
    40a2:	80 e0       	ldi	r24, 0x00	; 0
}
    40a4:	08 95       	ret

Disassembly of section .text.decode_stage_response:

0000417e <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    417e:	88 23       	and	r24, r24
    4180:	19 f0       	breq	.+6      	; 0x4188 <decode_stage_response+0xa>
    4182:	81 30       	cpi	r24, 0x01	; 1
    4184:	29 f0       	breq	.+10     	; 0x4190 <decode_stage_response+0x12>
    4186:	02 c0       	rjmp	.+4      	; 0x418c <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    4188:	81 e1       	ldi	r24, 0x11	; 17
    418a:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    418c:	86 e1       	ldi	r24, 0x16	; 22
    418e:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    4190:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    4192:	08 95       	ret

Disassembly of section .text.decode_join_response:

000040a6 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    40a6:	82 30       	cpi	r24, 0x02	; 2
    40a8:	51 f0       	breq	.+20     	; 0x40be <decode_join_response+0x18>
    40aa:	83 30       	cpi	r24, 0x03	; 3
    40ac:	21 f0       	breq	.+8      	; 0x40b6 <decode_join_response+0x10>
    40ae:	81 11       	cpse	r24, r1
    40b0:	04 c0       	rjmp	.+8      	; 0x40ba <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    40b2:	83 e0       	ldi	r24, 0x03	; 3
    40b4:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    40b6:	85 e0       	ldi	r24, 0x05	; 5
    40b8:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    40ba:	86 e1       	ldi	r24, 0x16	; 22
    40bc:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    40be:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    40c0:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00003fa4 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    3fa4:	82 30       	cpi	r24, 0x02	; 2
    3fa6:	49 f0       	breq	.+18     	; 0x3fba <decode_header_tail_response+0x16>
    3fa8:	18 f4       	brcc	.+6      	; 0x3fb0 <decode_header_tail_response+0xc>
    3faa:	88 23       	and	r24, r24
    3fac:	41 f0       	breq	.+16     	; 0x3fbe <decode_header_tail_response+0x1a>
    3fae:	03 c0       	rjmp	.+6      	; 0x3fb6 <decode_header_tail_response+0x12>
    3fb0:	84 50       	subi	r24, 0x04	; 4
    3fb2:	82 30       	cpi	r24, 0x02	; 2
    3fb4:	20 f0       	brcs	.+8      	; 0x3fbe <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    3fb6:	86 e1       	ldi	r24, 0x16	; 22
    3fb8:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    3fba:	84 2f       	mov	r24, r20
    3fbc:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    3fbe:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3fc0:	08 95       	ret

Disassembly of section .text.read_eeprom:

00002e1c <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    2e1c:	89 ed       	ldi	r24, 0xD9	; 217
    2e1e:	9d e0       	ldi	r25, 0x0D	; 13
    2e20:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <EM_get_deveui>
	EM_get_appeui(appeui);
    2e24:	88 ec       	ldi	r24, 0xC8	; 200
    2e26:	9d e0       	ldi	r25, 0x0D	; 13
    2e28:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <EM_get_appeui>
	EM_get_appkey(appkey);
    2e2c:	87 ea       	ldi	r24, 0xA7	; 167
    2e2e:	9d e0       	ldi	r25, 0x0D	; 13
    2e30:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    2e34:	63 e2       	ldi	r22, 0x23	; 35
    2e36:	84 e8       	ldi	r24, 0x84	; 132
    2e38:	9d e0       	ldi	r25, 0x0D	; 13
    2e3a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <EM_get_collections>
	EM_get_Vcc(&vccx);
    2e3e:	83 e1       	ldi	r24, 0x13	; 19
    2e40:	9e e0       	ldi	r25, 0x0E	; 14
    2e42:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    2e46:	8f e0       	ldi	r24, 0x0F	; 15
    2e48:	9e e0       	ldi	r25, 0x0E	; 14
    2e4a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    2e4e:	8b e0       	ldi	r24, 0x0B	; 11
    2e50:	9e e0       	ldi	r25, 0x0E	; 14
    2e52:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    2e56:	0e 94 dd 21 	call	0x43ba	; 0x43ba <EM_get_heat_up_time>
    2e5a:	80 93 46 0e 	sts	0x0E46, r24	; 0x800e46 <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    2e5e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <EM_get_air_pump_time>
    2e62:	90 93 30 0e 	sts	0x0E30, r25	; 0x800e30 <airPumpTime+0x1>
    2e66:	80 93 2f 0e 	sts	0x0E2F, r24	; 0x800e2f <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    2e6a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <EM_get_sp_interval>
    2e6e:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <samplingProcessInterval>
	return true;
}
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	08 95       	ret

Disassembly of section .text.join_lora:

0000426c <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    426c:	47 ea       	ldi	r20, 0xA7	; 167
    426e:	5d e0       	ldi	r21, 0x0D	; 13
    4270:	68 ec       	ldi	r22, 0xC8	; 200
    4272:	7d e0       	ldi	r23, 0x0D	; 13
    4274:	89 ed       	ldi	r24, 0xD9	; 217
    4276:	9d e0       	ldi	r25, 0x0D	; 13
    4278:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <LM_join_network>
}
    427c:	08 95       	ret

Disassembly of section .text.set_wakeup:

00004456 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    4456:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <samplingProcessInterval>
    445a:	0e 94 36 10 	call	0x206c	; 0x206c <RTC_set_wake_up_interrupt_minutes>
}
    445e:	08 95       	ret

Disassembly of section .text.send_header:

000036bc <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	e4 97       	sbiw	r28, 0x34	; 52
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    36d0:	be 01       	movw	r22, r28
    36d2:	6c 5c       	subi	r22, 0xCC	; 204
    36d4:	7f 4f       	sbci	r23, 0xFF	; 255
    36d6:	ce 01       	movw	r24, r28
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    36de:	6c a9       	ldd	r22, Y+52	; 0x34
    36e0:	ce 01       	movw	r24, r28
    36e2:	01 96       	adiw	r24, 0x01	; 1
    36e4:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <LM_send_uplink>
}
    36e8:	e4 96       	adiw	r28, 0x34	; 52
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    36f8:	08 95       	ret

Disassembly of section .text.stage_0:

00002130 <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    2130:	80 91 4a 0e 	lds	r24, 0x0E4A	; 0x800e4a <state_s0>
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	19 f1       	breq	.+70     	; 0x217e <stage_0+0x4e>
    2138:	28 f4       	brcc	.+10     	; 0x2144 <stage_0+0x14>
    213a:	88 23       	and	r24, r24
    213c:	51 f0       	breq	.+20     	; 0x2152 <stage_0+0x22>
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	b1 f0       	breq	.+44     	; 0x216e <stage_0+0x3e>
    2142:	f6 cf       	rjmp	.-20     	; 0x2130 <stage_0>
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	09 f4       	brne	.+2      	; 0x214a <stage_0+0x1a>
    2148:	4b c0       	rjmp	.+150    	; 0x21e0 <stage_0+0xb0>
    214a:	18 f1       	brcs	.+70     	; 0x2192 <stage_0+0x62>
    214c:	85 30       	cpi	r24, 0x05	; 5
    214e:	69 f1       	breq	.+90     	; 0x21aa <stage_0+0x7a>
    2150:	ef cf       	rjmp	.-34     	; 0x2130 <stage_0>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    2152:	e4 e8       	ldi	r30, 0x84	; 132
    2154:	fd e0       	ldi	r31, 0x0D	; 13
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	4a e6       	ldi	r20, 0x6A	; 106
    215c:	59 e0       	ldi	r21, 0x09	; 9
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <SCD30_init_sampling>
				
			
				state_s0=STAGE_GET_TIME;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    216c:	e1 cf       	rjmp	.-62     	; 0x2130 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    216e:	84 ef       	ldi	r24, 0xF4	; 244
    2170:	9d e0       	ldi	r25, 0x0D	; 13
    2172:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <RTC_get_current_time>
				state_s0=STAGE_START;
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    217c:	d9 cf       	rjmp	.-78     	; 0x2130 <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    217e:	80 91 46 0e 	lds	r24, 0x0E46	; 0x800e46 <methHeatUpTime>
    2182:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    2186:	0e 94 26 22 	call	0x444c	; 0x444c <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    2190:	cf cf       	rjmp	.-98     	; 0x2130 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    2192:	0e 94 2d 21 	call	0x425a	; 0x425a <ADC_meth_sens_ready>
    2196:	88 23       	and	r24, r24
    2198:	39 f1       	breq	.+78     	; 0x21e8 <stage_0+0xb8>
    219a:	0e 94 45 20 	call	0x408a	; 0x408a <SCD30_is_sampling_done>
    219e:	88 23       	and	r24, r24
    21a0:	29 f1       	breq	.+74     	; 0x21ec <stage_0+0xbc>
				state_s0=STAGE_UPDATE_MRPP;
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    21a8:	c3 cf       	rjmp	.-122    	; 0x2130 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    21aa:	27 e1       	ldi	r18, 0x17	; 23
    21ac:	3e e0       	ldi	r19, 0x0E	; 14
    21ae:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    21b2:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    21b6:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    21ba:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    21be:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    21c2:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    21c6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    21ca:	4a e6       	ldi	r20, 0x6A	; 106
    21cc:	59 e0       	ldi	r21, 0x09	; 9
    21ce:	67 e1       	ldi	r22, 0x17	; 23
    21d0:	7e e0       	ldi	r23, 0x0E	; 14
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    21de:	a8 cf       	rjmp	.-176    	; 0x2130 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    21e0:	0e 94 a0 21 	call	0x4340	; 0x4340 <SCD30_deinit_sampling>
				return STAGE_DONE;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	08 95       	ret
    21ec:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    21ee:	08 95       	ret

Disassembly of section .text.stage_1:

00001c28 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    1c2c:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <state_s1>
    1c30:	82 30       	cpi	r24, 0x02	; 2
    1c32:	61 f1       	breq	.+88     	; 0x1c8c <stage_1+0x64>
    1c34:	28 f4       	brcc	.+10     	; 0x1c40 <stage_1+0x18>
    1c36:	88 23       	and	r24, r24
    1c38:	51 f0       	breq	.+20     	; 0x1c4e <stage_1+0x26>
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	f9 f0       	breq	.+62     	; 0x1c7c <stage_1+0x54>
    1c3e:	f6 cf       	rjmp	.-20     	; 0x1c2c <stage_1+0x4>
    1c40:	84 30       	cpi	r24, 0x04	; 4
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <stage_1+0x1e>
    1c44:	59 c0       	rjmp	.+178    	; 0x1cf8 <stage_1+0xd0>
    1c46:	50 f1       	brcs	.+84     	; 0x1c9c <stage_1+0x74>
    1c48:	85 30       	cpi	r24, 0x05	; 5
    1c4a:	a1 f1       	breq	.+104    	; 0x1cb4 <stage_1+0x8c>
    1c4c:	ef cf       	rjmp	.-34     	; 0x1c2c <stage_1+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    1c4e:	c4 e8       	ldi	r28, 0x84	; 132
    1c50:	dd e0       	ldi	r29, 0x0D	; 13
    1c52:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c54:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c56:	4a e6       	ldi	r20, 0x6A	; 106
    1c58:	59 e0       	ldi	r21, 0x09	; 9
    1c5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c5e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    1c62:	6d 81       	ldd	r22, Y+5	; 0x05
    1c64:	7e 81       	ldd	r23, Y+6	; 0x06
    1c66:	42 e1       	ldi	r20, 0x12	; 18
    1c68:	57 e0       	ldi	r21, 0x07	; 7
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1c70:	81 11       	cpse	r24, r1
    1c72:	48 c0       	rjmp	.+144    	; 0x1d04 <stage_1+0xdc>
				
				state_s1=STAGE_GET_TIME;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    1c7a:	d8 cf       	rjmp	.-80     	; 0x1c2c <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1c7c:	84 ef       	ldi	r24, 0xF4	; 244
    1c7e:	9d e0       	ldi	r25, 0x0D	; 13
    1c80:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    1c8a:	d0 cf       	rjmp	.-96     	; 0x1c2c <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    1c8c:	0e 94 26 22 	call	0x444c	; 0x444c <SCD30_start_sampling>
				ADC_start_sampling();
    1c90:	0e 94 17 22 	call	0x442e	; 0x442e <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    1c9a:	c8 cf       	rjmp	.-112    	; 0x1c2c <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1c9c:	0e 94 45 20 	call	0x408a	; 0x408a <SCD30_is_sampling_done>
    1ca0:	88 23       	and	r24, r24
    1ca2:	91 f1       	breq	.+100    	; 0x1d08 <stage_1+0xe0>
    1ca4:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <ADC_is_sampling_done>
    1ca8:	88 23       	and	r24, r24
    1caa:	81 f1       	breq	.+96     	; 0x1d0c <stage_1+0xe4>
				state_s1=STAGE_UPDATE_MRPP;
    1cac:	85 e0       	ldi	r24, 0x05	; 5
    1cae:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    1cb2:	bc cf       	rjmp	.-136    	; 0x1c2c <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1cb4:	27 e1       	ldi	r18, 0x17	; 23
    1cb6:	3e e0       	ldi	r19, 0x0E	; 14
    1cb8:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    1cbc:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    1cc0:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    1cc4:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    1cc8:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    1ccc:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    1cd0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    1cd4:	4a e6       	ldi	r20, 0x6A	; 106
    1cd6:	59 e0       	ldi	r21, 0x09	; 9
    1cd8:	67 e1       	ldi	r22, 0x17	; 23
    1cda:	7e e0       	ldi	r23, 0x0E	; 14
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    1ce2:	42 e1       	ldi	r20, 0x12	; 18
    1ce4:	57 e0       	ldi	r21, 0x07	; 7
    1ce6:	67 e1       	ldi	r22, 0x17	; 23
    1ce8:	7e e0       	ldi	r23, 0x0E	; 14
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    1cf6:	9a cf       	rjmp	.-204    	; 0x1c2c <stage_1+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1cf8:	0e 94 a0 21 	call	0x4340	; 0x4340 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    1cfc:	0e 94 1a 21 	call	0x4234	; 0x4234 <ADC_deinit_sampling>
				return STAGE_DONE;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <stage_1+0xe6>
		switch(state_s1){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <stage_1+0xe6>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <stage_1+0xe6>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

Disassembly of section .text.stage_2:

00001932 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    1936:	80 91 48 0e 	lds	r24, 0x0E48	; 0x800e48 <state_s2>
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	69 f1       	breq	.+90     	; 0x1998 <stage_2+0x66>
    193e:	28 f4       	brcc	.+10     	; 0x194a <stage_2+0x18>
    1940:	88 23       	and	r24, r24
    1942:	59 f0       	breq	.+22     	; 0x195a <stage_2+0x28>
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	01 f1       	breq	.+64     	; 0x1988 <stage_2+0x56>
    1948:	f6 cf       	rjmp	.-20     	; 0x1936 <stage_2+0x4>
    194a:	84 30       	cpi	r24, 0x04	; 4
    194c:	09 f4       	brne	.+2      	; 0x1950 <stage_2+0x1e>
    194e:	64 c0       	rjmp	.+200    	; 0x1a18 <stage_2+0xe6>
    1950:	88 f1       	brcs	.+98     	; 0x19b4 <stage_2+0x82>
    1952:	85 30       	cpi	r24, 0x05	; 5
    1954:	09 f4       	brne	.+2      	; 0x1958 <stage_2+0x26>
    1956:	3e c0       	rjmp	.+124    	; 0x19d4 <stage_2+0xa2>
    1958:	ee cf       	rjmp	.-36     	; 0x1936 <stage_2+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    195a:	c4 e8       	ldi	r28, 0x84	; 132
    195c:	dd e0       	ldi	r29, 0x0D	; 13
    195e:	6c 89       	ldd	r22, Y+20	; 0x14
    1960:	7d 89       	ldd	r23, Y+21	; 0x15
    1962:	4a e6       	ldi	r20, 0x6A	; 106
    1964:	59 e0       	ldi	r21, 0x09	; 9
    1966:	8e 89       	ldd	r24, Y+22	; 0x16
    1968:	9f 89       	ldd	r25, Y+23	; 0x17
    196a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    196e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1970:	78 89       	ldd	r23, Y+16	; 0x10
    1972:	42 e1       	ldi	r20, 0x12	; 18
    1974:	57 e0       	ldi	r21, 0x07	; 7
    1976:	89 89       	ldd	r24, Y+17	; 0x11
    1978:	0e 94 21 16 	call	0x2c42	; 0x2c42 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    197c:	81 11       	cpse	r24, r1
    197e:	52 c0       	rjmp	.+164    	; 0x1a24 <stage_2+0xf2>
			
				state_s2=STAGE_GET_TIME;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1986:	d7 cf       	rjmp	.-82     	; 0x1936 <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1988:	84 ef       	ldi	r24, 0xF4	; 244
    198a:	9d e0       	ldi	r25, 0x0D	; 13
    198c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1996:	cf cf       	rjmp	.-98     	; 0x1936 <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    1998:	0e 94 26 22 	call	0x444c	; 0x444c <SCD30_start_sampling>
				ADC_start_sampling();
    199c:	0e 94 17 22 	call	0x442e	; 0x442e <ADC_start_sampling>
				PUMP_start(airPumpTime);
    19a0:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <airPumpTime>
    19a4:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <airPumpTime+0x1>
    19a8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <PUMP_start>
			
				state_s2=STAGE_WAIT;
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    19b2:	c1 cf       	rjmp	.-126    	; 0x1936 <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    19b4:	0e 94 45 20 	call	0x408a	; 0x408a <SCD30_is_sampling_done>
    19b8:	88 23       	and	r24, r24
    19ba:	b1 f1       	breq	.+108    	; 0x1a28 <stage_2+0xf6>
    19bc:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <ADC_is_sampling_done>
    19c0:	88 23       	and	r24, r24
    19c2:	a1 f1       	breq	.+104    	; 0x1a2c <stage_2+0xfa>
    19c4:	0e 94 37 20 	call	0x406e	; 0x406e <PUMP_is_done>
    19c8:	88 23       	and	r24, r24
    19ca:	91 f1       	breq	.+100    	; 0x1a30 <stage_2+0xfe>
				state_s2=STAGE_UPDATE_MRPP;
    19cc:	85 e0       	ldi	r24, 0x05	; 5
    19ce:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    19d2:	b1 cf       	rjmp	.-158    	; 0x1936 <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    19d4:	27 e1       	ldi	r18, 0x17	; 23
    19d6:	3e e0       	ldi	r19, 0x0E	; 14
    19d8:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    19dc:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    19e0:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    19e4:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    19e8:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    19ec:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    19f0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    19f4:	4a e6       	ldi	r20, 0x6A	; 106
    19f6:	59 e0       	ldi	r21, 0x09	; 9
    19f8:	67 e1       	ldi	r22, 0x17	; 23
    19fa:	7e e0       	ldi	r23, 0x0E	; 14
    19fc:	85 e0       	ldi	r24, 0x05	; 5
    19fe:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    1a02:	42 e1       	ldi	r20, 0x12	; 18
    1a04:	57 e0       	ldi	r21, 0x07	; 7
    1a06:	67 e1       	ldi	r22, 0x17	; 23
    1a08:	7e e0       	ldi	r23, 0x0E	; 14
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1a16:	8f cf       	rjmp	.-226    	; 0x1936 <stage_2+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1a18:	0e 94 a0 21 	call	0x4340	; 0x4340 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    1a1c:	0e 94 1a 21 	call	0x4234	; 0x4234 <ADC_deinit_sampling>
				return STAGE_DONE;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <stage_2+0x100>
		switch(state_s2){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <stage_2+0x100>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <stage_2+0x100>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <stage_2+0x100>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	08 95       	ret

Disassembly of section .text.stage_3:

00001b34 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    1b38:	80 91 47 0e 	lds	r24, 0x0E47	; 0x800e47 <state_s3>
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	61 f1       	breq	.+88     	; 0x1b98 <stage_3+0x64>
    1b40:	28 f4       	brcc	.+10     	; 0x1b4c <stage_3+0x18>
    1b42:	88 23       	and	r24, r24
    1b44:	51 f0       	breq	.+20     	; 0x1b5a <stage_3+0x26>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	f9 f0       	breq	.+62     	; 0x1b88 <stage_3+0x54>
    1b4a:	f6 cf       	rjmp	.-20     	; 0x1b38 <stage_3+0x4>
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <stage_3+0x1e>
    1b50:	59 c0       	rjmp	.+178    	; 0x1c04 <stage_3+0xd0>
    1b52:	50 f1       	brcs	.+84     	; 0x1ba8 <stage_3+0x74>
    1b54:	85 30       	cpi	r24, 0x05	; 5
    1b56:	a1 f1       	breq	.+104    	; 0x1bc0 <stage_3+0x8c>
    1b58:	ef cf       	rjmp	.-34     	; 0x1b38 <stage_3+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    1b5a:	c4 e8       	ldi	r28, 0x84	; 132
    1b5c:	dd e0       	ldi	r29, 0x0D	; 13
    1b5e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b60:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b62:	4a e6       	ldi	r20, 0x6A	; 106
    1b64:	59 e0       	ldi	r21, 0x09	; 9
    1b66:	88 a1       	ldd	r24, Y+32	; 0x20
    1b68:	99 a1       	ldd	r25, Y+33	; 0x21
    1b6a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    1b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b72:	42 e1       	ldi	r20, 0x12	; 18
    1b74:	57 e0       	ldi	r21, 0x07	; 7
    1b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b78:	0e 94 21 16 	call	0x2c42	; 0x2c42 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	4c c0       	rjmp	.+152    	; 0x1c18 <stage_3+0xe4>
			
				state_s3=STAGE_GET_TIME;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1b86:	d8 cf       	rjmp	.-80     	; 0x1b38 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1b88:	84 ef       	ldi	r24, 0xF4	; 244
    1b8a:	9d e0       	ldi	r25, 0x0D	; 13
    1b8c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1b96:	d0 cf       	rjmp	.-96     	; 0x1b38 <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    1b98:	0e 94 26 22 	call	0x444c	; 0x444c <SCD30_start_sampling>
				ADC_start_sampling();
    1b9c:	0e 94 17 22 	call	0x442e	; 0x442e <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1ba6:	c8 cf       	rjmp	.-112    	; 0x1b38 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1ba8:	0e 94 45 20 	call	0x408a	; 0x408a <SCD30_is_sampling_done>
    1bac:	88 23       	and	r24, r24
    1bae:	b1 f1       	breq	.+108    	; 0x1c1c <stage_3+0xe8>
    1bb0:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <ADC_is_sampling_done>
    1bb4:	88 23       	and	r24, r24
    1bb6:	a1 f1       	breq	.+104    	; 0x1c20 <stage_3+0xec>
				state_s3=STAGE_UPDATE_MRPP;
    1bb8:	85 e0       	ldi	r24, 0x05	; 5
    1bba:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1bbe:	bc cf       	rjmp	.-136    	; 0x1b38 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1bc0:	27 e1       	ldi	r18, 0x17	; 23
    1bc2:	3e e0       	ldi	r19, 0x0E	; 14
    1bc4:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    1bc8:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    1bcc:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    1bd0:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    1bd4:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    1bd8:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    1bdc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    1be0:	4a e6       	ldi	r20, 0x6A	; 106
    1be2:	59 e0       	ldi	r21, 0x09	; 9
    1be4:	67 e1       	ldi	r22, 0x17	; 23
    1be6:	7e e0       	ldi	r23, 0x0E	; 14
    1be8:	87 e0       	ldi	r24, 0x07	; 7
    1bea:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    1bee:	42 e1       	ldi	r20, 0x12	; 18
    1bf0:	57 e0       	ldi	r21, 0x07	; 7
    1bf2:	67 e1       	ldi	r22, 0x17	; 23
    1bf4:	7e e0       	ldi	r23, 0x0E	; 14
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	0e 94 80 15 	call	0x2b00	; 0x2b00 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    1bfc:	84 e0       	ldi	r24, 0x04	; 4
    1bfe:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1c02:	9a cf       	rjmp	.-204    	; 0x1b38 <stage_3+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1c04:	0e 94 a0 21 	call	0x4340	; 0x4340 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    1c08:	0e 94 54 22 	call	0x44a8	; 0x44a8 <SCD30_sensor_off>
				ADC_deinit_sampling();
    1c0c:	0e 94 1a 21 	call	0x4234	; 0x4234 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    1c10:	0e 94 44 22 	call	0x4488	; 0x4488 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <stage_3+0xee>
		switch(state_s3){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <stage_3+0xee>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <stage_3+0xee>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

Disassembly of section .text.send_body:

0000367c <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	e4 97       	sbiw	r28, 0x34	; 52
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    3690:	ae 01       	movw	r20, r28
    3692:	4c 5c       	subi	r20, 0xCC	; 204
    3694:	5f 4f       	sbci	r21, 0xFF	; 255
    3696:	be 01       	movw	r22, r28
    3698:	6f 5f       	subi	r22, 0xFF	; 255
    369a:	7f 4f       	sbci	r23, 0xFF	; 255
    369c:	0e 94 37 13 	call	0x266e	; 0x266e <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    36a0:	6c a9       	ldd	r22, Y+52	; 0x34
    36a2:	ce 01       	movw	r24, r28
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <LM_send_uplink>
}
    36aa:	e4 96       	adiw	r28, 0x34	; 52
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	df 91       	pop	r29
    36b8:	cf 91       	pop	r28
    36ba:	08 95       	ret

Disassembly of section .text.decode_body_response:

00003d2a <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    3d2a:	cf 93       	push	r28
	switch(status){
    3d2c:	62 30       	cpi	r22, 0x02	; 2
    3d2e:	71 f0       	breq	.+28     	; 0x3d4c <decode_body_response+0x22>
    3d30:	18 f4       	brcc	.+6      	; 0x3d38 <decode_body_response+0xe>
    3d32:	66 23       	and	r22, r22
    3d34:	31 f0       	breq	.+12     	; 0x3d42 <decode_body_response+0x18>
    3d36:	03 c0       	rjmp	.+6      	; 0x3d3e <decode_body_response+0x14>
    3d38:	64 50       	subi	r22, 0x04	; 4
    3d3a:	62 30       	cpi	r22, 0x02	; 2
    3d3c:	10 f0       	brcs	.+4      	; 0x3d42 <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    3d3e:	86 e1       	ldi	r24, 0x16	; 22
    3d40:	06 c0       	rjmp	.+12     	; 0x3d4e <decode_body_response+0x24>
    3d42:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    3d44:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <MRPP_set_body_sent>
			return success;
    3d48:	8c 2f       	mov	r24, r28
    3d4a:	01 c0       	rjmp	.+2      	; 0x3d4e <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    3d4c:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3d4e:	cf 91       	pop	r28
    3d50:	08 95       	ret

Disassembly of section .text.send_tail:

000036fa <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	e4 97       	sbiw	r28, 0x34	; 52
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    370e:	be 01       	movw	r22, r28
    3710:	6c 5c       	subi	r22, 0xCC	; 204
    3712:	7f 4f       	sbci	r23, 0xFF	; 255
    3714:	ce 01       	movw	r24, r28
    3716:	01 96       	adiw	r24, 0x01	; 1
    3718:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    371c:	6c a9       	ldd	r22, Y+52	; 0x34
    371e:	ce 01       	movw	r24, r28
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <LM_send_uplink>
}
    3726:	e4 96       	adiw	r28, 0x34	; 52
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	df 91       	pop	r29
    3734:	cf 91       	pop	r28
    3736:	08 95       	ret

Disassembly of section .text.send_msg:

00004124 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    4124:	0e 94 cb 13 	call	0x2796	; 0x2796 <uart1_hal_send_string>
    4128:	2f ef       	ldi	r18, 0xFF	; 255
    412a:	80 e7       	ldi	r24, 0x70	; 112
    412c:	92 e0       	ldi	r25, 0x02	; 2
    412e:	21 50       	subi	r18, 0x01	; 1
    4130:	80 40       	sbci	r24, 0x00	; 0
    4132:	90 40       	sbci	r25, 0x00	; 0
    4134:	e1 f7       	brne	.-8      	; 0x412e <send_msg+0xa>
    4136:	00 c0       	rjmp	.+0      	; 0x4138 <send_msg+0x14>
    4138:	00 00       	nop
    413a:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000b48 <MAINPG_start>:


static void send_msg(const char msg[]);


void MAINPG_start(){
 b48:	df 92       	push	r13
 b4a:	ef 92       	push	r14
 b4c:	ff 92       	push	r15
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	SCD30_STATUS scd30Status;
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
 b56:	d1 2c       	mov	r13, r1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 b58:	c0 e0       	ldi	r28, 0x00	; 0
 b5a:	1a c0       	rjmp	.+52     	; 0xb90 <MAINPG_start+0x48>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
 b5c:	c6 e0       	ldi	r28, 0x06	; 6
 b5e:	18 c0       	rjmp	.+48     	; 0xb90 <MAINPG_start+0x48>
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
 b60:	c5 e0       	ldi	r28, 0x05	; 5
 b62:	16 c0       	rjmp	.+44     	; 0xb90 <MAINPG_start+0x48>
 b64:	c5 e0       	ldi	r28, 0x05	; 5
 b66:	14 c0       	rjmp	.+40     	; 0xb90 <MAINPG_start+0x48>
 b68:	c5 e0       	ldi	r28, 0x05	; 5
 b6a:	12 c0       	rjmp	.+36     	; 0xb90 <MAINPG_start+0x48>
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
 b6c:	c5 e0       	ldi	r28, 0x05	; 5
 b6e:	10 c0       	rjmp	.+32     	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 b70:	c6 e1       	ldi	r28, 0x16	; 22
 b72:	0e c0       	rjmp	.+28     	; 0xb90 <MAINPG_start+0x48>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 b74:	c6 e1       	ldi	r28, 0x16	; 22
 b76:	0c c0       	rjmp	.+24     	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 b78:	c6 e1       	ldi	r28, 0x16	; 22
 b7a:	0a c0       	rjmp	.+20     	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b7c:	c6 e1       	ldi	r28, 0x16	; 22
 b7e:	08 c0       	rjmp	.+16     	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_INIT_MODULES:
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_SEND_HEADER:MAINPG_FATAL_ERROR;
 b80:	c6 e1       	ldi	r28, 0x16	; 22
 b82:	06 c0       	rjmp	.+12     	; 0xb90 <MAINPG_start+0x48>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 b84:	cd 2f       	mov	r28, r29
 b86:	04 c0       	rjmp	.+8      	; 0xb90 <MAINPG_start+0x48>
 b88:	cd 2f       	mov	r28, r29
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 b8c:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 b8e:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
	

	while(1){
		switch(state){
 b90:	ec 2f       	mov	r30, r28
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	e8 31       	cpi	r30, 0x18	; 24
 b96:	f1 05       	cpc	r31, r1
 b98:	d8 f7       	brcc	.-10     	; 0xb90 <MAINPG_start+0x48>
 b9a:	eb 5a       	subi	r30, 0xAB	; 171
 b9c:	ff 4f       	sbci	r31, 0xFF	; 255
 b9e:	0c 94 07 22 	jmp	0x440e	; 0x440e <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 ba2:	0e 94 9c 1b 	call	0x3738	; 0x3738 <uart0_hal_init>
				uart1_hal_init();
 ba6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <uart1_hal_init>
				TWI_HAL_init();
 baa:	0e 94 24 21 	call	0x4248	; 0x4248 <TWI_HAL_init>
				TC2_HAL_init();
 bae:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <TC2_HAL_init>
				rn2483_init();
 bb2:	0e 94 34 22 	call	0x4468	; 0x4468 <rn2483_init>
				SCD30_HAL_init();
 bb6:	0e 94 8b 21 	call	0x4316	; 0x4316 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
 bba:	0e 94 68 21 	call	0x42d0	; 0x42d0 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 bbe:	0e 94 6f 21 	call	0x42de	; 0x42de <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 bc2:	0e 94 7d 21 	call	0x42fa	; 0x42fa <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 bc6:	0e 94 76 21 	call	0x42ec	; 0x42ec <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
 bca:	0e 94 84 21 	call	0x4308	; 0x4308 <PM_HAL_LED_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 bce:	85 b1       	in	r24, 0x05	; 5
 bd0:	81 60       	ori	r24, 0x01	; 1
 bd2:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 bd4:	85 b1       	in	r24, 0x05	; 5
 bd6:	82 60       	ori	r24, 0x02	; 2
 bd8:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
 bda:	d1 10       	cpse	r13, r1
 bdc:	bf cf       	rjmp	.-130    	; 0xb5c <MAINPG_start+0x14>
 bde:	c1 e0       	ldi	r28, 0x01	; 1
 be0:	d7 cf       	rjmp	.-82     	; 0xb90 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
 be2:	0e 94 9e 20 	call	0x413c	; 0x413c <EM_has_deveui>
 be6:	88 23       	and	r24, r24
 be8:	09 f4       	brne	.+2      	; 0xbec <MAINPG_start+0xa4>
 bea:	ba cf       	rjmp	.-140    	; 0xb60 <MAINPG_start+0x18>
 bec:	0e 94 a9 20 	call	0x4152	; 0x4152 <EM_has_appeui>
 bf0:	88 23       	and	r24, r24
 bf2:	09 f4       	brne	.+2      	; 0xbf6 <MAINPG_start+0xae>
 bf4:	b7 cf       	rjmp	.-146    	; 0xb64 <MAINPG_start+0x1c>
 bf6:	0e 94 b4 20 	call	0x4168	; 0x4168 <EM_has_appkey>
 bfa:	88 23       	and	r24, r24
 bfc:	09 f4       	brne	.+2      	; 0xc00 <MAINPG_start+0xb8>
 bfe:	b4 cf       	rjmp	.-152    	; 0xb68 <MAINPG_start+0x20>
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
 c00:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <read_eeprom>
 c04:	88 23       	and	r24, r24
 c06:	09 f4       	brne	.+2      	; 0xc0a <MAINPG_start+0xc2>
 c08:	b1 cf       	rjmp	.-158    	; 0xb6c <MAINPG_start+0x24>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
 c0a:	c6 e0       	ldi	r28, 0x06	; 6
 c0c:	c1 cf       	rjmp	.-126    	; 0xb90 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 c0e:	62 e5       	ldi	r22, 0x52	; 82
 c10:	72 e0       	ldi	r23, 0x02	; 2
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				LED_start_try_join();
 c18:	0e 94 99 21 	call	0x4332	; 0x4332 <LED_start_try_join>
				lmStatus=join_lora();
 c1c:	0e 94 36 21 	call	0x426c	; 0x426c <join_lora>
 c20:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
 c22:	0e 94 60 21 	call	0x42c0	; 0x42c0 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
 c26:	8c 2f       	mov	r24, r28
 c28:	0e 94 53 20 	call	0x40a6	; 0x40a6 <decode_join_response>
 c2c:	c8 2f       	mov	r28, r24
			break;
 c2e:	b0 cf       	rjmp	.-160    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				LED_join_success();
 c30:	0e 94 1e 1b 	call	0x363c	; 0x363c <LED_join_success>
				state=MAINPG_INIT_RTC;
 c34:	c7 e0       	ldi	r28, 0x07	; 7
			break;
 c36:	ac cf       	rjmp	.-168    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 c38:	69 e5       	ldi	r22, 0x59	; 89
 c3a:	72 e0       	ldi	r23, 0x02	; 2
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				lmStatus=LM_wake_up();
 c42:	0e 94 72 22 	call	0x44e4	; 0x44e4 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 c46:	81 11       	cpse	r24, r1
 c48:	93 cf       	rjmp	.-218    	; 0xb70 <MAINPG_start+0x28>
 c4a:	c7 e0       	ldi	r28, 0x07	; 7
 c4c:	a1 cf       	rjmp	.-190    	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 c4e:	68 e6       	ldi	r22, 0x68	; 104
 c50:	72 e0       	ldi	r23, 0x02	; 2
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				LED_join_denied();
 c58:	0e 94 48 22 	call	0x4490	; 0x4490 <LED_join_denied>
 c5c:	2f ef       	ldi	r18, 0xFF	; 255
 c5e:	81 e1       	ldi	r24, 0x11	; 17
 c60:	9a e7       	ldi	r25, 0x7A	; 122
 c62:	21 50       	subi	r18, 0x01	; 1
 c64:	80 40       	sbci	r24, 0x00	; 0
 c66:	90 40       	sbci	r25, 0x00	; 0
 c68:	e1 f7       	brne	.-8      	; 0xc62 <MAINPG_start+0x11a>
 c6a:	00 c0       	rjmp	.+0      	; 0xc6c <MAINPG_start+0x124>
 c6c:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 c6e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
 c70:	8f cf       	rjmp	.-226    	; 0xb90 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 c72:	64 e7       	ldi	r22, 0x74	; 116
 c74:	72 e0       	ldi	r23, 0x02	; 2
 c76:	80 e0       	ldi	r24, 0x00	; 0
 c78:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 c7c:	81 e0       	ldi	r24, 0x01	; 1
 c7e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 c82:	81 11       	cpse	r24, r1
 c84:	77 cf       	rjmp	.-274    	; 0xb74 <MAINPG_start+0x2c>
 c86:	c9 e0       	ldi	r28, 0x09	; 9
 c88:	83 cf       	rjmp	.-250    	; 0xb90 <MAINPG_start+0x48>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 c8a:	6f e7       	ldi	r22, 0x7F	; 127
 c8c:	72 e0       	ldi	r23, 0x02	; 2
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 c94:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 c98:	81 11       	cpse	r24, r1
 c9a:	6e cf       	rjmp	.-292    	; 0xb78 <MAINPG_start+0x30>
 c9c:	c8 e0       	ldi	r28, 0x08	; 8
 c9e:	78 cf       	rjmp	.-272    	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 ca0:	61 e9       	ldi	r22, 0x91	; 145
 ca2:	72 e0       	ldi	r23, 0x02	; 2
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				rtcStatus=set_wakeup();
 caa:	0e 94 2b 22 	call	0x4456	; 0x4456 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 cae:	81 11       	cpse	r24, r1
 cb0:	65 cf       	rjmp	.-310    	; 0xb7c <MAINPG_start+0x34>
 cb2:	cb e0       	ldi	r28, 0x0B	; 11
 cb4:	6d cf       	rjmp	.-294    	; 0xb90 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 cb6:	66 ea       	ldi	r22, 0xA6	; 166
 cb8:	72 e0       	ldi	r23, 0x02	; 2
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				MRPP_init_group(cols, N_COLLECTIONS);
 cc0:	67 e0       	ldi	r22, 0x07	; 7
 cc2:	84 e8       	ldi	r24, 0x84	; 132
 cc4:	9d e0       	ldi	r25, 0x0D	; 13
 cc6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <MRPP_init_group>
				state=MAINPG_INIT_MODULES;
 cca:	ca e0       	ldi	r28, 0x0A	; 10
			break;
 ccc:	61 cf       	rjmp	.-318    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_INIT_MODULES:
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
 cce:	e0 90 0b 0e 	lds	r14, 0x0E0B	; 0x800e0b <ppmx>
 cd2:	f0 90 0c 0e 	lds	r15, 0x0E0C	; 0x800e0c <ppmx+0x1>
 cd6:	00 91 0d 0e 	lds	r16, 0x0E0D	; 0x800e0d <ppmx+0x2>
 cda:	10 91 0e 0e 	lds	r17, 0x0E0E	; 0x800e0e <ppmx+0x3>
 cde:	20 91 0f 0e 	lds	r18, 0x0E0F	; 0x800e0f <rrlx>
 ce2:	30 91 10 0e 	lds	r19, 0x0E10	; 0x800e10 <rrlx+0x1>
 ce6:	40 91 11 0e 	lds	r20, 0x0E11	; 0x800e11 <rrlx+0x2>
 cea:	50 91 12 0e 	lds	r21, 0x0E12	; 0x800e12 <rrlx+0x3>
 cee:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <vccx>
 cf2:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <vccx+0x1>
 cf6:	80 91 15 0e 	lds	r24, 0x0E15	; 0x800e15 <vccx+0x2>
 cfa:	90 91 16 0e 	lds	r25, 0x0E16	; 0x800e16 <vccx+0x3>
 cfe:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
 d02:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_SEND_HEADER:MAINPG_FATAL_ERROR;
 d06:	81 11       	cpse	r24, r1
 d08:	3b cf       	rjmp	.-394    	; 0xb80 <MAINPG_start+0x38>
 d0a:	cc e0       	ldi	r28, 0x0C	; 12
 d0c:	41 cf       	rjmp	.-382    	; 0xb90 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 d0e:	0e 94 1c 22 	call	0x4438	; 0x4438 <LM_is_free>
 d12:	88 23       	and	r24, r24
 d14:	09 f4       	brne	.+2      	; 0xd18 <MAINPG_start+0x1d0>
 d16:	3c cf       	rjmp	.-392    	; 0xb90 <MAINPG_start+0x48>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 d18:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 d1c:	4c e0       	ldi	r20, 0x0C	; 12
 d1e:	6d e0       	ldi	r22, 0x0D	; 13
 d20:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <decode_header_tail_response>
 d24:	c8 2f       	mov	r28, r24
			break;
 d26:	34 cf       	rjmp	.-408    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 d28:	0e 94 98 10 	call	0x2130	; 0x2130 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 d2c:	6e e0       	ldi	r22, 0x0E	; 14
 d2e:	0e 94 bf 20 	call	0x417e	; 0x417e <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 d32:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 d34:	c8 2f       	mov	r28, r24
			break;
 d36:	2c cf       	rjmp	.-424    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 d38:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 d3c:	6f e0       	ldi	r22, 0x0F	; 15
 d3e:	0e 94 bf 20 	call	0x417e	; 0x417e <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 d42:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 d44:	c8 2f       	mov	r28, r24
			break;
 d46:	24 cf       	rjmp	.-440    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 d48:	0e 94 99 0c 	call	0x1932	; 0x1932 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 d4c:	60 e1       	ldi	r22, 0x10	; 16
 d4e:	0e 94 bf 20 	call	0x417e	; 0x417e <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 d52:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 d54:	c8 2f       	mov	r28, r24
			break;
 d56:	1c cf       	rjmp	.-456    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
 d58:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 d5c:	62 e1       	ldi	r22, 0x12	; 18
 d5e:	0e 94 bf 20 	call	0x417e	; 0x417e <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
 d62:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 d64:	c8 2f       	mov	r28, r24
			break;
 d66:	14 cf       	rjmp	.-472    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 d68:	81 e3       	ldi	r24, 0x31	; 49
 d6a:	9e e0       	ldi	r25, 0x0E	; 14
 d6c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <MRPP_is_body_package_ready>
 d70:	88 23       	and	r24, r24
 d72:	09 f4       	brne	.+2      	; 0xd76 <MAINPG_start+0x22e>
 d74:	07 cf       	rjmp	.-498    	; 0xb84 <MAINPG_start+0x3c>
 d76:	0e 94 1c 22 	call	0x4438	; 0x4438 <LM_is_free>
 d7a:	88 23       	and	r24, r24
 d7c:	09 f4       	brne	.+2      	; 0xd80 <MAINPG_start+0x238>
 d7e:	04 cf       	rjmp	.-504    	; 0xb88 <MAINPG_start+0x40>
					lmStatus=send_body(bodyIndex);
 d80:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <bodyIndex>
 d84:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <bodyIndex+0x1>
 d88:	0e 94 3e 1b 	call	0x367c	; 0x367c <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 d8c:	4d 2f       	mov	r20, r29
 d8e:	68 2f       	mov	r22, r24
 d90:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <bodyIndex>
 d94:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <bodyIndex+0x1>
 d98:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <decode_body_response>
 d9c:	c8 2f       	mov	r28, r24
 d9e:	f8 ce       	rjmp	.-528    	; 0xb90 <MAINPG_start+0x48>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 da0:	0e 94 21 22 	call	0x4442	; 0x4442 <MRPP_all_body_package_sent>
 da4:	88 23       	and	r24, r24
 da6:	09 f4       	brne	.+2      	; 0xdaa <MAINPG_start+0x262>
 da8:	f1 ce       	rjmp	.-542    	; 0xb8c <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
 daa:	c3 e1       	ldi	r28, 0x13	; 19
 dac:	f1 ce       	rjmp	.-542    	; 0xb90 <MAINPG_start+0x48>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 dae:	0e 94 1c 22 	call	0x4438	; 0x4438 <LM_is_free>
 db2:	88 23       	and	r24, r24
 db4:	09 f4       	brne	.+2      	; 0xdb8 <MAINPG_start+0x270>
 db6:	ec ce       	rjmp	.-552    	; 0xb90 <MAINPG_start+0x48>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 db8:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 dbc:	43 e1       	ldi	r20, 0x13	; 19
 dbe:	64 e1       	ldi	r22, 0x14	; 20
 dc0:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <decode_header_tail_response>
 dc4:	c8 2f       	mov	r28, r24
				
			break;
 dc6:	e4 ce       	rjmp	.-568    	; 0xb90 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 dc8:	0e 94 6f 22 	call	0x44de	; 0x44de <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 dcc:	dd 24       	eor	r13, r13
 dce:	d3 94       	inc	r13
 dd0:	81 11       	cpse	r24, r1
 dd2:	d1 2c       	mov	r13, r1
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
 dd4:	80 e0       	ldi	r24, 0x00	; 0
 dd6:	0e 94 ca 20 	call	0x4194	; 0x4194 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
 dda:	80 e0       	ldi	r24, 0x00	; 0
 ddc:	0e 94 de 20 	call	0x41bc	; 0x41bc <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
 de0:	80 e0       	ldi	r24, 0x00	; 0
 de2:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
 de6:	80 e0       	ldi	r24, 0x00	; 0
 de8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
 dec:	80 e0       	ldi	r24, 0x00	; 0
 dee:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <PM_HAL_LED_power>
				
				state=MAINPG_SLEEP;
 df2:	c5 e1       	ldi	r28, 0x15	; 21
			break;
 df4:	cd ce       	rjmp	.-614    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 df6:	62 eb       	ldi	r22, 0xB2	; 178
 df8:	72 e0       	ldi	r23, 0x02	; 2
 dfa:	80 e0       	ldi	r24, 0x00	; 0
 dfc:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				PM_HAL_enter_power_down();
 e00:	0e 94 9a 1a 	call	0x3534	; 0x3534 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 e04:	6a eb       	ldi	r22, 0xBA	; 186
 e06:	72 e0       	ldi	r23, 0x02	; 2
 e08:	80 e0       	ldi	r24, 0x00	; 0
 e0a:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				state=MAINPG_INIT_HW;
 e0e:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 e10:	bf ce       	rjmp	.-642    	; 0xb90 <MAINPG_start+0x48>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				LED_conf_err();
 e12:	0e 94 4c 22 	call	0x4498	; 0x4498 <LED_conf_err>
				print_debug("Conf err\n\r");
 e16:	62 ec       	ldi	r22, 0xC2	; 194
 e18:	72 e0       	ldi	r23, 0x02	; 2
 e1a:	80 e0       	ldi	r24, 0x00	; 0
 e1c:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				state=MAINPG_END;
 e20:	c7 e1       	ldi	r28, 0x17	; 23
			break;
 e22:	b6 ce       	rjmp	.-660    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 e24:	6d ec       	ldi	r22, 0xCD	; 205
 e26:	72 e0       	ldi	r23, 0x02	; 2
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				LED_fatal_err();
 e2e:	0e 94 50 22 	call	0x44a0	; 0x44a0 <LED_fatal_err>
				state=MAINPG_END;
 e32:	c7 e1       	ldi	r28, 0x17	; 23
			break;
 e34:	ad ce       	rjmp	.-678    	; 0xb90 <MAINPG_start+0x48>
			
			case MAINPG_END:
				print_debug("END\n\r");
 e36:	6b ed       	ldi	r22, 0xDB	; 219
 e38:	72 e0       	ldi	r23, 0x02	; 2
 e3a:	80 e0       	ldi	r24, 0x00	; 0
 e3c:	0e 94 92 20 	call	0x4124	; 0x4124 <send_msg>
				return;
			break;	
		}
	}
}
 e40:	df 91       	pop	r29
 e42:	cf 91       	pop	r28
 e44:	1f 91       	pop	r17
 e46:	0f 91       	pop	r16
 e48:	ff 90       	pop	r15
 e4a:	ef 90       	pop	r14
 e4c:	df 90       	pop	r13
 e4e:	08 95       	ret

Disassembly of section .text.calc_crc8:

000038c8 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    38c8:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    38ca:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    38cc:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    38ce:	14 c0       	rjmp	.+40     	; 0x38f8 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    38d0:	fa 01       	movw	r30, r20
    38d2:	e3 0f       	add	r30, r19
    38d4:	f1 1d       	adc	r31, r1
    38d6:	90 81       	ld	r25, Z
    38d8:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    38da:	28 e0       	ldi	r18, 0x08	; 8
    38dc:	0a c0       	rjmp	.+20     	; 0x38f2 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    38de:	88 23       	and	r24, r24
    38e0:	34 f4       	brge	.+12     	; 0x38ee <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	91 e3       	ldi	r25, 0x31	; 49
    38ea:	89 27       	eor	r24, r25
    38ec:	01 c0       	rjmp	.+2      	; 0x38f0 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    38ee:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    38f0:	21 50       	subi	r18, 0x01	; 1
    38f2:	21 11       	cpse	r18, r1
    38f4:	f4 cf       	rjmp	.-24     	; 0x38de <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    38f6:	3f 5f       	subi	r19, 0xFF	; 255
    38f8:	36 17       	cp	r19, r22
    38fa:	50 f3       	brcs	.-44     	; 0x38d0 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    38fc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000434e <__subsf3>:
    434e:	50 58       	subi	r21, 0x80	; 128

00004350 <__addsf3>:
    4350:	bb 27       	eor	r27, r27
    4352:	aa 27       	eor	r26, r26
    4354:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__addsf3x>
    4358:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f9e <__addsf3x>:
    1f9e:	11 c0       	rjmp	.+34     	; 0x1fc2 <__addsf3x+0x24>
    1fa0:	0e 94 ae 21 	call	0x435c	; 0x435c <__fp_pscA>
    1fa4:	38 f0       	brcs	.+14     	; 0x1fb4 <__addsf3x+0x16>
    1fa6:	0e 94 b5 21 	call	0x436a	; 0x436a <__fp_pscB>
    1faa:	20 f0       	brcs	.+8      	; 0x1fb4 <__addsf3x+0x16>
    1fac:	39 f4       	brne	.+14     	; 0x1fbc <__addsf3x+0x1e>
    1fae:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb0:	19 f4       	brne	.+6      	; 0x1fb8 <__addsf3x+0x1a>
    1fb2:	26 f4       	brtc	.+8      	; 0x1fbc <__addsf3x+0x1e>
    1fb4:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__fp_nan>
    1fb8:	0e f4       	brtc	.+2      	; 0x1fbc <__addsf3x+0x1e>
    1fba:	e0 95       	com	r30
    1fbc:	e7 fb       	bst	r30, 7
    1fbe:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__fp_inf>
    1fc2:	e9 2f       	mov	r30, r25
    1fc4:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__fp_split3>
    1fc8:	58 f3       	brcs	.-42     	; 0x1fa0 <__addsf3x+0x2>
    1fca:	ba 17       	cp	r27, r26
    1fcc:	62 07       	cpc	r22, r18
    1fce:	73 07       	cpc	r23, r19
    1fd0:	84 07       	cpc	r24, r20
    1fd2:	95 07       	cpc	r25, r21
    1fd4:	20 f0       	brcs	.+8      	; 0x1fde <__addsf3x+0x40>
    1fd6:	79 f4       	brne	.+30     	; 0x1ff6 <__addsf3x+0x58>
    1fd8:	a6 f5       	brtc	.+104    	; 0x2042 <__addsf3x+0xa4>
    1fda:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__fp_zero>
    1fde:	0e f4       	brtc	.+2      	; 0x1fe2 <__addsf3x+0x44>
    1fe0:	e0 95       	com	r30
    1fe2:	0b 2e       	mov	r0, r27
    1fe4:	ba 2f       	mov	r27, r26
    1fe6:	a0 2d       	mov	r26, r0
    1fe8:	0b 01       	movw	r0, r22
    1fea:	b9 01       	movw	r22, r18
    1fec:	90 01       	movw	r18, r0
    1fee:	0c 01       	movw	r0, r24
    1ff0:	ca 01       	movw	r24, r20
    1ff2:	a0 01       	movw	r20, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	ff 27       	eor	r31, r31
    1ff8:	59 1b       	sub	r21, r25
    1ffa:	99 f0       	breq	.+38     	; 0x2022 <__addsf3x+0x84>
    1ffc:	59 3f       	cpi	r21, 0xF9	; 249
    1ffe:	50 f4       	brcc	.+20     	; 0x2014 <__addsf3x+0x76>
    2000:	50 3e       	cpi	r21, 0xE0	; 224
    2002:	68 f1       	brcs	.+90     	; 0x205e <__addsf3x+0xc0>
    2004:	1a 16       	cp	r1, r26
    2006:	f0 40       	sbci	r31, 0x00	; 0
    2008:	a2 2f       	mov	r26, r18
    200a:	23 2f       	mov	r18, r19
    200c:	34 2f       	mov	r19, r20
    200e:	44 27       	eor	r20, r20
    2010:	58 5f       	subi	r21, 0xF8	; 248
    2012:	f3 cf       	rjmp	.-26     	; 0x1ffa <__addsf3x+0x5c>
    2014:	46 95       	lsr	r20
    2016:	37 95       	ror	r19
    2018:	27 95       	ror	r18
    201a:	a7 95       	ror	r26
    201c:	f0 40       	sbci	r31, 0x00	; 0
    201e:	53 95       	inc	r21
    2020:	c9 f7       	brne	.-14     	; 0x2014 <__addsf3x+0x76>
    2022:	7e f4       	brtc	.+30     	; 0x2042 <__addsf3x+0xa4>
    2024:	1f 16       	cp	r1, r31
    2026:	ba 0b       	sbc	r27, r26
    2028:	62 0b       	sbc	r22, r18
    202a:	73 0b       	sbc	r23, r19
    202c:	84 0b       	sbc	r24, r20
    202e:	ba f0       	brmi	.+46     	; 0x205e <__addsf3x+0xc0>
    2030:	91 50       	subi	r25, 0x01	; 1
    2032:	a1 f0       	breq	.+40     	; 0x205c <__addsf3x+0xbe>
    2034:	ff 0f       	add	r31, r31
    2036:	bb 1f       	adc	r27, r27
    2038:	66 1f       	adc	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	88 1f       	adc	r24, r24
    203e:	c2 f7       	brpl	.-16     	; 0x2030 <__addsf3x+0x92>
    2040:	0e c0       	rjmp	.+28     	; 0x205e <__addsf3x+0xc0>
    2042:	ba 0f       	add	r27, r26
    2044:	62 1f       	adc	r22, r18
    2046:	73 1f       	adc	r23, r19
    2048:	84 1f       	adc	r24, r20
    204a:	48 f4       	brcc	.+18     	; 0x205e <__addsf3x+0xc0>
    204c:	87 95       	ror	r24
    204e:	77 95       	ror	r23
    2050:	67 95       	ror	r22
    2052:	b7 95       	ror	r27
    2054:	f7 95       	ror	r31
    2056:	9e 3f       	cpi	r25, 0xFE	; 254
    2058:	08 f0       	brcs	.+2      	; 0x205c <__addsf3x+0xbe>
    205a:	b0 cf       	rjmp	.-160    	; 0x1fbc <__addsf3x+0x1e>
    205c:	93 95       	inc	r25
    205e:	88 0f       	add	r24, r24
    2060:	08 f0       	brcs	.+2      	; 0x2064 <__addsf3x+0xc6>
    2062:	99 27       	eor	r25, r25
    2064:	ee 0f       	add	r30, r30
    2066:	97 95       	ror	r25
    2068:	87 95       	ror	r24
    206a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000044b0 <__divsf3>:
    44b0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__divsf3x>
    44b4:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001d14 <__divsf3x>:
    1d14:	10 c0       	rjmp	.+32     	; 0x1d36 <__divsf3x+0x22>
    1d16:	0e 94 b5 21 	call	0x436a	; 0x436a <__fp_pscB>
    1d1a:	58 f0       	brcs	.+22     	; 0x1d32 <__divsf3x+0x1e>
    1d1c:	0e 94 ae 21 	call	0x435c	; 0x435c <__fp_pscA>
    1d20:	40 f0       	brcs	.+16     	; 0x1d32 <__divsf3x+0x1e>
    1d22:	29 f4       	brne	.+10     	; 0x1d2e <__divsf3x+0x1a>
    1d24:	5f 3f       	cpi	r21, 0xFF	; 255
    1d26:	29 f0       	breq	.+10     	; 0x1d32 <__divsf3x+0x1e>
    1d28:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__fp_inf>
    1d2c:	51 11       	cpse	r21, r1
    1d2e:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_szero>
    1d32:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__fp_nan>
    1d36:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__fp_split3>
    1d3a:	68 f3       	brcs	.-38     	; 0x1d16 <__divsf3x+0x2>

00001d3c <__divsf3_pse>:
    1d3c:	99 23       	and	r25, r25
    1d3e:	b1 f3       	breq	.-20     	; 0x1d2c <__divsf3x+0x18>
    1d40:	55 23       	and	r21, r21
    1d42:	91 f3       	breq	.-28     	; 0x1d28 <__divsf3x+0x14>
    1d44:	95 1b       	sub	r25, r21
    1d46:	55 0b       	sbc	r21, r21
    1d48:	bb 27       	eor	r27, r27
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	62 17       	cp	r22, r18
    1d4e:	73 07       	cpc	r23, r19
    1d50:	84 07       	cpc	r24, r20
    1d52:	38 f0       	brcs	.+14     	; 0x1d62 <__divsf3_pse+0x26>
    1d54:	9f 5f       	subi	r25, 0xFF	; 255
    1d56:	5f 4f       	sbci	r21, 0xFF	; 255
    1d58:	22 0f       	add	r18, r18
    1d5a:	33 1f       	adc	r19, r19
    1d5c:	44 1f       	adc	r20, r20
    1d5e:	aa 1f       	adc	r26, r26
    1d60:	a9 f3       	breq	.-22     	; 0x1d4c <__divsf3_pse+0x10>
    1d62:	35 d0       	rcall	.+106    	; 0x1dce <__divsf3_pse+0x92>
    1d64:	0e 2e       	mov	r0, r30
    1d66:	3a f0       	brmi	.+14     	; 0x1d76 <__divsf3_pse+0x3a>
    1d68:	e0 e8       	ldi	r30, 0x80	; 128
    1d6a:	32 d0       	rcall	.+100    	; 0x1dd0 <__divsf3_pse+0x94>
    1d6c:	91 50       	subi	r25, 0x01	; 1
    1d6e:	50 40       	sbci	r21, 0x00	; 0
    1d70:	e6 95       	lsr	r30
    1d72:	00 1c       	adc	r0, r0
    1d74:	ca f7       	brpl	.-14     	; 0x1d68 <__divsf3_pse+0x2c>
    1d76:	2b d0       	rcall	.+86     	; 0x1dce <__divsf3_pse+0x92>
    1d78:	fe 2f       	mov	r31, r30
    1d7a:	29 d0       	rcall	.+82     	; 0x1dce <__divsf3_pse+0x92>
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	88 1f       	adc	r24, r24
    1d82:	bb 1f       	adc	r27, r27
    1d84:	26 17       	cp	r18, r22
    1d86:	37 07       	cpc	r19, r23
    1d88:	48 07       	cpc	r20, r24
    1d8a:	ab 07       	cpc	r26, r27
    1d8c:	b0 e8       	ldi	r27, 0x80	; 128
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <__divsf3_pse+0x56>
    1d90:	bb 0b       	sbc	r27, r27
    1d92:	80 2d       	mov	r24, r0
    1d94:	bf 01       	movw	r22, r30
    1d96:	ff 27       	eor	r31, r31
    1d98:	93 58       	subi	r25, 0x83	; 131
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	3a f0       	brmi	.+14     	; 0x1dac <__divsf3_pse+0x70>
    1d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1da0:	51 05       	cpc	r21, r1
    1da2:	78 f0       	brcs	.+30     	; 0x1dc2 <__divsf3_pse+0x86>
    1da4:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__fp_inf>
    1da8:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_szero>
    1dac:	5f 3f       	cpi	r21, 0xFF	; 255
    1dae:	e4 f3       	brlt	.-8      	; 0x1da8 <__divsf3_pse+0x6c>
    1db0:	98 3e       	cpi	r25, 0xE8	; 232
    1db2:	d4 f3       	brlt	.-12     	; 0x1da8 <__divsf3_pse+0x6c>
    1db4:	86 95       	lsr	r24
    1db6:	77 95       	ror	r23
    1db8:	67 95       	ror	r22
    1dba:	b7 95       	ror	r27
    1dbc:	f7 95       	ror	r31
    1dbe:	9f 5f       	subi	r25, 0xFF	; 255
    1dc0:	c9 f7       	brne	.-14     	; 0x1db4 <__divsf3_pse+0x78>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	91 1d       	adc	r25, r1
    1dc6:	96 95       	lsr	r25
    1dc8:	87 95       	ror	r24
    1dca:	97 f9       	bld	r25, 7
    1dcc:	08 95       	ret
    1dce:	e1 e0       	ldi	r30, 0x01	; 1
    1dd0:	66 0f       	add	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	62 17       	cp	r22, r18
    1dda:	73 07       	cpc	r23, r19
    1ddc:	84 07       	cpc	r24, r20
    1dde:	ba 07       	cpc	r27, r26
    1de0:	20 f0       	brcs	.+8      	; 0x1dea <__divsf3_pse+0xae>
    1de2:	62 1b       	sub	r22, r18
    1de4:	73 0b       	sbc	r23, r19
    1de6:	84 0b       	sbc	r24, r20
    1de8:	ba 0b       	sbc	r27, r26
    1dea:	ee 1f       	adc	r30, r30
    1dec:	88 f7       	brcc	.-30     	; 0x1dd0 <__divsf3_pse+0x94>
    1dee:	e0 95       	com	r30
    1df0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d64 <__fixunssfsi>:
    2d64:	0e 94 80 1a 	call	0x3500	; 0x3500 <__fp_splitA>
    2d68:	88 f0       	brcs	.+34     	; 0x2d8c <__fixunssfsi+0x28>
    2d6a:	9f 57       	subi	r25, 0x7F	; 127
    2d6c:	98 f0       	brcs	.+38     	; 0x2d94 <__fixunssfsi+0x30>
    2d6e:	b9 2f       	mov	r27, r25
    2d70:	99 27       	eor	r25, r25
    2d72:	b7 51       	subi	r27, 0x17	; 23
    2d74:	b0 f0       	brcs	.+44     	; 0x2da2 <__fixunssfsi+0x3e>
    2d76:	e1 f0       	breq	.+56     	; 0x2db0 <__fixunssfsi+0x4c>
    2d78:	66 0f       	add	r22, r22
    2d7a:	77 1f       	adc	r23, r23
    2d7c:	88 1f       	adc	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	1a f0       	brmi	.+6      	; 0x2d88 <__fixunssfsi+0x24>
    2d82:	ba 95       	dec	r27
    2d84:	c9 f7       	brne	.-14     	; 0x2d78 <__fixunssfsi+0x14>
    2d86:	14 c0       	rjmp	.+40     	; 0x2db0 <__fixunssfsi+0x4c>
    2d88:	b1 30       	cpi	r27, 0x01	; 1
    2d8a:	91 f0       	breq	.+36     	; 0x2db0 <__fixunssfsi+0x4c>
    2d8c:	0e 94 bc 21 	call	0x4378	; 0x4378 <__fp_zero>
    2d90:	b1 e0       	ldi	r27, 0x01	; 1
    2d92:	08 95       	ret
    2d94:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__fp_zero>
    2d98:	67 2f       	mov	r22, r23
    2d9a:	78 2f       	mov	r23, r24
    2d9c:	88 27       	eor	r24, r24
    2d9e:	b8 5f       	subi	r27, 0xF8	; 248
    2da0:	39 f0       	breq	.+14     	; 0x2db0 <__fixunssfsi+0x4c>
    2da2:	b9 3f       	cpi	r27, 0xF9	; 249
    2da4:	cc f3       	brlt	.-14     	; 0x2d98 <__fixunssfsi+0x34>
    2da6:	86 95       	lsr	r24
    2da8:	77 95       	ror	r23
    2daa:	67 95       	ror	r22
    2dac:	b3 95       	inc	r27
    2dae:	d9 f7       	brne	.-10     	; 0x2da6 <__fixunssfsi+0x42>
    2db0:	3e f4       	brtc	.+14     	; 0x2dc0 <__fixunssfsi+0x5c>
    2db2:	90 95       	com	r25
    2db4:	80 95       	com	r24
    2db6:	70 95       	com	r23
    2db8:	61 95       	neg	r22
    2dba:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000292a <__floatunsisf>:
    292a:	e8 94       	clt
    292c:	09 c0       	rjmp	.+18     	; 0x2940 <__floatsisf+0x12>

0000292e <__floatsisf>:
    292e:	97 fb       	bst	r25, 7
    2930:	3e f4       	brtc	.+14     	; 0x2940 <__floatsisf+0x12>
    2932:	90 95       	com	r25
    2934:	80 95       	com	r24
    2936:	70 95       	com	r23
    2938:	61 95       	neg	r22
    293a:	7f 4f       	sbci	r23, 0xFF	; 255
    293c:	8f 4f       	sbci	r24, 0xFF	; 255
    293e:	9f 4f       	sbci	r25, 0xFF	; 255
    2940:	99 23       	and	r25, r25
    2942:	a9 f0       	breq	.+42     	; 0x296e <__floatsisf+0x40>
    2944:	f9 2f       	mov	r31, r25
    2946:	96 e9       	ldi	r25, 0x96	; 150
    2948:	bb 27       	eor	r27, r27
    294a:	93 95       	inc	r25
    294c:	f6 95       	lsr	r31
    294e:	87 95       	ror	r24
    2950:	77 95       	ror	r23
    2952:	67 95       	ror	r22
    2954:	b7 95       	ror	r27
    2956:	f1 11       	cpse	r31, r1
    2958:	f8 cf       	rjmp	.-16     	; 0x294a <__floatsisf+0x1c>
    295a:	fa f4       	brpl	.+62     	; 0x299a <__floatsisf+0x6c>
    295c:	bb 0f       	add	r27, r27
    295e:	11 f4       	brne	.+4      	; 0x2964 <__floatsisf+0x36>
    2960:	60 ff       	sbrs	r22, 0
    2962:	1b c0       	rjmp	.+54     	; 0x299a <__floatsisf+0x6c>
    2964:	6f 5f       	subi	r22, 0xFF	; 255
    2966:	7f 4f       	sbci	r23, 0xFF	; 255
    2968:	8f 4f       	sbci	r24, 0xFF	; 255
    296a:	9f 4f       	sbci	r25, 0xFF	; 255
    296c:	16 c0       	rjmp	.+44     	; 0x299a <__floatsisf+0x6c>
    296e:	88 23       	and	r24, r24
    2970:	11 f0       	breq	.+4      	; 0x2976 <__floatsisf+0x48>
    2972:	96 e9       	ldi	r25, 0x96	; 150
    2974:	11 c0       	rjmp	.+34     	; 0x2998 <__floatsisf+0x6a>
    2976:	77 23       	and	r23, r23
    2978:	21 f0       	breq	.+8      	; 0x2982 <__floatsisf+0x54>
    297a:	9e e8       	ldi	r25, 0x8E	; 142
    297c:	87 2f       	mov	r24, r23
    297e:	76 2f       	mov	r23, r22
    2980:	05 c0       	rjmp	.+10     	; 0x298c <__floatsisf+0x5e>
    2982:	66 23       	and	r22, r22
    2984:	71 f0       	breq	.+28     	; 0x29a2 <__floatsisf+0x74>
    2986:	96 e8       	ldi	r25, 0x86	; 134
    2988:	86 2f       	mov	r24, r22
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	2a f0       	brmi	.+10     	; 0x299a <__floatsisf+0x6c>
    2990:	9a 95       	dec	r25
    2992:	66 0f       	add	r22, r22
    2994:	77 1f       	adc	r23, r23
    2996:	88 1f       	adc	r24, r24
    2998:	da f7       	brpl	.-10     	; 0x2990 <__floatsisf+0x62>
    299a:	88 0f       	add	r24, r24
    299c:	96 95       	lsr	r25
    299e:	87 95       	ror	r24
    29a0:	97 f9       	bld	r25, 7
    29a2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004402 <__fp_inf>:
    4402:	97 f9       	bld	r25, 7
    4404:	9f 67       	ori	r25, 0x7F	; 127
    4406:	80 e8       	ldi	r24, 0x80	; 128
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000044fc <__fp_nan>:
    44fc:	9f ef       	ldi	r25, 0xFF	; 255
    44fe:	80 ec       	ldi	r24, 0xC0	; 192
    4500:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000435c <__fp_pscA>:
    435c:	00 24       	eor	r0, r0
    435e:	0a 94       	dec	r0
    4360:	16 16       	cp	r1, r22
    4362:	17 06       	cpc	r1, r23
    4364:	18 06       	cpc	r1, r24
    4366:	09 06       	cpc	r0, r25
    4368:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000436a <__fp_pscB>:
    436a:	00 24       	eor	r0, r0
    436c:	0a 94       	dec	r0
    436e:	12 16       	cp	r1, r18
    4370:	13 06       	cpc	r1, r19
    4372:	14 06       	cpc	r1, r20
    4374:	05 06       	cpc	r0, r21
    4376:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003e8a <__fp_round>:
    3e8a:	09 2e       	mov	r0, r25
    3e8c:	03 94       	inc	r0
    3e8e:	00 0c       	add	r0, r0
    3e90:	11 f4       	brne	.+4      	; 0x3e96 <__fp_round+0xc>
    3e92:	88 23       	and	r24, r24
    3e94:	52 f0       	brmi	.+20     	; 0x3eaa <__fp_round+0x20>
    3e96:	bb 0f       	add	r27, r27
    3e98:	40 f4       	brcc	.+16     	; 0x3eaa <__fp_round+0x20>
    3e9a:	bf 2b       	or	r27, r31
    3e9c:	11 f4       	brne	.+4      	; 0x3ea2 <__fp_round+0x18>
    3e9e:	60 ff       	sbrs	r22, 0
    3ea0:	04 c0       	rjmp	.+8      	; 0x3eaa <__fp_round+0x20>
    3ea2:	6f 5f       	subi	r22, 0xFF	; 255
    3ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eaa:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000034f0 <__fp_split3>:
    34f0:	57 fd       	sbrc	r21, 7
    34f2:	90 58       	subi	r25, 0x80	; 128
    34f4:	44 0f       	add	r20, r20
    34f6:	55 1f       	adc	r21, r21
    34f8:	59 f0       	breq	.+22     	; 0x3510 <__fp_splitA+0x10>
    34fa:	5f 3f       	cpi	r21, 0xFF	; 255
    34fc:	71 f0       	breq	.+28     	; 0x351a <__fp_splitA+0x1a>
    34fe:	47 95       	ror	r20

00003500 <__fp_splitA>:
    3500:	88 0f       	add	r24, r24
    3502:	97 fb       	bst	r25, 7
    3504:	99 1f       	adc	r25, r25
    3506:	61 f0       	breq	.+24     	; 0x3520 <__fp_splitA+0x20>
    3508:	9f 3f       	cpi	r25, 0xFF	; 255
    350a:	79 f0       	breq	.+30     	; 0x352a <__fp_splitA+0x2a>
    350c:	87 95       	ror	r24
    350e:	08 95       	ret
    3510:	12 16       	cp	r1, r18
    3512:	13 06       	cpc	r1, r19
    3514:	14 06       	cpc	r1, r20
    3516:	55 1f       	adc	r21, r21
    3518:	f2 cf       	rjmp	.-28     	; 0x34fe <__fp_split3+0xe>
    351a:	46 95       	lsr	r20
    351c:	f1 df       	rcall	.-30     	; 0x3500 <__fp_splitA>
    351e:	08 c0       	rjmp	.+16     	; 0x3530 <__fp_splitA+0x30>
    3520:	16 16       	cp	r1, r22
    3522:	17 06       	cpc	r1, r23
    3524:	18 06       	cpc	r1, r24
    3526:	99 1f       	adc	r25, r25
    3528:	f1 cf       	rjmp	.-30     	; 0x350c <__fp_splitA+0xc>
    352a:	86 95       	lsr	r24
    352c:	71 05       	cpc	r23, r1
    352e:	61 05       	cpc	r22, r1
    3530:	08 94       	sec
    3532:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004378 <__fp_zero>:
    4378:	e8 94       	clt

0000437a <__fp_szero>:
    437a:	bb 27       	eor	r27, r27
    437c:	66 27       	eor	r22, r22
    437e:	77 27       	eor	r23, r23
    4380:	cb 01       	movw	r24, r22
    4382:	97 f9       	bld	r25, 7
    4384:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000044b8 <__mulsf3>:
    44b8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__mulsf3x>
    44bc:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001eca <__mulsf3x>:
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <__mulsf3x+0x20>
    1ecc:	0e 94 ae 21 	call	0x435c	; 0x435c <__fp_pscA>
    1ed0:	38 f0       	brcs	.+14     	; 0x1ee0 <__mulsf3x+0x16>
    1ed2:	0e 94 b5 21 	call	0x436a	; 0x436a <__fp_pscB>
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <__mulsf3x+0x16>
    1ed8:	95 23       	and	r25, r21
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <__mulsf3x+0x16>
    1edc:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__fp_inf>
    1ee0:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__fp_nan>
    1ee4:	11 24       	eor	r1, r1
    1ee6:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_szero>
    1eea:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__fp_split3>
    1eee:	70 f3       	brcs	.-36     	; 0x1ecc <__mulsf3x+0x2>

00001ef0 <__mulsf3_pse>:
    1ef0:	95 9f       	mul	r25, r21
    1ef2:	c1 f3       	breq	.-16     	; 0x1ee4 <__mulsf3x+0x1a>
    1ef4:	95 0f       	add	r25, r21
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	55 1f       	adc	r21, r21
    1efa:	62 9f       	mul	r22, r18
    1efc:	f0 01       	movw	r30, r0
    1efe:	72 9f       	mul	r23, r18
    1f00:	bb 27       	eor	r27, r27
    1f02:	f0 0d       	add	r31, r0
    1f04:	b1 1d       	adc	r27, r1
    1f06:	63 9f       	mul	r22, r19
    1f08:	aa 27       	eor	r26, r26
    1f0a:	f0 0d       	add	r31, r0
    1f0c:	b1 1d       	adc	r27, r1
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	64 9f       	mul	r22, r20
    1f12:	66 27       	eor	r22, r22
    1f14:	b0 0d       	add	r27, r0
    1f16:	a1 1d       	adc	r26, r1
    1f18:	66 1f       	adc	r22, r22
    1f1a:	82 9f       	mul	r24, r18
    1f1c:	22 27       	eor	r18, r18
    1f1e:	b0 0d       	add	r27, r0
    1f20:	a1 1d       	adc	r26, r1
    1f22:	62 1f       	adc	r22, r18
    1f24:	73 9f       	mul	r23, r19
    1f26:	b0 0d       	add	r27, r0
    1f28:	a1 1d       	adc	r26, r1
    1f2a:	62 1f       	adc	r22, r18
    1f2c:	83 9f       	mul	r24, r19
    1f2e:	a0 0d       	add	r26, r0
    1f30:	61 1d       	adc	r22, r1
    1f32:	22 1f       	adc	r18, r18
    1f34:	74 9f       	mul	r23, r20
    1f36:	33 27       	eor	r19, r19
    1f38:	a0 0d       	add	r26, r0
    1f3a:	61 1d       	adc	r22, r1
    1f3c:	23 1f       	adc	r18, r19
    1f3e:	84 9f       	mul	r24, r20
    1f40:	60 0d       	add	r22, r0
    1f42:	21 1d       	adc	r18, r1
    1f44:	82 2f       	mov	r24, r18
    1f46:	76 2f       	mov	r23, r22
    1f48:	6a 2f       	mov	r22, r26
    1f4a:	11 24       	eor	r1, r1
    1f4c:	9f 57       	subi	r25, 0x7F	; 127
    1f4e:	50 40       	sbci	r21, 0x00	; 0
    1f50:	9a f0       	brmi	.+38     	; 0x1f78 <__mulsf3_pse+0x88>
    1f52:	f1 f0       	breq	.+60     	; 0x1f90 <__mulsf3_pse+0xa0>
    1f54:	88 23       	and	r24, r24
    1f56:	4a f0       	brmi	.+18     	; 0x1f6a <__mulsf3_pse+0x7a>
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	bb 1f       	adc	r27, r27
    1f5e:	66 1f       	adc	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	91 50       	subi	r25, 0x01	; 1
    1f66:	50 40       	sbci	r21, 0x00	; 0
    1f68:	a9 f7       	brne	.-22     	; 0x1f54 <__mulsf3_pse+0x64>
    1f6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f6c:	51 05       	cpc	r21, r1
    1f6e:	80 f0       	brcs	.+32     	; 0x1f90 <__mulsf3_pse+0xa0>
    1f70:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__fp_inf>
    1f74:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_szero>
    1f78:	5f 3f       	cpi	r21, 0xFF	; 255
    1f7a:	e4 f3       	brlt	.-8      	; 0x1f74 <__mulsf3_pse+0x84>
    1f7c:	98 3e       	cpi	r25, 0xE8	; 232
    1f7e:	d4 f3       	brlt	.-12     	; 0x1f74 <__mulsf3_pse+0x84>
    1f80:	86 95       	lsr	r24
    1f82:	77 95       	ror	r23
    1f84:	67 95       	ror	r22
    1f86:	b7 95       	ror	r27
    1f88:	f7 95       	ror	r31
    1f8a:	e7 95       	ror	r30
    1f8c:	9f 5f       	subi	r25, 0xFF	; 255
    1f8e:	c1 f7       	brne	.-16     	; 0x1f80 <__mulsf3_pse+0x90>
    1f90:	fe 2b       	or	r31, r30
    1f92:	88 0f       	add	r24, r24
    1f94:	91 1d       	adc	r25, r1
    1f96:	96 95       	lsr	r25
    1f98:	87 95       	ror	r24
    1f9a:	97 f9       	bld	r25, 7
    1f9c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000404 <vfprintf>:
 404:	a4 e1       	ldi	r26, 0x14	; 20
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 e0       	ldi	r30, 0x08	; 8
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__>
 410:	6c 01       	movw	r12, r24
 412:	1a 01       	movw	r2, r20
 414:	46 2e       	mov	r4, r22
 416:	59 01       	movw	r10, r18
 418:	fc 01       	movw	r30, r24
 41a:	10 86       	std	Z+8, r1	; 0x08
 41c:	17 82       	std	Z+7, r1	; 0x07
 41e:	84 81       	ldd	r24, Z+4	; 0x04
 420:	81 ff       	sbrs	r24, 1
 422:	62 c3       	rjmp	.+1732   	; 0xae8 <__EEPROM_REGION_LENGTH__+0x2e8>
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	9d 87       	std	Y+13, r25	; 0x0d
 42a:	8c 87       	std	Y+12, r24	; 0x0c
 42c:	a0 e8       	ldi	r26, 0x80	; 128
 42e:	8a 8b       	std	Y+18, r24	; 0x12
 430:	9b 8b       	std	Y+19, r25	; 0x13
 432:	ac 8b       	std	Y+20, r26	; 0x14
 434:	f1 01       	movw	r30, r2
 436:	84 91       	lpm	r24, Z
 438:	47 fc       	sbrc	r4, 7
 43a:	80 81       	ld	r24, Z
 43c:	88 23       	and	r24, r24
 43e:	09 f4       	brne	.+2      	; 0x442 <vfprintf+0x3e>
 440:	4f c3       	rjmp	.+1694   	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 442:	44 2d       	mov	r20, r4
 444:	91 01       	movw	r18, r2
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	4f 4f       	sbci	r20, 0xFF	; 255
 44c:	85 32       	cpi	r24, 0x25	; 37
 44e:	19 f0       	breq	.+6      	; 0x456 <vfprintf+0x52>
 450:	19 01       	movw	r2, r18
 452:	44 2e       	mov	r4, r20
 454:	0a c0       	rjmp	.+20     	; 0x46a <vfprintf+0x66>
 456:	f9 01       	movw	r30, r18
 458:	84 91       	lpm	r24, Z
 45a:	47 fd       	sbrc	r20, 7
 45c:	80 81       	ld	r24, Z
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	29 0e       	add	r2, r25
 462:	31 1c       	adc	r3, r1
 464:	41 1c       	adc	r4, r1
 466:	85 32       	cpi	r24, 0x25	; 37
 468:	49 f4       	brne	.+18     	; 0x47c <vfprintf+0x78>
 46a:	b6 01       	movw	r22, r12
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 472:	bf 86       	std	Y+15, r11	; 0x0f
 474:	ae 86       	std	Y+14, r10	; 0x0e
 476:	ae 84       	ldd	r10, Y+14	; 0x0e
 478:	bf 84       	ldd	r11, Y+15	; 0x0f
 47a:	dc cf       	rjmp	.-72     	; 0x434 <vfprintf+0x30>
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	f1 2c       	mov	r15, r1
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	00 32       	cpi	r16, 0x20	; 32
 484:	a0 f4       	brcc	.+40     	; 0x4ae <vfprintf+0xaa>
 486:	8b 32       	cpi	r24, 0x2B	; 43
 488:	69 f0       	breq	.+26     	; 0x4a4 <vfprintf+0xa0>
 48a:	30 f4       	brcc	.+12     	; 0x498 <vfprintf+0x94>
 48c:	80 32       	cpi	r24, 0x20	; 32
 48e:	59 f0       	breq	.+22     	; 0x4a6 <vfprintf+0xa2>
 490:	83 32       	cpi	r24, 0x23	; 35
 492:	69 f4       	brne	.+26     	; 0x4ae <vfprintf+0xaa>
 494:	00 61       	ori	r16, 0x10	; 16
 496:	2c c0       	rjmp	.+88     	; 0x4f0 <vfprintf+0xec>
 498:	8d 32       	cpi	r24, 0x2D	; 45
 49a:	39 f0       	breq	.+14     	; 0x4aa <vfprintf+0xa6>
 49c:	80 33       	cpi	r24, 0x30	; 48
 49e:	39 f4       	brne	.+14     	; 0x4ae <vfprintf+0xaa>
 4a0:	01 60       	ori	r16, 0x01	; 1
 4a2:	26 c0       	rjmp	.+76     	; 0x4f0 <vfprintf+0xec>
 4a4:	02 60       	ori	r16, 0x02	; 2
 4a6:	04 60       	ori	r16, 0x04	; 4
 4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <vfprintf+0xec>
 4aa:	08 60       	ori	r16, 0x08	; 8
 4ac:	21 c0       	rjmp	.+66     	; 0x4f0 <vfprintf+0xec>
 4ae:	07 fd       	sbrc	r16, 7
 4b0:	29 c0       	rjmp	.+82     	; 0x504 <vfprintf+0x100>
 4b2:	90 ed       	ldi	r25, 0xD0	; 208
 4b4:	98 0f       	add	r25, r24
 4b6:	9a 30       	cpi	r25, 0x0A	; 10
 4b8:	78 f4       	brcc	.+30     	; 0x4d8 <vfprintf+0xd4>
 4ba:	06 ff       	sbrs	r16, 6
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <vfprintf+0xc6>
 4be:	aa e0       	ldi	r26, 0x0A	; 10
 4c0:	1a 9f       	mul	r17, r26
 4c2:	90 0d       	add	r25, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	19 2f       	mov	r17, r25
 4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <vfprintf+0xec>
 4ca:	ea e0       	ldi	r30, 0x0A	; 10
 4cc:	fe 9e       	mul	r15, r30
 4ce:	90 0d       	add	r25, r0
 4d0:	11 24       	eor	r1, r1
 4d2:	f9 2e       	mov	r15, r25
 4d4:	00 62       	ori	r16, 0x20	; 32
 4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <vfprintf+0xec>
 4d8:	8e 32       	cpi	r24, 0x2E	; 46
 4da:	21 f4       	brne	.+8      	; 0x4e4 <vfprintf+0xe0>
 4dc:	06 fd       	sbrc	r16, 6
 4de:	00 c3       	rjmp	.+1536   	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 4e0:	00 64       	ori	r16, 0x40	; 64
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <vfprintf+0xec>
 4e4:	8c 36       	cpi	r24, 0x6C	; 108
 4e6:	11 f4       	brne	.+4      	; 0x4ec <vfprintf+0xe8>
 4e8:	00 68       	ori	r16, 0x80	; 128
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <vfprintf+0xec>
 4ec:	88 36       	cpi	r24, 0x68	; 104
 4ee:	51 f4       	brne	.+20     	; 0x504 <vfprintf+0x100>
 4f0:	f1 01       	movw	r30, r2
 4f2:	84 91       	lpm	r24, Z
 4f4:	47 fc       	sbrc	r4, 7
 4f6:	80 81       	ld	r24, Z
 4f8:	ff ef       	ldi	r31, 0xFF	; 255
 4fa:	2f 1a       	sub	r2, r31
 4fc:	3f 0a       	sbc	r3, r31
 4fe:	4f 0a       	sbc	r4, r31
 500:	81 11       	cpse	r24, r1
 502:	bf cf       	rjmp	.-130    	; 0x482 <vfprintf+0x7e>
 504:	9b eb       	ldi	r25, 0xBB	; 187
 506:	98 0f       	add	r25, r24
 508:	93 30       	cpi	r25, 0x03	; 3
 50a:	18 f4       	brcc	.+6      	; 0x512 <vfprintf+0x10e>
 50c:	00 61       	ori	r16, 0x10	; 16
 50e:	80 5e       	subi	r24, 0xE0	; 224
 510:	06 c0       	rjmp	.+12     	; 0x51e <vfprintf+0x11a>
 512:	9b e9       	ldi	r25, 0x9B	; 155
 514:	98 0f       	add	r25, r24
 516:	93 30       	cpi	r25, 0x03	; 3
 518:	08 f0       	brcs	.+2      	; 0x51c <vfprintf+0x118>
 51a:	66 c1       	rjmp	.+716    	; 0x7e8 <vfprintf+0x3e4>
 51c:	0f 7e       	andi	r16, 0xEF	; 239
 51e:	06 ff       	sbrs	r16, 6
 520:	16 e0       	ldi	r17, 0x06	; 6
 522:	0f 73       	andi	r16, 0x3F	; 63
 524:	70 2e       	mov	r7, r16
 526:	85 36       	cpi	r24, 0x65	; 101
 528:	21 f4       	brne	.+8      	; 0x532 <vfprintf+0x12e>
 52a:	20 2f       	mov	r18, r16
 52c:	20 64       	ori	r18, 0x40	; 64
 52e:	72 2e       	mov	r7, r18
 530:	08 c0       	rjmp	.+16     	; 0x542 <vfprintf+0x13e>
 532:	86 36       	cpi	r24, 0x66	; 102
 534:	21 f4       	brne	.+8      	; 0x53e <vfprintf+0x13a>
 536:	80 2f       	mov	r24, r16
 538:	80 68       	ori	r24, 0x80	; 128
 53a:	78 2e       	mov	r7, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <vfprintf+0x13e>
 53e:	11 11       	cpse	r17, r1
 540:	11 50       	subi	r17, 0x01	; 1
 542:	77 fe       	sbrs	r7, 7
 544:	07 c0       	rjmp	.+14     	; 0x554 <vfprintf+0x150>
 546:	1c 33       	cpi	r17, 0x3C	; 60
 548:	50 f4       	brcc	.+20     	; 0x55e <vfprintf+0x15a>
 54a:	ee 24       	eor	r14, r14
 54c:	e3 94       	inc	r14
 54e:	e1 0e       	add	r14, r17
 550:	27 e0       	ldi	r18, 0x07	; 7
 552:	0b c0       	rjmp	.+22     	; 0x56a <vfprintf+0x166>
 554:	18 30       	cpi	r17, 0x08	; 8
 556:	38 f0       	brcs	.+14     	; 0x566 <vfprintf+0x162>
 558:	27 e0       	ldi	r18, 0x07	; 7
 55a:	17 e0       	ldi	r17, 0x07	; 7
 55c:	05 c0       	rjmp	.+10     	; 0x568 <vfprintf+0x164>
 55e:	27 e0       	ldi	r18, 0x07	; 7
 560:	6c e3       	ldi	r22, 0x3C	; 60
 562:	e6 2e       	mov	r14, r22
 564:	02 c0       	rjmp	.+4      	; 0x56a <vfprintf+0x166>
 566:	21 2f       	mov	r18, r17
 568:	e1 2c       	mov	r14, r1
 56a:	f5 01       	movw	r30, r10
 56c:	34 96       	adiw	r30, 0x04	; 4
 56e:	ff 87       	std	Y+15, r31	; 0x0f
 570:	ee 87       	std	Y+14, r30	; 0x0e
 572:	f5 01       	movw	r30, r10
 574:	60 81       	ld	r22, Z
 576:	71 81       	ldd	r23, Z+1	; 0x01
 578:	82 81       	ldd	r24, Z+2	; 0x02
 57a:	93 81       	ldd	r25, Z+3	; 0x03
 57c:	0e 2d       	mov	r16, r14
 57e:	ae 01       	movw	r20, r28
 580:	4f 5f       	subi	r20, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__ftoa_engine>
 588:	5c 01       	movw	r10, r24
 58a:	59 80       	ldd	r5, Y+1	; 0x01
 58c:	50 fe       	sbrs	r5, 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <vfprintf+0x190>
 590:	53 fe       	sbrs	r5, 3
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <vfprintf+0x19c>
 594:	71 fc       	sbrc	r7, 1
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <vfprintf+0x1a0>
 598:	72 fe       	sbrs	r7, 2
 59a:	06 c0       	rjmp	.+12     	; 0x5a8 <vfprintf+0x1a4>
 59c:	00 e2       	ldi	r16, 0x20	; 32
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <vfprintf+0x1a6>
 5a0:	0d e2       	ldi	r16, 0x2D	; 45
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <vfprintf+0x1a6>
 5a4:	0b e2       	ldi	r16, 0x2B	; 43
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <vfprintf+0x1a6>
 5a8:	00 e0       	ldi	r16, 0x00	; 0
 5aa:	85 2d       	mov	r24, r5
 5ac:	8c 70       	andi	r24, 0x0C	; 12
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <vfprintf+0x1b2>
 5b0:	01 11       	cpse	r16, r1
 5b2:	73 c2       	rjmp	.+1254   	; 0xa9a <__EEPROM_REGION_LENGTH__+0x29a>
 5b4:	be c2       	rjmp	.+1404   	; 0xb32 <__EEPROM_REGION_LENGTH__+0x332>
 5b6:	77 fe       	sbrs	r7, 7
 5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <vfprintf+0x1d4>
 5ba:	ea 0c       	add	r14, r10
 5bc:	54 fe       	sbrs	r5, 4
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <vfprintf+0x1c4>
 5c0:	8a 81       	ldd	r24, Y+2	; 0x02
 5c2:	81 33       	cpi	r24, 0x31	; 49
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <vfprintf+0x1c4>
 5c6:	ea 94       	dec	r14
 5c8:	1e 14       	cp	r1, r14
 5ca:	74 f5       	brge	.+92     	; 0x628 <vfprintf+0x224>
 5cc:	28 e0       	ldi	r18, 0x08	; 8
 5ce:	2e 15       	cp	r18, r14
 5d0:	78 f5       	brcc	.+94     	; 0x630 <vfprintf+0x22c>
 5d2:	38 e0       	ldi	r19, 0x08	; 8
 5d4:	e3 2e       	mov	r14, r19
 5d6:	2c c0       	rjmp	.+88     	; 0x630 <vfprintf+0x22c>
 5d8:	76 fc       	sbrc	r7, 6
 5da:	2a c0       	rjmp	.+84     	; 0x630 <vfprintf+0x22c>
 5dc:	81 2f       	mov	r24, r17
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	8a 15       	cp	r24, r10
 5e2:	9b 05       	cpc	r25, r11
 5e4:	9c f0       	brlt	.+38     	; 0x60c <vfprintf+0x208>
 5e6:	8c ef       	ldi	r24, 0xFC	; 252
 5e8:	a8 16       	cp	r10, r24
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	b8 06       	cpc	r11, r24
 5ee:	74 f0       	brlt	.+28     	; 0x60c <vfprintf+0x208>
 5f0:	97 2d       	mov	r25, r7
 5f2:	90 68       	ori	r25, 0x80	; 128
 5f4:	79 2e       	mov	r7, r25
 5f6:	0a c0       	rjmp	.+20     	; 0x60c <vfprintf+0x208>
 5f8:	e2 e0       	ldi	r30, 0x02	; 2
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	ec 0f       	add	r30, r28
 5fe:	fd 1f       	adc	r31, r29
 600:	e1 0f       	add	r30, r17
 602:	f1 1d       	adc	r31, r1
 604:	80 81       	ld	r24, Z
 606:	80 33       	cpi	r24, 0x30	; 48
 608:	19 f4       	brne	.+6      	; 0x610 <vfprintf+0x20c>
 60a:	11 50       	subi	r17, 0x01	; 1
 60c:	11 11       	cpse	r17, r1
 60e:	f4 cf       	rjmp	.-24     	; 0x5f8 <vfprintf+0x1f4>
 610:	77 fe       	sbrs	r7, 7
 612:	0e c0       	rjmp	.+28     	; 0x630 <vfprintf+0x22c>
 614:	ee 24       	eor	r14, r14
 616:	e3 94       	inc	r14
 618:	e1 0e       	add	r14, r17
 61a:	81 2f       	mov	r24, r17
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a8 16       	cp	r10, r24
 620:	b9 06       	cpc	r11, r25
 622:	2c f4       	brge	.+10     	; 0x62e <vfprintf+0x22a>
 624:	1a 19       	sub	r17, r10
 626:	04 c0       	rjmp	.+8      	; 0x630 <vfprintf+0x22c>
 628:	ee 24       	eor	r14, r14
 62a:	e3 94       	inc	r14
 62c:	01 c0       	rjmp	.+2      	; 0x630 <vfprintf+0x22c>
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	77 fe       	sbrs	r7, 7
 632:	06 c0       	rjmp	.+12     	; 0x640 <vfprintf+0x23c>
 634:	1a 14       	cp	r1, r10
 636:	1b 04       	cpc	r1, r11
 638:	34 f4       	brge	.+12     	; 0x646 <vfprintf+0x242>
 63a:	c5 01       	movw	r24, r10
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	05 c0       	rjmp	.+10     	; 0x64a <vfprintf+0x246>
 640:	85 e0       	ldi	r24, 0x05	; 5
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <vfprintf+0x246>
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	01 11       	cpse	r16, r1
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	11 23       	and	r17, r17
 650:	31 f0       	breq	.+12     	; 0x65e <vfprintf+0x25a>
 652:	21 2f       	mov	r18, r17
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	2f 5f       	subi	r18, 0xFF	; 255
 658:	3f 4f       	sbci	r19, 0xFF	; 255
 65a:	82 0f       	add	r24, r18
 65c:	93 1f       	adc	r25, r19
 65e:	2f 2d       	mov	r18, r15
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	82 17       	cp	r24, r18
 664:	93 07       	cpc	r25, r19
 666:	14 f4       	brge	.+4      	; 0x66c <vfprintf+0x268>
 668:	f8 1a       	sub	r15, r24
 66a:	01 c0       	rjmp	.+2      	; 0x66e <vfprintf+0x26a>
 66c:	f1 2c       	mov	r15, r1
 66e:	87 2d       	mov	r24, r7
 670:	89 70       	andi	r24, 0x09	; 9
 672:	49 f4       	brne	.+18     	; 0x686 <vfprintf+0x282>
 674:	ff 20       	and	r15, r15
 676:	39 f0       	breq	.+14     	; 0x686 <vfprintf+0x282>
 678:	b6 01       	movw	r22, r12
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 682:	fa 94       	dec	r15
 684:	f7 cf       	rjmp	.-18     	; 0x674 <vfprintf+0x270>
 686:	00 23       	and	r16, r16
 688:	29 f0       	breq	.+10     	; 0x694 <vfprintf+0x290>
 68a:	b6 01       	movw	r22, r12
 68c:	80 2f       	mov	r24, r16
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 694:	73 fc       	sbrc	r7, 3
 696:	09 c0       	rjmp	.+18     	; 0x6aa <vfprintf+0x2a6>
 698:	ff 20       	and	r15, r15
 69a:	39 f0       	breq	.+14     	; 0x6aa <vfprintf+0x2a6>
 69c:	b6 01       	movw	r22, r12
 69e:	80 e3       	ldi	r24, 0x30	; 48
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 6a6:	fa 94       	dec	r15
 6a8:	f7 cf       	rjmp	.-18     	; 0x698 <vfprintf+0x294>
 6aa:	77 fe       	sbrs	r7, 7
 6ac:	49 c0       	rjmp	.+146    	; 0x740 <vfprintf+0x33c>
 6ae:	35 01       	movw	r6, r10
 6b0:	b7 fe       	sbrs	r11, 7
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <vfprintf+0x2b4>
 6b4:	61 2c       	mov	r6, r1
 6b6:	71 2c       	mov	r7, r1
 6b8:	c5 01       	movw	r24, r10
 6ba:	86 19       	sub	r24, r6
 6bc:	97 09       	sbc	r25, r7
 6be:	88 24       	eor	r8, r8
 6c0:	83 94       	inc	r8
 6c2:	91 2c       	mov	r9, r1
 6c4:	8c 0e       	add	r8, r28
 6c6:	9d 1e       	adc	r9, r29
 6c8:	88 0e       	add	r8, r24
 6ca:	99 1e       	adc	r9, r25
 6cc:	f5 01       	movw	r30, r10
 6ce:	ee 19       	sub	r30, r14
 6d0:	f1 09       	sbc	r31, r1
 6d2:	f9 8b       	std	Y+17, r31	; 0x11
 6d4:	e8 8b       	std	Y+16, r30	; 0x10
 6d6:	01 2f       	mov	r16, r17
 6d8:	10 e0       	ldi	r17, 0x00	; 0
 6da:	11 95       	neg	r17
 6dc:	01 95       	neg	r16
 6de:	11 09       	sbc	r17, r1
 6e0:	ff ef       	ldi	r31, 0xFF	; 255
 6e2:	6f 16       	cp	r6, r31
 6e4:	7f 06       	cpc	r7, r31
 6e6:	29 f4       	brne	.+10     	; 0x6f2 <vfprintf+0x2ee>
 6e8:	b6 01       	movw	r22, r12
 6ea:	8e e2       	ldi	r24, 0x2E	; 46
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 6f2:	a6 14       	cp	r10, r6
 6f4:	b7 04       	cpc	r11, r7
 6f6:	44 f0       	brlt	.+16     	; 0x708 <vfprintf+0x304>
 6f8:	88 89       	ldd	r24, Y+16	; 0x10
 6fa:	99 89       	ldd	r25, Y+17	; 0x11
 6fc:	86 15       	cp	r24, r6
 6fe:	97 05       	cpc	r25, r7
 700:	1c f4       	brge	.+6      	; 0x708 <vfprintf+0x304>
 702:	f4 01       	movw	r30, r8
 704:	81 81       	ldd	r24, Z+1	; 0x01
 706:	01 c0       	rjmp	.+2      	; 0x70a <vfprintf+0x306>
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	f1 e0       	ldi	r31, 0x01	; 1
 70c:	6f 1a       	sub	r6, r31
 70e:	71 08       	sbc	r7, r1
 710:	2f ef       	ldi	r18, 0xFF	; 255
 712:	82 1a       	sub	r8, r18
 714:	92 0a       	sbc	r9, r18
 716:	60 16       	cp	r6, r16
 718:	71 06       	cpc	r7, r17
 71a:	2c f0       	brlt	.+10     	; 0x726 <vfprintf+0x322>
 71c:	b6 01       	movw	r22, r12
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 724:	dd cf       	rjmp	.-70     	; 0x6e0 <vfprintf+0x2dc>
 726:	a6 14       	cp	r10, r6
 728:	b7 04       	cpc	r11, r7
 72a:	39 f4       	brne	.+14     	; 0x73a <vfprintf+0x336>
 72c:	9a 81       	ldd	r25, Y+2	; 0x02
 72e:	96 33       	cpi	r25, 0x36	; 54
 730:	18 f4       	brcc	.+6      	; 0x738 <vfprintf+0x334>
 732:	95 33       	cpi	r25, 0x35	; 53
 734:	11 f4       	brne	.+4      	; 0x73a <vfprintf+0x336>
 736:	54 fe       	sbrs	r5, 4
 738:	81 e3       	ldi	r24, 0x31	; 49
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	51 c0       	rjmp	.+162    	; 0x7e2 <vfprintf+0x3de>
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	81 33       	cpi	r24, 0x31	; 49
 744:	19 f0       	breq	.+6      	; 0x74c <vfprintf+0x348>
 746:	95 2d       	mov	r25, r5
 748:	9f 7e       	andi	r25, 0xEF	; 239
 74a:	59 2e       	mov	r5, r25
 74c:	b6 01       	movw	r22, r12
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 754:	11 11       	cpse	r17, r1
 756:	05 c0       	rjmp	.+10     	; 0x762 <vfprintf+0x35e>
 758:	74 fc       	sbrc	r7, 4
 75a:	1c c0       	rjmp	.+56     	; 0x794 <vfprintf+0x390>
 75c:	85 e6       	ldi	r24, 0x65	; 101
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	1b c0       	rjmp	.+54     	; 0x798 <vfprintf+0x394>
 762:	b6 01       	movw	r22, r12
 764:	8e e2       	ldi	r24, 0x2E	; 46
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 76c:	02 e0       	ldi	r16, 0x02	; 2
 76e:	01 0f       	add	r16, r17
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	11 e0       	ldi	r17, 0x01	; 1
 774:	18 0f       	add	r17, r24
 776:	e1 e0       	ldi	r30, 0x01	; 1
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	ec 0f       	add	r30, r28
 77c:	fd 1f       	adc	r31, r29
 77e:	e8 0f       	add	r30, r24
 780:	f1 1d       	adc	r31, r1
 782:	80 81       	ld	r24, Z
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 78c:	81 2f       	mov	r24, r17
 78e:	10 13       	cpse	r17, r16
 790:	f0 cf       	rjmp	.-32     	; 0x772 <vfprintf+0x36e>
 792:	e2 cf       	rjmp	.-60     	; 0x758 <vfprintf+0x354>
 794:	85 e4       	ldi	r24, 0x45	; 69
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	b6 01       	movw	r22, r12
 79a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 79e:	b7 fc       	sbrc	r11, 7
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <vfprintf+0x3a8>
 7a2:	a1 14       	cp	r10, r1
 7a4:	b1 04       	cpc	r11, r1
 7a6:	39 f4       	brne	.+14     	; 0x7b6 <vfprintf+0x3b2>
 7a8:	54 fe       	sbrs	r5, 4
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <vfprintf+0x3b2>
 7ac:	b1 94       	neg	r11
 7ae:	a1 94       	neg	r10
 7b0:	b1 08       	sbc	r11, r1
 7b2:	8d e2       	ldi	r24, 0x2D	; 45
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <vfprintf+0x3b4>
 7b6:	8b e2       	ldi	r24, 0x2B	; 43
 7b8:	b6 01       	movw	r22, r12
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 7c0:	80 e3       	ldi	r24, 0x30	; 48
 7c2:	ea e0       	ldi	r30, 0x0A	; 10
 7c4:	ae 16       	cp	r10, r30
 7c6:	b1 04       	cpc	r11, r1
 7c8:	2c f0       	brlt	.+10     	; 0x7d4 <vfprintf+0x3d0>
 7ca:	8f 5f       	subi	r24, 0xFF	; 255
 7cc:	aa e0       	ldi	r26, 0x0A	; 10
 7ce:	aa 1a       	sub	r10, r26
 7d0:	b1 08       	sbc	r11, r1
 7d2:	f7 cf       	rjmp	.-18     	; 0x7c2 <vfprintf+0x3be>
 7d4:	b6 01       	movw	r22, r12
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 7dc:	b6 01       	movw	r22, r12
 7de:	c5 01       	movw	r24, r10
 7e0:	c0 96       	adiw	r24, 0x30	; 48
 7e2:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 7e6:	72 c1       	rjmp	.+740    	; 0xacc <__EEPROM_REGION_LENGTH__+0x2cc>
 7e8:	83 36       	cpi	r24, 0x63	; 99
 7ea:	31 f0       	breq	.+12     	; 0x7f8 <vfprintf+0x3f4>
 7ec:	83 37       	cpi	r24, 0x73	; 115
 7ee:	91 f0       	breq	.+36     	; 0x814 <__EEPROM_REGION_LENGTH__+0x14>
 7f0:	83 35       	cpi	r24, 0x53	; 83
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <vfprintf+0x3f2>
 7f4:	5d c0       	rjmp	.+186    	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
 7f6:	24 c0       	rjmp	.+72     	; 0x840 <__EEPROM_REGION_LENGTH__+0x40>
 7f8:	c5 01       	movw	r24, r10
 7fa:	02 96       	adiw	r24, 0x02	; 2
 7fc:	9f 87       	std	Y+15, r25	; 0x0f
 7fe:	8e 87       	std	Y+14, r24	; 0x0e
 800:	f5 01       	movw	r30, r10
 802:	80 81       	ld	r24, Z
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	6a 88       	ldd	r6, Y+18	; 0x12
 808:	7b 88       	ldd	r7, Y+19	; 0x13
 80a:	8c 88       	ldd	r8, Y+20	; 0x14
 80c:	aa 24       	eor	r10, r10
 80e:	a3 94       	inc	r10
 810:	b1 2c       	mov	r11, r1
 812:	14 c0       	rjmp	.+40     	; 0x83c <__EEPROM_REGION_LENGTH__+0x3c>
 814:	c5 01       	movw	r24, r10
 816:	03 96       	adiw	r24, 0x03	; 3
 818:	9f 87       	std	Y+15, r25	; 0x0f
 81a:	8e 87       	std	Y+14, r24	; 0x0e
 81c:	f5 01       	movw	r30, r10
 81e:	60 80       	ld	r6, Z
 820:	71 80       	ldd	r7, Z+1	; 0x01
 822:	82 80       	ldd	r8, Z+2	; 0x02
 824:	06 ff       	sbrs	r16, 6
 826:	03 c0       	rjmp	.+6      	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 828:	41 2f       	mov	r20, r17
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__EEPROM_REGION_LENGTH__+0x32>
 82e:	4f ef       	ldi	r20, 0xFF	; 255
 830:	5f ef       	ldi	r21, 0xFF	; 255
 832:	88 2d       	mov	r24, r8
 834:	b3 01       	movw	r22, r6
 836:	0e 94 9a 1c 	call	0x3934	; 0x3934 <strnlen>
 83a:	5c 01       	movw	r10, r24
 83c:	0f 77       	andi	r16, 0x7F	; 127
 83e:	15 c0       	rjmp	.+42     	; 0x86a <__EEPROM_REGION_LENGTH__+0x6a>
 840:	c5 01       	movw	r24, r10
 842:	03 96       	adiw	r24, 0x03	; 3
 844:	9f 87       	std	Y+15, r25	; 0x0f
 846:	8e 87       	std	Y+14, r24	; 0x0e
 848:	f5 01       	movw	r30, r10
 84a:	60 80       	ld	r6, Z
 84c:	71 80       	ldd	r7, Z+1	; 0x01
 84e:	82 80       	ldd	r8, Z+2	; 0x02
 850:	06 ff       	sbrs	r16, 6
 852:	03 c0       	rjmp	.+6      	; 0x85a <__EEPROM_REGION_LENGTH__+0x5a>
 854:	41 2f       	mov	r20, r17
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <__EEPROM_REGION_LENGTH__+0x5e>
 85a:	4f ef       	ldi	r20, 0xFF	; 255
 85c:	5f ef       	ldi	r21, 0xFF	; 255
 85e:	88 2d       	mov	r24, r8
 860:	b3 01       	movw	r22, r6
 862:	0e 94 9a 1c 	call	0x3934	; 0x3934 <strnlen>
 866:	5c 01       	movw	r10, r24
 868:	00 68       	ori	r16, 0x80	; 128
 86a:	03 fd       	sbrc	r16, 3
 86c:	1d c0       	rjmp	.+58     	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 86e:	8f 2d       	mov	r24, r15
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	a8 16       	cp	r10, r24
 874:	b9 06       	cpc	r11, r25
 876:	c0 f4       	brcc	.+48     	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 882:	fa 94       	dec	r15
 884:	f4 cf       	rjmp	.-24     	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
 886:	f3 01       	movw	r30, r6
 888:	84 91       	lpm	r24, Z
 88a:	87 fc       	sbrc	r8, 7
 88c:	80 81       	ld	r24, Z
 88e:	ff ef       	ldi	r31, 0xFF	; 255
 890:	6f 1a       	sub	r6, r31
 892:	7f 0a       	sbc	r7, r31
 894:	8f 0a       	sbc	r8, r31
 896:	b6 01       	movw	r22, r12
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 89e:	f1 10       	cpse	r15, r1
 8a0:	fa 94       	dec	r15
 8a2:	21 e0       	ldi	r18, 0x01	; 1
 8a4:	a2 1a       	sub	r10, r18
 8a6:	b1 08       	sbc	r11, r1
 8a8:	a1 14       	cp	r10, r1
 8aa:	b1 04       	cpc	r11, r1
 8ac:	61 f7       	brne	.-40     	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 8ae:	0e c1       	rjmp	.+540    	; 0xacc <__EEPROM_REGION_LENGTH__+0x2cc>
 8b0:	84 36       	cpi	r24, 0x64	; 100
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <__EEPROM_REGION_LENGTH__+0xb8>
 8b4:	89 36       	cpi	r24, 0x69	; 105
 8b6:	79 f5       	brne	.+94     	; 0x916 <__EEPROM_REGION_LENGTH__+0x116>
 8b8:	c5 01       	movw	r24, r10
 8ba:	07 ff       	sbrs	r16, 7
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8be:	04 96       	adiw	r24, 0x04	; 4
 8c0:	9f 87       	std	Y+15, r25	; 0x0f
 8c2:	8e 87       	std	Y+14, r24	; 0x0e
 8c4:	f5 01       	movw	r30, r10
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	82 81       	ldd	r24, Z+2	; 0x02
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <__EEPROM_REGION_LENGTH__+0xe4>
 8d0:	02 96       	adiw	r24, 0x02	; 2
 8d2:	9f 87       	std	Y+15, r25	; 0x0f
 8d4:	8e 87       	std	Y+14, r24	; 0x0e
 8d6:	f5 01       	movw	r30, r10
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	07 2e       	mov	r0, r23
 8de:	00 0c       	add	r0, r0
 8e0:	88 0b       	sbc	r24, r24
 8e2:	99 0b       	sbc	r25, r25
 8e4:	0f 76       	andi	r16, 0x6F	; 111
 8e6:	e0 2e       	mov	r14, r16
 8e8:	97 ff       	sbrs	r25, 7
 8ea:	0a c0       	rjmp	.+20     	; 0x900 <__EEPROM_REGION_LENGTH__+0x100>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	f0 2f       	mov	r31, r16
 8fc:	f0 68       	ori	r31, 0x80	; 128
 8fe:	ef 2e       	mov	r14, r31
 900:	2a e0       	ldi	r18, 0x0A	; 10
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	ae 01       	movw	r20, r28
 906:	4f 5f       	subi	r20, 0xFF	; 255
 908:	5f 4f       	sbci	r21, 0xFF	; 255
 90a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__ultoa_invert>
 90e:	a8 2e       	mov	r10, r24
 910:	2c 85       	ldd	r18, Y+12	; 0x0c
 912:	a2 1a       	sub	r10, r18
 914:	4b c0       	rjmp	.+150    	; 0x9ac <__EEPROM_REGION_LENGTH__+0x1ac>
 916:	85 37       	cpi	r24, 0x75	; 117
 918:	29 f4       	brne	.+10     	; 0x924 <__EEPROM_REGION_LENGTH__+0x124>
 91a:	0f 7e       	andi	r16, 0xEF	; 239
 91c:	e0 2e       	mov	r14, r16
 91e:	2a e0       	ldi	r18, 0x0A	; 10
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	25 c0       	rjmp	.+74     	; 0x96e <__EEPROM_REGION_LENGTH__+0x16e>
 924:	90 2f       	mov	r25, r16
 926:	99 7f       	andi	r25, 0xF9	; 249
 928:	e9 2e       	mov	r14, r25
 92a:	8f 36       	cpi	r24, 0x6F	; 111
 92c:	c1 f0       	breq	.+48     	; 0x95e <__EEPROM_REGION_LENGTH__+0x15e>
 92e:	18 f4       	brcc	.+6      	; 0x936 <__EEPROM_REGION_LENGTH__+0x136>
 930:	88 35       	cpi	r24, 0x58	; 88
 932:	79 f0       	breq	.+30     	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 934:	d5 c0       	rjmp	.+426    	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 936:	80 37       	cpi	r24, 0x70	; 112
 938:	19 f0       	breq	.+6      	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 93a:	88 37       	cpi	r24, 0x78	; 120
 93c:	21 f0       	breq	.+8      	; 0x946 <__EEPROM_REGION_LENGTH__+0x146>
 93e:	d0 c0       	rjmp	.+416    	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 940:	a9 2f       	mov	r26, r25
 942:	a0 61       	ori	r26, 0x10	; 16
 944:	ea 2e       	mov	r14, r26
 946:	e4 fe       	sbrs	r14, 4
 948:	0d c0       	rjmp	.+26     	; 0x964 <__EEPROM_REGION_LENGTH__+0x164>
 94a:	ee 2d       	mov	r30, r14
 94c:	e4 60       	ori	r30, 0x04	; 4
 94e:	ee 2e       	mov	r14, r30
 950:	09 c0       	rjmp	.+18     	; 0x964 <__EEPROM_REGION_LENGTH__+0x164>
 952:	04 ff       	sbrs	r16, 4
 954:	0a c0       	rjmp	.+20     	; 0x96a <__EEPROM_REGION_LENGTH__+0x16a>
 956:	f9 2f       	mov	r31, r25
 958:	f6 60       	ori	r31, 0x06	; 6
 95a:	ef 2e       	mov	r14, r31
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__EEPROM_REGION_LENGTH__+0x16a>
 95e:	28 e0       	ldi	r18, 0x08	; 8
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	05 c0       	rjmp	.+10     	; 0x96e <__EEPROM_REGION_LENGTH__+0x16e>
 964:	20 e1       	ldi	r18, 0x10	; 16
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	02 c0       	rjmp	.+4      	; 0x96e <__EEPROM_REGION_LENGTH__+0x16e>
 96a:	20 e1       	ldi	r18, 0x10	; 16
 96c:	32 e0       	ldi	r19, 0x02	; 2
 96e:	c5 01       	movw	r24, r10
 970:	e7 fe       	sbrs	r14, 7
 972:	09 c0       	rjmp	.+18     	; 0x986 <__EEPROM_REGION_LENGTH__+0x186>
 974:	04 96       	adiw	r24, 0x04	; 4
 976:	9f 87       	std	Y+15, r25	; 0x0f
 978:	8e 87       	std	Y+14, r24	; 0x0e
 97a:	f5 01       	movw	r30, r10
 97c:	60 81       	ld	r22, Z
 97e:	71 81       	ldd	r23, Z+1	; 0x01
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	08 c0       	rjmp	.+16     	; 0x996 <__EEPROM_REGION_LENGTH__+0x196>
 986:	02 96       	adiw	r24, 0x02	; 2
 988:	9f 87       	std	Y+15, r25	; 0x0f
 98a:	8e 87       	std	Y+14, r24	; 0x0e
 98c:	f5 01       	movw	r30, r10
 98e:	60 81       	ld	r22, Z
 990:	71 81       	ldd	r23, Z+1	; 0x01
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	ae 01       	movw	r20, r28
 998:	4f 5f       	subi	r20, 0xFF	; 255
 99a:	5f 4f       	sbci	r21, 0xFF	; 255
 99c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__ultoa_invert>
 9a0:	a8 2e       	mov	r10, r24
 9a2:	fc 85       	ldd	r31, Y+12	; 0x0c
 9a4:	af 1a       	sub	r10, r31
 9a6:	2e 2d       	mov	r18, r14
 9a8:	2f 77       	andi	r18, 0x7F	; 127
 9aa:	e2 2e       	mov	r14, r18
 9ac:	e6 fe       	sbrs	r14, 6
 9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 9b0:	0e 2d       	mov	r16, r14
 9b2:	0e 7f       	andi	r16, 0xFE	; 254
 9b4:	a1 16       	cp	r10, r17
 9b6:	50 f4       	brcc	.+20     	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9b8:	e4 fe       	sbrs	r14, 4
 9ba:	0a c0       	rjmp	.+20     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9bc:	e2 fc       	sbrc	r14, 2
 9be:	08 c0       	rjmp	.+16     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9c0:	0e 2d       	mov	r16, r14
 9c2:	0e 7e       	andi	r16, 0xEE	; 238
 9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9c6:	ba 2c       	mov	r11, r10
 9c8:	0e 2d       	mov	r16, r14
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 9cc:	ba 2c       	mov	r11, r10
 9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 9d0:	b1 2e       	mov	r11, r17
 9d2:	04 ff       	sbrs	r16, 4
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 9d6:	fe 01       	movw	r30, r28
 9d8:	ea 0d       	add	r30, r10
 9da:	f1 1d       	adc	r31, r1
 9dc:	80 81       	ld	r24, Z
 9de:	80 33       	cpi	r24, 0x30	; 48
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 9e2:	09 7e       	andi	r16, 0xE9	; 233
 9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9e6:	02 ff       	sbrs	r16, 2
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 9ea:	b3 94       	inc	r11
 9ec:	b3 94       	inc	r11
 9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9f0:	80 2f       	mov	r24, r16
 9f2:	86 78       	andi	r24, 0x86	; 134
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9f6:	b3 94       	inc	r11
 9f8:	03 fd       	sbrc	r16, 3
 9fa:	11 c0       	rjmp	.+34     	; 0xa1e <__EEPROM_REGION_LENGTH__+0x21e>
 9fc:	00 ff       	sbrs	r16, 0
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 a00:	bf 14       	cp	r11, r15
 a02:	88 f4       	brcc	.+34     	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 a04:	fa 0c       	add	r15, r10
 a06:	1f 2d       	mov	r17, r15
 a08:	1b 19       	sub	r17, r11
 a0a:	0e c0       	rjmp	.+28     	; 0xa28 <__EEPROM_REGION_LENGTH__+0x228>
 a0c:	bf 14       	cp	r11, r15
 a0e:	60 f4       	brcc	.+24     	; 0xa28 <__EEPROM_REGION_LENGTH__+0x228>
 a10:	b6 01       	movw	r22, r12
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 a1a:	b3 94       	inc	r11
 a1c:	f7 cf       	rjmp	.-18     	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 a1e:	bf 14       	cp	r11, r15
 a20:	18 f4       	brcc	.+6      	; 0xa28 <__EEPROM_REGION_LENGTH__+0x228>
 a22:	fb 18       	sub	r15, r11
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__EEPROM_REGION_LENGTH__+0x22a>
 a26:	1a 2d       	mov	r17, r10
 a28:	f1 2c       	mov	r15, r1
 a2a:	04 ff       	sbrs	r16, 4
 a2c:	10 c0       	rjmp	.+32     	; 0xa4e <__EEPROM_REGION_LENGTH__+0x24e>
 a2e:	b6 01       	movw	r22, r12
 a30:	80 e3       	ldi	r24, 0x30	; 48
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 a38:	02 ff       	sbrs	r16, 2
 a3a:	17 c0       	rjmp	.+46     	; 0xa6a <__EEPROM_REGION_LENGTH__+0x26a>
 a3c:	01 fd       	sbrc	r16, 1
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <__EEPROM_REGION_LENGTH__+0x246>
 a40:	88 e7       	ldi	r24, 0x78	; 120
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <__EEPROM_REGION_LENGTH__+0x24a>
 a46:	88 e5       	ldi	r24, 0x58	; 88
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	b6 01       	movw	r22, r12
 a4c:	0c c0       	rjmp	.+24     	; 0xa66 <__EEPROM_REGION_LENGTH__+0x266>
 a4e:	80 2f       	mov	r24, r16
 a50:	86 78       	andi	r24, 0x86	; 134
 a52:	59 f0       	breq	.+22     	; 0xa6a <__EEPROM_REGION_LENGTH__+0x26a>
 a54:	01 ff       	sbrs	r16, 1
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <__EEPROM_REGION_LENGTH__+0x25c>
 a58:	8b e2       	ldi	r24, 0x2B	; 43
 a5a:	01 c0       	rjmp	.+2      	; 0xa5e <__EEPROM_REGION_LENGTH__+0x25e>
 a5c:	80 e2       	ldi	r24, 0x20	; 32
 a5e:	07 fd       	sbrc	r16, 7
 a60:	8d e2       	ldi	r24, 0x2D	; 45
 a62:	b6 01       	movw	r22, r12
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 a6a:	a1 16       	cp	r10, r17
 a6c:	38 f4       	brcc	.+14     	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a6e:	b6 01       	movw	r22, r12
 a70:	80 e3       	ldi	r24, 0x30	; 48
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 a78:	11 50       	subi	r17, 0x01	; 1
 a7a:	f7 cf       	rjmp	.-18     	; 0xa6a <__EEPROM_REGION_LENGTH__+0x26a>
 a7c:	aa 94       	dec	r10
 a7e:	e1 e0       	ldi	r30, 0x01	; 1
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	ec 0f       	add	r30, r28
 a84:	fd 1f       	adc	r31, r29
 a86:	ea 0d       	add	r30, r10
 a88:	f1 1d       	adc	r31, r1
 a8a:	80 81       	ld	r24, Z
 a8c:	b6 01       	movw	r22, r12
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 a94:	a1 10       	cpse	r10, r1
 a96:	f2 cf       	rjmp	.-28     	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a98:	19 c0       	rjmp	.+50     	; 0xacc <__EEPROM_REGION_LENGTH__+0x2cc>
 a9a:	f4 e0       	ldi	r31, 0x04	; 4
 a9c:	ff 15       	cp	r31, r15
 a9e:	80 f5       	brcc	.+96     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 aa0:	84 e0       	ldi	r24, 0x04	; 4
 aa2:	f8 1a       	sub	r15, r24
 aa4:	73 fe       	sbrs	r7, 3
 aa6:	23 c0       	rjmp	.+70     	; 0xaee <__EEPROM_REGION_LENGTH__+0x2ee>
 aa8:	01 11       	cpse	r16, r1
 aaa:	2b c0       	rjmp	.+86     	; 0xb02 <__EEPROM_REGION_LENGTH__+0x302>
 aac:	53 fe       	sbrs	r5, 3
 aae:	2f c0       	rjmp	.+94     	; 0xb0e <__EEPROM_REGION_LENGTH__+0x30e>
 ab0:	5f ee       	ldi	r21, 0xEF	; 239
 ab2:	85 2e       	mov	r8, r21
 ab4:	53 e0       	ldi	r21, 0x03	; 3
 ab6:	95 2e       	mov	r9, r21
 ab8:	50 e0       	ldi	r21, 0x00	; 0
 aba:	a5 2e       	mov	r10, r21
 abc:	07 2d       	mov	r16, r7
 abe:	00 71       	andi	r16, 0x10	; 16
 ac0:	f4 01       	movw	r30, r8
 ac2:	84 91       	lpm	r24, Z
 ac4:	a7 fc       	sbrc	r10, 7
 ac6:	80 81       	ld	r24, Z
 ac8:	81 11       	cpse	r24, r1
 aca:	28 c0       	rjmp	.+80     	; 0xb1c <__EEPROM_REGION_LENGTH__+0x31c>
 acc:	ff 20       	and	r15, r15
 ace:	09 f4       	brne	.+2      	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 ad0:	d2 cc       	rjmp	.-1628   	; 0x476 <vfprintf+0x72>
 ad2:	b6 01       	movw	r22, r12
 ad4:	80 e2       	ldi	r24, 0x20	; 32
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 adc:	fa 94       	dec	r15
 ade:	f6 cf       	rjmp	.-20     	; 0xacc <__EEPROM_REGION_LENGTH__+0x2cc>
 ae0:	f6 01       	movw	r30, r12
 ae2:	87 81       	ldd	r24, Z+7	; 0x07
 ae4:	90 85       	ldd	r25, Z+8	; 0x08
 ae6:	2c c0       	rjmp	.+88     	; 0xb40 <__EEPROM_REGION_LENGTH__+0x340>
 ae8:	8f ef       	ldi	r24, 0xFF	; 255
 aea:	9f ef       	ldi	r25, 0xFF	; 255
 aec:	29 c0       	rjmp	.+82     	; 0xb40 <__EEPROM_REGION_LENGTH__+0x340>
 aee:	b6 01       	movw	r22, r12
 af0:	80 e2       	ldi	r24, 0x20	; 32
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 af8:	fa 94       	dec	r15
 afa:	f1 10       	cpse	r15, r1
 afc:	f8 cf       	rjmp	.-16     	; 0xaee <__EEPROM_REGION_LENGTH__+0x2ee>
 afe:	d4 cf       	rjmp	.-88     	; 0xaa8 <__EEPROM_REGION_LENGTH__+0x2a8>
 b00:	f1 2c       	mov	r15, r1
 b02:	b6 01       	movw	r22, r12
 b04:	80 2f       	mov	r24, r16
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 b0c:	cf cf       	rjmp	.-98     	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 b0e:	4b ee       	ldi	r20, 0xEB	; 235
 b10:	84 2e       	mov	r8, r20
 b12:	43 e0       	ldi	r20, 0x03	; 3
 b14:	94 2e       	mov	r9, r20
 b16:	40 e0       	ldi	r20, 0x00	; 0
 b18:	a4 2e       	mov	r10, r20
 b1a:	d0 cf       	rjmp	.-96     	; 0xabc <__EEPROM_REGION_LENGTH__+0x2bc>
 b1c:	01 11       	cpse	r16, r1
 b1e:	80 52       	subi	r24, 0x20	; 32
 b20:	b6 01       	movw	r22, r12
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
 b28:	ff ef       	ldi	r31, 0xFF	; 255
 b2a:	8f 1a       	sub	r8, r31
 b2c:	9f 0a       	sbc	r9, r31
 b2e:	af 0a       	sbc	r10, r31
 b30:	c7 cf       	rjmp	.-114    	; 0xac0 <__EEPROM_REGION_LENGTH__+0x2c0>
 b32:	23 e0       	ldi	r18, 0x03	; 3
 b34:	2f 15       	cp	r18, r15
 b36:	10 f4       	brcc	.+4      	; 0xb3c <__EEPROM_REGION_LENGTH__+0x33c>
 b38:	83 e0       	ldi	r24, 0x03	; 3
 b3a:	b3 cf       	rjmp	.-154    	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 b3c:	f1 2c       	mov	r15, r1
 b3e:	b6 cf       	rjmp	.-148    	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 b40:	64 96       	adiw	r28, 0x14	; 20
 b42:	e2 e1       	ldi	r30, 0x12	; 18
 b44:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__epilogue_restores__>

Disassembly of section .text.libgcc:

0000440e <__tablejump2__>:
    440e:	ee 0f       	add	r30, r30
    4410:	ff 1f       	adc	r31, r31
    4412:	05 90       	lpm	r0, Z+
    4414:	f4 91       	lpm	r31, Z
    4416:	e0 2d       	mov	r30, r0
    4418:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003fc2 <__umulhisi3>:
    3fc2:	a2 9f       	mul	r26, r18
    3fc4:	b0 01       	movw	r22, r0
    3fc6:	b3 9f       	mul	r27, r19
    3fc8:	c0 01       	movw	r24, r0
    3fca:	a3 9f       	mul	r26, r19
    3fcc:	70 0d       	add	r23, r0
    3fce:	81 1d       	adc	r24, r1
    3fd0:	11 24       	eor	r1, r1
    3fd2:	91 1d       	adc	r25, r1
    3fd4:	b2 9f       	mul	r27, r18
    3fd6:	70 0d       	add	r23, r0
    3fd8:	81 1d       	adc	r24, r1
    3fda:	11 24       	eor	r1, r1
    3fdc:	91 1d       	adc	r25, r1
    3fde:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000385a <__prologue_saves__>:
    385a:	2f 92       	push	r2
    385c:	3f 92       	push	r3
    385e:	4f 92       	push	r4
    3860:	5f 92       	push	r5
    3862:	6f 92       	push	r6
    3864:	7f 92       	push	r7
    3866:	8f 92       	push	r8
    3868:	9f 92       	push	r9
    386a:	af 92       	push	r10
    386c:	bf 92       	push	r11
    386e:	cf 92       	push	r12
    3870:	df 92       	push	r13
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	ca 1b       	sub	r28, r26
    3884:	db 0b       	sbc	r29, r27
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000038fe <__epilogue_restores__>:
    38fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3900:	39 88       	ldd	r3, Y+17	; 0x11
    3902:	48 88       	ldd	r4, Y+16	; 0x10
    3904:	5f 84       	ldd	r5, Y+15	; 0x0f
    3906:	6e 84       	ldd	r6, Y+14	; 0x0e
    3908:	7d 84       	ldd	r7, Y+13	; 0x0d
    390a:	8c 84       	ldd	r8, Y+12	; 0x0c
    390c:	9b 84       	ldd	r9, Y+11	; 0x0b
    390e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3910:	b9 84       	ldd	r11, Y+9	; 0x09
    3912:	c8 84       	ldd	r12, Y+8	; 0x08
    3914:	df 80       	ldd	r13, Y+7	; 0x07
    3916:	ee 80       	ldd	r14, Y+6	; 0x06
    3918:	fd 80       	ldd	r15, Y+5	; 0x05
    391a:	0c 81       	ldd	r16, Y+4	; 0x04
    391c:	1b 81       	ldd	r17, Y+3	; 0x03
    391e:	aa 81       	ldd	r26, Y+2	; 0x02
    3920:	b9 81       	ldd	r27, Y+1	; 0x01
    3922:	ce 0f       	add	r28, r30
    3924:	d1 1d       	adc	r29, r1
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	ed 01       	movw	r28, r26
    3932:	08 95       	ret

Disassembly of section .text.avrlibc:

000012a4 <__ftoa_engine>:
    12a4:	28 30       	cpi	r18, 0x08	; 8
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <__ftoa_engine+0x6>
    12a8:	27 e0       	ldi	r18, 0x07	; 7
    12aa:	33 27       	eor	r19, r19
    12ac:	da 01       	movw	r26, r20
    12ae:	99 0f       	add	r25, r25
    12b0:	31 1d       	adc	r19, r1
    12b2:	87 fd       	sbrc	r24, 7
    12b4:	91 60       	ori	r25, 0x01	; 1
    12b6:	00 96       	adiw	r24, 0x00	; 0
    12b8:	61 05       	cpc	r22, r1
    12ba:	71 05       	cpc	r23, r1
    12bc:	39 f4       	brne	.+14     	; 0x12cc <__ftoa_engine+0x28>
    12be:	32 60       	ori	r19, 0x02	; 2
    12c0:	2e 5f       	subi	r18, 0xFE	; 254
    12c2:	3d 93       	st	X+, r19
    12c4:	30 e3       	ldi	r19, 0x30	; 48
    12c6:	2a 95       	dec	r18
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <__ftoa_engine+0x1e>
    12ca:	08 95       	ret
    12cc:	9f 3f       	cpi	r25, 0xFF	; 255
    12ce:	30 f0       	brcs	.+12     	; 0x12dc <__ftoa_engine+0x38>
    12d0:	80 38       	cpi	r24, 0x80	; 128
    12d2:	71 05       	cpc	r23, r1
    12d4:	61 05       	cpc	r22, r1
    12d6:	09 f0       	breq	.+2      	; 0x12da <__ftoa_engine+0x36>
    12d8:	3c 5f       	subi	r19, 0xFC	; 252
    12da:	3c 5f       	subi	r19, 0xFC	; 252
    12dc:	3d 93       	st	X+, r19
    12de:	91 30       	cpi	r25, 0x01	; 1
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__ftoa_engine+0x40>
    12e2:	80 68       	ori	r24, 0x80	; 128
    12e4:	91 1d       	adc	r25, r1
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	1f 93       	push	r17
    12ec:	0f 93       	push	r16
    12ee:	ff 92       	push	r15
    12f0:	ef 92       	push	r14
    12f2:	19 2f       	mov	r17, r25
    12f4:	98 7f       	andi	r25, 0xF8	; 248
    12f6:	96 95       	lsr	r25
    12f8:	e9 2f       	mov	r30, r25
    12fa:	96 95       	lsr	r25
    12fc:	96 95       	lsr	r25
    12fe:	e9 0f       	add	r30, r25
    1300:	ff 27       	eor	r31, r31
    1302:	e2 5a       	subi	r30, 0xA2	; 162
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	99 27       	eor	r25, r25
    1308:	33 27       	eor	r19, r19
    130a:	ee 24       	eor	r14, r14
    130c:	ff 24       	eor	r15, r15
    130e:	a7 01       	movw	r20, r14
    1310:	e7 01       	movw	r28, r14
    1312:	05 90       	lpm	r0, Z+
    1314:	08 94       	sec
    1316:	07 94       	ror	r0
    1318:	28 f4       	brcc	.+10     	; 0x1324 <__ftoa_engine+0x80>
    131a:	36 0f       	add	r19, r22
    131c:	e7 1e       	adc	r14, r23
    131e:	f8 1e       	adc	r15, r24
    1320:	49 1f       	adc	r20, r25
    1322:	51 1d       	adc	r21, r1
    1324:	66 0f       	add	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	06 94       	lsr	r0
    132e:	a1 f7       	brne	.-24     	; 0x1318 <__ftoa_engine+0x74>
    1330:	05 90       	lpm	r0, Z+
    1332:	07 94       	ror	r0
    1334:	28 f4       	brcc	.+10     	; 0x1340 <__ftoa_engine+0x9c>
    1336:	e7 0e       	add	r14, r23
    1338:	f8 1e       	adc	r15, r24
    133a:	49 1f       	adc	r20, r25
    133c:	56 1f       	adc	r21, r22
    133e:	c1 1d       	adc	r28, r1
    1340:	77 0f       	add	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	66 1f       	adc	r22, r22
    1348:	06 94       	lsr	r0
    134a:	a1 f7       	brne	.-24     	; 0x1334 <__ftoa_engine+0x90>
    134c:	05 90       	lpm	r0, Z+
    134e:	07 94       	ror	r0
    1350:	28 f4       	brcc	.+10     	; 0x135c <__ftoa_engine+0xb8>
    1352:	f8 0e       	add	r15, r24
    1354:	49 1f       	adc	r20, r25
    1356:	56 1f       	adc	r21, r22
    1358:	c7 1f       	adc	r28, r23
    135a:	d1 1d       	adc	r29, r1
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	66 1f       	adc	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	06 94       	lsr	r0
    1366:	a1 f7       	brne	.-24     	; 0x1350 <__ftoa_engine+0xac>
    1368:	05 90       	lpm	r0, Z+
    136a:	07 94       	ror	r0
    136c:	20 f4       	brcc	.+8      	; 0x1376 <__ftoa_engine+0xd2>
    136e:	49 0f       	add	r20, r25
    1370:	56 1f       	adc	r21, r22
    1372:	c7 1f       	adc	r28, r23
    1374:	d8 1f       	adc	r29, r24
    1376:	99 0f       	add	r25, r25
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	06 94       	lsr	r0
    1380:	a9 f7       	brne	.-22     	; 0x136c <__ftoa_engine+0xc8>
    1382:	84 91       	lpm	r24, Z
    1384:	10 95       	com	r17
    1386:	17 70       	andi	r17, 0x07	; 7
    1388:	41 f0       	breq	.+16     	; 0x139a <__ftoa_engine+0xf6>
    138a:	d6 95       	lsr	r29
    138c:	c7 95       	ror	r28
    138e:	57 95       	ror	r21
    1390:	47 95       	ror	r20
    1392:	f7 94       	ror	r15
    1394:	e7 94       	ror	r14
    1396:	1a 95       	dec	r17
    1398:	c1 f7       	brne	.-16     	; 0x138a <__ftoa_engine+0xe6>
    139a:	e4 e0       	ldi	r30, 0x04	; 4
    139c:	f1 e0       	ldi	r31, 0x01	; 1
    139e:	68 94       	set
    13a0:	15 90       	lpm	r1, Z+
    13a2:	15 91       	lpm	r17, Z+
    13a4:	35 91       	lpm	r19, Z+
    13a6:	65 91       	lpm	r22, Z+
    13a8:	95 91       	lpm	r25, Z+
    13aa:	05 90       	lpm	r0, Z+
    13ac:	7f e2       	ldi	r23, 0x2F	; 47
    13ae:	73 95       	inc	r23
    13b0:	e1 18       	sub	r14, r1
    13b2:	f1 0a       	sbc	r15, r17
    13b4:	43 0b       	sbc	r20, r19
    13b6:	56 0b       	sbc	r21, r22
    13b8:	c9 0b       	sbc	r28, r25
    13ba:	d0 09       	sbc	r29, r0
    13bc:	c0 f7       	brcc	.-16     	; 0x13ae <__ftoa_engine+0x10a>
    13be:	e1 0c       	add	r14, r1
    13c0:	f1 1e       	adc	r15, r17
    13c2:	43 1f       	adc	r20, r19
    13c4:	56 1f       	adc	r21, r22
    13c6:	c9 1f       	adc	r28, r25
    13c8:	d0 1d       	adc	r29, r0
    13ca:	7e f4       	brtc	.+30     	; 0x13ea <__ftoa_engine+0x146>
    13cc:	70 33       	cpi	r23, 0x30	; 48
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <__ftoa_engine+0x130>
    13d0:	8a 95       	dec	r24
    13d2:	e6 cf       	rjmp	.-52     	; 0x13a0 <__ftoa_engine+0xfc>
    13d4:	e8 94       	clt
    13d6:	01 50       	subi	r16, 0x01	; 1
    13d8:	30 f0       	brcs	.+12     	; 0x13e6 <__ftoa_engine+0x142>
    13da:	08 0f       	add	r16, r24
    13dc:	0a f4       	brpl	.+2      	; 0x13e0 <__ftoa_engine+0x13c>
    13de:	00 27       	eor	r16, r16
    13e0:	02 17       	cp	r16, r18
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <__ftoa_engine+0x142>
    13e4:	20 2f       	mov	r18, r16
    13e6:	23 95       	inc	r18
    13e8:	02 2f       	mov	r16, r18
    13ea:	7a 33       	cpi	r23, 0x3A	; 58
    13ec:	28 f0       	brcs	.+10     	; 0x13f8 <__ftoa_engine+0x154>
    13ee:	79 e3       	ldi	r23, 0x39	; 57
    13f0:	7d 93       	st	X+, r23
    13f2:	2a 95       	dec	r18
    13f4:	e9 f7       	brne	.-6      	; 0x13f0 <__ftoa_engine+0x14c>
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <__ftoa_engine+0x174>
    13f8:	7d 93       	st	X+, r23
    13fa:	2a 95       	dec	r18
    13fc:	89 f6       	brne	.-94     	; 0x13a0 <__ftoa_engine+0xfc>
    13fe:	06 94       	lsr	r0
    1400:	97 95       	ror	r25
    1402:	67 95       	ror	r22
    1404:	37 95       	ror	r19
    1406:	17 95       	ror	r17
    1408:	17 94       	ror	r1
    140a:	e1 18       	sub	r14, r1
    140c:	f1 0a       	sbc	r15, r17
    140e:	43 0b       	sbc	r20, r19
    1410:	56 0b       	sbc	r21, r22
    1412:	c9 0b       	sbc	r28, r25
    1414:	d0 09       	sbc	r29, r0
    1416:	98 f0       	brcs	.+38     	; 0x143e <__ftoa_engine+0x19a>
    1418:	23 95       	inc	r18
    141a:	7e 91       	ld	r23, -X
    141c:	73 95       	inc	r23
    141e:	7a 33       	cpi	r23, 0x3A	; 58
    1420:	08 f0       	brcs	.+2      	; 0x1424 <__ftoa_engine+0x180>
    1422:	70 e3       	ldi	r23, 0x30	; 48
    1424:	7c 93       	st	X, r23
    1426:	20 13       	cpse	r18, r16
    1428:	b8 f7       	brcc	.-18     	; 0x1418 <__ftoa_engine+0x174>
    142a:	7e 91       	ld	r23, -X
    142c:	70 61       	ori	r23, 0x10	; 16
    142e:	7d 93       	st	X+, r23
    1430:	30 f0       	brcs	.+12     	; 0x143e <__ftoa_engine+0x19a>
    1432:	83 95       	inc	r24
    1434:	71 e3       	ldi	r23, 0x31	; 49
    1436:	7d 93       	st	X+, r23
    1438:	70 e3       	ldi	r23, 0x30	; 48
    143a:	2a 95       	dec	r18
    143c:	e1 f7       	brne	.-8      	; 0x1436 <__ftoa_engine+0x192>
    143e:	11 24       	eor	r1, r1
    1440:	ef 90       	pop	r14
    1442:	ff 90       	pop	r15
    1444:	0f 91       	pop	r16
    1446:	1f 91       	pop	r17
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	99 27       	eor	r25, r25
    144e:	87 fd       	sbrc	r24, 7
    1450:	90 95       	com	r25
    1452:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ace <memcpy>:
    3ace:	cf 92       	push	r12
    3ad0:	df 92       	push	r13
    3ad2:	ef 92       	push	r14
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	6a 01       	movw	r12, r20
    3ad8:	e6 2e       	mov	r14, r22
    3ada:	28 0f       	add	r18, r24
    3adc:	39 1f       	adc	r19, r25
    3ade:	a2 17       	cp	r26, r18
    3ae0:	b3 07       	cpc	r27, r19
    3ae2:	51 f0       	breq	.+20     	; 0x3af8 <memcpy+0x2a>
    3ae4:	f6 01       	movw	r30, r12
    3ae6:	44 91       	lpm	r20, Z
    3ae8:	e7 fc       	sbrc	r14, 7
    3aea:	40 81       	ld	r20, Z
    3aec:	4d 93       	st	X+, r20
    3aee:	4f ef       	ldi	r20, 0xFF	; 255
    3af0:	c4 1a       	sub	r12, r20
    3af2:	d4 0a       	sbc	r13, r20
    3af4:	e4 0a       	sbc	r14, r20
    3af6:	f3 cf       	rjmp	.-26     	; 0x3ade <memcpy+0x10>
    3af8:	ef 90       	pop	r14
    3afa:	df 90       	pop	r13
    3afc:	cf 90       	pop	r12
    3afe:	08 95       	ret

Disassembly of section .text.avrlibc:

000035fa <strcmp>:
    35fa:	cf 92       	push	r12
    35fc:	df 92       	push	r13
    35fe:	ef 92       	push	r14
    3600:	6b 01       	movw	r12, r22
    3602:	e8 2e       	mov	r14, r24
    3604:	f6 01       	movw	r30, r12
    3606:	84 91       	lpm	r24, Z
    3608:	e7 fc       	sbrc	r14, 7
    360a:	80 81       	ld	r24, Z
    360c:	f9 01       	movw	r30, r18
    360e:	54 91       	lpm	r21, Z
    3610:	47 fd       	sbrc	r20, 7
    3612:	50 81       	ld	r21, Z
    3614:	85 13       	cpse	r24, r21
    3616:	0b c0       	rjmp	.+22     	; 0x362e <strcmp+0x34>
    3618:	88 23       	and	r24, r24
    361a:	41 f0       	breq	.+16     	; 0x362c <strcmp+0x32>
    361c:	8f ef       	ldi	r24, 0xFF	; 255
    361e:	c8 1a       	sub	r12, r24
    3620:	d8 0a       	sbc	r13, r24
    3622:	e8 0a       	sbc	r14, r24
    3624:	2f 5f       	subi	r18, 0xFF	; 255
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	4f 4f       	sbci	r20, 0xFF	; 255
    362a:	ec cf       	rjmp	.-40     	; 0x3604 <strcmp+0xa>
    362c:	58 2f       	mov	r21, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	85 1b       	sub	r24, r21
    3632:	91 09       	sbc	r25, r1
    3634:	ef 90       	pop	r14
    3636:	df 90       	pop	r13
    3638:	cf 90       	pop	r12
    363a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002b70 <strncmp>:
    2b70:	cf 92       	push	r12
    2b72:	df 92       	push	r13
    2b74:	ef 92       	push	r14
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	6b 01       	movw	r12, r22
    2b7c:	e8 2e       	mov	r14, r24
    2b7e:	01 15       	cp	r16, r1
    2b80:	11 05       	cpc	r17, r1
    2b82:	19 f1       	breq	.+70     	; 0x2bca <strncmp+0x5a>
    2b84:	01 50       	subi	r16, 0x01	; 1
    2b86:	11 09       	sbc	r17, r1
    2b88:	f6 01       	movw	r30, r12
    2b8a:	84 91       	lpm	r24, Z
    2b8c:	e7 fc       	sbrc	r14, 7
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 23       	and	r24, r24
    2b92:	99 f0       	breq	.+38     	; 0x2bba <strncmp+0x4a>
    2b94:	f9 01       	movw	r30, r18
    2b96:	94 91       	lpm	r25, Z
    2b98:	47 fd       	sbrc	r20, 7
    2b9a:	90 81       	ld	r25, Z
    2b9c:	99 23       	and	r25, r25
    2b9e:	69 f0       	breq	.+26     	; 0x2bba <strncmp+0x4a>
    2ba0:	01 15       	cp	r16, r1
    2ba2:	11 05       	cpc	r17, r1
    2ba4:	51 f0       	breq	.+20     	; 0x2bba <strncmp+0x4a>
    2ba6:	89 13       	cpse	r24, r25
    2ba8:	08 c0       	rjmp	.+16     	; 0x2bba <strncmp+0x4a>
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	c8 1a       	sub	r12, r24
    2bae:	d8 0a       	sbc	r13, r24
    2bb0:	e8 0a       	sbc	r14, r24
    2bb2:	2f 5f       	subi	r18, 0xFF	; 255
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	4f 4f       	sbci	r20, 0xFF	; 255
    2bb8:	e5 cf       	rjmp	.-54     	; 0x2b84 <strncmp+0x14>
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	f9 01       	movw	r30, r18
    2bbe:	24 91       	lpm	r18, Z
    2bc0:	47 fd       	sbrc	r20, 7
    2bc2:	20 81       	ld	r18, Z
    2bc4:	82 1b       	sub	r24, r18
    2bc6:	91 09       	sbc	r25, r1
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <strncmp+0x5e>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ef 90       	pop	r14
    2bd4:	df 90       	pop	r13
    2bd6:	cf 90       	pop	r12
    2bd8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003cac <strlen>:
    3cac:	cf 92       	push	r12
    3cae:	df 92       	push	r13
    3cb0:	ef 92       	push	r14
    3cb2:	6b 01       	movw	r12, r22
    3cb4:	e8 2e       	mov	r14, r24
    3cb6:	a8 2f       	mov	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	fc 01       	movw	r30, r24
    3cbc:	24 91       	lpm	r18, Z
    3cbe:	a7 fd       	sbrc	r26, 7
    3cc0:	20 81       	ld	r18, Z
    3cc2:	22 23       	and	r18, r18
    3cc4:	19 f0       	breq	.+6      	; 0x3ccc <strlen+0x20>
    3cc6:	01 96       	adiw	r24, 0x01	; 1
    3cc8:	a1 1d       	adc	r26, r1
    3cca:	f7 cf       	rjmp	.-18     	; 0x3cba <strlen+0xe>
    3ccc:	8c 19       	sub	r24, r12
    3cce:	9d 09       	sbc	r25, r13
    3cd0:	ef 90       	pop	r14
    3cd2:	df 90       	pop	r13
    3cd4:	cf 90       	pop	r12
    3cd6:	08 95       	ret

Disassembly of section .text.avrlibc:

00003fe0 <strcpy>:
    3fe0:	9a 01       	movw	r18, r20
    3fe2:	46 2f       	mov	r20, r22
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	f9 01       	movw	r30, r18
    3fe8:	54 91       	lpm	r21, Z
    3fea:	47 fd       	sbrc	r20, 7
    3fec:	50 81       	ld	r21, Z
    3fee:	5d 93       	st	X+, r21
    3ff0:	55 23       	and	r21, r21
    3ff2:	21 f0       	breq	.+8      	; 0x3ffc <strcpy+0x1c>
    3ff4:	2f 5f       	subi	r18, 0xFF	; 255
    3ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff8:	4f 4f       	sbci	r20, 0xFF	; 255
    3ffa:	f5 cf       	rjmp	.-22     	; 0x3fe6 <strcpy+0x6>
    3ffc:	08 95       	ret

Disassembly of section .text.avrlibc:

00003934 <strnlen>:
    3934:	cf 92       	push	r12
    3936:	df 92       	push	r13
    3938:	ef 92       	push	r14
    393a:	6b 01       	movw	r12, r22
    393c:	e8 2e       	mov	r14, r24
    393e:	a8 2f       	mov	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	41 15       	cp	r20, r1
    3944:	51 05       	cpc	r21, r1
    3946:	31 f4       	brne	.+12     	; 0x3954 <strnlen+0x20>
    3948:	8c 19       	sub	r24, r12
    394a:	9d 09       	sbc	r25, r13
    394c:	ef 90       	pop	r14
    394e:	df 90       	pop	r13
    3950:	cf 90       	pop	r12
    3952:	08 95       	ret
    3954:	fc 01       	movw	r30, r24
    3956:	24 91       	lpm	r18, Z
    3958:	a7 fd       	sbrc	r26, 7
    395a:	20 81       	ld	r18, Z
    395c:	22 23       	and	r18, r18
    395e:	a1 f3       	breq	.-24     	; 0x3948 <strnlen+0x14>
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	a1 1d       	adc	r26, r1
    3964:	41 50       	subi	r20, 0x01	; 1
    3966:	51 09       	sbc	r21, r1
    3968:	ec cf       	rjmp	.-40     	; 0x3942 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000029a4 <fputc>:
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	fb 01       	movw	r30, r22
    29ae:	24 81       	ldd	r18, Z+4	; 0x04
    29b0:	21 fd       	sbrc	r18, 1
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <fputc+0x16>
    29b4:	8f ef       	ldi	r24, 0xFF	; 255
    29b6:	9f ef       	ldi	r25, 0xFF	; 255
    29b8:	2c c0       	rjmp	.+88     	; 0x2a12 <fputc+0x6e>
    29ba:	22 ff       	sbrs	r18, 2
    29bc:	16 c0       	rjmp	.+44     	; 0x29ea <fputc+0x46>
    29be:	47 81       	ldd	r20, Z+7	; 0x07
    29c0:	50 85       	ldd	r21, Z+8	; 0x08
    29c2:	25 81       	ldd	r18, Z+5	; 0x05
    29c4:	36 81       	ldd	r19, Z+6	; 0x06
    29c6:	42 17       	cp	r20, r18
    29c8:	53 07       	cpc	r21, r19
    29ca:	44 f4       	brge	.+16     	; 0x29dc <fputc+0x38>
    29cc:	a0 81       	ld	r26, Z
    29ce:	b1 81       	ldd	r27, Z+1	; 0x01
    29d0:	9d 01       	movw	r18, r26
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	31 83       	std	Z+1, r19	; 0x01
    29d8:	20 83       	st	Z, r18
    29da:	8c 93       	st	X, r24
    29dc:	27 81       	ldd	r18, Z+7	; 0x07
    29de:	30 85       	ldd	r19, Z+8	; 0x08
    29e0:	2f 5f       	subi	r18, 0xFF	; 255
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	30 87       	std	Z+8, r19	; 0x08
    29e6:	27 83       	std	Z+7, r18	; 0x07
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <fputc+0x6e>
    29ea:	8b 01       	movw	r16, r22
    29ec:	ec 01       	movw	r28, r24
    29ee:	fb 01       	movw	r30, r22
    29f0:	01 84       	ldd	r0, Z+9	; 0x09
    29f2:	f2 85       	ldd	r31, Z+10	; 0x0a
    29f4:	e0 2d       	mov	r30, r0
    29f6:	09 95       	icall
    29f8:	89 2b       	or	r24, r25
    29fa:	e1 f6       	brne	.-72     	; 0x29b4 <fputc+0x10>
    29fc:	d8 01       	movw	r26, r16
    29fe:	17 96       	adiw	r26, 0x07	; 7
    2a00:	8d 91       	ld	r24, X+
    2a02:	9c 91       	ld	r25, X
    2a04:	18 97       	sbiw	r26, 0x08	; 8
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	18 96       	adiw	r26, 0x08	; 8
    2a0a:	9c 93       	st	X, r25
    2a0c:	8e 93       	st	-X, r24
    2a0e:	17 97       	sbiw	r26, 0x07	; 7
    2a10:	ce 01       	movw	r24, r28
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	08 95       	ret

Disassembly of section .text.avrlibc:

00003466 <sprintf>:
    3466:	af e0       	ldi	r26, 0x0F	; 15
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e9 e3       	ldi	r30, 0x39	; 57
    346c:	fa e1       	ldi	r31, 0x1A	; 26
    346e:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x1c>
    3472:	0e 89       	ldd	r16, Y+22	; 0x16
    3474:	1f 89       	ldd	r17, Y+23	; 0x17
    3476:	86 e0       	ldi	r24, 0x06	; 6
    3478:	8d 83       	std	Y+5, r24	; 0x05
    347a:	1a 83       	std	Y+2, r17	; 0x02
    347c:	09 83       	std	Y+1, r16	; 0x01
    347e:	8f ef       	ldi	r24, 0xFF	; 255
    3480:	9f e7       	ldi	r25, 0x7F	; 127
    3482:	9f 83       	std	Y+7, r25	; 0x07
    3484:	8e 83       	std	Y+6, r24	; 0x06
    3486:	9e 01       	movw	r18, r28
    3488:	25 5e       	subi	r18, 0xE5	; 229
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	48 8d       	ldd	r20, Y+24	; 0x18
    348e:	59 8d       	ldd	r21, Y+25	; 0x19
    3490:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3492:	ce 01       	movw	r24, r28
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	0e 94 02 02 	call	0x404	; 0x404 <vfprintf>
    349a:	e8 85       	ldd	r30, Y+8	; 0x08
    349c:	f9 85       	ldd	r31, Y+9	; 0x09
    349e:	e0 0f       	add	r30, r16
    34a0:	f1 1f       	adc	r31, r17
    34a2:	10 82       	st	Z, r1
    34a4:	2f 96       	adiw	r28, 0x0f	; 15
    34a6:	e4 e0       	ldi	r30, 0x04	; 4
    34a8:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000021f0 <__ultoa_invert>:
    21f0:	fa 01       	movw	r30, r20
    21f2:	aa 27       	eor	r26, r26
    21f4:	28 30       	cpi	r18, 0x08	; 8
    21f6:	51 f1       	breq	.+84     	; 0x224c <__ultoa_invert+0x5c>
    21f8:	20 31       	cpi	r18, 0x10	; 16
    21fa:	81 f1       	breq	.+96     	; 0x225c <__ultoa_invert+0x6c>
    21fc:	e8 94       	clt
    21fe:	6f 93       	push	r22
    2200:	6e 7f       	andi	r22, 0xFE	; 254
    2202:	6e 5f       	subi	r22, 0xFE	; 254
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	af 4f       	sbci	r26, 0xFF	; 255
    220c:	b1 e0       	ldi	r27, 0x01	; 1
    220e:	3e d0       	rcall	.+124    	; 0x228c <__ultoa_invert+0x9c>
    2210:	b4 e0       	ldi	r27, 0x04	; 4
    2212:	3c d0       	rcall	.+120    	; 0x228c <__ultoa_invert+0x9c>
    2214:	67 0f       	add	r22, r23
    2216:	78 1f       	adc	r23, r24
    2218:	89 1f       	adc	r24, r25
    221a:	9a 1f       	adc	r25, r26
    221c:	a1 1d       	adc	r26, r1
    221e:	68 0f       	add	r22, r24
    2220:	79 1f       	adc	r23, r25
    2222:	8a 1f       	adc	r24, r26
    2224:	91 1d       	adc	r25, r1
    2226:	a1 1d       	adc	r26, r1
    2228:	6a 0f       	add	r22, r26
    222a:	71 1d       	adc	r23, r1
    222c:	81 1d       	adc	r24, r1
    222e:	91 1d       	adc	r25, r1
    2230:	a1 1d       	adc	r26, r1
    2232:	20 d0       	rcall	.+64     	; 0x2274 <__ultoa_invert+0x84>
    2234:	09 f4       	brne	.+2      	; 0x2238 <__ultoa_invert+0x48>
    2236:	68 94       	set
    2238:	3f 91       	pop	r19
    223a:	2a e0       	ldi	r18, 0x0A	; 10
    223c:	26 9f       	mul	r18, r22
    223e:	11 24       	eor	r1, r1
    2240:	30 19       	sub	r19, r0
    2242:	30 5d       	subi	r19, 0xD0	; 208
    2244:	31 93       	st	Z+, r19
    2246:	de f6       	brtc	.-74     	; 0x21fe <__ultoa_invert+0xe>
    2248:	cf 01       	movw	r24, r30
    224a:	08 95       	ret
    224c:	46 2f       	mov	r20, r22
    224e:	47 70       	andi	r20, 0x07	; 7
    2250:	40 5d       	subi	r20, 0xD0	; 208
    2252:	41 93       	st	Z+, r20
    2254:	b3 e0       	ldi	r27, 0x03	; 3
    2256:	0f d0       	rcall	.+30     	; 0x2276 <__ultoa_invert+0x86>
    2258:	c9 f7       	brne	.-14     	; 0x224c <__ultoa_invert+0x5c>
    225a:	f6 cf       	rjmp	.-20     	; 0x2248 <__ultoa_invert+0x58>
    225c:	46 2f       	mov	r20, r22
    225e:	4f 70       	andi	r20, 0x0F	; 15
    2260:	40 5d       	subi	r20, 0xD0	; 208
    2262:	4a 33       	cpi	r20, 0x3A	; 58
    2264:	18 f0       	brcs	.+6      	; 0x226c <__ultoa_invert+0x7c>
    2266:	49 5d       	subi	r20, 0xD9	; 217
    2268:	31 fd       	sbrc	r19, 1
    226a:	40 52       	subi	r20, 0x20	; 32
    226c:	41 93       	st	Z+, r20
    226e:	02 d0       	rcall	.+4      	; 0x2274 <__ultoa_invert+0x84>
    2270:	a9 f7       	brne	.-22     	; 0x225c <__ultoa_invert+0x6c>
    2272:	ea cf       	rjmp	.-44     	; 0x2248 <__ultoa_invert+0x58>
    2274:	b4 e0       	ldi	r27, 0x04	; 4
    2276:	a6 95       	lsr	r26
    2278:	97 95       	ror	r25
    227a:	87 95       	ror	r24
    227c:	77 95       	ror	r23
    227e:	67 95       	ror	r22
    2280:	ba 95       	dec	r27
    2282:	c9 f7       	brne	.-14     	; 0x2276 <__ultoa_invert+0x86>
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	61 05       	cpc	r22, r1
    2288:	71 05       	cpc	r23, r1
    228a:	08 95       	ret
    228c:	9b 01       	movw	r18, r22
    228e:	ac 01       	movw	r20, r24
    2290:	0a 2e       	mov	r0, r26
    2292:	06 94       	lsr	r0
    2294:	57 95       	ror	r21
    2296:	47 95       	ror	r20
    2298:	37 95       	ror	r19
    229a:	27 95       	ror	r18
    229c:	ba 95       	dec	r27
    229e:	c9 f7       	brne	.-14     	; 0x2292 <__ultoa_invert+0xa2>
    22a0:	62 0f       	add	r22, r18
    22a2:	73 1f       	adc	r23, r19
    22a4:	84 1f       	adc	r24, r20
    22a6:	95 1f       	adc	r25, r21
    22a8:	a0 1d       	adc	r26, r0
    22aa:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d9a <eeprom_read_block>:
    3d9a:	ba 01       	movw	r22, r20
    3d9c:	a9 01       	movw	r20, r18
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22

00003da2 <eeprom_read_blraw>:
    3da2:	fc 01       	movw	r30, r24
    3da4:	f9 99       	sbic	0x1f, 1	; 31
    3da6:	fe cf       	rjmp	.-4      	; 0x3da4 <eeprom_read_blraw+0x2>
    3da8:	06 c0       	rjmp	.+12     	; 0x3db6 <eeprom_read_blraw+0x14>
    3daa:	f2 bd       	out	0x22, r31	; 34
    3dac:	e1 bd       	out	0x21, r30	; 33
    3dae:	f8 9a       	sbi	0x1f, 0	; 31
    3db0:	31 96       	adiw	r30, 0x01	; 1
    3db2:	00 b4       	in	r0, 0x20	; 32
    3db4:	0d 92       	st	X+, r0
    3db6:	41 50       	subi	r20, 0x01	; 1
    3db8:	50 40       	sbci	r21, 0x00	; 0
    3dba:	b8 f7       	brcc	.-18     	; 0x3daa <eeprom_read_blraw+0x8>
    3dbc:	08 95       	ret

Disassembly of section .text.avrlibc:

0000427e <eeprom_read_byte>:
    427e:	cb 01       	movw	r24, r22
    4280:	f9 99       	sbic	0x1f, 1	; 31
    4282:	fe cf       	rjmp	.-4      	; 0x4280 <eeprom_read_byte+0x2>
    4284:	92 bd       	out	0x22, r25	; 34
    4286:	81 bd       	out	0x21, r24	; 33
    4288:	f8 9a       	sbi	0x1f, 0	; 31
    428a:	99 27       	eor	r25, r25
    428c:	80 b5       	in	r24, 0x20	; 32
    428e:	08 95       	ret

Disassembly of section .text.avrlibc:

00004386 <eeprom_read_dword>:
    4386:	cb 01       	movw	r24, r22
    4388:	a6 e1       	ldi	r26, 0x16	; 22
    438a:	b0 e0       	ldi	r27, 0x00	; 0
    438c:	44 e0       	ldi	r20, 0x04	; 4
    438e:	50 e0       	ldi	r21, 0x00	; 0
    4390:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00004394 <eeprom_read_word>:
    4394:	cb 01       	movw	r24, r22
    4396:	a8 e1       	ldi	r26, 0x18	; 24
    4398:	b0 e0       	ldi	r27, 0x00	; 0
    439a:	42 e0       	ldi	r20, 0x02	; 2
    439c:	50 e0       	ldi	r21, 0x00	; 0
    439e:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <eeprom_read_blraw>
