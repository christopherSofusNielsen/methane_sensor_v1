
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000041ae  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  000041ae  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000041ae  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00004209  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000970  00000000  00000000  00004280  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c5e5  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002745  00000000  00000000  000111d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004688  00000000  00000000  0001391a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001820  00000000  00000000  00017fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3a  00000000  00000000  000197c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005085  00000000  00000000  0001a1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  0001f283  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000040ea  000040ea  0000419e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00003ef2  00003ef2  00003fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003e10  00003e10  00003ec4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00003f00  00003f00  00003fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003e24  00003e24  00003ed8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00003f0e  00003f0e  00003fc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00003e38  00003e38  00003eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  00003e4c  00003e4c  00003f00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_init 00000008  0000408e  0000408e  00004142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_active 00000008  00004096  00004096  0000414a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_deactive 00000008  0000409e  0000409e  00004152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_init 0000000e  00003f1c  00003f1c  00003fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_data_ready 0000000a  00004066  00004066  0000411a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_16 0000004e  00002fd4  00002fd4  00003088  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss._cb      00000002  00800726  00800726  000041ae  2**0
                  ALLOC
 29 .text.__vector_13 0000004e  00003022  00003022  000030d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  00800728  00800728  000041ae  2**0
                  ALLOC
 31 .text.start_timer 00000008  000040a6  000040a6  0000415a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.stop_timer 00000006  000040c6  000040c6  0000417a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC2_HAL_init 00000020  00003c24  00003c24  00003cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC2_HAL_subscribe 00000054  00002e8a  00002e8a  00002f3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC2_HAL_cancel 0000003a  00003600  00003600  000036b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_9 0000007c  00002768  00002768  0000281c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss.cnt      00000001  0080072a  0080072a  000041ae  2**0
                  ALLOC
 38 .bss.cbCounter 00000001  0080072b  0080072b  000041ae  2**0
                  ALLOC
 39 .bss.callbacks 0000000a  00800710  00800710  000041ae  2**0
                  ALLOC
 40 .text.start_and_write_data 0000004c  000030be  000030be  00003172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.read_and_stop 0000005a  00002d2c  00002d2c  00002de0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_API_write_data 00000014  00003e60  00003e60  00003f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_API_write_data_stop 0000001a  00003d52  00003d52  00003e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TWI_API_read_data_ack_end_nack_stop 00000032  000038a0  000038a0  00003954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_API_repeat_read_data_stop 00000030  00003936  00003936  000039ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_HAL_init 00000012  00003e9c  00003e9c  00003f50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_HAL_start 00000048  00003364  00003364  00003418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_HAL_repeated_start 00000042  00003504  00003504  000035b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_HAL_write_byte 00000020  00003c44  00003c44  00003cf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_HAL_read_byte_ack 00000014  00003e74  00003e74  00003f28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_HAL_read_byte_nack 00000014  00003e88  00003e88  00003f3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_HAL_stop 00000010  00003ed2  00003ed2  00003f86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.copy_buffer 0000002e  000039f6  000039f6  00003aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart0_hal_init 0000003c  00003588  00003588  0000363c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart0_hal_send_string 0000006a  00002b92  00002b92  00002c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.uart0_hal_message_ready 0000000e  00003f2a  00003f2a  00003fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.uart0_hal_clear_rx_buffer 0000000a  00004070  00004070  00004124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.uart0_hal_read_message_as_str 00000028  00003aac  00003aac  00003b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.__vector_22 0000004a  00003286  00003286  0000333a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__vector_20 00000074  00002a3e  00002a3e  00002af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .bss.rx_buffer_has_message 00000001  0080072c  0080072c  000041ae  2**0
                  ALLOC
 62 .bss.rx_buffer_data_len 00000001  0080072d  0080072d  000041ae  2**0
                  ALLOC
 63 .bss.tx_buffer_cursor 00000001  0080072e  0080072e  000041ae  2**0
                  ALLOC
 64 .bss.tx_buffer_data_len 00000001  0080072f  0080072f  000041ae  2**0
                  ALLOC
 65 .text.copy_buffer 0000002e  00003a24  00003a24  00003ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart1_hal_init 0000003c  000035c4  000035c4  00003678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart1_hal_send_string 0000008a  000026de  000026de  00002792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart1_hal_message_ready 0000000e  00003f38  00003f38  00003fec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart1_hal_rx_full 0000000e  00003f46  00003f46  00003ffa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart1_hal_clear_rx_buffer 0000000a  0000407a  0000407a  0000412e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart1_hal_read_message_as_str 00000028  00003ad4  00003ad4  00003b88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_30 0000004a  000032d0  000032d0  00003384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_28 00000070  00002ab2  00002ab2  00002b66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .bss.rx_buffer_has_message 00000001  00800730  00800730  000041ae  2**0
                  ALLOC
 75 .bss.rx_buffer_data_len 00000001  00800731  00800731  000041ae  2**0
                  ALLOC
 76 .bss.rx_buffer 00000096  00800616  00800616  000041ae  2**0
                  ALLOC
 77 .bss.tx_buffer_cursor 00000001  00800732  00800732  000041ae  2**0
                  ALLOC
 78 .bss.tx_buffer_data_len 00000001  00800733  00800733  000041ae  2**0
                  ALLOC
 79 .bss.tx_buffer 0000012c  008004ea  008004ea  000041ae  2**0
                  ALLOC
 80 .text.main    0000001c  00003d1a  00003d1a  00003dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.calc_ppm_methane 00000096  00002520  00002520  000025d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.ADC_get_value 00000056  00002dde  00002dde  00002e92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .data.PPM_factor 00000004  0080071a  000040ee  000041a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 84 .data.RRL     00000004  0080071e  000040f2  000041a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 85 .data.Vc      00000004  00800722  000040f6  000041aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 86 .text.EM_has_deveui 00000016  00003db8  00003db8  00003e6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_has_appeui 00000016  00003dce  00003dce  00003e82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_has_appkey 00000016  00003de4  00003de4  00003e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_set_deveui 0000003a  0000363a  0000363a  000036ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_get_deveui 00000030  00003966  00003966  00003a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_set_appeui 0000003a  00003674  00003674  00003728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_get_appeui 00000030  00003996  00003996  00003a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_set_appkey 0000003a  000036ae  000036ae  00003762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_get_appkey 00000030  000039c6  000039c6  00003a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_ppmfactor 0000000e  00003f54  00003f54  00004008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_ppmfactor 0000001e  00003c84  00003c84  00003d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_RRL 0000000e  00003f62  00003f62  00004016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_RRL 0000001e  00003ca2  00003ca2  00003d56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_Vcc 0000000e  00003f70  00003f70  00004024  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_Vcc 0000001e  00003cc0  00003cc0  00003d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_collections 0000000e  00003f7e  00003f7e  00004032  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_collections 00000010  00003ee2  00003ee2  00003f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_set_heat_up_time 0000000c  00003fee  00003fee  000040a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_get_heat_up_time 0000000c  00003ffa  00003ffa  000040ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.EM_set_air_pump_time 0000000c  00004006  00004006  000040ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.EM_get_air_pump_time 0000000c  00004012  00004012  000040c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.EM_set_sp_interval 0000000c  0000401e  0000401e  000040d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.EM_get_sp_interval 0000000c  0000402a  0000402a  000040de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_reset_module 00000006  000040cc  000040cc  00004180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.LM_forward_msg 00000006  000040d2  000040d2  00004186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .progmemx.data 00000073  0000049b  0000049b  0000054f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
112 .text.attach_ending 0000001c  00003d36  00003d36  00003dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.util_strbeginswith 0000004a  0000331a  0000331a  000033ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .progmemx.data 00000007  00000592  00000592  00000646  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .text.util_reset_module 00000046  000033ac  000033ac  00003460  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.util_lora_forward_msg 00000038  00003722  00003722  000037d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.datetime_to_BCD 00000100  00001ace  00001ace  00001b82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.RTC_get_current_time 00000140  00001618  00001618  000016cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.RTC_set_current_time 00000068  00002c66  00002c66  00002d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000005a5  000005a5  00000659  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
121 .text.bytes_2_uint 0000001a  00003d6c  00003d6c  00003e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.init_measurement 00000038  0000375a  0000375a  0000380e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.validate_data 00000032  000038d2  000038d2  00003986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.read_value 000000a2  000023e6  000023e6  0000249a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.SCD30_sensor_on 00000022  00003be0  00003be0  00003c94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.SCD30_get_reading 0000001a  00003d86  00003d86  00003e3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .progmemx.data.READ_DATA_CMD 00000002  000005a3  000005a3  00000657  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
128 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000599  00000599  0000064d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
129 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  0000059e  0000059e  00000652  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
130 .text.parse_cmd 00000028  00003afc  00003afc  00003bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.validate_cmd 00000056  00002e34  00002e34  00002ee8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .progmemx.data 000000a4  0000037c  0000037c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.CONF_enter 0000012e  00001758  00001758  0000180c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .progmemx.data 00000066  0000050e  0000050e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
135 .text.CON_RN2483_parse 00000026  00003b4c  00003b4c  00003c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.CON_RN2483 000000e8  00001ccc  00001ccc  00001d80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.CONNECT 00000054  00002ede  00002ede  00002f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000188  000001f4  000001f4  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.read_cols 000000bc  00002116  00002116  000021ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.read_time 00000092  0000264c  0000264c  00002700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.write_deveui 00000078  0000285e  0000285e  00002912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.write_appeui 00000078  000028d6  000028d6  0000298a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.write_appkey 00000078  0000294e  0000294e  00002a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.write_PPM_factor 0000004c  0000310a  0000310a  000031be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.write_RRL 0000004c  00003156  00003156  0000320a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.write_VCC 0000004c  000031a2  000031a2  00003256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.get_time_par 00000034  0000386c  0000386c  00003920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.write_cols 0000012e  00001886  00001886  0000193a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.write_heat_up 0000004c  000031ee  000031ee  000032a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.write_air_pump 00000050  00002f84  00002f84  00003038  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.write_sp_interval 0000004c  0000323a  0000323a  000032ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.write_reset 000000e2  00001db4  00001db4  00001e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.write_time 000000fe  00001bce  00001bce  00001c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.handle_read 000002a2  00000fc6  00000fc6  0000107a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.handle_write 00000200  00001268  00001268  0000131c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .bss.arg      00000050  008006ac  008006ac  000041ae  2**0
                  ALLOC
157 .progmemx.data 0000007b  00000420  00000420  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
158 .text.handle_methane 0000011a  000019b4  000019b4  00001a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.handle_co2 000000a4  00002342  00002342  000023f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.handle_sample 00000098  00002488  00002488  0000253c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.init_methane_SCD30 00000028  00003b24  00003b24  00003bd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .bss.par      00000014  008006fc  008006fc  000041ae  2**0
                  ALLOC
163 .text.count_parameters 00000052  00002f32  00002f32  00002fe6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.par_index 00000070  00002b22  00002b22  00002bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.get_parameter 00000096  000025b6  000025b6  0000266a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.f1      0000000c  00004036  00004036  000040ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .progmemx.data 00000016  00000574  00000574  00000628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
168 .text.test_timing 0000003a  000036e8  000036e8  0000379c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.test_TC2_HAL_start 00000026  00003b72  00003b72  00003c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .bss.f1Cnt    00000001  00800734  00800734  000041ae  2**0
                  ALLOC
171 .text.test_runner 00000006  000040d8  000040d8  0000418c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.calc_crc8 00000036  000037ca  000037ca  0000387e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.get_decimal 000000b4  0000228e  0000228e  00002342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.str2flaot 0000004e  00003070  00003070  00003124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.is_float 00000058  00002d86  00002d86  00002e3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc.fplib 0000000e  00003f8c  00003f8c  00004040  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc.fplib 000000ce  00002048  00002048  000020fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc.fplib 00000008  000040ae  000040ae  00004162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc.fplib 000000de  00001e96  00001e96  00001f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc.fplib 0000005e  00002cce  00002cce  00002d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc.fplib 0000007a  000027e4  000027e4  00002898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.avrlibc.fplib 0000000c  00004042  00004042  000040f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.avrlibc.fplib 00000006  000040de  000040de  00004192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.avrlibc.fplib 0000000e  00003f9a  00003f9a  0000404e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.avrlibc.fplib 0000000e  00003fa8  00003fa8  0000405c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.avrlibc.fplib 00000022  00003c02  00003c02  00003cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.avrlibc.fplib 00000044  00003438  00003438  000034ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.avrlibc.fplib 0000000e  00003fb6  00003fb6  0000406a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc.fplib 00000008  000040b6  000040b6  0000416a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc.fplib 000000d4  00001f74  00001f74  00002028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .progmemx.data 00000008  0000058a  0000058a  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
192 .text.avrlibc 00000744  000005a6  000005a6  0000065a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.libgcc  0000000c  0000404e  0000404e  00004102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.libgcc.mul 0000001e  00003cde  00003cde  00003d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.libgcc.prologue 00000038  00003792  00003792  00003846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.libgcc.prologue 00000036  00003800  00003800  000038b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 00000008  000040be  000040be  00004172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 0000000e  00003fc4  00003fc4  00004078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc 000002dc  00000cea  00000cea  00000d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 000001b0  00001468  00001468  0000151c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 00000012  00003eae  00003eae  00003f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 00000032  00003904  00003904  000039b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 0000002e  00003a52  00003a52  00003b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc 00000042  00003546  00003546  000035fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc 0000006a  00002bfc  00002bfc  00002cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc 0000002c  00003a80  00003a80  00003b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc 0000001e  00003cfc  00003cfc  00003db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc 00000036  00003836  00003836  000038ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.avrlibc 00000078  000029c6  000029c6  00002a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.avrlibc 00000046  000033f2  000033f2  000034a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.avrlibc 000000bc  000021d2  000021d2  00002286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc 00000006  000040e4  000040e4  00004198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.avrlibc 00000024  00003b98  00003b98  00003c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.avrlibc 00000012  00003ec0  00003ec0  00003f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.avrlibc 0000000e  00003fd2  00003fd2  00004086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.avrlibc 0000000e  00003fe0  00003fe0  00004094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc 00000044  0000347c  0000347c  00003530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc 00000024  00003bbc  00003bbc  00003c70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc 00000018  00003da0  00003da0  00003e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc 0000000c  0000405a  0000405a  0000410e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.libgcc.mul 00000020  00003c64  00003c64  00003d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.libgcc.div 00000044  000034c0  000034c0  00003574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.libgcc.mul 00000016  00003dfa  00003dfa  00003eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc  0000000a  00004084  00004084  00004138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
   8:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
   c:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__vector_3>
  10:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  14:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  18:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  1c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  20:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  24:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__vector_9>
  28:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  2c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  30:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  34:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__vector_13>
  38:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  3c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  40:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__vector_16>
  44:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  48:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  4c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  50:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_20>
  54:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  58:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__vector_22>
  5c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  60:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  64:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  68:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  6c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  70:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__vector_28>
  74:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__bad_interrupt>
  78:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__vector_30>
  7c:	c7 0b       	sbc	r28, r23
  7e:	dc 0b       	sbc	r29, r28
  80:	38 0c       	add	r3, r8
  82:	e5 0b       	sbc	r30, r21
  84:	41 0c       	add	r4, r1
  86:	2a 0c       	add	r2, r10
  88:	31 0c       	add	r3, r1
  8a:	f5 0b       	sbc	r31, r21
  8c:	01 0c       	add	r0, r1
  8e:	0d 0c       	add	r0, r13
  90:	17 0c       	add	r1, r7
  92:	23 0c       	add	r2, r3

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	07 1a       	sub	r0, r23
  98:	80 07       	cpc	r24, r16
  9a:	1a 07       	cpc	r17, r26
  9c:	26 00       	.word	0x0026	; ????
  9e:	40 ee       	ldi	r20, 0xE0	; 224
  a0:	07 26       	eor	r0, r23
  a2:	07 35       	cpi	r16, 0x57	; 87
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x146>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

000040ea <__bad_interrupt>:
    40ea:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003ef2 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3ef2:	81 b1       	in	r24, 0x01	; 1
    3ef4:	88 60       	ori	r24, 0x08	; 8
    3ef6:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3ef8:	82 b1       	in	r24, 0x02	; 2
    3efa:	87 7f       	andi	r24, 0xF7	; 247
    3efc:	82 b9       	out	0x02, r24	; 2
    3efe:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003e10 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3e10:	88 23       	and	r24, r24
    3e12:	21 f0       	breq	.+8      	; 0x3e1c <PM_HAL_adc_power+0xc>
    3e14:	82 b1       	in	r24, 0x02	; 2
    3e16:	88 60       	ori	r24, 0x08	; 8
    3e18:	82 b9       	out	0x02, r24	; 2
    3e1a:	08 95       	ret
    3e1c:	82 b1       	in	r24, 0x02	; 2
    3e1e:	87 7f       	andi	r24, 0xF7	; 247
    3e20:	82 b9       	out	0x02, r24	; 2
    3e22:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003f00 <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3f00:	81 b1       	in	r24, 0x01	; 1
    3f02:	80 62       	ori	r24, 0x20	; 32
    3f04:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3f06:	82 b1       	in	r24, 0x02	; 2
    3f08:	8f 7d       	andi	r24, 0xDF	; 223
    3f0a:	82 b9       	out	0x02, r24	; 2
    3f0c:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003e24 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3e24:	88 23       	and	r24, r24
    3e26:	21 f0       	breq	.+8      	; 0x3e30 <PM_HAL_meth_power+0xc>
    3e28:	82 b1       	in	r24, 0x02	; 2
    3e2a:	80 62       	ori	r24, 0x20	; 32
    3e2c:	82 b9       	out	0x02, r24	; 2
    3e2e:	08 95       	ret
    3e30:	82 b1       	in	r24, 0x02	; 2
    3e32:	8f 7d       	andi	r24, 0xDF	; 223
    3e34:	82 b9       	out	0x02, r24	; 2
    3e36:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003f0e <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3f0e:	81 b1       	in	r24, 0x01	; 1
    3f10:	80 61       	ori	r24, 0x10	; 16
    3f12:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3f14:	82 b1       	in	r24, 0x02	; 2
    3f16:	8f 7e       	andi	r24, 0xEF	; 239
    3f18:	82 b9       	out	0x02, r24	; 2
    3f1a:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003e38 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3e38:	88 23       	and	r24, r24
    3e3a:	21 f0       	breq	.+8      	; 0x3e44 <PM_HAL_SCD30_power+0xc>
    3e3c:	82 b1       	in	r24, 0x02	; 2
    3e3e:	80 61       	ori	r24, 0x10	; 16
    3e40:	82 b9       	out	0x02, r24	; 2
    3e42:	08 95       	ret
    3e44:	82 b1       	in	r24, 0x02	; 2
    3e46:	8f 7e       	andi	r24, 0xEF	; 239
    3e48:	82 b9       	out	0x02, r24	; 2
    3e4a:	08 95       	ret

Disassembly of section .text.__vector_3:

00003e4c <__vector_3>:
}

ISR(INT2_vect){
    3e4c:	1f 92       	push	r1
    3e4e:	0f 92       	push	r0
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	0f 92       	push	r0
    3e54:	11 24       	eor	r1, r1
	
}
    3e56:	0f 90       	pop	r0
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	0f 90       	pop	r0
    3e5c:	1f 90       	pop	r1
    3e5e:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000408e <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    408e:	84 b1       	in	r24, 0x04	; 4
    4090:	80 61       	ori	r24, 0x10	; 16
    4092:	84 b9       	out	0x04, r24	; 4
    4094:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00004096 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    4096:	85 b1       	in	r24, 0x05	; 5
    4098:	8f 7e       	andi	r24, 0xEF	; 239
    409a:	85 b9       	out	0x05, r24	; 5
    409c:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000409e <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    409e:	85 b1       	in	r24, 0x05	; 5
    40a0:	80 61       	ori	r24, 0x10	; 16
    40a2:	85 b9       	out	0x05, r24	; 5
    40a4:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003f1c <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3f1c:	87 b1       	in	r24, 0x07	; 7
    3f1e:	8f 7b       	andi	r24, 0xBF	; 191
    3f20:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3f22:	88 b1       	in	r24, 0x08	; 8
    3f24:	8f 7b       	andi	r24, 0xBF	; 191
    3f26:	88 b9       	out	0x08, r24	; 8
    3f28:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00004066 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    4066:	86 b1       	in	r24, 0x06	; 6
    4068:	86 fb       	bst	r24, 6
    406a:	88 27       	eor	r24, r24
    406c:	80 f9       	bld	r24, 0
    406e:	08 95       	ret

Disassembly of section .text.__vector_16:

00002fd4 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    2fd4:	1f 92       	push	r1
    2fd6:	0f 92       	push	r0
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	0f 92       	push	r0
    2fdc:	11 24       	eor	r1, r1
    2fde:	2f 93       	push	r18
    2fe0:	3f 93       	push	r19
    2fe2:	4f 93       	push	r20
    2fe4:	5f 93       	push	r21
    2fe6:	6f 93       	push	r22
    2fe8:	7f 93       	push	r23
    2fea:	8f 93       	push	r24
    2fec:	9f 93       	push	r25
    2fee:	af 93       	push	r26
    2ff0:	bf 93       	push	r27
    2ff2:	ef 93       	push	r30
    2ff4:	ff 93       	push	r31
	_cb();
    2ff6:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <_cb>
    2ffa:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <_cb+0x1>
    2ffe:	09 95       	icall
}
    3000:	ff 91       	pop	r31
    3002:	ef 91       	pop	r30
    3004:	bf 91       	pop	r27
    3006:	af 91       	pop	r26
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	7f 91       	pop	r23
    300e:	6f 91       	pop	r22
    3010:	5f 91       	pop	r21
    3012:	4f 91       	pop	r20
    3014:	3f 91       	pop	r19
    3016:	2f 91       	pop	r18
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	0f 90       	pop	r0
    301e:	1f 90       	pop	r1
    3020:	18 95       	reti

Disassembly of section .text.__vector_13:

00003022 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    3022:	1f 92       	push	r1
    3024:	0f 92       	push	r0
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	0f 92       	push	r0
    302a:	11 24       	eor	r1, r1
    302c:	2f 93       	push	r18
    302e:	3f 93       	push	r19
    3030:	4f 93       	push	r20
    3032:	5f 93       	push	r21
    3034:	6f 93       	push	r22
    3036:	7f 93       	push	r23
    3038:	8f 93       	push	r24
    303a:	9f 93       	push	r25
    303c:	af 93       	push	r26
    303e:	bf 93       	push	r27
    3040:	ef 93       	push	r30
    3042:	ff 93       	push	r31
	_cb();
    3044:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <_cb>
    3048:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <_cb+0x1>
    304c:	09 95       	icall
    304e:	ff 91       	pop	r31
    3050:	ef 91       	pop	r30
    3052:	bf 91       	pop	r27
    3054:	af 91       	pop	r26
    3056:	9f 91       	pop	r25
    3058:	8f 91       	pop	r24
    305a:	7f 91       	pop	r23
    305c:	6f 91       	pop	r22
    305e:	5f 91       	pop	r21
    3060:	4f 91       	pop	r20
    3062:	3f 91       	pop	r19
    3064:	2f 91       	pop	r18
    3066:	0f 90       	pop	r0
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	0f 90       	pop	r0
    306c:	1f 90       	pop	r1
    306e:	18 95       	reti

Disassembly of section .text.start_timer:

000040a6 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    40a6:	87 e0       	ldi	r24, 0x07	; 7
    40a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    40ac:	08 95       	ret

Disassembly of section .text.stop_timer:

000040c6 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    40c6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    40ca:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00003c24 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    3c24:	82 e0       	ldi	r24, 0x02	; 2
    3c26:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    3c2a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3c2e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    3c32:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    3c36:	93 ef       	ldi	r25, 0xF3	; 243
    3c38:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    3c3c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    3c40:	78 94       	sei
    3c42:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00002e8a <TC2_HAL_subscribe>:
    2e8a:	cf 93       	push	r28
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	60 91 2b 07 	lds	r22, 0x072B	; 0x80072b <cbCounter>
    2e92:	65 30       	cpi	r22, 0x05	; 5
    2e94:	00 f5       	brcc	.+64     	; 0x2ed6 <TC2_HAL_subscribe+0x4c>
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	15 c0       	rjmp	.+42     	; 0x2ec4 <TC2_HAL_subscribe+0x3a>
    2e9a:	29 2f       	mov	r18, r25
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	f9 01       	movw	r30, r18
    2ea0:	ee 0f       	add	r30, r30
    2ea2:	ff 1f       	adc	r31, r31
    2ea4:	e0 5f       	subi	r30, 0xF0	; 240
    2ea6:	f8 4f       	sbci	r31, 0xF8	; 248
    2ea8:	40 81       	ld	r20, Z
    2eaa:	51 81       	ldd	r21, Z+1	; 0x01
    2eac:	45 2b       	or	r20, r21
    2eae:	49 f4       	brne	.+18     	; 0x2ec2 <TC2_HAL_subscribe+0x38>
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	f9 01       	movw	r30, r18
    2eb6:	e0 5f       	subi	r30, 0xF0	; 240
    2eb8:	f8 4f       	sbci	r31, 0xF8	; 248
    2eba:	b1 83       	std	Z+1, r27	; 0x01
    2ebc:	a0 83       	st	Z, r26
    2ebe:	c9 2f       	mov	r28, r25
    2ec0:	04 c0       	rjmp	.+8      	; 0x2eca <TC2_HAL_subscribe+0x40>
    2ec2:	9f 5f       	subi	r25, 0xFF	; 255
    2ec4:	95 30       	cpi	r25, 0x05	; 5
    2ec6:	48 f3       	brcs	.-46     	; 0x2e9a <TC2_HAL_subscribe+0x10>
    2ec8:	cf ef       	ldi	r28, 0xFF	; 255
    2eca:	6f 5f       	subi	r22, 0xFF	; 255
    2ecc:	60 93 2b 07 	sts	0x072B, r22	; 0x80072b <cbCounter>
    2ed0:	0e 94 53 20 	call	0x40a6	; 0x40a6 <start_timer>
    2ed4:	01 c0       	rjmp	.+2      	; 0x2ed8 <TC2_HAL_subscribe+0x4e>
    2ed6:	cf ef       	ldi	r28, 0xFF	; 255
    2ed8:	8c 2f       	mov	r24, r28
    2eda:	cf 91       	pop	r28
    2edc:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00003600 <TC2_HAL_cancel>:
    3600:	08 2e       	mov	r0, r24
    3602:	00 0c       	add	r0, r0
    3604:	99 0b       	sbc	r25, r25
    3606:	fc 01       	movw	r30, r24
    3608:	ee 0f       	add	r30, r30
    360a:	ff 1f       	adc	r31, r31
    360c:	e0 5f       	subi	r30, 0xF0	; 240
    360e:	f8 4f       	sbci	r31, 0xF8	; 248
    3610:	20 81       	ld	r18, Z
    3612:	31 81       	ldd	r19, Z+1	; 0x01
    3614:	23 2b       	or	r18, r19
    3616:	81 f0       	breq	.+32     	; 0x3638 <TC2_HAL_cancel+0x38>
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	fc 01       	movw	r30, r24
    361e:	e0 5f       	subi	r30, 0xF0	; 240
    3620:	f8 4f       	sbci	r31, 0xF8	; 248
    3622:	11 82       	std	Z+1, r1	; 0x01
    3624:	10 82       	st	Z, r1
    3626:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <cbCounter>
    362a:	81 50       	subi	r24, 0x01	; 1
    362c:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <cbCounter>
    3630:	81 11       	cpse	r24, r1
    3632:	02 c0       	rjmp	.+4      	; 0x3638 <TC2_HAL_cancel+0x38>
    3634:	0e 94 63 20 	call	0x40c6	; 0x40c6 <stop_timer>
    3638:	08 95       	ret

Disassembly of section .text.__vector_9:

00002768 <__vector_9>:
    2768:	1f 92       	push	r1
    276a:	0f 92       	push	r0
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	0f 92       	push	r0
    2770:	11 24       	eor	r1, r1
    2772:	2f 93       	push	r18
    2774:	3f 93       	push	r19
    2776:	4f 93       	push	r20
    2778:	5f 93       	push	r21
    277a:	6f 93       	push	r22
    277c:	7f 93       	push	r23
    277e:	8f 93       	push	r24
    2780:	9f 93       	push	r25
    2782:	af 93       	push	r26
    2784:	bf 93       	push	r27
    2786:	cf 93       	push	r28
    2788:	ef 93       	push	r30
    278a:	ff 93       	push	r31
    278c:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <cnt>
    2790:	8f 5f       	subi	r24, 0xFF	; 255
    2792:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <cnt>
    2796:	80 32       	cpi	r24, 0x20	; 32
    2798:	99 f4       	brne	.+38     	; 0x27c0 <__vector_9+0x58>
    279a:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <cnt>
    279e:	c0 e0       	ldi	r28, 0x00	; 0
    27a0:	0d c0       	rjmp	.+26     	; 0x27bc <__vector_9+0x54>
    27a2:	ec 2f       	mov	r30, r28
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	e0 5f       	subi	r30, 0xF0	; 240
    27ac:	f8 4f       	sbci	r31, 0xF8	; 248
    27ae:	01 90       	ld	r0, Z+
    27b0:	f0 81       	ld	r31, Z
    27b2:	e0 2d       	mov	r30, r0
    27b4:	30 97       	sbiw	r30, 0x00	; 0
    27b6:	09 f0       	breq	.+2      	; 0x27ba <__vector_9+0x52>
    27b8:	09 95       	icall
    27ba:	cf 5f       	subi	r28, 0xFF	; 255
    27bc:	c5 30       	cpi	r28, 0x05	; 5
    27be:	88 f3       	brcs	.-30     	; 0x27a2 <__vector_9+0x3a>
    27c0:	ff 91       	pop	r31
    27c2:	ef 91       	pop	r30
    27c4:	cf 91       	pop	r28
    27c6:	bf 91       	pop	r27
    27c8:	af 91       	pop	r26
    27ca:	9f 91       	pop	r25
    27cc:	8f 91       	pop	r24
    27ce:	7f 91       	pop	r23
    27d0:	6f 91       	pop	r22
    27d2:	5f 91       	pop	r21
    27d4:	4f 91       	pop	r20
    27d6:	3f 91       	pop	r19
    27d8:	2f 91       	pop	r18
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

Disassembly of section .text.start_and_write_data:

000030be <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	6a 01       	movw	r12, r20
    30ca:	e6 2e       	mov	r14, r22
    30cc:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	0e 94 b2 19 	call	0x3364	; 0x3364 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    30d4:	81 11       	cpse	r24, r1
    30d6:	13 c0       	rjmp	.+38     	; 0x30fe <start_and_write_data+0x40>
    30d8:	c0 e0       	ldi	r28, 0x00	; 0
    30da:	0e c0       	rjmp	.+28     	; 0x30f8 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    30dc:	ae 2d       	mov	r26, r14
    30de:	c6 01       	movw	r24, r12
    30e0:	8c 0f       	add	r24, r28
    30e2:	91 1d       	adc	r25, r1
    30e4:	a1 1d       	adc	r26, r1
    30e6:	fc 01       	movw	r30, r24
    30e8:	84 91       	lpm	r24, Z
    30ea:	a7 fd       	sbrc	r26, 7
    30ec:	80 81       	ld	r24, Z
    30ee:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    30f2:	81 11       	cpse	r24, r1
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    30f6:	cf 5f       	subi	r28, 0xFF	; 255
    30f8:	cd 17       	cp	r28, r29
    30fa:	80 f3       	brcs	.-32     	; 0x30dc <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    30fc:	80 e0       	ldi	r24, 0x00	; 0
}
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002d2c <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	8c 01       	movw	r16, r24
    2d3a:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2d3c:	c0 e0       	ldi	r28, 0x00	; 0
    2d3e:	08 c0       	rjmp	.+16     	; 0x2d50 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2d40:	78 01       	movw	r14, r16
    2d42:	ec 0e       	add	r14, r28
    2d44:	f1 1c       	adc	r15, r1
    2d46:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <TWI_HAL_read_byte_ack>
    2d4a:	f7 01       	movw	r30, r14
    2d4c:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2d4e:	cf 5f       	subi	r28, 0xFF	; 255
    2d50:	2c 2f       	mov	r18, r28
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	8d 2f       	mov	r24, r29
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	28 17       	cp	r18, r24
    2d5c:	39 07       	cpc	r19, r25
    2d5e:	84 f3       	brlt	.-32     	; 0x2d40 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2d60:	8d 2f       	mov	r24, r29
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	e8 01       	movw	r28, r16
    2d68:	c8 0f       	add	r28, r24
    2d6a:	d9 1f       	adc	r29, r25
    2d6c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <TWI_HAL_read_byte_nack>
    2d70:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2d72:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003e60 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3e60:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3e62:	0e 94 5f 18 	call	0x30be	; 0x30be <start_and_write_data>
    3e66:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3e68:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    3e6a:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <TWI_HAL_stop>
	}
	return status;
}
    3e6e:	8c 2f       	mov	r24, r28
    3e70:	cf 91       	pop	r28
    3e72:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003d52 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3d52:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3d54:	0e 94 5f 18 	call	0x30be	; 0x30be <start_and_write_data>
    3d58:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    3d5a:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    3d5e:	c1 11       	cpse	r28, r1
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    3d66:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    3d68:	cf 91       	pop	r28
    3d6a:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000038a0 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	8b 01       	movw	r16, r22
    38aa:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    38ac:	61 e0       	ldi	r22, 0x01	; 1
    38ae:	0e 94 b2 19 	call	0x3364	; 0x3364 <TWI_HAL_start>
    38b2:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    38b4:	88 23       	and	r24, r24
    38b6:	21 f0       	breq	.+8      	; 0x38c0 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    38b8:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <TWI_HAL_stop>
		return status;	
    38bc:	8c 2f       	mov	r24, r28
    38be:	04 c0       	rjmp	.+8      	; 0x38c8 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    38c0:	6d 2f       	mov	r22, r29
    38c2:	c8 01       	movw	r24, r16
    38c4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <read_and_stop>
	
}
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	1f 91       	pop	r17
    38ce:	0f 91       	pop	r16
    38d0:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003936 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	8b 01       	movw	r16, r22
    3940:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3942:	0e 94 82 1a 	call	0x3504	; 0x3504 <TWI_HAL_repeated_start>
    3946:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3948:	88 23       	and	r24, r24
    394a:	21 f0       	breq	.+8      	; 0x3954 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    394c:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <TWI_HAL_stop>
		return status;
    3950:	8c 2f       	mov	r24, r28
    3952:	04 c0       	rjmp	.+8      	; 0x395c <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    3954:	6d 2f       	mov	r22, r29
    3956:	c8 01       	movw	r24, r16
    3958:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <read_and_stop>
	
}
    395c:	df 91       	pop	r29
    395e:	cf 91       	pop	r28
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003e9c <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3e9c:	80 e2       	ldi	r24, 0x20	; 32
    3e9e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    3ea2:	e9 eb       	ldi	r30, 0xB9	; 185
    3ea4:	f0 e0       	ldi	r31, 0x00	; 0
    3ea6:	80 81       	ld	r24, Z
    3ea8:	8c 7f       	andi	r24, 0xFC	; 252
    3eaa:	80 83       	st	Z, r24
    3eac:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00003364 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    336c:	84 ea       	ldi	r24, 0xA4	; 164
    336e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3372:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3376:	99 23       	and	r25, r25
    3378:	e4 f7       	brge	.-8      	; 0x3372 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    337a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    337e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    3380:	88 30       	cpi	r24, 0x08	; 8
    3382:	99 f4       	brne	.+38     	; 0x33aa <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    3384:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3388:	84 e8       	ldi	r24, 0x84	; 132
    338a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    338e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3392:	88 23       	and	r24, r24
    3394:	e4 f7       	brge	.-8      	; 0x338e <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3396:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    339a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    339c:	88 31       	cpi	r24, 0x18	; 24
    339e:	21 f0       	breq	.+8      	; 0x33a8 <TWI_HAL_start+0x44>
    33a0:	80 34       	cpi	r24, 0x40	; 64
    33a2:	19 f4       	brne	.+6      	; 0x33aa <TWI_HAL_start+0x46>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	08 95       	ret
    33a8:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    33aa:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003504 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	28 2f       	mov	r18, r24
    350c:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    350e:	84 ea       	ldi	r24, 0xA4	; 164
    3510:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3514:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3518:	99 23       	and	r25, r25
    351a:	e4 f7       	brge	.-8      	; 0x3514 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    351c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3520:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    3522:	80 31       	cpi	r24, 0x10	; 16
    3524:	79 f4       	brne	.+30     	; 0x3544 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    3526:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    352a:	84 e8       	ldi	r24, 0x84	; 132
    352c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3530:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3534:	88 23       	and	r24, r24
    3536:	e4 f7       	brge	.-8      	; 0x3530 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    3538:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    353c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    353e:	80 34       	cpi	r24, 0x40	; 64
    3540:	09 f4       	brne	.+2      	; 0x3544 <TWI_HAL_repeated_start+0x40>
    3542:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3544:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003c44 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3c44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3c48:	84 e8       	ldi	r24, 0x84	; 132
    3c4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3c4e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3c52:	88 23       	and	r24, r24
    3c54:	e4 f7       	brge	.-8      	; 0x3c4e <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3c56:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3c5a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3c5c:	88 32       	cpi	r24, 0x28	; 40
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <TWI_HAL_write_byte+0x1e>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3c62:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003e74 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3e74:	84 ec       	ldi	r24, 0xC4	; 196
    3e76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3e7a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3e7e:	88 23       	and	r24, r24
    3e80:	e4 f7       	brge	.-8      	; 0x3e7a <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3e82:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3e86:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003e88 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3e88:	84 e8       	ldi	r24, 0x84	; 132
    3e8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3e8e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3e92:	88 23       	and	r24, r24
    3e94:	e4 f7       	brge	.-8      	; 0x3e8e <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3e96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3e9a:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003ed2 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3ed2:	84 e9       	ldi	r24, 0x94	; 148
    3ed4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3ed8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3edc:	84 fd       	sbrc	r24, 4
    3ede:	fc cf       	rjmp	.-8      	; 0x3ed8 <TWI_HAL_stop+0x6>
}
    3ee0:	08 95       	ret

Disassembly of section .text.copy_buffer:

000039f6 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    39f6:	bc 01       	movw	r22, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	09 c0       	rjmp	.+18     	; 0x3a0e <copy_buffer+0x18>
    39fc:	fb 01       	movw	r30, r22
    39fe:	e9 0f       	add	r30, r25
    3a00:	f1 1d       	adc	r31, r1
    3a02:	da 01       	movw	r26, r20
    3a04:	a0 50       	subi	r26, 0x00	; 0
    3a06:	bf 4f       	sbci	r27, 0xFF	; 255
    3a08:	2c 91       	ld	r18, X
    3a0a:	20 83       	st	Z, r18
    3a0c:	9f 5f       	subi	r25, 0xFF	; 255
    3a0e:	49 2f       	mov	r20, r25
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	20 91 2d 07 	lds	r18, 0x072D	; 0x80072d <rx_buffer_data_len>
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	22 50       	subi	r18, 0x02	; 2
    3a1a:	31 09       	sbc	r19, r1
    3a1c:	42 17       	cp	r20, r18
    3a1e:	53 07       	cpc	r21, r19
    3a20:	6c f3       	brlt	.-38     	; 0x39fc <copy_buffer+0x6>
    3a22:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003588 <uart0_hal_init>:
    3588:	e1 ec       	ldi	r30, 0xC1	; 193
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 61       	ori	r24, 0x10	; 16
    3590:	80 83       	st	Z, r24
    3592:	80 81       	ld	r24, Z
    3594:	88 60       	ori	r24, 0x08	; 8
    3596:	80 83       	st	Z, r24
    3598:	80 81       	ld	r24, Z
    359a:	80 68       	ori	r24, 0x80	; 128
    359c:	80 83       	st	Z, r24
    359e:	80 81       	ld	r24, Z
    35a0:	80 64       	ori	r24, 0x40	; 64
    35a2:	80 83       	st	Z, r24
    35a4:	e0 ec       	ldi	r30, 0xC0	; 192
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	82 60       	ori	r24, 0x02	; 2
    35ac:	80 83       	st	Z, r24
    35ae:	86 e0       	ldi	r24, 0x06	; 6
    35b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    35b4:	80 e1       	ldi	r24, 0x10	; 16
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    35bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    35c0:	78 94       	sei
    35c2:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002b92 <uart0_hal_send_string>:
    2b92:	cf 92       	push	r12
    2b94:	df 92       	push	r13
    2b96:	ef 92       	push	r14
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	6b 01       	movw	r12, r22
    2ba0:	e8 2e       	mov	r14, r24
    2ba2:	c0 e0       	ldi	r28, 0x00	; 0
    2ba4:	12 c0       	rjmp	.+36     	; 0x2bca <uart0_hal_send_string+0x38>
    2ba6:	8c 2f       	mov	r24, r28
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	4e 2d       	mov	r20, r14
    2bac:	96 01       	movw	r18, r12
    2bae:	20 0f       	add	r18, r16
    2bb0:	31 1f       	adc	r19, r17
    2bb2:	41 1d       	adc	r20, r1
    2bb4:	17 fd       	sbrc	r17, 7
    2bb6:	4a 95       	dec	r20
    2bb8:	f9 01       	movw	r30, r18
    2bba:	24 91       	lpm	r18, Z
    2bbc:	47 fd       	sbrc	r20, 7
    2bbe:	20 81       	ld	r18, Z
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	ec 59       	subi	r30, 0x9C	; 156
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	20 83       	st	Z, r18
    2bc8:	cf 5f       	subi	r28, 0xFF	; 255
    2bca:	0c 2f       	mov	r16, r28
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	8e 2d       	mov	r24, r14
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    2bd6:	08 17       	cp	r16, r24
    2bd8:	19 07       	cpc	r17, r25
    2bda:	28 f3       	brcs	.-54     	; 0x2ba6 <uart0_hal_send_string+0x14>
    2bdc:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <tx_buffer_data_len>
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <tx_buffer_cursor>
    2be6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2bea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	ef 90       	pop	r14
    2bf6:	df 90       	pop	r13
    2bf8:	cf 90       	pop	r12
    2bfa:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003f2a <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3f2a:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <rx_buffer_has_message>
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	91 11       	cpse	r25, r1
    3f32:	01 c0       	rjmp	.+2      	; 0x3f36 <uart0_hal_message_ready+0xc>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
}
    3f36:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00004070 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4070:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4074:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <rx_buffer_data_len>
    4078:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003aac <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(char msg[]){
    3aac:	0f 93       	push	r16
    3aae:	1f 93       	push	r17
    3ab0:	cf 93       	push	r28
    3ab2:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3ab4:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3ab8:	c0 91 2d 07 	lds	r28, 0x072D	; 0x80072d <rx_buffer_data_len>
    3abc:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3abe:	f8 01       	movw	r30, r16
    3ac0:	ec 0f       	add	r30, r28
    3ac2:	f1 1d       	adc	r31, r1
    3ac4:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3ac6:	0e 94 38 20 	call	0x4070	; 0x4070 <uart0_hal_clear_rx_buffer>
	return len;
}
    3aca:	8c 2f       	mov	r24, r28
    3acc:	cf 91       	pop	r28
    3ace:	1f 91       	pop	r17
    3ad0:	0f 91       	pop	r16
    3ad2:	08 95       	ret

Disassembly of section .text.__vector_22:

00003286 <__vector_22>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3286:	1f 92       	push	r1
    3288:	0f 92       	push	r0
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	0f 92       	push	r0
    328e:	11 24       	eor	r1, r1
    3290:	8f 93       	push	r24
    3292:	ef 93       	push	r30
    3294:	ff 93       	push	r31
    3296:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <tx_buffer_cursor>
    329a:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <tx_buffer_data_len>
    329e:	e8 17       	cp	r30, r24
    32a0:	58 f4       	brcc	.+22     	; 0x32b8 <__vector_22+0x32>
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	8e 0f       	add	r24, r30
    32a6:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <tx_buffer_cursor>
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	ec 59       	subi	r30, 0x9C	; 156
    32ae:	fe 4f       	sbci	r31, 0xFE	; 254
    32b0:	80 81       	ld	r24, Z
    32b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    32b6:	04 c0       	rjmp	.+8      	; 0x32c0 <__vector_22+0x3a>
    32b8:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <tx_buffer_cursor>
    32bc:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <tx_buffer_data_len>
    32c0:	ff 91       	pop	r31
    32c2:	ef 91       	pop	r30
    32c4:	8f 91       	pop	r24
    32c6:	0f 90       	pop	r0
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	0f 90       	pop	r0
    32cc:	1f 90       	pop	r1
    32ce:	18 95       	reti

Disassembly of section .text.__vector_20:

00002a3e <__vector_20>:
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	2f 93       	push	r18
    2a4a:	8f 93       	push	r24
    2a4c:	9f 93       	push	r25
    2a4e:	ef 93       	push	r30
    2a50:	ff 93       	push	r31
    2a52:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <rx_buffer_has_message>
    2a56:	81 11       	cpse	r24, r1
    2a58:	0e c0       	rjmp	.+28     	; 0x2a76 <__vector_20+0x38>
    2a5a:	e0 91 2d 07 	lds	r30, 0x072D	; 0x80072d <rx_buffer_data_len>
    2a5e:	e4 36       	cpi	r30, 0x64	; 100
    2a60:	50 f4       	brcc	.+20     	; 0x2a76 <__vector_20+0x38>
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	8e 0f       	add	r24, r30
    2a66:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <rx_buffer_data_len>
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a70:	e0 50       	subi	r30, 0x00	; 0
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 83       	st	Z, r24
    2a76:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <rx_buffer_data_len>
    2a7a:	83 30       	cpi	r24, 0x03	; 3
    2a7c:	80 f0       	brcs	.+32     	; 0x2a9e <__vector_20+0x60>
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	fc 01       	movw	r30, r24
    2a82:	e1 50       	subi	r30, 0x01	; 1
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	20 81       	ld	r18, Z
    2a88:	2a 30       	cpi	r18, 0x0A	; 10
    2a8a:	49 f4       	brne	.+18     	; 0x2a9e <__vector_20+0x60>
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e2 50       	subi	r30, 0x02	; 2
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	8d 30       	cpi	r24, 0x0D	; 13
    2a96:	19 f4       	brne	.+6      	; 0x2a9e <__vector_20+0x60>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <rx_buffer_has_message>
    2a9e:	ff 91       	pop	r31
    2aa0:	ef 91       	pop	r30
    2aa2:	9f 91       	pop	r25
    2aa4:	8f 91       	pop	r24
    2aa6:	2f 91       	pop	r18
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	0f 90       	pop	r0
    2aae:	1f 90       	pop	r1
    2ab0:	18 95       	reti

Disassembly of section .text.copy_buffer:

00003a24 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3a24:	bc 01       	movw	r22, r24
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	09 c0       	rjmp	.+18     	; 0x3a3c <copy_buffer+0x18>
    3a2a:	fb 01       	movw	r30, r22
    3a2c:	e9 0f       	add	r30, r25
    3a2e:	f1 1d       	adc	r31, r1
    3a30:	da 01       	movw	r26, r20
    3a32:	aa 5e       	subi	r26, 0xEA	; 234
    3a34:	b9 4f       	sbci	r27, 0xF9	; 249
    3a36:	2c 91       	ld	r18, X
    3a38:	20 83       	st	Z, r18
    3a3a:	9f 5f       	subi	r25, 0xFF	; 255
    3a3c:	49 2f       	mov	r20, r25
    3a3e:	50 e0       	ldi	r21, 0x00	; 0
    3a40:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <rx_buffer_data_len>
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	22 50       	subi	r18, 0x02	; 2
    3a48:	31 09       	sbc	r19, r1
    3a4a:	42 17       	cp	r20, r18
    3a4c:	53 07       	cpc	r21, r19
    3a4e:	6c f3       	brlt	.-38     	; 0x3a2a <copy_buffer+0x6>
    3a50:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000035c4 <uart1_hal_init>:
    35c4:	e9 ec       	ldi	r30, 0xC9	; 201
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	80 61       	ori	r24, 0x10	; 16
    35cc:	80 83       	st	Z, r24
    35ce:	80 81       	ld	r24, Z
    35d0:	88 60       	ori	r24, 0x08	; 8
    35d2:	80 83       	st	Z, r24
    35d4:	80 81       	ld	r24, Z
    35d6:	80 68       	ori	r24, 0x80	; 128
    35d8:	80 83       	st	Z, r24
    35da:	80 81       	ld	r24, Z
    35dc:	80 64       	ori	r24, 0x40	; 64
    35de:	80 83       	st	Z, r24
    35e0:	e8 ec       	ldi	r30, 0xC8	; 200
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	82 60       	ori	r24, 0x02	; 2
    35e8:	80 83       	st	Z, r24
    35ea:	86 e0       	ldi	r24, 0x06	; 6
    35ec:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    35f0:	80 e1       	ldi	r24, 0x10	; 16
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    35f8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    35fc:	78 94       	sei
    35fe:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000026de <uart1_hal_send_string>:
    26de:	6f 92       	push	r6
    26e0:	7f 92       	push	r7
    26e2:	8f 92       	push	r8
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	3b 01       	movw	r6, r22
    26ec:	88 2e       	mov	r8, r24
    26ee:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <tx_buffer_data_len>
    26f2:	81 11       	cpse	r24, r1
    26f4:	fc cf       	rjmp	.-8      	; 0x26ee <uart1_hal_send_string+0x10>
    26f6:	88 2d       	mov	r24, r8
    26f8:	b3 01       	movw	r22, r6
    26fa:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    26fe:	bc 01       	movw	r22, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	12 c0       	rjmp	.+36     	; 0x2728 <uart1_hal_send_string+0x4a>
    2704:	29 2f       	mov	r18, r25
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	e8 2c       	mov	r14, r8
    270a:	63 01       	movw	r12, r6
    270c:	c4 0e       	add	r12, r20
    270e:	d5 1e       	adc	r13, r21
    2710:	e1 1c       	adc	r14, r1
    2712:	57 fd       	sbrc	r21, 7
    2714:	ea 94       	dec	r14
    2716:	f6 01       	movw	r30, r12
    2718:	44 91       	lpm	r20, Z
    271a:	e7 fc       	sbrc	r14, 7
    271c:	40 81       	ld	r20, Z
    271e:	f9 01       	movw	r30, r18
    2720:	e6 51       	subi	r30, 0x16	; 22
    2722:	fb 4f       	sbci	r31, 0xFB	; 251
    2724:	40 83       	st	Z, r20
    2726:	9f 5f       	subi	r25, 0xFF	; 255
    2728:	49 2f       	mov	r20, r25
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	46 17       	cp	r20, r22
    272e:	57 07       	cpc	r21, r23
    2730:	48 f3       	brcs	.-46     	; 0x2704 <uart1_hal_send_string+0x26>
    2732:	fb 01       	movw	r30, r22
    2734:	e6 51       	subi	r30, 0x16	; 22
    2736:	fb 4f       	sbci	r31, 0xFB	; 251
    2738:	8d e0       	ldi	r24, 0x0D	; 13
    273a:	80 83       	st	Z, r24
    273c:	fb 01       	movw	r30, r22
    273e:	e5 51       	subi	r30, 0x15	; 21
    2740:	fb 4f       	sbci	r31, 0xFB	; 251
    2742:	8a e0       	ldi	r24, 0x0A	; 10
    2744:	80 83       	st	Z, r24
    2746:	6e 5f       	subi	r22, 0xFE	; 254
    2748:	60 93 33 07 	sts	0x0733, r22	; 0x800733 <tx_buffer_data_len>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <tx_buffer_cursor>
    2752:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_end>
    2756:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	8f 90       	pop	r8
    2762:	7f 90       	pop	r7
    2764:	6f 90       	pop	r6
    2766:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00003f38 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    3f38:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <rx_buffer_has_message>
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	91 11       	cpse	r25, r1
    3f40:	01 c0       	rjmp	.+2      	; 0x3f44 <uart1_hal_message_ready+0xc>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
}
    3f44:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00003f46 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    3f46:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <rx_buffer_data_len>
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	95 39       	cpi	r25, 0x95	; 149
    3f4e:	08 f4       	brcc	.+2      	; 0x3f52 <uart1_hal_rx_full+0xc>
    3f50:	80 e0       	ldi	r24, 0x00	; 0
}
    3f52:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

0000407a <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    407a:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    407e:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <rx_buffer_data_len>
    4082:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00003ad4 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	8c 01       	movw	r16, r24
    3adc:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <copy_buffer>
    3ae0:	c0 91 31 07 	lds	r28, 0x0731	; 0x800731 <rx_buffer_data_len>
    3ae4:	c2 50       	subi	r28, 0x02	; 2
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	ec 0f       	add	r30, r28
    3aea:	f1 1d       	adc	r31, r1
    3aec:	10 82       	st	Z, r1
    3aee:	0e 94 3d 20 	call	0x407a	; 0x407a <uart1_hal_clear_rx_buffer>
    3af2:	8c 2f       	mov	r24, r28
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

Disassembly of section .text.__vector_30:

000032d0 <__vector_30>:
    32d0:	1f 92       	push	r1
    32d2:	0f 92       	push	r0
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	0f 92       	push	r0
    32d8:	11 24       	eor	r1, r1
    32da:	8f 93       	push	r24
    32dc:	ef 93       	push	r30
    32de:	ff 93       	push	r31
    32e0:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <tx_buffer_cursor>
    32e4:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <tx_buffer_data_len>
    32e8:	e8 17       	cp	r30, r24
    32ea:	58 f4       	brcc	.+22     	; 0x3302 <__vector_30+0x32>
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	8e 0f       	add	r24, r30
    32f0:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <tx_buffer_cursor>
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	e6 51       	subi	r30, 0x16	; 22
    32f8:	fb 4f       	sbci	r31, 0xFB	; 251
    32fa:	80 81       	ld	r24, Z
    32fc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3300:	04 c0       	rjmp	.+8      	; 0x330a <__vector_30+0x3a>
    3302:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <tx_buffer_cursor>
    3306:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <tx_buffer_data_len>
    330a:	ff 91       	pop	r31
    330c:	ef 91       	pop	r30
    330e:	8f 91       	pop	r24
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	0f 90       	pop	r0
    3316:	1f 90       	pop	r1
    3318:	18 95       	reti

Disassembly of section .text.__vector_28:

00002ab2 <__vector_28>:
    2ab2:	1f 92       	push	r1
    2ab4:	0f 92       	push	r0
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	0f 92       	push	r0
    2aba:	11 24       	eor	r1, r1
    2abc:	2f 93       	push	r18
    2abe:	8f 93       	push	r24
    2ac0:	9f 93       	push	r25
    2ac2:	ef 93       	push	r30
    2ac4:	ff 93       	push	r31
    2ac6:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <rx_buffer_has_message>
    2aca:	81 11       	cpse	r24, r1
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <__vector_28+0x38>
    2ace:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <rx_buffer_data_len>
    2ad2:	e6 39       	cpi	r30, 0x96	; 150
    2ad4:	50 f4       	brcc	.+20     	; 0x2aea <__vector_28+0x38>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	8e 0f       	add	r24, r30
    2ada:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <rx_buffer_data_len>
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2ae4:	ea 5e       	subi	r30, 0xEA	; 234
    2ae6:	f9 4f       	sbci	r31, 0xF9	; 249
    2ae8:	80 83       	st	Z, r24
    2aea:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <rx_buffer_data_len>
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	fc 01       	movw	r30, r24
    2af2:	eb 5e       	subi	r30, 0xEB	; 235
    2af4:	f9 4f       	sbci	r31, 0xF9	; 249
    2af6:	20 81       	ld	r18, Z
    2af8:	2a 30       	cpi	r18, 0x0A	; 10
    2afa:	49 f4       	brne	.+18     	; 0x2b0e <__vector_28+0x5c>
    2afc:	fc 01       	movw	r30, r24
    2afe:	ec 5e       	subi	r30, 0xEC	; 236
    2b00:	f9 4f       	sbci	r31, 0xF9	; 249
    2b02:	80 81       	ld	r24, Z
    2b04:	8d 30       	cpi	r24, 0x0D	; 13
    2b06:	19 f4       	brne	.+6      	; 0x2b0e <__vector_28+0x5c>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <rx_buffer_has_message>
    2b0e:	ff 91       	pop	r31
    2b10:	ef 91       	pop	r30
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	2f 91       	pop	r18
    2b18:	0f 90       	pop	r0
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	0f 90       	pop	r0
    2b1e:	1f 90       	pop	r1
    2b20:	18 95       	reti

Disassembly of section .text.main:

00003d1a <main>:
#include "PROGRAMS/MAINPG/MAINPG.h"
#include "PROGRAMS/CONFIG_MODE/CONFIG_MODE.h"

int main(void)
{
	test_runner();
    3d1a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <test_runner>
	
	while(1)
	{
		if(1){
			CONF_enter();
    3d1e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d22:	2f ef       	ldi	r18, 0xFF	; 255
    3d24:	81 e1       	ldi	r24, 0x11	; 17
    3d26:	9a e7       	ldi	r25, 0x7A	; 122
    3d28:	21 50       	subi	r18, 0x01	; 1
    3d2a:	80 40       	sbci	r24, 0x00	; 0
    3d2c:	90 40       	sbci	r25, 0x00	; 0
    3d2e:	e1 f7       	brne	.-8      	; 0x3d28 <main+0xe>
    3d30:	00 c0       	rjmp	.+0      	; 0x3d32 <main+0x18>
    3d32:	00 00       	nop
    3d34:	f4 cf       	rjmp	.-24     	; 0x3d1e <main+0x4>

Disassembly of section .text.calc_ppm_methane:

00002520 <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    2520:	8f 92       	push	r8
    2522:	9f 92       	push	r9
    2524:	af 92       	push	r10
    2526:	bf 92       	push	r11
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	bc 01       	movw	r22, r24
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__floatunsisf>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	59 e3       	ldi	r21, 0x39	; 57
    2542:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__mulsf3>
    2546:	80 90 22 07 	lds	r8, 0x0722	; 0x800722 <Vc>
    254a:	90 90 23 07 	lds	r9, 0x0723	; 0x800723 <Vc+0x1>
    254e:	a0 90 24 07 	lds	r10, 0x0724	; 0x800724 <Vc+0x2>
    2552:	b0 90 25 07 	lds	r11, 0x0725	; 0x800725 <Vc+0x3>
    2556:	a5 01       	movw	r20, r10
    2558:	94 01       	movw	r18, r8
    255a:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__mulsf3>
    255e:	6b 01       	movw	r12, r22
    2560:	7c 01       	movw	r14, r24
    2562:	9b 01       	movw	r18, r22
    2564:	ac 01       	movw	r20, r24
    2566:	c5 01       	movw	r24, r10
    2568:	b4 01       	movw	r22, r8
    256a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__subsf3>
    256e:	a7 01       	movw	r20, r14
    2570:	96 01       	movw	r18, r12
    2572:	0e 94 57 20 	call	0x40ae	; 0x40ae <__divsf3>
    2576:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <RRL>
    257a:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <RRL+0x1>
    257e:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <RRL+0x2>
    2582:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <RRL+0x3>
    2586:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__mulsf3>
    258a:	20 91 1a 07 	lds	r18, 0x071A	; 0x80071a <PPM_factor>
    258e:	30 91 1b 07 	lds	r19, 0x071B	; 0x80071b <PPM_factor+0x1>
    2592:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <PPM_factor+0x2>
    2596:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <PPM_factor+0x3>
    259a:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__mulsf3>
    259e:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fixunssfsi>
    25a2:	cb 01       	movw	r24, r22
    25a4:	ff 90       	pop	r15
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	bf 90       	pop	r11
    25ae:	af 90       	pop	r10
    25b0:	9f 90       	pop	r9
    25b2:	8f 90       	pop	r8
    25b4:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002dde <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <ADC_get_value+0xa>
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2dee:	8f ef       	ldi	r24, 0xFF	; 255
    2df0:	9f ef       	ldi	r25, 0xFF	; 255
    2df2:	f8 01       	movw	r30, r16
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2df8:	42 e0       	ldi	r20, 0x02	; 2
    2dfa:	be 01       	movw	r22, r28
    2dfc:	6f 5f       	subi	r22, 0xFF	; 255
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	8d e4       	ldi	r24, 0x4D	; 77
    2e02:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2e06:	81 11       	cpse	r24, r1
    2e08:	0d c0       	rjmp	.+26     	; 0x2e24 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	98 2f       	mov	r25, r24
    2e10:	88 27       	eor	r24, r24
    2e12:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    2e14:	82 2b       	or	r24, r18
    2e16:	0e 94 90 12 	call	0x2520	; 0x2520 <calc_ppm_methane>
    2e1a:	f8 01       	movw	r30, r16
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003db8 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3db8:	60 e4       	ldi	r22, 0x40	; 64
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	80 e8       	ldi	r24, 0x80	; 128
    3dbe:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <eeprom_read_byte>
    3dc2:	91 e0       	ldi	r25, 0x01	; 1
    3dc4:	81 11       	cpse	r24, r1
    3dc6:	01 c0       	rjmp	.+2      	; 0x3dca <EM_has_deveui+0x12>
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
}
    3dca:	89 2f       	mov	r24, r25
    3dcc:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003dce <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3dce:	61 e4       	ldi	r22, 0x41	; 65
    3dd0:	70 e0       	ldi	r23, 0x00	; 0
    3dd2:	80 e8       	ldi	r24, 0x80	; 128
    3dd4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <eeprom_read_byte>
    3dd8:	91 e0       	ldi	r25, 0x01	; 1
    3dda:	81 11       	cpse	r24, r1
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <EM_has_appeui+0x12>
    3dde:	90 e0       	ldi	r25, 0x00	; 0
}
    3de0:	89 2f       	mov	r24, r25
    3de2:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003de4 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3de4:	62 e4       	ldi	r22, 0x42	; 66
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	80 e8       	ldi	r24, 0x80	; 128
    3dea:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <eeprom_read_byte>
    3dee:	91 e0       	ldi	r25, 0x01	; 1
    3df0:	81 11       	cpse	r24, r1
    3df2:	01 c0       	rjmp	.+2      	; 0x3df6 <EM_has_appkey+0x12>
    3df4:	90 e0       	ldi	r25, 0x00	; 0
}
    3df6:	89 2f       	mov	r24, r25
    3df8:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

0000363a <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    363a:	cf 92       	push	r12
    363c:	df 92       	push	r13
    363e:	ef 92       	push	r14
    3640:	6b 01       	movw	r12, r22
    3642:	e8 2e       	mov	r14, r24
    3644:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    3648:	40 97       	sbiw	r24, 0x10	; 16
    364a:	79 f4       	brne	.+30     	; 0x366a <EM_set_deveui+0x30>
    364c:	20 e1       	ldi	r18, 0x10	; 16
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e0       	ldi	r20, 0x00	; 0
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	8e 2d       	mov	r24, r14
    3656:	b6 01       	movw	r22, r12
    3658:	0e 94 3e 1a 	call	0x347c	; 0x347c <eeprom_update_block>
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	80 e4       	ldi	r24, 0x40	; 64
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <eeprom_update_byte>
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	01 c0       	rjmp	.+2      	; 0x366c <EM_set_deveui+0x32>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	ef 90       	pop	r14
    366e:	df 90       	pop	r13
    3670:	cf 90       	pop	r12
    3672:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003966 <EM_get_deveui>:
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	8c 01       	movw	r16, r24
    396e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <EM_has_deveui>
    3972:	c8 2f       	mov	r28, r24
    3974:	88 23       	and	r24, r24
    3976:	51 f0       	breq	.+20     	; 0x398c <EM_get_deveui+0x26>
    3978:	20 e1       	ldi	r18, 0x10	; 16
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	c8 01       	movw	r24, r16
    3984:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <eeprom_read_block>
    3988:	f8 01       	movw	r30, r16
    398a:	10 8a       	std	Z+16, r1	; 0x10
    398c:	8c 2f       	mov	r24, r28
    398e:	cf 91       	pop	r28
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00003674 <EM_set_appeui>:
    3674:	cf 92       	push	r12
    3676:	df 92       	push	r13
    3678:	ef 92       	push	r14
    367a:	6b 01       	movw	r12, r22
    367c:	e8 2e       	mov	r14, r24
    367e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    3682:	40 97       	sbiw	r24, 0x10	; 16
    3684:	79 f4       	brne	.+30     	; 0x36a4 <EM_set_appeui+0x30>
    3686:	20 e1       	ldi	r18, 0x10	; 16
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e1       	ldi	r20, 0x10	; 16
    368c:	50 e0       	ldi	r21, 0x00	; 0
    368e:	8e 2d       	mov	r24, r14
    3690:	b6 01       	movw	r22, r12
    3692:	0e 94 3e 1a 	call	0x347c	; 0x347c <eeprom_update_block>
    3696:	61 e0       	ldi	r22, 0x01	; 1
    3698:	81 e4       	ldi	r24, 0x41	; 65
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <eeprom_update_byte>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	01 c0       	rjmp	.+2      	; 0x36a6 <EM_set_appeui+0x32>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	ef 90       	pop	r14
    36a8:	df 90       	pop	r13
    36aa:	cf 90       	pop	r12
    36ac:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003996 <EM_get_appeui>:
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	cf 93       	push	r28
    399c:	8c 01       	movw	r16, r24
    399e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <EM_has_appeui>
    39a2:	c8 2f       	mov	r28, r24
    39a4:	88 23       	and	r24, r24
    39a6:	51 f0       	breq	.+20     	; 0x39bc <EM_get_appeui+0x26>
    39a8:	20 e1       	ldi	r18, 0x10	; 16
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e1       	ldi	r20, 0x10	; 16
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	c8 01       	movw	r24, r16
    39b4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <eeprom_read_block>
    39b8:	f8 01       	movw	r30, r16
    39ba:	10 8a       	std	Z+16, r1	; 0x10
    39bc:	8c 2f       	mov	r24, r28
    39be:	cf 91       	pop	r28
    39c0:	1f 91       	pop	r17
    39c2:	0f 91       	pop	r16
    39c4:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

000036ae <EM_set_appkey>:
    36ae:	cf 92       	push	r12
    36b0:	df 92       	push	r13
    36b2:	ef 92       	push	r14
    36b4:	6b 01       	movw	r12, r22
    36b6:	e8 2e       	mov	r14, r24
    36b8:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    36bc:	80 97       	sbiw	r24, 0x20	; 32
    36be:	79 f4       	brne	.+30     	; 0x36de <EM_set_appkey+0x30>
    36c0:	20 e2       	ldi	r18, 0x20	; 32
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	40 e2       	ldi	r20, 0x20	; 32
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	8e 2d       	mov	r24, r14
    36ca:	b6 01       	movw	r22, r12
    36cc:	0e 94 3e 1a 	call	0x347c	; 0x347c <eeprom_update_block>
    36d0:	61 e0       	ldi	r22, 0x01	; 1
    36d2:	82 e4       	ldi	r24, 0x42	; 66
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <eeprom_update_byte>
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <EM_set_appkey+0x32>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	ef 90       	pop	r14
    36e2:	df 90       	pop	r13
    36e4:	cf 90       	pop	r12
    36e6:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

000039c6 <EM_get_appkey>:
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	8c 01       	movw	r16, r24
    39ce:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <EM_has_appkey>
    39d2:	c8 2f       	mov	r28, r24
    39d4:	88 23       	and	r24, r24
    39d6:	51 f0       	breq	.+20     	; 0x39ec <EM_get_appkey+0x26>
    39d8:	20 e2       	ldi	r18, 0x20	; 32
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e2       	ldi	r20, 0x20	; 32
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	c8 01       	movw	r24, r16
    39e4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <eeprom_read_block>
    39e8:	f8 01       	movw	r30, r16
    39ea:	10 a2       	std	Z+32, r1	; 0x20
    39ec:	8c 2f       	mov	r24, r28
    39ee:	cf 91       	pop	r28
    39f0:	1f 91       	pop	r17
    39f2:	0f 91       	pop	r16
    39f4:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00003f54 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    3f54:	ab 01       	movw	r20, r22
    3f56:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    3f58:	83 e4       	ldi	r24, 0x43	; 67
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <eeprom_update_dword>
    3f60:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003c84 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	ec 01       	movw	r28, r24
    3c8a:	63 e4       	ldi	r22, 0x43	; 67
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <eeprom_read_dword>
    3c94:	68 83       	st	Y, r22
    3c96:	79 83       	std	Y+1, r23	; 0x01
    3c98:	8a 83       	std	Y+2, r24	; 0x02
    3c9a:	9b 83       	std	Y+3, r25	; 0x03
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00003f62 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    3f62:	ab 01       	movw	r20, r22
    3f64:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    3f66:	87 e4       	ldi	r24, 0x47	; 71
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <eeprom_update_dword>
    3f6e:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003ca2 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	ec 01       	movw	r28, r24
    3ca8:	67 e4       	ldi	r22, 0x47	; 71
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <eeprom_read_dword>
    3cb2:	68 83       	st	Y, r22
    3cb4:	79 83       	std	Y+1, r23	; 0x01
    3cb6:	8a 83       	std	Y+2, r24	; 0x02
    3cb8:	9b 83       	std	Y+3, r25	; 0x03
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00003f70 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    3f70:	ab 01       	movw	r20, r22
    3f72:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    3f74:	8b e4       	ldi	r24, 0x4B	; 75
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <eeprom_update_dword>
    3f7c:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003cc0 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	ec 01       	movw	r28, r24
    3cc6:	6b e4       	ldi	r22, 0x4B	; 75
    3cc8:	70 e0       	ldi	r23, 0x00	; 0
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <eeprom_read_dword>
    3cd0:	68 83       	st	Y, r22
    3cd2:	79 83       	std	Y+1, r23	; 0x01
    3cd4:	8a 83       	std	Y+2, r24	; 0x02
    3cd6:	9b 83       	std	Y+3, r25	; 0x03
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00003f7e <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    3f7e:	24 2f       	mov	r18, r20
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	44 e6       	ldi	r20, 0x64	; 100
    3f84:	50 e0       	ldi	r21, 0x00	; 0
    3f86:	0e 94 3e 1a 	call	0x347c	; 0x347c <eeprom_update_block>
    3f8a:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00003ee2 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    3ee2:	26 2f       	mov	r18, r22
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	44 e6       	ldi	r20, 0x64	; 100
    3ee8:	50 e0       	ldi	r21, 0x00	; 0
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <eeprom_read_block>
    3ef0:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00003fee <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    3fee:	68 2f       	mov	r22, r24
    3ff0:	8f e4       	ldi	r24, 0x4F	; 79
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <eeprom_update_byte>
    3ff8:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00003ffa <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    3ffa:	6f e4       	ldi	r22, 0x4F	; 79
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <eeprom_read_byte>
}
    4004:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00004006 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    4006:	bc 01       	movw	r22, r24
    4008:	80 e5       	ldi	r24, 0x50	; 80
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	0e 94 2d 20 	call	0x405a	; 0x405a <eeprom_update_word>
    4010:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00004012 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    4012:	60 e5       	ldi	r22, 0x50	; 80
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <eeprom_read_word>
}
    401c:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

0000401e <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    401e:	68 2f       	mov	r22, r24
    4020:	82 e5       	ldi	r24, 0x52	; 82
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <eeprom_update_byte>
    4028:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

0000402a <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    402a:	62 e5       	ldi	r22, 0x52	; 82
    402c:	70 e0       	ldi	r23, 0x00	; 0
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <eeprom_read_byte>
    4034:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000040cc <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    40cc:	0e 94 d6 19 	call	0x33ac	; 0x33ac <util_reset_module>
}
    40d0:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000040d2 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    40d2:	0e 94 91 1b 	call	0x3722	; 0x3722 <util_lora_forward_msg>
    40d6:	08 95       	ret

Disassembly of section .text.attach_ending:

00003d36 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    3d36:	fc 01       	movw	r30, r24
    3d38:	01 90       	ld	r0, Z+
    3d3a:	00 20       	and	r0, r0
    3d3c:	e9 f7       	brne	.-6      	; 0x3d38 <attach_ending+0x2>
    3d3e:	cf 01       	movw	r24, r30
    3d40:	23 e0       	ldi	r18, 0x03	; 3
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 ea       	ldi	r20, 0xA0	; 160
    3d46:	54 e0       	ldi	r21, 0x04	; 4
    3d48:	60 e0       	ldi	r22, 0x00	; 0
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
    3d50:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

0000331a <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    331a:	6f 92       	push	r6
    331c:	7f 92       	push	r7
    331e:	8f 92       	push	r8
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	3b 01       	movw	r6, r22
    332c:	88 2e       	mov	r8, r24
    332e:	69 01       	movw	r12, r18
    3330:	e4 2e       	mov	r14, r20
    3332:	84 2f       	mov	r24, r20
    3334:	b9 01       	movw	r22, r18
    3336:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    333a:	8c 01       	movw	r16, r24
    333c:	4e 2d       	mov	r20, r14
    333e:	96 01       	movw	r18, r12
    3340:	88 2d       	mov	r24, r8
    3342:	b3 01       	movw	r22, r6
    3344:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <strncmp>
    3348:	21 e0       	ldi	r18, 0x01	; 1
    334a:	89 2b       	or	r24, r25
    334c:	09 f0       	breq	.+2      	; 0x3350 <util_strbeginswith+0x36>
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	82 2f       	mov	r24, r18
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	ef 90       	pop	r14
    3358:	df 90       	pop	r13
    335a:	cf 90       	pop	r12
    335c:	8f 90       	pop	r8
    335e:	7f 90       	pop	r7
    3360:	6f 90       	pop	r6
    3362:	08 95       	ret

Disassembly of section .text.util_reset_module:

000033ac <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    33ac:	0e 94 4b 20 	call	0x4096	; 0x4096 <rn2483_reset_active>
    33b0:	2f ef       	ldi	r18, 0xFF	; 255
    33b2:	89 e6       	ldi	r24, 0x69	; 105
    33b4:	98 e1       	ldi	r25, 0x18	; 24
    33b6:	21 50       	subi	r18, 0x01	; 1
    33b8:	80 40       	sbci	r24, 0x00	; 0
    33ba:	90 40       	sbci	r25, 0x00	; 0
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <util_reset_module+0xa>
    33be:	00 c0       	rjmp	.+0      	; 0x33c0 <util_reset_module+0x14>
    33c0:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    33c2:	0e 94 4f 20 	call	0x409e	; 0x409e <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    33c6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <uart0_hal_message_ready>
    33ca:	88 23       	and	r24, r24
    33cc:	e1 f3       	breq	.-8      	; 0x33c6 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    33ce:	80 e9       	ldi	r24, 0x90	; 144
    33d0:	92 e0       	ldi	r25, 0x02	; 2
    33d2:	0e 94 56 1d 	call	0x3aac	; 0x3aac <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    33d6:	60 e9       	ldi	r22, 0x90	; 144
    33d8:	72 e0       	ldi	r23, 0x02	; 2
    33da:	80 e8       	ldi	r24, 0x80	; 128
    33dc:	22 e9       	ldi	r18, 0x92	; 146
    33de:	35 e0       	ldi	r19, 0x05	; 5
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	0e 94 8d 19 	call	0x331a	; 0x331a <util_strbeginswith>
    33e6:	88 23       	and	r24, r24
    33e8:	11 f0       	breq	.+4      	; 0x33ee <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    33f0:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00003722 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    3728:	ab 01       	movw	r20, r22
    372a:	68 2f       	mov	r22, r24
    372c:	80 e9       	ldi	r24, 0x90	; 144
    372e:	92 e0       	ldi	r25, 0x02	; 2
    3730:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <strcpy>
	attach_ending(lm_msg);
    3734:	80 e9       	ldi	r24, 0x90	; 144
    3736:	92 e0       	ldi	r25, 0x02	; 2
    3738:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <attach_ending>
	uart0_hal_send_string(lm_msg);
    373c:	60 e9       	ldi	r22, 0x90	; 144
    373e:	72 e0       	ldi	r23, 0x02	; 2
    3740:	80 e8       	ldi	r24, 0x80	; 128
    3742:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    3746:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <uart0_hal_message_ready>
    374a:	88 23       	and	r24, r24
    374c:	e1 f3       	breq	.-8      	; 0x3746 <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    374e:	ce 01       	movw	r24, r28
    3750:	0e 94 56 1d 	call	0x3aac	; 0x3aac <uart0_hal_read_message_as_str>
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001ace <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <datetime_to_BCD+0x8>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <datetime_to_BCD+0xa>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <datetime_to_BCD+0xc>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	f9 01       	movw	r30, r18
    1ae0:	3d ec       	ldi	r19, 0xCD	; 205
    1ae2:	43 9f       	mul	r20, r19
    1ae4:	21 2d       	mov	r18, r1
    1ae6:	11 24       	eor	r1, r1
    1ae8:	26 95       	lsr	r18
    1aea:	26 95       	lsr	r18
    1aec:	26 95       	lsr	r18
    1aee:	10 e1       	ldi	r17, 0x10	; 16
    1af0:	21 9f       	mul	r18, r17
    1af2:	d0 01       	movw	r26, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	22 0f       	add	r18, r18
    1af8:	b2 2f       	mov	r27, r18
    1afa:	bb 0f       	add	r27, r27
    1afc:	bb 0f       	add	r27, r27
    1afe:	2b 0f       	add	r18, r27
    1b00:	42 1b       	sub	r20, r18
    1b02:	4a 2b       	or	r20, r26
    1b04:	40 83       	st	Z, r20
    1b06:	53 9f       	mul	r21, r19
    1b08:	21 2d       	mov	r18, r1
    1b0a:	11 24       	eor	r1, r1
    1b0c:	26 95       	lsr	r18
    1b0e:	26 95       	lsr	r18
    1b10:	26 95       	lsr	r18
    1b12:	40 e1       	ldi	r20, 0x10	; 16
    1b14:	24 9f       	mul	r18, r20
    1b16:	d0 01       	movw	r26, r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	22 0f       	add	r18, r18
    1b1c:	42 2f       	mov	r20, r18
    1b1e:	44 0f       	add	r20, r20
    1b20:	44 0f       	add	r20, r20
    1b22:	24 0f       	add	r18, r20
    1b24:	52 1b       	sub	r21, r18
    1b26:	5a 2b       	or	r21, r26
    1b28:	51 83       	std	Z+1, r21	; 0x01
    1b2a:	63 9f       	mul	r22, r19
    1b2c:	41 2d       	mov	r20, r1
    1b2e:	11 24       	eor	r1, r1
    1b30:	46 95       	lsr	r20
    1b32:	46 95       	lsr	r20
    1b34:	46 95       	lsr	r20
    1b36:	10 e1       	ldi	r17, 0x10	; 16
    1b38:	41 9f       	mul	r20, r17
    1b3a:	d0 01       	movw	r26, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	44 0f       	add	r20, r20
    1b40:	24 2f       	mov	r18, r20
    1b42:	22 0f       	add	r18, r18
    1b44:	22 0f       	add	r18, r18
    1b46:	42 0f       	add	r20, r18
    1b48:	64 1b       	sub	r22, r20
    1b4a:	6a 2b       	or	r22, r26
    1b4c:	62 83       	std	Z+2, r22	; 0x02
    1b4e:	73 9f       	mul	r23, r19
    1b50:	41 2d       	mov	r20, r1
    1b52:	11 24       	eor	r1, r1
    1b54:	46 95       	lsr	r20
    1b56:	46 95       	lsr	r20
    1b58:	46 95       	lsr	r20
    1b5a:	20 e1       	ldi	r18, 0x10	; 16
    1b5c:	42 9f       	mul	r20, r18
    1b5e:	d0 01       	movw	r26, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	44 0f       	add	r20, r20
    1b64:	24 2f       	mov	r18, r20
    1b66:	22 0f       	add	r18, r18
    1b68:	22 0f       	add	r18, r18
    1b6a:	42 0f       	add	r20, r18
    1b6c:	74 1b       	sub	r23, r20
    1b6e:	7a 2b       	or	r23, r26
    1b70:	73 83       	std	Z+3, r23	; 0x03
    1b72:	83 9f       	mul	r24, r19
    1b74:	41 2d       	mov	r20, r1
    1b76:	11 24       	eor	r1, r1
    1b78:	46 95       	lsr	r20
    1b7a:	46 95       	lsr	r20
    1b7c:	46 95       	lsr	r20
    1b7e:	10 e1       	ldi	r17, 0x10	; 16
    1b80:	41 9f       	mul	r20, r17
    1b82:	b0 01       	movw	r22, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	44 0f       	add	r20, r20
    1b88:	24 2f       	mov	r18, r20
    1b8a:	22 0f       	add	r18, r18
    1b8c:	22 0f       	add	r18, r18
    1b8e:	42 0f       	add	r20, r18
    1b90:	84 1b       	sub	r24, r20
    1b92:	86 2b       	or	r24, r22
    1b94:	84 83       	std	Z+4, r24	; 0x04
    1b96:	93 9f       	mul	r25, r19
    1b98:	31 2d       	mov	r19, r1
    1b9a:	11 24       	eor	r1, r1
    1b9c:	36 95       	lsr	r19
    1b9e:	36 95       	lsr	r19
    1ba0:	36 95       	lsr	r19
    1ba2:	20 e1       	ldi	r18, 0x10	; 16
    1ba4:	32 9f       	mul	r19, r18
    1ba6:	a0 01       	movw	r20, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	33 0f       	add	r19, r19
    1bac:	83 2f       	mov	r24, r19
    1bae:	88 0f       	add	r24, r24
    1bb0:	88 0f       	add	r24, r24
    1bb2:	38 0f       	add	r19, r24
    1bb4:	93 1b       	sub	r25, r19
    1bb6:	94 2b       	or	r25, r20
    1bb8:	95 83       	std	Z+5, r25	; 0x05
    1bba:	26 96       	adiw	r28, 0x06	; 6
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001618 <RTC_get_current_time>:
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	27 97       	sbiw	r28, 0x07	; 7
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	8c 01       	movw	r16, r24
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	45 ea       	ldi	r20, 0xA5	; 165
    1636:	55 e0       	ldi	r21, 0x05	; 5
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	81 e5       	ldi	r24, 0x51	; 81
    163c:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <TWI_API_write_data>
    1640:	81 11       	cpse	r24, r1
    1642:	7c c0       	rjmp	.+248    	; 0x173c <RTC_get_current_time+0x124>
    1644:	47 e0       	ldi	r20, 0x07	; 7
    1646:	be 01       	movw	r22, r28
    1648:	6f 5f       	subi	r22, 0xFF	; 255
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	81 e5       	ldi	r24, 0x51	; 81
    164e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <TWI_API_repeat_read_data_stop>
    1652:	81 11       	cpse	r24, r1
    1654:	75 c0       	rjmp	.+234    	; 0x1740 <RTC_get_current_time+0x128>
    1656:	29 81       	ldd	r18, Y+1	; 0x01
    1658:	82 2f       	mov	r24, r18
    165a:	8f 77       	andi	r24, 0x7F	; 127
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	95 95       	asr	r25
    1660:	87 95       	ror	r24
    1662:	95 95       	asr	r25
    1664:	87 95       	ror	r24
    1666:	95 95       	asr	r25
    1668:	87 95       	ror	r24
    166a:	95 95       	asr	r25
    166c:	87 95       	ror	r24
    166e:	88 0f       	add	r24, r24
    1670:	98 2f       	mov	r25, r24
    1672:	99 0f       	add	r25, r25
    1674:	99 0f       	add	r25, r25
    1676:	89 0f       	add	r24, r25
    1678:	2f 70       	andi	r18, 0x0F	; 15
    167a:	82 0f       	add	r24, r18
    167c:	f8 01       	movw	r30, r16
    167e:	80 83       	st	Z, r24
    1680:	2a 81       	ldd	r18, Y+2	; 0x02
    1682:	82 2f       	mov	r24, r18
    1684:	8f 77       	andi	r24, 0x7F	; 127
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	95 95       	asr	r25
    168a:	87 95       	ror	r24
    168c:	95 95       	asr	r25
    168e:	87 95       	ror	r24
    1690:	95 95       	asr	r25
    1692:	87 95       	ror	r24
    1694:	95 95       	asr	r25
    1696:	87 95       	ror	r24
    1698:	88 0f       	add	r24, r24
    169a:	98 2f       	mov	r25, r24
    169c:	99 0f       	add	r25, r25
    169e:	99 0f       	add	r25, r25
    16a0:	89 0f       	add	r24, r25
    16a2:	2f 70       	andi	r18, 0x0F	; 15
    16a4:	82 0f       	add	r24, r18
    16a6:	81 83       	std	Z+1, r24	; 0x01
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	82 2f       	mov	r24, r18
    16ac:	8f 73       	andi	r24, 0x3F	; 63
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	95 95       	asr	r25
    16b2:	87 95       	ror	r24
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	95 95       	asr	r25
    16ba:	87 95       	ror	r24
    16bc:	95 95       	asr	r25
    16be:	87 95       	ror	r24
    16c0:	88 0f       	add	r24, r24
    16c2:	98 2f       	mov	r25, r24
    16c4:	99 0f       	add	r25, r25
    16c6:	99 0f       	add	r25, r25
    16c8:	89 0f       	add	r24, r25
    16ca:	2f 70       	andi	r18, 0x0F	; 15
    16cc:	82 0f       	add	r24, r18
    16ce:	82 83       	std	Z+2, r24	; 0x02
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	82 2f       	mov	r24, r18
    16d4:	8f 73       	andi	r24, 0x3F	; 63
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	95 95       	asr	r25
    16da:	87 95       	ror	r24
    16dc:	95 95       	asr	r25
    16de:	87 95       	ror	r24
    16e0:	95 95       	asr	r25
    16e2:	87 95       	ror	r24
    16e4:	95 95       	asr	r25
    16e6:	87 95       	ror	r24
    16e8:	88 0f       	add	r24, r24
    16ea:	98 2f       	mov	r25, r24
    16ec:	99 0f       	add	r25, r25
    16ee:	99 0f       	add	r25, r25
    16f0:	89 0f       	add	r24, r25
    16f2:	2f 70       	andi	r18, 0x0F	; 15
    16f4:	82 0f       	add	r24, r18
    16f6:	83 83       	std	Z+3, r24	; 0x03
    16f8:	2e 81       	ldd	r18, Y+6	; 0x06
    16fa:	82 2f       	mov	r24, r18
    16fc:	8f 71       	andi	r24, 0x1F	; 31
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	95 95       	asr	r25
    1702:	87 95       	ror	r24
    1704:	95 95       	asr	r25
    1706:	87 95       	ror	r24
    1708:	95 95       	asr	r25
    170a:	87 95       	ror	r24
    170c:	95 95       	asr	r25
    170e:	87 95       	ror	r24
    1710:	88 0f       	add	r24, r24
    1712:	98 2f       	mov	r25, r24
    1714:	99 0f       	add	r25, r25
    1716:	99 0f       	add	r25, r25
    1718:	89 0f       	add	r24, r25
    171a:	2f 70       	andi	r18, 0x0F	; 15
    171c:	82 0f       	add	r24, r18
    171e:	84 83       	std	Z+4, r24	; 0x04
    1720:	8f 81       	ldd	r24, Y+7	; 0x07
    1722:	98 2f       	mov	r25, r24
    1724:	92 95       	swap	r25
    1726:	9f 70       	andi	r25, 0x0F	; 15
    1728:	99 0f       	add	r25, r25
    172a:	29 2f       	mov	r18, r25
    172c:	22 0f       	add	r18, r18
    172e:	22 0f       	add	r18, r18
    1730:	92 0f       	add	r25, r18
    1732:	8f 70       	andi	r24, 0x0F	; 15
    1734:	89 0f       	add	r24, r25
    1736:	85 83       	std	Z+5, r24	; 0x05
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <RTC_get_current_time+0x12a>
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <RTC_get_current_time+0x12a>
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	27 96       	adiw	r28, 0x07	; 7
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00002c66 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	64 97       	sbiw	r28, 0x14	; 20
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    2c7a:	9e 01       	movw	r18, r28
    2c7c:	27 5f       	subi	r18, 0xF7	; 247
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c80:	0e 94 67 0d 	call	0x1ace	; 0x1ace <datetime_to_BCD>
	
	data[0]=0x02;
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    2c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    2c90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c92:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    2c94:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c96:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    2c98:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    2c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9c:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    2c9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ca0:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    2ca2:	ae 01       	movw	r20, r28
    2ca4:	4f 5f       	subi	r20, 0xFF	; 255
    2ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca8:	60 e8       	ldi	r22, 0x80	; 128
    2caa:	28 e0       	ldi	r18, 0x08	; 8
    2cac:	81 e5       	ldi	r24, 0x51	; 81
    2cae:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2cb2:	88 23       	and	r24, r24
    2cb4:	11 f0       	breq	.+4      	; 0x2cba <RTC_set_current_time+0x54>
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    2cba:	80 e0       	ldi	r24, 0x00	; 0
}
    2cbc:	64 96       	adiw	r28, 0x14	; 20
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003d6c <bytes_2_uint>:
	TC1_HAL_start();
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	54 81       	ldd	r21, Z+4	; 0x04
    3d70:	43 81       	ldd	r20, Z+3	; 0x03
    3d72:	31 81       	ldd	r19, Z+1	; 0x01
    3d74:	20 81       	ld	r18, Z
    3d76:	65 2f       	mov	r22, r21
    3d78:	74 2f       	mov	r23, r20
    3d7a:	83 2f       	mov	r24, r19
    3d7c:	92 2f       	mov	r25, r18
    3d7e:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fixunssfsi>
    3d82:	cb 01       	movw	r24, r22
    3d84:	08 95       	ret

Disassembly of section .text.init_measurement:

0000375a <init_measurement>:
    375a:	25 e0       	ldi	r18, 0x05	; 5
    375c:	49 e9       	ldi	r20, 0x99	; 153
    375e:	55 e0       	ldi	r21, 0x05	; 5
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	81 e6       	ldi	r24, 0x61	; 97
    3764:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <TWI_API_write_data_stop>
    3768:	81 11       	cpse	r24, r1
    376a:	0f c0       	rjmp	.+30     	; 0x378a <init_measurement+0x30>
    376c:	25 e0       	ldi	r18, 0x05	; 5
    376e:	4e e9       	ldi	r20, 0x9E	; 158
    3770:	55 e0       	ldi	r21, 0x05	; 5
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	81 e6       	ldi	r24, 0x61	; 97
    3776:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <TWI_API_write_data_stop>
    377a:	81 11       	cpse	r24, r1
    377c:	08 c0       	rjmp	.+16     	; 0x378e <init_measurement+0x34>
    377e:	0e 94 33 20 	call	0x4066	; 0x4066 <SCD30_HAL_data_ready>
    3782:	88 23       	and	r24, r24
    3784:	e1 f3       	breq	.-8      	; 0x377e <init_measurement+0x24>
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	08 95       	ret
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	08 95       	ret
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	08 95       	ret

Disassembly of section .text.validate_data:

000038d2 <validate_data>:
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	ec 01       	movw	r28, r24
    38d8:	62 e0       	ldi	r22, 0x02	; 2
    38da:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <calc_crc8>
    38de:	9a 81       	ldd	r25, Y+2	; 0x02
    38e0:	89 13       	cpse	r24, r25
    38e2:	0a c0       	rjmp	.+20     	; 0x38f8 <validate_data+0x26>
    38e4:	62 e0       	ldi	r22, 0x02	; 2
    38e6:	ce 01       	movw	r24, r28
    38e8:	03 96       	adiw	r24, 0x03	; 3
    38ea:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <calc_crc8>
    38ee:	9d 81       	ldd	r25, Y+5	; 0x05
    38f0:	89 17       	cp	r24, r25
    38f2:	21 f0       	breq	.+8      	; 0x38fc <validate_data+0x2a>
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <validate_data+0x2c>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	01 c0       	rjmp	.+2      	; 0x38fe <validate_data+0x2c>
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	08 95       	ret

Disassembly of section .text.read_value:

000023e6 <read_value>:
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <read_value+0xa>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <read_value+0xc>
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <read_value+0xe>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	8c 01       	movw	r16, r24
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	9f ef       	ldi	r25, 0xFF	; 255
    23fe:	f8 01       	movw	r30, r16
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	0e 94 33 20 	call	0x4066	; 0x4066 <SCD30_HAL_data_ready>
    2408:	81 11       	cpse	r24, r1
    240a:	07 c0       	rjmp	.+14     	; 0x241a <read_value+0x34>
    240c:	8e ef       	ldi	r24, 0xFE	; 254
    240e:	9f ef       	ldi	r25, 0xFF	; 255
    2410:	f8 01       	movw	r30, r16
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	2c c0       	rjmp	.+88     	; 0x2472 <read_value+0x8c>
    241a:	22 e0       	ldi	r18, 0x02	; 2
    241c:	43 ea       	ldi	r20, 0xA3	; 163
    241e:	55 e0       	ldi	r21, 0x05	; 5
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	81 e6       	ldi	r24, 0x61	; 97
    2424:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <TWI_API_write_data_stop>
    2428:	81 11       	cpse	r24, r1
    242a:	1e c0       	rjmp	.+60     	; 0x2468 <read_value+0x82>
    242c:	8f e3       	ldi	r24, 0x3F	; 63
    242e:	9f e1       	ldi	r25, 0x1F	; 31
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <read_value+0x4a>
    2434:	00 c0       	rjmp	.+0      	; 0x2436 <read_value+0x50>
    2436:	00 00       	nop
    2438:	46 e0       	ldi	r20, 0x06	; 6
    243a:	be 01       	movw	r22, r28
    243c:	6f 5f       	subi	r22, 0xFF	; 255
    243e:	7f 4f       	sbci	r23, 0xFF	; 255
    2440:	81 e6       	ldi	r24, 0x61	; 97
    2442:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <TWI_API_read_data_ack_end_nack_stop>
    2446:	81 11       	cpse	r24, r1
    2448:	11 c0       	rjmp	.+34     	; 0x246c <read_value+0x86>
    244a:	ce 01       	movw	r24, r28
    244c:	01 96       	adiw	r24, 0x01	; 1
    244e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <validate_data>
    2452:	88 23       	and	r24, r24
    2454:	69 f0       	breq	.+26     	; 0x2470 <read_value+0x8a>
    2456:	ce 01       	movw	r24, r28
    2458:	01 96       	adiw	r24, 0x01	; 1
    245a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <bytes_2_uint>
    245e:	f8 01       	movw	r30, r16
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <read_value+0x8c>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	03 c0       	rjmp	.+6      	; 0x2472 <read_value+0x8c>
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <read_value+0x8c>
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	26 96       	adiw	r28, 0x06	; 6
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003be0 <SCD30_sensor_on>:
    3be0:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SCD30_HAL_init>
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <PM_HAL_SCD30_power>
    3bea:	2f ef       	ldi	r18, 0xFF	; 255
    3bec:	83 ed       	ldi	r24, 0xD3	; 211
    3bee:	90 e3       	ldi	r25, 0x30	; 48
    3bf0:	21 50       	subi	r18, 0x01	; 1
    3bf2:	80 40       	sbci	r24, 0x00	; 0
    3bf4:	90 40       	sbci	r25, 0x00	; 0
    3bf6:	e1 f7       	brne	.-8      	; 0x3bf0 <SCD30_sensor_on+0x10>
    3bf8:	00 c0       	rjmp	.+0      	; 0x3bfa <SCD30_sensor_on+0x1a>
    3bfa:	00 00       	nop
    3bfc:	0e 94 ad 1b 	call	0x375a	; 0x375a <init_measurement>
    3c00:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003d86 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3d8c:	0e 94 33 20 	call	0x4066	; 0x4066 <SCD30_HAL_data_ready>
    3d90:	88 23       	and	r24, r24
    3d92:	e1 f3       	breq	.-8      	; 0x3d8c <SCD30_get_reading+0x6>
	
	return read_value(value);
    3d94:	ce 01       	movw	r24, r28
    3d96:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <read_value>
}
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	08 95       	ret

Disassembly of section .text.parse_cmd:

00003afc <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3afc:	fc 01       	movw	r30, r24
    3afe:	80 81       	ld	r24, Z
    3b00:	82 37       	cpi	r24, 0x72	; 114
    3b02:	41 f0       	breq	.+16     	; 0x3b14 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    3b04:	87 37       	cpi	r24, 0x77	; 119
    3b06:	41 f0       	breq	.+16     	; 0x3b18 <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    3b08:	83 36       	cpi	r24, 0x63	; 99
    3b0a:	41 f0       	breq	.+16     	; 0x3b1c <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    3b0c:	83 37       	cpi	r24, 0x73	; 115
    3b0e:	41 f4       	brne	.+16     	; 0x3b20 <parse_cmd+0x24>
    3b10:	8a e0       	ldi	r24, 0x0A	; 10
    3b12:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3b14:	87 e0       	ldi	r24, 0x07	; 7
    3b16:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    3b18:	88 e0       	ldi	r24, 0x08	; 8
    3b1a:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    3b1c:	89 e0       	ldi	r24, 0x09	; 9
    3b1e:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    3b20:	85 e0       	ldi	r24, 0x05	; 5
}
    3b22:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002e34 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	80 e8       	ldi	r24, 0x80	; 128
    2e3e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    2e42:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2e44:	fc 01       	movw	r30, r24
    2e46:	31 97       	sbiw	r30, 0x01	; 1
    2e48:	ec 0f       	add	r30, r28
    2e4a:	fd 1f       	adc	r31, r29
    2e4c:	80 81       	ld	r24, Z
    2e4e:	80 32       	cpi	r24, 0x20	; 32
    2e50:	b1 f0       	breq	.+44     	; 0x2e7e <validate_cmd+0x4a>
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0d c0       	rjmp	.+26     	; 0x2e74 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e2 0f       	add	r30, r18
    2e5e:	f3 1f       	adc	r31, r19
    2e60:	90 81       	ld	r25, Z
    2e62:	90 32       	cpi	r25, 0x20	; 32
    2e64:	21 f4       	brne	.+8      	; 0x2e6e <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2e66:	41 11       	cpse	r20, r1
    2e68:	0c c0       	rjmp	.+24     	; 0x2e82 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	01 c0       	rjmp	.+2      	; 0x2e70 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2e70:	2f 5f       	subi	r18, 0xFF	; 255
    2e72:	3f 4f       	sbci	r19, 0xFF	; 255
    2e74:	26 17       	cp	r18, r22
    2e76:	37 07       	cpc	r19, r23
    2e78:	80 f3       	brcs	.-32     	; 0x2e5a <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	03 c0       	rjmp	.+6      	; 0x2e84 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	01 c0       	rjmp	.+2      	; 0x2e84 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    2e82:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001758 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1758:	cf 93       	push	r28
	uart1_hal_init();
    175a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    175e:	c0 e0       	ldi	r28, 0x00	; 0
    1760:	0d c0       	rjmp	.+26     	; 0x177c <CONF_enter+0x24>
				
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    1762:	c2 e0       	ldi	r28, 0x02	; 2
    1764:	0b c0       	rjmp	.+22     	; 0x177c <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1766:	c5 e0       	ldi	r28, 0x05	; 5
    1768:	09 c0       	rjmp	.+18     	; 0x177c <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    176a:	c6 e0       	ldi	r28, 0x06	; 6
    176c:	07 c0       	rjmp	.+14     	; 0x177c <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    176e:	c5 e0       	ldi	r28, 0x05	; 5
    1770:	05 c0       	rjmp	.+10     	; 0x177c <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1772:	c5 e0       	ldi	r28, 0x05	; 5
    1774:	03 c0       	rjmp	.+6      	; 0x177c <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1776:	c5 e0       	ldi	r28, 0x05	; 5
    1778:	01 c0       	rjmp	.+2      	; 0x177c <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    177a:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    177c:	ec 2f       	mov	r30, r28
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ec 30       	cpi	r30, 0x0C	; 12
    1782:	f1 05       	cpc	r31, r1
    1784:	d8 f7       	brcc	.-10     	; 0x177c <CONF_enter+0x24>
    1786:	e2 5c       	subi	r30, 0xC2	; 194
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	0c 94 27 20 	jmp	0x404e	; 0x404e <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    178e:	6c e7       	ldi	r22, 0x7C	; 124
    1790:	73 e0       	ldi	r23, 0x03	; 3
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1798:	62 ea       	ldi	r22, 0xA2	; 162
    179a:	73 e0       	ldi	r23, 0x03	; 3
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				
				if(!init_methane_SCD30()){
    17a2:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <init_methane_SCD30>
    17a6:	81 11       	cpse	r24, r1
    17a8:	dc cf       	rjmp	.-72     	; 0x1762 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    17aa:	64 ec       	ldi	r22, 0xC4	; 196
    17ac:	73 e0       	ldi	r23, 0x03	; 3
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
					state=CONF_EXIT;
    17b4:	c4 e0       	ldi	r28, 0x04	; 4
    17b6:	e2 cf       	rjmp	.-60     	; 0x177c <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    17b8:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart1_hal_message_ready>
    17bc:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    17be:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    17c0:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <uart1_hal_rx_full>
    17c4:	81 11       	cpse	r24, r1
    17c6:	cf cf       	rjmp	.-98     	; 0x1766 <CONF_enter+0xe>
    17c8:	d9 cf       	rjmp	.-78     	; 0x177c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	94 e0       	ldi	r25, 0x04	; 4
    17ce:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	94 e0       	ldi	r25, 0x04	; 4
    17d6:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <validate_cmd>
    17da:	88 23       	and	r24, r24
    17dc:	31 f2       	breq	.-116    	; 0x176a <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    17de:	80 e2       	ldi	r24, 0x20	; 32
    17e0:	94 e0       	ldi	r25, 0x04	; 4
    17e2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <parse_cmd>
    17e6:	c8 2f       	mov	r28, r24
    17e8:	c9 cf       	rjmp	.-110    	; 0x177c <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    17ea:	60 e2       	ldi	r22, 0x20	; 32
    17ec:	74 e0       	ldi	r23, 0x04	; 4
    17ee:	80 e8       	ldi	r24, 0x80	; 128
    17f0:	48 e5       	ldi	r20, 0x58	; 88
    17f2:	53 e0       	ldi	r21, 0x03	; 3
    17f4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <handle_read>
    17f8:	88 23       	and	r24, r24
    17fa:	09 f4       	brne	.+2      	; 0x17fe <CONF_enter+0xa6>
    17fc:	b8 cf       	rjmp	.-144    	; 0x176e <CONF_enter+0x16>
					state=CONF_REPLY;
    17fe:	cb e0       	ldi	r28, 0x0B	; 11
    1800:	bd cf       	rjmp	.-134    	; 0x177c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    1802:	60 e2       	ldi	r22, 0x20	; 32
    1804:	74 e0       	ldi	r23, 0x04	; 4
    1806:	80 e8       	ldi	r24, 0x80	; 128
    1808:	48 e5       	ldi	r20, 0x58	; 88
    180a:	53 e0       	ldi	r21, 0x03	; 3
    180c:	0e 94 34 09 	call	0x1268	; 0x1268 <handle_write>
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <CONF_enter+0xbe>
    1814:	ae cf       	rjmp	.-164    	; 0x1772 <CONF_enter+0x1a>
					state=CONF_REPLY;
    1816:	cb e0       	ldi	r28, 0x0B	; 11
    1818:	b1 cf       	rjmp	.-158    	; 0x177c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    181a:	60 e2       	ldi	r22, 0x20	; 32
    181c:	74 e0       	ldi	r23, 0x04	; 4
    181e:	80 e8       	ldi	r24, 0x80	; 128
    1820:	0e 94 6f 17 	call	0x2ede	; 0x2ede <CONNECT>
    1824:	88 23       	and	r24, r24
    1826:	09 f4       	brne	.+2      	; 0x182a <CONF_enter+0xd2>
    1828:	a6 cf       	rjmp	.-180    	; 0x1776 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    182a:	c2 e0       	ldi	r28, 0x02	; 2
    182c:	a7 cf       	rjmp	.-178    	; 0x177c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    182e:	60 e2       	ldi	r22, 0x20	; 32
    1830:	74 e0       	ldi	r23, 0x04	; 4
    1832:	80 e8       	ldi	r24, 0x80	; 128
    1834:	48 e5       	ldi	r20, 0x58	; 88
    1836:	53 e0       	ldi	r21, 0x03	; 3
    1838:	0e 94 44 12 	call	0x2488	; 0x2488 <handle_sample>
    183c:	88 23       	and	r24, r24
    183e:	09 f4       	brne	.+2      	; 0x1842 <CONF_enter+0xea>
    1840:	9c cf       	rjmp	.-200    	; 0x177a <CONF_enter+0x22>
					state=CONF_REPLY;
    1842:	cb e0       	ldi	r28, 0x0B	; 11
    1844:	9b cf       	rjmp	.-202    	; 0x177c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1846:	68 e5       	ldi	r22, 0x58	; 88
    1848:	73 e0       	ldi	r23, 0x03	; 3
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1850:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1852:	94 cf       	rjmp	.-216    	; 0x177c <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    1854:	63 ee       	ldi	r22, 0xE3	; 227
    1856:	73 e0       	ldi	r23, 0x03	; 3
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    185e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1860:	8d cf       	rjmp	.-230    	; 0x177c <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    1862:	6d ee       	ldi	r22, 0xED	; 237
    1864:	73 e0       	ldi	r23, 0x03	; 3
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    186c:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    186e:	86 cf       	rjmp	.-244    	; 0x177c <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    1870:	0e 94 3d 20 	call	0x407a	; 0x407a <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1874:	6a ef       	ldi	r22, 0xFA	; 250
    1876:	73 e0       	ldi	r23, 0x03	; 3
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    187e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1880:	7d cf       	rjmp	.-262    	; 0x177c <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00003b4c <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    3b50:	bc 01       	movw	r22, r24
    3b52:	80 e8       	ldi	r24, 0x80	; 128
    3b54:	04 e0       	ldi	r16, 0x04	; 4
    3b56:	10 e0       	ldi	r17, 0x00	; 0
    3b58:	2e e0       	ldi	r18, 0x0E	; 14
    3b5a:	35 e0       	ldi	r19, 0x05	; 5
    3b5c:	40 e0       	ldi	r20, 0x00	; 0
    3b5e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <strncmp>
    3b62:	89 2b       	or	r24, r25
    3b64:	11 f4       	brne	.+4      	; 0x3b6a <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    3b66:	84 e0       	ldi	r24, 0x04	; 4
    3b68:	01 c0       	rjmp	.+2      	; 0x3b6c <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    3b6a:	83 e0       	ldi	r24, 0x03	; 3
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001ccc <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1ccc:	6f 92       	push	r6
    1cce:	7f 92       	push	r7
    1cd0:	8f 92       	push	r8
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1cdc:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1cde:	c2 30       	cpi	r28, 0x02	; 2
    1ce0:	19 f1       	breq	.+70     	; 0x1d28 <CON_RN2483+0x5c>
    1ce2:	28 f4       	brcc	.+10     	; 0x1cee <CON_RN2483+0x22>
    1ce4:	cc 23       	and	r28, r28
    1ce6:	49 f0       	breq	.+18     	; 0x1cfa <CON_RN2483+0x2e>
    1ce8:	c1 30       	cpi	r28, 0x01	; 1
    1cea:	a1 f0       	breq	.+40     	; 0x1d14 <CON_RN2483+0x48>
    1cec:	f8 cf       	rjmp	.-16     	; 0x1cde <CON_RN2483+0x12>
    1cee:	c3 30       	cpi	r28, 0x03	; 3
    1cf0:	09 f1       	breq	.+66     	; 0x1d34 <CON_RN2483+0x68>
    1cf2:	c4 30       	cpi	r28, 0x04	; 4
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <CON_RN2483+0x2c>
    1cf6:	4d c0       	rjmp	.+154    	; 0x1d92 <CON_RN2483+0xc6>
    1cf8:	f2 cf       	rjmp	.-28     	; 0x1cde <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1cfa:	0e 94 c4 1a 	call	0x3588	; 0x3588 <uart0_hal_init>
				rn2483_init();
    1cfe:	0e 94 47 20 	call	0x408e	; 0x408e <rn2483_init>
				LM_reset_module();
    1d02:	0e 94 66 20 	call	0x40cc	; 0x40cc <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1d06:	63 e1       	ldi	r22, 0x13	; 19
    1d08:	75 e0       	ldi	r23, 0x05	; 5
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				state=CL_READ_MSG;
    1d10:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1d12:	e5 cf       	rjmp	.-54     	; 0x1cde <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1d14:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart1_hal_message_ready>
    1d18:	88 23       	and	r24, r24
    1d1a:	09 f3       	breq	.-62     	; 0x1cde <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	94 e0       	ldi	r25, 0x04	; 4
    1d20:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1d24:	c2 e0       	ldi	r28, 0x02	; 2
    1d26:	db cf       	rjmp	.-74     	; 0x1cde <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1d28:	80 e2       	ldi	r24, 0x20	; 32
    1d2a:	94 e0       	ldi	r25, 0x04	; 4
    1d2c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <CON_RN2483_parse>
    1d30:	c8 2f       	mov	r28, r24
			break;
    1d32:	d5 cf       	rjmp	.-86     	; 0x1cde <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1d34:	80 e2       	ldi	r24, 0x20	; 32
    1d36:	94 e0       	ldi	r25, 0x04	; 4
    1d38:	6c 01       	movw	r12, r24
    1d3a:	20 e8       	ldi	r18, 0x80	; 128
    1d3c:	e2 2e       	mov	r14, r18
    1d3e:	2f 93       	push	r18
    1d40:	df 92       	push	r13
    1d42:	8f 93       	push	r24
    1d44:	89 e4       	ldi	r24, 0x49	; 73
    1d46:	95 e0       	ldi	r25, 0x05	; 5
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	af 93       	push	r26
    1d4c:	9f 93       	push	r25
    1d4e:	8f 93       	push	r24
    1d50:	c8 e5       	ldi	r28, 0x58	; 88
    1d52:	d3 e0       	ldi	r29, 0x03	; 3
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1d5c:	3e 01       	movw	r6, r28
    1d5e:	20 e8       	ldi	r18, 0x80	; 128
    1d60:	82 2e       	mov	r8, r18
    1d62:	88 2d       	mov	r24, r8
    1d64:	b3 01       	movw	r22, r6
    1d66:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1d6a:	ae 01       	movw	r20, r28
    1d6c:	6c 2d       	mov	r22, r12
    1d6e:	7d 2d       	mov	r23, r13
    1d70:	8e 2d       	mov	r24, r14
    1d72:	0e 94 69 20 	call	0x40d2	; 0x40d2 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    1d76:	88 2d       	mov	r24, r8
    1d78:	b3 01       	movw	r22, r6
    1d7a:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1d7e:	8d b7       	in	r24, 0x3d	; 61
    1d80:	9e b7       	in	r25, 0x3e	; 62
    1d82:	08 96       	adiw	r24, 0x08	; 8
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	9e bf       	out	0x3e, r25	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1d8e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1d90:	a6 cf       	rjmp	.-180    	; 0x1cde <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1d92:	0e 94 38 20 	call	0x4070	; 0x4070 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1d96:	6f e4       	ldi	r22, 0x4F	; 79
    1d98:	75 e0       	ldi	r23, 0x05	; 5
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	8f 90       	pop	r8
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	08 95       	ret

Disassembly of section .text.CONNECT:

00002ede <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	64 97       	sbiw	r28, 0x14	; 20
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    2ef2:	21 e0       	ldi	r18, 0x01	; 1
    2ef4:	ae 01       	movw	r20, r28
    2ef6:	4f 5f       	subi	r20, 0xFF	; 255
    2ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    2efa:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    2efe:	88 23       	and	r24, r24
    2f00:	79 f0       	breq	.+30     	; 0x2f20 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    2f02:	be 01       	movw	r22, r28
    2f04:	6f 5f       	subi	r22, 0xFF	; 255
    2f06:	7f 4f       	sbci	r23, 0xFF	; 255
    2f08:	80 e8       	ldi	r24, 0x80	; 128
    2f0a:	2f e6       	ldi	r18, 0x6F	; 111
    2f0c:	35 e0       	ldi	r19, 0x05	; 5
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    2f14:	89 2b       	or	r24, r25
    2f16:	19 f4       	brne	.+6      	; 0x2f1e <CONNECT+0x40>
		return CON_RN2483();
    2f18:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <CON_RN2483>
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <CONNECT+0x42>
	}else{
		return false;
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2f20:	64 96       	adiw	r28, 0x14	; 20
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	08 95       	ret

Disassembly of section .text.read_cols:

00002116 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    2116:	cf 92       	push	r12
    2118:	df 92       	push	r13
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	a3 97       	sbiw	r28, 0x23	; 35
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2136:	63 e2       	ldi	r22, 0x23	; 35
    2138:	ce 01       	movw	r24, r28
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <EM_get_collections>
	res[0]='\0';
    2140:	f7 01       	movw	r30, r14
    2142:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    2144:	10 e0       	ldi	r17, 0x00	; 0
    2146:	35 c0       	rjmp	.+106    	; 0x21b2 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    2148:	81 2f       	mov	r24, r17
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	fc 01       	movw	r30, r24
    214e:	ee 0f       	add	r30, r30
    2150:	ff 1f       	adc	r31, r31
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	e8 0f       	add	r30, r24
    2158:	f9 1f       	adc	r31, r25
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	2c 0f       	add	r18, r28
    2160:	3d 1f       	adc	r19, r29
    2162:	e2 0f       	add	r30, r18
    2164:	f3 1f       	adc	r31, r19
    2166:	23 81       	ldd	r18, Z+3	; 0x03
    2168:	2f 93       	push	r18
    216a:	22 81       	ldd	r18, Z+2	; 0x02
    216c:	2f 93       	push	r18
    216e:	21 81       	ldd	r18, Z+1	; 0x01
    2170:	2f 93       	push	r18
    2172:	20 81       	ld	r18, Z
    2174:	2f 93       	push	r18
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	9f 93       	push	r25
    217a:	8f 93       	push	r24
    217c:	84 ef       	ldi	r24, 0xF4	; 244
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	a0 e0       	ldi	r26, 0x00	; 0
    2182:	af 93       	push	r26
    2184:	9f 93       	push	r25
    2186:	8f 93       	push	r24
    2188:	0f 2e       	mov	r0, r31
    218a:	fc ea       	ldi	r31, 0xAC	; 172
    218c:	cf 2e       	mov	r12, r31
    218e:	f6 e0       	ldi	r31, 0x06	; 6
    2190:	df 2e       	mov	r13, r31
    2192:	f0 2d       	mov	r31, r0
    2194:	df 92       	push	r13
    2196:	cf 92       	push	r12
    2198:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
		strcat(res, arg);
    219c:	a6 01       	movw	r20, r12
    219e:	60 e8       	ldi	r22, 0x80	; 128
    21a0:	c7 01       	movw	r24, r14
    21a2:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    21a6:	1f 5f       	subi	r17, 0xFF	; 255
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	17 30       	cpi	r17, 0x07	; 7
    21b4:	48 f2       	brcs	.-110    	; 0x2148 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    21b6:	a3 96       	adiw	r28, 0x23	; 35
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	08 95       	ret

Disassembly of section .text.read_time:

0000264c <read_time>:

static void read_time(char res[]){
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	00 d0       	rcall	.+0      	; 0x2656 <read_time+0xa>
    2656:	00 d0       	rcall	.+0      	; 0x2658 <read_time+0xc>
    2658:	00 d0       	rcall	.+0      	; 0x265a <read_time+0xe>
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	18 2f       	mov	r17, r24
    2660:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    2662:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    266e:	88 23       	and	r24, r24
    2670:	51 f0       	breq	.+20     	; 0x2686 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    2672:	24 e1       	ldi	r18, 0x14	; 20
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a e0       	ldi	r20, 0x0A	; 10
    2678:	52 e0       	ldi	r21, 0x02	; 2
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	81 2f       	mov	r24, r17
    267e:	90 2f       	mov	r25, r16
    2680:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
    2684:	21 c0       	rjmp	.+66     	; 0x26c8 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    2686:	59 81       	ldd	r21, Y+1	; 0x01
    2688:	4a 81       	ldd	r20, Y+2	; 0x02
    268a:	3b 81       	ldd	r19, Y+3	; 0x03
    268c:	2c 81       	ldd	r18, Y+4	; 0x04
    268e:	9d 81       	ldd	r25, Y+5	; 0x05
    2690:	8e 81       	ldd	r24, Y+6	; 0x06
    2692:	1f 92       	push	r1
    2694:	5f 93       	push	r21
    2696:	1f 92       	push	r1
    2698:	4f 93       	push	r20
    269a:	1f 92       	push	r1
    269c:	3f 93       	push	r19
    269e:	1f 92       	push	r1
    26a0:	2f 93       	push	r18
    26a2:	1f 92       	push	r1
    26a4:	9f 93       	push	r25
    26a6:	1f 92       	push	r1
    26a8:	8f 93       	push	r24
    26aa:	8e e1       	ldi	r24, 0x1E	; 30
    26ac:	92 e0       	ldi	r25, 0x02	; 2
    26ae:	a0 e0       	ldi	r26, 0x00	; 0
    26b0:	af 93       	push	r26
    26b2:	9f 93       	push	r25
    26b4:	8f 93       	push	r24
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
	}
}
    26c8:	26 96       	adiw	r28, 0x06	; 6
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

Disassembly of section .text.write_deveui:

0000285e <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    285e:	cf 92       	push	r12
    2860:	df 92       	push	r13
    2862:	ef 92       	push	r14
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    286c:	22 e0       	ldi	r18, 0x02	; 2
    286e:	4c ea       	ldi	r20, 0xAC	; 172
    2870:	56 e0       	ldi	r21, 0x06	; 6
    2872:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    2876:	c8 2f       	mov	r28, r24
    2878:	88 23       	and	r24, r24
    287a:	29 f1       	breq	.+74     	; 0x28c6 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    287c:	8c ea       	ldi	r24, 0xAC	; 172
    287e:	96 e0       	ldi	r25, 0x06	; 6
    2880:	6c 01       	movw	r12, r24
    2882:	20 e8       	ldi	r18, 0x80	; 128
    2884:	e2 2e       	mov	r14, r18
    2886:	8e 2d       	mov	r24, r14
    2888:	b6 01       	movw	r22, r12
    288a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    288e:	40 97       	sbiw	r24, 0x10	; 16
    2890:	c9 f4       	brne	.+50     	; 0x28c4 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2892:	8e 2d       	mov	r24, r14
    2894:	b6 01       	movw	r22, r12
    2896:	0e 94 1d 1b 	call	0x363a	; 0x363a <EM_set_deveui>
    289a:	c8 2f       	mov	r28, r24
    289c:	81 11       	cpse	r24, r1
    289e:	09 c0       	rjmp	.+18     	; 0x28b2 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    28a0:	27 e0       	ldi	r18, 0x07	; 7
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4c e3       	ldi	r20, 0x3C	; 60
    28a6:	52 e0       	ldi	r21, 0x02	; 2
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	c8 01       	movw	r24, r16
    28ac:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return false;
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    28b2:	28 e0       	ldi	r18, 0x08	; 8
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	43 e4       	ldi	r20, 0x43	; 67
    28b8:	52 e0       	ldi	r21, 0x02	; 2
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	c8 01       	movw	r24, r16
    28be:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    28c4:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    28c6:	8c 2f       	mov	r24, r28
    28c8:	cf 91       	pop	r28
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	ef 90       	pop	r14
    28d0:	df 90       	pop	r13
    28d2:	cf 90       	pop	r12
    28d4:	08 95       	ret

Disassembly of section .text.write_appeui:

000028d6 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    28e4:	22 e0       	ldi	r18, 0x02	; 2
    28e6:	4c ea       	ldi	r20, 0xAC	; 172
    28e8:	56 e0       	ldi	r21, 0x06	; 6
    28ea:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    28ee:	c8 2f       	mov	r28, r24
    28f0:	88 23       	and	r24, r24
    28f2:	29 f1       	breq	.+74     	; 0x293e <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    28f4:	8c ea       	ldi	r24, 0xAC	; 172
    28f6:	96 e0       	ldi	r25, 0x06	; 6
    28f8:	6c 01       	movw	r12, r24
    28fa:	20 e8       	ldi	r18, 0x80	; 128
    28fc:	e2 2e       	mov	r14, r18
    28fe:	8e 2d       	mov	r24, r14
    2900:	b6 01       	movw	r22, r12
    2902:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    2906:	40 97       	sbiw	r24, 0x10	; 16
    2908:	c9 f4       	brne	.+50     	; 0x293c <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    290a:	8e 2d       	mov	r24, r14
    290c:	b6 01       	movw	r22, r12
    290e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <EM_set_appeui>
    2912:	c8 2f       	mov	r28, r24
    2914:	81 11       	cpse	r24, r1
    2916:	09 c0       	rjmp	.+18     	; 0x292a <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    2918:	27 e0       	ldi	r18, 0x07	; 7
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	4c e3       	ldi	r20, 0x3C	; 60
    291e:	52 e0       	ldi	r21, 0x02	; 2
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	c8 01       	movw	r24, r16
    2924:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return false;
    2928:	0a c0       	rjmp	.+20     	; 0x293e <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    292a:	28 e0       	ldi	r18, 0x08	; 8
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	43 e4       	ldi	r20, 0x43	; 67
    2930:	52 e0       	ldi	r21, 0x02	; 2
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	c8 01       	movw	r24, r16
    2936:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    293a:	01 c0       	rjmp	.+2      	; 0x293e <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    293c:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    293e:	8c 2f       	mov	r24, r28
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
    294c:	08 95       	ret

Disassembly of section .text.write_appkey:

0000294e <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    294e:	cf 92       	push	r12
    2950:	df 92       	push	r13
    2952:	ef 92       	push	r14
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    295c:	22 e0       	ldi	r18, 0x02	; 2
    295e:	4c ea       	ldi	r20, 0xAC	; 172
    2960:	56 e0       	ldi	r21, 0x06	; 6
    2962:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    2966:	c8 2f       	mov	r28, r24
    2968:	88 23       	and	r24, r24
    296a:	29 f1       	breq	.+74     	; 0x29b6 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    296c:	8c ea       	ldi	r24, 0xAC	; 172
    296e:	96 e0       	ldi	r25, 0x06	; 6
    2970:	6c 01       	movw	r12, r24
    2972:	20 e8       	ldi	r18, 0x80	; 128
    2974:	e2 2e       	mov	r14, r18
    2976:	8e 2d       	mov	r24, r14
    2978:	b6 01       	movw	r22, r12
    297a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    297e:	80 97       	sbiw	r24, 0x20	; 32
    2980:	c9 f4       	brne	.+50     	; 0x29b4 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2982:	8e 2d       	mov	r24, r14
    2984:	b6 01       	movw	r22, r12
    2986:	0e 94 57 1b 	call	0x36ae	; 0x36ae <EM_set_appkey>
    298a:	c8 2f       	mov	r28, r24
    298c:	81 11       	cpse	r24, r1
    298e:	09 c0       	rjmp	.+18     	; 0x29a2 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2990:	27 e0       	ldi	r18, 0x07	; 7
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4c e3       	ldi	r20, 0x3C	; 60
    2996:	52 e0       	ldi	r21, 0x02	; 2
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	c8 01       	movw	r24, r16
    299c:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return false;
    29a0:	0a c0       	rjmp	.+20     	; 0x29b6 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    29a2:	28 e0       	ldi	r18, 0x08	; 8
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	43 e4       	ldi	r20, 0x43	; 67
    29a8:	52 e0       	ldi	r21, 0x02	; 2
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	c8 01       	movw	r24, r16
    29ae:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    29b4:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    29b6:	8c 2f       	mov	r24, r28
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

0000310a <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3112:	22 e0       	ldi	r18, 0x02	; 2
    3114:	4c ea       	ldi	r20, 0xAC	; 172
    3116:	56 e0       	ldi	r21, 0x06	; 6
    3118:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    311c:	c8 2f       	mov	r28, r24
    311e:	88 23       	and	r24, r24
    3120:	a9 f0       	breq	.+42     	; 0x314c <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    3122:	8c ea       	ldi	r24, 0xAC	; 172
    3124:	96 e0       	ldi	r25, 0x06	; 6
    3126:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <is_float>
    312a:	c8 2f       	mov	r28, r24
    312c:	88 23       	and	r24, r24
    312e:	71 f0       	breq	.+28     	; 0x314c <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    3130:	8c ea       	ldi	r24, 0xAC	; 172
    3132:	96 e0       	ldi	r25, 0x06	; 6
    3134:	0e 94 38 18 	call	0x3070	; 0x3070 <str2flaot>
	EM_set_ppmfactor(val);
    3138:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    313c:	28 e0       	ldi	r18, 0x08	; 8
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	43 e4       	ldi	r20, 0x43	; 67
    3142:	52 e0       	ldi	r21, 0x02	; 2
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	c8 01       	movw	r24, r16
    3148:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
}
    314c:	8c 2f       	mov	r24, r28
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	08 95       	ret

Disassembly of section .text.write_RRL:

00003156 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    315e:	22 e0       	ldi	r18, 0x02	; 2
    3160:	4c ea       	ldi	r20, 0xAC	; 172
    3162:	56 e0       	ldi	r21, 0x06	; 6
    3164:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    3168:	c8 2f       	mov	r28, r24
    316a:	88 23       	and	r24, r24
    316c:	a9 f0       	breq	.+42     	; 0x3198 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    316e:	8c ea       	ldi	r24, 0xAC	; 172
    3170:	96 e0       	ldi	r25, 0x06	; 6
    3172:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <is_float>
    3176:	c8 2f       	mov	r28, r24
    3178:	88 23       	and	r24, r24
    317a:	71 f0       	breq	.+28     	; 0x3198 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    317c:	8c ea       	ldi	r24, 0xAC	; 172
    317e:	96 e0       	ldi	r25, 0x06	; 6
    3180:	0e 94 38 18 	call	0x3070	; 0x3070 <str2flaot>
	EM_set_RRL(val);
    3184:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    3188:	28 e0       	ldi	r18, 0x08	; 8
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	43 e4       	ldi	r20, 0x43	; 67
    318e:	52 e0       	ldi	r21, 0x02	; 2
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	c8 01       	movw	r24, r16
    3194:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
}
    3198:	8c 2f       	mov	r24, r28
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

Disassembly of section .text.write_VCC:

000031a2 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    31aa:	22 e0       	ldi	r18, 0x02	; 2
    31ac:	4c ea       	ldi	r20, 0xAC	; 172
    31ae:	56 e0       	ldi	r21, 0x06	; 6
    31b0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    31b4:	c8 2f       	mov	r28, r24
    31b6:	88 23       	and	r24, r24
    31b8:	a9 f0       	breq	.+42     	; 0x31e4 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    31ba:	8c ea       	ldi	r24, 0xAC	; 172
    31bc:	96 e0       	ldi	r25, 0x06	; 6
    31be:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <is_float>
    31c2:	c8 2f       	mov	r28, r24
    31c4:	88 23       	and	r24, r24
    31c6:	71 f0       	breq	.+28     	; 0x31e4 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    31c8:	8c ea       	ldi	r24, 0xAC	; 172
    31ca:	96 e0       	ldi	r25, 0x06	; 6
    31cc:	0e 94 38 18 	call	0x3070	; 0x3070 <str2flaot>
	EM_set_Vcc(val);
    31d0:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    31d4:	28 e0       	ldi	r18, 0x08	; 8
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	43 e4       	ldi	r20, 0x43	; 67
    31da:	52 e0       	ldi	r21, 0x02	; 2
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	c8 01       	movw	r24, r16
    31e0:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
}
    31e4:	8c 2f       	mov	r24, r28
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	08 95       	ret

Disassembly of section .text.get_time_par:

0000386c <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	00 d0       	rcall	.+0      	; 0x3872 <get_time_par+0x6>
    3872:	1f 92       	push	r1
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    3878:	fc 01       	movw	r30, r24
    387a:	e6 0f       	add	r30, r22
    387c:	f1 1d       	adc	r31, r1
    387e:	80 81       	ld	r24, Z
    3880:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    3882:	81 81       	ldd	r24, Z+1	; 0x01
    3884:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    3886:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    3888:	be 01       	movw	r22, r28
    388a:	6f 5f       	subi	r22, 0xFF	; 255
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	80 e8       	ldi	r24, 0x80	; 128
    3890:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	08 95       	ret

Disassembly of section .text.write_cols:

00001886 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1886:	4f 92       	push	r4
    1888:	5f 92       	push	r5
    188a:	6f 92       	push	r6
    188c:	7f 92       	push	r7
    188e:	8f 92       	push	r8
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	a3 97       	sbiw	r28, 0x23	; 35
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	3b 01       	movw	r6, r22
    18b6:	88 2e       	mov	r8, r24
    18b8:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    18ba:	22 e0       	ldi	r18, 0x02	; 2
    18bc:	4c ea       	ldi	r20, 0xAC	; 172
    18be:	56 e0       	ldi	r21, 0x06	; 6
    18c0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    18c4:	18 2f       	mov	r17, r24
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <write_cols+0x46>
    18ca:	5d c0       	rjmp	.+186    	; 0x1986 <write_cols+0x100>
	index=atoi(arg);
    18cc:	8c ea       	ldi	r24, 0xAC	; 172
    18ce:	96 e0       	ldi	r25, 0x06	; 6
    18d0:	6c 01       	movw	r12, r24
    18d2:	20 e8       	ldi	r18, 0x80	; 128
    18d4:	e2 2e       	mov	r14, r18
    18d6:	8e 2d       	mov	r24, r14
    18d8:	b6 01       	movw	r22, r12
    18da:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
	if(index<1 || index>7) return false;
    18de:	0f ef       	ldi	r16, 0xFF	; 255
    18e0:	08 0f       	add	r16, r24
    18e2:	07 30       	cpi	r16, 0x07	; 7
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <write_cols+0x62>
    18e6:	4a c0       	rjmp	.+148    	; 0x197c <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    18e8:	23 e0       	ldi	r18, 0x03	; 3
    18ea:	4c ea       	ldi	r20, 0xAC	; 172
    18ec:	56 e0       	ldi	r21, 0x06	; 6
    18ee:	88 2d       	mov	r24, r8
    18f0:	b3 01       	movw	r22, r6
    18f2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    18f6:	18 2f       	mov	r17, r24
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <write_cols+0x78>
    18fc:	44 c0       	rjmp	.+136    	; 0x1986 <write_cols+0x100>
	samplings=atoi(arg);
    18fe:	8e 2d       	mov	r24, r14
    1900:	b6 01       	movw	r22, r12
    1902:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
    1906:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1908:	02 97       	sbiw	r24, 0x02	; 2
    190a:	8b 32       	cpi	r24, 0x2B	; 43
    190c:	91 40       	sbci	r25, 0x01	; 1
    190e:	c0 f5       	brcc	.+112    	; 0x1980 <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1910:	24 e0       	ldi	r18, 0x04	; 4
    1912:	4c ea       	ldi	r20, 0xAC	; 172
    1914:	56 e0       	ldi	r21, 0x06	; 6
    1916:	88 2d       	mov	r24, r8
    1918:	b3 01       	movw	r22, r6
    191a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    191e:	18 2f       	mov	r17, r24
    1920:	88 23       	and	r24, r24
    1922:	89 f1       	breq	.+98     	; 0x1986 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1924:	8e 2d       	mov	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
    192c:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    192e:	02 97       	sbiw	r24, 0x02	; 2
    1930:	87 35       	cpi	r24, 0x57	; 87
    1932:	92 40       	sbci	r25, 0x02	; 2
    1934:	38 f5       	brcc	.+78     	; 0x1984 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1936:	63 e2       	ldi	r22, 0x23	; 35
    1938:	ce 01       	movw	r24, r28
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	7c 01       	movw	r14, r24
    193e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <EM_get_collections>
	
	cols[index].samplings=samplings;
    1942:	80 2f       	mov	r24, r16
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	fc 01       	movw	r30, r24
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	e8 0f       	add	r30, r24
    1952:	f9 1f       	adc	r31, r25
    1954:	ee 0d       	add	r30, r14
    1956:	ff 1d       	adc	r31, r15
    1958:	51 82       	std	Z+1, r5	; 0x01
    195a:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    195c:	d3 82       	std	Z+3, r13	; 0x03
    195e:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1960:	b7 01       	movw	r22, r14
    1962:	80 e8       	ldi	r24, 0x80	; 128
    1964:	43 e2       	ldi	r20, 0x23	; 35
    1966:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    196a:	28 e0       	ldi	r18, 0x08	; 8
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	43 e4       	ldi	r20, 0x43	; 67
    1970:	52 e0       	ldi	r21, 0x02	; 2
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	c5 01       	movw	r24, r10
    1976:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;	
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    197c:	10 e0       	ldi	r17, 0x00	; 0
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    1980:	10 e0       	ldi	r17, 0x00	; 0
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1984:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1986:	81 2f       	mov	r24, r17
    1988:	a3 96       	adiw	r28, 0x23	; 35
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	8f 90       	pop	r8
    19aa:	7f 90       	pop	r7
    19ac:	6f 90       	pop	r6
    19ae:	5f 90       	pop	r5
    19b0:	4f 90       	pop	r4
    19b2:	08 95       	ret

Disassembly of section .text.write_heat_up:

000031ee <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    31f6:	22 e0       	ldi	r18, 0x02	; 2
    31f8:	4c ea       	ldi	r20, 0xAC	; 172
    31fa:	56 e0       	ldi	r21, 0x06	; 6
    31fc:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    3200:	c8 2f       	mov	r28, r24
    3202:	88 23       	and	r24, r24
    3204:	a9 f0       	breq	.+42     	; 0x3230 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    3206:	6c ea       	ldi	r22, 0xAC	; 172
    3208:	76 e0       	ldi	r23, 0x06	; 6
    320a:	80 e8       	ldi	r24, 0x80	; 128
    320c:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
	
	if(val<1 || val>200) return false;
    3210:	9f ef       	ldi	r25, 0xFF	; 255
    3212:	98 0f       	add	r25, r24
    3214:	98 3c       	cpi	r25, 0xC8	; 200
    3216:	58 f4       	brcc	.+22     	; 0x322e <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    3218:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    321c:	28 e0       	ldi	r18, 0x08	; 8
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	43 e4       	ldi	r20, 0x43	; 67
    3222:	52 e0       	ldi	r21, 0x02	; 2
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	c8 01       	movw	r24, r16
    3228:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    322e:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3230:	8c 2f       	mov	r24, r28
    3232:	cf 91       	pop	r28
    3234:	1f 91       	pop	r17
    3236:	0f 91       	pop	r16
    3238:	08 95       	ret

Disassembly of section .text.write_air_pump:

00002f84 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2f8c:	22 e0       	ldi	r18, 0x02	; 2
    2f8e:	4c ea       	ldi	r20, 0xAC	; 172
    2f90:	56 e0       	ldi	r21, 0x06	; 6
    2f92:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    2f96:	c8 2f       	mov	r28, r24
    2f98:	88 23       	and	r24, r24
    2f9a:	b9 f0       	breq	.+46     	; 0x2fca <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    2f9c:	6c ea       	ldi	r22, 0xAC	; 172
    2f9e:	76 e0       	ldi	r23, 0x06	; 6
    2fa0:	80 e8       	ldi	r24, 0x80	; 128
    2fa2:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
	
	if(val<5 || val>1000) return false;
    2fa6:	9c 01       	movw	r18, r24
    2fa8:	25 50       	subi	r18, 0x05	; 5
    2faa:	31 09       	sbc	r19, r1
    2fac:	24 3e       	cpi	r18, 0xE4	; 228
    2fae:	33 40       	sbci	r19, 0x03	; 3
    2fb0:	58 f4       	brcc	.+22     	; 0x2fc8 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    2fb2:	0e 94 03 20 	call	0x4006	; 0x4006 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    2fb6:	28 e0       	ldi	r18, 0x08	; 8
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	43 e4       	ldi	r20, 0x43	; 67
    2fbc:	52 e0       	ldi	r21, 0x02	; 2
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    2fc8:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    2fca:	8c 2f       	mov	r24, r28
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	08 95       	ret

Disassembly of section .text.write_sp_interval:

0000323a <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3242:	22 e0       	ldi	r18, 0x02	; 2
    3244:	4c ea       	ldi	r20, 0xAC	; 172
    3246:	56 e0       	ldi	r21, 0x06	; 6
    3248:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    324c:	c8 2f       	mov	r28, r24
    324e:	88 23       	and	r24, r24
    3250:	a9 f0       	breq	.+42     	; 0x327c <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    3252:	6c ea       	ldi	r22, 0xAC	; 172
    3254:	76 e0       	ldi	r23, 0x06	; 6
    3256:	80 e8       	ldi	r24, 0x80	; 128
    3258:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
	
	if(val<6 || val>24) return false;
    325c:	9a ef       	ldi	r25, 0xFA	; 250
    325e:	98 0f       	add	r25, r24
    3260:	93 31       	cpi	r25, 0x13	; 19
    3262:	58 f4       	brcc	.+22     	; 0x327a <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    3264:	0e 94 0f 20 	call	0x401e	; 0x401e <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    3268:	28 e0       	ldi	r18, 0x08	; 8
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	43 e4       	ldi	r20, 0x43	; 67
    326e:	52 e0       	ldi	r21, 0x02	; 2
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	c8 01       	movw	r24, r16
    3274:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
    3278:	01 c0       	rjmp	.+2      	; 0x327c <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    327a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    327c:	8c 2f       	mov	r24, r28
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

Disassembly of section .text.write_reset:

00001db4 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	a3 97       	sbiw	r28, 0x23	; 35
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    1dce:	6b e4       	ldi	r22, 0x4B	; 75
    1dd0:	72 e0       	ldi	r23, 0x02	; 2
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	0e 94 1d 1b 	call	0x363a	; 0x363a <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    1dd8:	6b e4       	ldi	r22, 0x4B	; 75
    1dda:	72 e0       	ldi	r23, 0x02	; 2
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	0e 94 3a 1b 	call	0x3674	; 0x3674 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1de2:	6c e5       	ldi	r22, 0x5C	; 92
    1de4:	72 e0       	ldi	r23, 0x02	; 2
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	80 e8       	ldi	r24, 0x80	; 128
    1df2:	9f e3       	ldi	r25, 0x3F	; 63
    1df4:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e4       	ldi	r23, 0x40	; 64
    1dfc:	8c e1       	ldi	r24, 0x1C	; 28
    1dfe:	95 e4       	ldi	r25, 0x45	; 69
    1e00:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <EM_set_RRL>
	EM_set_Vcc(5.00);
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	80 ea       	ldi	r24, 0xA0	; 160
    1e0a:	90 e4       	ldi	r25, 0x40	; 64
    1e0c:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 03 20 	call	0x4006	; 0x4006 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	0e 94 0f 20 	call	0x401e	; 0x401e <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	1a c0       	rjmp	.+52     	; 0x1e5c <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1e28:	e8 2f       	mov	r30, r24
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	9f 01       	movw	r18, r30
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	21 e0       	ldi	r18, 0x01	; 1
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	2c 0f       	add	r18, r28
    1e40:	3d 1f       	adc	r19, r29
    1e42:	e2 0f       	add	r30, r18
    1e44:	f3 1f       	adc	r31, r19
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1e4a:	22 e0       	ldi	r18, 0x02	; 2
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	31 83       	std	Z+1, r19	; 0x01
    1e50:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    1e52:	23 e0       	ldi	r18, 0x03	; 3
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	33 83       	std	Z+3, r19	; 0x03
    1e58:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	87 30       	cpi	r24, 0x07	; 7
    1e5e:	20 f3       	brcs	.-56     	; 0x1e28 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1e60:	be 01       	movw	r22, r28
    1e62:	6f 5f       	subi	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	80 e8       	ldi	r24, 0x80	; 128
    1e68:	43 e2       	ldi	r20, 0x23	; 35
    1e6a:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1e6e:	23 e1       	ldi	r18, 0x13	; 19
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4d e7       	ldi	r20, 0x7D	; 125
    1e74:	52 e0       	ldi	r21, 0x02	; 2
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	c8 01       	movw	r24, r16
    1e7a:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
}
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	a3 96       	adiw	r28, 0x23	; 35
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

Disassembly of section .text.write_time:

00001bce <write_time>:

static bool write_time(const char cmd[], char res[]){
    1bce:	6f 92       	push	r6
    1bd0:	7f 92       	push	r7
    1bd2:	8f 92       	push	r8
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <write_time+0x16>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <write_time+0x18>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <write_time+0x1a>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	3b 01       	movw	r6, r22
    1bee:	88 2e       	mov	r8, r24
    1bf0:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    1bf2:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    1bf6:	22 e0       	ldi	r18, 0x02	; 2
    1bf8:	4c ea       	ldi	r20, 0xAC	; 172
    1bfa:	56 e0       	ldi	r21, 0x06	; 6
    1bfc:	88 2d       	mov	r24, r8
    1bfe:	b3 01       	movw	r22, r6
    1c00:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    1c04:	18 2f       	mov	r17, r24
    1c06:	88 23       	and	r24, r24
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <write_time+0x3e>
    1c0a:	4e c0       	rjmp	.+156    	; 0x1ca8 <write_time+0xda>
	if(strlen(arg)!=17){
    1c0c:	6c ea       	ldi	r22, 0xAC	; 172
    1c0e:	76 e0       	ldi	r23, 0x06	; 6
    1c10:	80 e8       	ldi	r24, 0x80	; 128
    1c12:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    1c16:	41 97       	sbiw	r24, 0x11	; 17
    1c18:	49 f0       	breq	.+18     	; 0x1c2c <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    1c1a:	25 e2       	ldi	r18, 0x25	; 37
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e9       	ldi	r20, 0x90	; 144
    1c20:	52 e0       	ldi	r21, 0x02	; 2
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	c7 01       	movw	r24, r14
    1c26:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    1c2a:	3e c0       	rjmp	.+124    	; 0x1ca8 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	8c ea       	ldi	r24, 0xAC	; 172
    1c30:	96 e0       	ldi	r25, 0x06	; 6
    1c32:	0e 94 36 1c 	call	0x386c	; 0x386c <get_time_par>
    1c36:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    1c38:	63 e0       	ldi	r22, 0x03	; 3
    1c3a:	8c ea       	ldi	r24, 0xAC	; 172
    1c3c:	96 e0       	ldi	r25, 0x06	; 6
    1c3e:	0e 94 36 1c 	call	0x386c	; 0x386c <get_time_par>
    1c42:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    1c44:	66 e0       	ldi	r22, 0x06	; 6
    1c46:	8c ea       	ldi	r24, 0xAC	; 172
    1c48:	96 e0       	ldi	r25, 0x06	; 6
    1c4a:	0e 94 36 1c 	call	0x386c	; 0x386c <get_time_par>
    1c4e:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    1c50:	69 e0       	ldi	r22, 0x09	; 9
    1c52:	8c ea       	ldi	r24, 0xAC	; 172
    1c54:	96 e0       	ldi	r25, 0x06	; 6
    1c56:	0e 94 36 1c 	call	0x386c	; 0x386c <get_time_par>
    1c5a:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    1c5c:	6c e0       	ldi	r22, 0x0C	; 12
    1c5e:	8c ea       	ldi	r24, 0xAC	; 172
    1c60:	96 e0       	ldi	r25, 0x06	; 6
    1c62:	0e 94 36 1c 	call	0x386c	; 0x386c <get_time_par>
    1c66:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    1c68:	6f e0       	ldi	r22, 0x0F	; 15
    1c6a:	8c ea       	ldi	r24, 0xAC	; 172
    1c6c:	96 e0       	ldi	r25, 0x06	; 6
    1c6e:	0e 94 36 1c 	call	0x386c	; 0x386c <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    1c72:	48 2f       	mov	r20, r24
    1c74:	5d 2d       	mov	r21, r13
    1c76:	60 2f       	mov	r22, r16
    1c78:	76 2d       	mov	r23, r6
    1c7a:	87 2d       	mov	r24, r7
    1c7c:	98 2d       	mov	r25, r8
    1c7e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    1c82:	88 23       	and	r24, r24
    1c84:	49 f0       	breq	.+18     	; 0x1c98 <write_time+0xca>
		strcpy(res, "Failed to set time");
    1c86:	23 e1       	ldi	r18, 0x13	; 19
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	45 eb       	ldi	r20, 0xB5	; 181
    1c8c:	52 e0       	ldi	r21, 0x02	; 2
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	c7 01       	movw	r24, r14
    1c92:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    1c96:	08 c0       	rjmp	.+16     	; 0x1ca8 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    1c98:	28 e0       	ldi	r18, 0x08	; 8
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	43 e4       	ldi	r20, 0x43	; 67
    1c9e:	52 e0       	ldi	r21, 0x02	; 2
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
	return true;
}
    1ca8:	81 2f       	mov	r24, r17
    1caa:	26 96       	adiw	r28, 0x06	; 6
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	8f 90       	pop	r8
    1cc6:	7f 90       	pop	r7
    1cc8:	6f 90       	pop	r6
    1cca:	08 95       	ret

Disassembly of section .text.handle_read:

00000fc6 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	68 97       	sbiw	r28, 0x18	; 24
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	6b 01       	movw	r12, r22
     fe8:	e8 2e       	mov	r14, r24
     fea:	f4 2e       	mov	r15, r20
     fec:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
     fee:	21 e0       	ldi	r18, 0x01	; 1
     ff0:	ae 01       	movw	r20, r28
     ff2:	4f 5f       	subi	r20, 0xFF	; 255
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
     ffa:	18 2f       	mov	r17, r24
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
    1000:	23 c1       	rjmp	.+582    	; 0x1248 <__stack+0x149>
    1002:	8e 2d       	mov	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 99 17 	call	0x2f32	; 0x2f32 <count_parameters>
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	09 f4       	brne	.+2      	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    100e:	1b c1       	rjmp	.+566    	; 0x1246 <__stack+0x147>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	6c 01       	movw	r12, r24
    1016:	20 e8       	ldi	r18, 0x80	; 128
    1018:	e2 2e       	mov	r14, r18
    101a:	28 ec       	ldi	r18, 0xC8	; 200
    101c:	32 e0       	ldi	r19, 0x02	; 2
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	8e 2d       	mov	r24, r14
    1022:	b6 01       	movw	r22, r12
    1024:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1028:	89 2b       	or	r24, r25
    102a:	29 f4       	brne	.+10     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
	{
		EM_get_deveui(res);
    102c:	8f 2d       	mov	r24, r15
    102e:	90 2f       	mov	r25, r16
    1030:	0e 94 b3 1c 	call	0x3966	; 0x3966 <EM_get_deveui>
    1034:	09 c1       	rjmp	.+530    	; 0x1248 <__stack+0x149>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1036:	2f ec       	ldi	r18, 0xCF	; 207
    1038:	32 e0       	ldi	r19, 0x02	; 2
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	8e 2d       	mov	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1044:	89 2b       	or	r24, r25
    1046:	29 f4       	brne	.+10     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
	{
		EM_get_appeui(res);
    1048:	8f 2d       	mov	r24, r15
    104a:	90 2f       	mov	r25, r16
    104c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <EM_get_appeui>
    1050:	fb c0       	rjmp	.+502    	; 0x1248 <__stack+0x149>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    1052:	26 ed       	ldi	r18, 0xD6	; 214
    1054:	32 e0       	ldi	r19, 0x02	; 2
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	8e 2d       	mov	r24, r14
    105a:	b6 01       	movw	r22, r12
    105c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1060:	89 2b       	or	r24, r25
    1062:	29 f4       	brne	.+10     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
	{
		EM_get_appkey(res);
    1064:	8f 2d       	mov	r24, r15
    1066:	90 2f       	mov	r25, r16
    1068:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <EM_get_appkey>
    106c:	ed c0       	rjmp	.+474    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    106e:	2d ed       	ldi	r18, 0xDD	; 221
    1070:	32 e0       	ldi	r19, 0x02	; 2
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	8e 2d       	mov	r24, r14
    1076:	b6 01       	movw	r22, r12
    1078:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    107c:	89 2b       	or	r24, r25
    107e:	e1 f4       	brne	.+56     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
	{
		EM_get_ppmfactor(&val);
    1080:	ce 01       	movw	r24, r28
    1082:	45 96       	adiw	r24, 0x15	; 21
    1084:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1088:	88 8d       	ldd	r24, Y+24	; 0x18
    108a:	8f 93       	push	r24
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	8f 93       	push	r24
    1090:	8e 89       	ldd	r24, Y+22	; 0x16
    1092:	8f 93       	push	r24
    1094:	8d 89       	ldd	r24, Y+21	; 0x15
    1096:	8f 93       	push	r24
    1098:	82 ee       	ldi	r24, 0xE2	; 226
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	af 93       	push	r26
    10a0:	9f 93       	push	r25
    10a2:	8f 93       	push	r24
    10a4:	0f 93       	push	r16
    10a6:	ff 92       	push	r15
    10a8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	c8 c0       	rjmp	.+400    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_RRL)==0)
    10b8:	27 ee       	ldi	r18, 0xE7	; 231
    10ba:	32 e0       	ldi	r19, 0x02	; 2
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	8e 2d       	mov	r24, r14
    10c0:	b6 01       	movw	r22, r12
    10c2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    10c6:	89 2b       	or	r24, r25
    10c8:	e1 f4       	brne	.+56     	; 0x1102 <__stack+0x3>
	{
		EM_get_RRL(&val);
    10ca:	ce 01       	movw	r24, r28
    10cc:	45 96       	adiw	r24, 0x15	; 21
    10ce:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    10d2:	88 8d       	ldd	r24, Y+24	; 0x18
    10d4:	8f 93       	push	r24
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	8f 93       	push	r24
    10da:	8e 89       	ldd	r24, Y+22	; 0x16
    10dc:	8f 93       	push	r24
    10de:	8d 89       	ldd	r24, Y+21	; 0x15
    10e0:	8f 93       	push	r24
    10e2:	82 ee       	ldi	r24, 0xE2	; 226
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	af 93       	push	r26
    10ea:	9f 93       	push	r25
    10ec:	8f 93       	push	r24
    10ee:	0f 93       	push	r16
    10f0:	ff 92       	push	r15
    10f2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	a3 c0       	rjmp	.+326    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_VCC)==0)
    1102:	2c ee       	ldi	r18, 0xEC	; 236
    1104:	32 e0       	ldi	r19, 0x02	; 2
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	8e 2d       	mov	r24, r14
    110a:	b6 01       	movw	r22, r12
    110c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1110:	89 2b       	or	r24, r25
    1112:	e1 f4       	brne	.+56     	; 0x114c <__stack+0x4d>
	{
		EM_get_Vcc(&val);
    1114:	ce 01       	movw	r24, r28
    1116:	45 96       	adiw	r24, 0x15	; 21
    1118:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    111c:	88 8d       	ldd	r24, Y+24	; 0x18
    111e:	8f 93       	push	r24
    1120:	8f 89       	ldd	r24, Y+23	; 0x17
    1122:	8f 93       	push	r24
    1124:	8e 89       	ldd	r24, Y+22	; 0x16
    1126:	8f 93       	push	r24
    1128:	8d 89       	ldd	r24, Y+21	; 0x15
    112a:	8f 93       	push	r24
    112c:	82 ee       	ldi	r24, 0xE2	; 226
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	af 93       	push	r26
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	0f 93       	push	r16
    113a:	ff 92       	push	r15
    113c:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	7e c0       	rjmp	.+252    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_COLS)==0)
    114c:	21 ef       	ldi	r18, 0xF1	; 241
    114e:	32 e0       	ldi	r19, 0x02	; 2
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	8e 2d       	mov	r24, r14
    1154:	b6 01       	movw	r22, r12
    1156:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    115a:	89 2b       	or	r24, r25
    115c:	29 f4       	brne	.+10     	; 0x1168 <__stack+0x69>
	{
		read_cols(res);
    115e:	8f 2d       	mov	r24, r15
    1160:	90 2f       	mov	r25, r16
    1162:	0e 94 8b 10 	call	0x2116	; 0x2116 <read_cols>
    1166:	70 c0       	rjmp	.+224    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1168:	26 ef       	ldi	r18, 0xF6	; 246
    116a:	32 e0       	ldi	r19, 0x02	; 2
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	8e 2d       	mov	r24, r14
    1170:	b6 01       	movw	r22, r12
    1172:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1176:	89 2b       	or	r24, r25
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <__stack+0xa3>
	{
		uint8_t val=EM_get_heat_up_time();
    117a:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    117e:	1f 92       	push	r1
    1180:	8f 93       	push	r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	af 93       	push	r26
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	0f 93       	push	r16
    1190:	ff 92       	push	r15
    1192:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	53 c0       	rjmp	.+166    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    11a2:	22 e1       	ldi	r18, 0x12	; 18
    11a4:	33 e0       	ldi	r19, 0x03	; 3
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	8e 2d       	mov	r24, r14
    11aa:	b6 01       	movw	r22, r12
    11ac:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    11b0:	89 2b       	or	r24, r25
    11b2:	a1 f4       	brne	.+40     	; 0x11dc <__stack+0xdd>
	{
		uint16_t val=EM_get_air_pump_time();
    11b4:	0e 94 09 20 	call	0x4012	; 0x4012 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	8d e1       	ldi	r24, 0x1D	; 29
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	af 93       	push	r26
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	0f 93       	push	r16
    11ca:	ff 92       	push	r15
    11cc:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	36 c0       	rjmp	.+108    	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    11dc:	20 e3       	ldi	r18, 0x30	; 48
    11de:	33 e0       	ldi	r19, 0x03	; 3
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	8e 2d       	mov	r24, r14
    11e4:	b6 01       	movw	r22, r12
    11e6:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    11ea:	89 2b       	or	r24, r25
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <__stack+0x117>
	{
		uint8_t val=EM_get_sp_interval();
    11ee:	0e 94 15 20 	call	0x402a	; 0x402a <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    11f2:	1f 92       	push	r1
    11f4:	8f 93       	push	r24
    11f6:	8c e3       	ldi	r24, 0x3C	; 60
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	af 93       	push	r26
    11fe:	9f 93       	push	r25
    1200:	8f 93       	push	r24
    1202:	0f 93       	push	r16
    1204:	ff 92       	push	r15
    1206:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	19 c0       	rjmp	.+50     	; 0x1248 <__stack+0x149>
	}
	else if(strcmp(par, RW_TIME)==0)
    1216:	2b e5       	ldi	r18, 0x5B	; 91
    1218:	33 e0       	ldi	r19, 0x03	; 3
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	8e 2d       	mov	r24, r14
    121e:	b6 01       	movw	r22, r12
    1220:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1224:	89 2b       	or	r24, r25
    1226:	29 f4       	brne	.+10     	; 0x1232 <__stack+0x133>
	{
		read_time(res);
    1228:	8f 2d       	mov	r24, r15
    122a:	90 2f       	mov	r25, r16
    122c:	0e 94 26 13 	call	0x264c	; 0x264c <read_time>
    1230:	0b c0       	rjmp	.+22     	; 0x1248 <__stack+0x149>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1232:	26 e1       	ldi	r18, 0x16	; 22
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e6       	ldi	r20, 0x60	; 96
    1238:	53 e0       	ldi	r21, 0x03	; 3
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	8f 2d       	mov	r24, r15
    123e:	90 2f       	mov	r25, r16
    1240:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <__stack+0x149>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1246:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1248:	81 2f       	mov	r24, r17
    124a:	68 96       	adiw	r28, 0x18	; 24
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	08 95       	ret

Disassembly of section .text.handle_write:

00001268 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1268:	6f 92       	push	r6
    126a:	7f 92       	push	r7
    126c:	8f 92       	push	r8
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	64 97       	sbiw	r28, 0x14	; 20
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	3b 01       	movw	r6, r22
    1290:	88 2e       	mov	r8, r24
    1292:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1294:	21 e0       	ldi	r18, 0x01	; 1
    1296:	ae 01       	movw	r20, r28
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    12a0:	18 2f       	mov	r17, r24
    12a2:	88 23       	and	r24, r24
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <handle_write+0x40>
    12a6:	cd c0       	rjmp	.+410    	; 0x1442 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	6c 01       	movw	r12, r24
    12ae:	20 e8       	ldi	r18, 0x80	; 128
    12b0:	e2 2e       	mov	r14, r18
    12b2:	28 ec       	ldi	r18, 0xC8	; 200
    12b4:	32 e0       	ldi	r19, 0x02	; 2
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	8e 2d       	mov	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    12c0:	89 2b       	or	r24, r25
    12c2:	39 f4       	brne	.+14     	; 0x12d2 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    12c4:	a5 01       	movw	r20, r10
    12c6:	88 2d       	mov	r24, r8
    12c8:	b3 01       	movw	r22, r6
    12ca:	0e 94 2f 14 	call	0x285e	; 0x285e <write_deveui>
    12ce:	18 2f       	mov	r17, r24
    12d0:	b8 c0       	rjmp	.+368    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    12d2:	2f ec       	ldi	r18, 0xCF	; 207
    12d4:	32 e0       	ldi	r19, 0x02	; 2
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	8e 2d       	mov	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    12e0:	89 2b       	or	r24, r25
    12e2:	39 f4       	brne	.+14     	; 0x12f2 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    12e4:	a5 01       	movw	r20, r10
    12e6:	88 2d       	mov	r24, r8
    12e8:	b3 01       	movw	r22, r6
    12ea:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <write_appeui>
    12ee:	18 2f       	mov	r17, r24
    12f0:	a8 c0       	rjmp	.+336    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    12f2:	26 ed       	ldi	r18, 0xD6	; 214
    12f4:	32 e0       	ldi	r19, 0x02	; 2
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	8e 2d       	mov	r24, r14
    12fa:	b6 01       	movw	r22, r12
    12fc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1300:	89 2b       	or	r24, r25
    1302:	39 f4       	brne	.+14     	; 0x1312 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1304:	a5 01       	movw	r20, r10
    1306:	88 2d       	mov	r24, r8
    1308:	b3 01       	movw	r22, r6
    130a:	0e 94 a7 14 	call	0x294e	; 0x294e <write_appkey>
    130e:	18 2f       	mov	r17, r24
    1310:	98 c0       	rjmp	.+304    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1312:	2d ed       	ldi	r18, 0xDD	; 221
    1314:	32 e0       	ldi	r19, 0x02	; 2
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	8e 2d       	mov	r24, r14
    131a:	b6 01       	movw	r22, r12
    131c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1320:	89 2b       	or	r24, r25
    1322:	39 f4       	brne	.+14     	; 0x1332 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1324:	a5 01       	movw	r20, r10
    1326:	88 2d       	mov	r24, r8
    1328:	b3 01       	movw	r22, r6
    132a:	0e 94 85 18 	call	0x310a	; 0x310a <write_PPM_factor>
    132e:	18 2f       	mov	r17, r24
    1330:	88 c0       	rjmp	.+272    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1332:	27 ee       	ldi	r18, 0xE7	; 231
    1334:	32 e0       	ldi	r19, 0x02	; 2
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	8e 2d       	mov	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1340:	89 2b       	or	r24, r25
    1342:	39 f4       	brne	.+14     	; 0x1352 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1344:	a5 01       	movw	r20, r10
    1346:	88 2d       	mov	r24, r8
    1348:	b3 01       	movw	r22, r6
    134a:	0e 94 ab 18 	call	0x3156	; 0x3156 <write_RRL>
    134e:	18 2f       	mov	r17, r24
    1350:	78 c0       	rjmp	.+240    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1352:	2c ee       	ldi	r18, 0xEC	; 236
    1354:	32 e0       	ldi	r19, 0x02	; 2
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	8e 2d       	mov	r24, r14
    135a:	b6 01       	movw	r22, r12
    135c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1360:	89 2b       	or	r24, r25
    1362:	39 f4       	brne	.+14     	; 0x1372 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1364:	a5 01       	movw	r20, r10
    1366:	88 2d       	mov	r24, r8
    1368:	b3 01       	movw	r22, r6
    136a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <write_VCC>
    136e:	18 2f       	mov	r17, r24
    1370:	68 c0       	rjmp	.+208    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1372:	21 ef       	ldi	r18, 0xF1	; 241
    1374:	32 e0       	ldi	r19, 0x02	; 2
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	8e 2d       	mov	r24, r14
    137a:	b6 01       	movw	r22, r12
    137c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1380:	89 2b       	or	r24, r25
    1382:	39 f4       	brne	.+14     	; 0x1392 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1384:	a5 01       	movw	r20, r10
    1386:	88 2d       	mov	r24, r8
    1388:	b3 01       	movw	r22, r6
    138a:	0e 94 43 0c 	call	0x1886	; 0x1886 <write_cols>
    138e:	18 2f       	mov	r17, r24
    1390:	58 c0       	rjmp	.+176    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1392:	26 ef       	ldi	r18, 0xF6	; 246
    1394:	32 e0       	ldi	r19, 0x02	; 2
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	8e 2d       	mov	r24, r14
    139a:	b6 01       	movw	r22, r12
    139c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    13a0:	89 2b       	or	r24, r25
    13a2:	39 f4       	brne	.+14     	; 0x13b2 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    13a4:	a5 01       	movw	r20, r10
    13a6:	88 2d       	mov	r24, r8
    13a8:	b3 01       	movw	r22, r6
    13aa:	0e 94 f7 18 	call	0x31ee	; 0x31ee <write_heat_up>
    13ae:	18 2f       	mov	r17, r24
    13b0:	48 c0       	rjmp	.+144    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    13b2:	22 e1       	ldi	r18, 0x12	; 18
    13b4:	33 e0       	ldi	r19, 0x03	; 3
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	8e 2d       	mov	r24, r14
    13ba:	b6 01       	movw	r22, r12
    13bc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    13c0:	89 2b       	or	r24, r25
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    13c4:	a5 01       	movw	r20, r10
    13c6:	88 2d       	mov	r24, r8
    13c8:	b3 01       	movw	r22, r6
    13ca:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <write_air_pump>
    13ce:	18 2f       	mov	r17, r24
    13d0:	38 c0       	rjmp	.+112    	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    13d2:	20 e3       	ldi	r18, 0x30	; 48
    13d4:	33 e0       	ldi	r19, 0x03	; 3
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	8e 2d       	mov	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    13e0:	89 2b       	or	r24, r25
    13e2:	39 f4       	brne	.+14     	; 0x13f2 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    13e4:	a5 01       	movw	r20, r10
    13e6:	88 2d       	mov	r24, r8
    13e8:	b3 01       	movw	r22, r6
    13ea:	0e 94 1d 19 	call	0x323a	; 0x323a <write_sp_interval>
    13ee:	18 2f       	mov	r17, r24
    13f0:	28 c0       	rjmp	.+80     	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    13f2:	26 e7       	ldi	r18, 0x76	; 118
    13f4:	33 e0       	ldi	r19, 0x03	; 3
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	8e 2d       	mov	r24, r14
    13fa:	b6 01       	movw	r22, r12
    13fc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1400:	89 2b       	or	r24, r25
    1402:	39 f4       	brne	.+14     	; 0x1412 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1404:	a5 01       	movw	r20, r10
    1406:	88 2d       	mov	r24, r8
    1408:	b3 01       	movw	r22, r6
    140a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <write_reset>
    140e:	18 2f       	mov	r17, r24
    1410:	18 c0       	rjmp	.+48     	; 0x1442 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1412:	2b e5       	ldi	r18, 0x5B	; 91
    1414:	33 e0       	ldi	r19, 0x03	; 3
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	8e 2d       	mov	r24, r14
    141a:	b6 01       	movw	r22, r12
    141c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1420:	89 2b       	or	r24, r25
    1422:	39 f4       	brne	.+14     	; 0x1432 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1424:	a5 01       	movw	r20, r10
    1426:	88 2d       	mov	r24, r8
    1428:	b3 01       	movw	r22, r6
    142a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <write_time>
    142e:	18 2f       	mov	r17, r24
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1432:	26 e1       	ldi	r18, 0x16	; 22
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e6       	ldi	r20, 0x60	; 96
    1438:	53 e0       	ldi	r21, 0x03	; 3
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	c5 01       	movw	r24, r10
    143e:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
	}
	
}
    1442:	81 2f       	mov	r24, r17
    1444:	64 96       	adiw	r28, 0x14	; 20
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	8f 90       	pop	r8
    1462:	7f 90       	pop	r7
    1464:	6f 90       	pop	r6
    1466:	08 95       	ret

Disassembly of section .text.handle_methane:

000019b4 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <handle_methane+0x12>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	f4 2e       	mov	r15, r20
    19cc:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    19ce:	22 e0       	ldi	r18, 0x02	; 2
    19d0:	4c ef       	ldi	r20, 0xFC	; 252
    19d2:	56 e0       	ldi	r21, 0x06	; 6
    19d4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    19d8:	18 2f       	mov	r17, r24
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <handle_methane+0x2c>
    19de:	6b c0       	rjmp	.+214    	; 0x1ab6 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    19e0:	8c ef       	ldi	r24, 0xFC	; 252
    19e2:	96 e0       	ldi	r25, 0x06	; 6
    19e4:	6c 01       	movw	r12, r24
    19e6:	20 e8       	ldi	r18, 0x80	; 128
    19e8:	e2 2e       	mov	r14, r18
    19ea:	20 e2       	ldi	r18, 0x20	; 32
    19ec:	34 e0       	ldi	r19, 0x04	; 4
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	8e 2d       	mov	r24, r14
    19f2:	b6 01       	movw	r22, r12
    19f4:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    19f8:	89 2b       	or	r24, r25
    19fa:	79 f4       	brne	.+30     	; 0x1a1a <handle_methane+0x66>
		PM_HAL_meth_power_init();
    19fc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1a06:	28 e1       	ldi	r18, 0x18	; 24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	43 e2       	ldi	r20, 0x23	; 35
    1a0c:	54 e0       	ldi	r21, 0x04	; 4
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	8f 2d       	mov	r24, r15
    1a12:	90 2f       	mov	r25, r16
    1a14:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    1a18:	4e c0       	rjmp	.+156    	; 0x1ab6 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1a1a:	2b e3       	ldi	r18, 0x3B	; 59
    1a1c:	34 e0       	ldi	r19, 0x04	; 4
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	8e 2d       	mov	r24, r14
    1a22:	b6 01       	movw	r22, r12
    1a24:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1a28:	89 2b       	or	r24, r25
    1a2a:	79 f4       	brne	.+30     	; 0x1a4a <handle_methane+0x96>
		PM_HAL_meth_power_init();
    1a2c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1a36:	29 e1       	ldi	r18, 0x19	; 25
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4f e3       	ldi	r20, 0x3F	; 63
    1a3c:	54 e0       	ldi	r21, 0x04	; 4
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	8f 2d       	mov	r24, r15
    1a42:	90 2f       	mov	r25, r16
    1a44:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
    1a48:	36 c0       	rjmp	.+108    	; 0x1ab6 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1a4a:	28 e5       	ldi	r18, 0x58	; 88
    1a4c:	34 e0       	ldi	r19, 0x04	; 4
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	8e 2d       	mov	r24, r14
    1a52:	b6 01       	movw	r22, r12
    1a54:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    1a58:	89 2b       	or	r24, r25
    1a5a:	21 f5       	brne	.+72     	; 0x1aa4 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	0e 94 ef 16 	call	0x2dde	; 0x2dde <ADC_get_value>
    1a64:	88 23       	and	r24, r24
    1a66:	51 f0       	breq	.+20     	; 0x1a7c <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1a68:	28 e1       	ldi	r18, 0x18	; 24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4d e5       	ldi	r20, 0x5D	; 93
    1a6e:	54 e0       	ldi	r21, 0x04	; 4
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	8f 2d       	mov	r24, r15
    1a74:	90 2f       	mov	r25, r16
    1a76:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
    1a7a:	1d c0       	rjmp	.+58     	; 0x1ab6 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	8f 93       	push	r24
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	8f 93       	push	r24
    1a84:	85 e7       	ldi	r24, 0x75	; 117
    1a86:	94 e0       	ldi	r25, 0x04	; 4
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	af 93       	push	r26
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	0f 93       	push	r16
    1a92:	ff 92       	push	r15
    1a94:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1aa4:	26 e1       	ldi	r18, 0x16	; 22
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4c e7       	ldi	r20, 0x7C	; 124
    1aaa:	54 e0       	ldi	r21, 0x04	; 4
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	8f 2d       	mov	r24, r15
    1ab0:	90 2f       	mov	r25, r16
    1ab2:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
	}
	return false;
}
    1ab6:	81 2f       	mov	r24, r17
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	08 95       	ret

Disassembly of section .text.handle_co2:

00002342 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	00 d0       	rcall	.+0      	; 0x234e <handle_co2+0xc>
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	f4 2e       	mov	r15, r20
    2354:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    2356:	22 e0       	ldi	r18, 0x02	; 2
    2358:	4c ef       	ldi	r20, 0xFC	; 252
    235a:	56 e0       	ldi	r21, 0x06	; 6
    235c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    2360:	18 2f       	mov	r17, r24
    2362:	88 23       	and	r24, r24
    2364:	b9 f1       	breq	.+110    	; 0x23d4 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    2366:	6c ef       	ldi	r22, 0xFC	; 252
    2368:	76 e0       	ldi	r23, 0x06	; 6
    236a:	80 e8       	ldi	r24, 0x80	; 128
    236c:	28 e5       	ldi	r18, 0x58	; 88
    236e:	34 e0       	ldi	r19, 0x04	; 4
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    2376:	89 2b       	or	r24, r25
    2378:	21 f5       	brne	.+72     	; 0x23c2 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    237a:	ce 01       	movw	r24, r28
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <SCD30_get_reading>
    2382:	88 23       	and	r24, r24
    2384:	51 f0       	breq	.+20     	; 0x239a <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    2386:	28 e1       	ldi	r18, 0x18	; 24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4d e5       	ldi	r20, 0x5D	; 93
    238c:	54 e0       	ldi	r21, 0x04	; 4
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	8f 2d       	mov	r24, r15
    2392:	90 2f       	mov	r25, r16
    2394:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
    2398:	1d c0       	rjmp	.+58     	; 0x23d4 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	8f 93       	push	r24
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	8f 93       	push	r24
    23a2:	85 e7       	ldi	r24, 0x75	; 117
    23a4:	94 e0       	ldi	r25, 0x04	; 4
    23a6:	a0 e0       	ldi	r26, 0x00	; 0
    23a8:	af 93       	push	r26
    23aa:	9f 93       	push	r25
    23ac:	8f 93       	push	r24
    23ae:	0f 93       	push	r16
    23b0:	ff 92       	push	r15
    23b2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <sprintf>
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	09 c0       	rjmp	.+18     	; 0x23d4 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    23c2:	26 e1       	ldi	r18, 0x16	; 22
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4c e7       	ldi	r20, 0x7C	; 124
    23c8:	54 e0       	ldi	r21, 0x04	; 4
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	8f 2d       	mov	r24, r15
    23ce:	90 2f       	mov	r25, r16
    23d0:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
	}
}
    23d4:	81 2f       	mov	r24, r17
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	ff 90       	pop	r15
    23e4:	08 95       	ret

Disassembly of section .text.handle_sample:

00002488 <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    2488:	6f 92       	push	r6
    248a:	7f 92       	push	r7
    248c:	8f 92       	push	r8
    248e:	cf 92       	push	r12
    2490:	df 92       	push	r13
    2492:	ef 92       	push	r14
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	3b 01       	movw	r6, r22
    249c:	88 2e       	mov	r8, r24
    249e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    24a0:	21 e0       	ldi	r18, 0x01	; 1
    24a2:	4c ef       	ldi	r20, 0xFC	; 252
    24a4:	56 e0       	ldi	r21, 0x06	; 6
    24a6:	0e 94 db 12 	call	0x25b6	; 0x25b6 <get_parameter>
    24aa:	c8 2f       	mov	r28, r24
    24ac:	88 23       	and	r24, r24
    24ae:	69 f1       	breq	.+90     	; 0x250a <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    24b0:	8c ef       	ldi	r24, 0xFC	; 252
    24b2:	96 e0       	ldi	r25, 0x06	; 6
    24b4:	6c 01       	movw	r12, r24
    24b6:	20 e8       	ldi	r18, 0x80	; 128
    24b8:	e2 2e       	mov	r14, r18
    24ba:	22 e9       	ldi	r18, 0x92	; 146
    24bc:	34 e0       	ldi	r19, 0x04	; 4
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	8e 2d       	mov	r24, r14
    24c2:	b6 01       	movw	r22, r12
    24c4:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    24c8:	89 2b       	or	r24, r25
    24ca:	39 f4       	brne	.+14     	; 0x24da <handle_sample+0x52>
		return handle_methane(cmd, res);
    24cc:	a8 01       	movw	r20, r16
    24ce:	88 2d       	mov	r24, r8
    24d0:	b3 01       	movw	r22, r6
    24d2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <handle_methane>
    24d6:	c8 2f       	mov	r28, r24
    24d8:	18 c0       	rjmp	.+48     	; 0x250a <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    24da:	27 e9       	ldi	r18, 0x97	; 151
    24dc:	34 e0       	ldi	r19, 0x04	; 4
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	8e 2d       	mov	r24, r14
    24e2:	b6 01       	movw	r22, r12
    24e4:	0e 94 a3 1a 	call	0x3546	; 0x3546 <strcmp>
    24e8:	89 2b       	or	r24, r25
    24ea:	39 f4       	brne	.+14     	; 0x24fa <handle_sample+0x72>
		return handle_co2(cmd, res);
    24ec:	a8 01       	movw	r20, r16
    24ee:	88 2d       	mov	r24, r8
    24f0:	b3 01       	movw	r22, r6
    24f2:	0e 94 a1 11 	call	0x2342	; 0x2342 <handle_co2>
    24f6:	c8 2f       	mov	r28, r24
    24f8:	08 c0       	rjmp	.+16     	; 0x250a <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    24fa:	26 e1       	ldi	r18, 0x16	; 22
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4c e7       	ldi	r20, 0x7C	; 124
    2500:	54 e0       	ldi	r21, 0x04	; 4
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	c8 01       	movw	r24, r16
    2506:	0e 94 82 1c 	call	0x3904	; 0x3904 <memcpy>
		return true;
	}
}
    250a:	8c 2f       	mov	r24, r28
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	8f 90       	pop	r8
    251a:	7f 90       	pop	r7
    251c:	6f 90       	pop	r6
    251e:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00003b24 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    3b24:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3b28:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    3b32:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    3b3c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3b40:	88 23       	and	r24, r24
    3b42:	11 f0       	breq	.+4      	; 0x3b48 <init_methane_SCD30+0x24>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	08 95       	ret
	return true;
    3b48:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3b4a:	08 95       	ret

Disassembly of section .text.count_parameters:

00002f32 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    2f32:	6f 92       	push	r6
    2f34:	7f 92       	push	r7
    2f36:	8f 92       	push	r8
    2f38:	cf 92       	push	r12
    2f3a:	df 92       	push	r13
    2f3c:	ef 92       	push	r14
    2f3e:	3b 01       	movw	r6, r22
    2f40:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    2f42:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    2f46:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    2f4e:	10 c0       	rjmp	.+32     	; 0x2f70 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    2f50:	e8 2c       	mov	r14, r8
    2f52:	63 01       	movw	r12, r6
    2f54:	c2 0e       	add	r12, r18
    2f56:	d3 1e       	adc	r13, r19
    2f58:	e1 1c       	adc	r14, r1
    2f5a:	37 fd       	sbrc	r19, 7
    2f5c:	ea 94       	dec	r14
    2f5e:	f6 01       	movw	r30, r12
    2f60:	94 91       	lpm	r25, Z
    2f62:	e7 fc       	sbrc	r14, 7
    2f64:	90 81       	ld	r25, Z
    2f66:	90 32       	cpi	r25, 0x20	; 32
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <count_parameters+0x3a>
			cnt++;
    2f6a:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2f6c:	2f 5f       	subi	r18, 0xFF	; 255
    2f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f70:	26 17       	cp	r18, r22
    2f72:	37 07       	cpc	r19, r23
    2f74:	68 f3       	brcs	.-38     	; 0x2f50 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    2f76:	ef 90       	pop	r14
    2f78:	df 90       	pop	r13
    2f7a:	cf 90       	pop	r12
    2f7c:	8f 90       	pop	r8
    2f7e:	7f 90       	pop	r7
    2f80:	6f 90       	pop	r6
    2f82:	08 95       	ret

Disassembly of section .text.par_index:

00002b22 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2b22:	cf 92       	push	r12
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2b30:	44 23       	and	r20, r20
    2b32:	29 f1       	breq	.+74     	; 0x2b7e <par_index+0x5c>
    2b34:	04 2f       	mov	r16, r20
    2b36:	6b 01       	movw	r12, r22
    2b38:	e8 2e       	mov	r14, r24
    2b3a:	c0 e0       	ldi	r28, 0x00	; 0
    2b3c:	d0 e0       	ldi	r29, 0x00	; 0
    2b3e:	10 e0       	ldi	r17, 0x00	; 0
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2b42:	ae 2d       	mov	r26, r14
    2b44:	c6 01       	movw	r24, r12
    2b46:	8c 0f       	add	r24, r28
    2b48:	9d 1f       	adc	r25, r29
    2b4a:	a1 1d       	adc	r26, r1
    2b4c:	d7 fd       	sbrc	r29, 7
    2b4e:	aa 95       	dec	r26
    2b50:	fc 01       	movw	r30, r24
    2b52:	84 91       	lpm	r24, Z
    2b54:	a7 fd       	sbrc	r26, 7
    2b56:	80 81       	ld	r24, Z
    2b58:	80 32       	cpi	r24, 0x20	; 32
    2b5a:	31 f4       	brne	.+12     	; 0x2b68 <par_index+0x46>
			cnt++;
    2b5c:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2b5e:	01 13       	cpse	r16, r17
    2b60:	03 c0       	rjmp	.+6      	; 0x2b68 <par_index+0x46>
				return i+1;
    2b62:	ce 01       	movw	r24, r28
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	0d c0       	rjmp	.+26     	; 0x2b82 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2b68:	21 96       	adiw	r28, 0x01	; 1
    2b6a:	8e 2d       	mov	r24, r14
    2b6c:	b6 01       	movw	r22, r12
    2b6e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    2b72:	c8 17       	cp	r28, r24
    2b74:	d9 07       	cpc	r29, r25
    2b76:	28 f3       	brcs	.-54     	; 0x2b42 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
    2b90:	08 95       	ret

Disassembly of section .text.get_parameter:

000025b6 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    25b6:	8f 92       	push	r8
    25b8:	9f 92       	push	r9
    25ba:	af 92       	push	r10
    25bc:	cf 92       	push	r12
    25be:	df 92       	push	r13
    25c0:	ef 92       	push	r14
    25c2:	ff 92       	push	r15
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	6b 01       	movw	r12, r22
    25ce:	e8 2e       	mov	r14, r24
    25d0:	ea 01       	movw	r28, r20
    25d2:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    25d4:	0e 94 99 17 	call	0x2f32	; 0x2f32 <count_parameters>
	if(pars<parNo) return false;
    25d8:	8f 15       	cp	r24, r15
    25da:	58 f1       	brcs	.+86     	; 0x2632 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    25dc:	8e 2d       	mov	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    25e4:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    25e6:	4f 2d       	mov	r20, r15
    25e8:	8e 2d       	mov	r24, r14
    25ea:	b6 01       	movw	r22, r12
    25ec:	0e 94 91 15 	call	0x2b22	; 0x2b22 <par_index>
	uint8_t parLen=0;
    25f0:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    25f2:	15 c0       	rjmp	.+42     	; 0x261e <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    25f4:	46 01       	movw	r8, r12
    25f6:	ae 2c       	mov	r10, r14
    25f8:	82 0e       	add	r8, r18
    25fa:	93 1e       	adc	r9, r19
    25fc:	a1 1c       	adc	r10, r1
    25fe:	37 fd       	sbrc	r19, 7
    2600:	aa 94       	dec	r10
    2602:	4a 2d       	mov	r20, r10
    2604:	94 01       	movw	r18, r8
    2606:	f4 01       	movw	r30, r8
    2608:	24 91       	lpm	r18, Z
    260a:	47 fd       	sbrc	r20, 7
    260c:	20 81       	ld	r18, Z
    260e:	20 32       	cpi	r18, 0x20	; 32
    2610:	59 f0       	breq	.+22     	; 0x2628 <get_parameter+0x72>
		par[parLen++]=src[i];
    2612:	fe 01       	movw	r30, r28
    2614:	e9 0f       	add	r30, r25
    2616:	f1 1d       	adc	r31, r1
    2618:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    261a:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    261c:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	20 17       	cp	r18, r16
    2624:	31 07       	cpc	r19, r17
    2626:	30 f3       	brcs	.-52     	; 0x25f4 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    2628:	c9 0f       	add	r28, r25
    262a:	d1 1d       	adc	r29, r1
    262c:	18 82       	st	Y, r1
	
	return true;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    2632:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	08 95       	ret

Disassembly of section .text.f1:

00004036 <f1>:
	
}


static void f1(){
	f1Cnt++;
    4036:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <f1Cnt>
    403a:	8f 5f       	subi	r24, 0xFF	; 255
    403c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <f1Cnt>
    4040:	08 95       	ret

Disassembly of section .text.test_timing:

000036e8 <test_timing>:
		
		_delay_ms(1000);
	}
}

static void test_timing(){
    36e8:	cf 93       	push	r28
	uart1_hal_send_string("Start ");
    36ea:	64 e7       	ldi	r22, 0x74	; 116
    36ec:	75 e0       	ldi	r23, 0x05	; 5
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
	f1Cnt=0;
    36f4:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <f1Cnt>
	
	TC2_HAL_init();
    36f8:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <TC2_HAL_init>
	int8_t p1=TC2_HAL_subscribe(&f1);
    36fc:	8b e1       	ldi	r24, 0x1B	; 27
    36fe:	90 e2       	ldi	r25, 0x20	; 32
    3700:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <TC2_HAL_subscribe>
    3704:	c8 2f       	mov	r28, r24
	
	while(f1Cnt<5){};
    3706:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <f1Cnt>
    370a:	85 30       	cpi	r24, 0x05	; 5
    370c:	e0 f3       	brcs	.-8      	; 0x3706 <test_timing+0x1e>
	
	uart1_hal_send_string("Stop ");
    370e:	6b e7       	ldi	r22, 0x7B	; 123
    3710:	75 e0       	ldi	r23, 0x05	; 5
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
	TC2_HAL_cancel(p1);
    3718:	8c 2f       	mov	r24, r28
    371a:	0e 94 00 1b 	call	0x3600	; 0x3600 <TC2_HAL_cancel>
}
    371e:	cf 91       	pop	r28
    3720:	08 95       	ret

Disassembly of section .text.test_TC2_HAL_start:

00003b72 <test_TC2_HAL_start>:

static uint8_t f1Cnt=0;
static uint8_t f2Cnt=0;

void test_TC2_HAL_start(){
	uart1_hal_init();
    3b72:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <uart1_hal_init>
	uart1_hal_send_string("TC2 test");
    3b76:	61 e8       	ldi	r22, 0x81	; 129
    3b78:	75 e0       	ldi	r23, 0x05	; 5
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
	while(1){
		//test_sub_cancel();
		test_timing();
    3b80:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <test_timing>
    3b84:	2f ef       	ldi	r18, 0xFF	; 255
    3b86:	89 e6       	ldi	r24, 0x69	; 105
    3b88:	98 e1       	ldi	r25, 0x18	; 24
    3b8a:	21 50       	subi	r18, 0x01	; 1
    3b8c:	80 40       	sbci	r24, 0x00	; 0
    3b8e:	90 40       	sbci	r25, 0x00	; 0
    3b90:	e1 f7       	brne	.-8      	; 0x3b8a <test_TC2_HAL_start+0x18>
    3b92:	00 c0       	rjmp	.+0      	; 0x3b94 <test_TC2_HAL_start+0x22>
    3b94:	00 00       	nop
    3b96:	f4 cf       	rjmp	.-24     	; 0x3b80 <test_TC2_HAL_start+0xe>

Disassembly of section .text.test_runner:

000040d8 <test_runner>:
	//test_RTC_module_start();
	//test_TC0_HAL_start();
	//test_TC1_HAL_start();
	//test_RTC_module_start();
	//test_UART0_HAL_start();
	test_TC2_HAL_start();
    40d8:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <test_TC2_HAL_start>
    40dc:	08 95       	ret

Disassembly of section .text.calc_crc8:

000037ca <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    37ca:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    37cc:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    37ce:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    37d0:	14 c0       	rjmp	.+40     	; 0x37fa <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    37d2:	fa 01       	movw	r30, r20
    37d4:	e3 0f       	add	r30, r19
    37d6:	f1 1d       	adc	r31, r1
    37d8:	90 81       	ld	r25, Z
    37da:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    37dc:	28 e0       	ldi	r18, 0x08	; 8
    37de:	0a c0       	rjmp	.+20     	; 0x37f4 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    37e0:	88 23       	and	r24, r24
    37e2:	34 f4       	brge	.+12     	; 0x37f0 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	91 e3       	ldi	r25, 0x31	; 49
    37ec:	89 27       	eor	r24, r25
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    37f0:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    37f2:	21 50       	subi	r18, 0x01	; 1
    37f4:	21 11       	cpse	r18, r1
    37f6:	f4 cf       	rjmp	.-24     	; 0x37e0 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    37f8:	3f 5f       	subi	r19, 0xFF	; 255
    37fa:	36 17       	cp	r19, r22
    37fc:	50 f3       	brcs	.-44     	; 0x37d2 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    37fe:	08 95       	ret

Disassembly of section .text.get_decimal:

0000228e <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    22a0:	10 e0       	ldi	r17, 0x00	; 0
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    22a4:	cc 0d       	add	r28, r12
    22a6:	dd 1d       	adc	r29, r13
    22a8:	88 81       	ld	r24, Y
    22aa:	8e 32       	cpi	r24, 0x2E	; 46
    22ac:	11 f4       	brne	.+4      	; 0x22b2 <get_decimal+0x24>
			index=i+1;
    22ae:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    22b0:	0c c0       	rjmp	.+24     	; 0x22ca <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    22b2:	1f 5f       	subi	r17, 0xFF	; 255
    22b4:	c1 2f       	mov	r28, r17
    22b6:	d0 e0       	ldi	r29, 0x00	; 0
    22b8:	b6 01       	movw	r22, r12
    22ba:	80 e8       	ldi	r24, 0x80	; 128
    22bc:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	c8 17       	cp	r28, r24
    22c4:	d9 07       	cpc	r29, r25
    22c6:	70 f3       	brcs	.-36     	; 0x22a4 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    22c8:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    22ca:	11 23       	and	r17, r17
    22cc:	71 f1       	breq	.+92     	; 0x232a <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    22ce:	c1 0e       	add	r12, r17
    22d0:	d1 1c       	adc	r13, r1
    22d2:	80 e8       	ldi	r24, 0x80	; 128
    22d4:	e8 2e       	mov	r14, r24
    22d6:	8e 2d       	mov	r24, r14
    22d8:	b6 01       	movw	r22, r12
    22da:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    22de:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    22e0:	8e 2d       	mov	r24, r14
    22e2:	b6 01       	movw	r22, r12
    22e4:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
    22e8:	8c 01       	movw	r16, r24
	float divisor=1;
    22ea:	0f 2e       	mov	r0, r31
    22ec:	c1 2c       	mov	r12, r1
    22ee:	d1 2c       	mov	r13, r1
    22f0:	f0 e8       	ldi	r31, 0x80	; 128
    22f2:	ef 2e       	mov	r14, r31
    22f4:	ff e3       	ldi	r31, 0x3F	; 63
    22f6:	ff 2e       	mov	r15, r31
    22f8:	f0 2d       	mov	r31, r0
	
	while(len>0){
    22fa:	0b c0       	rjmp	.+22     	; 0x2312 <get_decimal+0x84>
		divisor*=10;
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	c7 01       	movw	r24, r14
    2306:	b6 01       	movw	r22, r12
    2308:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__mulsf3>
    230c:	6b 01       	movw	r12, r22
    230e:	7c 01       	movw	r14, r24
		len--;
    2310:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    2312:	c1 11       	cpse	r28, r1
    2314:	f3 cf       	rjmp	.-26     	; 0x22fc <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    2316:	b8 01       	movw	r22, r16
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__floatunsisf>
    2320:	a7 01       	movw	r20, r14
    2322:	96 01       	movw	r18, r12
    2324:	0e 94 57 20 	call	0x40ae	; 0x40ae <__divsf3>
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	df 90       	pop	r13
    233e:	cf 90       	pop	r12
    2340:	08 95       	ret

Disassembly of section .text.str2flaot:

00003070 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    3070:	cf 92       	push	r12
    3072:	df 92       	push	r13
    3074:	ef 92       	push	r14
    3076:	ff 92       	push	r15
    3078:	0f 93       	push	r16
    307a:	1f 93       	push	r17
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    3082:	bc 01       	movw	r22, r24
    3084:	80 e8       	ldi	r24, 0x80	; 128
    3086:	0e 94 5f 20 	call	0x40be	; 0x40be <atoi>
    308a:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    308c:	c8 01       	movw	r24, r16
    308e:	0e 94 47 11 	call	0x228e	; 0x228e <get_decimal>
    3092:	6b 01       	movw	r12, r22
    3094:	7c 01       	movw	r14, r24
	return intVal+deci;
    3096:	be 01       	movw	r22, r28
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__floatunsisf>
    30a0:	9b 01       	movw	r18, r22
    30a2:	ac 01       	movw	r20, r24
    30a4:	c7 01       	movw	r24, r14
    30a6:	b6 01       	movw	r22, r12
    30a8:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__addsf3>
	
	
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	ff 90       	pop	r15
    30b6:	ef 90       	pop	r14
    30b8:	df 90       	pop	r13
    30ba:	cf 90       	pop	r12
    30bc:	08 95       	ret

Disassembly of section .text.is_float:

00002d86 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2d94:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    2d96:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    2d98:	0d c0       	rjmp	.+26     	; 0x2db4 <is_float+0x2e>
	{
		if(str[i]=='.'){
    2d9a:	ce 0d       	add	r28, r14
    2d9c:	df 1d       	adc	r29, r15
    2d9e:	88 81       	ld	r24, Y
    2da0:	8e 32       	cpi	r24, 0x2E	; 46
    2da2:	21 f4       	brne	.+8      	; 0x2dac <is_float+0x26>
			if (got_dot)
    2da4:	01 11       	cpse	r16, r1
    2da6:	11 c0       	rjmp	.+34     	; 0x2dca <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    2da8:	01 e0       	ldi	r16, 0x01	; 1
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2dac:	80 53       	subi	r24, 0x30	; 48
    2dae:	8a 30       	cpi	r24, 0x0A	; 10
    2db0:	70 f4       	brcc	.+28     	; 0x2dce <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2db2:	1f 5f       	subi	r17, 0xFF	; 255
    2db4:	c1 2f       	mov	r28, r17
    2db6:	d0 e0       	ldi	r29, 0x00	; 0
    2db8:	b7 01       	movw	r22, r14
    2dba:	80 e8       	ldi	r24, 0x80	; 128
    2dbc:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <strlen>
    2dc0:	c8 17       	cp	r28, r24
    2dc2:	d9 07       	cpc	r29, r25
    2dc4:	50 f3       	brcs	.-44     	; 0x2d9a <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2dce:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003f8c <__subsf3>:
    3f8c:	50 58       	subi	r21, 0x80	; 128

00003f8e <__addsf3>:
    3f8e:	bb 27       	eor	r27, r27
    3f90:	aa 27       	eor	r26, r26
    3f92:	0e 94 24 10 	call	0x2048	; 0x2048 <__addsf3x>
    3f96:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002048 <__addsf3x>:
    2048:	11 c0       	rjmp	.+34     	; 0x206c <__addsf3x+0x24>
    204a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__fp_pscA>
    204e:	38 f0       	brcs	.+14     	; 0x205e <__addsf3x+0x16>
    2050:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fp_pscB>
    2054:	20 f0       	brcs	.+8      	; 0x205e <__addsf3x+0x16>
    2056:	39 f4       	brne	.+14     	; 0x2066 <__addsf3x+0x1e>
    2058:	9f 3f       	cpi	r25, 0xFF	; 255
    205a:	19 f4       	brne	.+6      	; 0x2062 <__addsf3x+0x1a>
    205c:	26 f4       	brtc	.+8      	; 0x2066 <__addsf3x+0x1e>
    205e:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__fp_nan>
    2062:	0e f4       	brtc	.+2      	; 0x2066 <__addsf3x+0x1e>
    2064:	e0 95       	com	r30
    2066:	e7 fb       	bst	r30, 7
    2068:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__fp_inf>
    206c:	e9 2f       	mov	r30, r25
    206e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_split3>
    2072:	58 f3       	brcs	.-42     	; 0x204a <__addsf3x+0x2>
    2074:	ba 17       	cp	r27, r26
    2076:	62 07       	cpc	r22, r18
    2078:	73 07       	cpc	r23, r19
    207a:	84 07       	cpc	r24, r20
    207c:	95 07       	cpc	r25, r21
    207e:	20 f0       	brcs	.+8      	; 0x2088 <__addsf3x+0x40>
    2080:	79 f4       	brne	.+30     	; 0x20a0 <__addsf3x+0x58>
    2082:	a6 f5       	brtc	.+104    	; 0x20ec <__addsf3x+0xa4>
    2084:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__fp_zero>
    2088:	0e f4       	brtc	.+2      	; 0x208c <__addsf3x+0x44>
    208a:	e0 95       	com	r30
    208c:	0b 2e       	mov	r0, r27
    208e:	ba 2f       	mov	r27, r26
    2090:	a0 2d       	mov	r26, r0
    2092:	0b 01       	movw	r0, r22
    2094:	b9 01       	movw	r22, r18
    2096:	90 01       	movw	r18, r0
    2098:	0c 01       	movw	r0, r24
    209a:	ca 01       	movw	r24, r20
    209c:	a0 01       	movw	r20, r0
    209e:	11 24       	eor	r1, r1
    20a0:	ff 27       	eor	r31, r31
    20a2:	59 1b       	sub	r21, r25
    20a4:	99 f0       	breq	.+38     	; 0x20cc <__addsf3x+0x84>
    20a6:	59 3f       	cpi	r21, 0xF9	; 249
    20a8:	50 f4       	brcc	.+20     	; 0x20be <__addsf3x+0x76>
    20aa:	50 3e       	cpi	r21, 0xE0	; 224
    20ac:	68 f1       	brcs	.+90     	; 0x2108 <__addsf3x+0xc0>
    20ae:	1a 16       	cp	r1, r26
    20b0:	f0 40       	sbci	r31, 0x00	; 0
    20b2:	a2 2f       	mov	r26, r18
    20b4:	23 2f       	mov	r18, r19
    20b6:	34 2f       	mov	r19, r20
    20b8:	44 27       	eor	r20, r20
    20ba:	58 5f       	subi	r21, 0xF8	; 248
    20bc:	f3 cf       	rjmp	.-26     	; 0x20a4 <__addsf3x+0x5c>
    20be:	46 95       	lsr	r20
    20c0:	37 95       	ror	r19
    20c2:	27 95       	ror	r18
    20c4:	a7 95       	ror	r26
    20c6:	f0 40       	sbci	r31, 0x00	; 0
    20c8:	53 95       	inc	r21
    20ca:	c9 f7       	brne	.-14     	; 0x20be <__addsf3x+0x76>
    20cc:	7e f4       	brtc	.+30     	; 0x20ec <__addsf3x+0xa4>
    20ce:	1f 16       	cp	r1, r31
    20d0:	ba 0b       	sbc	r27, r26
    20d2:	62 0b       	sbc	r22, r18
    20d4:	73 0b       	sbc	r23, r19
    20d6:	84 0b       	sbc	r24, r20
    20d8:	ba f0       	brmi	.+46     	; 0x2108 <__addsf3x+0xc0>
    20da:	91 50       	subi	r25, 0x01	; 1
    20dc:	a1 f0       	breq	.+40     	; 0x2106 <__addsf3x+0xbe>
    20de:	ff 0f       	add	r31, r31
    20e0:	bb 1f       	adc	r27, r27
    20e2:	66 1f       	adc	r22, r22
    20e4:	77 1f       	adc	r23, r23
    20e6:	88 1f       	adc	r24, r24
    20e8:	c2 f7       	brpl	.-16     	; 0x20da <__addsf3x+0x92>
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <__addsf3x+0xc0>
    20ec:	ba 0f       	add	r27, r26
    20ee:	62 1f       	adc	r22, r18
    20f0:	73 1f       	adc	r23, r19
    20f2:	84 1f       	adc	r24, r20
    20f4:	48 f4       	brcc	.+18     	; 0x2108 <__addsf3x+0xc0>
    20f6:	87 95       	ror	r24
    20f8:	77 95       	ror	r23
    20fa:	67 95       	ror	r22
    20fc:	b7 95       	ror	r27
    20fe:	f7 95       	ror	r31
    2100:	9e 3f       	cpi	r25, 0xFE	; 254
    2102:	08 f0       	brcs	.+2      	; 0x2106 <__addsf3x+0xbe>
    2104:	b0 cf       	rjmp	.-160    	; 0x2066 <__addsf3x+0x1e>
    2106:	93 95       	inc	r25
    2108:	88 0f       	add	r24, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__addsf3x+0xc6>
    210c:	99 27       	eor	r25, r25
    210e:	ee 0f       	add	r30, r30
    2110:	97 95       	ror	r25
    2112:	87 95       	ror	r24
    2114:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040ae <__divsf3>:
    40ae:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divsf3x>
    40b2:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001e96 <__divsf3x>:
    1e96:	10 c0       	rjmp	.+32     	; 0x1eb8 <__divsf3x+0x22>
    1e98:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fp_pscB>
    1e9c:	58 f0       	brcs	.+22     	; 0x1eb4 <__divsf3x+0x1e>
    1e9e:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__fp_pscA>
    1ea2:	40 f0       	brcs	.+16     	; 0x1eb4 <__divsf3x+0x1e>
    1ea4:	29 f4       	brne	.+10     	; 0x1eb0 <__divsf3x+0x1a>
    1ea6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea8:	29 f0       	breq	.+10     	; 0x1eb4 <__divsf3x+0x1e>
    1eaa:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__fp_inf>
    1eae:	51 11       	cpse	r21, r1
    1eb0:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__fp_szero>
    1eb4:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__fp_nan>
    1eb8:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_split3>
    1ebc:	68 f3       	brcs	.-38     	; 0x1e98 <__divsf3x+0x2>

00001ebe <__divsf3_pse>:
    1ebe:	99 23       	and	r25, r25
    1ec0:	b1 f3       	breq	.-20     	; 0x1eae <__divsf3x+0x18>
    1ec2:	55 23       	and	r21, r21
    1ec4:	91 f3       	breq	.-28     	; 0x1eaa <__divsf3x+0x14>
    1ec6:	95 1b       	sub	r25, r21
    1ec8:	55 0b       	sbc	r21, r21
    1eca:	bb 27       	eor	r27, r27
    1ecc:	aa 27       	eor	r26, r26
    1ece:	62 17       	cp	r22, r18
    1ed0:	73 07       	cpc	r23, r19
    1ed2:	84 07       	cpc	r24, r20
    1ed4:	38 f0       	brcs	.+14     	; 0x1ee4 <__divsf3_pse+0x26>
    1ed6:	9f 5f       	subi	r25, 0xFF	; 255
    1ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	44 1f       	adc	r20, r20
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	a9 f3       	breq	.-22     	; 0x1ece <__divsf3_pse+0x10>
    1ee4:	35 d0       	rcall	.+106    	; 0x1f50 <__divsf3_pse+0x92>
    1ee6:	0e 2e       	mov	r0, r30
    1ee8:	3a f0       	brmi	.+14     	; 0x1ef8 <__divsf3_pse+0x3a>
    1eea:	e0 e8       	ldi	r30, 0x80	; 128
    1eec:	32 d0       	rcall	.+100    	; 0x1f52 <__divsf3_pse+0x94>
    1eee:	91 50       	subi	r25, 0x01	; 1
    1ef0:	50 40       	sbci	r21, 0x00	; 0
    1ef2:	e6 95       	lsr	r30
    1ef4:	00 1c       	adc	r0, r0
    1ef6:	ca f7       	brpl	.-14     	; 0x1eea <__divsf3_pse+0x2c>
    1ef8:	2b d0       	rcall	.+86     	; 0x1f50 <__divsf3_pse+0x92>
    1efa:	fe 2f       	mov	r31, r30
    1efc:	29 d0       	rcall	.+82     	; 0x1f50 <__divsf3_pse+0x92>
    1efe:	66 0f       	add	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	bb 1f       	adc	r27, r27
    1f06:	26 17       	cp	r18, r22
    1f08:	37 07       	cpc	r19, r23
    1f0a:	48 07       	cpc	r20, r24
    1f0c:	ab 07       	cpc	r26, r27
    1f0e:	b0 e8       	ldi	r27, 0x80	; 128
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <__divsf3_pse+0x56>
    1f12:	bb 0b       	sbc	r27, r27
    1f14:	80 2d       	mov	r24, r0
    1f16:	bf 01       	movw	r22, r30
    1f18:	ff 27       	eor	r31, r31
    1f1a:	93 58       	subi	r25, 0x83	; 131
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	3a f0       	brmi	.+14     	; 0x1f2e <__divsf3_pse+0x70>
    1f20:	9e 3f       	cpi	r25, 0xFE	; 254
    1f22:	51 05       	cpc	r21, r1
    1f24:	78 f0       	brcs	.+30     	; 0x1f44 <__divsf3_pse+0x86>
    1f26:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__fp_inf>
    1f2a:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__fp_szero>
    1f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f30:	e4 f3       	brlt	.-8      	; 0x1f2a <__divsf3_pse+0x6c>
    1f32:	98 3e       	cpi	r25, 0xE8	; 232
    1f34:	d4 f3       	brlt	.-12     	; 0x1f2a <__divsf3_pse+0x6c>
    1f36:	86 95       	lsr	r24
    1f38:	77 95       	ror	r23
    1f3a:	67 95       	ror	r22
    1f3c:	b7 95       	ror	r27
    1f3e:	f7 95       	ror	r31
    1f40:	9f 5f       	subi	r25, 0xFF	; 255
    1f42:	c9 f7       	brne	.-14     	; 0x1f36 <__divsf3_pse+0x78>
    1f44:	88 0f       	add	r24, r24
    1f46:	91 1d       	adc	r25, r1
    1f48:	96 95       	lsr	r25
    1f4a:	87 95       	ror	r24
    1f4c:	97 f9       	bld	r25, 7
    1f4e:	08 95       	ret
    1f50:	e1 e0       	ldi	r30, 0x01	; 1
    1f52:	66 0f       	add	r22, r22
    1f54:	77 1f       	adc	r23, r23
    1f56:	88 1f       	adc	r24, r24
    1f58:	bb 1f       	adc	r27, r27
    1f5a:	62 17       	cp	r22, r18
    1f5c:	73 07       	cpc	r23, r19
    1f5e:	84 07       	cpc	r24, r20
    1f60:	ba 07       	cpc	r27, r26
    1f62:	20 f0       	brcs	.+8      	; 0x1f6c <__divsf3_pse+0xae>
    1f64:	62 1b       	sub	r22, r18
    1f66:	73 0b       	sbc	r23, r19
    1f68:	84 0b       	sbc	r24, r20
    1f6a:	ba 0b       	sbc	r27, r26
    1f6c:	ee 1f       	adc	r30, r30
    1f6e:	88 f7       	brcc	.-30     	; 0x1f52 <__divsf3_pse+0x94>
    1f70:	e0 95       	com	r30
    1f72:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cce <__fixunssfsi>:
    2cce:	0e 94 24 1a 	call	0x3448	; 0x3448 <__fp_splitA>
    2cd2:	88 f0       	brcs	.+34     	; 0x2cf6 <__fixunssfsi+0x28>
    2cd4:	9f 57       	subi	r25, 0x7F	; 127
    2cd6:	98 f0       	brcs	.+38     	; 0x2cfe <__fixunssfsi+0x30>
    2cd8:	b9 2f       	mov	r27, r25
    2cda:	99 27       	eor	r25, r25
    2cdc:	b7 51       	subi	r27, 0x17	; 23
    2cde:	b0 f0       	brcs	.+44     	; 0x2d0c <__fixunssfsi+0x3e>
    2ce0:	e1 f0       	breq	.+56     	; 0x2d1a <__fixunssfsi+0x4c>
    2ce2:	66 0f       	add	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	88 1f       	adc	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	1a f0       	brmi	.+6      	; 0x2cf2 <__fixunssfsi+0x24>
    2cec:	ba 95       	dec	r27
    2cee:	c9 f7       	brne	.-14     	; 0x2ce2 <__fixunssfsi+0x14>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <__fixunssfsi+0x4c>
    2cf2:	b1 30       	cpi	r27, 0x01	; 1
    2cf4:	91 f0       	breq	.+36     	; 0x2d1a <__fixunssfsi+0x4c>
    2cf6:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__fp_zero>
    2cfa:	b1 e0       	ldi	r27, 0x01	; 1
    2cfc:	08 95       	ret
    2cfe:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__fp_zero>
    2d02:	67 2f       	mov	r22, r23
    2d04:	78 2f       	mov	r23, r24
    2d06:	88 27       	eor	r24, r24
    2d08:	b8 5f       	subi	r27, 0xF8	; 248
    2d0a:	39 f0       	breq	.+14     	; 0x2d1a <__fixunssfsi+0x4c>
    2d0c:	b9 3f       	cpi	r27, 0xF9	; 249
    2d0e:	cc f3       	brlt	.-14     	; 0x2d02 <__fixunssfsi+0x34>
    2d10:	86 95       	lsr	r24
    2d12:	77 95       	ror	r23
    2d14:	67 95       	ror	r22
    2d16:	b3 95       	inc	r27
    2d18:	d9 f7       	brne	.-10     	; 0x2d10 <__fixunssfsi+0x42>
    2d1a:	3e f4       	brtc	.+14     	; 0x2d2a <__fixunssfsi+0x5c>
    2d1c:	90 95       	com	r25
    2d1e:	80 95       	com	r24
    2d20:	70 95       	com	r23
    2d22:	61 95       	neg	r22
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255
    2d26:	8f 4f       	sbci	r24, 0xFF	; 255
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000027e4 <__floatunsisf>:
    27e4:	e8 94       	clt
    27e6:	09 c0       	rjmp	.+18     	; 0x27fa <__floatsisf+0x12>

000027e8 <__floatsisf>:
    27e8:	97 fb       	bst	r25, 7
    27ea:	3e f4       	brtc	.+14     	; 0x27fa <__floatsisf+0x12>
    27ec:	90 95       	com	r25
    27ee:	80 95       	com	r24
    27f0:	70 95       	com	r23
    27f2:	61 95       	neg	r22
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	8f 4f       	sbci	r24, 0xFF	; 255
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	99 23       	and	r25, r25
    27fc:	a9 f0       	breq	.+42     	; 0x2828 <__floatsisf+0x40>
    27fe:	f9 2f       	mov	r31, r25
    2800:	96 e9       	ldi	r25, 0x96	; 150
    2802:	bb 27       	eor	r27, r27
    2804:	93 95       	inc	r25
    2806:	f6 95       	lsr	r31
    2808:	87 95       	ror	r24
    280a:	77 95       	ror	r23
    280c:	67 95       	ror	r22
    280e:	b7 95       	ror	r27
    2810:	f1 11       	cpse	r31, r1
    2812:	f8 cf       	rjmp	.-16     	; 0x2804 <__floatsisf+0x1c>
    2814:	fa f4       	brpl	.+62     	; 0x2854 <__floatsisf+0x6c>
    2816:	bb 0f       	add	r27, r27
    2818:	11 f4       	brne	.+4      	; 0x281e <__floatsisf+0x36>
    281a:	60 ff       	sbrs	r22, 0
    281c:	1b c0       	rjmp	.+54     	; 0x2854 <__floatsisf+0x6c>
    281e:	6f 5f       	subi	r22, 0xFF	; 255
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	8f 4f       	sbci	r24, 0xFF	; 255
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	16 c0       	rjmp	.+44     	; 0x2854 <__floatsisf+0x6c>
    2828:	88 23       	and	r24, r24
    282a:	11 f0       	breq	.+4      	; 0x2830 <__floatsisf+0x48>
    282c:	96 e9       	ldi	r25, 0x96	; 150
    282e:	11 c0       	rjmp	.+34     	; 0x2852 <__floatsisf+0x6a>
    2830:	77 23       	and	r23, r23
    2832:	21 f0       	breq	.+8      	; 0x283c <__floatsisf+0x54>
    2834:	9e e8       	ldi	r25, 0x8E	; 142
    2836:	87 2f       	mov	r24, r23
    2838:	76 2f       	mov	r23, r22
    283a:	05 c0       	rjmp	.+10     	; 0x2846 <__floatsisf+0x5e>
    283c:	66 23       	and	r22, r22
    283e:	71 f0       	breq	.+28     	; 0x285c <__floatsisf+0x74>
    2840:	96 e8       	ldi	r25, 0x86	; 134
    2842:	86 2f       	mov	r24, r22
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	2a f0       	brmi	.+10     	; 0x2854 <__floatsisf+0x6c>
    284a:	9a 95       	dec	r25
    284c:	66 0f       	add	r22, r22
    284e:	77 1f       	adc	r23, r23
    2850:	88 1f       	adc	r24, r24
    2852:	da f7       	brpl	.-10     	; 0x284a <__floatsisf+0x62>
    2854:	88 0f       	add	r24, r24
    2856:	96 95       	lsr	r25
    2858:	87 95       	ror	r24
    285a:	97 f9       	bld	r25, 7
    285c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004042 <__fp_inf>:
    4042:	97 f9       	bld	r25, 7
    4044:	9f 67       	ori	r25, 0x7F	; 127
    4046:	80 e8       	ldi	r24, 0x80	; 128
    4048:	70 e0       	ldi	r23, 0x00	; 0
    404a:	60 e0       	ldi	r22, 0x00	; 0
    404c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040de <__fp_nan>:
    40de:	9f ef       	ldi	r25, 0xFF	; 255
    40e0:	80 ec       	ldi	r24, 0xC0	; 192
    40e2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003f9a <__fp_pscA>:
    3f9a:	00 24       	eor	r0, r0
    3f9c:	0a 94       	dec	r0
    3f9e:	16 16       	cp	r1, r22
    3fa0:	17 06       	cpc	r1, r23
    3fa2:	18 06       	cpc	r1, r24
    3fa4:	09 06       	cpc	r0, r25
    3fa6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003fa8 <__fp_pscB>:
    3fa8:	00 24       	eor	r0, r0
    3faa:	0a 94       	dec	r0
    3fac:	12 16       	cp	r1, r18
    3fae:	13 06       	cpc	r1, r19
    3fb0:	14 06       	cpc	r1, r20
    3fb2:	05 06       	cpc	r0, r21
    3fb4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003c02 <__fp_round>:
    3c02:	09 2e       	mov	r0, r25
    3c04:	03 94       	inc	r0
    3c06:	00 0c       	add	r0, r0
    3c08:	11 f4       	brne	.+4      	; 0x3c0e <__fp_round+0xc>
    3c0a:	88 23       	and	r24, r24
    3c0c:	52 f0       	brmi	.+20     	; 0x3c22 <__fp_round+0x20>
    3c0e:	bb 0f       	add	r27, r27
    3c10:	40 f4       	brcc	.+16     	; 0x3c22 <__fp_round+0x20>
    3c12:	bf 2b       	or	r27, r31
    3c14:	11 f4       	brne	.+4      	; 0x3c1a <__fp_round+0x18>
    3c16:	60 ff       	sbrs	r22, 0
    3c18:	04 c0       	rjmp	.+8      	; 0x3c22 <__fp_round+0x20>
    3c1a:	6f 5f       	subi	r22, 0xFF	; 255
    3c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003438 <__fp_split3>:
    3438:	57 fd       	sbrc	r21, 7
    343a:	90 58       	subi	r25, 0x80	; 128
    343c:	44 0f       	add	r20, r20
    343e:	55 1f       	adc	r21, r21
    3440:	59 f0       	breq	.+22     	; 0x3458 <__fp_splitA+0x10>
    3442:	5f 3f       	cpi	r21, 0xFF	; 255
    3444:	71 f0       	breq	.+28     	; 0x3462 <__fp_splitA+0x1a>
    3446:	47 95       	ror	r20

00003448 <__fp_splitA>:
    3448:	88 0f       	add	r24, r24
    344a:	97 fb       	bst	r25, 7
    344c:	99 1f       	adc	r25, r25
    344e:	61 f0       	breq	.+24     	; 0x3468 <__fp_splitA+0x20>
    3450:	9f 3f       	cpi	r25, 0xFF	; 255
    3452:	79 f0       	breq	.+30     	; 0x3472 <__fp_splitA+0x2a>
    3454:	87 95       	ror	r24
    3456:	08 95       	ret
    3458:	12 16       	cp	r1, r18
    345a:	13 06       	cpc	r1, r19
    345c:	14 06       	cpc	r1, r20
    345e:	55 1f       	adc	r21, r21
    3460:	f2 cf       	rjmp	.-28     	; 0x3446 <__fp_split3+0xe>
    3462:	46 95       	lsr	r20
    3464:	f1 df       	rcall	.-30     	; 0x3448 <__fp_splitA>
    3466:	08 c0       	rjmp	.+16     	; 0x3478 <__fp_splitA+0x30>
    3468:	16 16       	cp	r1, r22
    346a:	17 06       	cpc	r1, r23
    346c:	18 06       	cpc	r1, r24
    346e:	99 1f       	adc	r25, r25
    3470:	f1 cf       	rjmp	.-30     	; 0x3454 <__fp_splitA+0xc>
    3472:	86 95       	lsr	r24
    3474:	71 05       	cpc	r23, r1
    3476:	61 05       	cpc	r22, r1
    3478:	08 94       	sec
    347a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003fb6 <__fp_zero>:
    3fb6:	e8 94       	clt

00003fb8 <__fp_szero>:
    3fb8:	bb 27       	eor	r27, r27
    3fba:	66 27       	eor	r22, r22
    3fbc:	77 27       	eor	r23, r23
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	97 f9       	bld	r25, 7
    3fc2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040b6 <__mulsf3>:
    40b6:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3x>
    40ba:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f74 <__mulsf3x>:
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <__mulsf3x+0x20>
    1f76:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__fp_pscA>
    1f7a:	38 f0       	brcs	.+14     	; 0x1f8a <__mulsf3x+0x16>
    1f7c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fp_pscB>
    1f80:	20 f0       	brcs	.+8      	; 0x1f8a <__mulsf3x+0x16>
    1f82:	95 23       	and	r25, r21
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <__mulsf3x+0x16>
    1f86:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__fp_inf>
    1f8a:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__fp_nan>
    1f8e:	11 24       	eor	r1, r1
    1f90:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__fp_szero>
    1f94:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_split3>
    1f98:	70 f3       	brcs	.-36     	; 0x1f76 <__mulsf3x+0x2>

00001f9a <__mulsf3_pse>:
    1f9a:	95 9f       	mul	r25, r21
    1f9c:	c1 f3       	breq	.-16     	; 0x1f8e <__mulsf3x+0x1a>
    1f9e:	95 0f       	add	r25, r21
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	62 9f       	mul	r22, r18
    1fa6:	f0 01       	movw	r30, r0
    1fa8:	72 9f       	mul	r23, r18
    1faa:	bb 27       	eor	r27, r27
    1fac:	f0 0d       	add	r31, r0
    1fae:	b1 1d       	adc	r27, r1
    1fb0:	63 9f       	mul	r22, r19
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	f0 0d       	add	r31, r0
    1fb6:	b1 1d       	adc	r27, r1
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	64 9f       	mul	r22, r20
    1fbc:	66 27       	eor	r22, r22
    1fbe:	b0 0d       	add	r27, r0
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	66 1f       	adc	r22, r22
    1fc4:	82 9f       	mul	r24, r18
    1fc6:	22 27       	eor	r18, r18
    1fc8:	b0 0d       	add	r27, r0
    1fca:	a1 1d       	adc	r26, r1
    1fcc:	62 1f       	adc	r22, r18
    1fce:	73 9f       	mul	r23, r19
    1fd0:	b0 0d       	add	r27, r0
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	62 1f       	adc	r22, r18
    1fd6:	83 9f       	mul	r24, r19
    1fd8:	a0 0d       	add	r26, r0
    1fda:	61 1d       	adc	r22, r1
    1fdc:	22 1f       	adc	r18, r18
    1fde:	74 9f       	mul	r23, r20
    1fe0:	33 27       	eor	r19, r19
    1fe2:	a0 0d       	add	r26, r0
    1fe4:	61 1d       	adc	r22, r1
    1fe6:	23 1f       	adc	r18, r19
    1fe8:	84 9f       	mul	r24, r20
    1fea:	60 0d       	add	r22, r0
    1fec:	21 1d       	adc	r18, r1
    1fee:	82 2f       	mov	r24, r18
    1ff0:	76 2f       	mov	r23, r22
    1ff2:	6a 2f       	mov	r22, r26
    1ff4:	11 24       	eor	r1, r1
    1ff6:	9f 57       	subi	r25, 0x7F	; 127
    1ff8:	50 40       	sbci	r21, 0x00	; 0
    1ffa:	9a f0       	brmi	.+38     	; 0x2022 <__mulsf3_pse+0x88>
    1ffc:	f1 f0       	breq	.+60     	; 0x203a <__mulsf3_pse+0xa0>
    1ffe:	88 23       	and	r24, r24
    2000:	4a f0       	brmi	.+18     	; 0x2014 <__mulsf3_pse+0x7a>
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	bb 1f       	adc	r27, r27
    2008:	66 1f       	adc	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	88 1f       	adc	r24, r24
    200e:	91 50       	subi	r25, 0x01	; 1
    2010:	50 40       	sbci	r21, 0x00	; 0
    2012:	a9 f7       	brne	.-22     	; 0x1ffe <__mulsf3_pse+0x64>
    2014:	9e 3f       	cpi	r25, 0xFE	; 254
    2016:	51 05       	cpc	r21, r1
    2018:	80 f0       	brcs	.+32     	; 0x203a <__mulsf3_pse+0xa0>
    201a:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__fp_inf>
    201e:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__fp_szero>
    2022:	5f 3f       	cpi	r21, 0xFF	; 255
    2024:	e4 f3       	brlt	.-8      	; 0x201e <__mulsf3_pse+0x84>
    2026:	98 3e       	cpi	r25, 0xE8	; 232
    2028:	d4 f3       	brlt	.-12     	; 0x201e <__mulsf3_pse+0x84>
    202a:	86 95       	lsr	r24
    202c:	77 95       	ror	r23
    202e:	67 95       	ror	r22
    2030:	b7 95       	ror	r27
    2032:	f7 95       	ror	r31
    2034:	e7 95       	ror	r30
    2036:	9f 5f       	subi	r25, 0xFF	; 255
    2038:	c1 f7       	brne	.-16     	; 0x202a <__mulsf3_pse+0x90>
    203a:	fe 2b       	or	r31, r30
    203c:	88 0f       	add	r24, r24
    203e:	91 1d       	adc	r25, r1
    2040:	96 95       	lsr	r25
    2042:	87 95       	ror	r24
    2044:	97 f9       	bld	r25, 7
    2046:	08 95       	ret

Disassembly of section .text.avrlibc:

000005a6 <vfprintf>:
 5a6:	a4 e1       	ldi	r26, 0x14	; 20
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e9 ed       	ldi	r30, 0xD9	; 217
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__>
 5b2:	6c 01       	movw	r12, r24
 5b4:	1a 01       	movw	r2, r20
 5b6:	46 2e       	mov	r4, r22
 5b8:	59 01       	movw	r10, r18
 5ba:	fc 01       	movw	r30, r24
 5bc:	10 86       	std	Z+8, r1	; 0x08
 5be:	17 82       	std	Z+7, r1	; 0x07
 5c0:	84 81       	ldd	r24, Z+4	; 0x04
 5c2:	81 ff       	sbrs	r24, 1
 5c4:	62 c3       	rjmp	.+1732   	; 0xc8a <__EEPROM_REGION_LENGTH__+0x48a>
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	9d 87       	std	Y+13, r25	; 0x0d
 5cc:	8c 87       	std	Y+12, r24	; 0x0c
 5ce:	a0 e8       	ldi	r26, 0x80	; 128
 5d0:	8a 8b       	std	Y+18, r24	; 0x12
 5d2:	9b 8b       	std	Y+19, r25	; 0x13
 5d4:	ac 8b       	std	Y+20, r26	; 0x14
 5d6:	f1 01       	movw	r30, r2
 5d8:	84 91       	lpm	r24, Z
 5da:	47 fc       	sbrc	r4, 7
 5dc:	80 81       	ld	r24, Z
 5de:	88 23       	and	r24, r24
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <vfprintf+0x3e>
 5e2:	4f c3       	rjmp	.+1694   	; 0xc82 <__EEPROM_REGION_LENGTH__+0x482>
 5e4:	44 2d       	mov	r20, r4
 5e6:	91 01       	movw	r18, r2
 5e8:	2f 5f       	subi	r18, 0xFF	; 255
 5ea:	3f 4f       	sbci	r19, 0xFF	; 255
 5ec:	4f 4f       	sbci	r20, 0xFF	; 255
 5ee:	85 32       	cpi	r24, 0x25	; 37
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <vfprintf+0x52>
 5f2:	19 01       	movw	r2, r18
 5f4:	44 2e       	mov	r4, r20
 5f6:	0a c0       	rjmp	.+20     	; 0x60c <vfprintf+0x66>
 5f8:	f9 01       	movw	r30, r18
 5fa:	84 91       	lpm	r24, Z
 5fc:	47 fd       	sbrc	r20, 7
 5fe:	80 81       	ld	r24, Z
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	29 0e       	add	r2, r25
 604:	31 1c       	adc	r3, r1
 606:	41 1c       	adc	r4, r1
 608:	85 32       	cpi	r24, 0x25	; 37
 60a:	49 f4       	brne	.+18     	; 0x61e <vfprintf+0x78>
 60c:	b6 01       	movw	r22, r12
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 614:	bf 86       	std	Y+15, r11	; 0x0f
 616:	ae 86       	std	Y+14, r10	; 0x0e
 618:	ae 84       	ldd	r10, Y+14	; 0x0e
 61a:	bf 84       	ldd	r11, Y+15	; 0x0f
 61c:	dc cf       	rjmp	.-72     	; 0x5d6 <vfprintf+0x30>
 61e:	10 e0       	ldi	r17, 0x00	; 0
 620:	f1 2c       	mov	r15, r1
 622:	00 e0       	ldi	r16, 0x00	; 0
 624:	00 32       	cpi	r16, 0x20	; 32
 626:	a0 f4       	brcc	.+40     	; 0x650 <vfprintf+0xaa>
 628:	8b 32       	cpi	r24, 0x2B	; 43
 62a:	69 f0       	breq	.+26     	; 0x646 <vfprintf+0xa0>
 62c:	30 f4       	brcc	.+12     	; 0x63a <vfprintf+0x94>
 62e:	80 32       	cpi	r24, 0x20	; 32
 630:	59 f0       	breq	.+22     	; 0x648 <vfprintf+0xa2>
 632:	83 32       	cpi	r24, 0x23	; 35
 634:	69 f4       	brne	.+26     	; 0x650 <vfprintf+0xaa>
 636:	00 61       	ori	r16, 0x10	; 16
 638:	2c c0       	rjmp	.+88     	; 0x692 <vfprintf+0xec>
 63a:	8d 32       	cpi	r24, 0x2D	; 45
 63c:	39 f0       	breq	.+14     	; 0x64c <vfprintf+0xa6>
 63e:	80 33       	cpi	r24, 0x30	; 48
 640:	39 f4       	brne	.+14     	; 0x650 <vfprintf+0xaa>
 642:	01 60       	ori	r16, 0x01	; 1
 644:	26 c0       	rjmp	.+76     	; 0x692 <vfprintf+0xec>
 646:	02 60       	ori	r16, 0x02	; 2
 648:	04 60       	ori	r16, 0x04	; 4
 64a:	23 c0       	rjmp	.+70     	; 0x692 <vfprintf+0xec>
 64c:	08 60       	ori	r16, 0x08	; 8
 64e:	21 c0       	rjmp	.+66     	; 0x692 <vfprintf+0xec>
 650:	07 fd       	sbrc	r16, 7
 652:	29 c0       	rjmp	.+82     	; 0x6a6 <vfprintf+0x100>
 654:	90 ed       	ldi	r25, 0xD0	; 208
 656:	98 0f       	add	r25, r24
 658:	9a 30       	cpi	r25, 0x0A	; 10
 65a:	78 f4       	brcc	.+30     	; 0x67a <vfprintf+0xd4>
 65c:	06 ff       	sbrs	r16, 6
 65e:	06 c0       	rjmp	.+12     	; 0x66c <vfprintf+0xc6>
 660:	aa e0       	ldi	r26, 0x0A	; 10
 662:	1a 9f       	mul	r17, r26
 664:	90 0d       	add	r25, r0
 666:	11 24       	eor	r1, r1
 668:	19 2f       	mov	r17, r25
 66a:	13 c0       	rjmp	.+38     	; 0x692 <vfprintf+0xec>
 66c:	ea e0       	ldi	r30, 0x0A	; 10
 66e:	fe 9e       	mul	r15, r30
 670:	90 0d       	add	r25, r0
 672:	11 24       	eor	r1, r1
 674:	f9 2e       	mov	r15, r25
 676:	00 62       	ori	r16, 0x20	; 32
 678:	0c c0       	rjmp	.+24     	; 0x692 <vfprintf+0xec>
 67a:	8e 32       	cpi	r24, 0x2E	; 46
 67c:	21 f4       	brne	.+8      	; 0x686 <vfprintf+0xe0>
 67e:	06 fd       	sbrc	r16, 6
 680:	00 c3       	rjmp	.+1536   	; 0xc82 <__EEPROM_REGION_LENGTH__+0x482>
 682:	00 64       	ori	r16, 0x40	; 64
 684:	06 c0       	rjmp	.+12     	; 0x692 <vfprintf+0xec>
 686:	8c 36       	cpi	r24, 0x6C	; 108
 688:	11 f4       	brne	.+4      	; 0x68e <vfprintf+0xe8>
 68a:	00 68       	ori	r16, 0x80	; 128
 68c:	02 c0       	rjmp	.+4      	; 0x692 <vfprintf+0xec>
 68e:	88 36       	cpi	r24, 0x68	; 104
 690:	51 f4       	brne	.+20     	; 0x6a6 <vfprintf+0x100>
 692:	f1 01       	movw	r30, r2
 694:	84 91       	lpm	r24, Z
 696:	47 fc       	sbrc	r4, 7
 698:	80 81       	ld	r24, Z
 69a:	ff ef       	ldi	r31, 0xFF	; 255
 69c:	2f 1a       	sub	r2, r31
 69e:	3f 0a       	sbc	r3, r31
 6a0:	4f 0a       	sbc	r4, r31
 6a2:	81 11       	cpse	r24, r1
 6a4:	bf cf       	rjmp	.-130    	; 0x624 <vfprintf+0x7e>
 6a6:	9b eb       	ldi	r25, 0xBB	; 187
 6a8:	98 0f       	add	r25, r24
 6aa:	93 30       	cpi	r25, 0x03	; 3
 6ac:	18 f4       	brcc	.+6      	; 0x6b4 <vfprintf+0x10e>
 6ae:	00 61       	ori	r16, 0x10	; 16
 6b0:	80 5e       	subi	r24, 0xE0	; 224
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0x11a>
 6b4:	9b e9       	ldi	r25, 0x9B	; 155
 6b6:	98 0f       	add	r25, r24
 6b8:	93 30       	cpi	r25, 0x03	; 3
 6ba:	08 f0       	brcs	.+2      	; 0x6be <vfprintf+0x118>
 6bc:	66 c1       	rjmp	.+716    	; 0x98a <__EEPROM_REGION_LENGTH__+0x18a>
 6be:	0f 7e       	andi	r16, 0xEF	; 239
 6c0:	06 ff       	sbrs	r16, 6
 6c2:	16 e0       	ldi	r17, 0x06	; 6
 6c4:	0f 73       	andi	r16, 0x3F	; 63
 6c6:	70 2e       	mov	r7, r16
 6c8:	85 36       	cpi	r24, 0x65	; 101
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <vfprintf+0x12e>
 6cc:	20 2f       	mov	r18, r16
 6ce:	20 64       	ori	r18, 0x40	; 64
 6d0:	72 2e       	mov	r7, r18
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <vfprintf+0x13e>
 6d4:	86 36       	cpi	r24, 0x66	; 102
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <vfprintf+0x13a>
 6d8:	80 2f       	mov	r24, r16
 6da:	80 68       	ori	r24, 0x80	; 128
 6dc:	78 2e       	mov	r7, r24
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0x13e>
 6e0:	11 11       	cpse	r17, r1
 6e2:	11 50       	subi	r17, 0x01	; 1
 6e4:	77 fe       	sbrs	r7, 7
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <vfprintf+0x150>
 6e8:	1c 33       	cpi	r17, 0x3C	; 60
 6ea:	50 f4       	brcc	.+20     	; 0x700 <vfprintf+0x15a>
 6ec:	ee 24       	eor	r14, r14
 6ee:	e3 94       	inc	r14
 6f0:	e1 0e       	add	r14, r17
 6f2:	27 e0       	ldi	r18, 0x07	; 7
 6f4:	0b c0       	rjmp	.+22     	; 0x70c <vfprintf+0x166>
 6f6:	18 30       	cpi	r17, 0x08	; 8
 6f8:	38 f0       	brcs	.+14     	; 0x708 <vfprintf+0x162>
 6fa:	27 e0       	ldi	r18, 0x07	; 7
 6fc:	17 e0       	ldi	r17, 0x07	; 7
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <vfprintf+0x164>
 700:	27 e0       	ldi	r18, 0x07	; 7
 702:	6c e3       	ldi	r22, 0x3C	; 60
 704:	e6 2e       	mov	r14, r22
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x166>
 708:	21 2f       	mov	r18, r17
 70a:	e1 2c       	mov	r14, r1
 70c:	f5 01       	movw	r30, r10
 70e:	34 96       	adiw	r30, 0x04	; 4
 710:	ff 87       	std	Y+15, r31	; 0x0f
 712:	ee 87       	std	Y+14, r30	; 0x0e
 714:	f5 01       	movw	r30, r10
 716:	60 81       	ld	r22, Z
 718:	71 81       	ldd	r23, Z+1	; 0x01
 71a:	82 81       	ldd	r24, Z+2	; 0x02
 71c:	93 81       	ldd	r25, Z+3	; 0x03
 71e:	0e 2d       	mov	r16, r14
 720:	ae 01       	movw	r20, r28
 722:	4f 5f       	subi	r20, 0xFF	; 255
 724:	5f 4f       	sbci	r21, 0xFF	; 255
 726:	0e 94 34 0a 	call	0x1468	; 0x1468 <__ftoa_engine>
 72a:	5c 01       	movw	r10, r24
 72c:	59 80       	ldd	r5, Y+1	; 0x01
 72e:	50 fe       	sbrs	r5, 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x190>
 732:	53 fe       	sbrs	r5, 3
 734:	06 c0       	rjmp	.+12     	; 0x742 <vfprintf+0x19c>
 736:	71 fc       	sbrc	r7, 1
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0x1a0>
 73a:	72 fe       	sbrs	r7, 2
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0x1a4>
 73e:	00 e2       	ldi	r16, 0x20	; 32
 740:	05 c0       	rjmp	.+10     	; 0x74c <vfprintf+0x1a6>
 742:	0d e2       	ldi	r16, 0x2D	; 45
 744:	03 c0       	rjmp	.+6      	; 0x74c <vfprintf+0x1a6>
 746:	0b e2       	ldi	r16, 0x2B	; 43
 748:	01 c0       	rjmp	.+2      	; 0x74c <vfprintf+0x1a6>
 74a:	00 e0       	ldi	r16, 0x00	; 0
 74c:	85 2d       	mov	r24, r5
 74e:	8c 70       	andi	r24, 0x0C	; 12
 750:	19 f0       	breq	.+6      	; 0x758 <vfprintf+0x1b2>
 752:	01 11       	cpse	r16, r1
 754:	73 c2       	rjmp	.+1254   	; 0xc3c <__EEPROM_REGION_LENGTH__+0x43c>
 756:	be c2       	rjmp	.+1404   	; 0xcd4 <__EEPROM_REGION_LENGTH__+0x4d4>
 758:	77 fe       	sbrs	r7, 7
 75a:	0f c0       	rjmp	.+30     	; 0x77a <vfprintf+0x1d4>
 75c:	ea 0c       	add	r14, r10
 75e:	54 fe       	sbrs	r5, 4
 760:	04 c0       	rjmp	.+8      	; 0x76a <vfprintf+0x1c4>
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	81 33       	cpi	r24, 0x31	; 49
 766:	09 f4       	brne	.+2      	; 0x76a <vfprintf+0x1c4>
 768:	ea 94       	dec	r14
 76a:	1e 14       	cp	r1, r14
 76c:	74 f5       	brge	.+92     	; 0x7ca <vfprintf+0x224>
 76e:	28 e0       	ldi	r18, 0x08	; 8
 770:	2e 15       	cp	r18, r14
 772:	78 f5       	brcc	.+94     	; 0x7d2 <vfprintf+0x22c>
 774:	38 e0       	ldi	r19, 0x08	; 8
 776:	e3 2e       	mov	r14, r19
 778:	2c c0       	rjmp	.+88     	; 0x7d2 <vfprintf+0x22c>
 77a:	76 fc       	sbrc	r7, 6
 77c:	2a c0       	rjmp	.+84     	; 0x7d2 <vfprintf+0x22c>
 77e:	81 2f       	mov	r24, r17
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	8a 15       	cp	r24, r10
 784:	9b 05       	cpc	r25, r11
 786:	9c f0       	brlt	.+38     	; 0x7ae <vfprintf+0x208>
 788:	8c ef       	ldi	r24, 0xFC	; 252
 78a:	a8 16       	cp	r10, r24
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	b8 06       	cpc	r11, r24
 790:	74 f0       	brlt	.+28     	; 0x7ae <vfprintf+0x208>
 792:	97 2d       	mov	r25, r7
 794:	90 68       	ori	r25, 0x80	; 128
 796:	79 2e       	mov	r7, r25
 798:	0a c0       	rjmp	.+20     	; 0x7ae <vfprintf+0x208>
 79a:	e2 e0       	ldi	r30, 0x02	; 2
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	ec 0f       	add	r30, r28
 7a0:	fd 1f       	adc	r31, r29
 7a2:	e1 0f       	add	r30, r17
 7a4:	f1 1d       	adc	r31, r1
 7a6:	80 81       	ld	r24, Z
 7a8:	80 33       	cpi	r24, 0x30	; 48
 7aa:	19 f4       	brne	.+6      	; 0x7b2 <vfprintf+0x20c>
 7ac:	11 50       	subi	r17, 0x01	; 1
 7ae:	11 11       	cpse	r17, r1
 7b0:	f4 cf       	rjmp	.-24     	; 0x79a <vfprintf+0x1f4>
 7b2:	77 fe       	sbrs	r7, 7
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <vfprintf+0x22c>
 7b6:	ee 24       	eor	r14, r14
 7b8:	e3 94       	inc	r14
 7ba:	e1 0e       	add	r14, r17
 7bc:	81 2f       	mov	r24, r17
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a8 16       	cp	r10, r24
 7c2:	b9 06       	cpc	r11, r25
 7c4:	2c f4       	brge	.+10     	; 0x7d0 <vfprintf+0x22a>
 7c6:	1a 19       	sub	r17, r10
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <vfprintf+0x22c>
 7ca:	ee 24       	eor	r14, r14
 7cc:	e3 94       	inc	r14
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <vfprintf+0x22c>
 7d0:	10 e0       	ldi	r17, 0x00	; 0
 7d2:	77 fe       	sbrs	r7, 7
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x23c>
 7d6:	1a 14       	cp	r1, r10
 7d8:	1b 04       	cpc	r1, r11
 7da:	34 f4       	brge	.+12     	; 0x7e8 <vfprintf+0x242>
 7dc:	c5 01       	movw	r24, r10
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <vfprintf+0x246>
 7e2:	85 e0       	ldi	r24, 0x05	; 5
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0x246>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	01 11       	cpse	r16, r1
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	11 23       	and	r17, r17
 7f2:	31 f0       	breq	.+12     	; 0x800 <__EEPROM_REGION_LENGTH__>
 7f4:	21 2f       	mov	r18, r17
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	2f 5f       	subi	r18, 0xFF	; 255
 7fa:	3f 4f       	sbci	r19, 0xFF	; 255
 7fc:	82 0f       	add	r24, r18
 7fe:	93 1f       	adc	r25, r19
 800:	2f 2d       	mov	r18, r15
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	82 17       	cp	r24, r18
 806:	93 07       	cpc	r25, r19
 808:	14 f4       	brge	.+4      	; 0x80e <__EEPROM_REGION_LENGTH__+0xe>
 80a:	f8 1a       	sub	r15, r24
 80c:	01 c0       	rjmp	.+2      	; 0x810 <__EEPROM_REGION_LENGTH__+0x10>
 80e:	f1 2c       	mov	r15, r1
 810:	87 2d       	mov	r24, r7
 812:	89 70       	andi	r24, 0x09	; 9
 814:	49 f4       	brne	.+18     	; 0x828 <__EEPROM_REGION_LENGTH__+0x28>
 816:	ff 20       	and	r15, r15
 818:	39 f0       	breq	.+14     	; 0x828 <__EEPROM_REGION_LENGTH__+0x28>
 81a:	b6 01       	movw	r22, r12
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 824:	fa 94       	dec	r15
 826:	f7 cf       	rjmp	.-18     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 828:	00 23       	and	r16, r16
 82a:	29 f0       	breq	.+10     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 82c:	b6 01       	movw	r22, r12
 82e:	80 2f       	mov	r24, r16
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 836:	73 fc       	sbrc	r7, 3
 838:	09 c0       	rjmp	.+18     	; 0x84c <__EEPROM_REGION_LENGTH__+0x4c>
 83a:	ff 20       	and	r15, r15
 83c:	39 f0       	breq	.+14     	; 0x84c <__EEPROM_REGION_LENGTH__+0x4c>
 83e:	b6 01       	movw	r22, r12
 840:	80 e3       	ldi	r24, 0x30	; 48
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 848:	fa 94       	dec	r15
 84a:	f7 cf       	rjmp	.-18     	; 0x83a <__EEPROM_REGION_LENGTH__+0x3a>
 84c:	77 fe       	sbrs	r7, 7
 84e:	49 c0       	rjmp	.+146    	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 850:	35 01       	movw	r6, r10
 852:	b7 fe       	sbrs	r11, 7
 854:	02 c0       	rjmp	.+4      	; 0x85a <__EEPROM_REGION_LENGTH__+0x5a>
 856:	61 2c       	mov	r6, r1
 858:	71 2c       	mov	r7, r1
 85a:	c5 01       	movw	r24, r10
 85c:	86 19       	sub	r24, r6
 85e:	97 09       	sbc	r25, r7
 860:	88 24       	eor	r8, r8
 862:	83 94       	inc	r8
 864:	91 2c       	mov	r9, r1
 866:	8c 0e       	add	r8, r28
 868:	9d 1e       	adc	r9, r29
 86a:	88 0e       	add	r8, r24
 86c:	99 1e       	adc	r9, r25
 86e:	f5 01       	movw	r30, r10
 870:	ee 19       	sub	r30, r14
 872:	f1 09       	sbc	r31, r1
 874:	f9 8b       	std	Y+17, r31	; 0x11
 876:	e8 8b       	std	Y+16, r30	; 0x10
 878:	01 2f       	mov	r16, r17
 87a:	10 e0       	ldi	r17, 0x00	; 0
 87c:	11 95       	neg	r17
 87e:	01 95       	neg	r16
 880:	11 09       	sbc	r17, r1
 882:	ff ef       	ldi	r31, 0xFF	; 255
 884:	6f 16       	cp	r6, r31
 886:	7f 06       	cpc	r7, r31
 888:	29 f4       	brne	.+10     	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 88a:	b6 01       	movw	r22, r12
 88c:	8e e2       	ldi	r24, 0x2E	; 46
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 894:	a6 14       	cp	r10, r6
 896:	b7 04       	cpc	r11, r7
 898:	44 f0       	brlt	.+16     	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 89a:	88 89       	ldd	r24, Y+16	; 0x10
 89c:	99 89       	ldd	r25, Y+17	; 0x11
 89e:	86 15       	cp	r24, r6
 8a0:	97 05       	cpc	r25, r7
 8a2:	1c f4       	brge	.+6      	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a4:	f4 01       	movw	r30, r8
 8a6:	81 81       	ldd	r24, Z+1	; 0x01
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <__EEPROM_REGION_LENGTH__+0xac>
 8aa:	80 e3       	ldi	r24, 0x30	; 48
 8ac:	f1 e0       	ldi	r31, 0x01	; 1
 8ae:	6f 1a       	sub	r6, r31
 8b0:	71 08       	sbc	r7, r1
 8b2:	2f ef       	ldi	r18, 0xFF	; 255
 8b4:	82 1a       	sub	r8, r18
 8b6:	92 0a       	sbc	r9, r18
 8b8:	60 16       	cp	r6, r16
 8ba:	71 06       	cpc	r7, r17
 8bc:	2c f0       	brlt	.+10     	; 0x8c8 <__EEPROM_REGION_LENGTH__+0xc8>
 8be:	b6 01       	movw	r22, r12
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 8c6:	dd cf       	rjmp	.-70     	; 0x882 <__EEPROM_REGION_LENGTH__+0x82>
 8c8:	a6 14       	cp	r10, r6
 8ca:	b7 04       	cpc	r11, r7
 8cc:	39 f4       	brne	.+14     	; 0x8dc <__EEPROM_REGION_LENGTH__+0xdc>
 8ce:	9a 81       	ldd	r25, Y+2	; 0x02
 8d0:	96 33       	cpi	r25, 0x36	; 54
 8d2:	18 f4       	brcc	.+6      	; 0x8da <__EEPROM_REGION_LENGTH__+0xda>
 8d4:	95 33       	cpi	r25, 0x35	; 53
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__EEPROM_REGION_LENGTH__+0xdc>
 8d8:	54 fe       	sbrs	r5, 4
 8da:	81 e3       	ldi	r24, 0x31	; 49
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	51 c0       	rjmp	.+162    	; 0x984 <__EEPROM_REGION_LENGTH__+0x184>
 8e2:	8a 81       	ldd	r24, Y+2	; 0x02
 8e4:	81 33       	cpi	r24, 0x31	; 49
 8e6:	19 f0       	breq	.+6      	; 0x8ee <__EEPROM_REGION_LENGTH__+0xee>
 8e8:	95 2d       	mov	r25, r5
 8ea:	9f 7e       	andi	r25, 0xEF	; 239
 8ec:	59 2e       	mov	r5, r25
 8ee:	b6 01       	movw	r22, r12
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 8f6:	11 11       	cpse	r17, r1
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <__EEPROM_REGION_LENGTH__+0x104>
 8fa:	74 fc       	sbrc	r7, 4
 8fc:	1c c0       	rjmp	.+56     	; 0x936 <__EEPROM_REGION_LENGTH__+0x136>
 8fe:	85 e6       	ldi	r24, 0x65	; 101
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	1b c0       	rjmp	.+54     	; 0x93a <__EEPROM_REGION_LENGTH__+0x13a>
 904:	b6 01       	movw	r22, r12
 906:	8e e2       	ldi	r24, 0x2E	; 46
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 90e:	02 e0       	ldi	r16, 0x02	; 2
 910:	01 0f       	add	r16, r17
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	11 e0       	ldi	r17, 0x01	; 1
 916:	18 0f       	add	r17, r24
 918:	e1 e0       	ldi	r30, 0x01	; 1
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	ec 0f       	add	r30, r28
 91e:	fd 1f       	adc	r31, r29
 920:	e8 0f       	add	r30, r24
 922:	f1 1d       	adc	r31, r1
 924:	80 81       	ld	r24, Z
 926:	b6 01       	movw	r22, r12
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 92e:	81 2f       	mov	r24, r17
 930:	10 13       	cpse	r17, r16
 932:	f0 cf       	rjmp	.-32     	; 0x914 <__EEPROM_REGION_LENGTH__+0x114>
 934:	e2 cf       	rjmp	.-60     	; 0x8fa <__EEPROM_REGION_LENGTH__+0xfa>
 936:	85 e4       	ldi	r24, 0x45	; 69
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	b6 01       	movw	r22, r12
 93c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 940:	b7 fc       	sbrc	r11, 7
 942:	05 c0       	rjmp	.+10     	; 0x94e <__EEPROM_REGION_LENGTH__+0x14e>
 944:	a1 14       	cp	r10, r1
 946:	b1 04       	cpc	r11, r1
 948:	39 f4       	brne	.+14     	; 0x958 <__EEPROM_REGION_LENGTH__+0x158>
 94a:	54 fe       	sbrs	r5, 4
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__EEPROM_REGION_LENGTH__+0x158>
 94e:	b1 94       	neg	r11
 950:	a1 94       	neg	r10
 952:	b1 08       	sbc	r11, r1
 954:	8d e2       	ldi	r24, 0x2D	; 45
 956:	01 c0       	rjmp	.+2      	; 0x95a <__EEPROM_REGION_LENGTH__+0x15a>
 958:	8b e2       	ldi	r24, 0x2B	; 43
 95a:	b6 01       	movw	r22, r12
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 962:	80 e3       	ldi	r24, 0x30	; 48
 964:	ea e0       	ldi	r30, 0x0A	; 10
 966:	ae 16       	cp	r10, r30
 968:	b1 04       	cpc	r11, r1
 96a:	2c f0       	brlt	.+10     	; 0x976 <__EEPROM_REGION_LENGTH__+0x176>
 96c:	8f 5f       	subi	r24, 0xFF	; 255
 96e:	aa e0       	ldi	r26, 0x0A	; 10
 970:	aa 1a       	sub	r10, r26
 972:	b1 08       	sbc	r11, r1
 974:	f7 cf       	rjmp	.-18     	; 0x964 <__EEPROM_REGION_LENGTH__+0x164>
 976:	b6 01       	movw	r22, r12
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 97e:	b6 01       	movw	r22, r12
 980:	c5 01       	movw	r24, r10
 982:	c0 96       	adiw	r24, 0x30	; 48
 984:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 988:	72 c1       	rjmp	.+740    	; 0xc6e <__EEPROM_REGION_LENGTH__+0x46e>
 98a:	83 36       	cpi	r24, 0x63	; 99
 98c:	31 f0       	breq	.+12     	; 0x99a <__EEPROM_REGION_LENGTH__+0x19a>
 98e:	83 37       	cpi	r24, 0x73	; 115
 990:	91 f0       	breq	.+36     	; 0x9b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 992:	83 35       	cpi	r24, 0x53	; 83
 994:	09 f0       	breq	.+2      	; 0x998 <__EEPROM_REGION_LENGTH__+0x198>
 996:	5d c0       	rjmp	.+186    	; 0xa52 <__EEPROM_REGION_LENGTH__+0x252>
 998:	24 c0       	rjmp	.+72     	; 0x9e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 99a:	c5 01       	movw	r24, r10
 99c:	02 96       	adiw	r24, 0x02	; 2
 99e:	9f 87       	std	Y+15, r25	; 0x0f
 9a0:	8e 87       	std	Y+14, r24	; 0x0e
 9a2:	f5 01       	movw	r30, r10
 9a4:	80 81       	ld	r24, Z
 9a6:	89 83       	std	Y+1, r24	; 0x01
 9a8:	6a 88       	ldd	r6, Y+18	; 0x12
 9aa:	7b 88       	ldd	r7, Y+19	; 0x13
 9ac:	8c 88       	ldd	r8, Y+20	; 0x14
 9ae:	aa 24       	eor	r10, r10
 9b0:	a3 94       	inc	r10
 9b2:	b1 2c       	mov	r11, r1
 9b4:	14 c0       	rjmp	.+40     	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 9b6:	c5 01       	movw	r24, r10
 9b8:	03 96       	adiw	r24, 0x03	; 3
 9ba:	9f 87       	std	Y+15, r25	; 0x0f
 9bc:	8e 87       	std	Y+14, r24	; 0x0e
 9be:	f5 01       	movw	r30, r10
 9c0:	60 80       	ld	r6, Z
 9c2:	71 80       	ldd	r7, Z+1	; 0x01
 9c4:	82 80       	ldd	r8, Z+2	; 0x02
 9c6:	06 ff       	sbrs	r16, 6
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9ca:	41 2f       	mov	r20, r17
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 9d0:	4f ef       	ldi	r20, 0xFF	; 255
 9d2:	5f ef       	ldi	r21, 0xFF	; 255
 9d4:	88 2d       	mov	r24, r8
 9d6:	b3 01       	movw	r22, r6
 9d8:	0e 94 1b 1c 	call	0x3836	; 0x3836 <strnlen>
 9dc:	5c 01       	movw	r10, r24
 9de:	0f 77       	andi	r16, 0x7F	; 127
 9e0:	15 c0       	rjmp	.+42     	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 9e2:	c5 01       	movw	r24, r10
 9e4:	03 96       	adiw	r24, 0x03	; 3
 9e6:	9f 87       	std	Y+15, r25	; 0x0f
 9e8:	8e 87       	std	Y+14, r24	; 0x0e
 9ea:	f5 01       	movw	r30, r10
 9ec:	60 80       	ld	r6, Z
 9ee:	71 80       	ldd	r7, Z+1	; 0x01
 9f0:	82 80       	ldd	r8, Z+2	; 0x02
 9f2:	06 ff       	sbrs	r16, 6
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__EEPROM_REGION_LENGTH__+0x1fc>
 9f6:	41 2f       	mov	r20, r17
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
 9fc:	4f ef       	ldi	r20, 0xFF	; 255
 9fe:	5f ef       	ldi	r21, 0xFF	; 255
 a00:	88 2d       	mov	r24, r8
 a02:	b3 01       	movw	r22, r6
 a04:	0e 94 1b 1c 	call	0x3836	; 0x3836 <strnlen>
 a08:	5c 01       	movw	r10, r24
 a0a:	00 68       	ori	r16, 0x80	; 128
 a0c:	03 fd       	sbrc	r16, 3
 a0e:	1d c0       	rjmp	.+58     	; 0xa4a <__EEPROM_REGION_LENGTH__+0x24a>
 a10:	8f 2d       	mov	r24, r15
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	a8 16       	cp	r10, r24
 a16:	b9 06       	cpc	r11, r25
 a18:	c0 f4       	brcc	.+48     	; 0xa4a <__EEPROM_REGION_LENGTH__+0x24a>
 a1a:	b6 01       	movw	r22, r12
 a1c:	80 e2       	ldi	r24, 0x20	; 32
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 a24:	fa 94       	dec	r15
 a26:	f4 cf       	rjmp	.-24     	; 0xa10 <__EEPROM_REGION_LENGTH__+0x210>
 a28:	f3 01       	movw	r30, r6
 a2a:	84 91       	lpm	r24, Z
 a2c:	87 fc       	sbrc	r8, 7
 a2e:	80 81       	ld	r24, Z
 a30:	ff ef       	ldi	r31, 0xFF	; 255
 a32:	6f 1a       	sub	r6, r31
 a34:	7f 0a       	sbc	r7, r31
 a36:	8f 0a       	sbc	r8, r31
 a38:	b6 01       	movw	r22, r12
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 a40:	f1 10       	cpse	r15, r1
 a42:	fa 94       	dec	r15
 a44:	21 e0       	ldi	r18, 0x01	; 1
 a46:	a2 1a       	sub	r10, r18
 a48:	b1 08       	sbc	r11, r1
 a4a:	a1 14       	cp	r10, r1
 a4c:	b1 04       	cpc	r11, r1
 a4e:	61 f7       	brne	.-40     	; 0xa28 <__EEPROM_REGION_LENGTH__+0x228>
 a50:	0e c1       	rjmp	.+540    	; 0xc6e <__EEPROM_REGION_LENGTH__+0x46e>
 a52:	84 36       	cpi	r24, 0x64	; 100
 a54:	11 f0       	breq	.+4      	; 0xa5a <__EEPROM_REGION_LENGTH__+0x25a>
 a56:	89 36       	cpi	r24, 0x69	; 105
 a58:	79 f5       	brne	.+94     	; 0xab8 <__EEPROM_REGION_LENGTH__+0x2b8>
 a5a:	c5 01       	movw	r24, r10
 a5c:	07 ff       	sbrs	r16, 7
 a5e:	09 c0       	rjmp	.+18     	; 0xa72 <__EEPROM_REGION_LENGTH__+0x272>
 a60:	04 96       	adiw	r24, 0x04	; 4
 a62:	9f 87       	std	Y+15, r25	; 0x0f
 a64:	8e 87       	std	Y+14, r24	; 0x0e
 a66:	f5 01       	movw	r30, r10
 a68:	60 81       	ld	r22, Z
 a6a:	71 81       	ldd	r23, Z+1	; 0x01
 a6c:	82 81       	ldd	r24, Z+2	; 0x02
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	0a c0       	rjmp	.+20     	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 a72:	02 96       	adiw	r24, 0x02	; 2
 a74:	9f 87       	std	Y+15, r25	; 0x0f
 a76:	8e 87       	std	Y+14, r24	; 0x0e
 a78:	f5 01       	movw	r30, r10
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	07 2e       	mov	r0, r23
 a80:	00 0c       	add	r0, r0
 a82:	88 0b       	sbc	r24, r24
 a84:	99 0b       	sbc	r25, r25
 a86:	0f 76       	andi	r16, 0x6F	; 111
 a88:	e0 2e       	mov	r14, r16
 a8a:	97 ff       	sbrs	r25, 7
 a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 a8e:	90 95       	com	r25
 a90:	80 95       	com	r24
 a92:	70 95       	com	r23
 a94:	61 95       	neg	r22
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	f0 2f       	mov	r31, r16
 a9e:	f0 68       	ori	r31, 0x80	; 128
 aa0:	ef 2e       	mov	r14, r31
 aa2:	2a e0       	ldi	r18, 0x0A	; 10
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	ae 01       	movw	r20, r28
 aa8:	4f 5f       	subi	r20, 0xFF	; 255
 aaa:	5f 4f       	sbci	r21, 0xFF	; 255
 aac:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ultoa_invert>
 ab0:	a8 2e       	mov	r10, r24
 ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab4:	a2 1a       	sub	r10, r18
 ab6:	4b c0       	rjmp	.+150    	; 0xb4e <__EEPROM_REGION_LENGTH__+0x34e>
 ab8:	85 37       	cpi	r24, 0x75	; 117
 aba:	29 f4       	brne	.+10     	; 0xac6 <__EEPROM_REGION_LENGTH__+0x2c6>
 abc:	0f 7e       	andi	r16, 0xEF	; 239
 abe:	e0 2e       	mov	r14, r16
 ac0:	2a e0       	ldi	r18, 0x0A	; 10
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	25 c0       	rjmp	.+74     	; 0xb10 <__EEPROM_REGION_LENGTH__+0x310>
 ac6:	90 2f       	mov	r25, r16
 ac8:	99 7f       	andi	r25, 0xF9	; 249
 aca:	e9 2e       	mov	r14, r25
 acc:	8f 36       	cpi	r24, 0x6F	; 111
 ace:	c1 f0       	breq	.+48     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 ad0:	18 f4       	brcc	.+6      	; 0xad8 <__EEPROM_REGION_LENGTH__+0x2d8>
 ad2:	88 35       	cpi	r24, 0x58	; 88
 ad4:	79 f0       	breq	.+30     	; 0xaf4 <__EEPROM_REGION_LENGTH__+0x2f4>
 ad6:	d5 c0       	rjmp	.+426    	; 0xc82 <__EEPROM_REGION_LENGTH__+0x482>
 ad8:	80 37       	cpi	r24, 0x70	; 112
 ada:	19 f0       	breq	.+6      	; 0xae2 <__EEPROM_REGION_LENGTH__+0x2e2>
 adc:	88 37       	cpi	r24, 0x78	; 120
 ade:	21 f0       	breq	.+8      	; 0xae8 <__EEPROM_REGION_LENGTH__+0x2e8>
 ae0:	d0 c0       	rjmp	.+416    	; 0xc82 <__EEPROM_REGION_LENGTH__+0x482>
 ae2:	a9 2f       	mov	r26, r25
 ae4:	a0 61       	ori	r26, 0x10	; 16
 ae6:	ea 2e       	mov	r14, r26
 ae8:	e4 fe       	sbrs	r14, 4
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <__EEPROM_REGION_LENGTH__+0x306>
 aec:	ee 2d       	mov	r30, r14
 aee:	e4 60       	ori	r30, 0x04	; 4
 af0:	ee 2e       	mov	r14, r30
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <__EEPROM_REGION_LENGTH__+0x306>
 af4:	04 ff       	sbrs	r16, 4
 af6:	0a c0       	rjmp	.+20     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 af8:	f9 2f       	mov	r31, r25
 afa:	f6 60       	ori	r31, 0x06	; 6
 afc:	ef 2e       	mov	r14, r31
 afe:	06 c0       	rjmp	.+12     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 b00:	28 e0       	ldi	r18, 0x08	; 8
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	05 c0       	rjmp	.+10     	; 0xb10 <__EEPROM_REGION_LENGTH__+0x310>
 b06:	20 e1       	ldi	r18, 0x10	; 16
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__EEPROM_REGION_LENGTH__+0x310>
 b0c:	20 e1       	ldi	r18, 0x10	; 16
 b0e:	32 e0       	ldi	r19, 0x02	; 2
 b10:	c5 01       	movw	r24, r10
 b12:	e7 fe       	sbrs	r14, 7
 b14:	09 c0       	rjmp	.+18     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b16:	04 96       	adiw	r24, 0x04	; 4
 b18:	9f 87       	std	Y+15, r25	; 0x0f
 b1a:	8e 87       	std	Y+14, r24	; 0x0e
 b1c:	f5 01       	movw	r30, r10
 b1e:	60 81       	ld	r22, Z
 b20:	71 81       	ldd	r23, Z+1	; 0x01
 b22:	82 81       	ldd	r24, Z+2	; 0x02
 b24:	93 81       	ldd	r25, Z+3	; 0x03
 b26:	08 c0       	rjmp	.+16     	; 0xb38 <__EEPROM_REGION_LENGTH__+0x338>
 b28:	02 96       	adiw	r24, 0x02	; 2
 b2a:	9f 87       	std	Y+15, r25	; 0x0f
 b2c:	8e 87       	std	Y+14, r24	; 0x0e
 b2e:	f5 01       	movw	r30, r10
 b30:	60 81       	ld	r22, Z
 b32:	71 81       	ldd	r23, Z+1	; 0x01
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	ae 01       	movw	r20, r28
 b3a:	4f 5f       	subi	r20, 0xFF	; 255
 b3c:	5f 4f       	sbci	r21, 0xFF	; 255
 b3e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ultoa_invert>
 b42:	a8 2e       	mov	r10, r24
 b44:	fc 85       	ldd	r31, Y+12	; 0x0c
 b46:	af 1a       	sub	r10, r31
 b48:	2e 2d       	mov	r18, r14
 b4a:	2f 77       	andi	r18, 0x7F	; 127
 b4c:	e2 2e       	mov	r14, r18
 b4e:	e6 fe       	sbrs	r14, 6
 b50:	0b c0       	rjmp	.+22     	; 0xb68 <__EEPROM_REGION_LENGTH__+0x368>
 b52:	0e 2d       	mov	r16, r14
 b54:	0e 7f       	andi	r16, 0xFE	; 254
 b56:	a1 16       	cp	r10, r17
 b58:	50 f4       	brcc	.+20     	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b5a:	e4 fe       	sbrs	r14, 4
 b5c:	0a c0       	rjmp	.+20     	; 0xb72 <__EEPROM_REGION_LENGTH__+0x372>
 b5e:	e2 fc       	sbrc	r14, 2
 b60:	08 c0       	rjmp	.+16     	; 0xb72 <__EEPROM_REGION_LENGTH__+0x372>
 b62:	0e 2d       	mov	r16, r14
 b64:	0e 7e       	andi	r16, 0xEE	; 238
 b66:	05 c0       	rjmp	.+10     	; 0xb72 <__EEPROM_REGION_LENGTH__+0x372>
 b68:	ba 2c       	mov	r11, r10
 b6a:	0e 2d       	mov	r16, r14
 b6c:	03 c0       	rjmp	.+6      	; 0xb74 <__EEPROM_REGION_LENGTH__+0x374>
 b6e:	ba 2c       	mov	r11, r10
 b70:	01 c0       	rjmp	.+2      	; 0xb74 <__EEPROM_REGION_LENGTH__+0x374>
 b72:	b1 2e       	mov	r11, r17
 b74:	04 ff       	sbrs	r16, 4
 b76:	0d c0       	rjmp	.+26     	; 0xb92 <__EEPROM_REGION_LENGTH__+0x392>
 b78:	fe 01       	movw	r30, r28
 b7a:	ea 0d       	add	r30, r10
 b7c:	f1 1d       	adc	r31, r1
 b7e:	80 81       	ld	r24, Z
 b80:	80 33       	cpi	r24, 0x30	; 48
 b82:	11 f4       	brne	.+4      	; 0xb88 <__EEPROM_REGION_LENGTH__+0x388>
 b84:	09 7e       	andi	r16, 0xE9	; 233
 b86:	09 c0       	rjmp	.+18     	; 0xb9a <__EEPROM_REGION_LENGTH__+0x39a>
 b88:	02 ff       	sbrs	r16, 2
 b8a:	06 c0       	rjmp	.+12     	; 0xb98 <__EEPROM_REGION_LENGTH__+0x398>
 b8c:	b3 94       	inc	r11
 b8e:	b3 94       	inc	r11
 b90:	04 c0       	rjmp	.+8      	; 0xb9a <__EEPROM_REGION_LENGTH__+0x39a>
 b92:	80 2f       	mov	r24, r16
 b94:	86 78       	andi	r24, 0x86	; 134
 b96:	09 f0       	breq	.+2      	; 0xb9a <__EEPROM_REGION_LENGTH__+0x39a>
 b98:	b3 94       	inc	r11
 b9a:	03 fd       	sbrc	r16, 3
 b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__EEPROM_REGION_LENGTH__+0x3c0>
 b9e:	00 ff       	sbrs	r16, 0
 ba0:	06 c0       	rjmp	.+12     	; 0xbae <__EEPROM_REGION_LENGTH__+0x3ae>
 ba2:	bf 14       	cp	r11, r15
 ba4:	88 f4       	brcc	.+34     	; 0xbc8 <__EEPROM_REGION_LENGTH__+0x3c8>
 ba6:	fa 0c       	add	r15, r10
 ba8:	1f 2d       	mov	r17, r15
 baa:	1b 19       	sub	r17, r11
 bac:	0e c0       	rjmp	.+28     	; 0xbca <__EEPROM_REGION_LENGTH__+0x3ca>
 bae:	bf 14       	cp	r11, r15
 bb0:	60 f4       	brcc	.+24     	; 0xbca <__EEPROM_REGION_LENGTH__+0x3ca>
 bb2:	b6 01       	movw	r22, r12
 bb4:	80 e2       	ldi	r24, 0x20	; 32
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 bbc:	b3 94       	inc	r11
 bbe:	f7 cf       	rjmp	.-18     	; 0xbae <__EEPROM_REGION_LENGTH__+0x3ae>
 bc0:	bf 14       	cp	r11, r15
 bc2:	18 f4       	brcc	.+6      	; 0xbca <__EEPROM_REGION_LENGTH__+0x3ca>
 bc4:	fb 18       	sub	r15, r11
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <__EEPROM_REGION_LENGTH__+0x3cc>
 bc8:	1a 2d       	mov	r17, r10
 bca:	f1 2c       	mov	r15, r1
 bcc:	04 ff       	sbrs	r16, 4
 bce:	10 c0       	rjmp	.+32     	; 0xbf0 <__EEPROM_REGION_LENGTH__+0x3f0>
 bd0:	b6 01       	movw	r22, r12
 bd2:	80 e3       	ldi	r24, 0x30	; 48
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 bda:	02 ff       	sbrs	r16, 2
 bdc:	17 c0       	rjmp	.+46     	; 0xc0c <__EEPROM_REGION_LENGTH__+0x40c>
 bde:	01 fd       	sbrc	r16, 1
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 be2:	88 e7       	ldi	r24, 0x78	; 120
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	02 c0       	rjmp	.+4      	; 0xbec <__EEPROM_REGION_LENGTH__+0x3ec>
 be8:	88 e5       	ldi	r24, 0x58	; 88
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	b6 01       	movw	r22, r12
 bee:	0c c0       	rjmp	.+24     	; 0xc08 <__EEPROM_REGION_LENGTH__+0x408>
 bf0:	80 2f       	mov	r24, r16
 bf2:	86 78       	andi	r24, 0x86	; 134
 bf4:	59 f0       	breq	.+22     	; 0xc0c <__EEPROM_REGION_LENGTH__+0x40c>
 bf6:	01 ff       	sbrs	r16, 1
 bf8:	02 c0       	rjmp	.+4      	; 0xbfe <__EEPROM_REGION_LENGTH__+0x3fe>
 bfa:	8b e2       	ldi	r24, 0x2B	; 43
 bfc:	01 c0       	rjmp	.+2      	; 0xc00 <__EEPROM_REGION_LENGTH__+0x400>
 bfe:	80 e2       	ldi	r24, 0x20	; 32
 c00:	07 fd       	sbrc	r16, 7
 c02:	8d e2       	ldi	r24, 0x2D	; 45
 c04:	b6 01       	movw	r22, r12
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 c0c:	a1 16       	cp	r10, r17
 c0e:	38 f4       	brcc	.+14     	; 0xc1e <__EEPROM_REGION_LENGTH__+0x41e>
 c10:	b6 01       	movw	r22, r12
 c12:	80 e3       	ldi	r24, 0x30	; 48
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 c1a:	11 50       	subi	r17, 0x01	; 1
 c1c:	f7 cf       	rjmp	.-18     	; 0xc0c <__EEPROM_REGION_LENGTH__+0x40c>
 c1e:	aa 94       	dec	r10
 c20:	e1 e0       	ldi	r30, 0x01	; 1
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	ec 0f       	add	r30, r28
 c26:	fd 1f       	adc	r31, r29
 c28:	ea 0d       	add	r30, r10
 c2a:	f1 1d       	adc	r31, r1
 c2c:	80 81       	ld	r24, Z
 c2e:	b6 01       	movw	r22, r12
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 c36:	a1 10       	cpse	r10, r1
 c38:	f2 cf       	rjmp	.-28     	; 0xc1e <__EEPROM_REGION_LENGTH__+0x41e>
 c3a:	19 c0       	rjmp	.+50     	; 0xc6e <__EEPROM_REGION_LENGTH__+0x46e>
 c3c:	f4 e0       	ldi	r31, 0x04	; 4
 c3e:	ff 15       	cp	r31, r15
 c40:	80 f5       	brcc	.+96     	; 0xca2 <__EEPROM_REGION_LENGTH__+0x4a2>
 c42:	84 e0       	ldi	r24, 0x04	; 4
 c44:	f8 1a       	sub	r15, r24
 c46:	73 fe       	sbrs	r7, 3
 c48:	23 c0       	rjmp	.+70     	; 0xc90 <__EEPROM_REGION_LENGTH__+0x490>
 c4a:	01 11       	cpse	r16, r1
 c4c:	2b c0       	rjmp	.+86     	; 0xca4 <__EEPROM_REGION_LENGTH__+0x4a4>
 c4e:	53 fe       	sbrs	r5, 3
 c50:	2f c0       	rjmp	.+94     	; 0xcb0 <__EEPROM_REGION_LENGTH__+0x4b0>
 c52:	5e e8       	ldi	r21, 0x8E	; 142
 c54:	85 2e       	mov	r8, r21
 c56:	55 e0       	ldi	r21, 0x05	; 5
 c58:	95 2e       	mov	r9, r21
 c5a:	50 e0       	ldi	r21, 0x00	; 0
 c5c:	a5 2e       	mov	r10, r21
 c5e:	07 2d       	mov	r16, r7
 c60:	00 71       	andi	r16, 0x10	; 16
 c62:	f4 01       	movw	r30, r8
 c64:	84 91       	lpm	r24, Z
 c66:	a7 fc       	sbrc	r10, 7
 c68:	80 81       	ld	r24, Z
 c6a:	81 11       	cpse	r24, r1
 c6c:	28 c0       	rjmp	.+80     	; 0xcbe <__EEPROM_REGION_LENGTH__+0x4be>
 c6e:	ff 20       	and	r15, r15
 c70:	09 f4       	brne	.+2      	; 0xc74 <__EEPROM_REGION_LENGTH__+0x474>
 c72:	d2 cc       	rjmp	.-1628   	; 0x618 <vfprintf+0x72>
 c74:	b6 01       	movw	r22, r12
 c76:	80 e2       	ldi	r24, 0x20	; 32
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 c7e:	fa 94       	dec	r15
 c80:	f6 cf       	rjmp	.-20     	; 0xc6e <__EEPROM_REGION_LENGTH__+0x46e>
 c82:	f6 01       	movw	r30, r12
 c84:	87 81       	ldd	r24, Z+7	; 0x07
 c86:	90 85       	ldd	r25, Z+8	; 0x08
 c88:	2c c0       	rjmp	.+88     	; 0xce2 <__EEPROM_REGION_LENGTH__+0x4e2>
 c8a:	8f ef       	ldi	r24, 0xFF	; 255
 c8c:	9f ef       	ldi	r25, 0xFF	; 255
 c8e:	29 c0       	rjmp	.+82     	; 0xce2 <__EEPROM_REGION_LENGTH__+0x4e2>
 c90:	b6 01       	movw	r22, r12
 c92:	80 e2       	ldi	r24, 0x20	; 32
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 c9a:	fa 94       	dec	r15
 c9c:	f1 10       	cpse	r15, r1
 c9e:	f8 cf       	rjmp	.-16     	; 0xc90 <__EEPROM_REGION_LENGTH__+0x490>
 ca0:	d4 cf       	rjmp	.-88     	; 0xc4a <__EEPROM_REGION_LENGTH__+0x44a>
 ca2:	f1 2c       	mov	r15, r1
 ca4:	b6 01       	movw	r22, r12
 ca6:	80 2f       	mov	r24, r16
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 cae:	cf cf       	rjmp	.-98     	; 0xc4e <__EEPROM_REGION_LENGTH__+0x44e>
 cb0:	4a e8       	ldi	r20, 0x8A	; 138
 cb2:	84 2e       	mov	r8, r20
 cb4:	45 e0       	ldi	r20, 0x05	; 5
 cb6:	94 2e       	mov	r9, r20
 cb8:	40 e0       	ldi	r20, 0x00	; 0
 cba:	a4 2e       	mov	r10, r20
 cbc:	d0 cf       	rjmp	.-96     	; 0xc5e <__EEPROM_REGION_LENGTH__+0x45e>
 cbe:	01 11       	cpse	r16, r1
 cc0:	80 52       	subi	r24, 0x20	; 32
 cc2:	b6 01       	movw	r22, r12
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
 cca:	ff ef       	ldi	r31, 0xFF	; 255
 ccc:	8f 1a       	sub	r8, r31
 cce:	9f 0a       	sbc	r9, r31
 cd0:	af 0a       	sbc	r10, r31
 cd2:	c7 cf       	rjmp	.-114    	; 0xc62 <__EEPROM_REGION_LENGTH__+0x462>
 cd4:	23 e0       	ldi	r18, 0x03	; 3
 cd6:	2f 15       	cp	r18, r15
 cd8:	10 f4       	brcc	.+4      	; 0xcde <__EEPROM_REGION_LENGTH__+0x4de>
 cda:	83 e0       	ldi	r24, 0x03	; 3
 cdc:	b3 cf       	rjmp	.-154    	; 0xc44 <__EEPROM_REGION_LENGTH__+0x444>
 cde:	f1 2c       	mov	r15, r1
 ce0:	b6 cf       	rjmp	.-148    	; 0xc4e <__EEPROM_REGION_LENGTH__+0x44e>
 ce2:	64 96       	adiw	r28, 0x14	; 20
 ce4:	e2 e1       	ldi	r30, 0x12	; 18
 ce6:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__epilogue_restores__>

Disassembly of section .text.libgcc:

0000404e <__tablejump2__>:
    404e:	ee 0f       	add	r30, r30
    4050:	ff 1f       	adc	r31, r31
    4052:	05 90       	lpm	r0, Z+
    4054:	f4 91       	lpm	r31, Z
    4056:	e0 2d       	mov	r30, r0
    4058:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003cde <__umulhisi3>:
    3cde:	a2 9f       	mul	r26, r18
    3ce0:	b0 01       	movw	r22, r0
    3ce2:	b3 9f       	mul	r27, r19
    3ce4:	c0 01       	movw	r24, r0
    3ce6:	a3 9f       	mul	r26, r19
    3ce8:	70 0d       	add	r23, r0
    3cea:	81 1d       	adc	r24, r1
    3cec:	11 24       	eor	r1, r1
    3cee:	91 1d       	adc	r25, r1
    3cf0:	b2 9f       	mul	r27, r18
    3cf2:	70 0d       	add	r23, r0
    3cf4:	81 1d       	adc	r24, r1
    3cf6:	11 24       	eor	r1, r1
    3cf8:	91 1d       	adc	r25, r1
    3cfa:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003792 <__prologue_saves__>:
    3792:	2f 92       	push	r2
    3794:	3f 92       	push	r3
    3796:	4f 92       	push	r4
    3798:	5f 92       	push	r5
    379a:	6f 92       	push	r6
    379c:	7f 92       	push	r7
    379e:	8f 92       	push	r8
    37a0:	9f 92       	push	r9
    37a2:	af 92       	push	r10
    37a4:	bf 92       	push	r11
    37a6:	cf 92       	push	r12
    37a8:	df 92       	push	r13
    37aa:	ef 92       	push	r14
    37ac:	ff 92       	push	r15
    37ae:	0f 93       	push	r16
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	ca 1b       	sub	r28, r26
    37bc:	db 0b       	sbc	r29, r27
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003800 <__epilogue_restores__>:
    3800:	2a 88       	ldd	r2, Y+18	; 0x12
    3802:	39 88       	ldd	r3, Y+17	; 0x11
    3804:	48 88       	ldd	r4, Y+16	; 0x10
    3806:	5f 84       	ldd	r5, Y+15	; 0x0f
    3808:	6e 84       	ldd	r6, Y+14	; 0x0e
    380a:	7d 84       	ldd	r7, Y+13	; 0x0d
    380c:	8c 84       	ldd	r8, Y+12	; 0x0c
    380e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3810:	aa 84       	ldd	r10, Y+10	; 0x0a
    3812:	b9 84       	ldd	r11, Y+9	; 0x09
    3814:	c8 84       	ldd	r12, Y+8	; 0x08
    3816:	df 80       	ldd	r13, Y+7	; 0x07
    3818:	ee 80       	ldd	r14, Y+6	; 0x06
    381a:	fd 80       	ldd	r15, Y+5	; 0x05
    381c:	0c 81       	ldd	r16, Y+4	; 0x04
    381e:	1b 81       	ldd	r17, Y+3	; 0x03
    3820:	aa 81       	ldd	r26, Y+2	; 0x02
    3822:	b9 81       	ldd	r27, Y+1	; 0x01
    3824:	ce 0f       	add	r28, r30
    3826:	d1 1d       	adc	r29, r1
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	ed 01       	movw	r28, r26
    3834:	08 95       	ret

Disassembly of section .text.avrlibc:

000040be <atoi>:
    40be:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <atol>
    40c2:	cb 01       	movw	r24, r22
    40c4:	08 95       	ret

Disassembly of section .text.avrlibc:

00003fc4 <atol>:
    3fc4:	2a e0       	ldi	r18, 0x0A	; 10
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e0       	ldi	r20, 0x00	; 0
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	0e 94 75 06 	call	0xcea	; 0xcea <strtol>
    3fd0:	08 95       	ret

Disassembly of section .text.avrlibc:

00000cea <strtol>:
 cea:	2f 92       	push	r2
 cec:	3f 92       	push	r3
 cee:	4f 92       	push	r4
 cf0:	5f 92       	push	r5
 cf2:	6f 92       	push	r6
 cf4:	7f 92       	push	r7
 cf6:	8f 92       	push	r8
 cf8:	af 92       	push	r10
 cfa:	bf 92       	push	r11
 cfc:	cf 92       	push	r12
 cfe:	df 92       	push	r13
 d00:	ef 92       	push	r14
 d02:	0f 93       	push	r16
 d04:	1f 93       	push	r17
 d06:	cf 93       	push	r28
 d08:	df 93       	push	r29
 d0a:	00 d0       	rcall	.+0      	; 0xd0c <strtol+0x22>
 d0c:	00 d0       	rcall	.+0      	; 0xd0e <strtol+0x24>
 d0e:	00 d0       	rcall	.+0      	; 0xd10 <strtol+0x26>
 d10:	cd b7       	in	r28, 0x3d	; 61
 d12:	de b7       	in	r29, 0x3e	; 62
 d14:	3b 01       	movw	r6, r22
 d16:	88 2e       	mov	r8, r24
 d18:	5a 01       	movw	r10, r20
 d1a:	19 01       	movw	r2, r18
 d1c:	41 15       	cp	r20, r1
 d1e:	51 05       	cpc	r21, r1
 d20:	21 f0       	breq	.+8      	; 0xd2a <strtol+0x40>
 d22:	fa 01       	movw	r30, r20
 d24:	60 83       	st	Z, r22
 d26:	71 83       	std	Z+1, r23	; 0x01
 d28:	82 83       	std	Z+2, r24	; 0x02
 d2a:	21 14       	cp	r2, r1
 d2c:	31 04       	cpc	r3, r1
 d2e:	29 f0       	breq	.+10     	; 0xd3a <strtol+0x50>
 d30:	c1 01       	movw	r24, r2
 d32:	02 97       	sbiw	r24, 0x02	; 2
 d34:	83 97       	sbiw	r24, 0x23	; 35
 d36:	08 f0       	brcs	.+2      	; 0xd3a <strtol+0x50>
 d38:	1a c1       	rjmp	.+564    	; 0xf6e <strtol+0x284>
 d3a:	e8 2c       	mov	r14, r8
 d3c:	63 01       	movw	r12, r6
 d3e:	ff ef       	ldi	r31, 0xFF	; 255
 d40:	cf 1a       	sub	r12, r31
 d42:	df 0a       	sbc	r13, r31
 d44:	ef 0a       	sbc	r14, r31
 d46:	f3 01       	movw	r30, r6
 d48:	14 91       	lpm	r17, Z
 d4a:	87 fc       	sbrc	r8, 7
 d4c:	10 81       	ld	r17, Z
 d4e:	81 2f       	mov	r24, r17
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	0e 94 57 1f 	call	0x3eae	; 0x3eae <isspace>
 d56:	4c 2d       	mov	r20, r12
 d58:	3d 2d       	mov	r19, r13
 d5a:	2e 2d       	mov	r18, r14
 d5c:	89 2b       	or	r24, r25
 d5e:	19 f0       	breq	.+6      	; 0xd66 <strtol+0x7c>
 d60:	36 01       	movw	r6, r12
 d62:	8e 2c       	mov	r8, r14
 d64:	ea cf       	rjmp	.-44     	; 0xd3a <strtol+0x50>
 d66:	1d 32       	cpi	r17, 0x2D	; 45
 d68:	69 f4       	brne	.+26     	; 0xd84 <strtol+0x9a>
 d6a:	e8 2c       	mov	r14, r8
 d6c:	63 01       	movw	r12, r6
 d6e:	52 e0       	ldi	r21, 0x02	; 2
 d70:	c5 0e       	add	r12, r21
 d72:	d1 1c       	adc	r13, r1
 d74:	e1 1c       	adc	r14, r1
 d76:	e4 2f       	mov	r30, r20
 d78:	f3 2f       	mov	r31, r19
 d7a:	14 91       	lpm	r17, Z
 d7c:	27 fd       	sbrc	r18, 7
 d7e:	10 81       	ld	r17, Z
 d80:	01 e0       	ldi	r16, 0x01	; 1
 d82:	0e c0       	rjmp	.+28     	; 0xda0 <strtol+0xb6>
 d84:	1b 32       	cpi	r17, 0x2B	; 43
 d86:	59 f4       	brne	.+22     	; 0xd9e <strtol+0xb4>
 d88:	e8 2c       	mov	r14, r8
 d8a:	63 01       	movw	r12, r6
 d8c:	82 e0       	ldi	r24, 0x02	; 2
 d8e:	c8 0e       	add	r12, r24
 d90:	d1 1c       	adc	r13, r1
 d92:	e1 1c       	adc	r14, r1
 d94:	e4 2f       	mov	r30, r20
 d96:	f3 2f       	mov	r31, r19
 d98:	14 91       	lpm	r17, Z
 d9a:	27 fd       	sbrc	r18, 7
 d9c:	10 81       	ld	r17, Z
 d9e:	00 e0       	ldi	r16, 0x00	; 0
 da0:	21 14       	cp	r2, r1
 da2:	31 04       	cpc	r3, r1
 da4:	09 f1       	breq	.+66     	; 0xde8 <strtol+0xfe>
 da6:	90 e1       	ldi	r25, 0x10	; 16
 da8:	29 16       	cp	r2, r25
 daa:	31 04       	cpc	r3, r1
 dac:	29 f4       	brne	.+10     	; 0xdb8 <strtol+0xce>
 dae:	3f c0       	rjmp	.+126    	; 0xe2e <strtol+0x144>
 db0:	10 e3       	ldi	r17, 0x30	; 48
 db2:	21 14       	cp	r2, r1
 db4:	31 04       	cpc	r3, r1
 db6:	21 f1       	breq	.+72     	; 0xe00 <strtol+0x116>
 db8:	f8 e0       	ldi	r31, 0x08	; 8
 dba:	2f 16       	cp	r2, r31
 dbc:	31 04       	cpc	r3, r1
 dbe:	01 f1       	breq	.+64     	; 0xe00 <strtol+0x116>
 dc0:	54 f4       	brge	.+20     	; 0xdd6 <strtol+0xec>
 dc2:	32 e0       	ldi	r19, 0x02	; 2
 dc4:	23 16       	cp	r2, r19
 dc6:	31 04       	cpc	r3, r1
 dc8:	21 f5       	brne	.+72     	; 0xe12 <strtol+0x128>
 dca:	41 2c       	mov	r4, r1
 dcc:	51 2c       	mov	r5, r1
 dce:	61 2c       	mov	r6, r1
 dd0:	50 e4       	ldi	r21, 0x40	; 64
 dd2:	75 2e       	mov	r7, r21
 dd4:	4b c0       	rjmp	.+150    	; 0xe6c <strtol+0x182>
 dd6:	4a e0       	ldi	r20, 0x0A	; 10
 dd8:	24 16       	cp	r2, r20
 dda:	31 04       	cpc	r3, r1
 ddc:	39 f0       	breq	.+14     	; 0xdec <strtol+0x102>
 dde:	50 e1       	ldi	r21, 0x10	; 16
 de0:	25 16       	cp	r2, r21
 de2:	31 04       	cpc	r3, r1
 de4:	b1 f4       	brne	.+44     	; 0xe12 <strtol+0x128>
 de6:	3d c0       	rjmp	.+122    	; 0xe62 <strtol+0x178>
 de8:	10 33       	cpi	r17, 0x30	; 48
 dea:	19 f1       	breq	.+70     	; 0xe32 <strtol+0x148>
 dec:	3a e0       	ldi	r19, 0x0A	; 10
 dee:	23 2e       	mov	r2, r19
 df0:	31 2c       	mov	r3, r1
 df2:	4c ec       	ldi	r20, 0xCC	; 204
 df4:	44 2e       	mov	r4, r20
 df6:	54 2c       	mov	r5, r4
 df8:	64 2c       	mov	r6, r4
 dfa:	4c e0       	ldi	r20, 0x0C	; 12
 dfc:	74 2e       	mov	r7, r20
 dfe:	36 c0       	rjmp	.+108    	; 0xe6c <strtol+0x182>
 e00:	98 e0       	ldi	r25, 0x08	; 8
 e02:	29 2e       	mov	r2, r25
 e04:	31 2c       	mov	r3, r1
 e06:	41 2c       	mov	r4, r1
 e08:	51 2c       	mov	r5, r1
 e0a:	61 2c       	mov	r6, r1
 e0c:	20 e1       	ldi	r18, 0x10	; 16
 e0e:	72 2e       	mov	r7, r18
 e10:	2d c0       	rjmp	.+90     	; 0xe6c <strtol+0x182>
 e12:	60 e0       	ldi	r22, 0x00	; 0
 e14:	70 e0       	ldi	r23, 0x00	; 0
 e16:	80 e0       	ldi	r24, 0x00	; 0
 e18:	90 e8       	ldi	r25, 0x80	; 128
 e1a:	91 01       	movw	r18, r2
 e1c:	03 2c       	mov	r0, r3
 e1e:	00 0c       	add	r0, r0
 e20:	44 0b       	sbc	r20, r20
 e22:	55 0b       	sbc	r21, r21
 e24:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__udivmodsi4>
 e28:	29 01       	movw	r4, r18
 e2a:	3a 01       	movw	r6, r20
 e2c:	1f c0       	rjmp	.+62     	; 0xe6c <strtol+0x182>
 e2e:	10 33       	cpi	r17, 0x30	; 48
 e30:	c1 f4       	brne	.+48     	; 0xe62 <strtol+0x178>
 e32:	f6 01       	movw	r30, r12
 e34:	84 91       	lpm	r24, Z
 e36:	e7 fc       	sbrc	r14, 7
 e38:	80 81       	ld	r24, Z
 e3a:	8f 7d       	andi	r24, 0xDF	; 223
 e3c:	88 35       	cpi	r24, 0x58	; 88
 e3e:	09 f0       	breq	.+2      	; 0xe42 <strtol+0x158>
 e40:	b7 cf       	rjmp	.-146    	; 0xdb0 <strtol+0xc6>
 e42:	ae 2d       	mov	r26, r14
 e44:	c6 01       	movw	r24, r12
 e46:	01 96       	adiw	r24, 0x01	; 1
 e48:	a1 1d       	adc	r26, r1
 e4a:	fc 01       	movw	r30, r24
 e4c:	14 91       	lpm	r17, Z
 e4e:	a7 fd       	sbrc	r26, 7
 e50:	10 81       	ld	r17, Z
 e52:	e2 e0       	ldi	r30, 0x02	; 2
 e54:	ce 0e       	add	r12, r30
 e56:	d1 1c       	adc	r13, r1
 e58:	e1 1c       	adc	r14, r1
 e5a:	02 60       	ori	r16, 0x02	; 2
 e5c:	60 e1       	ldi	r22, 0x10	; 16
 e5e:	26 2e       	mov	r2, r22
 e60:	31 2c       	mov	r3, r1
 e62:	41 2c       	mov	r4, r1
 e64:	51 2c       	mov	r5, r1
 e66:	61 2c       	mov	r6, r1
 e68:	88 e0       	ldi	r24, 0x08	; 8
 e6a:	78 2e       	mov	r7, r24
 e6c:	a0 e0       	ldi	r26, 0x00	; 0
 e6e:	60 e0       	ldi	r22, 0x00	; 0
 e70:	70 e0       	ldi	r23, 0x00	; 0
 e72:	cb 01       	movw	r24, r22
 e74:	91 01       	movw	r18, r2
 e76:	03 2c       	mov	r0, r3
 e78:	00 0c       	add	r0, r0
 e7a:	44 0b       	sbc	r20, r20
 e7c:	55 0b       	sbc	r21, r21
 e7e:	29 83       	std	Y+1, r18	; 0x01
 e80:	3a 83       	std	Y+2, r19	; 0x02
 e82:	4b 83       	std	Y+3, r20	; 0x03
 e84:	5c 83       	std	Y+4, r21	; 0x04
 e86:	e0 ed       	ldi	r30, 0xD0	; 208
 e88:	e1 0f       	add	r30, r17
 e8a:	ea 30       	cpi	r30, 0x0A	; 10
 e8c:	60 f0       	brcs	.+24     	; 0xea6 <strtol+0x1bc>
 e8e:	2f eb       	ldi	r18, 0xBF	; 191
 e90:	21 0f       	add	r18, r17
 e92:	2a 31       	cpi	r18, 0x1A	; 26
 e94:	10 f4       	brcc	.+4      	; 0xe9a <strtol+0x1b0>
 e96:	e9 ec       	ldi	r30, 0xC9	; 201
 e98:	05 c0       	rjmp	.+10     	; 0xea4 <strtol+0x1ba>
 e9a:	2f e9       	ldi	r18, 0x9F	; 159
 e9c:	21 0f       	add	r18, r17
 e9e:	2a 31       	cpi	r18, 0x1A	; 26
 ea0:	50 f5       	brcc	.+84     	; 0xef6 <strtol+0x20c>
 ea2:	e9 ea       	ldi	r30, 0xA9	; 169
 ea4:	e1 0f       	add	r30, r17
 ea6:	2e 2f       	mov	r18, r30
 ea8:	30 e0       	ldi	r19, 0x00	; 0
 eaa:	22 15       	cp	r18, r2
 eac:	33 05       	cpc	r19, r3
 eae:	1c f5       	brge	.+70     	; 0xef6 <strtol+0x20c>
 eb0:	a7 fd       	sbrc	r26, 7
 eb2:	18 c0       	rjmp	.+48     	; 0xee4 <strtol+0x1fa>
 eb4:	46 16       	cp	r4, r22
 eb6:	57 06       	cpc	r5, r23
 eb8:	68 06       	cpc	r6, r24
 eba:	79 06       	cpc	r7, r25
 ebc:	80 f0       	brcs	.+32     	; 0xede <strtol+0x1f4>
 ebe:	29 81       	ldd	r18, Y+1	; 0x01
 ec0:	3a 81       	ldd	r19, Y+2	; 0x02
 ec2:	4b 81       	ldd	r20, Y+3	; 0x03
 ec4:	5c 81       	ldd	r21, Y+4	; 0x04
 ec6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__mulsi3>
 eca:	6e 0f       	add	r22, r30
 ecc:	71 1d       	adc	r23, r1
 ece:	81 1d       	adc	r24, r1
 ed0:	91 1d       	adc	r25, r1
 ed2:	61 30       	cpi	r22, 0x01	; 1
 ed4:	71 05       	cpc	r23, r1
 ed6:	81 05       	cpc	r24, r1
 ed8:	30 e8       	ldi	r19, 0x80	; 128
 eda:	93 07       	cpc	r25, r19
 edc:	10 f0       	brcs	.+4      	; 0xee2 <strtol+0x1f8>
 ede:	af ef       	ldi	r26, 0xFF	; 255
 ee0:	01 c0       	rjmp	.+2      	; 0xee4 <strtol+0x1fa>
 ee2:	a1 e0       	ldi	r26, 0x01	; 1
 ee4:	f6 01       	movw	r30, r12
 ee6:	14 91       	lpm	r17, Z
 ee8:	e7 fc       	sbrc	r14, 7
 eea:	10 81       	ld	r17, Z
 eec:	4f ef       	ldi	r20, 0xFF	; 255
 eee:	c4 1a       	sub	r12, r20
 ef0:	d4 0a       	sbc	r13, r20
 ef2:	e4 0a       	sbc	r14, r20
 ef4:	c8 cf       	rjmp	.-112    	; 0xe86 <strtol+0x19c>
 ef6:	20 2f       	mov	r18, r16
 ef8:	21 70       	andi	r18, 0x01	; 1
 efa:	a1 14       	cp	r10, r1
 efc:	b1 04       	cpc	r11, r1
 efe:	b1 f0       	breq	.+44     	; 0xf2c <strtol+0x242>
 f00:	aa 23       	and	r26, r26
 f02:	49 f0       	breq	.+18     	; 0xf16 <strtol+0x22c>
 f04:	51 e0       	ldi	r21, 0x01	; 1
 f06:	c5 1a       	sub	r12, r21
 f08:	d1 08       	sbc	r13, r1
 f0a:	e1 08       	sbc	r14, r1
 f0c:	f5 01       	movw	r30, r10
 f0e:	c0 82       	st	Z, r12
 f10:	d1 82       	std	Z+1, r13	; 0x01
 f12:	e2 82       	std	Z+2, r14	; 0x02
 f14:	0b c0       	rjmp	.+22     	; 0xf2c <strtol+0x242>
 f16:	01 ff       	sbrs	r16, 1
 f18:	1d c0       	rjmp	.+58     	; 0xf54 <strtol+0x26a>
 f1a:	f2 e0       	ldi	r31, 0x02	; 2
 f1c:	cf 1a       	sub	r12, r31
 f1e:	d1 08       	sbc	r13, r1
 f20:	e1 08       	sbc	r14, r1
 f22:	f5 01       	movw	r30, r10
 f24:	c0 82       	st	Z, r12
 f26:	d1 82       	std	Z+1, r13	; 0x01
 f28:	e2 82       	std	Z+2, r14	; 0x02
 f2a:	14 c0       	rjmp	.+40     	; 0xf54 <strtol+0x26a>
 f2c:	a7 ff       	sbrs	r26, 7
 f2e:	12 c0       	rjmp	.+36     	; 0xf54 <strtol+0x26a>
 f30:	22 23       	and	r18, r18
 f32:	29 f0       	breq	.+10     	; 0xf3e <strtol+0x254>
 f34:	60 e0       	ldi	r22, 0x00	; 0
 f36:	70 e0       	ldi	r23, 0x00	; 0
 f38:	80 e0       	ldi	r24, 0x00	; 0
 f3a:	90 e8       	ldi	r25, 0x80	; 128
 f3c:	04 c0       	rjmp	.+8      	; 0xf46 <strtol+0x25c>
 f3e:	6f ef       	ldi	r22, 0xFF	; 255
 f40:	7f ef       	ldi	r23, 0xFF	; 255
 f42:	8f ef       	ldi	r24, 0xFF	; 255
 f44:	9f e7       	ldi	r25, 0x7F	; 127
 f46:	22 e2       	ldi	r18, 0x22	; 34
 f48:	30 e0       	ldi	r19, 0x00	; 0
 f4a:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 f4e:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 f52:	09 c0       	rjmp	.+18     	; 0xf66 <strtol+0x27c>
 f54:	22 23       	and	r18, r18
 f56:	81 f0       	breq	.+32     	; 0xf78 <strtol+0x28e>
 f58:	90 95       	com	r25
 f5a:	80 95       	com	r24
 f5c:	70 95       	com	r23
 f5e:	61 95       	neg	r22
 f60:	7f 4f       	sbci	r23, 0xFF	; 255
 f62:	8f 4f       	sbci	r24, 0xFF	; 255
 f64:	9f 4f       	sbci	r25, 0xFF	; 255
 f66:	46 2f       	mov	r20, r22
 f68:	37 2f       	mov	r19, r23
 f6a:	28 2f       	mov	r18, r24
 f6c:	12 c0       	rjmp	.+36     	; 0xf92 <strtol+0x2a8>
 f6e:	40 e0       	ldi	r20, 0x00	; 0
 f70:	30 e0       	ldi	r19, 0x00	; 0
 f72:	20 e0       	ldi	r18, 0x00	; 0
 f74:	90 e0       	ldi	r25, 0x00	; 0
 f76:	0d c0       	rjmp	.+26     	; 0xf92 <strtol+0x2a8>
 f78:	97 ff       	sbrs	r25, 7
 f7a:	f5 cf       	rjmp	.-22     	; 0xf66 <strtol+0x27c>
 f7c:	82 e2       	ldi	r24, 0x22	; 34
 f7e:	90 e0       	ldi	r25, 0x00	; 0
 f80:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 f84:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 f88:	6f ef       	ldi	r22, 0xFF	; 255
 f8a:	7f ef       	ldi	r23, 0xFF	; 255
 f8c:	8f ef       	ldi	r24, 0xFF	; 255
 f8e:	9f e7       	ldi	r25, 0x7F	; 127
 f90:	ea cf       	rjmp	.-44     	; 0xf66 <strtol+0x27c>
 f92:	64 2f       	mov	r22, r20
 f94:	73 2f       	mov	r23, r19
 f96:	82 2f       	mov	r24, r18
 f98:	26 96       	adiw	r28, 0x06	; 6
 f9a:	0f b6       	in	r0, 0x3f	; 63
 f9c:	f8 94       	cli
 f9e:	de bf       	out	0x3e, r29	; 62
 fa0:	0f be       	out	0x3f, r0	; 63
 fa2:	cd bf       	out	0x3d, r28	; 61
 fa4:	df 91       	pop	r29
 fa6:	cf 91       	pop	r28
 fa8:	1f 91       	pop	r17
 faa:	0f 91       	pop	r16
 fac:	ef 90       	pop	r14
 fae:	df 90       	pop	r13
 fb0:	cf 90       	pop	r12
 fb2:	bf 90       	pop	r11
 fb4:	af 90       	pop	r10
 fb6:	8f 90       	pop	r8
 fb8:	7f 90       	pop	r7
 fba:	6f 90       	pop	r6
 fbc:	5f 90       	pop	r5
 fbe:	4f 90       	pop	r4
 fc0:	3f 90       	pop	r3
 fc2:	2f 90       	pop	r2
 fc4:	08 95       	ret

Disassembly of section .text.avrlibc:

00001468 <__ftoa_engine>:
    1468:	28 30       	cpi	r18, 0x08	; 8
    146a:	08 f0       	brcs	.+2      	; 0x146e <__ftoa_engine+0x6>
    146c:	27 e0       	ldi	r18, 0x07	; 7
    146e:	33 27       	eor	r19, r19
    1470:	da 01       	movw	r26, r20
    1472:	99 0f       	add	r25, r25
    1474:	31 1d       	adc	r19, r1
    1476:	87 fd       	sbrc	r24, 7
    1478:	91 60       	ori	r25, 0x01	; 1
    147a:	00 96       	adiw	r24, 0x00	; 0
    147c:	61 05       	cpc	r22, r1
    147e:	71 05       	cpc	r23, r1
    1480:	39 f4       	brne	.+14     	; 0x1490 <__ftoa_engine+0x28>
    1482:	32 60       	ori	r19, 0x02	; 2
    1484:	2e 5f       	subi	r18, 0xFE	; 254
    1486:	3d 93       	st	X+, r19
    1488:	30 e3       	ldi	r19, 0x30	; 48
    148a:	2a 95       	dec	r18
    148c:	e1 f7       	brne	.-8      	; 0x1486 <__ftoa_engine+0x1e>
    148e:	08 95       	ret
    1490:	9f 3f       	cpi	r25, 0xFF	; 255
    1492:	30 f0       	brcs	.+12     	; 0x14a0 <__ftoa_engine+0x38>
    1494:	80 38       	cpi	r24, 0x80	; 128
    1496:	71 05       	cpc	r23, r1
    1498:	61 05       	cpc	r22, r1
    149a:	09 f0       	breq	.+2      	; 0x149e <__ftoa_engine+0x36>
    149c:	3c 5f       	subi	r19, 0xFC	; 252
    149e:	3c 5f       	subi	r19, 0xFC	; 252
    14a0:	3d 93       	st	X+, r19
    14a2:	91 30       	cpi	r25, 0x01	; 1
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <__ftoa_engine+0x40>
    14a6:	80 68       	ori	r24, 0x80	; 128
    14a8:	91 1d       	adc	r25, r1
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	1f 93       	push	r17
    14b0:	0f 93       	push	r16
    14b2:	ff 92       	push	r15
    14b4:	ef 92       	push	r14
    14b6:	19 2f       	mov	r17, r25
    14b8:	98 7f       	andi	r25, 0xF8	; 248
    14ba:	96 95       	lsr	r25
    14bc:	e9 2f       	mov	r30, r25
    14be:	96 95       	lsr	r25
    14c0:	96 95       	lsr	r25
    14c2:	e9 0f       	add	r30, r25
    14c4:	ff 27       	eor	r31, r31
    14c6:	e0 50       	subi	r30, 0x00	; 0
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	99 27       	eor	r25, r25
    14cc:	33 27       	eor	r19, r19
    14ce:	ee 24       	eor	r14, r14
    14d0:	ff 24       	eor	r15, r15
    14d2:	a7 01       	movw	r20, r14
    14d4:	e7 01       	movw	r28, r14
    14d6:	05 90       	lpm	r0, Z+
    14d8:	08 94       	sec
    14da:	07 94       	ror	r0
    14dc:	28 f4       	brcc	.+10     	; 0x14e8 <__ftoa_engine+0x80>
    14de:	36 0f       	add	r19, r22
    14e0:	e7 1e       	adc	r14, r23
    14e2:	f8 1e       	adc	r15, r24
    14e4:	49 1f       	adc	r20, r25
    14e6:	51 1d       	adc	r21, r1
    14e8:	66 0f       	add	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	88 1f       	adc	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	06 94       	lsr	r0
    14f2:	a1 f7       	brne	.-24     	; 0x14dc <__ftoa_engine+0x74>
    14f4:	05 90       	lpm	r0, Z+
    14f6:	07 94       	ror	r0
    14f8:	28 f4       	brcc	.+10     	; 0x1504 <__ftoa_engine+0x9c>
    14fa:	e7 0e       	add	r14, r23
    14fc:	f8 1e       	adc	r15, r24
    14fe:	49 1f       	adc	r20, r25
    1500:	56 1f       	adc	r21, r22
    1502:	c1 1d       	adc	r28, r1
    1504:	77 0f       	add	r23, r23
    1506:	88 1f       	adc	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	66 1f       	adc	r22, r22
    150c:	06 94       	lsr	r0
    150e:	a1 f7       	brne	.-24     	; 0x14f8 <__ftoa_engine+0x90>
    1510:	05 90       	lpm	r0, Z+
    1512:	07 94       	ror	r0
    1514:	28 f4       	brcc	.+10     	; 0x1520 <__ftoa_engine+0xb8>
    1516:	f8 0e       	add	r15, r24
    1518:	49 1f       	adc	r20, r25
    151a:	56 1f       	adc	r21, r22
    151c:	c7 1f       	adc	r28, r23
    151e:	d1 1d       	adc	r29, r1
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	66 1f       	adc	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	06 94       	lsr	r0
    152a:	a1 f7       	brne	.-24     	; 0x1514 <__ftoa_engine+0xac>
    152c:	05 90       	lpm	r0, Z+
    152e:	07 94       	ror	r0
    1530:	20 f4       	brcc	.+8      	; 0x153a <__ftoa_engine+0xd2>
    1532:	49 0f       	add	r20, r25
    1534:	56 1f       	adc	r21, r22
    1536:	c7 1f       	adc	r28, r23
    1538:	d8 1f       	adc	r29, r24
    153a:	99 0f       	add	r25, r25
    153c:	66 1f       	adc	r22, r22
    153e:	77 1f       	adc	r23, r23
    1540:	88 1f       	adc	r24, r24
    1542:	06 94       	lsr	r0
    1544:	a9 f7       	brne	.-22     	; 0x1530 <__ftoa_engine+0xc8>
    1546:	84 91       	lpm	r24, Z
    1548:	10 95       	com	r17
    154a:	17 70       	andi	r17, 0x07	; 7
    154c:	41 f0       	breq	.+16     	; 0x155e <__ftoa_engine+0xf6>
    154e:	d6 95       	lsr	r29
    1550:	c7 95       	ror	r28
    1552:	57 95       	ror	r21
    1554:	47 95       	ror	r20
    1556:	f7 94       	ror	r15
    1558:	e7 94       	ror	r14
    155a:	1a 95       	dec	r17
    155c:	c1 f7       	brne	.-16     	; 0x154e <__ftoa_engine+0xe6>
    155e:	e6 ea       	ldi	r30, 0xA6	; 166
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	68 94       	set
    1564:	15 90       	lpm	r1, Z+
    1566:	15 91       	lpm	r17, Z+
    1568:	35 91       	lpm	r19, Z+
    156a:	65 91       	lpm	r22, Z+
    156c:	95 91       	lpm	r25, Z+
    156e:	05 90       	lpm	r0, Z+
    1570:	7f e2       	ldi	r23, 0x2F	; 47
    1572:	73 95       	inc	r23
    1574:	e1 18       	sub	r14, r1
    1576:	f1 0a       	sbc	r15, r17
    1578:	43 0b       	sbc	r20, r19
    157a:	56 0b       	sbc	r21, r22
    157c:	c9 0b       	sbc	r28, r25
    157e:	d0 09       	sbc	r29, r0
    1580:	c0 f7       	brcc	.-16     	; 0x1572 <__ftoa_engine+0x10a>
    1582:	e1 0c       	add	r14, r1
    1584:	f1 1e       	adc	r15, r17
    1586:	43 1f       	adc	r20, r19
    1588:	56 1f       	adc	r21, r22
    158a:	c9 1f       	adc	r28, r25
    158c:	d0 1d       	adc	r29, r0
    158e:	7e f4       	brtc	.+30     	; 0x15ae <__ftoa_engine+0x146>
    1590:	70 33       	cpi	r23, 0x30	; 48
    1592:	11 f4       	brne	.+4      	; 0x1598 <__ftoa_engine+0x130>
    1594:	8a 95       	dec	r24
    1596:	e6 cf       	rjmp	.-52     	; 0x1564 <__ftoa_engine+0xfc>
    1598:	e8 94       	clt
    159a:	01 50       	subi	r16, 0x01	; 1
    159c:	30 f0       	brcs	.+12     	; 0x15aa <__ftoa_engine+0x142>
    159e:	08 0f       	add	r16, r24
    15a0:	0a f4       	brpl	.+2      	; 0x15a4 <__ftoa_engine+0x13c>
    15a2:	00 27       	eor	r16, r16
    15a4:	02 17       	cp	r16, r18
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <__ftoa_engine+0x142>
    15a8:	20 2f       	mov	r18, r16
    15aa:	23 95       	inc	r18
    15ac:	02 2f       	mov	r16, r18
    15ae:	7a 33       	cpi	r23, 0x3A	; 58
    15b0:	28 f0       	brcs	.+10     	; 0x15bc <__ftoa_engine+0x154>
    15b2:	79 e3       	ldi	r23, 0x39	; 57
    15b4:	7d 93       	st	X+, r23
    15b6:	2a 95       	dec	r18
    15b8:	e9 f7       	brne	.-6      	; 0x15b4 <__ftoa_engine+0x14c>
    15ba:	10 c0       	rjmp	.+32     	; 0x15dc <__ftoa_engine+0x174>
    15bc:	7d 93       	st	X+, r23
    15be:	2a 95       	dec	r18
    15c0:	89 f6       	brne	.-94     	; 0x1564 <__ftoa_engine+0xfc>
    15c2:	06 94       	lsr	r0
    15c4:	97 95       	ror	r25
    15c6:	67 95       	ror	r22
    15c8:	37 95       	ror	r19
    15ca:	17 95       	ror	r17
    15cc:	17 94       	ror	r1
    15ce:	e1 18       	sub	r14, r1
    15d0:	f1 0a       	sbc	r15, r17
    15d2:	43 0b       	sbc	r20, r19
    15d4:	56 0b       	sbc	r21, r22
    15d6:	c9 0b       	sbc	r28, r25
    15d8:	d0 09       	sbc	r29, r0
    15da:	98 f0       	brcs	.+38     	; 0x1602 <__ftoa_engine+0x19a>
    15dc:	23 95       	inc	r18
    15de:	7e 91       	ld	r23, -X
    15e0:	73 95       	inc	r23
    15e2:	7a 33       	cpi	r23, 0x3A	; 58
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <__ftoa_engine+0x180>
    15e6:	70 e3       	ldi	r23, 0x30	; 48
    15e8:	7c 93       	st	X, r23
    15ea:	20 13       	cpse	r18, r16
    15ec:	b8 f7       	brcc	.-18     	; 0x15dc <__ftoa_engine+0x174>
    15ee:	7e 91       	ld	r23, -X
    15f0:	70 61       	ori	r23, 0x10	; 16
    15f2:	7d 93       	st	X+, r23
    15f4:	30 f0       	brcs	.+12     	; 0x1602 <__ftoa_engine+0x19a>
    15f6:	83 95       	inc	r24
    15f8:	71 e3       	ldi	r23, 0x31	; 49
    15fa:	7d 93       	st	X+, r23
    15fc:	70 e3       	ldi	r23, 0x30	; 48
    15fe:	2a 95       	dec	r18
    1600:	e1 f7       	brne	.-8      	; 0x15fa <__ftoa_engine+0x192>
    1602:	11 24       	eor	r1, r1
    1604:	ef 90       	pop	r14
    1606:	ff 90       	pop	r15
    1608:	0f 91       	pop	r16
    160a:	1f 91       	pop	r17
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	99 27       	eor	r25, r25
    1612:	87 fd       	sbrc	r24, 7
    1614:	90 95       	com	r25
    1616:	08 95       	ret

Disassembly of section .text.avrlibc:

00003eae <isspace>:
    3eae:	91 11       	cpse	r25, r1
    3eb0:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__ctype_isfalse>
    3eb4:	80 32       	cpi	r24, 0x20	; 32
    3eb6:	19 f0       	breq	.+6      	; 0x3ebe <isspace+0x10>
    3eb8:	89 50       	subi	r24, 0x09	; 9
    3eba:	85 50       	subi	r24, 0x05	; 5
    3ebc:	c8 f7       	brcc	.-14     	; 0x3eb0 <isspace+0x2>
    3ebe:	08 95       	ret

Disassembly of section .text.avrlibc:

00003904 <memcpy>:
    3904:	cf 92       	push	r12
    3906:	df 92       	push	r13
    3908:	ef 92       	push	r14
    390a:	dc 01       	movw	r26, r24
    390c:	6a 01       	movw	r12, r20
    390e:	e6 2e       	mov	r14, r22
    3910:	28 0f       	add	r18, r24
    3912:	39 1f       	adc	r19, r25
    3914:	a2 17       	cp	r26, r18
    3916:	b3 07       	cpc	r27, r19
    3918:	51 f0       	breq	.+20     	; 0x392e <memcpy+0x2a>
    391a:	f6 01       	movw	r30, r12
    391c:	44 91       	lpm	r20, Z
    391e:	e7 fc       	sbrc	r14, 7
    3920:	40 81       	ld	r20, Z
    3922:	4d 93       	st	X+, r20
    3924:	4f ef       	ldi	r20, 0xFF	; 255
    3926:	c4 1a       	sub	r12, r20
    3928:	d4 0a       	sbc	r13, r20
    392a:	e4 0a       	sbc	r14, r20
    392c:	f3 cf       	rjmp	.-26     	; 0x3914 <memcpy+0x10>
    392e:	ef 90       	pop	r14
    3930:	df 90       	pop	r13
    3932:	cf 90       	pop	r12
    3934:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a52 <strcat>:
    3a52:	9a 01       	movw	r18, r20
    3a54:	46 2f       	mov	r20, r22
    3a56:	dc 01       	movw	r26, r24
    3a58:	bd 01       	movw	r22, r26
    3a5a:	6f 5f       	subi	r22, 0xFF	; 255
    3a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5e:	5c 91       	ld	r21, X
    3a60:	55 23       	and	r21, r21
    3a62:	11 f0       	breq	.+4      	; 0x3a68 <strcat+0x16>
    3a64:	db 01       	movw	r26, r22
    3a66:	f8 cf       	rjmp	.-16     	; 0x3a58 <strcat+0x6>
    3a68:	f9 01       	movw	r30, r18
    3a6a:	54 91       	lpm	r21, Z
    3a6c:	47 fd       	sbrc	r20, 7
    3a6e:	50 81       	ld	r21, Z
    3a70:	5d 93       	st	X+, r21
    3a72:	55 23       	and	r21, r21
    3a74:	21 f0       	breq	.+8      	; 0x3a7e <strcat+0x2c>
    3a76:	2f 5f       	subi	r18, 0xFF	; 255
    3a78:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a7c:	f5 cf       	rjmp	.-22     	; 0x3a68 <strcat+0x16>
    3a7e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003546 <strcmp>:
    3546:	cf 92       	push	r12
    3548:	df 92       	push	r13
    354a:	ef 92       	push	r14
    354c:	6b 01       	movw	r12, r22
    354e:	e8 2e       	mov	r14, r24
    3550:	f6 01       	movw	r30, r12
    3552:	84 91       	lpm	r24, Z
    3554:	e7 fc       	sbrc	r14, 7
    3556:	80 81       	ld	r24, Z
    3558:	f9 01       	movw	r30, r18
    355a:	54 91       	lpm	r21, Z
    355c:	47 fd       	sbrc	r20, 7
    355e:	50 81       	ld	r21, Z
    3560:	85 13       	cpse	r24, r21
    3562:	0b c0       	rjmp	.+22     	; 0x357a <strcmp+0x34>
    3564:	88 23       	and	r24, r24
    3566:	41 f0       	breq	.+16     	; 0x3578 <strcmp+0x32>
    3568:	8f ef       	ldi	r24, 0xFF	; 255
    356a:	c8 1a       	sub	r12, r24
    356c:	d8 0a       	sbc	r13, r24
    356e:	e8 0a       	sbc	r14, r24
    3570:	2f 5f       	subi	r18, 0xFF	; 255
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	4f 4f       	sbci	r20, 0xFF	; 255
    3576:	ec cf       	rjmp	.-40     	; 0x3550 <strcmp+0xa>
    3578:	58 2f       	mov	r21, r24
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	85 1b       	sub	r24, r21
    357e:	91 09       	sbc	r25, r1
    3580:	ef 90       	pop	r14
    3582:	df 90       	pop	r13
    3584:	cf 90       	pop	r12
    3586:	08 95       	ret

Disassembly of section .text.avrlibc:

00002bfc <strncmp>:
    2bfc:	cf 92       	push	r12
    2bfe:	df 92       	push	r13
    2c00:	ef 92       	push	r14
    2c02:	0f 93       	push	r16
    2c04:	1f 93       	push	r17
    2c06:	6b 01       	movw	r12, r22
    2c08:	e8 2e       	mov	r14, r24
    2c0a:	01 15       	cp	r16, r1
    2c0c:	11 05       	cpc	r17, r1
    2c0e:	19 f1       	breq	.+70     	; 0x2c56 <strncmp+0x5a>
    2c10:	01 50       	subi	r16, 0x01	; 1
    2c12:	11 09       	sbc	r17, r1
    2c14:	f6 01       	movw	r30, r12
    2c16:	84 91       	lpm	r24, Z
    2c18:	e7 fc       	sbrc	r14, 7
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 23       	and	r24, r24
    2c1e:	99 f0       	breq	.+38     	; 0x2c46 <strncmp+0x4a>
    2c20:	f9 01       	movw	r30, r18
    2c22:	94 91       	lpm	r25, Z
    2c24:	47 fd       	sbrc	r20, 7
    2c26:	90 81       	ld	r25, Z
    2c28:	99 23       	and	r25, r25
    2c2a:	69 f0       	breq	.+26     	; 0x2c46 <strncmp+0x4a>
    2c2c:	01 15       	cp	r16, r1
    2c2e:	11 05       	cpc	r17, r1
    2c30:	51 f0       	breq	.+20     	; 0x2c46 <strncmp+0x4a>
    2c32:	89 13       	cpse	r24, r25
    2c34:	08 c0       	rjmp	.+16     	; 0x2c46 <strncmp+0x4a>
    2c36:	8f ef       	ldi	r24, 0xFF	; 255
    2c38:	c8 1a       	sub	r12, r24
    2c3a:	d8 0a       	sbc	r13, r24
    2c3c:	e8 0a       	sbc	r14, r24
    2c3e:	2f 5f       	subi	r18, 0xFF	; 255
    2c40:	3f 4f       	sbci	r19, 0xFF	; 255
    2c42:	4f 4f       	sbci	r20, 0xFF	; 255
    2c44:	e5 cf       	rjmp	.-54     	; 0x2c10 <strncmp+0x14>
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	f9 01       	movw	r30, r18
    2c4a:	24 91       	lpm	r18, Z
    2c4c:	47 fd       	sbrc	r20, 7
    2c4e:	20 81       	ld	r18, Z
    2c50:	82 1b       	sub	r24, r18
    2c52:	91 09       	sbc	r25, r1
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <strncmp+0x5e>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a80 <strlen>:
    3a80:	cf 92       	push	r12
    3a82:	df 92       	push	r13
    3a84:	ef 92       	push	r14
    3a86:	6b 01       	movw	r12, r22
    3a88:	e8 2e       	mov	r14, r24
    3a8a:	a8 2f       	mov	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	fc 01       	movw	r30, r24
    3a90:	24 91       	lpm	r18, Z
    3a92:	a7 fd       	sbrc	r26, 7
    3a94:	20 81       	ld	r18, Z
    3a96:	22 23       	and	r18, r18
    3a98:	19 f0       	breq	.+6      	; 0x3aa0 <strlen+0x20>
    3a9a:	01 96       	adiw	r24, 0x01	; 1
    3a9c:	a1 1d       	adc	r26, r1
    3a9e:	f7 cf       	rjmp	.-18     	; 0x3a8e <strlen+0xe>
    3aa0:	8c 19       	sub	r24, r12
    3aa2:	9d 09       	sbc	r25, r13
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	cf 90       	pop	r12
    3aaa:	08 95       	ret

Disassembly of section .text.avrlibc:

00003cfc <strcpy>:
    3cfc:	9a 01       	movw	r18, r20
    3cfe:	46 2f       	mov	r20, r22
    3d00:	dc 01       	movw	r26, r24
    3d02:	f9 01       	movw	r30, r18
    3d04:	54 91       	lpm	r21, Z
    3d06:	47 fd       	sbrc	r20, 7
    3d08:	50 81       	ld	r21, Z
    3d0a:	5d 93       	st	X+, r21
    3d0c:	55 23       	and	r21, r21
    3d0e:	21 f0       	breq	.+8      	; 0x3d18 <strcpy+0x1c>
    3d10:	2f 5f       	subi	r18, 0xFF	; 255
    3d12:	3f 4f       	sbci	r19, 0xFF	; 255
    3d14:	4f 4f       	sbci	r20, 0xFF	; 255
    3d16:	f5 cf       	rjmp	.-22     	; 0x3d02 <strcpy+0x6>
    3d18:	08 95       	ret

Disassembly of section .text.avrlibc:

00003836 <strnlen>:
    3836:	cf 92       	push	r12
    3838:	df 92       	push	r13
    383a:	ef 92       	push	r14
    383c:	6b 01       	movw	r12, r22
    383e:	e8 2e       	mov	r14, r24
    3840:	a8 2f       	mov	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	41 15       	cp	r20, r1
    3846:	51 05       	cpc	r21, r1
    3848:	31 f4       	brne	.+12     	; 0x3856 <strnlen+0x20>
    384a:	8c 19       	sub	r24, r12
    384c:	9d 09       	sbc	r25, r13
    384e:	ef 90       	pop	r14
    3850:	df 90       	pop	r13
    3852:	cf 90       	pop	r12
    3854:	08 95       	ret
    3856:	fc 01       	movw	r30, r24
    3858:	24 91       	lpm	r18, Z
    385a:	a7 fd       	sbrc	r26, 7
    385c:	20 81       	ld	r18, Z
    385e:	22 23       	and	r18, r18
    3860:	a1 f3       	breq	.-24     	; 0x384a <strnlen+0x14>
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	a1 1d       	adc	r26, r1
    3866:	41 50       	subi	r20, 0x01	; 1
    3868:	51 09       	sbc	r21, r1
    386a:	ec cf       	rjmp	.-40     	; 0x3844 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000029c6 <fputc>:
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	fb 01       	movw	r30, r22
    29d0:	24 81       	ldd	r18, Z+4	; 0x04
    29d2:	21 fd       	sbrc	r18, 1
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <fputc+0x16>
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	9f ef       	ldi	r25, 0xFF	; 255
    29da:	2c c0       	rjmp	.+88     	; 0x2a34 <fputc+0x6e>
    29dc:	22 ff       	sbrs	r18, 2
    29de:	16 c0       	rjmp	.+44     	; 0x2a0c <fputc+0x46>
    29e0:	47 81       	ldd	r20, Z+7	; 0x07
    29e2:	50 85       	ldd	r21, Z+8	; 0x08
    29e4:	25 81       	ldd	r18, Z+5	; 0x05
    29e6:	36 81       	ldd	r19, Z+6	; 0x06
    29e8:	42 17       	cp	r20, r18
    29ea:	53 07       	cpc	r21, r19
    29ec:	44 f4       	brge	.+16     	; 0x29fe <fputc+0x38>
    29ee:	a0 81       	ld	r26, Z
    29f0:	b1 81       	ldd	r27, Z+1	; 0x01
    29f2:	9d 01       	movw	r18, r26
    29f4:	2f 5f       	subi	r18, 0xFF	; 255
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	31 83       	std	Z+1, r19	; 0x01
    29fa:	20 83       	st	Z, r18
    29fc:	8c 93       	st	X, r24
    29fe:	27 81       	ldd	r18, Z+7	; 0x07
    2a00:	30 85       	ldd	r19, Z+8	; 0x08
    2a02:	2f 5f       	subi	r18, 0xFF	; 255
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	30 87       	std	Z+8, r19	; 0x08
    2a08:	27 83       	std	Z+7, r18	; 0x07
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <fputc+0x6e>
    2a0c:	8b 01       	movw	r16, r22
    2a0e:	ec 01       	movw	r28, r24
    2a10:	fb 01       	movw	r30, r22
    2a12:	01 84       	ldd	r0, Z+9	; 0x09
    2a14:	f2 85       	ldd	r31, Z+10	; 0x0a
    2a16:	e0 2d       	mov	r30, r0
    2a18:	09 95       	icall
    2a1a:	89 2b       	or	r24, r25
    2a1c:	e1 f6       	brne	.-72     	; 0x29d6 <fputc+0x10>
    2a1e:	d8 01       	movw	r26, r16
    2a20:	17 96       	adiw	r26, 0x07	; 7
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	18 97       	sbiw	r26, 0x08	; 8
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	18 96       	adiw	r26, 0x08	; 8
    2a2c:	9c 93       	st	X, r25
    2a2e:	8e 93       	st	-X, r24
    2a30:	17 97       	sbiw	r26, 0x07	; 7
    2a32:	ce 01       	movw	r24, r28
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	08 95       	ret

Disassembly of section .text.avrlibc:

000033f2 <sprintf>:
    33f2:	af e0       	ldi	r26, 0x0F	; 15
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	ef ef       	ldi	r30, 0xFF	; 255
    33f8:	f9 e1       	ldi	r31, 0x19	; 25
    33fa:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__prologue_saves__+0x1c>
    33fe:	0e 89       	ldd	r16, Y+22	; 0x16
    3400:	1f 89       	ldd	r17, Y+23	; 0x17
    3402:	86 e0       	ldi	r24, 0x06	; 6
    3404:	8d 83       	std	Y+5, r24	; 0x05
    3406:	1a 83       	std	Y+2, r17	; 0x02
    3408:	09 83       	std	Y+1, r16	; 0x01
    340a:	8f ef       	ldi	r24, 0xFF	; 255
    340c:	9f e7       	ldi	r25, 0x7F	; 127
    340e:	9f 83       	std	Y+7, r25	; 0x07
    3410:	8e 83       	std	Y+6, r24	; 0x06
    3412:	9e 01       	movw	r18, r28
    3414:	25 5e       	subi	r18, 0xE5	; 229
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	48 8d       	ldd	r20, Y+24	; 0x18
    341a:	59 8d       	ldd	r21, Y+25	; 0x19
    341c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    341e:	ce 01       	movw	r24, r28
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vfprintf>
    3426:	e8 85       	ldd	r30, Y+8	; 0x08
    3428:	f9 85       	ldd	r31, Y+9	; 0x09
    342a:	e0 0f       	add	r30, r16
    342c:	f1 1f       	adc	r31, r17
    342e:	10 82       	st	Z, r1
    3430:	2f 96       	adiw	r28, 0x0f	; 15
    3432:	e4 e0       	ldi	r30, 0x04	; 4
    3434:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000021d2 <__ultoa_invert>:
    21d2:	fa 01       	movw	r30, r20
    21d4:	aa 27       	eor	r26, r26
    21d6:	28 30       	cpi	r18, 0x08	; 8
    21d8:	51 f1       	breq	.+84     	; 0x222e <__ultoa_invert+0x5c>
    21da:	20 31       	cpi	r18, 0x10	; 16
    21dc:	81 f1       	breq	.+96     	; 0x223e <__ultoa_invert+0x6c>
    21de:	e8 94       	clt
    21e0:	6f 93       	push	r22
    21e2:	6e 7f       	andi	r22, 0xFE	; 254
    21e4:	6e 5f       	subi	r22, 0xFE	; 254
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	af 4f       	sbci	r26, 0xFF	; 255
    21ee:	b1 e0       	ldi	r27, 0x01	; 1
    21f0:	3e d0       	rcall	.+124    	; 0x226e <__ultoa_invert+0x9c>
    21f2:	b4 e0       	ldi	r27, 0x04	; 4
    21f4:	3c d0       	rcall	.+120    	; 0x226e <__ultoa_invert+0x9c>
    21f6:	67 0f       	add	r22, r23
    21f8:	78 1f       	adc	r23, r24
    21fa:	89 1f       	adc	r24, r25
    21fc:	9a 1f       	adc	r25, r26
    21fe:	a1 1d       	adc	r26, r1
    2200:	68 0f       	add	r22, r24
    2202:	79 1f       	adc	r23, r25
    2204:	8a 1f       	adc	r24, r26
    2206:	91 1d       	adc	r25, r1
    2208:	a1 1d       	adc	r26, r1
    220a:	6a 0f       	add	r22, r26
    220c:	71 1d       	adc	r23, r1
    220e:	81 1d       	adc	r24, r1
    2210:	91 1d       	adc	r25, r1
    2212:	a1 1d       	adc	r26, r1
    2214:	20 d0       	rcall	.+64     	; 0x2256 <__ultoa_invert+0x84>
    2216:	09 f4       	brne	.+2      	; 0x221a <__ultoa_invert+0x48>
    2218:	68 94       	set
    221a:	3f 91       	pop	r19
    221c:	2a e0       	ldi	r18, 0x0A	; 10
    221e:	26 9f       	mul	r18, r22
    2220:	11 24       	eor	r1, r1
    2222:	30 19       	sub	r19, r0
    2224:	30 5d       	subi	r19, 0xD0	; 208
    2226:	31 93       	st	Z+, r19
    2228:	de f6       	brtc	.-74     	; 0x21e0 <__ultoa_invert+0xe>
    222a:	cf 01       	movw	r24, r30
    222c:	08 95       	ret
    222e:	46 2f       	mov	r20, r22
    2230:	47 70       	andi	r20, 0x07	; 7
    2232:	40 5d       	subi	r20, 0xD0	; 208
    2234:	41 93       	st	Z+, r20
    2236:	b3 e0       	ldi	r27, 0x03	; 3
    2238:	0f d0       	rcall	.+30     	; 0x2258 <__ultoa_invert+0x86>
    223a:	c9 f7       	brne	.-14     	; 0x222e <__ultoa_invert+0x5c>
    223c:	f6 cf       	rjmp	.-20     	; 0x222a <__ultoa_invert+0x58>
    223e:	46 2f       	mov	r20, r22
    2240:	4f 70       	andi	r20, 0x0F	; 15
    2242:	40 5d       	subi	r20, 0xD0	; 208
    2244:	4a 33       	cpi	r20, 0x3A	; 58
    2246:	18 f0       	brcs	.+6      	; 0x224e <__ultoa_invert+0x7c>
    2248:	49 5d       	subi	r20, 0xD9	; 217
    224a:	31 fd       	sbrc	r19, 1
    224c:	40 52       	subi	r20, 0x20	; 32
    224e:	41 93       	st	Z+, r20
    2250:	02 d0       	rcall	.+4      	; 0x2256 <__ultoa_invert+0x84>
    2252:	a9 f7       	brne	.-22     	; 0x223e <__ultoa_invert+0x6c>
    2254:	ea cf       	rjmp	.-44     	; 0x222a <__ultoa_invert+0x58>
    2256:	b4 e0       	ldi	r27, 0x04	; 4
    2258:	a6 95       	lsr	r26
    225a:	97 95       	ror	r25
    225c:	87 95       	ror	r24
    225e:	77 95       	ror	r23
    2260:	67 95       	ror	r22
    2262:	ba 95       	dec	r27
    2264:	c9 f7       	brne	.-14     	; 0x2258 <__ultoa_invert+0x86>
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	61 05       	cpc	r22, r1
    226a:	71 05       	cpc	r23, r1
    226c:	08 95       	ret
    226e:	9b 01       	movw	r18, r22
    2270:	ac 01       	movw	r20, r24
    2272:	0a 2e       	mov	r0, r26
    2274:	06 94       	lsr	r0
    2276:	57 95       	ror	r21
    2278:	47 95       	ror	r20
    227a:	37 95       	ror	r19
    227c:	27 95       	ror	r18
    227e:	ba 95       	dec	r27
    2280:	c9 f7       	brne	.-14     	; 0x2274 <__ultoa_invert+0xa2>
    2282:	62 0f       	add	r22, r18
    2284:	73 1f       	adc	r23, r19
    2286:	84 1f       	adc	r24, r20
    2288:	95 1f       	adc	r25, r21
    228a:	a0 1d       	adc	r26, r0
    228c:	08 95       	ret

Disassembly of section .text.avrlibc:

000040e4 <__ctype_isfalse>:
    40e4:	99 27       	eor	r25, r25
    40e6:	88 27       	eor	r24, r24

000040e8 <__ctype_istrue>:
    40e8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003b98 <eeprom_read_block>:
    3b98:	ba 01       	movw	r22, r20
    3b9a:	a9 01       	movw	r20, r18
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22

00003ba0 <eeprom_read_blraw>:
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	f9 99       	sbic	0x1f, 1	; 31
    3ba4:	fe cf       	rjmp	.-4      	; 0x3ba2 <eeprom_read_blraw+0x2>
    3ba6:	06 c0       	rjmp	.+12     	; 0x3bb4 <eeprom_read_blraw+0x14>
    3ba8:	f2 bd       	out	0x22, r31	; 34
    3baa:	e1 bd       	out	0x21, r30	; 33
    3bac:	f8 9a       	sbi	0x1f, 0	; 31
    3bae:	31 96       	adiw	r30, 0x01	; 1
    3bb0:	00 b4       	in	r0, 0x20	; 32
    3bb2:	0d 92       	st	X+, r0
    3bb4:	41 50       	subi	r20, 0x01	; 1
    3bb6:	50 40       	sbci	r21, 0x00	; 0
    3bb8:	b8 f7       	brcc	.-18     	; 0x3ba8 <eeprom_read_blraw+0x8>
    3bba:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ec0 <eeprom_read_byte>:
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	f9 99       	sbic	0x1f, 1	; 31
    3ec4:	fe cf       	rjmp	.-4      	; 0x3ec2 <eeprom_read_byte+0x2>
    3ec6:	92 bd       	out	0x22, r25	; 34
    3ec8:	81 bd       	out	0x21, r24	; 33
    3eca:	f8 9a       	sbi	0x1f, 0	; 31
    3ecc:	99 27       	eor	r25, r25
    3ece:	80 b5       	in	r24, 0x20	; 32
    3ed0:	08 95       	ret

Disassembly of section .text.avrlibc:

00003fd2 <eeprom_read_dword>:
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	a6 e1       	ldi	r26, 0x16	; 22
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	44 e0       	ldi	r20, 0x04	; 4
    3fda:	50 e0       	ldi	r21, 0x00	; 0
    3fdc:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003fe0 <eeprom_read_word>:
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	a8 e1       	ldi	r26, 0x18	; 24
    3fe4:	b0 e0       	ldi	r27, 0x00	; 0
    3fe6:	42 e0       	ldi	r20, 0x02	; 2
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000347c <eeprom_update_block>:
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	21 50       	subi	r18, 0x01	; 1
    3484:	31 09       	sbc	r19, r1
    3486:	c0 f0       	brcs	.+48     	; 0x34b8 <eeprom_update_block+0x3c>
    3488:	6b 01       	movw	r12, r22
    348a:	e8 2e       	mov	r14, r24
    348c:	c2 0e       	add	r12, r18
    348e:	d3 1e       	adc	r13, r19
    3490:	e1 1c       	adc	r14, r1
    3492:	ca 01       	movw	r24, r20
    3494:	82 0f       	add	r24, r18
    3496:	93 1f       	adc	r25, r19
    3498:	42 2f       	mov	r20, r18
    349a:	73 2f       	mov	r23, r19
    349c:	f6 01       	movw	r30, r12
    349e:	5e 2d       	mov	r21, r14
    34a0:	0e 94 42 20 	call	0x4084	; 0x4084 <__xload_1>
    34a4:	26 2f       	mov	r18, r22
    34a6:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <eeprom_update_r18>
    34aa:	31 e0       	ldi	r19, 0x01	; 1
    34ac:	c3 1a       	sub	r12, r19
    34ae:	d1 08       	sbc	r13, r1
    34b0:	e1 08       	sbc	r14, r1
    34b2:	41 50       	subi	r20, 0x01	; 1
    34b4:	70 40       	sbci	r23, 0x00	; 0
    34b6:	90 f7       	brcc	.-28     	; 0x349c <eeprom_update_block+0x20>
    34b8:	ef 90       	pop	r14
    34ba:	df 90       	pop	r13
    34bc:	cf 90       	pop	r12
    34be:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bbc <eeprom_update_byte>:
    3bbc:	26 2f       	mov	r18, r22

00003bbe <eeprom_update_r18>:
    3bbe:	f9 99       	sbic	0x1f, 1	; 31
    3bc0:	fe cf       	rjmp	.-4      	; 0x3bbe <eeprom_update_r18>
    3bc2:	92 bd       	out	0x22, r25	; 34
    3bc4:	81 bd       	out	0x21, r24	; 33
    3bc6:	f8 9a       	sbi	0x1f, 0	; 31
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	00 b4       	in	r0, 0x20	; 32
    3bcc:	02 16       	cp	r0, r18
    3bce:	39 f0       	breq	.+14     	; 0x3bde <eeprom_update_r18+0x20>
    3bd0:	1f ba       	out	0x1f, r1	; 31
    3bd2:	20 bd       	out	0x20, r18	; 32
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	fa 9a       	sbi	0x1f, 2	; 31
    3bda:	f9 9a       	sbi	0x1f, 1	; 31
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	08 95       	ret

Disassembly of section .text.avrlibc:

00003da0 <eeprom_update_dword>:
    3da0:	03 96       	adiw	r24, 0x03	; 3
    3da2:	27 2f       	mov	r18, r23
    3da4:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <eeprom_update_r18>
    3da8:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <eeprom_update_byte>
    3dac:	25 2f       	mov	r18, r21
    3dae:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <eeprom_update_r18>
    3db2:	24 2f       	mov	r18, r20
    3db4:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <eeprom_update_r18>

Disassembly of section .text.avrlibc:

0000405a <eeprom_update_word>:
    405a:	01 96       	adiw	r24, 0x01	; 1
    405c:	27 2f       	mov	r18, r23
    405e:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <eeprom_update_r18>
    4062:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00003c64 <__mulsi3>:
    3c64:	db 01       	movw	r26, r22
    3c66:	8f 93       	push	r24
    3c68:	9f 93       	push	r25
    3c6a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <__muluhisi3>
    3c6e:	bf 91       	pop	r27
    3c70:	af 91       	pop	r26
    3c72:	a2 9f       	mul	r26, r18
    3c74:	80 0d       	add	r24, r0
    3c76:	91 1d       	adc	r25, r1
    3c78:	a3 9f       	mul	r26, r19
    3c7a:	90 0d       	add	r25, r0
    3c7c:	b2 9f       	mul	r27, r18
    3c7e:	90 0d       	add	r25, r0
    3c80:	11 24       	eor	r1, r1
    3c82:	08 95       	ret

Disassembly of section .text.libgcc.div:

000034c0 <__udivmodsi4>:
    34c0:	a1 e2       	ldi	r26, 0x21	; 33
    34c2:	1a 2e       	mov	r1, r26
    34c4:	aa 1b       	sub	r26, r26
    34c6:	bb 1b       	sub	r27, r27
    34c8:	fd 01       	movw	r30, r26
    34ca:	0d c0       	rjmp	.+26     	; 0x34e6 <__udivmodsi4_ep>

000034cc <__udivmodsi4_loop>:
    34cc:	aa 1f       	adc	r26, r26
    34ce:	bb 1f       	adc	r27, r27
    34d0:	ee 1f       	adc	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	a2 17       	cp	r26, r18
    34d6:	b3 07       	cpc	r27, r19
    34d8:	e4 07       	cpc	r30, r20
    34da:	f5 07       	cpc	r31, r21
    34dc:	20 f0       	brcs	.+8      	; 0x34e6 <__udivmodsi4_ep>
    34de:	a2 1b       	sub	r26, r18
    34e0:	b3 0b       	sbc	r27, r19
    34e2:	e4 0b       	sbc	r30, r20
    34e4:	f5 0b       	sbc	r31, r21

000034e6 <__udivmodsi4_ep>:
    34e6:	66 1f       	adc	r22, r22
    34e8:	77 1f       	adc	r23, r23
    34ea:	88 1f       	adc	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	1a 94       	dec	r1
    34f0:	69 f7       	brne	.-38     	; 0x34cc <__udivmodsi4_loop>
    34f2:	60 95       	com	r22
    34f4:	70 95       	com	r23
    34f6:	80 95       	com	r24
    34f8:	90 95       	com	r25
    34fa:	9b 01       	movw	r18, r22
    34fc:	ac 01       	movw	r20, r24
    34fe:	bd 01       	movw	r22, r26
    3500:	cf 01       	movw	r24, r30
    3502:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003dfa <__muluhisi3>:
    3dfa:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__umulhisi3>
    3dfe:	a5 9f       	mul	r26, r21
    3e00:	90 0d       	add	r25, r0
    3e02:	b4 9f       	mul	r27, r20
    3e04:	90 0d       	add	r25, r0
    3e06:	a4 9f       	mul	r26, r20
    3e08:	80 0d       	add	r24, r0
    3e0a:	91 1d       	adc	r25, r1
    3e0c:	11 24       	eor	r1, r1
    3e0e:	08 95       	ret

Disassembly of section .text.libgcc:

00004084 <__xload_1>:
    4084:	57 fd       	sbrc	r21, 7
    4086:	60 81       	ld	r22, Z
    4088:	57 ff       	sbrs	r21, 7
    408a:	64 91       	lpm	r22, Z
    408c:	08 95       	ret
