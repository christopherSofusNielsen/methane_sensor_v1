
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00005f3c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a4  00800100  00800100  00005f3c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00005f97  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b80  00000000  00000000  00005ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001148f  00000000  00000000  00006b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003341  00000000  00000000  00017fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000064f7  00000000  00000000  0001b340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001df4  00000000  00000000  00021838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001276  00000000  00000000  0002362c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f45  00000000  00000000  000248a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0002b7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00005dca  00005dca  00005efe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002c180  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00005b56  00005b56  00005c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00005a06  00005a06  00005b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00005b64  00005b64  00005c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00005a1a  00005a1a  00005b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00005b72  00005b72  00005ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00005a2e  00005a2e  00005b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00005b80  00005b80  00005cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00005a42  00005a42  00005b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00005b8e  00005b8e  00005cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00005a56  00005a56  00005b8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00005d16  00005d16  00005e4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 00000042  00004b48  00004b48  00004c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00005a6a  00005a6a  00005b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00005d1e  00005d1e  00005e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00005d26  00005d26  00005e5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  00005d2e  00005d2e  00005e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00005b9c  00005b9c  00005cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  00005cda  00005cda  00005e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  00005674  00005674  000057a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00005d76  00005d76  00005eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  00005dce  00005dce  00005f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  000043d4  000043d4  00004508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800fc2  00800fc2  00005f3c  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  00005058  00005058  0000518c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  00005c6e  00005c6e  00005da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  00005c7a  00005c7a  00005dae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00004422  00004422  00004556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800fc4  00800fc4  00005f3c  2**0
                  ALLOC
 43 .text.start_timer 00000008  00005d36  00005d36  00005e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.stop_timer 00000006  00005d7c  00005d7c  00005eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TC2_HAL_init 00000020  00005694  00005694  000057c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_subscribe 00000054  000042de  000042de  00004412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_cancel 0000003a  00004d82  00004d82  00004eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_9 00000098  000034bc  000034bc  000035f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.cnt      00000001  00800fd8  00800fd8  00005f3c  2**0
                  ALLOC
 50 .bss.cbCounter 00000001  00800fd9  00800fd9  00005f3c  2**0
                  ALLOC
 51 .bss.callbacks 0000000a  00800f9d  00800f9d  00005f3c  2**0
                  ALLOC
 52 .text.start_and_write_data 0000004c  0000455a  0000455a  0000468e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.read_and_stop 0000005a  00004128  00004128  0000425c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_API_write_data 00000006  00005d82  00005d82  00005eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_API_write_data_stop 00000010  00005b16  00005b16  00005c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_read_data_ack_end_nack_stop 00000024  0000553a  0000553a  0000566e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_repeat_read_data_stop 00000022  000055ca  000055ca  000056fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_init 00000012  00005ace  00005ace  00005c02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_start 00000048  00004800  00004800  00004934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_repeated_start 00000042  00004b8a  00004b8a  00004cbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_write_byte 00000020  000056b4  000056b4  000057e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_read_byte_ack 00000014  00005a7e  00005a7e  00005bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_read_byte_nack 00000014  00005a92  00005a92  00005bc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_stop 00000010  00005b26  00005b26  00005c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.copy_buffer 0000002e  0000533e  0000533e  00005472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_init 0000003c  00004d0a  00004d0a  00004e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_message 00000034  0000508c  0000508c  000051c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_send_string 0000006a  00003e6c  00003e6c  00003fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_message_ready 0000000e  00005baa  00005baa  00005cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_clear_rx_buffer 0000000a  00005ce4  00005ce4  00005e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_read_message_as_str 00000028  0000544c  0000544c  00005580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_send_break 00000046  00004920  00004920  00004a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_22 0000004a  00004722  00004722  00004856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_20 00000074  00003ca8  00003ca8  00003ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .bss.rx_buffer_has_message 00000001  00800fda  00800fda  00005f3c  2**0
                  ALLOC
 76 .bss.rx_buffer_data_len 00000001  00800fdb  00800fdb  00005f3c  2**0
                  ALLOC
 77 .bss.tx_buffer_cursor 00000001  00800fdc  00800fdc  00005f3c  2**0
                  ALLOC
 78 .bss.tx_buffer_data_len 00000001  00800fdd  00800fdd  00005f3c  2**0
                  ALLOC
 79 .text.copy_buffer 0000002e  0000536c  0000536c  000054a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.uart1_hal_init 0000003c  00004d46  00004d46  00004e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.uart1_hal_send_string 0000008a  00003840  00003840  00003974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_message_ready 0000000e  00005bb8  00005bb8  00005cec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_rx_full 0000000e  00005bc6  00005bc6  00005cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_clear_rx_buffer 0000000a  00005cee  00005cee  00005e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_read_message_as_str 00000028  00005474  00005474  000055a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_30 0000004a  0000476c  0000476c  000048a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_28 00000070  00003d1c  00003d1c  00003e50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .bss.rx_buffer_has_message 00000001  00800fde  00800fde  00005f3c  2**0
                  ALLOC
 89 .bss.rx_buffer_data_len 00000001  00800fdf  00800fdf  00005f3c  2**0
                  ALLOC
 90 .bss.rx_buffer 00000096  00800e80  00800e80  00005f3c  2**0
                  ALLOC
 91 .bss.tx_buffer_cursor 00000001  00800fe0  00800fe0  00005f3c  2**0
                  ALLOC
 92 .bss.tx_buffer_data_len 00000001  00800fe1  00800fe1  00005f3c  2**0
                  ALLOC
 93 .bss.tx_buffer 0000012c  00800d54  00800d54  00005f3c  2**0
                  ALLOC
 94 .text.main    00000020  000056d4  000056d4  00005808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.vect_ADC_heat_timeout 00000018  00005938  00005938  00005a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ADC_init_sampling 00000066  00003fa8  00003fa8  000040dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.ADC_deinit_sampling 00000014  00005aa6  00005aa6  00005bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ADC_is_sampling_done 0000001c  00005826  00005826  0000595a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ADC_meth_sens_power_on 00000020  000056f4  000056f4  00005828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.ADC_meth_sens_ready 00000012  00005ae0  00005ae0  00005c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.calc_ppm_methane 00000096  000035ec  000035ec  00003720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_get_value 00000056  00004232  00004232  00004366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.vect_ADC_do_sample 00000046  00004966  00004966  00004a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_start_sampling 0000000c  00005c86  00005c86  00005dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .bss.cntPowerUpTime 00000001  00800fe2  00800fe2  00005f3c  2**0
                  ALLOC
106 .bss._powerUpTime 00000001  00800fe3  00800fe3  00005f3c  2**0
                  ALLOC
107 .bss.cntSamples 00000002  00800fc6  00800fc6  00005f3c  2**0
                  ALLOC
108 .bss._data    00000002  00800fc8  00800fc8  00005f3c  2**0
                  ALLOC
109 .bss._nSamples 00000002  00800fca  00800fca  00005f3c  2**0
                  ALLOC
110 .data.PPM_factor 00000004  00800fb2  00005dfa  00005f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
111 .data.RRL     00000004  00800fb6  00005dfe  00005f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
112 .data.Vc      00000004  00800fba  00005e02  00005f36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
113 .text.EM_has_deveui 00000016  00005998  00005998  00005acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.EM_has_appeui 00000016  000059ae  000059ae  00005ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.EM_has_appkey 00000016  000059c4  000059c4  00005af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.EM_set_deveui 0000003a  00004dbc  00004dbc  00004ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.EM_get_deveui 00000030  000051ee  000051ee  00005322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.EM_set_appeui 0000003a  00004df6  00004df6  00004f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.EM_get_appeui 00000030  0000521e  0000521e  00005352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_set_appkey 0000003a  00004e30  00004e30  00004f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_get_appkey 00000030  0000524e  0000524e  00005382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_ppmfactor 0000000e  00005bd4  00005bd4  00005d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_ppmfactor 0000001e  00005754  00005754  00005888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_RRL 0000000e  00005be2  00005be2  00005d16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_RRL 0000001e  00005772  00005772  000058a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_Vcc 0000000e  00005bf0  00005bf0  00005d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_Vcc 0000001e  00005790  00005790  000058c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_collections 0000000e  00005bfe  00005bfe  00005d32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_collections 00000010  00005b36  00005b36  00005c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.cb_blink 00000006  00005d88  00005d88  00005ebc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.blink   0000004c  000045a6  000045a6  000046da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.err_code 00000038  00004e6a  00004e6a  00004f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.LED_start_try_join 0000000e  00005c0c  00005c0c  00005d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.LED_stop_try_join 00000010  00005b46  00005b46  00005c7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.LED_join_success 00000040  00004c0e  00004c0e  00004d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.LED_join_denied 00000008  00005d3e  00005d3e  00005e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.LED_join_conf_err 00000008  00005d46  00005d46  00005e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.LED_fatal_err 00000008  00005d4e  00005d4e  00005e82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .bss.cbPointer 00000001  00800fe4  00800fe4  00005f3c  2**0
                  ALLOC
140 .progmemx.data 00000038  000005df  000005df  00000713  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
141 .text.JN_join_network 00000296  000010c4  000010c4  000011f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.set_block_uplink 00000018  00005950  00005950  00005a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.block_uplink 0000001c  00005842  00005842  00005976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.LM_join_network 00000006  00005d8e  00005d8e  00005ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.LM_send_uplink 0000002e  0000539a  0000539a  000054ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.LM_put_to_sleep 00000006  00005d94  00005d94  00005ec8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LM_wake_up 00000006  00005d9a  00005d9a  00005ece  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LM_is_free 0000000a  00005cf8  00005cf8  00005e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LM_forward_msg 00000006  00005da0  00005da0  00005ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .bss.subPointer 00000001  00800fe5  00800fe5  00005f3c  2**0
                  ALLOC
151 .bss.busy     00000001  00800fe6  00800fe6  00005f3c  2**0
                  ALLOC
152 .bss.cnt      00000001  00800fe7  00800fe7  00005f3c  2**0
                  ALLOC
153 .progmemx.data 00000073  0000050b  0000050b  0000063f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
154 .text.tohex   00000084  00003950  00003950  00003a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.attach_ending 0000001c  0000585e  0000585e  00005992  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.cmd_with_ending 00000032  000050f4  000050f4  00005228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.sys_sleep_cmd 0000005e  0000400e  0000400e  00004142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.mac_set_parameter 0000004e  00004470  00004470  000045a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.mac_set_deveui 00000048  00004848  00004848  0000497c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.mac_set_appeui 00000048  00004890  00004890  000049c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.mac_set_appkey 00000048  000048d8  000048d8  00004a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.mac_set_ADR 00000030  0000527e  0000527e  000053b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.mac_tx_confirmed 000000ac  00003184  00003184  000032b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.beginsWidth 0000004a  000047b6  000047b6  000048ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .progmemx.data 00000038  00000617  00000617  0000074b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
166 .text.decode_tx_response 00000068  00003f40  00003f40  00004074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SU_send_uplink 000000fc  000025e4  000025e4  00002718  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .progmemx.data 00000003  0000069e  0000069e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
169 .text.SC_put_to_sleep 0000004c  000045f2  000045f2  00004726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.SC_wake_up 00000032  00005126  00005126  0000525a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.util_setPendingStates 0000000c  00005c92  00005c92  00005dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.util_setMatchCase 0000000c  00005c9e  00005c9e  00005dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.util_transmit_msg 0000001c  0000587a  0000587a  000059ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.util_read_msg 00000006  00005da6  00005da6  00005eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .progmemx.data 00000027  0000064f  0000064f  00000783  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
176 .text.util_parse_err 00000058  00004182  00004182  000042b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.util_strbeginswith 00000044  00004a38  00004a38  00004b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.util_matchMessage 0000005e  0000406c  0000406c  000041a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.util_lora_forward_msg 00000036  00004f4a  00004f4a  0000507e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.get_group_id 00000006  00005dac  00005dac  00005ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.set_group_id 00000006  00005db2  00005db2  00005ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.MRPP_init_group 00000032  00005158  00005158  0000528c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.MRPP_add_collection_data_INT16 00000070  00003d8c  00003d8c  00003ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.MRPP_is_body_package_ready 00000022  000055ec  000055ec  00005720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.MRPP_get_ready_body_package 00000096  00003682  00003682  000037b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.MRPP_set_body_sent 0000000c  00005caa  00005caa  00005dde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.MRPP_get_header_package 00000022  0000560e  0000560e  00005742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.MRPP_get_tail_package 00000022  00005630  00005630  00005764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.MRPP_all_body_package_sent 0000000a  00005d02  00005d02  00005e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .bss._groupId 00000001  00800fe8  00800fe8  00005f3c  2**0
                  ALLOC
191 .text.mrpp_data_add_int16 00000092  000037ae  000037ae  000038e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.mrpp_data_get 00000030  000052ae  000052ae  000053e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.add_data_types 000000d8  00002a7e  00002a7e  00002bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.update_bodies 00000162  00001c96  00001c96  00001dca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.mrpp_state_init 000001be  000017a8  000017a8  000018dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.mrpp_state_get_header 000000a2  00003378  00003378  000034ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.mrpp_state_get_tail 000000a4  00003230  00003230  00003364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.mrpp_state_set_collection 00000086  000038ca  000038ca  000039fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.mrpp_state_is_body_ready 00000030  000052de  000052de  00005412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.mrpp_state_all_bodies_sent 0000002a  00005422  00005422  00005556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.mrpp_state_get_ready_body 0000011a  000022aa  000022aa  000023de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.mrpp_state_set_body_sent 00000020  00005714  00005714  00005848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.mrpp_state_get_collection_address 00000036  00004f80  00004f80  000050b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.cb_cnt_time 00000030  0000530e  0000530e  00005442  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.PUMP_start 00000024  0000555e  0000555e  00005692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.PUMP_is_done 0000001c  00005896  00005896  000059ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .bss.eventPointer 00000001  00800fe9  00800fe9  00005f3c  2**0
                  ALLOC
208 .bss.cnt      00000002  00800fcc  00800fcc  00005f3c  2**0
                  ALLOC
209 .bss._seconds 00000002  00800fce  00800fce  00005f3c  2**0
                  ALLOC
210 .text.RTC_set_clock_out 00000050  00004384  00004384  000044b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.RTC_clear_wake_up_interrupt 00000034  000050c0  000050c0  000051f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.RTC_get_current_time 00000140  00001df8  00001df8  00001f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .rodata       00000005  00800fad  00005df5  00005f29  2**0
                  CONTENTS, ALLOC, LOAD, DATA
214 .text.RTC_set_wake_up_interrupt_minutes 000000c4  00002e94  00002e94  00002fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.RTC_datetime_to_ts 00000122  00002066  00002066  0000219a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000006a3  000006a3  000007d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
217 .text.bytes_2_uint 0000001a  000058ea  000058ea  00005a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.init_measurement 00000038  00004ea2  00004ea2  00004fd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.validate_data 00000032  0000518a  0000518a  000052be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.read_value 000000a2  0000341a  0000341a  0000354e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.vect_SCD_do_sample 00000046  000049ac  000049ac  00004ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.SCD30_init_sampling 0000004e  000044be  000044be  000045f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.SCD30_deinit_sampling 00000014  00005aba  00005aba  00005bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.SCD30_start_sampling 0000000c  00005cb6  00005cb6  00005dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.SCD30_is_sampling_done 0000001c  000058b2  000058b2  000059e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.SCD30_init_get_reading 0000001e  000057ae  000057ae  000058e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.SCD30_get_reading 0000001a  00005904  00005904  00005a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .bss.cntSamples 00000002  00800fd0  00800fd0  00005f3c  2**0
                  ALLOC
229 .bss._data    00000002  00800fd2  00800fd2  00005f3c  2**0
                  ALLOC
230 .bss._nSamples 00000002  00800fd4  00800fd4  00005f3c  2**0
                  ALLOC
231 .progmemx.data.READ_DATA_CMD 00000002  000006a1  000006a1  000007d5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
232 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000694  00000694  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
233 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000699  00000699  000007cd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
234 .text.parse_cmd 00000028  0000549c  0000549c  000055d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.validate_cmd 00000056  00004288  00004288  000043bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 000000a4  000003ec  000003ec  00000520  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.CONF_enter 00000122  00002188  00002188  000022bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .progmemx.data 00000061  0000057e  0000057e  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
239 .text.CON_RN2483_parse 00000026  00005514  00005514  00005648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.CON_RN2483 000000e0  000028c0  000028c0  000029f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .progmemx.data 000000b4  00000338  00000338  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
242 .text.read_cols 000000bc  00002f58  00002f58  0000308c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.write_deveui 00000078  00003ac8  00003ac8  00003bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.write_appeui 00000078  00003b40  00003b40  00003c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.write_appkey 00000078  00003bb8  00003bb8  00003cec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.write_PPM_factor 0000004c  0000463e  0000463e  00004772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.write_RRL 0000004c  0000468a  0000468a  000047be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.write_VCC 0000004c  000046d6  000046d6  0000480a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.write_cols 0000012e  00001f38  00001f38  0000206c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.write_reset 000000ce  00002c2a  00002c2a  00002d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.handle_read 000001d8  000015d0  000015d0  00001704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.handle_write 00000180  00001b16  00001b16  00001c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .bss.arg      00000050  00800f16  00800f16  00005f3c  2**0
                  ALLOC
254 .progmemx.data 0000007b  00000490  00000490  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
255 .text.handle_methane 0000011a  000023c4  000023c4  000024f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.handle_co2 000000a4  000032d4  000032d4  00003408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.handle_sample 00000098  00003554  00003554  00003688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .text.init_methane_SCD30 00000028  000054c4  000054c4  000055f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .bss.par      00000014  00800f89  00800f89  00005f3c  2**0
                  ALLOC
260 .text.count_parameters 00000052  00004332  00004332  00004466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.par_index 00000070  00003dfc  00003dfc  00003f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.get_parameter 00000096  00003718  00003718  0000384c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.decode_stage_response 00000016  000059da  000059da  00005b0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .text.decode_join_response 0000001c  000058ce  000058ce  00005a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.decode_header_tail_response 0000001e  000057cc  000057cc  00005900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .progmemx.data 000000d2  00000266  00000266  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
267 .text.join_lora 0000007a  000039d4  000039d4  00003b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.set_wakeup 00000008  00005d56  00005d56  00005e8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.send_header 0000003e  00004c8e  00004c8e  00004dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.stage_0 000000ce  00002cf8  00002cf8  00002e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.stage_1 000000f0  000026e0  000026e0  00002814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.stage_3 000000f0  000027d0  000027d0  00002904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.stage_2 00000106  000024de  000024de  00002612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.send_body 00000040  00004c4e  00004c4e  00004d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.decode_body_response 00000028  000054ec  000054ec  00005620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.send_tail 0000003e  00004ccc  00004ccc  00004e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.send_msg 00000018  00005968  00005968  00005a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.MAINPG_start 00000276  0000135a  0000135a  0000148e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .data.cols    00000023  00800f66  00005dd2  00005f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
280 .bss.dt       00000006  00800fa7  00800fa7  00005f3c  2**0
                  ALLOC
281 .bss.ts       00000004  00800fbe  00800fbe  00005f3c  2**0
                  ALLOC
282 .bss.meth_data 00000258  008008a4  008008a4  00005f3c  2**0
                  ALLOC
283 .bss.co2_data 00000258  00800afc  00800afc  00005f3c  2**0
                  ALLOC
284 .data.bodyIndex 00000002  00800fd6  00005e06  00005f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
285 .bss.state_s3 00000001  00800fea  00800fea  00005f3c  2**0
                  ALLOC
286 .bss.state_s2 00000001  00800feb  00800feb  00005f3c  2**0
                  ALLOC
287 .bss.state_s1 00000001  00800fec  00800fec  00005f3c  2**0
                  ALLOC
288 .bss.state_s0 00000001  00800fed  00800fed  00005f3c  2**0
                  ALLOC
289 .text.test_runner 00000006  00005db8  00005db8  00005eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .progmemx.data 00000016  00000676  00000676  000007aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
291 .text.test_UART0_HAL_start 00000038  00004eda  00004eda  0000500e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.calc_crc8 00000036  00004fb6  00004fb6  000050ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.get_decimal 000000b4  000030d0  000030d0  00003204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.str2flaot 0000004e  0000450c  0000450c  00004640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.is_float 00000058  000041da  000041da  0000430e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.avrlibc.fplib 0000000e  00005c1a  00005c1a  00005d4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.avrlibc.fplib 000000ce  00002dc6  00002dc6  00002efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.avrlibc.fplib 00000008  00005d5e  00005d5e  00005e92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.avrlibc.fplib 000000de  000029a0  000029a0  00002ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.avrlibc.fplib 0000005e  000040ca  000040ca  000041fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.avrlibc.fplib 0000007a  00003a4e  00003a4e  00003b82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.avrlibc.fplib 0000000c  00005cc2  00005cc2  00005df6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .text.avrlibc.fplib 00000006  00005dbe  00005dbe  00005ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
304 .text.avrlibc.fplib 0000000e  00005c28  00005c28  00005d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.avrlibc.fplib 0000000e  00005c36  00005c36  00005d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.avrlibc.fplib 00000022  00005652  00005652  00005786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.avrlibc.fplib 00000044  00004a7c  00004a7c  00004bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.avrlibc.fplib 0000000e  00005c44  00005c44  00005d78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .text.avrlibc.fplib 00000008  00005d66  00005d66  00005e9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
310 .text.avrlibc.fplib 000000d4  00002b56  00002b56  00002c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
311 .progmemx.data 00000008  0000068c  0000068c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
312 .text.avrlibc 00000744  000006a4  000006a4  000007d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
313 .text.libgcc  0000000c  00005cce  00005cce  00005e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
314 .text.libgcc.mul 0000001e  000057ea  000057ea  0000591e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
315 .text.libgcc.prologue 00000038  00004f12  00004f12  00005046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
316 .text.libgcc.prologue 00000036  00004fec  00004fec  00005120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
317 .text.libgcc  0000001a  0000591e  0000591e  00005a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
318 .text.avrlibc 00000008  00005d6e  00005d6e  00005ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
319 .text.avrlibc 0000000e  00005c52  00005c52  00005d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
320 .text.avrlibc 000002dc  00000de8  00000de8  00000f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
321 .text.avrlibc 000001b0  00001966  00001966  00001a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
322 .text.avrlibc 00000012  00005af2  00005af2  00005c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
323 .text.avrlibc 00000032  000051bc  000051bc  000052f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
324 .text.avrlibc 0000002e  000053c8  000053c8  000054fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
325 .text.avrlibc 00000042  00004bcc  00004bcc  00004d00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
326 .text.avrlibc 0000006a  00003ed6  00003ed6  0000400a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
327 .text.avrlibc 0000002c  000053f6  000053f6  0000552a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
328 .text.avrlibc 0000001e  00005808  00005808  0000593c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
329 .text.avrlibc 00000036  00005022  00005022  00005156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 .text.avrlibc 00000078  00003c30  00003c30  00003d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text.avrlibc 00000046  000049f2  000049f2  00004b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text.avrlibc 000000bc  00003014  00003014  00003148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.avrlibc 00000006  00005dc4  00005dc4  00005ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.avrlibc 00000024  00005582  00005582  000056b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.avrlibc 00000012  00005b04  00005b04  00005c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc 0000000e  00005c60  00005c60  00005d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc 00000044  00004ac0  00004ac0  00004bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc 00000024  000055a6  000055a6  000056da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc 00000018  00005980  00005980  00005ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .text.libgcc.mul 00000020  00005734  00005734  00005868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text.libgcc.div 00000044  00004b04  00004b04  00004c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.libgcc.mul 00000016  000059f0  000059f0  00005b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.libgcc  0000000a  00005d0c  00005d0c  00005e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
   4:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
   8:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
   c:	0c 94 35 2d 	jmp	0x5a6a	; 0x5a6a <__vector_3>
  10:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  14:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  18:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  1c:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  20:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  24:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__vector_9>
  28:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  2c:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  30:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  34:	0c 94 11 22 	jmp	0x4422	; 0x4422 <__vector_13>
  38:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  3c:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  40:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <__vector_16>
  44:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  48:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  4c:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  50:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__vector_20>
  54:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  58:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__vector_22>
  5c:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  60:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  64:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  68:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  6c:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  70:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__vector_28>
  74:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__bad_interrupt>
  78:	0c 94 b6 23 	jmp	0x476c	; 0x476c <__vector_30>
  7c:	80 08       	sbc	r8, r0
  7e:	89 09       	sbc	r24, r9
  80:	9f 08       	sbc	r9, r15
  82:	bc 08       	sbc	r11, r12
  84:	db 08       	sbc	r13, r11
  86:	fa 08       	sbc	r15, r10
  88:	19 09       	sbc	r17, r9
  8a:	38 09       	sbc	r19, r8
  8c:	55 09       	sbc	r21, r5
  8e:	72 09       	sbc	r23, r2
  90:	84 09       	sbc	r24, r4
  92:	9a 09       	sbc	r25, r10
  94:	9c 09       	sbc	r25, r12
  96:	0e 13       	cpse	r16, r30
  98:	41 13       	cpse	r20, r17
  9a:	2f 13       	cpse	r18, r31
  9c:	5f 13       	cpse	r21, r31
  9e:	5f 13       	cpse	r21, r31
  a0:	4e 13       	cpse	r20, r30
  a2:	4c 13       	cpse	r20, r28
  a4:	61 13       	cpse	r22, r17
  a6:	48 13       	cpse	r20, r24
  a8:	4a 13       	cpse	r20, r26
  aa:	dd 10       	cpse	r13, r13
  ac:	f2 10       	cpse	r15, r2
  ae:	4a 11       	cpse	r20, r10
  b0:	fb 10       	cpse	r15, r11
  b2:	53 11       	cpse	r21, r3
  b4:	3c 11       	cpse	r19, r12
  b6:	43 11       	cpse	r20, r3
  b8:	0b 11       	cpse	r16, r11
  ba:	17 11       	cpse	r17, r7
  bc:	23 11       	cpse	r18, r3
  be:	29 11       	cpse	r18, r9
  c0:	35 11       	cpse	r19, r5
  c2:	cc 09       	sbc	r28, r12
  c4:	ec 09       	sbc	r30, r12
  c6:	fd 09       	sbc	r31, r13
  c8:	0c 0a       	sbc	r0, r28
  ca:	1e 0a       	sbc	r1, r30
  cc:	01 0a       	sbc	r0, r17
  ce:	27 0a       	sbc	r2, r23
  d0:	3e 0a       	sbc	r3, r30
  d2:	33 0a       	sbc	r3, r19
  d4:	49 0a       	sbc	r4, r25
  d6:	55 0a       	sbc	r5, r21
  d8:	62 0a       	sbc	r6, r18
  da:	6a 0a       	sbc	r6, r26
  dc:	72 0a       	sbc	r7, r18
  de:	7a 0a       	sbc	r7, r26
  e0:	82 0a       	sbc	r8, r18
  e2:	9e 0a       	sbc	r9, r30
  e4:	a5 0a       	sbc	r10, r21
  e6:	b2 0a       	sbc	r11, r18
  e8:	c8 0a       	sbc	r12, r24
  ea:	d6 0a       	sbc	r13, r22
  ec:	df 0a       	sbc	r13, r31

000000ee <.dinit>:
  ee:	01 00       	.word	0x0001	; ????
  f0:	0f 66       	ori	r16, 0x6F	; 111
  f2:	80 0f       	add	r24, r16
  f4:	66 0f       	add	r22, r22
  f6:	89 00       	.word	0x0089	; ????
  f8:	5d d2       	rcall	.+1210   	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
  fa:	0f 89       	ldd	r16, Y+23	; 0x17
  fc:	0f ad       	ldd	r16, Y+63	; 0x3f
  fe:	80 0f       	add	r24, r16
 100:	ad 0f       	add	r26, r29
 102:	be 00       	.word	0x00be	; ????
 104:	5d f5       	brhc	.+86     	; 0x15c <__trampolines_end+0x44>
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f d6       	rcall	.+3102   	; 0xd28 <__EEPROM_REGION_LENGTH__+0x528>
 10a:	80 0f       	add	r24, r16
 10c:	d6 0f       	add	r29, r22
 10e:	d8 00       	.word	0x00d8	; ????
 110:	5e 06       	cpc	r5, r30
 112:	0f d8       	rcall	.-4066   	; 0xfffff132 <__eeprom_end+0xff7ef132>
 114:	0f ee       	ldi	r16, 0xEF	; 239
 116:	80 00       	.word	0x0080	; ????

00000118 <__trampolines_end>:
 118:	00 40       	sbci	r16, 0x00	; 0
 11a:	7a 10       	cpse	r7, r10
 11c:	f3 5a       	subi	r31, 0xA3	; 163
 11e:	00 a0       	ldd	r0, Z+32	; 0x20
 120:	72 4e       	sbci	r23, 0xE2	; 226
 122:	18 09       	sbc	r17, r8
 124:	00 10       	cpse	r0, r0
 126:	a5 d4       	rcall	.+2378   	; 0xa72 <__EEPROM_REGION_LENGTH__+0x272>
 128:	e8 00       	.word	0x00e8	; ????
 12a:	00 e8       	ldi	r16, 0x80	; 128
 12c:	76 48       	sbci	r23, 0x86	; 134
 12e:	17 00       	.word	0x0017	; ????
 130:	00 e4       	ldi	r16, 0x40	; 64
 132:	0b 54       	subi	r16, 0x4B	; 75
 134:	02 00       	.word	0x0002	; ????
 136:	00 ca       	rjmp	.-3072   	; 0xfffff538 <__eeprom_end+0xff7ef538>
 138:	9a 3b       	cpi	r25, 0xBA	; 186
 13a:	00 00       	nop
 13c:	00 e1       	ldi	r16, 0x10	; 16
 13e:	f5 05       	cpc	r31, r5
 140:	00 00       	nop
 142:	80 96       	adiw	r24, 0x20	; 32
 144:	98 00       	.word	0x0098	; ????
 146:	00 00       	nop
 148:	40 42       	sbci	r20, 0x20	; 32
 14a:	0f 00       	.word	0x000f	; ????
 14c:	00 00       	nop
 14e:	a0 86       	std	Z+8, r10	; 0x08
 150:	01 00       	.word	0x0001	; ????
 152:	00 00       	nop
 154:	10 27       	eor	r17, r16
 156:	00 00       	nop
 158:	00 00       	nop
 15a:	e8 03       	fmulsu	r22, r16
 15c:	00 00       	nop
 15e:	00 00       	nop
 160:	64 00       	.word	0x0064	; ????
 162:	00 00       	nop
 164:	00 00       	nop
 166:	0a 00       	.word	0x000a	; ????
 168:	00 00       	nop
 16a:	00 00       	nop
 16c:	01 00       	.word	0x0001	; ????
 16e:	00 00       	nop
 170:	00 00       	nop
 172:	2c 76       	andi	r18, 0x6C	; 108
 174:	d8 88       	ldd	r13, Y+16	; 0x10
 176:	dc 67       	ori	r29, 0x7C	; 124
 178:	4f 08       	sbc	r4, r15
 17a:	23 df       	rcall	.-442    	; 0xffffffc2 <__eeprom_end+0xff7effc2>
 17c:	c1 df       	rcall	.-126    	; 0x100 <.dinit+0x12>
 17e:	ae 59       	subi	r26, 0x9E	; 158
 180:	e1 b1       	in	r30, 0x01	; 1
 182:	b7 96       	adiw	r30, 0x27	; 39
 184:	e5 e3       	ldi	r30, 0x35	; 53
 186:	e4 53       	subi	r30, 0x34	; 52
 188:	c6 3a       	cpi	r28, 0xA6	; 166
 18a:	e6 51       	subi	r30, 0x16	; 22
 18c:	99 76       	andi	r25, 0x69	; 105
 18e:	96 e8       	ldi	r25, 0x86	; 134
 190:	e6 c2       	rjmp	.+1484   	; 0x75e <vfprintf+0xba>
 192:	84 26       	eor	r8, r20
 194:	eb 89       	ldd	r30, Y+19	; 0x13
 196:	8c 9b       	sbis	0x11, 4	; 17
 198:	62 ed       	ldi	r22, 0xD2	; 210
 19a:	40 7c       	andi	r20, 0xC0	; 192
 19c:	6f fc       	.word	0xfc6f	; ????
 19e:	ef bc       	out	0x2f, r14	; 47
 1a0:	9c 9f       	mul	r25, r28
 1a2:	40 f2       	brcs	.-112    	; 0x134 <__trampolines_end+0x1c>
 1a4:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a6:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a8:	f4 90       	lpm	r15, Z
 1aa:	05 5a       	subi	r16, 0xA5	; 165
 1ac:	2a f7       	brpl	.-54     	; 0x178 <__trampolines_end+0x60>
 1ae:	5c 93       	st	X, r21
 1b0:	6b 6c       	ori	r22, 0xCB	; 203
 1b2:	f9 67       	ori	r31, 0x79	; 121
 1b4:	6d c1       	rjmp	.+730    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 1b6:	1b fc       	.word	0xfc1b	; ????
 1b8:	e0 e4       	ldi	r30, 0x40	; 64
 1ba:	0d 47       	sbci	r16, 0x7D	; 125
 1bc:	fe f5       	brtc	.+126    	; 0x23c <__do_copy_data+0x1e>
 1be:	20 e6       	ldi	r18, 0x60	; 96
 1c0:	b5 00       	.word	0x00b5	; ????
 1c2:	d0 ed       	ldi	r29, 0xD0	; 208
 1c4:	90 2e       	mov	r9, r16
 1c6:	03 00       	.word	0x0003	; ????
 1c8:	94 35       	cpi	r25, 0x54	; 84
 1ca:	77 05       	cpc	r23, r7
 1cc:	00 80       	ld	r0, Z
 1ce:	84 1e       	adc	r8, r20
 1d0:	08 00       	.word	0x0008	; ????
 1d2:	00 20       	and	r0, r0
 1d4:	4e 0a       	sbc	r4, r30
 1d6:	00 00       	nop
 1d8:	00 c8       	rjmp	.-4096   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
 1da:	0c 33       	cpi	r16, 0x3C	; 60
 1dc:	33 33       	cpi	r19, 0x33	; 51
 1de:	33 0f       	add	r19, r19
 1e0:	98 6e       	ori	r25, 0xE8	; 232
 1e2:	12 83       	std	Z+2, r17	; 0x02
 1e4:	11 41       	sbci	r17, 0x11	; 17
 1e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e8:	21 14       	cp	r2, r1
 1ea:	89 3b       	cpi	r24, 0xB9	; 185
 1ec:	e6 55       	subi	r30, 0x56	; 86
 1ee:	16 cf       	rjmp	.-468    	; 0x1c <__FUSE_REGION_LENGTH__+0x19>
 1f0:	fe e6       	ldi	r31, 0x6E	; 110
 1f2:	db 18       	sub	r13, r11
 1f4:	d1 84       	ldd	r13, Z+9	; 0x09
 1f6:	4b 38       	cpi	r20, 0x8B	; 139
 1f8:	1b f7       	brvc	.-58     	; 0x1c0 <__trampolines_end+0xa8>
 1fa:	7c 1d       	adc	r23, r12
 1fc:	90 1d       	adc	r25, r0
 1fe:	a4 bb       	out	0x14, r26	; 20
 200:	e4 24       	eor	r14, r4
 202:	20 32       	cpi	r18, 0x20	; 32
 204:	84 72       	andi	r24, 0x24	; 36
 206:	5e 22       	and	r5, r30
 208:	81 00       	.word	0x0081	; ????
 20a:	c9 f1       	breq	.+114    	; 0x27e <_etext+0x18>
 20c:	24 ec       	ldi	r18, 0xC4	; 196
 20e:	a1 e5       	ldi	r26, 0x51	; 81
 210:	3d 27       	eor	r19, r29

00000212 <__ctors_end>:
 212:	11 24       	eor	r1, r1
 214:	1f be       	out	0x3f, r1	; 63
 216:	cf ef       	ldi	r28, 0xFF	; 255
 218:	d0 e1       	ldi	r29, 0x10	; 16
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
 21e:	ee ee       	ldi	r30, 0xEE	; 238
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	17 c0       	rjmp	.+46     	; 0x254 <__do_clear_bss+0x8>
 226:	b5 91       	lpm	r27, Z+
 228:	a5 91       	lpm	r26, Z+
 22a:	35 91       	lpm	r19, Z+
 22c:	25 91       	lpm	r18, Z+
 22e:	05 91       	lpm	r16, Z+
 230:	07 fd       	sbrc	r16, 7
 232:	0c c0       	rjmp	.+24     	; 0x24c <__do_clear_bss>
 234:	95 91       	lpm	r25, Z+
 236:	85 91       	lpm	r24, Z+
 238:	ef 01       	movw	r28, r30
 23a:	f9 2f       	mov	r31, r25
 23c:	e8 2f       	mov	r30, r24
 23e:	05 90       	lpm	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	a2 17       	cp	r26, r18
 244:	b3 07       	cpc	r27, r19
 246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0x20>
 248:	fe 01       	movw	r30, r28
 24a:	04 c0       	rjmp	.+8      	; 0x254 <__do_clear_bss+0x8>

0000024c <__do_clear_bss>:
 24c:	1d 92       	st	X+, r1
 24e:	a2 17       	cp	r26, r18
 250:	b3 07       	cpc	r27, r19
 252:	e1 f7       	brne	.-8      	; 0x24c <__do_clear_bss>
 254:	e7 31       	cpi	r30, 0x17	; 23
 256:	f4 07       	cpc	r31, r20
 258:	31 f7       	brne	.-52     	; 0x226 <__do_copy_data+0x8>
 25a:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <main>
 25e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>

Disassembly of section .text:

00005dca <__bad_interrupt>:
    5dca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00005b56 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    5b56:	81 b1       	in	r24, 0x01	; 1
    5b58:	88 60       	ori	r24, 0x08	; 8
    5b5a:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    5b5c:	82 b1       	in	r24, 0x02	; 2
    5b5e:	87 7f       	andi	r24, 0xF7	; 247
    5b60:	82 b9       	out	0x02, r24	; 2
    5b62:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00005a06 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    5a06:	88 23       	and	r24, r24
    5a08:	21 f0       	breq	.+8      	; 0x5a12 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    5a0a:	82 b1       	in	r24, 0x02	; 2
    5a0c:	88 60       	ori	r24, 0x08	; 8
    5a0e:	82 b9       	out	0x02, r24	; 2
    5a10:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    5a12:	82 b1       	in	r24, 0x02	; 2
    5a14:	87 7f       	andi	r24, 0xF7	; 247
    5a16:	82 b9       	out	0x02, r24	; 2
    5a18:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00005b64 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    5b64:	81 b1       	in	r24, 0x01	; 1
    5b66:	80 62       	ori	r24, 0x20	; 32
    5b68:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    5b6a:	82 b1       	in	r24, 0x02	; 2
    5b6c:	8f 7d       	andi	r24, 0xDF	; 223
    5b6e:	82 b9       	out	0x02, r24	; 2
    5b70:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00005a1a <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    5a1a:	88 23       	and	r24, r24
    5a1c:	21 f0       	breq	.+8      	; 0x5a26 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    5a1e:	82 b1       	in	r24, 0x02	; 2
    5a20:	80 62       	ori	r24, 0x20	; 32
    5a22:	82 b9       	out	0x02, r24	; 2
    5a24:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    5a26:	82 b1       	in	r24, 0x02	; 2
    5a28:	8f 7d       	andi	r24, 0xDF	; 223
    5a2a:	82 b9       	out	0x02, r24	; 2
    5a2c:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00005b72 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    5b72:	81 b1       	in	r24, 0x01	; 1
    5b74:	80 61       	ori	r24, 0x10	; 16
    5b76:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    5b78:	82 b1       	in	r24, 0x02	; 2
    5b7a:	8f 7e       	andi	r24, 0xEF	; 239
    5b7c:	82 b9       	out	0x02, r24	; 2
    5b7e:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00005a2e <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    5a2e:	88 23       	and	r24, r24
    5a30:	21 f0       	breq	.+8      	; 0x5a3a <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    5a32:	82 b1       	in	r24, 0x02	; 2
    5a34:	80 61       	ori	r24, 0x10	; 16
    5a36:	82 b9       	out	0x02, r24	; 2
    5a38:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    5a3a:	82 b1       	in	r24, 0x02	; 2
    5a3c:	8f 7e       	andi	r24, 0xEF	; 239
    5a3e:	82 b9       	out	0x02, r24	; 2
    5a40:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00005b80 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    5b80:	8a b1       	in	r24, 0x0a	; 10
    5b82:	80 61       	ori	r24, 0x10	; 16
    5b84:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    5b86:	8b b1       	in	r24, 0x0b	; 11
    5b88:	8f 7e       	andi	r24, 0xEF	; 239
    5b8a:	8b b9       	out	0x0b, r24	; 11
    5b8c:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00005a42 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    5a42:	88 23       	and	r24, r24
    5a44:	21 f0       	breq	.+8      	; 0x5a4e <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    5a46:	8b b1       	in	r24, 0x0b	; 11
    5a48:	80 61       	ori	r24, 0x10	; 16
    5a4a:	8b b9       	out	0x0b, r24	; 11
    5a4c:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    5a4e:	8b b1       	in	r24, 0x0b	; 11
    5a50:	8f 7e       	andi	r24, 0xEF	; 239
    5a52:	8b b9       	out	0x0b, r24	; 11
    5a54:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00005b8e <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    5b8e:	81 b1       	in	r24, 0x01	; 1
    5b90:	80 68       	ori	r24, 0x80	; 128
    5b92:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    5b94:	82 b1       	in	r24, 0x02	; 2
    5b96:	8f 77       	andi	r24, 0x7F	; 127
    5b98:	82 b9       	out	0x02, r24	; 2
    5b9a:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00005a56 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    5a56:	88 23       	and	r24, r24
    5a58:	21 f0       	breq	.+8      	; 0x5a62 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    5a5a:	82 b1       	in	r24, 0x02	; 2
    5a5c:	80 68       	ori	r24, 0x80	; 128
    5a5e:	82 b9       	out	0x02, r24	; 2
    5a60:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    5a62:	82 b1       	in	r24, 0x02	; 2
    5a64:	8f 77       	andi	r24, 0x7F	; 127
    5a66:	82 b9       	out	0x02, r24	; 2
    5a68:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00005d16 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    5d16:	82 b1       	in	r24, 0x02	; 2
    5d18:	80 58       	subi	r24, 0x80	; 128
    5d1a:	82 b9       	out	0x02, r24	; 2
    5d1c:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00004b48 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    4b48:	84 b1       	in	r24, 0x04	; 4
    4b4a:	8b 7f       	andi	r24, 0xFB	; 251
    4b4c:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    4b4e:	85 b1       	in	r24, 0x05	; 5
    4b50:	84 60       	ori	r24, 0x04	; 4
    4b52:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    4b54:	e9 e6       	ldi	r30, 0x69	; 105
    4b56:	f0 e0       	ldi	r31, 0x00	; 0
    4b58:	80 81       	ld	r24, Z
    4b5a:	8f 7e       	andi	r24, 0xEF	; 239
    4b5c:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    4b5e:	80 81       	ld	r24, Z
    4b60:	80 62       	ori	r24, 0x20	; 32
    4b62:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    4b64:	8d b3       	in	r24, 0x1d	; 29
    4b66:	84 60       	ori	r24, 0x04	; 4
    4b68:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4b6a:	83 b7       	in	r24, 0x33	; 51
    4b6c:	81 7f       	andi	r24, 0xF1	; 241
    4b6e:	84 60       	ori	r24, 0x04	; 4
    4b70:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    4b72:	83 b7       	in	r24, 0x33	; 51
    4b74:	81 60       	ori	r24, 0x01	; 1
    4b76:	83 bf       	out	0x33, r24	; 51
	sei();
    4b78:	78 94       	sei
	sleep_cpu();
    4b7a:	88 95       	sleep
	sleep_disable();
    4b7c:	83 b7       	in	r24, 0x33	; 51
    4b7e:	8e 7f       	andi	r24, 0xFE	; 254
    4b80:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    4b82:	8d b3       	in	r24, 0x1d	; 29
    4b84:	8b 7f       	andi	r24, 0xFB	; 251
    4b86:	8d bb       	out	0x1d, r24	; 29
    4b88:	08 95       	ret

Disassembly of section .text.__vector_3:

00005a6a <__vector_3>:
}

ISR(INT2_vect){
    5a6a:	1f 92       	push	r1
    5a6c:	0f 92       	push	r0
    5a6e:	0f b6       	in	r0, 0x3f	; 63
    5a70:	0f 92       	push	r0
    5a72:	11 24       	eor	r1, r1
	
}
    5a74:	0f 90       	pop	r0
    5a76:	0f be       	out	0x3f, r0	; 63
    5a78:	0f 90       	pop	r0
    5a7a:	1f 90       	pop	r1
    5a7c:	18 95       	reti

Disassembly of section .text.rn2483_init:

00005d1e <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    5d1e:	84 b1       	in	r24, 0x04	; 4
    5d20:	80 61       	ori	r24, 0x10	; 16
    5d22:	84 b9       	out	0x04, r24	; 4
    5d24:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00005d26 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    5d26:	85 b1       	in	r24, 0x05	; 5
    5d28:	8f 7e       	andi	r24, 0xEF	; 239
    5d2a:	85 b9       	out	0x05, r24	; 5
    5d2c:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00005d2e <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    5d2e:	85 b1       	in	r24, 0x05	; 5
    5d30:	80 61       	ori	r24, 0x10	; 16
    5d32:	85 b9       	out	0x05, r24	; 5
    5d34:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00005b9c <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    5b9c:	87 b1       	in	r24, 0x07	; 7
    5b9e:	8f 7b       	andi	r24, 0xBF	; 191
    5ba0:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    5ba2:	88 b1       	in	r24, 0x08	; 8
    5ba4:	8f 7b       	andi	r24, 0xBF	; 191
    5ba6:	88 b9       	out	0x08, r24	; 8
    5ba8:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00005cda <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    5cda:	86 b1       	in	r24, 0x06	; 6
    5cdc:	86 fb       	bst	r24, 6
    5cde:	88 27       	eor	r24, r24
    5ce0:	80 f9       	bld	r24, 0
    5ce2:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00005674 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    5674:	92 e0       	ldi	r25, 0x02	; 2
    5676:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    5678:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    567a:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    567c:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    567e:	ee e6       	ldi	r30, 0x6E	; 110
    5680:	f0 e0       	ldi	r31, 0x00	; 0
    5682:	80 81       	ld	r24, Z
    5684:	82 60       	ori	r24, 0x02	; 2
    5686:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    5688:	78 94       	sei
	
	//Set callback
	_cb=cb;
    568a:	70 93 c3 0f 	sts	0x0FC3, r23	; 0x800fc3 <_cb+0x1>
    568e:	60 93 c2 0f 	sts	0x0FC2, r22	; 0x800fc2 <_cb>
    5692:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00005d76 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    5d76:	86 e0       	ldi	r24, 0x06	; 6
    5d78:	85 bd       	out	0x25, r24	; 37
    5d7a:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00005dce <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    5dce:	15 bc       	out	0x25, r1	; 37
    5dd0:	08 95       	ret

Disassembly of section .text.__vector_16:

000043d4 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    43d4:	1f 92       	push	r1
    43d6:	0f 92       	push	r0
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	0f 92       	push	r0
    43dc:	11 24       	eor	r1, r1
    43de:	2f 93       	push	r18
    43e0:	3f 93       	push	r19
    43e2:	4f 93       	push	r20
    43e4:	5f 93       	push	r21
    43e6:	6f 93       	push	r22
    43e8:	7f 93       	push	r23
    43ea:	8f 93       	push	r24
    43ec:	9f 93       	push	r25
    43ee:	af 93       	push	r26
    43f0:	bf 93       	push	r27
    43f2:	ef 93       	push	r30
    43f4:	ff 93       	push	r31
	_cb();
    43f6:	e0 91 c2 0f 	lds	r30, 0x0FC2	; 0x800fc2 <_cb>
    43fa:	f0 91 c3 0f 	lds	r31, 0x0FC3	; 0x800fc3 <_cb+0x1>
    43fe:	09 95       	icall
}
    4400:	ff 91       	pop	r31
    4402:	ef 91       	pop	r30
    4404:	bf 91       	pop	r27
    4406:	af 91       	pop	r26
    4408:	9f 91       	pop	r25
    440a:	8f 91       	pop	r24
    440c:	7f 91       	pop	r23
    440e:	6f 91       	pop	r22
    4410:	5f 91       	pop	r21
    4412:	4f 91       	pop	r20
    4414:	3f 91       	pop	r19
    4416:	2f 91       	pop	r18
    4418:	0f 90       	pop	r0
    441a:	0f be       	out	0x3f, r0	; 63
    441c:	0f 90       	pop	r0
    441e:	1f 90       	pop	r1
    4420:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005058 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5058:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    505c:	28 e0       	ldi	r18, 0x08	; 8
    505e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5062:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    5066:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    506a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    506e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5072:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5076:	ef e6       	ldi	r30, 0x6F	; 111
    5078:	f0 e0       	ldi	r31, 0x00	; 0
    507a:	80 81       	ld	r24, Z
    507c:	82 60       	ori	r24, 0x02	; 2
    507e:	80 83       	st	Z, r24
	sei();
    5080:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5082:	70 93 c5 0f 	sts	0x0FC5, r23	; 0x800fc5 <_cb+0x1>
    5086:	60 93 c4 0f 	sts	0x0FC4, r22	; 0x800fc4 <_cb>
    508a:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00005c6e <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    5c6e:	e1 e8       	ldi	r30, 0x81	; 129
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	80 81       	ld	r24, Z
    5c74:	86 60       	ori	r24, 0x06	; 6
    5c76:	80 83       	st	Z, r24
    5c78:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00005c7a <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    5c7a:	e1 e8       	ldi	r30, 0x81	; 129
    5c7c:	f0 e0       	ldi	r31, 0x00	; 0
    5c7e:	80 81       	ld	r24, Z
    5c80:	88 7f       	andi	r24, 0xF8	; 248
    5c82:	80 83       	st	Z, r24
    5c84:	08 95       	ret

Disassembly of section .text.__vector_13:

00004422 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    4422:	1f 92       	push	r1
    4424:	0f 92       	push	r0
    4426:	0f b6       	in	r0, 0x3f	; 63
    4428:	0f 92       	push	r0
    442a:	11 24       	eor	r1, r1
    442c:	2f 93       	push	r18
    442e:	3f 93       	push	r19
    4430:	4f 93       	push	r20
    4432:	5f 93       	push	r21
    4434:	6f 93       	push	r22
    4436:	7f 93       	push	r23
    4438:	8f 93       	push	r24
    443a:	9f 93       	push	r25
    443c:	af 93       	push	r26
    443e:	bf 93       	push	r27
    4440:	ef 93       	push	r30
    4442:	ff 93       	push	r31
	_cb();
    4444:	e0 91 c4 0f 	lds	r30, 0x0FC4	; 0x800fc4 <_cb>
    4448:	f0 91 c5 0f 	lds	r31, 0x0FC5	; 0x800fc5 <_cb+0x1>
    444c:	09 95       	icall
    444e:	ff 91       	pop	r31
    4450:	ef 91       	pop	r30
    4452:	bf 91       	pop	r27
    4454:	af 91       	pop	r26
    4456:	9f 91       	pop	r25
    4458:	8f 91       	pop	r24
    445a:	7f 91       	pop	r23
    445c:	6f 91       	pop	r22
    445e:	5f 91       	pop	r21
    4460:	4f 91       	pop	r20
    4462:	3f 91       	pop	r19
    4464:	2f 91       	pop	r18
    4466:	0f 90       	pop	r0
    4468:	0f be       	out	0x3f, r0	; 63
    446a:	0f 90       	pop	r0
    446c:	1f 90       	pop	r1
    446e:	18 95       	reti

Disassembly of section .text.start_timer:

00005d36 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    5d36:	87 e0       	ldi	r24, 0x07	; 7
    5d38:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    5d3c:	08 95       	ret

Disassembly of section .text.stop_timer:

00005d7c <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    5d7c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    5d80:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00005694 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    5694:	82 e0       	ldi	r24, 0x02	; 2
    5696:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    569a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    569e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    56a2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    56a6:	9b ef       	ldi	r25, 0xFB	; 251
    56a8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    56ac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    56b0:	78 94       	sei
    56b2:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

000042de <TC2_HAL_subscribe>:
    42de:	cf 93       	push	r28
    42e0:	dc 01       	movw	r26, r24
    42e2:	60 91 d9 0f 	lds	r22, 0x0FD9	; 0x800fd9 <cbCounter>
    42e6:	65 30       	cpi	r22, 0x05	; 5
    42e8:	00 f5       	brcc	.+64     	; 0x432a <TC2_HAL_subscribe+0x4c>
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	15 c0       	rjmp	.+42     	; 0x4318 <TC2_HAL_subscribe+0x3a>
    42ee:	29 2f       	mov	r18, r25
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	f9 01       	movw	r30, r18
    42f4:	ee 0f       	add	r30, r30
    42f6:	ff 1f       	adc	r31, r31
    42f8:	e3 56       	subi	r30, 0x63	; 99
    42fa:	f0 4f       	sbci	r31, 0xF0	; 240
    42fc:	40 81       	ld	r20, Z
    42fe:	51 81       	ldd	r21, Z+1	; 0x01
    4300:	45 2b       	or	r20, r21
    4302:	49 f4       	brne	.+18     	; 0x4316 <TC2_HAL_subscribe+0x38>
    4304:	22 0f       	add	r18, r18
    4306:	33 1f       	adc	r19, r19
    4308:	f9 01       	movw	r30, r18
    430a:	e3 56       	subi	r30, 0x63	; 99
    430c:	f0 4f       	sbci	r31, 0xF0	; 240
    430e:	b1 83       	std	Z+1, r27	; 0x01
    4310:	a0 83       	st	Z, r26
    4312:	c9 2f       	mov	r28, r25
    4314:	04 c0       	rjmp	.+8      	; 0x431e <TC2_HAL_subscribe+0x40>
    4316:	9f 5f       	subi	r25, 0xFF	; 255
    4318:	95 30       	cpi	r25, 0x05	; 5
    431a:	48 f3       	brcs	.-46     	; 0x42ee <TC2_HAL_subscribe+0x10>
    431c:	cf ef       	ldi	r28, 0xFF	; 255
    431e:	6f 5f       	subi	r22, 0xFF	; 255
    4320:	60 93 d9 0f 	sts	0x0FD9, r22	; 0x800fd9 <cbCounter>
    4324:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <start_timer>
    4328:	01 c0       	rjmp	.+2      	; 0x432c <TC2_HAL_subscribe+0x4e>
    432a:	cf ef       	ldi	r28, 0xFF	; 255
    432c:	8c 2f       	mov	r24, r28
    432e:	cf 91       	pop	r28
    4330:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00004d82 <TC2_HAL_cancel>:
    4d82:	08 2e       	mov	r0, r24
    4d84:	00 0c       	add	r0, r0
    4d86:	99 0b       	sbc	r25, r25
    4d88:	fc 01       	movw	r30, r24
    4d8a:	ee 0f       	add	r30, r30
    4d8c:	ff 1f       	adc	r31, r31
    4d8e:	e3 56       	subi	r30, 0x63	; 99
    4d90:	f0 4f       	sbci	r31, 0xF0	; 240
    4d92:	20 81       	ld	r18, Z
    4d94:	31 81       	ldd	r19, Z+1	; 0x01
    4d96:	23 2b       	or	r18, r19
    4d98:	81 f0       	breq	.+32     	; 0x4dba <TC2_HAL_cancel+0x38>
    4d9a:	88 0f       	add	r24, r24
    4d9c:	99 1f       	adc	r25, r25
    4d9e:	fc 01       	movw	r30, r24
    4da0:	e3 56       	subi	r30, 0x63	; 99
    4da2:	f0 4f       	sbci	r31, 0xF0	; 240
    4da4:	11 82       	std	Z+1, r1	; 0x01
    4da6:	10 82       	st	Z, r1
    4da8:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <cbCounter>
    4dac:	81 50       	subi	r24, 0x01	; 1
    4dae:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <cbCounter>
    4db2:	81 11       	cpse	r24, r1
    4db4:	02 c0       	rjmp	.+4      	; 0x4dba <TC2_HAL_cancel+0x38>
    4db6:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <stop_timer>
    4dba:	08 95       	ret

Disassembly of section .text.__vector_9:

000034bc <__vector_9>:
    34bc:	1f 92       	push	r1
    34be:	0f 92       	push	r0
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	0f 92       	push	r0
    34c4:	11 24       	eor	r1, r1
    34c6:	2f 93       	push	r18
    34c8:	3f 93       	push	r19
    34ca:	4f 93       	push	r20
    34cc:	5f 93       	push	r21
    34ce:	6f 93       	push	r22
    34d0:	7f 93       	push	r23
    34d2:	8f 93       	push	r24
    34d4:	9f 93       	push	r25
    34d6:	af 93       	push	r26
    34d8:	bf 93       	push	r27
    34da:	cf 93       	push	r28
    34dc:	ef 93       	push	r30
    34de:	ff 93       	push	r31
    34e0:	90 91 d8 0f 	lds	r25, 0x0FD8	; 0x800fd8 <cnt>
    34e4:	9f 5f       	subi	r25, 0xFF	; 255
    34e6:	90 93 d8 0f 	sts	0x0FD8, r25	; 0x800fd8 <cnt>
    34ea:	89 e0       	ldi	r24, 0x09	; 9
    34ec:	98 9f       	mul	r25, r24
    34ee:	21 2d       	mov	r18, r1
    34f0:	11 24       	eor	r1, r1
    34f2:	89 2f       	mov	r24, r25
    34f4:	82 1b       	sub	r24, r18
    34f6:	86 95       	lsr	r24
    34f8:	82 0f       	add	r24, r18
    34fa:	82 95       	swap	r24
    34fc:	8f 70       	andi	r24, 0x0F	; 15
    34fe:	2f e1       	ldi	r18, 0x1F	; 31
    3500:	82 9f       	mul	r24, r18
    3502:	90 19       	sub	r25, r0
    3504:	11 24       	eor	r1, r1
    3506:	91 11       	cpse	r25, r1
    3508:	13 c0       	rjmp	.+38     	; 0x3530 <__vector_9+0x74>
    350a:	10 92 d8 0f 	sts	0x0FD8, r1	; 0x800fd8 <cnt>
    350e:	c0 e0       	ldi	r28, 0x00	; 0
    3510:	0d c0       	rjmp	.+26     	; 0x352c <__vector_9+0x70>
    3512:	ec 2f       	mov	r30, r28
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	e3 56       	subi	r30, 0x63	; 99
    351c:	f0 4f       	sbci	r31, 0xF0	; 240
    351e:	01 90       	ld	r0, Z+
    3520:	f0 81       	ld	r31, Z
    3522:	e0 2d       	mov	r30, r0
    3524:	30 97       	sbiw	r30, 0x00	; 0
    3526:	09 f0       	breq	.+2      	; 0x352a <__vector_9+0x6e>
    3528:	09 95       	icall
    352a:	cf 5f       	subi	r28, 0xFF	; 255
    352c:	c5 30       	cpi	r28, 0x05	; 5
    352e:	88 f3       	brcs	.-30     	; 0x3512 <__vector_9+0x56>
    3530:	ff 91       	pop	r31
    3532:	ef 91       	pop	r30
    3534:	cf 91       	pop	r28
    3536:	bf 91       	pop	r27
    3538:	af 91       	pop	r26
    353a:	9f 91       	pop	r25
    353c:	8f 91       	pop	r24
    353e:	7f 91       	pop	r23
    3540:	6f 91       	pop	r22
    3542:	5f 91       	pop	r21
    3544:	4f 91       	pop	r20
    3546:	3f 91       	pop	r19
    3548:	2f 91       	pop	r18
    354a:	0f 90       	pop	r0
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	0f 90       	pop	r0
    3550:	1f 90       	pop	r1
    3552:	18 95       	reti

Disassembly of section .text.start_and_write_data:

0000455a <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    455a:	cf 92       	push	r12
    455c:	df 92       	push	r13
    455e:	ef 92       	push	r14
    4560:	cf 93       	push	r28
    4562:	df 93       	push	r29
    4564:	6a 01       	movw	r12, r20
    4566:	e6 2e       	mov	r14, r22
    4568:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	0e 94 00 24 	call	0x4800	; 0x4800 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    4570:	81 11       	cpse	r24, r1
    4572:	13 c0       	rjmp	.+38     	; 0x459a <start_and_write_data+0x40>
    4574:	c0 e0       	ldi	r28, 0x00	; 0
    4576:	0e c0       	rjmp	.+28     	; 0x4594 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    4578:	ae 2d       	mov	r26, r14
    457a:	c6 01       	movw	r24, r12
    457c:	8c 0f       	add	r24, r28
    457e:	91 1d       	adc	r25, r1
    4580:	a1 1d       	adc	r26, r1
    4582:	fc 01       	movw	r30, r24
    4584:	84 91       	lpm	r24, Z
    4586:	a7 fd       	sbrc	r26, 7
    4588:	80 81       	ld	r24, Z
    458a:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    458e:	81 11       	cpse	r24, r1
    4590:	04 c0       	rjmp	.+8      	; 0x459a <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    4592:	cf 5f       	subi	r28, 0xFF	; 255
    4594:	cd 17       	cp	r28, r29
    4596:	80 f3       	brcs	.-32     	; 0x4578 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    4598:	80 e0       	ldi	r24, 0x00	; 0
}
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	ef 90       	pop	r14
    45a0:	df 90       	pop	r13
    45a2:	cf 90       	pop	r12
    45a4:	08 95       	ret

Disassembly of section .text.read_and_stop:

00004128 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    4128:	ef 92       	push	r14
    412a:	ff 92       	push	r15
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	8c 01       	movw	r16, r24
    4136:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    4138:	c0 e0       	ldi	r28, 0x00	; 0
    413a:	08 c0       	rjmp	.+16     	; 0x414c <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    413c:	78 01       	movw	r14, r16
    413e:	ec 0e       	add	r14, r28
    4140:	f1 1c       	adc	r15, r1
    4142:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <TWI_HAL_read_byte_ack>
    4146:	f7 01       	movw	r30, r14
    4148:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    414a:	cf 5f       	subi	r28, 0xFF	; 255
    414c:	2c 2f       	mov	r18, r28
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	8d 2f       	mov	r24, r29
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	28 17       	cp	r18, r24
    4158:	39 07       	cpc	r19, r25
    415a:	84 f3       	brlt	.-32     	; 0x413c <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    415c:	8d 2f       	mov	r24, r29
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	01 97       	sbiw	r24, 0x01	; 1
    4162:	e8 01       	movw	r28, r16
    4164:	c8 0f       	add	r28, r24
    4166:	d9 1f       	adc	r29, r25
    4168:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <TWI_HAL_read_byte_nack>
    416c:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    416e:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00005d82 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    5d82:	0e 94 ad 22 	call	0x455a	; 0x455a <start_and_write_data>
}
    5d86:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00005b16 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    5b16:	0e 94 ad 22 	call	0x455a	; 0x455a <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    5b1a:	81 11       	cpse	r24, r1
    5b1c:	03 c0       	rjmp	.+6      	; 0x5b24 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    5b1e:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    5b22:	80 e0       	ldi	r24, 0x00	; 0
}
    5b24:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

0000553a <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    553a:	1f 93       	push	r17
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	eb 01       	movw	r28, r22
    5542:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    5544:	61 e0       	ldi	r22, 0x01	; 1
    5546:	0e 94 00 24 	call	0x4800	; 0x4800 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    554a:	81 11       	cpse	r24, r1
    554c:	04 c0       	rjmp	.+8      	; 0x5556 <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    554e:	61 2f       	mov	r22, r17
    5550:	ce 01       	movw	r24, r28
    5552:	0e 94 94 20 	call	0x4128	; 0x4128 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	1f 91       	pop	r17
    555c:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

000055ca <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    55ca:	1f 93       	push	r17
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	eb 01       	movw	r28, r22
    55d2:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    55d4:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    55d8:	81 11       	cpse	r24, r1
    55da:	04 c0       	rjmp	.+8      	; 0x55e4 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    55dc:	61 2f       	mov	r22, r17
    55de:	ce 01       	movw	r24, r28
    55e0:	0e 94 94 20 	call	0x4128	; 0x4128 <read_and_stop>
	
}
    55e4:	df 91       	pop	r29
    55e6:	cf 91       	pop	r28
    55e8:	1f 91       	pop	r17
    55ea:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00005ace <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    5ace:	80 e2       	ldi	r24, 0x20	; 32
    5ad0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    5ad4:	e9 eb       	ldi	r30, 0xB9	; 185
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	80 81       	ld	r24, Z
    5ada:	8c 7f       	andi	r24, 0xFC	; 252
    5adc:	80 83       	st	Z, r24
    5ade:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00004800 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	88 0f       	add	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    4808:	84 ea       	ldi	r24, 0xA4	; 164
    480a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    480e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4812:	99 23       	and	r25, r25
    4814:	e4 f7       	brge	.-8      	; 0x480e <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    4816:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    481a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    481c:	88 30       	cpi	r24, 0x08	; 8
    481e:	99 f4       	brne	.+38     	; 0x4846 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    4820:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    4824:	84 e8       	ldi	r24, 0x84	; 132
    4826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    482a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    482e:	88 23       	and	r24, r24
    4830:	e4 f7       	brge	.-8      	; 0x482a <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    4832:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    4836:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    4838:	88 31       	cpi	r24, 0x18	; 24
    483a:	21 f0       	breq	.+8      	; 0x4844 <TWI_HAL_start+0x44>
    483c:	80 34       	cpi	r24, 0x40	; 64
    483e:	19 f4       	brne	.+6      	; 0x4846 <TWI_HAL_start+0x46>
    4840:	80 e0       	ldi	r24, 0x00	; 0
    4842:	08 95       	ret
    4844:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    4846:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00004b8a <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	88 0f       	add	r24, r24
    4b8e:	99 1f       	adc	r25, r25
    4b90:	28 2f       	mov	r18, r24
    4b92:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    4b94:	84 ea       	ldi	r24, 0xA4	; 164
    4b96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    4b9a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4b9e:	99 23       	and	r25, r25
    4ba0:	e4 f7       	brge	.-8      	; 0x4b9a <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    4ba2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    4ba6:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    4ba8:	80 31       	cpi	r24, 0x10	; 16
    4baa:	79 f4       	brne	.+30     	; 0x4bca <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    4bac:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    4bb0:	84 e8       	ldi	r24, 0x84	; 132
    4bb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    4bb6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4bba:	88 23       	and	r24, r24
    4bbc:	e4 f7       	brge	.-8      	; 0x4bb6 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    4bbe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    4bc2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    4bc4:	80 34       	cpi	r24, 0x40	; 64
    4bc6:	09 f4       	brne	.+2      	; 0x4bca <TWI_HAL_repeated_start+0x40>
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    4bca:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000056b4 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    56b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    56b8:	84 e8       	ldi	r24, 0x84	; 132
    56ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    56be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    56c2:	88 23       	and	r24, r24
    56c4:	e4 f7       	brge	.-8      	; 0x56be <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    56c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    56ca:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    56cc:	88 32       	cpi	r24, 0x28	; 40
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <TWI_HAL_write_byte+0x1e>
    56d0:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    56d2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00005a7e <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    5a7e:	84 ec       	ldi	r24, 0xC4	; 196
    5a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    5a84:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5a88:	88 23       	and	r24, r24
    5a8a:	e4 f7       	brge	.-8      	; 0x5a84 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    5a8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    5a90:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00005a92 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    5a92:	84 e8       	ldi	r24, 0x84	; 132
    5a94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    5a98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5a9c:	88 23       	and	r24, r24
    5a9e:	e4 f7       	brge	.-8      	; 0x5a98 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    5aa0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    5aa4:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00005b26 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    5b26:	84 e9       	ldi	r24, 0x94	; 148
    5b28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    5b2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5b30:	84 fd       	sbrc	r24, 4
    5b32:	fc cf       	rjmp	.-8      	; 0x5b2c <TWI_HAL_stop+0x6>
}
    5b34:	08 95       	ret

Disassembly of section .text.copy_buffer:

0000533e <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    533e:	bc 01       	movw	r22, r24
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	09 c0       	rjmp	.+18     	; 0x5356 <copy_buffer+0x18>
    5344:	fb 01       	movw	r30, r22
    5346:	e9 0f       	add	r30, r25
    5348:	f1 1d       	adc	r31, r1
    534a:	da 01       	movw	r26, r20
    534c:	a0 50       	subi	r26, 0x00	; 0
    534e:	bf 4f       	sbci	r27, 0xFF	; 255
    5350:	2c 91       	ld	r18, X
    5352:	20 83       	st	Z, r18
    5354:	9f 5f       	subi	r25, 0xFF	; 255
    5356:	49 2f       	mov	r20, r25
    5358:	50 e0       	ldi	r21, 0x00	; 0
    535a:	20 91 db 0f 	lds	r18, 0x0FDB	; 0x800fdb <rx_buffer_data_len>
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	22 50       	subi	r18, 0x02	; 2
    5362:	31 09       	sbc	r19, r1
    5364:	42 17       	cp	r20, r18
    5366:	53 07       	cpc	r21, r19
    5368:	6c f3       	brlt	.-38     	; 0x5344 <copy_buffer+0x6>
    536a:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00004d0a <uart0_hal_init>:
    4d0a:	e1 ec       	ldi	r30, 0xC1	; 193
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	80 81       	ld	r24, Z
    4d10:	80 61       	ori	r24, 0x10	; 16
    4d12:	80 83       	st	Z, r24
    4d14:	80 81       	ld	r24, Z
    4d16:	88 60       	ori	r24, 0x08	; 8
    4d18:	80 83       	st	Z, r24
    4d1a:	80 81       	ld	r24, Z
    4d1c:	80 68       	ori	r24, 0x80	; 128
    4d1e:	80 83       	st	Z, r24
    4d20:	80 81       	ld	r24, Z
    4d22:	80 64       	ori	r24, 0x40	; 64
    4d24:	80 83       	st	Z, r24
    4d26:	e0 ec       	ldi	r30, 0xC0	; 192
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	80 81       	ld	r24, Z
    4d2c:	82 60       	ori	r24, 0x02	; 2
    4d2e:	80 83       	st	Z, r24
    4d30:	86 e0       	ldi	r24, 0x06	; 6
    4d32:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    4d36:	80 e1       	ldi	r24, 0x10	; 16
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    4d3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    4d42:	78 94       	sei
    4d44:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000508c <uart0_hal_send_message>:
    508c:	dc 01       	movw	r26, r24
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	0b c0       	rjmp	.+22     	; 0x50a8 <uart0_hal_send_message+0x1c>
    5092:	29 2f       	mov	r18, r25
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	fd 01       	movw	r30, r26
    5098:	e2 0f       	add	r30, r18
    509a:	f3 1f       	adc	r31, r19
    509c:	40 81       	ld	r20, Z
    509e:	f9 01       	movw	r30, r18
    50a0:	ec 59       	subi	r30, 0x9C	; 156
    50a2:	fe 4f       	sbci	r31, 0xFE	; 254
    50a4:	40 83       	st	Z, r20
    50a6:	9f 5f       	subi	r25, 0xFF	; 255
    50a8:	96 17       	cp	r25, r22
    50aa:	98 f3       	brcs	.-26     	; 0x5092 <uart0_hal_send_message+0x6>
    50ac:	60 93 dd 0f 	sts	0x0FDD, r22	; 0x800fdd <tx_buffer_data_len>
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	80 93 dc 0f 	sts	0x0FDC, r24	; 0x800fdc <tx_buffer_cursor>
    50b6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    50ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    50be:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00003e6c <uart0_hal_send_string>:
    3e6c:	cf 92       	push	r12
    3e6e:	df 92       	push	r13
    3e70:	ef 92       	push	r14
    3e72:	0f 93       	push	r16
    3e74:	1f 93       	push	r17
    3e76:	cf 93       	push	r28
    3e78:	6b 01       	movw	r12, r22
    3e7a:	e8 2e       	mov	r14, r24
    3e7c:	c0 e0       	ldi	r28, 0x00	; 0
    3e7e:	12 c0       	rjmp	.+36     	; 0x3ea4 <uart0_hal_send_string+0x38>
    3e80:	8c 2f       	mov	r24, r28
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	4e 2d       	mov	r20, r14
    3e86:	96 01       	movw	r18, r12
    3e88:	20 0f       	add	r18, r16
    3e8a:	31 1f       	adc	r19, r17
    3e8c:	41 1d       	adc	r20, r1
    3e8e:	17 fd       	sbrc	r17, 7
    3e90:	4a 95       	dec	r20
    3e92:	f9 01       	movw	r30, r18
    3e94:	24 91       	lpm	r18, Z
    3e96:	47 fd       	sbrc	r20, 7
    3e98:	20 81       	ld	r18, Z
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	ec 59       	subi	r30, 0x9C	; 156
    3e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea0:	20 83       	st	Z, r18
    3ea2:	cf 5f       	subi	r28, 0xFF	; 255
    3ea4:	0c 2f       	mov	r16, r28
    3ea6:	10 e0       	ldi	r17, 0x00	; 0
    3ea8:	8e 2d       	mov	r24, r14
    3eaa:	b6 01       	movw	r22, r12
    3eac:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3eb0:	08 17       	cp	r16, r24
    3eb2:	19 07       	cpc	r17, r25
    3eb4:	28 f3       	brcs	.-54     	; 0x3e80 <uart0_hal_send_string+0x14>
    3eb6:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <tx_buffer_data_len>
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	80 93 dc 0f 	sts	0x0FDC, r24	; 0x800fdc <tx_buffer_cursor>
    3ec0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    3ec4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	ef 90       	pop	r14
    3ed0:	df 90       	pop	r13
    3ed2:	cf 90       	pop	r12
    3ed4:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00005baa <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    5baa:	90 91 da 0f 	lds	r25, 0x0FDA	; 0x800fda <rx_buffer_has_message>
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	91 11       	cpse	r25, r1
    5bb2:	01 c0       	rjmp	.+2      	; 0x5bb6 <uart0_hal_message_ready+0xc>
    5bb4:	80 e0       	ldi	r24, 0x00	; 0
}
    5bb6:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00005ce4 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    5ce4:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <rx_buffer_has_message>
	rx_buffer_data_len=0;
    5ce8:	10 92 db 0f 	sts	0x0FDB, r1	; 0x800fdb <rx_buffer_data_len>
    5cec:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

0000544c <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(char msg[]){
    544c:	0f 93       	push	r16
    544e:	1f 93       	push	r17
    5450:	cf 93       	push	r28
    5452:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    5454:	0e 94 9f 29 	call	0x533e	; 0x533e <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    5458:	c0 91 db 0f 	lds	r28, 0x0FDB	; 0x800fdb <rx_buffer_data_len>
    545c:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    545e:	f8 01       	movw	r30, r16
    5460:	ec 0f       	add	r30, r28
    5462:	f1 1d       	adc	r31, r1
    5464:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    5466:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <uart0_hal_clear_rx_buffer>
	return len;
}
    546a:	8c 2f       	mov	r24, r28
    546c:	cf 91       	pop	r28
    546e:	1f 91       	pop	r17
    5470:	0f 91       	pop	r16
    5472:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00004920 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	1f 92       	push	r1
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	9a b1       	in	r25, 0x0a	; 10
    492c:	92 60       	ori	r25, 0x02	; 2
    492e:	9a b9       	out	0x0a, r25	; 10
    4930:	e1 ec       	ldi	r30, 0xC1	; 193
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	90 81       	ld	r25, Z
    4936:	97 7f       	andi	r25, 0xF7	; 247
    4938:	90 83       	st	Z, r25
    493a:	9b b1       	in	r25, 0x0b	; 11
    493c:	9d 7f       	andi	r25, 0xFD	; 253
    493e:	9b b9       	out	0x0b, r25	; 11
    4940:	af e9       	ldi	r26, 0x9F	; 159
    4942:	bf e0       	ldi	r27, 0x0F	; 15
    4944:	11 97       	sbiw	r26, 0x01	; 1
    4946:	f1 f7       	brne	.-4      	; 0x4944 <uart0_hal_send_break+0x24>
    4948:	00 c0       	rjmp	.+0      	; 0x494a <uart0_hal_send_break+0x2a>
    494a:	00 00       	nop
    494c:	90 81       	ld	r25, Z
    494e:	98 60       	ori	r25, 0x08	; 8
    4950:	90 83       	st	Z, r25
    4952:	89 83       	std	Y+1, r24	; 0x01
    4954:	61 e0       	ldi	r22, 0x01	; 1
    4956:	ce 01       	movw	r24, r28
    4958:	01 96       	adiw	r24, 0x01	; 1
    495a:	0e 94 46 28 	call	0x508c	; 0x508c <uart0_hal_send_message>
    495e:	0f 90       	pop	r0
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	08 95       	ret

Disassembly of section .text.__vector_22:

00004722 <__vector_22>:
    4722:	1f 92       	push	r1
    4724:	0f 92       	push	r0
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	0f 92       	push	r0
    472a:	11 24       	eor	r1, r1
    472c:	8f 93       	push	r24
    472e:	ef 93       	push	r30
    4730:	ff 93       	push	r31
    4732:	e0 91 dc 0f 	lds	r30, 0x0FDC	; 0x800fdc <tx_buffer_cursor>
    4736:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <tx_buffer_data_len>
    473a:	e8 17       	cp	r30, r24
    473c:	58 f4       	brcc	.+22     	; 0x4754 <__vector_22+0x32>
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	8e 0f       	add	r24, r30
    4742:	80 93 dc 0f 	sts	0x0FDC, r24	; 0x800fdc <tx_buffer_cursor>
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	ec 59       	subi	r30, 0x9C	; 156
    474a:	fe 4f       	sbci	r31, 0xFE	; 254
    474c:	80 81       	ld	r24, Z
    474e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4752:	04 c0       	rjmp	.+8      	; 0x475c <__vector_22+0x3a>
    4754:	10 92 dc 0f 	sts	0x0FDC, r1	; 0x800fdc <tx_buffer_cursor>
    4758:	10 92 dd 0f 	sts	0x0FDD, r1	; 0x800fdd <tx_buffer_data_len>
    475c:	ff 91       	pop	r31
    475e:	ef 91       	pop	r30
    4760:	8f 91       	pop	r24
    4762:	0f 90       	pop	r0
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	0f 90       	pop	r0
    4768:	1f 90       	pop	r1
    476a:	18 95       	reti

Disassembly of section .text.__vector_20:

00003ca8 <__vector_20>:
    3ca8:	1f 92       	push	r1
    3caa:	0f 92       	push	r0
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	0f 92       	push	r0
    3cb0:	11 24       	eor	r1, r1
    3cb2:	2f 93       	push	r18
    3cb4:	8f 93       	push	r24
    3cb6:	9f 93       	push	r25
    3cb8:	ef 93       	push	r30
    3cba:	ff 93       	push	r31
    3cbc:	80 91 da 0f 	lds	r24, 0x0FDA	; 0x800fda <rx_buffer_has_message>
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	0e c0       	rjmp	.+28     	; 0x3ce0 <__vector_20+0x38>
    3cc4:	e0 91 db 0f 	lds	r30, 0x0FDB	; 0x800fdb <rx_buffer_data_len>
    3cc8:	e4 36       	cpi	r30, 0x64	; 100
    3cca:	50 f4       	brcc	.+20     	; 0x3ce0 <__vector_20+0x38>
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	8e 0f       	add	r24, r30
    3cd0:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <rx_buffer_data_len>
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3cda:	e0 50       	subi	r30, 0x00	; 0
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	80 83       	st	Z, r24
    3ce0:	80 91 db 0f 	lds	r24, 0x0FDB	; 0x800fdb <rx_buffer_data_len>
    3ce4:	83 30       	cpi	r24, 0x03	; 3
    3ce6:	80 f0       	brcs	.+32     	; 0x3d08 <__vector_20+0x60>
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	fc 01       	movw	r30, r24
    3cec:	e1 50       	subi	r30, 0x01	; 1
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	20 81       	ld	r18, Z
    3cf2:	2a 30       	cpi	r18, 0x0A	; 10
    3cf4:	49 f4       	brne	.+18     	; 0x3d08 <__vector_20+0x60>
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	e2 50       	subi	r30, 0x02	; 2
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	80 81       	ld	r24, Z
    3cfe:	8d 30       	cpi	r24, 0x0D	; 13
    3d00:	19 f4       	brne	.+6      	; 0x3d08 <__vector_20+0x60>
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	80 93 da 0f 	sts	0x0FDA, r24	; 0x800fda <rx_buffer_has_message>
    3d08:	ff 91       	pop	r31
    3d0a:	ef 91       	pop	r30
    3d0c:	9f 91       	pop	r25
    3d0e:	8f 91       	pop	r24
    3d10:	2f 91       	pop	r18
    3d12:	0f 90       	pop	r0
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	0f 90       	pop	r0
    3d18:	1f 90       	pop	r1
    3d1a:	18 95       	reti

Disassembly of section .text.copy_buffer:

0000536c <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    536c:	bc 01       	movw	r22, r24
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	09 c0       	rjmp	.+18     	; 0x5384 <copy_buffer+0x18>
    5372:	fb 01       	movw	r30, r22
    5374:	e9 0f       	add	r30, r25
    5376:	f1 1d       	adc	r31, r1
    5378:	da 01       	movw	r26, r20
    537a:	a0 58       	subi	r26, 0x80	; 128
    537c:	b1 4f       	sbci	r27, 0xF1	; 241
    537e:	2c 91       	ld	r18, X
    5380:	20 83       	st	Z, r18
    5382:	9f 5f       	subi	r25, 0xFF	; 255
    5384:	49 2f       	mov	r20, r25
    5386:	50 e0       	ldi	r21, 0x00	; 0
    5388:	20 91 df 0f 	lds	r18, 0x0FDF	; 0x800fdf <rx_buffer_data_len>
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	22 50       	subi	r18, 0x02	; 2
    5390:	31 09       	sbc	r19, r1
    5392:	42 17       	cp	r20, r18
    5394:	53 07       	cpc	r21, r19
    5396:	6c f3       	brlt	.-38     	; 0x5372 <copy_buffer+0x6>
    5398:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00004d46 <uart1_hal_init>:
    4d46:	e9 ec       	ldi	r30, 0xC9	; 201
    4d48:	f0 e0       	ldi	r31, 0x00	; 0
    4d4a:	80 81       	ld	r24, Z
    4d4c:	80 61       	ori	r24, 0x10	; 16
    4d4e:	80 83       	st	Z, r24
    4d50:	80 81       	ld	r24, Z
    4d52:	88 60       	ori	r24, 0x08	; 8
    4d54:	80 83       	st	Z, r24
    4d56:	80 81       	ld	r24, Z
    4d58:	80 68       	ori	r24, 0x80	; 128
    4d5a:	80 83       	st	Z, r24
    4d5c:	80 81       	ld	r24, Z
    4d5e:	80 64       	ori	r24, 0x40	; 64
    4d60:	80 83       	st	Z, r24
    4d62:	e8 ec       	ldi	r30, 0xC8	; 200
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	80 81       	ld	r24, Z
    4d68:	82 60       	ori	r24, 0x02	; 2
    4d6a:	80 83       	st	Z, r24
    4d6c:	86 e0       	ldi	r24, 0x06	; 6
    4d6e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    4d72:	80 e1       	ldi	r24, 0x10	; 16
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    4d7a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    4d7e:	78 94       	sei
    4d80:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00003840 <uart1_hal_send_string>:
    3840:	6f 92       	push	r6
    3842:	7f 92       	push	r7
    3844:	8f 92       	push	r8
    3846:	cf 92       	push	r12
    3848:	df 92       	push	r13
    384a:	ef 92       	push	r14
    384c:	3b 01       	movw	r6, r22
    384e:	88 2e       	mov	r8, r24
    3850:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <tx_buffer_data_len>
    3854:	81 11       	cpse	r24, r1
    3856:	fc cf       	rjmp	.-8      	; 0x3850 <uart1_hal_send_string+0x10>
    3858:	88 2d       	mov	r24, r8
    385a:	b3 01       	movw	r22, r6
    385c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3860:	bc 01       	movw	r22, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	12 c0       	rjmp	.+36     	; 0x388a <uart1_hal_send_string+0x4a>
    3866:	29 2f       	mov	r18, r25
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	e8 2c       	mov	r14, r8
    386c:	63 01       	movw	r12, r6
    386e:	c4 0e       	add	r12, r20
    3870:	d5 1e       	adc	r13, r21
    3872:	e1 1c       	adc	r14, r1
    3874:	57 fd       	sbrc	r21, 7
    3876:	ea 94       	dec	r14
    3878:	f6 01       	movw	r30, r12
    387a:	44 91       	lpm	r20, Z
    387c:	e7 fc       	sbrc	r14, 7
    387e:	40 81       	ld	r20, Z
    3880:	f9 01       	movw	r30, r18
    3882:	ec 5a       	subi	r30, 0xAC	; 172
    3884:	f2 4f       	sbci	r31, 0xF2	; 242
    3886:	40 83       	st	Z, r20
    3888:	9f 5f       	subi	r25, 0xFF	; 255
    388a:	49 2f       	mov	r20, r25
    388c:	50 e0       	ldi	r21, 0x00	; 0
    388e:	46 17       	cp	r20, r22
    3890:	57 07       	cpc	r21, r23
    3892:	48 f3       	brcs	.-46     	; 0x3866 <uart1_hal_send_string+0x26>
    3894:	fb 01       	movw	r30, r22
    3896:	ec 5a       	subi	r30, 0xAC	; 172
    3898:	f2 4f       	sbci	r31, 0xF2	; 242
    389a:	8d e0       	ldi	r24, 0x0D	; 13
    389c:	80 83       	st	Z, r24
    389e:	fb 01       	movw	r30, r22
    38a0:	eb 5a       	subi	r30, 0xAB	; 171
    38a2:	f2 4f       	sbci	r31, 0xF2	; 242
    38a4:	8a e0       	ldi	r24, 0x0A	; 10
    38a6:	80 83       	st	Z, r24
    38a8:	6e 5f       	subi	r22, 0xFE	; 254
    38aa:	60 93 e1 0f 	sts	0x0FE1, r22	; 0x800fe1 <tx_buffer_data_len>
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	80 93 e0 0f 	sts	0x0FE0, r24	; 0x800fe0 <tx_buffer_cursor>
    38b4:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <tx_buffer>
    38b8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    38bc:	ef 90       	pop	r14
    38be:	df 90       	pop	r13
    38c0:	cf 90       	pop	r12
    38c2:	8f 90       	pop	r8
    38c4:	7f 90       	pop	r7
    38c6:	6f 90       	pop	r6
    38c8:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00005bb8 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    5bb8:	90 91 de 0f 	lds	r25, 0x0FDE	; 0x800fde <rx_buffer_has_message>
    5bbc:	81 e0       	ldi	r24, 0x01	; 1
    5bbe:	91 11       	cpse	r25, r1
    5bc0:	01 c0       	rjmp	.+2      	; 0x5bc4 <uart1_hal_message_ready+0xc>
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
}
    5bc4:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00005bc6 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    5bc6:	90 91 df 0f 	lds	r25, 0x0FDF	; 0x800fdf <rx_buffer_data_len>
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	95 39       	cpi	r25, 0x95	; 149
    5bce:	08 f4       	brcc	.+2      	; 0x5bd2 <uart1_hal_rx_full+0xc>
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
}
    5bd2:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00005cee <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    5cee:	10 92 de 0f 	sts	0x0FDE, r1	; 0x800fde <rx_buffer_has_message>
	rx_buffer_data_len=0;
    5cf2:	10 92 df 0f 	sts	0x0FDF, r1	; 0x800fdf <rx_buffer_data_len>
    5cf6:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00005474 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5474:	0f 93       	push	r16
    5476:	1f 93       	push	r17
    5478:	cf 93       	push	r28
    547a:	8c 01       	movw	r16, r24
    547c:	0e 94 b6 29 	call	0x536c	; 0x536c <copy_buffer>
    5480:	c0 91 df 0f 	lds	r28, 0x0FDF	; 0x800fdf <rx_buffer_data_len>
    5484:	c2 50       	subi	r28, 0x02	; 2
    5486:	f8 01       	movw	r30, r16
    5488:	ec 0f       	add	r30, r28
    548a:	f1 1d       	adc	r31, r1
    548c:	10 82       	st	Z, r1
    548e:	0e 94 77 2e 	call	0x5cee	; 0x5cee <uart1_hal_clear_rx_buffer>
    5492:	8c 2f       	mov	r24, r28
    5494:	cf 91       	pop	r28
    5496:	1f 91       	pop	r17
    5498:	0f 91       	pop	r16
    549a:	08 95       	ret

Disassembly of section .text.__vector_30:

0000476c <__vector_30>:
    476c:	1f 92       	push	r1
    476e:	0f 92       	push	r0
    4770:	0f b6       	in	r0, 0x3f	; 63
    4772:	0f 92       	push	r0
    4774:	11 24       	eor	r1, r1
    4776:	8f 93       	push	r24
    4778:	ef 93       	push	r30
    477a:	ff 93       	push	r31
    477c:	e0 91 e0 0f 	lds	r30, 0x0FE0	; 0x800fe0 <tx_buffer_cursor>
    4780:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <tx_buffer_data_len>
    4784:	e8 17       	cp	r30, r24
    4786:	58 f4       	brcc	.+22     	; 0x479e <__vector_30+0x32>
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	8e 0f       	add	r24, r30
    478c:	80 93 e0 0f 	sts	0x0FE0, r24	; 0x800fe0 <tx_buffer_cursor>
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	ec 5a       	subi	r30, 0xAC	; 172
    4794:	f2 4f       	sbci	r31, 0xF2	; 242
    4796:	80 81       	ld	r24, Z
    4798:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    479c:	04 c0       	rjmp	.+8      	; 0x47a6 <__vector_30+0x3a>
    479e:	10 92 e0 0f 	sts	0x0FE0, r1	; 0x800fe0 <tx_buffer_cursor>
    47a2:	10 92 e1 0f 	sts	0x0FE1, r1	; 0x800fe1 <tx_buffer_data_len>
    47a6:	ff 91       	pop	r31
    47a8:	ef 91       	pop	r30
    47aa:	8f 91       	pop	r24
    47ac:	0f 90       	pop	r0
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	0f 90       	pop	r0
    47b2:	1f 90       	pop	r1
    47b4:	18 95       	reti

Disassembly of section .text.__vector_28:

00003d1c <__vector_28>:
    3d1c:	1f 92       	push	r1
    3d1e:	0f 92       	push	r0
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	0f 92       	push	r0
    3d24:	11 24       	eor	r1, r1
    3d26:	2f 93       	push	r18
    3d28:	8f 93       	push	r24
    3d2a:	9f 93       	push	r25
    3d2c:	ef 93       	push	r30
    3d2e:	ff 93       	push	r31
    3d30:	80 91 de 0f 	lds	r24, 0x0FDE	; 0x800fde <rx_buffer_has_message>
    3d34:	81 11       	cpse	r24, r1
    3d36:	0e c0       	rjmp	.+28     	; 0x3d54 <__vector_28+0x38>
    3d38:	e0 91 df 0f 	lds	r30, 0x0FDF	; 0x800fdf <rx_buffer_data_len>
    3d3c:	e6 39       	cpi	r30, 0x96	; 150
    3d3e:	50 f4       	brcc	.+20     	; 0x3d54 <__vector_28+0x38>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	8e 0f       	add	r24, r30
    3d44:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <rx_buffer_data_len>
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3d4e:	e0 58       	subi	r30, 0x80	; 128
    3d50:	f1 4f       	sbci	r31, 0xF1	; 241
    3d52:	80 83       	st	Z, r24
    3d54:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <rx_buffer_data_len>
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	e1 58       	subi	r30, 0x81	; 129
    3d5e:	f1 4f       	sbci	r31, 0xF1	; 241
    3d60:	20 81       	ld	r18, Z
    3d62:	2a 30       	cpi	r18, 0x0A	; 10
    3d64:	49 f4       	brne	.+18     	; 0x3d78 <__vector_28+0x5c>
    3d66:	fc 01       	movw	r30, r24
    3d68:	e2 58       	subi	r30, 0x82	; 130
    3d6a:	f1 4f       	sbci	r31, 0xF1	; 241
    3d6c:	80 81       	ld	r24, Z
    3d6e:	8d 30       	cpi	r24, 0x0D	; 13
    3d70:	19 f4       	brne	.+6      	; 0x3d78 <__vector_28+0x5c>
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	80 93 de 0f 	sts	0x0FDE, r24	; 0x800fde <rx_buffer_has_message>
    3d78:	ff 91       	pop	r31
    3d7a:	ef 91       	pop	r30
    3d7c:	9f 91       	pop	r25
    3d7e:	8f 91       	pop	r24
    3d80:	2f 91       	pop	r18
    3d82:	0f 90       	pop	r0
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	0f 90       	pop	r0
    3d88:	1f 90       	pop	r1
    3d8a:	18 95       	reti

Disassembly of section .text.main:

000056d4 <main>:
#include "PROGRAMS/MAINPG/MAINPG.h"
#include "PROGRAMS/CONFIG_MODE/CONFIG_MODE.h"

int main(void)
{
	test_runner();
    56d4:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <test_runner>
	
	while(1)
    {
		MAINPG_start();
    56d8:	0e 94 ad 09 	call	0x135a	; 0x135a <MAINPG_start>
		CONF_enter();
    56dc:	0e 94 c4 10 	call	0x2188	; 0x2188 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56e0:	2f ef       	ldi	r18, 0xFF	; 255
    56e2:	8d e3       	ldi	r24, 0x3D	; 61
    56e4:	99 e4       	ldi	r25, 0x49	; 73
    56e6:	21 50       	subi	r18, 0x01	; 1
    56e8:	80 40       	sbci	r24, 0x00	; 0
    56ea:	90 40       	sbci	r25, 0x00	; 0
    56ec:	e1 f7       	brne	.-8      	; 0x56e6 <main+0x12>
    56ee:	00 c0       	rjmp	.+0      	; 0x56f0 <main+0x1c>
    56f0:	00 00       	nop
    56f2:	f2 cf       	rjmp	.-28     	; 0x56d8 <main+0x4>

Disassembly of section .text.vect_ADC_heat_timeout:

00005938 <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    5938:	80 91 e2 0f 	lds	r24, 0x0FE2	; 0x800fe2 <cntPowerUpTime>
    593c:	8f 5f       	subi	r24, 0xFF	; 255
    593e:	80 93 e2 0f 	sts	0x0FE2, r24	; 0x800fe2 <cntPowerUpTime>
    5942:	90 91 e3 0f 	lds	r25, 0x0FE3	; 0x800fe3 <_powerUpTime>
    5946:	89 17       	cp	r24, r25
    5948:	10 f0       	brcs	.+4      	; 0x594e <vect_ADC_heat_timeout+0x16>
    594a:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <TC0_HAL_stop>
    594e:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00003fa8 <ADC_init_sampling>:
    3fa8:	cf 93       	push	r28
    3faa:	50 93 c9 0f 	sts	0x0FC9, r21	; 0x800fc9 <_data+0x1>
    3fae:	40 93 c8 0f 	sts	0x0FC8, r20	; 0x800fc8 <_data>
    3fb2:	70 93 cb 0f 	sts	0x0FCB, r23	; 0x800fcb <_nSamples+0x1>
    3fb6:	60 93 ca 0f 	sts	0x0FCA, r22	; 0x800fca <_nSamples>
    3fba:	10 92 c7 0f 	sts	0x0FC7, r1	; 0x800fc7 <cntSamples+0x1>
    3fbe:	10 92 c6 0f 	sts	0x0FC6, r1	; 0x800fc6 <cntSamples>
    3fc2:	63 eb       	ldi	r22, 0xB3	; 179
    3fc4:	74 e2       	ldi	r23, 0x24	; 36
    3fc6:	0e 94 3a 2b 	call	0x5674	; 0x5674 <TC0_HAL_init>
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <PM_HAL_adc_power>
    3fd0:	2f ef       	ldi	r18, 0xFF	; 255
    3fd2:	83 ec       	ldi	r24, 0xC3	; 195
    3fd4:	99 e0       	ldi	r25, 0x09	; 9
    3fd6:	21 50       	subi	r18, 0x01	; 1
    3fd8:	80 40       	sbci	r24, 0x00	; 0
    3fda:	90 40       	sbci	r25, 0x00	; 0
    3fdc:	e1 f7       	brne	.-8      	; 0x3fd6 <ADC_init_sampling+0x2e>
    3fde:	00 c0       	rjmp	.+0      	; 0x3fe0 <ADC_init_sampling+0x38>
    3fe0:	00 00       	nop
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	8d e4       	ldi	r24, 0x4D	; 77
    3fe6:	0e 94 00 24 	call	0x4800	; 0x4800 <TWI_HAL_start>
    3fea:	c8 2f       	mov	r28, r24
    3fec:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <TWI_HAL_stop>
    3ff0:	cc 23       	and	r28, r28
    3ff2:	51 f0       	breq	.+20     	; 0x4008 <ADC_init_sampling+0x60>
    3ff4:	10 92 c9 0f 	sts	0x0FC9, r1	; 0x800fc9 <_data+0x1>
    3ff8:	10 92 c8 0f 	sts	0x0FC8, r1	; 0x800fc8 <_data>
    3ffc:	10 92 cb 0f 	sts	0x0FCB, r1	; 0x800fcb <_nSamples+0x1>
    4000:	10 92 ca 0f 	sts	0x0FCA, r1	; 0x800fca <_nSamples>
    4004:	82 e0       	ldi	r24, 0x02	; 2
    4006:	01 c0       	rjmp	.+2      	; 0x400a <ADC_init_sampling+0x62>
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	cf 91       	pop	r28
    400c:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00005aa6 <ADC_deinit_sampling>:
    5aa6:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <TC0_HAL_stop>
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <PM_HAL_adc_power>
    5ab0:	10 92 c9 0f 	sts	0x0FC9, r1	; 0x800fc9 <_data+0x1>
    5ab4:	10 92 c8 0f 	sts	0x0FC8, r1	; 0x800fc8 <_data>
    5ab8:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00005826 <ADC_is_sampling_done>:
    5826:	40 91 c6 0f 	lds	r20, 0x0FC6	; 0x800fc6 <cntSamples>
    582a:	50 91 c7 0f 	lds	r21, 0x0FC7	; 0x800fc7 <cntSamples+0x1>
    582e:	20 91 ca 0f 	lds	r18, 0x0FCA	; 0x800fca <_nSamples>
    5832:	30 91 cb 0f 	lds	r19, 0x0FCB	; 0x800fcb <_nSamples+0x1>
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	42 17       	cp	r20, r18
    583a:	53 07       	cpc	r21, r19
    583c:	08 f4       	brcc	.+2      	; 0x5840 <ADC_is_sampling_done+0x1a>
    583e:	80 e0       	ldi	r24, 0x00	; 0
    5840:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

000056f4 <ADC_meth_sens_power_on>:
    56f4:	80 93 e3 0f 	sts	0x0FE3, r24	; 0x800fe3 <_powerUpTime>
    56f8:	10 92 e2 0f 	sts	0x0FE2, r1	; 0x800fe2 <cntPowerUpTime>
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <PM_HAL_meth_power>
    5702:	6c e9       	ldi	r22, 0x9C	; 156
    5704:	7c e2       	ldi	r23, 0x2C	; 44
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	0e 94 3a 2b 	call	0x5674	; 0x5674 <TC0_HAL_init>
    570c:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <TC0_HAL_start>
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00005ae0 <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    5ae0:	20 91 e2 0f 	lds	r18, 0x0FE2	; 0x800fe2 <cntPowerUpTime>
    5ae4:	90 91 e3 0f 	lds	r25, 0x0FE3	; 0x800fe3 <_powerUpTime>
    5ae8:	81 e0       	ldi	r24, 0x01	; 1
    5aea:	29 17       	cp	r18, r25
    5aec:	08 f4       	brcc	.+2      	; 0x5af0 <ADC_meth_sens_ready+0x10>
    5aee:	80 e0       	ldi	r24, 0x00	; 0
}
    5af0:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

000035ec <calc_ppm_methane>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    35ec:	8f 92       	push	r8
    35ee:	9f 92       	push	r9
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	bc 01       	movw	r22, r24
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__floatunsisf>
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e8       	ldi	r20, 0x80	; 128
    360c:	59 e3       	ldi	r21, 0x39	; 57
    360e:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__mulsf3>
    3612:	80 90 ba 0f 	lds	r8, 0x0FBA	; 0x800fba <Vc>
    3616:	90 90 bb 0f 	lds	r9, 0x0FBB	; 0x800fbb <Vc+0x1>
    361a:	a0 90 bc 0f 	lds	r10, 0x0FBC	; 0x800fbc <Vc+0x2>
    361e:	b0 90 bd 0f 	lds	r11, 0x0FBD	; 0x800fbd <Vc+0x3>
    3622:	a5 01       	movw	r20, r10
    3624:	94 01       	movw	r18, r8
    3626:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__mulsf3>
    362a:	6b 01       	movw	r12, r22
    362c:	7c 01       	movw	r14, r24
    362e:	9b 01       	movw	r18, r22
    3630:	ac 01       	movw	r20, r24
    3632:	c5 01       	movw	r24, r10
    3634:	b4 01       	movw	r22, r8
    3636:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__subsf3>
    363a:	a7 01       	movw	r20, r14
    363c:	96 01       	movw	r18, r12
    363e:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__divsf3>
    3642:	20 91 b6 0f 	lds	r18, 0x0FB6	; 0x800fb6 <RRL>
    3646:	30 91 b7 0f 	lds	r19, 0x0FB7	; 0x800fb7 <RRL+0x1>
    364a:	40 91 b8 0f 	lds	r20, 0x0FB8	; 0x800fb8 <RRL+0x2>
    364e:	50 91 b9 0f 	lds	r21, 0x0FB9	; 0x800fb9 <RRL+0x3>
    3652:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__mulsf3>
    3656:	20 91 b2 0f 	lds	r18, 0x0FB2	; 0x800fb2 <PPM_factor>
    365a:	30 91 b3 0f 	lds	r19, 0x0FB3	; 0x800fb3 <PPM_factor+0x1>
    365e:	40 91 b4 0f 	lds	r20, 0x0FB4	; 0x800fb4 <PPM_factor+0x2>
    3662:	50 91 b5 0f 	lds	r21, 0x0FB5	; 0x800fb5 <PPM_factor+0x3>
    3666:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__mulsf3>
    366a:	0e 94 65 20 	call	0x40ca	; 0x40ca <__fixunssfsi>
    366e:	cb 01       	movw	r24, r22
    3670:	ff 90       	pop	r15
    3672:	ef 90       	pop	r14
    3674:	df 90       	pop	r13
    3676:	cf 90       	pop	r12
    3678:	bf 90       	pop	r11
    367a:	af 90       	pop	r10
    367c:	9f 90       	pop	r9
    367e:	8f 90       	pop	r8
    3680:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00004232 <ADC_get_value>:
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	00 d0       	rcall	.+0      	; 0x423c <ADC_get_value+0xa>
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	8c 01       	movw	r16, r24
    4242:	8f ef       	ldi	r24, 0xFF	; 255
    4244:	9f ef       	ldi	r25, 0xFF	; 255
    4246:	f8 01       	movw	r30, r16
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	80 83       	st	Z, r24
    424c:	42 e0       	ldi	r20, 0x02	; 2
    424e:	be 01       	movw	r22, r28
    4250:	6f 5f       	subi	r22, 0xFF	; 255
    4252:	7f 4f       	sbci	r23, 0xFF	; 255
    4254:	8d e4       	ldi	r24, 0x4D	; 77
    4256:	0e 94 9d 2a 	call	0x553a	; 0x553a <TWI_API_read_data_ack_end_nack_stop>
    425a:	81 11       	cpse	r24, r1
    425c:	0d c0       	rjmp	.+26     	; 0x4278 <ADC_get_value+0x46>
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	98 2f       	mov	r25, r24
    4264:	88 27       	eor	r24, r24
    4266:	2a 81       	ldd	r18, Y+2	; 0x02
    4268:	82 2b       	or	r24, r18
    426a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <calc_ppm_methane>
    426e:	f8 01       	movw	r30, r16
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	80 83       	st	Z, r24
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	01 c0       	rjmp	.+2      	; 0x427a <ADC_get_value+0x48>
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	1f 91       	pop	r17
    4284:	0f 91       	pop	r16
    4286:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00004966 <vect_ADC_do_sample>:
    4966:	80 91 c8 0f 	lds	r24, 0x0FC8	; 0x800fc8 <_data>
    496a:	90 91 c9 0f 	lds	r25, 0x0FC9	; 0x800fc9 <_data+0x1>
    496e:	20 91 c6 0f 	lds	r18, 0x0FC6	; 0x800fc6 <cntSamples>
    4972:	30 91 c7 0f 	lds	r19, 0x0FC7	; 0x800fc7 <cntSamples+0x1>
    4976:	a9 01       	movw	r20, r18
    4978:	4f 5f       	subi	r20, 0xFF	; 255
    497a:	5f 4f       	sbci	r21, 0xFF	; 255
    497c:	50 93 c7 0f 	sts	0x0FC7, r21	; 0x800fc7 <cntSamples+0x1>
    4980:	40 93 c6 0f 	sts	0x0FC6, r20	; 0x800fc6 <cntSamples>
    4984:	22 0f       	add	r18, r18
    4986:	33 1f       	adc	r19, r19
    4988:	82 0f       	add	r24, r18
    498a:	93 1f       	adc	r25, r19
    498c:	0e 94 19 21 	call	0x4232	; 0x4232 <ADC_get_value>
    4990:	20 91 c6 0f 	lds	r18, 0x0FC6	; 0x800fc6 <cntSamples>
    4994:	30 91 c7 0f 	lds	r19, 0x0FC7	; 0x800fc7 <cntSamples+0x1>
    4998:	80 91 ca 0f 	lds	r24, 0x0FCA	; 0x800fca <_nSamples>
    499c:	90 91 cb 0f 	lds	r25, 0x0FCB	; 0x800fcb <_nSamples+0x1>
    49a0:	28 17       	cp	r18, r24
    49a2:	39 07       	cpc	r19, r25
    49a4:	10 f0       	brcs	.+4      	; 0x49aa <vect_ADC_do_sample+0x44>
    49a6:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <TC0_HAL_stop>
    49aa:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00005c86 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    5c86:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <TC0_HAL_start>
	vect_ADC_do_sample();
    5c8a:	0e 94 b3 24 	call	0x4966	; 0x4966 <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    5c8e:	80 e0       	ldi	r24, 0x00	; 0
    5c90:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00005998 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    5998:	60 e4       	ldi	r22, 0x40	; 64
    599a:	70 e0       	ldi	r23, 0x00	; 0
    599c:	80 e8       	ldi	r24, 0x80	; 128
    599e:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <eeprom_read_byte>
    59a2:	91 e0       	ldi	r25, 0x01	; 1
    59a4:	81 11       	cpse	r24, r1
    59a6:	01 c0       	rjmp	.+2      	; 0x59aa <EM_has_deveui+0x12>
    59a8:	90 e0       	ldi	r25, 0x00	; 0
}
    59aa:	89 2f       	mov	r24, r25
    59ac:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

000059ae <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    59ae:	61 e4       	ldi	r22, 0x41	; 65
    59b0:	70 e0       	ldi	r23, 0x00	; 0
    59b2:	80 e8       	ldi	r24, 0x80	; 128
    59b4:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <eeprom_read_byte>
    59b8:	91 e0       	ldi	r25, 0x01	; 1
    59ba:	81 11       	cpse	r24, r1
    59bc:	01 c0       	rjmp	.+2      	; 0x59c0 <EM_has_appeui+0x12>
    59be:	90 e0       	ldi	r25, 0x00	; 0
}
    59c0:	89 2f       	mov	r24, r25
    59c2:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

000059c4 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    59c4:	62 e4       	ldi	r22, 0x42	; 66
    59c6:	70 e0       	ldi	r23, 0x00	; 0
    59c8:	80 e8       	ldi	r24, 0x80	; 128
    59ca:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <eeprom_read_byte>
    59ce:	91 e0       	ldi	r25, 0x01	; 1
    59d0:	81 11       	cpse	r24, r1
    59d2:	01 c0       	rjmp	.+2      	; 0x59d6 <EM_has_appkey+0x12>
    59d4:	90 e0       	ldi	r25, 0x00	; 0
}
    59d6:	89 2f       	mov	r24, r25
    59d8:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00004dbc <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    4dbc:	cf 92       	push	r12
    4dbe:	df 92       	push	r13
    4dc0:	ef 92       	push	r14
    4dc2:	6b 01       	movw	r12, r22
    4dc4:	e8 2e       	mov	r14, r24
    4dc6:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4dca:	40 97       	sbiw	r24, 0x10	; 16
    4dcc:	79 f4       	brne	.+30     	; 0x4dec <EM_set_deveui+0x30>
    4dce:	20 e1       	ldi	r18, 0x10	; 16
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e0       	ldi	r20, 0x00	; 0
    4dd4:	50 e0       	ldi	r21, 0x00	; 0
    4dd6:	8e 2d       	mov	r24, r14
    4dd8:	b6 01       	movw	r22, r12
    4dda:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <eeprom_update_block>
    4dde:	61 e0       	ldi	r22, 0x01	; 1
    4de0:	80 e4       	ldi	r24, 0x40	; 64
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <eeprom_update_byte>
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	01 c0       	rjmp	.+2      	; 0x4dee <EM_set_deveui+0x32>
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	ef 90       	pop	r14
    4df0:	df 90       	pop	r13
    4df2:	cf 90       	pop	r12
    4df4:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000051ee <EM_get_deveui>:
    51ee:	0f 93       	push	r16
    51f0:	1f 93       	push	r17
    51f2:	cf 93       	push	r28
    51f4:	8c 01       	movw	r16, r24
    51f6:	0e 94 cc 2c 	call	0x5998	; 0x5998 <EM_has_deveui>
    51fa:	c8 2f       	mov	r28, r24
    51fc:	88 23       	and	r24, r24
    51fe:	51 f0       	breq	.+20     	; 0x5214 <EM_get_deveui+0x26>
    5200:	20 e1       	ldi	r18, 0x10	; 16
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e0       	ldi	r20, 0x00	; 0
    5206:	50 e0       	ldi	r21, 0x00	; 0
    5208:	60 e0       	ldi	r22, 0x00	; 0
    520a:	c8 01       	movw	r24, r16
    520c:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_read_block>
    5210:	f8 01       	movw	r30, r16
    5212:	10 8a       	std	Z+16, r1	; 0x10
    5214:	8c 2f       	mov	r24, r28
    5216:	cf 91       	pop	r28
    5218:	1f 91       	pop	r17
    521a:	0f 91       	pop	r16
    521c:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00004df6 <EM_set_appeui>:
    4df6:	cf 92       	push	r12
    4df8:	df 92       	push	r13
    4dfa:	ef 92       	push	r14
    4dfc:	6b 01       	movw	r12, r22
    4dfe:	e8 2e       	mov	r14, r24
    4e00:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4e04:	40 97       	sbiw	r24, 0x10	; 16
    4e06:	79 f4       	brne	.+30     	; 0x4e26 <EM_set_appeui+0x30>
    4e08:	20 e1       	ldi	r18, 0x10	; 16
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	40 e1       	ldi	r20, 0x10	; 16
    4e0e:	50 e0       	ldi	r21, 0x00	; 0
    4e10:	8e 2d       	mov	r24, r14
    4e12:	b6 01       	movw	r22, r12
    4e14:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <eeprom_update_block>
    4e18:	61 e0       	ldi	r22, 0x01	; 1
    4e1a:	81 e4       	ldi	r24, 0x41	; 65
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <eeprom_update_byte>
    4e22:	81 e0       	ldi	r24, 0x01	; 1
    4e24:	01 c0       	rjmp	.+2      	; 0x4e28 <EM_set_appeui+0x32>
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	ef 90       	pop	r14
    4e2a:	df 90       	pop	r13
    4e2c:	cf 90       	pop	r12
    4e2e:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

0000521e <EM_get_appeui>:
    521e:	0f 93       	push	r16
    5220:	1f 93       	push	r17
    5222:	cf 93       	push	r28
    5224:	8c 01       	movw	r16, r24
    5226:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <EM_has_appeui>
    522a:	c8 2f       	mov	r28, r24
    522c:	88 23       	and	r24, r24
    522e:	51 f0       	breq	.+20     	; 0x5244 <EM_get_appeui+0x26>
    5230:	20 e1       	ldi	r18, 0x10	; 16
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	40 e1       	ldi	r20, 0x10	; 16
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	60 e0       	ldi	r22, 0x00	; 0
    523a:	c8 01       	movw	r24, r16
    523c:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_read_block>
    5240:	f8 01       	movw	r30, r16
    5242:	10 8a       	std	Z+16, r1	; 0x10
    5244:	8c 2f       	mov	r24, r28
    5246:	cf 91       	pop	r28
    5248:	1f 91       	pop	r17
    524a:	0f 91       	pop	r16
    524c:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00004e30 <EM_set_appkey>:
    4e30:	cf 92       	push	r12
    4e32:	df 92       	push	r13
    4e34:	ef 92       	push	r14
    4e36:	6b 01       	movw	r12, r22
    4e38:	e8 2e       	mov	r14, r24
    4e3a:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4e3e:	80 97       	sbiw	r24, 0x20	; 32
    4e40:	79 f4       	brne	.+30     	; 0x4e60 <EM_set_appkey+0x30>
    4e42:	20 e2       	ldi	r18, 0x20	; 32
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e2       	ldi	r20, 0x20	; 32
    4e48:	50 e0       	ldi	r21, 0x00	; 0
    4e4a:	8e 2d       	mov	r24, r14
    4e4c:	b6 01       	movw	r22, r12
    4e4e:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <eeprom_update_block>
    4e52:	61 e0       	ldi	r22, 0x01	; 1
    4e54:	82 e4       	ldi	r24, 0x42	; 66
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <eeprom_update_byte>
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	01 c0       	rjmp	.+2      	; 0x4e62 <EM_set_appkey+0x32>
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	ef 90       	pop	r14
    4e64:	df 90       	pop	r13
    4e66:	cf 90       	pop	r12
    4e68:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

0000524e <EM_get_appkey>:
    524e:	0f 93       	push	r16
    5250:	1f 93       	push	r17
    5252:	cf 93       	push	r28
    5254:	8c 01       	movw	r16, r24
    5256:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <EM_has_appkey>
    525a:	c8 2f       	mov	r28, r24
    525c:	88 23       	and	r24, r24
    525e:	51 f0       	breq	.+20     	; 0x5274 <EM_get_appkey+0x26>
    5260:	20 e2       	ldi	r18, 0x20	; 32
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	40 e2       	ldi	r20, 0x20	; 32
    5266:	50 e0       	ldi	r21, 0x00	; 0
    5268:	60 e0       	ldi	r22, 0x00	; 0
    526a:	c8 01       	movw	r24, r16
    526c:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_read_block>
    5270:	f8 01       	movw	r30, r16
    5272:	10 a2       	std	Z+32, r1	; 0x20
    5274:	8c 2f       	mov	r24, r28
    5276:	cf 91       	pop	r28
    5278:	1f 91       	pop	r17
    527a:	0f 91       	pop	r16
    527c:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00005bd4 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    5bd4:	ab 01       	movw	r20, r22
    5bd6:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    5bd8:	83 e4       	ldi	r24, 0x43	; 67
    5bda:	90 e0       	ldi	r25, 0x00	; 0
    5bdc:	0e 94 c0 2c 	call	0x5980	; 0x5980 <eeprom_update_dword>
    5be0:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00005754 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    5754:	cf 93       	push	r28
    5756:	df 93       	push	r29
    5758:	ec 01       	movw	r28, r24
    575a:	63 e4       	ldi	r22, 0x43	; 67
    575c:	70 e0       	ldi	r23, 0x00	; 0
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <eeprom_read_dword>
    5764:	68 83       	st	Y, r22
    5766:	79 83       	std	Y+1, r23	; 0x01
    5768:	8a 83       	std	Y+2, r24	; 0x02
    576a:	9b 83       	std	Y+3, r25	; 0x03
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00005be2 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    5be2:	ab 01       	movw	r20, r22
    5be4:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    5be6:	87 e4       	ldi	r24, 0x47	; 71
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	0e 94 c0 2c 	call	0x5980	; 0x5980 <eeprom_update_dword>
    5bee:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00005772 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    5772:	cf 93       	push	r28
    5774:	df 93       	push	r29
    5776:	ec 01       	movw	r28, r24
    5778:	67 e4       	ldi	r22, 0x47	; 71
    577a:	70 e0       	ldi	r23, 0x00	; 0
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <eeprom_read_dword>
    5782:	68 83       	st	Y, r22
    5784:	79 83       	std	Y+1, r23	; 0x01
    5786:	8a 83       	std	Y+2, r24	; 0x02
    5788:	9b 83       	std	Y+3, r25	; 0x03
    578a:	df 91       	pop	r29
    578c:	cf 91       	pop	r28
    578e:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00005bf0 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    5bf0:	ab 01       	movw	r20, r22
    5bf2:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    5bf4:	8b e4       	ldi	r24, 0x4B	; 75
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <eeprom_update_dword>
    5bfc:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00005790 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    5790:	cf 93       	push	r28
    5792:	df 93       	push	r29
    5794:	ec 01       	movw	r28, r24
    5796:	6b e4       	ldi	r22, 0x4B	; 75
    5798:	70 e0       	ldi	r23, 0x00	; 0
    579a:	80 e0       	ldi	r24, 0x00	; 0
    579c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <eeprom_read_dword>
    57a0:	68 83       	st	Y, r22
    57a2:	79 83       	std	Y+1, r23	; 0x01
    57a4:	8a 83       	std	Y+2, r24	; 0x02
    57a6:	9b 83       	std	Y+3, r25	; 0x03
    57a8:	df 91       	pop	r29
    57aa:	cf 91       	pop	r28
    57ac:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00005bfe <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    5bfe:	24 2f       	mov	r18, r20
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	44 e6       	ldi	r20, 0x64	; 100
    5c04:	50 e0       	ldi	r21, 0x00	; 0
    5c06:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <eeprom_update_block>
    5c0a:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00005b36 <EM_get_collections>:
}
void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    5b36:	26 2f       	mov	r18, r22
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	44 e6       	ldi	r20, 0x64	; 100
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	60 e0       	ldi	r22, 0x00	; 0
    5b40:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_read_block>
    5b44:	08 95       	ret

Disassembly of section .text.cb_blink:

00005d88 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    5d88:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <PM_HAL_LED_toggle>
    5d8c:	08 95       	ret

Disassembly of section .text.blink:

000045a6 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    45a6:	cf 93       	push	r28
    45a8:	df 93       	push	r29
    45aa:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    45ac:	c0 e0       	ldi	r28, 0x00	; 0
    45ae:	19 c0       	rjmp	.+50     	; 0x45e2 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
    45b6:	2f ef       	ldi	r18, 0xFF	; 255
    45b8:	82 e5       	ldi	r24, 0x52	; 82
    45ba:	97 e0       	ldi	r25, 0x07	; 7
    45bc:	21 50       	subi	r18, 0x01	; 1
    45be:	80 40       	sbci	r24, 0x00	; 0
    45c0:	90 40       	sbci	r25, 0x00	; 0
    45c2:	e1 f7       	brne	.-8      	; 0x45bc <blink+0x16>
    45c4:	00 c0       	rjmp	.+0      	; 0x45c6 <blink+0x20>
    45c6:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
    45ce:	2f ef       	ldi	r18, 0xFF	; 255
    45d0:	82 e5       	ldi	r24, 0x52	; 82
    45d2:	97 e0       	ldi	r25, 0x07	; 7
    45d4:	21 50       	subi	r18, 0x01	; 1
    45d6:	80 40       	sbci	r24, 0x00	; 0
    45d8:	90 40       	sbci	r25, 0x00	; 0
    45da:	e1 f7       	brne	.-8      	; 0x45d4 <blink+0x2e>
    45dc:	00 c0       	rjmp	.+0      	; 0x45de <blink+0x38>
    45de:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    45e0:	cf 5f       	subi	r28, 0xFF	; 255
    45e2:	cd 17       	cp	r28, r29
    45e4:	28 f3       	brcs	.-54     	; 0x45b0 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
}
    45ec:	df 91       	pop	r29
    45ee:	cf 91       	pop	r28
    45f0:	08 95       	ret

Disassembly of section .text.err_code:

00004e6a <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    4e6a:	cf 93       	push	r28
    4e6c:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
    4e74:	2f ef       	ldi	r18, 0xFF	; 255
    4e76:	83 ed       	ldi	r24, 0xD3	; 211
    4e78:	90 e3       	ldi	r25, 0x30	; 48
    4e7a:	21 50       	subi	r18, 0x01	; 1
    4e7c:	80 40       	sbci	r24, 0x00	; 0
    4e7e:	90 40       	sbci	r25, 0x00	; 0
    4e80:	e1 f7       	brne	.-8      	; 0x4e7a <err_code+0x10>
    4e82:	00 c0       	rjmp	.+0      	; 0x4e84 <err_code+0x1a>
    4e84:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    4e86:	8c 2f       	mov	r24, r28
    4e88:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <blink>
    4e8c:	2f ef       	ldi	r18, 0xFF	; 255
    4e8e:	89 e6       	ldi	r24, 0x69	; 105
    4e90:	98 e1       	ldi	r25, 0x18	; 24
    4e92:	21 50       	subi	r18, 0x01	; 1
    4e94:	80 40       	sbci	r24, 0x00	; 0
    4e96:	90 40       	sbci	r25, 0x00	; 0
    4e98:	e1 f7       	brne	.-8      	; 0x4e92 <err_code+0x28>
    4e9a:	00 c0       	rjmp	.+0      	; 0x4e9c <err_code+0x32>
    4e9c:	00 00       	nop
	_delay_ms(1000);
}
    4e9e:	cf 91       	pop	r28
    4ea0:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00005c0c <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    5c0c:	84 ec       	ldi	r24, 0xC4	; 196
    5c0e:	9e e2       	ldi	r25, 0x2E	; 46
    5c10:	0e 94 6f 21 	call	0x42de	; 0x42de <TC2_HAL_subscribe>
    5c14:	80 93 e4 0f 	sts	0x0FE4, r24	; 0x800fe4 <cbPointer>
    5c18:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00005b46 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    5b46:	80 91 e4 0f 	lds	r24, 0x0FE4	; 0x800fe4 <cbPointer>
    5b4a:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
    5b54:	08 95       	ret

Disassembly of section .text.LED_join_success:

00004c0e <LED_join_success>:
}

void LED_join_success(){
    4c0e:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    4c10:	c0 e0       	ldi	r28, 0x00	; 0
    4c12:	19 c0       	rjmp	.+50     	; 0x4c46 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
    4c1a:	2f ef       	ldi	r18, 0xFF	; 255
    4c1c:	80 e7       	ldi	r24, 0x70	; 112
    4c1e:	92 e0       	ldi	r25, 0x02	; 2
    4c20:	21 50       	subi	r18, 0x01	; 1
    4c22:	80 40       	sbci	r24, 0x00	; 0
    4c24:	90 40       	sbci	r25, 0x00	; 0
    4c26:	e1 f7       	brne	.-8      	; 0x4c20 <LED_join_success+0x12>
    4c28:	00 c0       	rjmp	.+0      	; 0x4c2a <LED_join_success+0x1c>
    4c2a:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
    4c32:	2f ef       	ldi	r18, 0xFF	; 255
    4c34:	80 e7       	ldi	r24, 0x70	; 112
    4c36:	92 e0       	ldi	r25, 0x02	; 2
    4c38:	21 50       	subi	r18, 0x01	; 1
    4c3a:	80 40       	sbci	r24, 0x00	; 0
    4c3c:	90 40       	sbci	r25, 0x00	; 0
    4c3e:	e1 f7       	brne	.-8      	; 0x4c38 <LED_join_success+0x2a>
    4c40:	00 c0       	rjmp	.+0      	; 0x4c42 <LED_join_success+0x34>
    4c42:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    4c44:	cf 5f       	subi	r28, 0xFF	; 255
    4c46:	ca 30       	cpi	r28, 0x0A	; 10
    4c48:	28 f3       	brcs	.-54     	; 0x4c14 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    4c4a:	cf 91       	pop	r28
    4c4c:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00005d3e <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    5d3e:	83 e0       	ldi	r24, 0x03	; 3
    5d40:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <err_code>
    5d44:	08 95       	ret

Disassembly of section .text.LED_join_conf_err:

00005d46 <LED_join_conf_err>:
}

void LED_join_conf_err(){
	err_code(5);
    5d46:	85 e0       	ldi	r24, 0x05	; 5
    5d48:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <err_code>
    5d4c:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

00005d4e <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    5d4e:	87 e0       	ldi	r24, 0x07	; 7
    5d50:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <err_code>
    5d54:	08 95       	ret

Disassembly of section .text.JN_join_network:

000010c4 <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	28 97       	sbiw	r28, 0x08	; 8
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	5c 01       	movw	r10, r24
    10e8:	6b 01       	movw	r12, r22
    10ea:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    10ec:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
    10ee:	e1 2f       	mov	r30, r17
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	ed 30       	cpi	r30, 0x0D	; 13
    10f4:	f1 05       	cpc	r31, r1
    10f6:	d8 f7       	brcc	.-10     	; 0x10ee <JN_join_network+0x2a>
    10f8:	e2 5c       	subi	r30, 0xC2	; 194
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    1100:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <rn2483_reset_active>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	89 e6       	ldi	r24, 0x69	; 105
    1108:	98 e1       	ldi	r25, 0x18	; 24
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <__stack+0xb>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <__stack+0x15>
    1114:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    1116:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    111a:	4c e0       	ldi	r20, 0x0C	; 12
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	62 e0       	ldi	r22, 0x02	; 2
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
    112a:	2f ed       	ldi	r18, 0xDF	; 223
    112c:	35 e0       	ldi	r19, 0x05	; 5
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
    113a:	11 e0       	ldi	r17, 0x01	; 1
			break;
    113c:	d8 cf       	rjmp	.-80     	; 0x10ee <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    113e:	46 ee       	ldi	r20, 0xE6	; 230
    1140:	55 e0       	ldi	r21, 0x05	; 5
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	80 e9       	ldi	r24, 0x90	; 144
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <cmd_with_ending>
				util_transmit_msg(lm_msg);
    114c:	80 e9       	ldi	r24, 0x90	; 144
    114e:	92 e0       	ldi	r25, 0x02	; 2
    1150:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1154:	4c e0       	ldi	r20, 0x0C	; 12
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	63 e0       	ldi	r22, 0x03	; 3
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1164:	24 ef       	ldi	r18, 0xF4	; 244
    1166:	35 e0       	ldi	r19, 0x05	; 5
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	ce 01       	movw	r24, r28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1174:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1176:	bb cf       	rjmp	.-138    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1178:	b5 01       	movw	r22, r10
    117a:	80 e9       	ldi	r24, 0x90	; 144
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	0e 94 24 24 	call	0x4848	; 0x4848 <mac_set_deveui>
				attach_ending(lm_msg);
    1182:	80 e9       	ldi	r24, 0x90	; 144
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
				util_transmit_msg(lm_msg);
    118a:	80 e9       	ldi	r24, 0x90	; 144
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1192:	4c e0       	ldi	r20, 0x0C	; 12
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	64 e0       	ldi	r22, 0x04	; 4
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    11a2:	24 ef       	ldi	r18, 0xF4	; 244
    11a4:	35 e0       	ldi	r19, 0x05	; 5
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    11b2:	11 e0       	ldi	r17, 0x01	; 1
			break;
    11b4:	9c cf       	rjmp	.-200    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    11b6:	b7 01       	movw	r22, r14
    11b8:	80 e9       	ldi	r24, 0x90	; 144
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <mac_set_appkey>
				attach_ending(lm_msg);
    11c0:	80 e9       	ldi	r24, 0x90	; 144
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
				util_transmit_msg(lm_msg);
    11c8:	80 e9       	ldi	r24, 0x90	; 144
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    11d0:	4c e0       	ldi	r20, 0x0C	; 12
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	65 e0       	ldi	r22, 0x05	; 5
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    11e0:	24 ef       	ldi	r18, 0xF4	; 244
    11e2:	35 e0       	ldi	r19, 0x05	; 5
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    11f0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    11f2:	7d cf       	rjmp	.-262    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    11f4:	b6 01       	movw	r22, r12
    11f6:	80 e9       	ldi	r24, 0x90	; 144
    11f8:	92 e0       	ldi	r25, 0x02	; 2
    11fa:	0e 94 48 24 	call	0x4890	; 0x4890 <mac_set_appeui>
				attach_ending(lm_msg);
    11fe:	80 e9       	ldi	r24, 0x90	; 144
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
				util_transmit_msg(lm_msg);
    1206:	80 e9       	ldi	r24, 0x90	; 144
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    120e:	4c e0       	ldi	r20, 0x0C	; 12
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	66 e0       	ldi	r22, 0x06	; 6
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    121e:	24 ef       	ldi	r18, 0xF4	; 244
    1220:	35 e0       	ldi	r19, 0x05	; 5
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    122e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1230:	5e cf       	rjmp	.-324    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	80 e9       	ldi	r24, 0x90	; 144
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 3f 29 	call	0x527e	; 0x527e <mac_set_ADR>
				attach_ending(lm_msg);
    123c:	80 e9       	ldi	r24, 0x90	; 144
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
				util_transmit_msg(lm_msg);
    1244:	80 e9       	ldi	r24, 0x90	; 144
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    124c:	4c e0       	ldi	r20, 0x0C	; 12
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	67 e0       	ldi	r22, 0x07	; 7
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    125c:	24 ef       	ldi	r18, 0xF4	; 244
    125e:	35 e0       	ldi	r19, 0x05	; 5
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    126c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    126e:	3f cf       	rjmp	.-386    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1270:	47 ef       	ldi	r20, 0xF7	; 247
    1272:	55 e0       	ldi	r21, 0x05	; 5
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	80 e9       	ldi	r24, 0x90	; 144
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <cmd_with_ending>
				util_transmit_msg(lm_msg);
    127e:	80 e9       	ldi	r24, 0x90	; 144
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1286:	4c e0       	ldi	r20, 0x0C	; 12
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	68 e0       	ldi	r22, 0x08	; 8
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1296:	24 ef       	ldi	r18, 0xF4	; 244
    1298:	35 e0       	ldi	r19, 0x05	; 5
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    12a6:	11 e0       	ldi	r17, 0x01	; 1
			break;
    12a8:	22 cf       	rjmp	.-444    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	56 e0       	ldi	r21, 0x06	; 6
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	80 e9       	ldi	r24, 0x90	; 144
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <cmd_with_ending>
				util_transmit_msg(lm_msg);
    12b8:	80 e9       	ldi	r24, 0x90	; 144
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    12c0:	4a e0       	ldi	r20, 0x0A	; 10
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	69 e0       	ldi	r22, 0x09	; 9
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    12d0:	24 ef       	ldi	r18, 0xF4	; 244
    12d2:	35 e0       	ldi	r19, 0x05	; 5
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	ce 01       	movw	r24, r28
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    12e0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    12e2:	05 cf       	rjmp	.-502    	; 0x10ee <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    12e4:	4a e0       	ldi	r20, 0x0A	; 10
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	6b e0       	ldi	r22, 0x0B	; 11
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    12f4:	2e e0       	ldi	r18, 0x0E	; 14
    12f6:	36 e0       	ldi	r19, 0x06	; 6
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	ce 01       	movw	r24, r28
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1304:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1306:	f3 ce       	rjmp	.-538    	; 0x10ee <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
    1308:	80 e9       	ldi	r24, 0x90	; 144
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 c1 20 	call	0x4182	; 0x4182 <util_parse_err>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <__stack+0x23b>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1312:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <uart0_hal_message_ready>
    1316:	88 23       	and	r24, r24
    1318:	09 f4       	brne	.+2      	; 0x131c <__stack+0x21d>
    131a:	e9 ce       	rjmp	.-558    	; 0x10ee <JN_join_network+0x2a>
					util_read_msg(lm_msg);
    131c:	80 e9       	ldi	r24, 0x90	; 144
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    1324:	60 e9       	ldi	r22, 0x90	; 144
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	0e 94 36 20 	call	0x406c	; 0x406c <util_matchMessage>
    1330:	18 2f       	mov	r17, r24
    1332:	dd ce       	rjmp	.-582    	; 0x10ee <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	01 c0       	rjmp	.+2      	; 0x133a <__stack+0x23b>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    1338:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    133a:	28 96       	adiw	r28, 0x08	; 8
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00005950 <set_block_uplink>:
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
}
    5950:	81 e2       	ldi	r24, 0x21	; 33
    5952:	9c e2       	ldi	r25, 0x2C	; 44
    5954:	0e 94 6f 21 	call	0x42de	; 0x42de <TC2_HAL_subscribe>
    5958:	80 93 e5 0f 	sts	0x0FE5, r24	; 0x800fe5 <subPointer>
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	80 93 e6 0f 	sts	0x0FE6, r24	; 0x800fe6 <busy>
    5962:	10 92 e7 0f 	sts	0x0FE7, r1	; 0x800fe7 <cnt>
    5966:	08 95       	ret

Disassembly of section .text.block_uplink:

00005842 <block_uplink>:
    5842:	80 91 e7 0f 	lds	r24, 0x0FE7	; 0x800fe7 <cnt>
    5846:	8f 5f       	subi	r24, 0xFF	; 255
    5848:	80 93 e7 0f 	sts	0x0FE7, r24	; 0x800fe7 <cnt>
    584c:	86 30       	cpi	r24, 0x06	; 6
    584e:	30 f0       	brcs	.+12     	; 0x585c <block_uplink+0x1a>
    5850:	10 92 e6 0f 	sts	0x0FE6, r1	; 0x800fe6 <busy>
    5854:	80 91 e5 0f 	lds	r24, 0x0FE5	; 0x800fe5 <subPointer>
    5858:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <TC2_HAL_cancel>
    585c:	08 95       	ret

Disassembly of section .text.LM_join_network:

00005d8e <LM_join_network>:
    5d8e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <JN_join_network>
    5d92:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

0000539a <LM_send_uplink>:
    539a:	1f 93       	push	r17
    539c:	cf 93       	push	r28
    539e:	df 93       	push	r29
    53a0:	9c 01       	movw	r18, r24
    53a2:	90 91 e6 0f 	lds	r25, 0x0FE6	; 0x800fe6 <busy>
    53a6:	91 11       	cpse	r25, r1
    53a8:	0a c0       	rjmp	.+20     	; 0x53be <LM_send_uplink+0x24>
    53aa:	16 2f       	mov	r17, r22
    53ac:	e9 01       	movw	r28, r18
    53ae:	0e 94 a8 2c 	call	0x5950	; 0x5950 <set_block_uplink>
    53b2:	41 2f       	mov	r20, r17
    53b4:	be 01       	movw	r22, r28
    53b6:	84 e6       	ldi	r24, 0x64	; 100
    53b8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <SU_send_uplink>
    53bc:	01 c0       	rjmp	.+2      	; 0x53c0 <LM_send_uplink+0x26>
    53be:	83 e0       	ldi	r24, 0x03	; 3
    53c0:	df 91       	pop	r29
    53c2:	cf 91       	pop	r28
    53c4:	1f 91       	pop	r17
    53c6:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00005d94 <LM_put_to_sleep>:
    5d94:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <SC_put_to_sleep>
    5d98:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00005d9a <LM_wake_up>:
    5d9a:	0e 94 93 28 	call	0x5126	; 0x5126 <SC_wake_up>
    5d9e:	08 95       	ret

Disassembly of section .text.LM_is_free:

00005cf8 <LM_is_free>:
    5cf8:	90 91 e6 0f 	lds	r25, 0x0FE6	; 0x800fe6 <busy>
    5cfc:	81 e0       	ldi	r24, 0x01	; 1
    5cfe:	89 27       	eor	r24, r25
    5d00:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00005da0 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    5da0:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <util_lora_forward_msg>
    5da4:	08 95       	ret

Disassembly of section .text.tohex:

00003950 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    3950:	6f 92       	push	r6
    3952:	7f 92       	push	r7
    3954:	8f 92       	push	r8
    3956:	ef 92       	push	r14
    3958:	ff 92       	push	r15
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	7c 01       	movw	r14, r24
    3964:	3a 01       	movw	r6, r20
    3966:	86 2e       	mov	r8, r22
    3968:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    396a:	c0 e0       	ldi	r28, 0x00	; 0
    396c:	d0 e0       	ldi	r29, 0x00	; 0
    396e:	25 c0       	rjmp	.+74     	; 0x39ba <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    3970:	a8 2d       	mov	r26, r8
    3972:	c3 01       	movw	r24, r6
    3974:	8c 0f       	add	r24, r28
    3976:	9d 1f       	adc	r25, r29
    3978:	a1 1d       	adc	r26, r1
    397a:	d7 fd       	sbrc	r29, 7
    397c:	aa 95       	dec	r26
    397e:	fc 01       	movw	r30, r24
    3980:	24 91       	lpm	r18, Z
    3982:	a7 fd       	sbrc	r26, 7
    3984:	20 81       	ld	r18, Z
    3986:	ce 01       	movw	r24, r28
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	1f 92       	push	r1
    398e:	2f 93       	push	r18
    3990:	2b e0       	ldi	r18, 0x0B	; 11
    3992:	35 e0       	ldi	r19, 0x05	; 5
    3994:	40 e0       	ldi	r20, 0x00	; 0
    3996:	4f 93       	push	r20
    3998:	3f 93       	push	r19
    399a:	2f 93       	push	r18
    399c:	8e 0d       	add	r24, r14
    399e:	9f 1d       	adc	r25, r15
    39a0:	9f 93       	push	r25
    39a2:	8f 93       	push	r24
    39a4:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    39a8:	21 96       	adiw	r28, 0x01	; 1
    39aa:	8d b7       	in	r24, 0x3d	; 61
    39ac:	9e b7       	in	r25, 0x3e	; 62
    39ae:	07 96       	adiw	r24, 0x07	; 7
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	9e bf       	out	0x3e, r25	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	8d bf       	out	0x3d, r24	; 61
    39ba:	c0 17       	cp	r28, r16
    39bc:	d1 07       	cpc	r29, r17
    39be:	c4 f2       	brlt	.-80     	; 0x3970 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	1f 91       	pop	r17
    39c6:	0f 91       	pop	r16
    39c8:	ff 90       	pop	r15
    39ca:	ef 90       	pop	r14
    39cc:	8f 90       	pop	r8
    39ce:	7f 90       	pop	r7
    39d0:	6f 90       	pop	r6
    39d2:	08 95       	ret

Disassembly of section .text.attach_ending:

0000585e <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    585e:	fc 01       	movw	r30, r24
    5860:	01 90       	ld	r0, Z+
    5862:	00 20       	and	r0, r0
    5864:	e9 f7       	brne	.-6      	; 0x5860 <attach_ending+0x2>
    5866:	cf 01       	movw	r24, r30
    5868:	23 e0       	ldi	r18, 0x03	; 3
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	40 e1       	ldi	r20, 0x10	; 16
    586e:	55 e0       	ldi	r21, 0x05	; 5
    5870:	60 e0       	ldi	r22, 0x00	; 0
    5872:	01 97       	sbiw	r24, 0x01	; 1
    5874:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
    5878:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

000050f4 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    50fa:	0e 94 04 2c 	call	0x5808	; 0x5808 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    50fe:	fe 01       	movw	r30, r28
    5100:	01 90       	ld	r0, Z+
    5102:	00 20       	and	r0, r0
    5104:	e9 f7       	brne	.-6      	; 0x5100 <cmd_with_ending+0xc>
    5106:	cf 01       	movw	r24, r30
    5108:	23 e0       	ldi	r18, 0x03	; 3
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	40 e1       	ldi	r20, 0x10	; 16
    510e:	55 e0       	ldi	r21, 0x05	; 5
    5110:	60 e0       	ldi	r22, 0x00	; 0
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
	return strlen(buffer);
    5118:	be 01       	movw	r22, r28
    511a:	80 e8       	ldi	r24, 0x80	; 128
    511c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
}
    5120:	df 91       	pop	r29
    5122:	cf 91       	pop	r28
    5124:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000400e <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    4012:	44 36       	cpi	r20, 0x64	; 100
    4014:	51 05       	cpc	r21, r1
    4016:	61 05       	cpc	r22, r1
    4018:	71 05       	cpc	r23, r1
    401a:	18 f1       	brcs	.+70     	; 0x4062 <sys_sleep_cmd+0x54>
    401c:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    401e:	7f 93       	push	r23
    4020:	6f 93       	push	r22
    4022:	5f 93       	push	r21
    4024:	4f 93       	push	r20
    4026:	83 e1       	ldi	r24, 0x13	; 19
    4028:	95 e0       	ldi	r25, 0x05	; 5
    402a:	a0 e0       	ldi	r26, 0x00	; 0
    402c:	af 93       	push	r26
    402e:	9f 93       	push	r25
    4030:	8f 93       	push	r24
    4032:	8d e1       	ldi	r24, 0x1D	; 29
    4034:	95 e0       	ldi	r25, 0x05	; 5
    4036:	a0 e0       	ldi	r26, 0x00	; 0
    4038:	af 93       	push	r26
    403a:	9f 93       	push	r25
    403c:	8f 93       	push	r24
    403e:	df 93       	push	r29
    4040:	cf 93       	push	r28
    4042:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    return strlen(buffer);
    4046:	be 01       	movw	r22, r28
    4048:	80 e8       	ldi	r24, 0x80	; 128
    404a:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    404e:	2d b7       	in	r18, 0x3d	; 61
    4050:	3e b7       	in	r19, 0x3e	; 62
    4052:	24 5f       	subi	r18, 0xF4	; 244
    4054:	3f 4f       	sbci	r19, 0xFF	; 255
    4056:	0f b6       	in	r0, 0x3f	; 63
    4058:	f8 94       	cli
    405a:	3e bf       	out	0x3e, r19	; 62
    405c:	0f be       	out	0x3f, r0	; 63
    405e:	2d bf       	out	0x3d, r18	; 61
    4060:	02 c0       	rjmp	.+4      	; 0x4066 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    4062:	8f ef       	ldi	r24, 0xFF	; 255
    4064:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    4066:	df 91       	pop	r29
    4068:	cf 91       	pop	r28
    406a:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00004470 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    4478:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    447a:	2f 93       	push	r18
    447c:	1f 93       	push	r17
    447e:	0f 93       	push	r16
    4480:	6f 93       	push	r22
    4482:	5f 93       	push	r21
    4484:	4f 93       	push	r20
    4486:	84 e2       	ldi	r24, 0x24	; 36
    4488:	95 e0       	ldi	r25, 0x05	; 5
    448a:	a0 e0       	ldi	r26, 0x00	; 0
    448c:	af 93       	push	r26
    448e:	9f 93       	push	r25
    4490:	8f 93       	push	r24
    4492:	df 93       	push	r29
    4494:	cf 93       	push	r28
    4496:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    return strlen(buffer);
    449a:	be 01       	movw	r22, r28
    449c:	80 e8       	ldi	r24, 0x80	; 128
    449e:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    44a2:	2d b7       	in	r18, 0x3d	; 61
    44a4:	3e b7       	in	r19, 0x3e	; 62
    44a6:	25 5f       	subi	r18, 0xF5	; 245
    44a8:	3f 4f       	sbci	r19, 0xFF	; 255
    44aa:	0f b6       	in	r0, 0x3f	; 63
    44ac:	f8 94       	cli
    44ae:	3e bf       	out	0x3e, r19	; 62
    44b0:	0f be       	out	0x3f, r0	; 63
    44b2:	2d bf       	out	0x3d, r18	; 61
}
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00004848 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    4848:	cf 92       	push	r12
    484a:	df 92       	push	r13
    484c:	ef 92       	push	r14
    484e:	0f 93       	push	r16
    4850:	1f 93       	push	r17
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
    4856:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    4858:	6b 01       	movw	r12, r22
    485a:	80 e8       	ldi	r24, 0x80	; 128
    485c:	e8 2e       	mov	r14, r24
    485e:	8e 2d       	mov	r24, r14
    4860:	b6 01       	movw	r22, r12
    4862:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4866:	40 97       	sbiw	r24, 0x10	; 16
    4868:	49 f4       	brne	.+18     	; 0x487c <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    486a:	2e 2d       	mov	r18, r14
    486c:	86 01       	movw	r16, r12
    486e:	4a e2       	ldi	r20, 0x2A	; 42
    4870:	55 e0       	ldi	r21, 0x05	; 5
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	ce 01       	movw	r24, r28
    4876:	0e 94 38 22 	call	0x4470	; 0x4470 <mac_set_parameter>
    487a:	02 c0       	rjmp	.+4      	; 0x4880 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    487c:	8f ef       	ldi	r24, 0xFF	; 255
    487e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	1f 91       	pop	r17
    4886:	0f 91       	pop	r16
    4888:	ef 90       	pop	r14
    488a:	df 90       	pop	r13
    488c:	cf 90       	pop	r12
    488e:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00004890 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    4890:	cf 92       	push	r12
    4892:	df 92       	push	r13
    4894:	ef 92       	push	r14
    4896:	0f 93       	push	r16
    4898:	1f 93       	push	r17
    489a:	cf 93       	push	r28
    489c:	df 93       	push	r29
    489e:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    48a0:	6b 01       	movw	r12, r22
    48a2:	80 e8       	ldi	r24, 0x80	; 128
    48a4:	e8 2e       	mov	r14, r24
    48a6:	8e 2d       	mov	r24, r14
    48a8:	b6 01       	movw	r22, r12
    48aa:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    48ae:	40 97       	sbiw	r24, 0x10	; 16
    48b0:	49 f4       	brne	.+18     	; 0x48c4 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    48b2:	2e 2d       	mov	r18, r14
    48b4:	86 01       	movw	r16, r12
    48b6:	49 e3       	ldi	r20, 0x39	; 57
    48b8:	55 e0       	ldi	r21, 0x05	; 5
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	ce 01       	movw	r24, r28
    48be:	0e 94 38 22 	call	0x4470	; 0x4470 <mac_set_parameter>
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    48c4:	8f ef       	ldi	r24, 0xFF	; 255
    48c6:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	ef 90       	pop	r14
    48d2:	df 90       	pop	r13
    48d4:	cf 90       	pop	r12
    48d6:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

000048d8 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    48d8:	cf 92       	push	r12
    48da:	df 92       	push	r13
    48dc:	ef 92       	push	r14
    48de:	0f 93       	push	r16
    48e0:	1f 93       	push	r17
    48e2:	cf 93       	push	r28
    48e4:	df 93       	push	r29
    48e6:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    48e8:	6b 01       	movw	r12, r22
    48ea:	80 e8       	ldi	r24, 0x80	; 128
    48ec:	e8 2e       	mov	r14, r24
    48ee:	8e 2d       	mov	r24, r14
    48f0:	b6 01       	movw	r22, r12
    48f2:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    48f6:	80 97       	sbiw	r24, 0x20	; 32
    48f8:	49 f4       	brne	.+18     	; 0x490c <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    48fa:	2e 2d       	mov	r18, r14
    48fc:	86 01       	movw	r16, r12
    48fe:	48 e4       	ldi	r20, 0x48	; 72
    4900:	55 e0       	ldi	r21, 0x05	; 5
    4902:	60 e0       	ldi	r22, 0x00	; 0
    4904:	ce 01       	movw	r24, r28
    4906:	0e 94 38 22 	call	0x4470	; 0x4470 <mac_set_parameter>
    490a:	02 c0       	rjmp	.+4      	; 0x4910 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    490c:	8f ef       	ldi	r24, 0xFF	; 255
    490e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ef 90       	pop	r14
    491a:	df 90       	pop	r13
    491c:	cf 90       	pop	r12
    491e:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

0000527e <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    527e:	0f 93       	push	r16
    5280:	1f 93       	push	r17
	if(state==0){
    5282:	61 11       	cpse	r22, r1
    5284:	09 c0       	rjmp	.+18     	; 0x5298 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5286:	07 e5       	ldi	r16, 0x57	; 87
    5288:	15 e0       	ldi	r17, 0x05	; 5
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	4b e5       	ldi	r20, 0x5B	; 91
    528e:	55 e0       	ldi	r21, 0x05	; 5
    5290:	60 e0       	ldi	r22, 0x00	; 0
    5292:	0e 94 38 22 	call	0x4470	; 0x4470 <mac_set_parameter>
    5296:	08 c0       	rjmp	.+16     	; 0x52a8 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5298:	07 e6       	ldi	r16, 0x67	; 103
    529a:	15 e0       	ldi	r17, 0x05	; 5
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	4b e5       	ldi	r20, 0x5B	; 91
    52a0:	55 e0       	ldi	r21, 0x05	; 5
    52a2:	60 e0       	ldi	r22, 0x00	; 0
    52a4:	0e 94 38 22 	call	0x4470	; 0x4470 <mac_set_parameter>
	}
}
    52a8:	1f 91       	pop	r17
    52aa:	0f 91       	pop	r16
    52ac:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00003184 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	c7 56       	subi	r28, 0x67	; 103
    3198:	d1 09       	sbc	r29, r1
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    31a6:	9f ef       	ldi	r25, 0xFF	; 255
    31a8:	96 0f       	add	r25, r22
    31aa:	9f 3d       	cpi	r25, 0xDF	; 223
    31ac:	68 f5       	brcc	.+90     	; 0x3208 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    31ae:	9f ef       	ldi	r25, 0xFF	; 255
    31b0:	92 0f       	add	r25, r18
    31b2:	93 33       	cpi	r25, 0x33	; 51
    31b4:	60 f5       	brcc	.+88     	; 0x320e <mac_tx_confirmed+0x8a>
    31b6:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	60 e8       	ldi	r22, 0x80	; 128
    31bc:	ce 01       	movw	r24, r28
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	7c 01       	movw	r14, r24
    31c2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    31c6:	c7 01       	movw	r24, r14
    31c8:	a0 e8       	ldi	r26, 0x80	; 128
    31ca:	af 93       	push	r26
    31cc:	9f 93       	push	r25
    31ce:	ef 92       	push	r14
    31d0:	1f 92       	push	r1
    31d2:	df 92       	push	r13
    31d4:	8a e6       	ldi	r24, 0x6A	; 106
    31d6:	95 e0       	ldi	r25, 0x05	; 5
    31d8:	a0 e0       	ldi	r26, 0x00	; 0
    31da:	af 93       	push	r26
    31dc:	9f 93       	push	r25
    31de:	8f 93       	push	r24
    31e0:	85 e7       	ldi	r24, 0x75	; 117
    31e2:	95 e0       	ldi	r25, 0x05	; 5
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	af 93       	push	r26
    31e8:	9f 93       	push	r25
    31ea:	8f 93       	push	r24
    31ec:	1f 93       	push	r17
    31ee:	0f 93       	push	r16
    31f0:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    
	
    return strlen(buffer);
    31f4:	b8 01       	movw	r22, r16
    31f6:	80 e8       	ldi	r24, 0x80	; 128
    31f8:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	05 c0       	rjmp	.+10     	; 0x3212 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	9f ef       	ldi	r25, 0xFF	; 255
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    320e:	8f ef       	ldi	r24, 0xFF	; 255
    3210:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    3212:	c9 59       	subi	r28, 0x99	; 153
    3214:	df 4f       	sbci	r29, 0xFF	; 255
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	08 95       	ret

Disassembly of section .text.beginsWidth:

000047b6 <beginsWidth>:
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    47b6:	6f 92       	push	r6
    47b8:	7f 92       	push	r7
    47ba:	8f 92       	push	r8
    47bc:	cf 92       	push	r12
    47be:	df 92       	push	r13
    47c0:	ef 92       	push	r14
    47c2:	0f 93       	push	r16
    47c4:	1f 93       	push	r17
    47c6:	3b 01       	movw	r6, r22
    47c8:	88 2e       	mov	r8, r24
    47ca:	69 01       	movw	r12, r18
    47cc:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    47ce:	84 2f       	mov	r24, r20
    47d0:	b9 01       	movw	r22, r18
    47d2:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    47d6:	8c 01       	movw	r16, r24
    47d8:	4e 2d       	mov	r20, r14
    47da:	96 01       	movw	r18, r12
    47dc:	88 2d       	mov	r24, r8
    47de:	b3 01       	movw	r22, r6
    47e0:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <strncmp>
    47e4:	21 e0       	ldi	r18, 0x01	; 1
    47e6:	89 2b       	or	r24, r25
    47e8:	09 f0       	breq	.+2      	; 0x47ec <beginsWidth+0x36>
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	82 2f       	mov	r24, r18
    47ee:	1f 91       	pop	r17
    47f0:	0f 91       	pop	r16
    47f2:	ef 90       	pop	r14
    47f4:	df 90       	pop	r13
    47f6:	cf 90       	pop	r12
    47f8:	8f 90       	pop	r8
    47fa:	7f 90       	pop	r7
    47fc:	6f 90       	pop	r6
    47fe:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00003f40 <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    3f40:	cf 92       	push	r12
    3f42:	df 92       	push	r13
    3f44:	ef 92       	push	r14
    3f46:	6b 01       	movw	r12, r22
    3f48:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    3f4a:	27 e1       	ldi	r18, 0x17	; 23
    3f4c:	36 e0       	ldi	r19, 0x06	; 6
    3f4e:	40 e0       	ldi	r20, 0x00	; 0
    3f50:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    3f54:	89 2b       	or	r24, r25
    3f56:	e9 f0       	breq	.+58     	; 0x3f92 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    3f58:	22 e2       	ldi	r18, 0x22	; 34
    3f5a:	36 e0       	ldi	r19, 0x06	; 6
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	8e 2d       	mov	r24, r14
    3f60:	b6 01       	movw	r22, r12
    3f62:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    3f66:	89 2b       	or	r24, r25
    3f68:	b1 f0       	breq	.+44     	; 0x3f96 <decode_tx_response+0x56>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    3f6a:	2a e2       	ldi	r18, 0x2A	; 42
    3f6c:	36 e0       	ldi	r19, 0x06	; 6
    3f6e:	40 e0       	ldi	r20, 0x00	; 0
    3f70:	8e 2d       	mov	r24, r14
    3f72:	b6 01       	movw	r22, r12
    3f74:	0e 94 db 23 	call	0x47b6	; 0x47b6 <beginsWidth>
    3f78:	81 11       	cpse	r24, r1
    3f7a:	0f c0       	rjmp	.+30     	; 0x3f9a <decode_tx_response+0x5a>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
    3f7c:	21 e3       	ldi	r18, 0x31	; 49
    3f7e:	36 e0       	ldi	r19, 0x06	; 6
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	8e 2d       	mov	r24, r14
    3f84:	b6 01       	movw	r22, r12
    3f86:	0e 94 db 23 	call	0x47b6	; 0x47b6 <beginsWidth>
    3f8a:	88 23       	and	r24, r24
    3f8c:	41 f0       	breq	.+16     	; 0x3f9e <decode_tx_response+0x5e>
    3f8e:	89 e0       	ldi	r24, 0x09	; 9
    3f90:	07 c0       	rjmp	.+14     	; 0x3fa0 <decode_tx_response+0x60>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    3f92:	87 e0       	ldi	r24, 0x07	; 7
    3f94:	05 c0       	rjmp	.+10     	; 0x3fa0 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    3f96:	88 e0       	ldi	r24, 0x08	; 8
    3f98:	03 c0       	rjmp	.+6      	; 0x3fa0 <decode_tx_response+0x60>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    3f9a:	83 e0       	ldi	r24, 0x03	; 3
    3f9c:	01 c0       	rjmp	.+2      	; 0x3fa0 <decode_tx_response+0x60>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
    3f9e:	86 e0       	ldi	r24, 0x06	; 6
}
    3fa0:	ef 90       	pop	r14
    3fa2:	df 90       	pop	r13
    3fa4:	cf 90       	pop	r12
    3fa6:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000025e4 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	28 97       	sbiw	r28, 0x08	; 8
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	d8 2e       	mov	r13, r24
    2604:	7b 01       	movw	r14, r22
    2606:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    2608:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    260a:	e1 2f       	mov	r30, r17
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	ea 30       	cpi	r30, 0x0A	; 10
    2610:	f1 05       	cpc	r31, r1
    2612:	d8 f7       	brcc	.-10     	; 0x260a <SU_send_uplink+0x26>
    2614:	e5 5b       	subi	r30, 0xB5	; 181
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    261c:	20 2f       	mov	r18, r16
    261e:	a7 01       	movw	r20, r14
    2620:	6d 2d       	mov	r22, r13
    2622:	80 e9       	ldi	r24, 0x90	; 144
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	0e 94 c2 18 	call	0x3184	; 0x3184 <mac_tx_confirmed>
				attach_ending(lm_msg);
    262a:	80 e9       	ldi	r24, 0x90	; 144
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
				util_transmit_msg(lm_msg);
    2632:	80 e9       	ldi	r24, 0x90	; 144
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	62 e0       	ldi	r22, 0x02	; 2
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	ce 01       	movw	r24, r28
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    264a:	22 e4       	ldi	r18, 0x42	; 66
    264c:	36 e0       	ldi	r19, 0x06	; 6
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	ce 01       	movw	r24, r28
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    265a:	15 e0       	ldi	r17, 0x05	; 5
			break;
    265c:	d6 cf       	rjmp	.-84     	; 0x260a <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	64 e0       	ldi	r22, 0x04	; 4
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    266e:	25 e4       	ldi	r18, 0x45	; 69
    2670:	36 e0       	ldi	r19, 0x06	; 6
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	ce 01       	movw	r24, r28
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    267e:	15 e0       	ldi	r17, 0x05	; 5
			break;
    2680:	c4 cf       	rjmp	.-120    	; 0x260a <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    2682:	60 e9       	ldi	r22, 0x90	; 144
    2684:	72 e0       	ldi	r23, 0x02	; 2
    2686:	80 e8       	ldi	r24, 0x80	; 128
    2688:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <decode_tx_response>
    268c:	18 2f       	mov	r17, r24
			break;
    268e:	bd cf       	rjmp	.-134    	; 0x260a <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    2690:	85 e0       	ldi	r24, 0x05	; 5
    2692:	18 c0       	rjmp	.+48     	; 0x26c4 <SU_send_uplink+0xe0>
				
			case SU_INV_DATA_LEN:
				return LM_STATUS_INV_DATA_LEN;
    2694:	86 e0       	ldi	r24, 0x06	; 6
    2696:	16 c0       	rjmp	.+44     	; 0x26c4 <SU_send_uplink+0xe0>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	14 c0       	rjmp	.+40     	; 0x26c4 <SU_send_uplink+0xe0>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    269c:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <uart0_hal_message_ready>
    26a0:	88 23       	and	r24, r24
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <SU_send_uplink+0xc2>
    26a4:	b2 cf       	rjmp	.-156    	; 0x260a <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    26a6:	80 e9       	ldi	r24, 0x90	; 144
    26a8:	92 e0       	ldi	r25, 0x02	; 2
    26aa:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    26ae:	60 e9       	ldi	r22, 0x90	; 144
    26b0:	72 e0       	ldi	r23, 0x02	; 2
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	0e 94 36 20 	call	0x406c	; 0x406c <util_matchMessage>
    26ba:	18 2f       	mov	r17, r24
    26bc:	a6 cf       	rjmp	.-180    	; 0x260a <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <SU_send_uplink+0xe0>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    26c2:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    26c4:	28 96       	adiw	r28, 0x08	; 8
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	df 90       	pop	r13
    26de:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

000045f2 <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    45f2:	40 e0       	ldi	r20, 0x00	; 0
    45f4:	5c e5       	ldi	r21, 0x5C	; 92
    45f6:	66 e2       	ldi	r22, 0x26	; 38
    45f8:	75 e0       	ldi	r23, 0x05	; 5
    45fa:	80 e9       	ldi	r24, 0x90	; 144
    45fc:	92 e0       	ldi	r25, 0x02	; 2
    45fe:	0e 94 07 20 	call	0x400e	; 0x400e <sys_sleep_cmd>
	attach_ending(lm_msg);
    4602:	80 e9       	ldi	r24, 0x90	; 144
    4604:	92 e0       	ldi	r25, 0x02	; 2
    4606:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
	util_transmit_msg(lm_msg);
    460a:	80 e9       	ldi	r24, 0x90	; 144
    460c:	92 e0       	ldi	r25, 0x02	; 2
    460e:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    4612:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <uart0_hal_message_ready>
    4616:	88 23       	and	r24, r24
    4618:	e1 f3       	breq	.-8      	; 0x4612 <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    461a:	80 e9       	ldi	r24, 0x90	; 144
    461c:	92 e0       	ldi	r25, 0x02	; 2
    461e:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    4622:	60 e9       	ldi	r22, 0x90	; 144
    4624:	72 e0       	ldi	r23, 0x02	; 2
    4626:	80 e8       	ldi	r24, 0x80	; 128
    4628:	2e e9       	ldi	r18, 0x9E	; 158
    462a:	36 e0       	ldi	r19, 0x06	; 6
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    4632:	89 2b       	or	r24, r25
    4634:	11 f4       	brne	.+4      	; 0x463a <SC_put_to_sleep+0x48>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	08 95       	ret
	return LM_STATUS_ERROR;
    463a:	81 e0       	ldi	r24, 0x01	; 1
}
    463c:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00005126 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    5126:	85 e5       	ldi	r24, 0x55	; 85
    5128:	0e 94 90 24 	call	0x4920	; 0x4920 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    512c:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <uart0_hal_message_ready>
    5130:	88 23       	and	r24, r24
    5132:	e1 f3       	breq	.-8      	; 0x512c <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    5134:	80 e9       	ldi	r24, 0x90	; 144
    5136:	92 e0       	ldi	r25, 0x02	; 2
    5138:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    513c:	60 e9       	ldi	r22, 0x90	; 144
    513e:	72 e0       	ldi	r23, 0x02	; 2
    5140:	80 e8       	ldi	r24, 0x80	; 128
    5142:	2e e9       	ldi	r18, 0x9E	; 158
    5144:	36 e0       	ldi	r19, 0x06	; 6
    5146:	40 e0       	ldi	r20, 0x00	; 0
    5148:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    514c:	89 2b       	or	r24, r25
    514e:	11 f4       	brne	.+4      	; 0x5154 <SC_wake_up+0x2e>
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	08 95       	ret
	return LM_STATUS_ERROR;
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00005c92 <util_setPendingStates>:


char lm_msg[200];

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    5c92:	fc 01       	movw	r30, r24
    5c94:	71 83       	std	Z+1, r23	; 0x01
    5c96:	60 83       	st	Z, r22
	sd->failure_state=failed;
    5c98:	53 83       	std	Z+3, r21	; 0x03
    5c9a:	42 83       	std	Z+2, r20	; 0x02
    5c9c:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

00005c9e <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    5ca2:	25 83       	std	Z+5, r18	; 0x05
    5ca4:	36 83       	std	Z+6, r19	; 0x06
    5ca6:	47 83       	std	Z+7, r20	; 0x07
    5ca8:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

0000587a <util_transmit_msg>:
		default:
		return sd->failure_state;
	}
}

void util_transmit_msg(char msg[]){
    587a:	cf 93       	push	r28
    587c:	df 93       	push	r29
    587e:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    5880:	bc 01       	movw	r22, r24
    5882:	80 e8       	ldi	r24, 0x80	; 128
    5884:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    5888:	68 2f       	mov	r22, r24
    588a:	ce 01       	movw	r24, r28
    588c:	0e 94 46 28 	call	0x508c	; 0x508c <uart0_hal_send_message>
}
    5890:	df 91       	pop	r29
    5892:	cf 91       	pop	r28
    5894:	08 95       	ret

Disassembly of section .text.util_read_msg:

00005da6 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
    5da6:	0e 94 26 2a 	call	0x544c	; 0x544c <uart0_hal_read_message_as_str>
    5daa:	08 95       	ret

Disassembly of section .text.util_parse_err:

00004182 <util_parse_err>:
	if(util_strbeginswith(lm_msg, RN2483)){
		return LM_STATUS_SUCCESS;
	}else{
		return LM_STATUS_ERROR;
	}
}
    4182:	cf 92       	push	r12
    4184:	df 92       	push	r13
    4186:	ef 92       	push	r14
    4188:	6c 01       	movw	r12, r24
    418a:	20 e8       	ldi	r18, 0x80	; 128
    418c:	e2 2e       	mov	r14, r18
    418e:	2f e4       	ldi	r18, 0x4F	; 79
    4190:	36 e0       	ldi	r19, 0x06	; 6
    4192:	40 e0       	ldi	r20, 0x00	; 0
    4194:	8e 2d       	mov	r24, r14
    4196:	b6 01       	movw	r22, r12
    4198:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    419c:	89 2b       	or	r24, r25
    419e:	a1 f0       	breq	.+40     	; 0x41c8 <util_parse_err+0x46>
    41a0:	2a e5       	ldi	r18, 0x5A	; 90
    41a2:	36 e0       	ldi	r19, 0x06	; 6
    41a4:	40 e0       	ldi	r20, 0x00	; 0
    41a6:	8e 2d       	mov	r24, r14
    41a8:	b6 01       	movw	r22, r12
    41aa:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    41ae:	89 2b       	or	r24, r25
    41b0:	69 f0       	breq	.+26     	; 0x41cc <util_parse_err+0x4a>
    41b2:	21 e6       	ldi	r18, 0x61	; 97
    41b4:	36 e0       	ldi	r19, 0x06	; 6
    41b6:	40 e0       	ldi	r20, 0x00	; 0
    41b8:	8e 2d       	mov	r24, r14
    41ba:	b6 01       	movw	r22, r12
    41bc:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    41c0:	89 2b       	or	r24, r25
    41c2:	31 f4       	brne	.+12     	; 0x41d0 <util_parse_err+0x4e>
    41c4:	84 e0       	ldi	r24, 0x04	; 4
    41c6:	05 c0       	rjmp	.+10     	; 0x41d2 <util_parse_err+0x50>
    41c8:	83 e0       	ldi	r24, 0x03	; 3
    41ca:	03 c0       	rjmp	.+6      	; 0x41d2 <util_parse_err+0x50>
    41cc:	83 e0       	ldi	r24, 0x03	; 3
    41ce:	01 c0       	rjmp	.+2      	; 0x41d2 <util_parse_err+0x50>
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	ef 90       	pop	r14
    41d4:	df 90       	pop	r13
    41d6:	cf 90       	pop	r12
    41d8:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00004a38 <util_strbeginswith>:
    4a38:	cf 92       	push	r12
    4a3a:	df 92       	push	r13
    4a3c:	ef 92       	push	r14
    4a3e:	0f 93       	push	r16
    4a40:	1f 93       	push	r17
    4a42:	cf 93       	push	r28
    4a44:	df 93       	push	r29
    4a46:	ec 01       	movw	r28, r24
    4a48:	6a 01       	movw	r12, r20
    4a4a:	e6 2e       	mov	r14, r22
    4a4c:	86 2f       	mov	r24, r22
    4a4e:	ba 01       	movw	r22, r20
    4a50:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4a54:	8c 01       	movw	r16, r24
    4a56:	be 01       	movw	r22, r28
    4a58:	80 e8       	ldi	r24, 0x80	; 128
    4a5a:	4e 2d       	mov	r20, r14
    4a5c:	96 01       	movw	r18, r12
    4a5e:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <strncmp>
    4a62:	21 e0       	ldi	r18, 0x01	; 1
    4a64:	89 2b       	or	r24, r25
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <util_strbeginswith+0x32>
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	82 2f       	mov	r24, r18
    4a6c:	df 91       	pop	r29
    4a6e:	cf 91       	pop	r28
    4a70:	1f 91       	pop	r17
    4a72:	0f 91       	pop	r16
    4a74:	ef 90       	pop	r14
    4a76:	df 90       	pop	r13
    4a78:	cf 90       	pop	r12
    4a7a:	08 95       	ret

Disassembly of section .text.util_matchMessage:

0000406c <util_matchMessage>:
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	ec 01       	movw	r28, r24
    4072:	fb 01       	movw	r30, r22
    4074:	9c 81       	ldd	r25, Y+4	; 0x04
    4076:	91 30       	cpi	r25, 0x01	; 1
    4078:	91 f0       	breq	.+36     	; 0x409e <util_matchMessage+0x32>
    407a:	18 f0       	brcs	.+6      	; 0x4082 <util_matchMessage+0x16>
    407c:	92 30       	cpi	r25, 0x02	; 2
    407e:	e9 f0       	breq	.+58     	; 0x40ba <util_matchMessage+0x4e>
    4080:	1f c0       	rjmp	.+62     	; 0x40c0 <util_matchMessage+0x54>
    4082:	2d 81       	ldd	r18, Y+5	; 0x05
    4084:	3e 81       	ldd	r19, Y+6	; 0x06
    4086:	4f 81       	ldd	r20, Y+7	; 0x07
    4088:	80 e8       	ldi	r24, 0x80	; 128
    408a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    408e:	89 2b       	or	r24, r25
    4090:	19 f4       	brne	.+6      	; 0x4098 <util_matchMessage+0x2c>
    4092:	88 81       	ld	r24, Y
    4094:	99 81       	ldd	r25, Y+1	; 0x01
    4096:	16 c0       	rjmp	.+44     	; 0x40c4 <util_matchMessage+0x58>
    4098:	8a 81       	ldd	r24, Y+2	; 0x02
    409a:	9b 81       	ldd	r25, Y+3	; 0x03
    409c:	13 c0       	rjmp	.+38     	; 0x40c4 <util_matchMessage+0x58>
    409e:	4d 81       	ldd	r20, Y+5	; 0x05
    40a0:	5e 81       	ldd	r21, Y+6	; 0x06
    40a2:	6f 81       	ldd	r22, Y+7	; 0x07
    40a4:	cf 01       	movw	r24, r30
    40a6:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <util_strbeginswith>
    40aa:	88 23       	and	r24, r24
    40ac:	19 f0       	breq	.+6      	; 0x40b4 <util_matchMessage+0x48>
    40ae:	88 81       	ld	r24, Y
    40b0:	99 81       	ldd	r25, Y+1	; 0x01
    40b2:	08 c0       	rjmp	.+16     	; 0x40c4 <util_matchMessage+0x58>
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	9b 81       	ldd	r25, Y+3	; 0x03
    40b8:	05 c0       	rjmp	.+10     	; 0x40c4 <util_matchMessage+0x58>
    40ba:	88 81       	ld	r24, Y
    40bc:	99 81       	ldd	r25, Y+1	; 0x01
    40be:	02 c0       	rjmp	.+4      	; 0x40c4 <util_matchMessage+0x58>
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	9b 81       	ldd	r25, Y+3	; 0x03
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004f4a <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4f4a:	cf 93       	push	r28
    4f4c:	df 93       	push	r29
    4f4e:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    4f50:	ab 01       	movw	r20, r22
    4f52:	68 2f       	mov	r22, r24
    4f54:	80 e9       	ldi	r24, 0x90	; 144
    4f56:	92 e0       	ldi	r25, 0x02	; 2
    4f58:	0e 94 04 2c 	call	0x5808	; 0x5808 <strcpy>
	attach_ending(lm_msg);
    4f5c:	80 e9       	ldi	r24, 0x90	; 144
    4f5e:	92 e0       	ldi	r25, 0x02	; 2
    4f60:	0e 94 2f 2c 	call	0x585e	; 0x585e <attach_ending>
	util_transmit_msg(lm_msg);
    4f64:	80 e9       	ldi	r24, 0x90	; 144
    4f66:	92 e0       	ldi	r25, 0x02	; 2
    4f68:	0e 94 3d 2c 	call	0x587a	; 0x587a <util_transmit_msg>
	
	while(!uart0_hal_message_ready());
    4f6c:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <uart0_hal_message_ready>
    4f70:	88 23       	and	r24, r24
    4f72:	e1 f3       	breq	.-8      	; 0x4f6c <util_lora_forward_msg+0x22>
	util_read_msg(res);
    4f74:	ce 01       	movw	r24, r28
    4f76:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <util_read_msg>
    4f7a:	df 91       	pop	r29
    4f7c:	cf 91       	pop	r28
    4f7e:	08 95       	ret

Disassembly of section .text.get_group_id:

00005dac <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    5dac:	80 91 e8 0f 	lds	r24, 0x0FE8	; 0x800fe8 <_groupId>
    5db0:	08 95       	ret

Disassembly of section .text.set_group_id:

00005db2 <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    5db2:	80 93 e8 0f 	sts	0x0FE8, r24	; 0x800fe8 <_groupId>
    5db6:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00005158 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	8c 01       	movw	r16, r24
    5162:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    5164:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <get_group_id>
    5168:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    516a:	2d 2f       	mov	r18, r29
    516c:	a8 01       	movw	r20, r16
    516e:	68 2f       	mov	r22, r24
    5170:	88 e5       	ldi	r24, 0x58	; 88
    5172:	93 e0       	ldi	r25, 0x03	; 3
    5174:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	8c 0f       	add	r24, r28
    517c:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <set_group_id>
}
    5180:	df 91       	pop	r29
    5182:	cf 91       	pop	r28
    5184:	1f 91       	pop	r17
    5186:	0f 91       	pop	r16
    5188:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00003d8c <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    3d8c:	ef 92       	push	r14
    3d8e:	ff 92       	push	r15
    3d90:	1f 93       	push	r17
    3d92:	cf 93       	push	r28
    3d94:	df 93       	push	r29
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	2a 97       	sbiw	r28, 0x0a	; 10
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	18 2f       	mov	r17, r24
    3da8:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    3daa:	9e 01       	movw	r18, r28
    3dac:	2f 5f       	subi	r18, 0xFF	; 255
    3dae:	3f 4f       	sbci	r19, 0xFF	; 255
    3db0:	ab 01       	movw	r20, r22
    3db2:	68 2f       	mov	r22, r24
    3db4:	88 e5       	ldi	r24, 0x58	; 88
    3db6:	93 e0       	ldi	r25, 0x03	; 3
    3db8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    3dbc:	9e 01       	movw	r18, r28
    3dbe:	27 5f       	subi	r18, 0xF7	; 247
    3dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc2:	ae 01       	movw	r20, r28
    3dc4:	49 5f       	subi	r20, 0xF9	; 249
    3dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc8:	61 2f       	mov	r22, r17
    3dca:	88 e5       	ldi	r24, 0x58	; 88
    3dcc:	93 e0       	ldi	r25, 0x03	; 3
    3dce:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    3dd2:	29 85       	ldd	r18, Y+9	; 0x09
    3dd4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3dd6:	4f 81       	ldd	r20, Y+7	; 0x07
    3dd8:	58 85       	ldd	r21, Y+8	; 0x08
    3dda:	b7 01       	movw	r22, r14
    3ddc:	ce 01       	movw	r24, r28
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mrpp_data_add_int16>
}
    3de4:	2a 96       	adiw	r28, 0x0a	; 10
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	de bf       	out	0x3e, r29	; 62
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	1f 91       	pop	r17
    3df6:	ff 90       	pop	r15
    3df8:	ef 90       	pop	r14
    3dfa:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

000055ec <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    55f2:	88 e5       	ldi	r24, 0x58	; 88
    55f4:	93 e0       	ldi	r25, 0x03	; 3
    55f6:	0e 94 6f 29 	call	0x52de	; 0x52de <mrpp_state_is_body_ready>
    55fa:	88 83       	st	Y, r24
    55fc:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    55fe:	89 2f       	mov	r24, r25
    5600:	80 95       	com	r24
    
}
    5602:	88 1f       	adc	r24, r24
    5604:	88 27       	eor	r24, r24
    5606:	88 1f       	adc	r24, r24
    5608:	df 91       	pop	r29
    560a:	cf 91       	pop	r28
    560c:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003682 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	00 d0       	rcall	.+0      	; 0x3698 <MRPP_get_ready_body_package+0x16>
    3698:	00 d0       	rcall	.+0      	; 0x369a <MRPP_get_ready_body_package+0x18>
    369a:	1f 92       	push	r1
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	6b 01       	movw	r12, r22
    36a2:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    36a4:	9e 01       	movw	r18, r28
    36a6:	2b 5f       	subi	r18, 0xFB	; 251
    36a8:	3f 4f       	sbci	r19, 0xFF	; 255
    36aa:	79 01       	movw	r14, r18
    36ac:	8e 01       	movw	r16, r28
    36ae:	0d 5f       	subi	r16, 0xFD	; 253
    36b0:	1f 4f       	sbci	r17, 0xFF	; 255
    36b2:	23 50       	subi	r18, 0x03	; 3
    36b4:	31 09       	sbc	r19, r1
    36b6:	ae 01       	movw	r20, r28
    36b8:	4f 5f       	subi	r20, 0xFF	; 255
    36ba:	5f 4f       	sbci	r21, 0xFF	; 255
    36bc:	bc 01       	movw	r22, r24
    36be:	88 e5       	ldi	r24, 0x58	; 88
    36c0:	93 e0       	ldi	r25, 0x03	; 3
    36c2:	0e 94 55 11 	call	0x22aa	; 0x22aa <mrpp_state_get_ready_body>
    
    if(!res) return false;
    36c6:	88 23       	and	r24, r24
    36c8:	b1 f0       	breq	.+44     	; 0x36f6 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    36ca:	4d 81       	ldd	r20, Y+5	; 0x05
    36cc:	83 e0       	ldi	r24, 0x03	; 3
    36ce:	84 0f       	add	r24, r20
    36d0:	f5 01       	movw	r30, r10
    36d2:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    36d4:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    36d8:	f6 01       	movw	r30, r12
    36da:	80 83       	st	Z, r24
    package[1]=subId;
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    36e4:	50 e0       	ldi	r21, 0x00	; 0
    36e6:	6b 81       	ldd	r22, Y+3	; 0x03
    36e8:	7c 81       	ldd	r23, Y+4	; 0x04
    36ea:	c6 01       	movw	r24, r12
    36ec:	03 96       	adiw	r24, 0x03	; 3
    36ee:	0e 94 57 29 	call	0x52ae	; 0x52ae <mrpp_data_get>

    return true;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	01 c0       	rjmp	.+2      	; 0x36f8 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    36f6:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	df 90       	pop	r13
    3710:	cf 90       	pop	r12
    3712:	bf 90       	pop	r11
    3714:	af 90       	pop	r10
    3716:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

00005caa <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    5caa:	bc 01       	movw	r22, r24
    5cac:	88 e5       	ldi	r24, 0x58	; 88
    5cae:	93 e0       	ldi	r25, 0x03	; 3
    5cb0:	0e 94 8a 2b 	call	0x5714	; 0x5714 <mrpp_state_set_body_sent>
    5cb4:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

0000560e <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    560e:	cf 93       	push	r28
    5610:	df 93       	push	r29
    5612:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    5614:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    5618:	fc 01       	movw	r30, r24
    561a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    561c:	bf 01       	movw	r22, r30
    561e:	88 e5       	ldi	r24, 0x58	; 88
    5620:	93 e0       	ldi	r25, 0x03	; 3
    5622:	0e 94 bc 19 	call	0x3378	; 0x3378 <mrpp_state_get_header>
    *package_length+=1;
    5626:	8f 5f       	subi	r24, 0xFF	; 255
    5628:	88 83       	st	Y, r24
}
    562a:	df 91       	pop	r29
    562c:	cf 91       	pop	r28
    562e:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00005630 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    5630:	cf 93       	push	r28
    5632:	df 93       	push	r29
    5634:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    5636:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    563a:	fc 01       	movw	r30, r24
    563c:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    563e:	bf 01       	movw	r22, r30
    5640:	88 e5       	ldi	r24, 0x58	; 88
    5642:	93 e0       	ldi	r25, 0x03	; 3
    5644:	0e 94 18 19 	call	0x3230	; 0x3230 <mrpp_state_get_tail>
    *package_length+=1;
    5648:	8f 5f       	subi	r24, 0xFF	; 255
    564a:	88 83       	st	Y, r24
}
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00005d02 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    5d02:	88 e5       	ldi	r24, 0x58	; 88
    5d04:	93 e0       	ldi	r25, 0x03	; 3
    5d06:	0e 94 11 2a 	call	0x5422	; 0x5422 <mrpp_state_all_bodies_sent>
}
    5d0a:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000037ae <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    37ae:	cf 92       	push	r12
    37b0:	df 92       	push	r13
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    37be:	94 2f       	mov	r25, r20
    37c0:	0c c0       	rjmp	.+24     	; 0x37da <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    37c2:	c9 2f       	mov	r28, r25
    37c4:	d0 e0       	ldi	r29, 0x00	; 0
    37c6:	e4 1b       	sub	r30, r20
    37c8:	f5 0b       	sbc	r31, r21
    37ca:	ea 0f       	add	r30, r26
    37cc:	fb 1f       	adc	r31, r27
    37ce:	80 81       	ld	r24, Z
    37d0:	fe 01       	movw	r30, r28
    37d2:	ee 50       	subi	r30, 0x0E	; 14
    37d4:	fc 4f       	sbci	r31, 0xFC	; 252
    37d6:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    37d8:	9f 5f       	subi	r25, 0xFF	; 255
    37da:	e9 2f       	mov	r30, r25
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	6a 01       	movw	r12, r20
    37e0:	86 e0       	ldi	r24, 0x06	; 6
    37e2:	c8 0e       	add	r12, r24
    37e4:	d1 1c       	adc	r13, r1
    37e6:	ec 15       	cp	r30, r12
    37e8:	fd 05       	cpc	r31, r13
    37ea:	58 f3       	brcs	.-42     	; 0x37c2 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    37ec:	26 50       	subi	r18, 0x06	; 6
    37ee:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    37f0:	36 95       	lsr	r19
    37f2:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    37f4:	49 5f       	subi	r20, 0xF9	; 249
    37f6:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    37f8:	a0 e0       	ldi	r26, 0x00	; 0
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	16 c0       	rjmp	.+44     	; 0x382a <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    37fe:	cd 01       	movw	r24, r26
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	f6 01       	movw	r30, r12
    3806:	e8 0f       	add	r30, r24
    3808:	f9 1f       	adc	r31, r25
    380a:	8b 01       	movw	r16, r22
    380c:	08 0f       	add	r16, r24
    380e:	19 1f       	adc	r17, r25
    3810:	e8 01       	movw	r28, r16
    3812:	f9 80       	ldd	r15, Y+1	; 0x01
    3814:	ee 50       	subi	r30, 0x0E	; 14
    3816:	fc 4f       	sbci	r31, 0xFC	; 252
    3818:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    381a:	84 0f       	add	r24, r20
    381c:	95 1f       	adc	r25, r21
    381e:	18 81       	ld	r17, Y
    3820:	fc 01       	movw	r30, r24
    3822:	ee 50       	subi	r30, 0x0E	; 14
    3824:	fc 4f       	sbci	r31, 0xFC	; 252
    3826:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    3828:	11 96       	adiw	r26, 0x01	; 1
    382a:	a2 17       	cp	r26, r18
    382c:	b3 07       	cpc	r27, r19
    382e:	38 f3       	brcs	.-50     	; 0x37fe <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	df 90       	pop	r13
    383c:	cf 90       	pop	r12
    383e:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

000052ae <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    52ae:	cf 93       	push	r28
    52b0:	df 93       	push	r29
    52b2:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	0c c0       	rjmp	.+24     	; 0x52d2 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    52ba:	de 01       	movw	r26, r28
    52bc:	a2 0f       	add	r26, r18
    52be:	b3 1f       	adc	r27, r19
    52c0:	f9 01       	movw	r30, r18
    52c2:	e6 0f       	add	r30, r22
    52c4:	f7 1f       	adc	r31, r23
    52c6:	ee 50       	subi	r30, 0x0E	; 14
    52c8:	fc 4f       	sbci	r31, 0xFC	; 252
    52ca:	90 81       	ld	r25, Z
    52cc:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    52ce:	2f 5f       	subi	r18, 0xFF	; 255
    52d0:	3f 4f       	sbci	r19, 0xFF	; 255
    52d2:	24 17       	cp	r18, r20
    52d4:	35 07       	cpc	r19, r21
    52d6:	88 f3       	brcs	.-30     	; 0x52ba <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	08 95       	ret

Disassembly of section .text.add_data_types:

00002a7e <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	ef 92       	push	r14
    2a84:	ff 92       	push	r15
    2a86:	0f 93       	push	r16
    2a88:	1f 93       	push	r17
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	dc 01       	movw	r26, r24
    2a90:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    2a96:	c1 2c       	mov	r12, r1
    2a98:	d1 2c       	mov	r13, r1
    2a9a:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    2a9c:	4a c0       	rjmp	.+148    	; 0x2b32 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    2a9e:	29 2f       	mov	r18, r25
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	22 0f       	add	r18, r18
    2aaa:	33 1f       	adc	r19, r19
    2aac:	22 0f       	add	r18, r18
    2aae:	33 1f       	adc	r19, r19
    2ab0:	22 0f       	add	r18, r18
    2ab2:	33 1f       	adc	r19, r19
    2ab4:	e2 0f       	add	r30, r18
    2ab6:	f3 1f       	adc	r31, r19
    2ab8:	ea 0f       	add	r30, r26
    2aba:	fb 1f       	adc	r31, r27
    2abc:	27 81       	ldd	r18, Z+7	; 0x07
    2abe:	22 30       	cpi	r18, 0x02	; 2
    2ac0:	a9 f0       	breq	.+42     	; 0x2aec <add_data_types+0x6e>
    2ac2:	24 30       	cpi	r18, 0x04	; 4
    2ac4:	21 f1       	breq	.+72     	; 0x2b0e <add_data_types+0x90>
    2ac6:	21 30       	cpi	r18, 0x01	; 1
    2ac8:	91 f5       	brne	.+100    	; 0x2b2e <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    2aca:	01 e0       	ldi	r16, 0x01	; 1
    2acc:	10 e0       	ldi	r17, 0x00	; 0
    2ace:	04 2e       	mov	r0, r20
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <add_data_types+0x58>
    2ad2:	00 0f       	add	r16, r16
    2ad4:	11 1f       	adc	r17, r17
    2ad6:	0a 94       	dec	r0
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <add_data_types+0x54>
    2ada:	01 2e       	mov	r0, r17
    2adc:	00 0c       	add	r0, r0
    2ade:	22 0b       	sbc	r18, r18
    2ae0:	33 0b       	sbc	r19, r19
    2ae2:	c0 2a       	or	r12, r16
    2ae4:	d1 2a       	or	r13, r17
    2ae6:	e2 2a       	or	r14, r18
    2ae8:	f3 2a       	or	r15, r19
                break;
    2aea:	21 c0       	rjmp	.+66     	; 0x2b2e <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    2aec:	02 e0       	ldi	r16, 0x02	; 2
    2aee:	10 e0       	ldi	r17, 0x00	; 0
    2af0:	04 2e       	mov	r0, r20
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <add_data_types+0x7a>
    2af4:	00 0f       	add	r16, r16
    2af6:	11 1f       	adc	r17, r17
    2af8:	0a 94       	dec	r0
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <add_data_types+0x76>
    2afc:	01 2e       	mov	r0, r17
    2afe:	00 0c       	add	r0, r0
    2b00:	22 0b       	sbc	r18, r18
    2b02:	33 0b       	sbc	r19, r19
    2b04:	c0 2a       	or	r12, r16
    2b06:	d1 2a       	or	r13, r17
    2b08:	e2 2a       	or	r14, r18
    2b0a:	f3 2a       	or	r15, r19
                break;
    2b0c:	10 c0       	rjmp	.+32     	; 0x2b2e <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    2b0e:	03 e0       	ldi	r16, 0x03	; 3
    2b10:	10 e0       	ldi	r17, 0x00	; 0
    2b12:	04 2e       	mov	r0, r20
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <add_data_types+0x9c>
    2b16:	00 0f       	add	r16, r16
    2b18:	11 1f       	adc	r17, r17
    2b1a:	0a 94       	dec	r0
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <add_data_types+0x98>
    2b1e:	01 2e       	mov	r0, r17
    2b20:	00 0c       	add	r0, r0
    2b22:	22 0b       	sbc	r18, r18
    2b24:	33 0b       	sbc	r19, r19
    2b26:	c0 2a       	or	r12, r16
    2b28:	d1 2a       	or	r13, r17
    2b2a:	e2 2a       	or	r14, r18
    2b2c:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    2b2e:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    2b30:	9f 5f       	subi	r25, 0xFF	; 255
    2b32:	12 96       	adiw	r26, 0x02	; 2
    2b34:	8c 91       	ld	r24, X
    2b36:	12 97       	sbiw	r26, 0x02	; 2
    2b38:	98 17       	cp	r25, r24
    2b3a:	08 f4       	brcc	.+2      	; 0x2b3e <add_data_types+0xc0>
    2b3c:	b0 cf       	rjmp	.-160    	; 0x2a9e <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    2b3e:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    2b40:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    2b42:	cd 82       	std	Y+5, r12	; 0x05
} 
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	08 95       	ret

Disassembly of section .text.update_bodies:

00001c96 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    1c96:	cf 93       	push	r28
    1c98:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    1c9a:	26 2f       	mov	r18, r22
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	c9 01       	movw	r24, r18
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	e2 0f       	add	r30, r18
    1cb6:	f3 1f       	adc	r31, r19
    1cb8:	ea 0f       	add	r30, r26
    1cba:	fb 1f       	adc	r31, r27
    1cbc:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    1cbe:	c0 e0       	ldi	r28, 0x00	; 0
    1cc0:	25 c0       	rjmp	.+74     	; 0x1d0c <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    1cc2:	82 17       	cp	r24, r18
    1cc4:	93 07       	cpc	r25, r19
    1cc6:	09 f1       	breq	.+66     	; 0x1d0a <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    1cc8:	a9 01       	movw	r20, r18
    1cca:	44 0f       	add	r20, r20
    1ccc:	55 1f       	adc	r21, r21
    1cce:	44 0f       	add	r20, r20
    1cd0:	55 1f       	adc	r21, r21
    1cd2:	44 0f       	add	r20, r20
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	e4 0f       	add	r30, r20
    1cde:	f5 1f       	adc	r31, r21
    1ce0:	ea 0f       	add	r30, r26
    1ce2:	fb 1f       	adc	r31, r27
    1ce4:	43 85       	ldd	r20, Z+11	; 0x0b
    1ce6:	74 13       	cpse	r23, r20
    1ce8:	10 c0       	rjmp	.+32     	; 0x1d0a <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    1cea:	f9 01       	movw	r30, r18
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	ea 0f       	add	r30, r26
    1d02:	fb 1f       	adc	r31, r27
    1d04:	24 85       	ldd	r18, Z+12	; 0x0c
    1d06:	23 30       	cpi	r18, 0x03	; 3
    1d08:	41 f4       	brne	.+16     	; 0x1d1a <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    1d0a:	cf 5f       	subi	r28, 0xFF	; 255
    1d0c:	2c 2f       	mov	r18, r28
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	28 17       	cp	r18, r24
    1d12:	39 07       	cpc	r19, r25
    1d14:	b4 f2       	brlt	.-84     	; 0x1cc2 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    1d16:	21 e0       	ldi	r18, 0x01	; 1
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    1d1c:	22 23       	and	r18, r18
    1d1e:	39 f0       	breq	.+14     	; 0x1d2e <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    1d20:	fd 01       	movw	r30, r26
    1d22:	e7 0f       	add	r30, r23
    1d24:	f1 1d       	adc	r31, r1
    1d26:	e4 58       	subi	r30, 0x84	; 132
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    1d2e:	9c 01       	movw	r18, r24
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	22 0f       	add	r18, r18
    1d36:	33 1f       	adc	r19, r19
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	ee 0f       	add	r30, r30
    1d40:	ff 1f       	adc	r31, r31
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	ea 0f       	add	r30, r26
    1d48:	fb 1f       	adc	r31, r27
    1d4a:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    1d4c:	29 c0       	rjmp	.+82     	; 0x1da0 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    1d4e:	46 2f       	mov	r20, r22
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	84 17       	cp	r24, r20
    1d54:	95 07       	cpc	r25, r21
    1d56:	19 f1       	breq	.+70     	; 0x1d9e <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    1d58:	9a 01       	movw	r18, r20
    1d5a:	2f 5f       	subi	r18, 0xFF	; 255
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5e:	f9 01       	movw	r30, r18
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	22 0f       	add	r18, r18
    1d66:	33 1f       	adc	r19, r19
    1d68:	22 0f       	add	r18, r18
    1d6a:	33 1f       	adc	r19, r19
    1d6c:	22 0f       	add	r18, r18
    1d6e:	33 1f       	adc	r19, r19
    1d70:	e2 0f       	add	r30, r18
    1d72:	f3 1f       	adc	r31, r19
    1d74:	ea 0f       	add	r30, r26
    1d76:	fb 1f       	adc	r31, r27
    1d78:	20 81       	ld	r18, Z
    1d7a:	c2 13       	cpse	r28, r18
    1d7c:	10 c0       	rjmp	.+32     	; 0x1d9e <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    1d7e:	fa 01       	movw	r30, r20
    1d80:	ee 0f       	add	r30, r30
    1d82:	ff 1f       	adc	r31, r31
    1d84:	44 0f       	add	r20, r20
    1d86:	55 1f       	adc	r21, r21
    1d88:	44 0f       	add	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	44 0f       	add	r20, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	e4 0f       	add	r30, r20
    1d92:	f5 1f       	adc	r31, r21
    1d94:	ea 0f       	add	r30, r26
    1d96:	fb 1f       	adc	r31, r27
    1d98:	24 85       	ldd	r18, Z+12	; 0x0c
    1d9a:	23 30       	cpi	r18, 0x03	; 3
    1d9c:	41 f4       	brne	.+16     	; 0x1dae <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	2c 91       	ld	r18, X
    1da4:	12 97       	sbiw	r26, 0x02	; 2
    1da6:	62 17       	cp	r22, r18
    1da8:	90 f2       	brcs	.-92     	; 0x1d4e <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    1db0:	88 23       	and	r24, r24
    1db2:	41 f0       	breq	.+16     	; 0x1dc4 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    1db4:	fd 01       	movw	r30, r26
    1db6:	ec 0f       	add	r30, r28
    1db8:	f1 1d       	adc	r31, r1
    1dba:	e4 58       	subi	r30, 0x84	; 132
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 83       	st	Z, r24
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    1dc4:	fd 01       	movw	r30, r26
    1dc6:	ec 0f       	add	r30, r28
    1dc8:	f1 1d       	adc	r31, r1
    1dca:	e4 58       	subi	r30, 0x84	; 132
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    1dd0:	8c 2f       	mov	r24, r28
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	87 1b       	sub	r24, r23
    1dd6:	91 09       	sbc	r25, r1
    1dd8:	02 97       	sbiw	r24, 0x02	; 2
    1dda:	64 f0       	brlt	.+24     	; 0x1df4 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    1ddc:	7f 5f       	subi	r23, 0xFF	; 255
    1dde:	08 c0       	rjmp	.+16     	; 0x1df0 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    1de0:	fd 01       	movw	r30, r26
    1de2:	e7 0f       	add	r30, r23
    1de4:	f1 1d       	adc	r31, r1
    1de6:	e4 58       	subi	r30, 0x84	; 132
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    1dee:	7f 5f       	subi	r23, 0xFF	; 255
    1df0:	7c 17       	cp	r23, r28
    1df2:	b0 f3       	brcs	.-20     	; 0x1de0 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

000017a8 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	ec 01       	movw	r28, r24
    17be:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    17c0:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    17c2:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    17c4:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    17c6:	00 e0       	ldi	r16, 0x00	; 0
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    17ca:	8f c0       	rjmp	.+286    	; 0x18ea <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    17cc:	ed 2d       	mov	r30, r13
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	cf 01       	movw	r24, r30
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	8e 0f       	add	r24, r30
    17dc:	9f 1f       	adc	r25, r31
    17de:	84 0f       	add	r24, r20
    17e0:	95 1f       	adc	r25, r21
    17e2:	dc 01       	movw	r26, r24
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	6d 91       	ld	r22, X+
    17e8:	7c 91       	ld	r23, X
    17ea:	13 97       	sbiw	r26, 0x03	; 3
    17ec:	df 01       	movw	r26, r30
    17ee:	aa 0f       	add	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	9f 01       	movw	r18, r30
    17f4:	22 0f       	add	r18, r18
    17f6:	33 1f       	adc	r19, r19
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	a2 0f       	add	r26, r18
    1802:	b3 1f       	adc	r27, r19
    1804:	5d 01       	movw	r10, r26
    1806:	ac 0e       	add	r10, r28
    1808:	bd 1e       	adc	r11, r29
    180a:	d5 01       	movw	r26, r10
    180c:	19 96       	adiw	r26, 0x09	; 9
    180e:	7c 93       	st	X, r23
    1810:	6e 93       	st	-X, r22
    1812:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    1814:	dc 01       	movw	r26, r24
    1816:	14 96       	adiw	r26, 0x04	; 4
    1818:	2c 91       	ld	r18, X
    181a:	d5 01       	movw	r26, r10
    181c:	17 96       	adiw	r26, 0x07	; 7
    181e:	2c 93       	st	X, r18
    1820:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1822:	14 96       	adiw	r26, 0x04	; 4
    1824:	1c 93       	st	X, r17
    1826:	0e 93       	st	-X, r16
    1828:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    182a:	dc 01       	movw	r26, r24
    182c:	2d 91       	ld	r18, X+
    182e:	3c 91       	ld	r19, X
    1830:	11 97       	sbiw	r26, 0x01	; 1
    1832:	14 96       	adiw	r26, 0x04	; 4
    1834:	8c 91       	ld	r24, X
    1836:	82 9f       	mul	r24, r18
    1838:	70 01       	movw	r14, r0
    183a:	83 9f       	mul	r24, r19
    183c:	f0 0c       	add	r15, r0
    183e:	11 24       	eor	r1, r1
    1840:	b6 e0       	ldi	r27, 0x06	; 6
    1842:	eb 0e       	add	r14, r27
    1844:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    1846:	d5 01       	movw	r26, r10
    1848:	16 96       	adiw	r26, 0x06	; 6
    184a:	fc 92       	st	X, r15
    184c:	ee 92       	st	-X, r14
    184e:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    1850:	98 01       	movw	r18, r16
    1852:	ab ea       	ldi	r26, 0xAB	; 171
    1854:	ba ea       	ldi	r27, 0xAA	; 170
    1856:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__umulhisi3>
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	92 95       	swap	r25
    1860:	82 95       	swap	r24
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	89 27       	eor	r24, r25
    1866:	9f 70       	andi	r25, 0x0F	; 15
    1868:	89 27       	eor	r24, r25
    186a:	9f 01       	movw	r18, r30
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	d9 01       	movw	r26, r18
    1872:	aa 0f       	add	r26, r26
    1874:	bb 1f       	adc	r27, r27
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	22 0f       	add	r18, r18
    1880:	33 1f       	adc	r19, r19
    1882:	a2 0f       	add	r26, r18
    1884:	b3 1f       	adc	r27, r19
    1886:	ac 0f       	add	r26, r28
    1888:	bd 1f       	adc	r27, r29
    188a:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    188c:	0e 0d       	add	r16, r14
    188e:	1f 1d       	adc	r17, r15
    1890:	98 01       	movw	r18, r16
    1892:	ab ea       	ldi	r26, 0xAB	; 171
    1894:	ba ea       	ldi	r27, 0xAA	; 170
    1896:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__umulhisi3>
    189a:	7c 01       	movw	r14, r24
    189c:	f6 94       	lsr	r15
    189e:	e7 94       	ror	r14
    18a0:	f6 94       	lsr	r15
    18a2:	e7 94       	ror	r14
    18a4:	f6 94       	lsr	r15
    18a6:	e7 94       	ror	r14
    18a8:	f6 94       	lsr	r15
    18aa:	e7 94       	ror	r14
    18ac:	f6 94       	lsr	r15
    18ae:	e7 94       	ror	r14
    18b0:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    18b2:	20 e3       	ldi	r18, 0x30	; 48
    18b4:	2e 9d       	mul	r18, r14
    18b6:	c0 01       	movw	r24, r0
    18b8:	2f 9d       	mul	r18, r15
    18ba:	90 0d       	add	r25, r0
    18bc:	11 24       	eor	r1, r1
    18be:	08 17       	cp	r16, r24
    18c0:	19 07       	cpc	r17, r25
    18c2:	19 f4       	brne	.+6      	; 0x18ca <mrpp_state_init+0x122>
    18c4:	bb 24       	eor	r11, r11
    18c6:	ba 94       	dec	r11
    18c8:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    18ca:	cf 01       	movw	r24, r30
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	ee 0f       	add	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	e8 0f       	add	r30, r24
    18de:	f9 1f       	adc	r31, r25
    18e0:	ec 0f       	add	r30, r28
    18e2:	fd 1f       	adc	r31, r29
    18e4:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    18e6:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    18e8:	d3 94       	inc	r13
    18ea:	dc 14       	cp	r13, r12
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <mrpp_state_init+0x148>
    18ee:	6e cf       	rjmp	.-292    	; 0x17cc <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    18f0:	98 01       	movw	r18, r16
    18f2:	ab ea       	ldi	r26, 0xAB	; 171
    18f4:	ba ea       	ldi	r27, 0xAA	; 170
    18f6:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__umulhisi3>
    18fa:	fc 01       	movw	r30, r24
    18fc:	f6 95       	lsr	r31
    18fe:	e7 95       	ror	r30
    1900:	f2 95       	swap	r31
    1902:	e2 95       	swap	r30
    1904:	ef 70       	andi	r30, 0x0F	; 15
    1906:	ef 27       	eor	r30, r31
    1908:	ff 70       	andi	r31, 0x0F	; 15
    190a:	ef 27       	eor	r30, r31
    190c:	4e 2f       	mov	r20, r30
    190e:	52 e0       	ldi	r21, 0x02	; 2
    1910:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    1912:	20 e3       	ldi	r18, 0x30	; 48
    1914:	2e 9f       	mul	r18, r30
    1916:	c0 01       	movw	r24, r0
    1918:	2f 9f       	mul	r18, r31
    191a:	90 0d       	add	r25, r0
    191c:	11 24       	eor	r1, r1
    191e:	08 1b       	sub	r16, r24
    1920:	19 0b       	sbc	r17, r25
    1922:	11 f4       	brne	.+4      	; 0x1928 <mrpp_state_init+0x180>
    1924:	51 e0       	ldi	r21, 0x01	; 1
    1926:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    1928:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    192a:	01 2b       	or	r16, r17
    192c:	11 f0       	breq	.+4      	; 0x1932 <mrpp_state_init+0x18a>
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1932:	fe 01       	movw	r30, r28
    1934:	e5 58       	subi	r30, 0x85	; 133
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	07 c0       	rjmp	.+14     	; 0x194c <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
    193e:	fe 01       	movw	r30, r28
    1940:	e8 0f       	add	r30, r24
    1942:	f1 1d       	adc	r31, r1
    1944:	e4 58       	subi	r30, 0x84	; 132
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    194a:	8f 5f       	subi	r24, 0xFF	; 255
    194c:	84 17       	cp	r24, r20
    194e:	b8 f3       	brcs	.-18     	; 0x193e <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003378 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	8c 01       	movw	r16, r24
    3382:	eb 01       	movw	r28, r22
    package[0]=0;
    3384:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3386:	fc 01       	movw	r30, r24
    3388:	81 81       	ldd	r24, Z+1	; 0x01
    338a:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    338c:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    338e:	c8 01       	movw	r24, r16
    3390:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	35 c0       	rjmp	.+106    	; 0x3402 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3398:	82 2f       	mov	r24, r18
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	dc 01       	movw	r26, r24
    339e:	aa 0f       	add	r26, r26
    33a0:	bb 1f       	adc	r27, r27
    33a2:	aa 0f       	add	r26, r26
    33a4:	bb 1f       	adc	r27, r27
    33a6:	ad 01       	movw	r20, r26
    33a8:	4a 5f       	subi	r20, 0xFA	; 250
    33aa:	5f 4f       	sbci	r21, 0xFF	; 255
    33ac:	4c 0f       	add	r20, r28
    33ae:	5d 1f       	adc	r21, r29
    33b0:	fc 01       	movw	r30, r24
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	e8 0f       	add	r30, r24
    33c4:	f9 1f       	adc	r31, r25
    33c6:	bf 01       	movw	r22, r30
    33c8:	60 0f       	add	r22, r16
    33ca:	71 1f       	adc	r23, r17
    33cc:	fb 01       	movw	r30, r22
    33ce:	84 81       	ldd	r24, Z+4	; 0x04
    33d0:	fa 01       	movw	r30, r20
    33d2:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    33d4:	cd 01       	movw	r24, r26
    33d6:	07 96       	adiw	r24, 0x07	; 7
    33d8:	8c 0f       	add	r24, r28
    33da:	9d 1f       	adc	r25, r29
    33dc:	fb 01       	movw	r30, r22
    33de:	33 81       	ldd	r19, Z+3	; 0x03
    33e0:	fc 01       	movw	r30, r24
    33e2:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    33e4:	cd 01       	movw	r24, r26
    33e6:	08 96       	adiw	r24, 0x08	; 8
    33e8:	8c 0f       	add	r24, r28
    33ea:	9d 1f       	adc	r25, r29
    33ec:	fb 01       	movw	r30, r22
    33ee:	36 81       	ldd	r19, Z+6	; 0x06
    33f0:	fc 01       	movw	r30, r24
    33f2:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    33f4:	19 96       	adiw	r26, 0x09	; 9
    33f6:	ac 0f       	add	r26, r28
    33f8:	bd 1f       	adc	r27, r29
    33fa:	fb 01       	movw	r30, r22
    33fc:	85 81       	ldd	r24, Z+5	; 0x05
    33fe:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3400:	2f 5f       	subi	r18, 0xFF	; 255
    3402:	f8 01       	movw	r30, r16
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	28 17       	cp	r18, r24
    3408:	38 f2       	brcs	.-114    	; 0x3398 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    340a:	88 0f       	add	r24, r24
    340c:	88 0f       	add	r24, r24
}
    340e:	8a 5f       	subi	r24, 0xFA	; 250
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00003230 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	8c 01       	movw	r16, r24
    323a:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    323c:	fc 01       	movw	r30, r24
    323e:	81 81       	ldd	r24, Z+1	; 0x01
    3240:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    3242:	81 81       	ldd	r24, Z+1	; 0x01
    3244:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3246:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3248:	c8 01       	movw	r24, r16
    324a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	35 c0       	rjmp	.+106    	; 0x32bc <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3252:	82 2f       	mov	r24, r18
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	dc 01       	movw	r26, r24
    3258:	aa 0f       	add	r26, r26
    325a:	bb 1f       	adc	r27, r27
    325c:	aa 0f       	add	r26, r26
    325e:	bb 1f       	adc	r27, r27
    3260:	ad 01       	movw	r20, r26
    3262:	4a 5f       	subi	r20, 0xFA	; 250
    3264:	5f 4f       	sbci	r21, 0xFF	; 255
    3266:	4c 0f       	add	r20, r28
    3268:	5d 1f       	adc	r21, r29
    326a:	fc 01       	movw	r30, r24
    326c:	ee 0f       	add	r30, r30
    326e:	ff 1f       	adc	r31, r31
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	e8 0f       	add	r30, r24
    327e:	f9 1f       	adc	r31, r25
    3280:	bf 01       	movw	r22, r30
    3282:	60 0f       	add	r22, r16
    3284:	71 1f       	adc	r23, r17
    3286:	fb 01       	movw	r30, r22
    3288:	84 81       	ldd	r24, Z+4	; 0x04
    328a:	fa 01       	movw	r30, r20
    328c:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    328e:	cd 01       	movw	r24, r26
    3290:	07 96       	adiw	r24, 0x07	; 7
    3292:	8c 0f       	add	r24, r28
    3294:	9d 1f       	adc	r25, r29
    3296:	fb 01       	movw	r30, r22
    3298:	33 81       	ldd	r19, Z+3	; 0x03
    329a:	fc 01       	movw	r30, r24
    329c:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    329e:	cd 01       	movw	r24, r26
    32a0:	08 96       	adiw	r24, 0x08	; 8
    32a2:	8c 0f       	add	r24, r28
    32a4:	9d 1f       	adc	r25, r29
    32a6:	fb 01       	movw	r30, r22
    32a8:	36 81       	ldd	r19, Z+6	; 0x06
    32aa:	fc 01       	movw	r30, r24
    32ac:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    32ae:	19 96       	adiw	r26, 0x09	; 9
    32b0:	ac 0f       	add	r26, r28
    32b2:	bd 1f       	adc	r27, r29
    32b4:	fb 01       	movw	r30, r22
    32b6:	85 81       	ldd	r24, Z+5	; 0x05
    32b8:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    32ba:	2f 5f       	subi	r18, 0xFF	; 255
    32bc:	f8 01       	movw	r30, r16
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	28 17       	cp	r18, r24
    32c2:	38 f2       	brcs	.-114    	; 0x3252 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    32c4:	88 0f       	add	r24, r24
    32c6:	88 0f       	add	r24, r24
}
    32c8:	8a 5f       	subi	r24, 0xFA	; 250
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	1f 91       	pop	r17
    32d0:	0f 91       	pop	r16
    32d2:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

000038ca <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    38d4:	a6 2f       	mov	r26, r22
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	11 97       	sbiw	r26, 0x01	; 1
    38da:	fd 01       	movw	r30, r26
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	cd 01       	movw	r24, r26
    38e2:	88 0f       	add	r24, r24
    38e4:	99 1f       	adc	r25, r25
    38e6:	88 0f       	add	r24, r24
    38e8:	99 1f       	adc	r25, r25
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	e8 0f       	add	r30, r24
    38f0:	f9 1f       	adc	r31, r25
    38f2:	e0 0f       	add	r30, r16
    38f4:	f1 1f       	adc	r31, r17
    38f6:	83 e0       	ldi	r24, 0x03	; 3
    38f8:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0a c0       	rjmp	.+20     	; 0x3912 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    38fe:	e9 2f       	mov	r30, r25
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	e9 01       	movw	r28, r18
    3904:	ce 0f       	add	r28, r30
    3906:	df 1f       	adc	r29, r31
    3908:	e4 0f       	add	r30, r20
    390a:	f5 1f       	adc	r31, r21
    390c:	80 81       	ld	r24, Z
    390e:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    3910:	9f 5f       	subi	r25, 0xFF	; 255
    3912:	94 30       	cpi	r25, 0x04	; 4
    3914:	a0 f3       	brcs	.-24     	; 0x38fe <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    3916:	cd 01       	movw	r24, r26
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	aa 0f       	add	r26, r26
    391e:	bb 1f       	adc	r27, r27
    3920:	aa 0f       	add	r26, r26
    3922:	bb 1f       	adc	r27, r27
    3924:	aa 0f       	add	r26, r26
    3926:	bb 1f       	adc	r27, r27
    3928:	a8 0f       	add	r26, r24
    392a:	b9 1f       	adc	r27, r25
    392c:	a0 0f       	add	r26, r16
    392e:	b1 1f       	adc	r27, r17
    3930:	19 96       	adiw	r26, 0x09	; 9
    3932:	8c 91       	ld	r24, X
    3934:	19 97       	sbiw	r26, 0x09	; 9
    3936:	f9 01       	movw	r30, r18
    3938:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    393a:	18 96       	adiw	r26, 0x08	; 8
    393c:	8c 91       	ld	r24, X
    393e:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    3940:	c8 01       	movw	r24, r16
    3942:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <update_bodies>
}
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	1f 91       	pop	r17
    394c:	0f 91       	pop	r16
    394e:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

000052de <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    52de:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	0b c0       	rjmp	.+22     	; 0x52fa <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    52e4:	29 2f       	mov	r18, r25
    52e6:	30 e0       	ldi	r19, 0x00	; 0
    52e8:	fa 01       	movw	r30, r20
    52ea:	e2 0f       	add	r30, r18
    52ec:	f3 1f       	adc	r31, r19
    52ee:	e4 58       	subi	r30, 0x84	; 132
    52f0:	ff 4f       	sbci	r31, 0xFF	; 255
    52f2:	80 81       	ld	r24, Z
    52f4:	81 30       	cpi	r24, 0x01	; 1
    52f6:	49 f0       	breq	.+18     	; 0x530a <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    52f8:	9f 5f       	subi	r25, 0xFF	; 255
    52fa:	fa 01       	movw	r30, r20
    52fc:	e5 58       	subi	r30, 0x85	; 133
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	80 81       	ld	r24, Z
    5302:	98 17       	cp	r25, r24
    5304:	78 f3       	brcs	.-34     	; 0x52e4 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5306:	2f ef       	ldi	r18, 0xFF	; 255
    5308:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    530a:	c9 01       	movw	r24, r18
    530c:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00005422 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    5422:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5424:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    5426:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    5428:	0a c0       	rjmp	.+20     	; 0x543e <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    542a:	f9 01       	movw	r30, r18
    542c:	e9 0f       	add	r30, r25
    542e:	f1 1d       	adc	r31, r1
    5430:	e4 58       	subi	r30, 0x84	; 132
    5432:	ff 4f       	sbci	r31, 0xFF	; 255
    5434:	40 81       	ld	r20, Z
    5436:	42 30       	cpi	r20, 0x02	; 2
    5438:	09 f0       	breq	.+2      	; 0x543c <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    543a:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    543c:	9f 5f       	subi	r25, 0xFF	; 255
    543e:	f9 01       	movw	r30, r18
    5440:	e5 58       	subi	r30, 0x85	; 133
    5442:	ff 4f       	sbci	r31, 0xFF	; 255
    5444:	40 81       	ld	r20, Z
    5446:	94 17       	cp	r25, r20
    5448:	80 f3       	brcs	.-32     	; 0x542a <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    544a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000022aa <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    22aa:	8f 92       	push	r8
    22ac:	9f 92       	push	r9
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
    22c4:	6b 01       	movw	r12, r22
    22c6:	4a 01       	movw	r8, r20
    22c8:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    22ca:	0e 94 6f 29 	call	0x52de	; 0x52de <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    22ce:	8f 3f       	cpi	r24, 0xFF	; 255
    22d0:	2f ef       	ldi	r18, 0xFF	; 255
    22d2:	92 07       	cpc	r25, r18
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <mrpp_state_get_ready_body+0x2e>
    22d6:	66 c0       	rjmp	.+204    	; 0x23a4 <mrpp_state_get_ready_body+0xfa>
    22d8:	8c 15       	cp	r24, r12
    22da:	9d 05       	cpc	r25, r13
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <mrpp_state_get_ready_body+0x36>
    22de:	64 c0       	rjmp	.+200    	; 0x23a8 <mrpp_state_get_ready_body+0xfe>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	09 c0       	rjmp	.+18     	; 0x22f6 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    22e4:	fe 01       	movw	r30, r28
    22e6:	e8 0f       	add	r30, r24
    22e8:	f1 1d       	adc	r31, r1
    22ea:	e4 58       	subi	r30, 0x84	; 132
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	90 81       	ld	r25, Z
    22f0:	91 30       	cpi	r25, 0x01	; 1
    22f2:	41 f0       	breq	.+16     	; 0x2304 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e5 58       	subi	r30, 0x85	; 133
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	90 81       	ld	r25, Z
    22fe:	89 17       	cp	r24, r25
    2300:	88 f3       	brcs	.-30     	; 0x22e4 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    2302:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	98 0f       	add	r25, r24
    2308:	f4 01       	movw	r30, r8
    230a:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	f5 01       	movw	r30, r10
    2310:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	40 e3       	ldi	r20, 0x30	; 48
    2316:	48 9f       	mul	r20, r24
    2318:	90 01       	movw	r18, r0
    231a:	49 9f       	mul	r20, r25
    231c:	30 0d       	add	r19, r0
    231e:	11 24       	eor	r1, r1
    2320:	f8 01       	movw	r30, r16
    2322:	31 83       	std	Z+1, r19	; 0x01
    2324:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    2326:	fe 01       	movw	r30, r28
    2328:	e5 58       	subi	r30, 0x85	; 133
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	20 81       	ld	r18, Z
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	21 50       	subi	r18, 0x01	; 1
    2332:	31 09       	sbc	r19, r1
    2334:	82 17       	cp	r24, r18
    2336:	93 07       	cpc	r25, r19
    2338:	2c f4       	brge	.+10     	; 0x2344 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    233a:	80 e3       	ldi	r24, 0x30	; 48
    233c:	f7 01       	movw	r30, r14
    233e:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	33 c0       	rjmp	.+102    	; 0x23aa <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9c 01       	movw	r18, r24
    234c:	22 0f       	add	r18, r18
    234e:	33 1f       	adc	r19, r19
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	c8 0f       	add	r28, r24
    2362:	d9 1f       	adc	r29, r25
    2364:	4b 81       	ldd	r20, Y+3	; 0x03
    2366:	5c 81       	ldd	r21, Y+4	; 0x04
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	48 0f       	add	r20, r24
    236e:	59 1f       	adc	r21, r25
    2370:	9a 01       	movw	r18, r20
    2372:	ab ea       	ldi	r26, 0xAB	; 171
    2374:	ba ea       	ldi	r27, 0xAA	; 170
    2376:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__umulhisi3>
    237a:	96 95       	lsr	r25
    237c:	87 95       	ror	r24
    237e:	92 95       	swap	r25
    2380:	82 95       	swap	r24
    2382:	8f 70       	andi	r24, 0x0F	; 15
    2384:	89 27       	eor	r24, r25
    2386:	9f 70       	andi	r25, 0x0F	; 15
    2388:	89 27       	eor	r24, r25
    238a:	60 e3       	ldi	r22, 0x30	; 48
    238c:	68 9f       	mul	r22, r24
    238e:	90 01       	movw	r18, r0
    2390:	69 9f       	mul	r22, r25
    2392:	30 0d       	add	r19, r0
    2394:	11 24       	eor	r1, r1
    2396:	ca 01       	movw	r24, r20
    2398:	82 1b       	sub	r24, r18
    239a:	93 0b       	sbc	r25, r19
    239c:	f7 01       	movw	r30, r14
    239e:	80 83       	st	Z, r24
    } 
    return true; 
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <mrpp_state_get_ready_body+0x100>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	df 90       	pop	r13
    23b8:	cf 90       	pop	r12
    23ba:	bf 90       	pop	r11
    23bc:	af 90       	pop	r10
    23be:	9f 90       	pop	r9
    23c0:	8f 90       	pop	r8
    23c2:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00005714 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    5714:	fc 01       	movw	r30, r24
    5716:	e5 58       	subi	r30, 0x85	; 133
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	20 81       	ld	r18, Z
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	62 17       	cp	r22, r18
    5720:	73 07       	cpc	r23, r19
    5722:	3c f4       	brge	.+14     	; 0x5732 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    5724:	68 0f       	add	r22, r24
    5726:	79 1f       	adc	r23, r25
    5728:	fb 01       	movw	r30, r22
    572a:	e4 58       	subi	r30, 0x84	; 132
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	82 e0       	ldi	r24, 0x02	; 2
    5730:	80 83       	st	Z, r24
    5732:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00004f80 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    4f80:	70 e0       	ldi	r23, 0x00	; 0
    4f82:	61 50       	subi	r22, 0x01	; 1
    4f84:	71 09       	sbc	r23, r1
    4f86:	fb 01       	movw	r30, r22
    4f88:	ee 0f       	add	r30, r30
    4f8a:	ff 1f       	adc	r31, r31
    4f8c:	66 0f       	add	r22, r22
    4f8e:	77 1f       	adc	r23, r23
    4f90:	66 0f       	add	r22, r22
    4f92:	77 1f       	adc	r23, r23
    4f94:	66 0f       	add	r22, r22
    4f96:	77 1f       	adc	r23, r23
    4f98:	e6 0f       	add	r30, r22
    4f9a:	f7 1f       	adc	r31, r23
    4f9c:	e8 0f       	add	r30, r24
    4f9e:	f9 1f       	adc	r31, r25
    4fa0:	83 81       	ldd	r24, Z+3	; 0x03
    4fa2:	94 81       	ldd	r25, Z+4	; 0x04
    4fa4:	da 01       	movw	r26, r20
    4fa6:	8d 93       	st	X+, r24
    4fa8:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    4faa:	85 81       	ldd	r24, Z+5	; 0x05
    4fac:	96 81       	ldd	r25, Z+6	; 0x06
    4fae:	f9 01       	movw	r30, r18
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	80 83       	st	Z, r24
    4fb4:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

0000530e <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    530e:	80 91 cc 0f 	lds	r24, 0x0FCC	; 0x800fcc <cnt>
    5312:	90 91 cd 0f 	lds	r25, 0x0FCD	; 0x800fcd <cnt+0x1>
    5316:	01 96       	adiw	r24, 0x01	; 1
    5318:	90 93 cd 0f 	sts	0x0FCD, r25	; 0x800fcd <cnt+0x1>
    531c:	80 93 cc 0f 	sts	0x0FCC, r24	; 0x800fcc <cnt>
	if(cnt>=_seconds){
    5320:	20 91 ce 0f 	lds	r18, 0x0FCE	; 0x800fce <_seconds>
    5324:	30 91 cf 0f 	lds	r19, 0x0FCF	; 0x800fcf <_seconds+0x1>
    5328:	82 17       	cp	r24, r18
    532a:	93 07       	cpc	r25, r19
    532c:	38 f0       	brcs	.+14     	; 0x533c <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    532e:	80 91 e9 0f 	lds	r24, 0x0FE9	; 0x800fe9 <eventPointer>
    5332:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5336:	80 e0       	ldi	r24, 0x00	; 0
    5338:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <PM_HAL_BC_power>
    533c:	08 95       	ret

Disassembly of section .text.PUMP_start:

0000555e <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    555e:	10 92 cd 0f 	sts	0x0FCD, r1	; 0x800fcd <cnt+0x1>
    5562:	10 92 cc 0f 	sts	0x0FCC, r1	; 0x800fcc <cnt>
	_seconds=seconds;
    5566:	90 93 cf 0f 	sts	0x0FCF, r25	; 0x800fcf <_seconds+0x1>
    556a:	80 93 ce 0f 	sts	0x0FCE, r24	; 0x800fce <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    556e:	87 e8       	ldi	r24, 0x87	; 135
    5570:	99 e2       	ldi	r25, 0x29	; 41
    5572:	0e 94 6f 21 	call	0x42de	; 0x42de <TC2_HAL_subscribe>
    5576:	80 93 e9 0f 	sts	0x0FE9, r24	; 0x800fe9 <eventPointer>
	PM_HAL_BC_power(true);
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <PM_HAL_BC_power>
    5580:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00005896 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    5896:	40 91 cc 0f 	lds	r20, 0x0FCC	; 0x800fcc <cnt>
    589a:	50 91 cd 0f 	lds	r21, 0x0FCD	; 0x800fcd <cnt+0x1>
    589e:	20 91 ce 0f 	lds	r18, 0x0FCE	; 0x800fce <_seconds>
    58a2:	30 91 cf 0f 	lds	r19, 0x0FCF	; 0x800fcf <_seconds+0x1>
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	42 17       	cp	r20, r18
    58aa:	53 07       	cpc	r21, r19
    58ac:	08 f4       	brcc	.+2      	; 0x58b0 <PUMP_is_done+0x1a>
    58ae:	80 e0       	ldi	r24, 0x00	; 0
}
    58b0:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004384 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    4384:	cf 93       	push	r28
    4386:	df 93       	push	r29
    4388:	00 d0       	rcall	.+0      	; 0x438a <RTC_set_clock_out+0x6>
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    438e:	9d e0       	ldi	r25, 0x0D	; 13
    4390:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    4392:	81 30       	cpi	r24, 0x01	; 1
    4394:	31 f0       	breq	.+12     	; 0x43a2 <RTC_set_clock_out+0x1e>
    4396:	18 f0       	brcs	.+6      	; 0x439e <RTC_set_clock_out+0x1a>
    4398:	80 32       	cpi	r24, 0x20	; 32
    439a:	31 f0       	breq	.+12     	; 0x43a8 <RTC_set_clock_out+0x24>
    439c:	13 c0       	rjmp	.+38     	; 0x43c4 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    439e:	1a 82       	std	Y+2, r1	; 0x02
			break;
    43a0:	05 c0       	rjmp	.+10     	; 0x43ac <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    43a2:	83 e8       	ldi	r24, 0x83	; 131
    43a4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    43a8:	82 e8       	ldi	r24, 0x82	; 130
    43aa:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    43ac:	ae 01       	movw	r20, r28
    43ae:	4f 5f       	subi	r20, 0xFF	; 255
    43b0:	5f 4f       	sbci	r21, 0xFF	; 255
    43b2:	60 e8       	ldi	r22, 0x80	; 128
    43b4:	22 e0       	ldi	r18, 0x02	; 2
    43b6:	81 e5       	ldi	r24, 0x51	; 81
    43b8:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    43bc:	88 23       	and	r24, r24
    43be:	21 f0       	breq	.+8      	; 0x43c8 <RTC_set_clock_out+0x44>
    43c0:	82 e0       	ldi	r24, 0x02	; 2
    43c2:	03 c0       	rjmp	.+6      	; 0x43ca <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	01 c0       	rjmp	.+2      	; 0x43ca <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    43c8:	80 e0       	ldi	r24, 0x00	; 0
}
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000050c0 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <RTC_clear_wake_up_interrupt+0x6>
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    50ca:	81 e0       	ldi	r24, 0x01	; 1
    50cc:	89 83       	std	Y+1, r24	; 0x01
    50ce:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    50d0:	ae 01       	movw	r20, r28
    50d2:	4f 5f       	subi	r20, 0xFF	; 255
    50d4:	5f 4f       	sbci	r21, 0xFF	; 255
    50d6:	60 e8       	ldi	r22, 0x80	; 128
    50d8:	22 e0       	ldi	r18, 0x02	; 2
    50da:	81 e5       	ldi	r24, 0x51	; 81
    50dc:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    50e0:	88 23       	and	r24, r24
    50e2:	11 f0       	breq	.+4      	; 0x50e8 <RTC_clear_wake_up_interrupt+0x28>
    50e4:	82 e0       	ldi	r24, 0x02	; 2
    50e6:	01 c0       	rjmp	.+2      	; 0x50ea <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    50e8:	80 e0       	ldi	r24, 0x00	; 0
}
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	df 91       	pop	r29
    50f0:	cf 91       	pop	r28
    50f2:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001df8 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	27 97       	sbiw	r28, 0x07	; 7
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	8c 01       	movw	r16, r24
    1e12:	21 e0       	ldi	r18, 0x01	; 1
    1e14:	43 ea       	ldi	r20, 0xA3	; 163
    1e16:	56 e0       	ldi	r21, 0x06	; 6
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	81 e5       	ldi	r24, 0x51	; 81
    1e1c:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <TWI_API_write_data>
    1e20:	81 11       	cpse	r24, r1
    1e22:	7c c0       	rjmp	.+248    	; 0x1f1c <RTC_get_current_time+0x124>
    1e24:	47 e0       	ldi	r20, 0x07	; 7
    1e26:	be 01       	movw	r22, r28
    1e28:	6f 5f       	subi	r22, 0xFF	; 255
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	81 e5       	ldi	r24, 0x51	; 81
    1e2e:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <TWI_API_repeat_read_data_stop>
    1e32:	81 11       	cpse	r24, r1
    1e34:	75 c0       	rjmp	.+234    	; 0x1f20 <RTC_get_current_time+0x128>
    1e36:	29 81       	ldd	r18, Y+1	; 0x01
    1e38:	82 2f       	mov	r24, r18
    1e3a:	8f 77       	andi	r24, 0x7F	; 127
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	95 95       	asr	r25
    1e40:	87 95       	ror	r24
    1e42:	95 95       	asr	r25
    1e44:	87 95       	ror	r24
    1e46:	95 95       	asr	r25
    1e48:	87 95       	ror	r24
    1e4a:	95 95       	asr	r25
    1e4c:	87 95       	ror	r24
    1e4e:	88 0f       	add	r24, r24
    1e50:	98 2f       	mov	r25, r24
    1e52:	99 0f       	add	r25, r25
    1e54:	99 0f       	add	r25, r25
    1e56:	89 0f       	add	r24, r25
    1e58:	2f 70       	andi	r18, 0x0F	; 15
    1e5a:	82 0f       	add	r24, r18
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	80 83       	st	Z, r24
    1e60:	2a 81       	ldd	r18, Y+2	; 0x02
    1e62:	82 2f       	mov	r24, r18
    1e64:	8f 77       	andi	r24, 0x7F	; 127
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	95 95       	asr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	95 95       	asr	r25
    1e6e:	87 95       	ror	r24
    1e70:	95 95       	asr	r25
    1e72:	87 95       	ror	r24
    1e74:	95 95       	asr	r25
    1e76:	87 95       	ror	r24
    1e78:	88 0f       	add	r24, r24
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	99 0f       	add	r25, r25
    1e7e:	99 0f       	add	r25, r25
    1e80:	89 0f       	add	r24, r25
    1e82:	2f 70       	andi	r18, 0x0F	; 15
    1e84:	82 0f       	add	r24, r18
    1e86:	81 83       	std	Z+1, r24	; 0x01
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	82 2f       	mov	r24, r18
    1e8c:	8f 73       	andi	r24, 0x3F	; 63
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	95 95       	asr	r25
    1e92:	87 95       	ror	r24
    1e94:	95 95       	asr	r25
    1e96:	87 95       	ror	r24
    1e98:	95 95       	asr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	88 0f       	add	r24, r24
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	99 0f       	add	r25, r25
    1ea6:	99 0f       	add	r25, r25
    1ea8:	89 0f       	add	r24, r25
    1eaa:	2f 70       	andi	r18, 0x0F	; 15
    1eac:	82 0f       	add	r24, r18
    1eae:	82 83       	std	Z+2, r24	; 0x02
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	82 2f       	mov	r24, r18
    1eb4:	8f 73       	andi	r24, 0x3F	; 63
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	95 95       	asr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	95 95       	asr	r25
    1ec6:	87 95       	ror	r24
    1ec8:	88 0f       	add	r24, r24
    1eca:	98 2f       	mov	r25, r24
    1ecc:	99 0f       	add	r25, r25
    1ece:	99 0f       	add	r25, r25
    1ed0:	89 0f       	add	r24, r25
    1ed2:	2f 70       	andi	r18, 0x0F	; 15
    1ed4:	82 0f       	add	r24, r18
    1ed6:	83 83       	std	Z+3, r24	; 0x03
    1ed8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eda:	82 2f       	mov	r24, r18
    1edc:	8f 71       	andi	r24, 0x1F	; 31
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	95 95       	asr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	95 95       	asr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	95 95       	asr	r25
    1eea:	87 95       	ror	r24
    1eec:	95 95       	asr	r25
    1eee:	87 95       	ror	r24
    1ef0:	88 0f       	add	r24, r24
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	99 0f       	add	r25, r25
    1ef6:	99 0f       	add	r25, r25
    1ef8:	89 0f       	add	r24, r25
    1efa:	2f 70       	andi	r18, 0x0F	; 15
    1efc:	82 0f       	add	r24, r18
    1efe:	84 83       	std	Z+4, r24	; 0x04
    1f00:	8f 81       	ldd	r24, Y+7	; 0x07
    1f02:	98 2f       	mov	r25, r24
    1f04:	92 95       	swap	r25
    1f06:	9f 70       	andi	r25, 0x0F	; 15
    1f08:	99 0f       	add	r25, r25
    1f0a:	29 2f       	mov	r18, r25
    1f0c:	22 0f       	add	r18, r18
    1f0e:	22 0f       	add	r18, r18
    1f10:	92 0f       	add	r25, r18
    1f12:	8f 70       	andi	r24, 0x0F	; 15
    1f14:	89 0f       	add	r24, r25
    1f16:	85 83       	std	Z+5, r24	; 0x05
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <RTC_get_current_time+0x12a>
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <RTC_get_current_time+0x12a>
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	27 96       	adiw	r28, 0x07	; 7
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

00002e94 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	2d 97       	sbiw	r28, 0x0d	; 13
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    2eb4:	85 e0       	ldi	r24, 0x05	; 5
    2eb6:	ed ea       	ldi	r30, 0xAD	; 173
    2eb8:	ff e0       	ldi	r31, 0x0F	; 15
    2eba:	de 01       	movw	r26, r28
    2ebc:	13 96       	adiw	r26, 0x03	; 3
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	0d 92       	st	X+, r0
    2ec2:	8a 95       	dec	r24
    2ec4:	e1 f7       	brne	.-8      	; 0x2ebe <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	08 96       	adiw	r24, 0x08	; 8
    2eca:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	81 0f       	add	r24, r17
	dt.minute %= 60;
    2ed2:	99 e8       	ldi	r25, 0x89	; 137
    2ed4:	89 9f       	mul	r24, r25
    2ed6:	91 2d       	mov	r25, r1
    2ed8:	11 24       	eor	r1, r1
    2eda:	92 95       	swap	r25
    2edc:	96 95       	lsr	r25
    2ede:	97 70       	andi	r25, 0x07	; 7
    2ee0:	2c e3       	ldi	r18, 0x3C	; 60
    2ee2:	92 9f       	mul	r25, r18
    2ee4:	80 19       	sub	r24, r0
    2ee6:	11 24       	eor	r1, r1
    2ee8:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    2eea:	ae 01       	movw	r20, r28
    2eec:	4f 5f       	subi	r20, 0xFF	; 255
    2eee:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef0:	60 e8       	ldi	r22, 0x80	; 128
    2ef2:	22 e0       	ldi	r18, 0x02	; 2
    2ef4:	81 e5       	ldi	r24, 0x51	; 81
    2ef6:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2efa:	81 11       	cpse	r24, r1
    2efc:	20 c0       	rjmp	.+64     	; 0x2f3e <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    2efe:	99 85       	ldd	r25, Y+9	; 0x09
    2f00:	8d ec       	ldi	r24, 0xCD	; 205
    2f02:	98 9f       	mul	r25, r24
    2f04:	81 2d       	mov	r24, r1
    2f06:	11 24       	eor	r1, r1
    2f08:	86 95       	lsr	r24
    2f0a:	86 95       	lsr	r24
    2f0c:	86 95       	lsr	r24
    2f0e:	40 e1       	ldi	r20, 0x10	; 16
    2f10:	84 9f       	mul	r24, r20
    2f12:	90 01       	movw	r18, r0
    2f14:	11 24       	eor	r1, r1
    2f16:	88 0f       	add	r24, r24
    2f18:	38 2f       	mov	r19, r24
    2f1a:	33 0f       	add	r19, r19
    2f1c:	33 0f       	add	r19, r19
    2f1e:	83 0f       	add	r24, r19
    2f20:	98 1b       	sub	r25, r24
    2f22:	92 2b       	or	r25, r18
    2f24:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    2f26:	ae 01       	movw	r20, r28
    2f28:	4d 5f       	subi	r20, 0xFD	; 253
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2c:	60 e8       	ldi	r22, 0x80	; 128
    2f2e:	25 e0       	ldi	r18, 0x05	; 5
    2f30:	81 e5       	ldi	r24, 0x51	; 81
    2f32:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2f36:	88 23       	and	r24, r24
    2f38:	21 f0       	breq	.+8      	; 0x2f42 <RTC_set_wake_up_interrupt_minutes+0xae>
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	01 c0       	rjmp	.+2      	; 0x2f44 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    2f42:	80 e0       	ldi	r24, 0x00	; 0
}
    2f44:	2d 96       	adiw	r28, 0x0d	; 13
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00002066 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2066:	4f 92       	push	r4
    2068:	5f 92       	push	r5
    206a:	6f 92       	push	r6
    206c:	7f 92       	push	r7
    206e:	8f 92       	push	r8
    2070:	9f 92       	push	r9
    2072:	af 92       	push	r10
    2074:	bf 92       	push	r11
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	00 d0       	rcall	.+0      	; 0x2088 <RTC_datetime_to_ts+0x22>
    2088:	00 d0       	rcall	.+0      	; 0x208a <RTC_datetime_to_ts+0x24>
    208a:	00 d0       	rcall	.+0      	; 0x208c <RTC_datetime_to_ts+0x26>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	f9 01       	movw	r30, r18
    2092:	49 2e       	mov	r4, r25
    2094:	51 2c       	mov	r5, r1
    2096:	61 2c       	mov	r6, r1
    2098:	71 2c       	mov	r7, r1
    209a:	03 2e       	mov	r0, r19
    209c:	3a e1       	ldi	r19, 0x1A	; 26
    209e:	44 0c       	add	r4, r4
    20a0:	55 1c       	adc	r5, r5
    20a2:	66 1c       	adc	r6, r6
    20a4:	77 1c       	adc	r7, r7
    20a6:	3a 95       	dec	r19
    20a8:	d1 f7       	brne	.-12     	; 0x209e <RTC_datetime_to_ts+0x38>
    20aa:	30 2d       	mov	r19, r0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e0       	ldi	r26, 0x00	; 0
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	07 2e       	mov	r0, r23
    20b4:	76 e1       	ldi	r23, 0x16	; 22
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	aa 1f       	adc	r26, r26
    20bc:	bb 1f       	adc	r27, r27
    20be:	7a 95       	dec	r23
    20c0:	d1 f7       	brne	.-12     	; 0x20b6 <RTC_datetime_to_ts+0x50>
    20c2:	70 2d       	mov	r23, r0
    20c4:	84 29       	or	r24, r4
    20c6:	95 29       	or	r25, r5
    20c8:	a6 29       	or	r26, r6
    20ca:	b7 29       	or	r27, r7
    20cc:	87 2e       	mov	r8, r23
    20ce:	91 2c       	mov	r9, r1
    20d0:	a1 2c       	mov	r10, r1
    20d2:	b1 2c       	mov	r11, r1
    20d4:	07 2e       	mov	r0, r23
    20d6:	71 e1       	ldi	r23, 0x11	; 17
    20d8:	88 0c       	add	r8, r8
    20da:	99 1c       	adc	r9, r9
    20dc:	aa 1c       	adc	r10, r10
    20de:	bb 1c       	adc	r11, r11
    20e0:	7a 95       	dec	r23
    20e2:	d1 f7       	brne	.-12     	; 0x20d8 <RTC_datetime_to_ts+0x72>
    20e4:	70 2d       	mov	r23, r0
    20e6:	88 29       	or	r24, r8
    20e8:	99 29       	or	r25, r9
    20ea:	aa 29       	or	r26, r10
    20ec:	bb 29       	or	r27, r11
    20ee:	c6 2e       	mov	r12, r22
    20f0:	d1 2c       	mov	r13, r1
    20f2:	e1 2c       	mov	r14, r1
    20f4:	f1 2c       	mov	r15, r1
    20f6:	0b 2e       	mov	r0, r27
    20f8:	bc e0       	ldi	r27, 0x0C	; 12
    20fa:	cc 0c       	add	r12, r12
    20fc:	dd 1c       	adc	r13, r13
    20fe:	ee 1c       	adc	r14, r14
    2100:	ff 1c       	adc	r15, r15
    2102:	ba 95       	dec	r27
    2104:	d1 f7       	brne	.-12     	; 0x20fa <RTC_datetime_to_ts+0x94>
    2106:	b0 2d       	mov	r27, r0
    2108:	8c 29       	or	r24, r12
    210a:	9d 29       	or	r25, r13
    210c:	ae 29       	or	r26, r14
    210e:	bf 29       	or	r27, r15
    2110:	05 2f       	mov	r16, r21
    2112:	10 e0       	ldi	r17, 0x00	; 0
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	00 0f       	add	r16, r16
    211a:	11 1f       	adc	r17, r17
    211c:	22 1f       	adc	r18, r18
    211e:	33 1f       	adc	r19, r19
    2120:	00 0f       	add	r16, r16
    2122:	11 1f       	adc	r17, r17
    2124:	22 1f       	adc	r18, r18
    2126:	33 1f       	adc	r19, r19
    2128:	00 0f       	add	r16, r16
    212a:	11 1f       	adc	r17, r17
    212c:	22 1f       	adc	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	00 0f       	add	r16, r16
    2132:	11 1f       	adc	r17, r17
    2134:	22 1f       	adc	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	00 0f       	add	r16, r16
    213a:	11 1f       	adc	r17, r17
    213c:	22 1f       	adc	r18, r18
    213e:	33 1f       	adc	r19, r19
    2140:	00 0f       	add	r16, r16
    2142:	11 1f       	adc	r17, r17
    2144:	22 1f       	adc	r18, r18
    2146:	33 1f       	adc	r19, r19
    2148:	80 2b       	or	r24, r16
    214a:	91 2b       	or	r25, r17
    214c:	a2 2b       	or	r26, r18
    214e:	b3 2b       	or	r27, r19
    2150:	84 2b       	or	r24, r20
    2152:	b0 83       	st	Z, r27
    2154:	a1 83       	std	Z+1, r26	; 0x01
    2156:	92 83       	std	Z+2, r25	; 0x02
    2158:	83 83       	std	Z+3, r24	; 0x03
    215a:	26 96       	adiw	r28, 0x06	; 6
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	df 90       	pop	r13
    2174:	cf 90       	pop	r12
    2176:	bf 90       	pop	r11
    2178:	af 90       	pop	r10
    217a:	9f 90       	pop	r9
    217c:	8f 90       	pop	r8
    217e:	7f 90       	pop	r7
    2180:	6f 90       	pop	r6
    2182:	5f 90       	pop	r5
    2184:	4f 90       	pop	r4
    2186:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

000058ea <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    58ea:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    58ec:	54 81       	ldd	r21, Z+4	; 0x04
    58ee:	43 81       	ldd	r20, Z+3	; 0x03
    58f0:	31 81       	ldd	r19, Z+1	; 0x01
    58f2:	20 81       	ld	r18, Z
    58f4:	65 2f       	mov	r22, r21
    58f6:	74 2f       	mov	r23, r20
    58f8:	83 2f       	mov	r24, r19
    58fa:	92 2f       	mov	r25, r18
    58fc:	0e 94 65 20 	call	0x40ca	; 0x40ca <__fixunssfsi>
}
    5900:	cb 01       	movw	r24, r22
    5902:	08 95       	ret

Disassembly of section .text.init_measurement:

00004ea2 <init_measurement>:
	if(status!=SCD30_STATUS_SUCCESS) return status;
	
	while(!SCD30_HAL_data_ready()){};
		
	return read_value(value);
}
    4ea2:	25 e0       	ldi	r18, 0x05	; 5
    4ea4:	44 e9       	ldi	r20, 0x94	; 148
    4ea6:	56 e0       	ldi	r21, 0x06	; 6
    4ea8:	60 e0       	ldi	r22, 0x00	; 0
    4eaa:	81 e6       	ldi	r24, 0x61	; 97
    4eac:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
    4eb0:	81 11       	cpse	r24, r1
    4eb2:	0f c0       	rjmp	.+30     	; 0x4ed2 <init_measurement+0x30>
    4eb4:	25 e0       	ldi	r18, 0x05	; 5
    4eb6:	49 e9       	ldi	r20, 0x99	; 153
    4eb8:	56 e0       	ldi	r21, 0x06	; 6
    4eba:	60 e0       	ldi	r22, 0x00	; 0
    4ebc:	81 e6       	ldi	r24, 0x61	; 97
    4ebe:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
    4ec2:	81 11       	cpse	r24, r1
    4ec4:	08 c0       	rjmp	.+16     	; 0x4ed6 <init_measurement+0x34>
    4ec6:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <SCD30_HAL_data_ready>
    4eca:	88 23       	and	r24, r24
    4ecc:	e1 f3       	breq	.-8      	; 0x4ec6 <init_measurement+0x24>
    4ece:	80 e0       	ldi	r24, 0x00	; 0
    4ed0:	08 95       	ret
    4ed2:	82 e0       	ldi	r24, 0x02	; 2
    4ed4:	08 95       	ret
    4ed6:	82 e0       	ldi	r24, 0x02	; 2
    4ed8:	08 95       	ret

Disassembly of section .text.validate_data:

0000518a <validate_data>:
    518a:	cf 93       	push	r28
    518c:	df 93       	push	r29
    518e:	ec 01       	movw	r28, r24
    5190:	62 e0       	ldi	r22, 0x02	; 2
    5192:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <calc_crc8>
    5196:	9a 81       	ldd	r25, Y+2	; 0x02
    5198:	89 13       	cpse	r24, r25
    519a:	0a c0       	rjmp	.+20     	; 0x51b0 <validate_data+0x26>
    519c:	62 e0       	ldi	r22, 0x02	; 2
    519e:	ce 01       	movw	r24, r28
    51a0:	03 96       	adiw	r24, 0x03	; 3
    51a2:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <calc_crc8>
    51a6:	9d 81       	ldd	r25, Y+5	; 0x05
    51a8:	89 17       	cp	r24, r25
    51aa:	21 f0       	breq	.+8      	; 0x51b4 <validate_data+0x2a>
    51ac:	80 e0       	ldi	r24, 0x00	; 0
    51ae:	03 c0       	rjmp	.+6      	; 0x51b6 <validate_data+0x2c>
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	01 c0       	rjmp	.+2      	; 0x51b6 <validate_data+0x2c>
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	08 95       	ret

Disassembly of section .text.read_value:

0000341a <read_value>:
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	00 d0       	rcall	.+0      	; 0x3424 <read_value+0xa>
    3424:	00 d0       	rcall	.+0      	; 0x3426 <read_value+0xc>
    3426:	00 d0       	rcall	.+0      	; 0x3428 <read_value+0xe>
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	8c 01       	movw	r16, r24
    342e:	8f ef       	ldi	r24, 0xFF	; 255
    3430:	9f ef       	ldi	r25, 0xFF	; 255
    3432:	f8 01       	movw	r30, r16
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <SCD30_HAL_data_ready>
    343c:	81 11       	cpse	r24, r1
    343e:	07 c0       	rjmp	.+14     	; 0x344e <read_value+0x34>
    3440:	8e ef       	ldi	r24, 0xFE	; 254
    3442:	9f ef       	ldi	r25, 0xFF	; 255
    3444:	f8 01       	movw	r30, r16
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
    344a:	83 e0       	ldi	r24, 0x03	; 3
    344c:	2c c0       	rjmp	.+88     	; 0x34a6 <read_value+0x8c>
    344e:	22 e0       	ldi	r18, 0x02	; 2
    3450:	41 ea       	ldi	r20, 0xA1	; 161
    3452:	56 e0       	ldi	r21, 0x06	; 6
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	81 e6       	ldi	r24, 0x61	; 97
    3458:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <TWI_API_write_data_stop>
    345c:	81 11       	cpse	r24, r1
    345e:	1e c0       	rjmp	.+60     	; 0x349c <read_value+0x82>
    3460:	8f e3       	ldi	r24, 0x3F	; 63
    3462:	9f e1       	ldi	r25, 0x1F	; 31
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <read_value+0x4a>
    3468:	00 c0       	rjmp	.+0      	; 0x346a <read_value+0x50>
    346a:	00 00       	nop
    346c:	46 e0       	ldi	r20, 0x06	; 6
    346e:	be 01       	movw	r22, r28
    3470:	6f 5f       	subi	r22, 0xFF	; 255
    3472:	7f 4f       	sbci	r23, 0xFF	; 255
    3474:	81 e6       	ldi	r24, 0x61	; 97
    3476:	0e 94 9d 2a 	call	0x553a	; 0x553a <TWI_API_read_data_ack_end_nack_stop>
    347a:	81 11       	cpse	r24, r1
    347c:	11 c0       	rjmp	.+34     	; 0x34a0 <read_value+0x86>
    347e:	ce 01       	movw	r24, r28
    3480:	01 96       	adiw	r24, 0x01	; 1
    3482:	0e 94 c5 28 	call	0x518a	; 0x518a <validate_data>
    3486:	88 23       	and	r24, r24
    3488:	69 f0       	breq	.+26     	; 0x34a4 <read_value+0x8a>
    348a:	ce 01       	movw	r24, r28
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	0e 94 75 2c 	call	0x58ea	; 0x58ea <bytes_2_uint>
    3492:	f8 01       	movw	r30, r16
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <read_value+0x8c>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <read_value+0x8c>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <read_value+0x8c>
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	26 96       	adiw	r28, 0x06	; 6
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

000049ac <vect_SCD_do_sample>:
    49ac:	80 91 d2 0f 	lds	r24, 0x0FD2	; 0x800fd2 <_data>
    49b0:	90 91 d3 0f 	lds	r25, 0x0FD3	; 0x800fd3 <_data+0x1>
    49b4:	20 91 d0 0f 	lds	r18, 0x0FD0	; 0x800fd0 <cntSamples>
    49b8:	30 91 d1 0f 	lds	r19, 0x0FD1	; 0x800fd1 <cntSamples+0x1>
    49bc:	a9 01       	movw	r20, r18
    49be:	4f 5f       	subi	r20, 0xFF	; 255
    49c0:	5f 4f       	sbci	r21, 0xFF	; 255
    49c2:	50 93 d1 0f 	sts	0x0FD1, r21	; 0x800fd1 <cntSamples+0x1>
    49c6:	40 93 d0 0f 	sts	0x0FD0, r20	; 0x800fd0 <cntSamples>
    49ca:	22 0f       	add	r18, r18
    49cc:	33 1f       	adc	r19, r19
    49ce:	82 0f       	add	r24, r18
    49d0:	93 1f       	adc	r25, r19
    49d2:	0e 94 0d 1a 	call	0x341a	; 0x341a <read_value>
    49d6:	20 91 d0 0f 	lds	r18, 0x0FD0	; 0x800fd0 <cntSamples>
    49da:	30 91 d1 0f 	lds	r19, 0x0FD1	; 0x800fd1 <cntSamples+0x1>
    49de:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <_nSamples>
    49e2:	90 91 d5 0f 	lds	r25, 0x0FD5	; 0x800fd5 <_nSamples+0x1>
    49e6:	28 17       	cp	r18, r24
    49e8:	39 07       	cpc	r19, r25
    49ea:	10 f0       	brcs	.+4      	; 0x49f0 <vect_SCD_do_sample+0x44>
    49ec:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <TC1_HAL_stop>
    49f0:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

000044be <SCD30_init_sampling>:
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	ec 01       	movw	r28, r24
    44c4:	70 93 d5 0f 	sts	0x0FD5, r23	; 0x800fd5 <_nSamples+0x1>
    44c8:	60 93 d4 0f 	sts	0x0FD4, r22	; 0x800fd4 <_nSamples>
    44cc:	10 92 d1 0f 	sts	0x0FD1, r1	; 0x800fd1 <cntSamples+0x1>
    44d0:	10 92 d0 0f 	sts	0x0FD0, r1	; 0x800fd0 <cntSamples>
    44d4:	50 93 d3 0f 	sts	0x0FD3, r21	; 0x800fd3 <_data+0x1>
    44d8:	40 93 d2 0f 	sts	0x0FD2, r20	; 0x800fd2 <_data>
    44dc:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <SCD30_HAL_init>
    44e0:	66 ed       	ldi	r22, 0xD6	; 214
    44e2:	74 e2       	ldi	r23, 0x24	; 36
    44e4:	ce 01       	movw	r24, r28
    44e6:	0e 94 2c 28 	call	0x5058	; 0x5058 <TC1_HAL_init>
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <PM_HAL_SCD30_power>
    44f0:	2f ef       	ldi	r18, 0xFF	; 255
    44f2:	83 ed       	ldi	r24, 0xD3	; 211
    44f4:	90 e3       	ldi	r25, 0x30	; 48
    44f6:	21 50       	subi	r18, 0x01	; 1
    44f8:	80 40       	sbci	r24, 0x00	; 0
    44fa:	90 40       	sbci	r25, 0x00	; 0
    44fc:	e1 f7       	brne	.-8      	; 0x44f6 <SCD30_init_sampling+0x38>
    44fe:	00 c0       	rjmp	.+0      	; 0x4500 <SCD30_init_sampling+0x42>
    4500:	00 00       	nop
    4502:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <init_measurement>
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00005aba <SCD30_deinit_sampling>:
	
	return init_measurement();
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    5aba:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    5abe:	80 e0       	ldi	r24, 0x00	; 0
    5ac0:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <PM_HAL_SCD30_power>
	_data=NULL;
    5ac4:	10 92 d3 0f 	sts	0x0FD3, r1	; 0x800fd3 <_data+0x1>
    5ac8:	10 92 d2 0f 	sts	0x0FD2, r1	; 0x800fd2 <_data>
    5acc:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

00005cb6 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    5cb6:	0e 94 d6 24 	call	0x49ac	; 0x49ac <vect_SCD_do_sample>
	TC1_HAL_start();
    5cba:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    5cbe:	80 e0       	ldi	r24, 0x00	; 0
    5cc0:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

000058b2 <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    58b2:	40 91 d0 0f 	lds	r20, 0x0FD0	; 0x800fd0 <cntSamples>
    58b6:	50 91 d1 0f 	lds	r21, 0x0FD1	; 0x800fd1 <cntSamples+0x1>
    58ba:	20 91 d4 0f 	lds	r18, 0x0FD4	; 0x800fd4 <_nSamples>
    58be:	30 91 d5 0f 	lds	r19, 0x0FD5	; 0x800fd5 <_nSamples+0x1>
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	42 17       	cp	r20, r18
    58c6:	53 07       	cpc	r21, r19
    58c8:	08 f4       	brcc	.+2      	; 0x58cc <SCD30_is_sampling_done+0x1a>
    58ca:	80 e0       	ldi	r24, 0x00	; 0
}
    58cc:	08 95       	ret

Disassembly of section .text.SCD30_init_get_reading:

000057ae <SCD30_init_get_reading>:
		
	return read_value(value);
}

SCD30_STATUS SCD30_init_get_reading(){
	PM_HAL_SCD30_power(true);
    57ae:	81 e0       	ldi	r24, 0x01	; 1
    57b0:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <PM_HAL_SCD30_power>
    57b4:	2f ef       	ldi	r18, 0xFF	; 255
    57b6:	83 ed       	ldi	r24, 0xD3	; 211
    57b8:	90 e3       	ldi	r25, 0x30	; 48
    57ba:	21 50       	subi	r18, 0x01	; 1
    57bc:	80 40       	sbci	r24, 0x00	; 0
    57be:	90 40       	sbci	r25, 0x00	; 0
    57c0:	e1 f7       	brne	.-8      	; 0x57ba <SCD30_init_get_reading+0xc>
    57c2:	00 c0       	rjmp	.+0      	; 0x57c4 <SCD30_init_get_reading+0x16>
    57c4:	00 00       	nop
	_delay_ms(2000);
	
	SCD30_STATUS status=init_measurement();
    57c6:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <init_measurement>
	if(status!=SCD30_STATUS_SUCCESS) return status;
	return SCD30_STATUS_SUCCESS;
}
    57ca:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00005904 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    5904:	cf 93       	push	r28
    5906:	df 93       	push	r29
    5908:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    590a:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <SCD30_HAL_data_ready>
    590e:	88 23       	and	r24, r24
    5910:	e1 f3       	breq	.-8      	; 0x590a <SCD30_get_reading+0x6>
	
	return read_value(value);
    5912:	ce 01       	movw	r24, r28
    5914:	0e 94 0d 1a 	call	0x341a	; 0x341a <read_value>
}
    5918:	df 91       	pop	r29
    591a:	cf 91       	pop	r28
    591c:	08 95       	ret

Disassembly of section .text.parse_cmd:

0000549c <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    549c:	fc 01       	movw	r30, r24
    549e:	80 81       	ld	r24, Z
    54a0:	82 37       	cpi	r24, 0x72	; 114
    54a2:	41 f0       	breq	.+16     	; 0x54b4 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    54a4:	87 37       	cpi	r24, 0x77	; 119
    54a6:	41 f0       	breq	.+16     	; 0x54b8 <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    54a8:	83 36       	cpi	r24, 0x63	; 99
    54aa:	41 f0       	breq	.+16     	; 0x54bc <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    54ac:	83 37       	cpi	r24, 0x73	; 115
    54ae:	41 f4       	brne	.+16     	; 0x54c0 <parse_cmd+0x24>
    54b0:	8a e0       	ldi	r24, 0x0A	; 10
    54b2:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    54b4:	87 e0       	ldi	r24, 0x07	; 7
    54b6:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    54b8:	88 e0       	ldi	r24, 0x08	; 8
    54ba:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    54bc:	89 e0       	ldi	r24, 0x09	; 9
    54be:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    54c0:	85 e0       	ldi	r24, 0x05	; 5
}
    54c2:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004288 <validate_cmd>:

static bool validate_cmd(char msg[]){
    4288:	cf 93       	push	r28
    428a:	df 93       	push	r29
    428c:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    428e:	bc 01       	movw	r22, r24
    4290:	80 e8       	ldi	r24, 0x80	; 128
    4292:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4296:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4298:	fc 01       	movw	r30, r24
    429a:	31 97       	sbiw	r30, 0x01	; 1
    429c:	ec 0f       	add	r30, r28
    429e:	fd 1f       	adc	r31, r29
    42a0:	80 81       	ld	r24, Z
    42a2:	80 32       	cpi	r24, 0x20	; 32
    42a4:	b1 f0       	breq	.+44     	; 0x42d2 <validate_cmd+0x4a>
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 e0       	ldi	r20, 0x00	; 0
    42ac:	0d c0       	rjmp	.+26     	; 0x42c8 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    42ae:	fe 01       	movw	r30, r28
    42b0:	e2 0f       	add	r30, r18
    42b2:	f3 1f       	adc	r31, r19
    42b4:	90 81       	ld	r25, Z
    42b6:	90 32       	cpi	r25, 0x20	; 32
    42b8:	21 f4       	brne	.+8      	; 0x42c2 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    42ba:	41 11       	cpse	r20, r1
    42bc:	0c c0       	rjmp	.+24     	; 0x42d6 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    42be:	41 e0       	ldi	r20, 0x01	; 1
    42c0:	01 c0       	rjmp	.+2      	; 0x42c4 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    42c2:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    42c4:	2f 5f       	subi	r18, 0xFF	; 255
    42c6:	3f 4f       	sbci	r19, 0xFF	; 255
    42c8:	26 17       	cp	r18, r22
    42ca:	37 07       	cpc	r19, r23
    42cc:	80 f3       	brcs	.-32     	; 0x42ae <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	03 c0       	rjmp	.+6      	; 0x42d8 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	01 c0       	rjmp	.+2      	; 0x42d8 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    42d6:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

Disassembly of section .text.CONF_enter:

00002188 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    2188:	cf 93       	push	r28
	uart1_hal_init();
    218a:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    218e:	c0 e0       	ldi	r28, 0x00	; 0
    2190:	0b c0       	rjmp	.+22     	; 0x21a8 <CONF_enter+0x20>
				uart1_hal_send_string("Setting modules up... Please wait");
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    2192:	c2 e0       	ldi	r28, 0x02	; 2
    2194:	09 c0       	rjmp	.+18     	; 0x21a8 <CONF_enter+0x20>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    2196:	c5 e0       	ldi	r28, 0x05	; 5
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <CONF_enter+0x20>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    219a:	c6 e0       	ldi	r28, 0x06	; 6
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    219e:	c5 e0       	ldi	r28, 0x05	; 5
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    21a2:	c5 e0       	ldi	r28, 0x05	; 5
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    21a6:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    21a8:	ec 2f       	mov	r30, r28
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	ec 30       	cpi	r30, 0x0C	; 12
    21ae:	f1 05       	cpc	r31, r1
    21b0:	d8 f7       	brcc	.-10     	; 0x21a8 <CONF_enter+0x20>
    21b2:	eb 5a       	subi	r30, 0xAB	; 171
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    21ba:	6c ee       	ldi	r22, 0xEC	; 236
    21bc:	73 e0       	ldi	r23, 0x03	; 3
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    21c4:	62 e1       	ldi	r22, 0x12	; 18
    21c6:	74 e0       	ldi	r23, 0x04	; 4
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				if(!init_methane_SCD30()){
    21ce:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <init_methane_SCD30>
    21d2:	81 11       	cpse	r24, r1
    21d4:	de cf       	rjmp	.-68     	; 0x2192 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    21d6:	64 e3       	ldi	r22, 0x34	; 52
    21d8:	74 e0       	ldi	r23, 0x04	; 4
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
					state=CONF_EXIT;
    21e0:	c4 e0       	ldi	r28, 0x04	; 4
    21e2:	e2 cf       	rjmp	.-60     	; 0x21a8 <CONF_enter+0x20>
				}
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    21e4:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <uart1_hal_message_ready>
    21e8:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    21ea:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    21ec:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <uart1_hal_rx_full>
    21f0:	81 11       	cpse	r24, r1
    21f2:	d1 cf       	rjmp	.-94     	; 0x2196 <CONF_enter+0xe>
    21f4:	d9 cf       	rjmp	.-78     	; 0x21a8 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    21f6:	8a ed       	ldi	r24, 0xDA	; 218
    21f8:	97 e0       	ldi	r25, 0x07	; 7
    21fa:	0e 94 3a 2a 	call	0x5474	; 0x5474 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    21fe:	8a ed       	ldi	r24, 0xDA	; 218
    2200:	97 e0       	ldi	r25, 0x07	; 7
    2202:	0e 94 44 21 	call	0x4288	; 0x4288 <validate_cmd>
    2206:	88 23       	and	r24, r24
    2208:	41 f2       	breq	.-112    	; 0x219a <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    220a:	8a ed       	ldi	r24, 0xDA	; 218
    220c:	97 e0       	ldi	r25, 0x07	; 7
    220e:	0e 94 4e 2a 	call	0x549c	; 0x549c <parse_cmd>
    2212:	c8 2f       	mov	r28, r24
    2214:	c9 cf       	rjmp	.-110    	; 0x21a8 <CONF_enter+0x20>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    2216:	6a ed       	ldi	r22, 0xDA	; 218
    2218:	77 e0       	ldi	r23, 0x07	; 7
    221a:	80 e8       	ldi	r24, 0x80	; 128
    221c:	42 e1       	ldi	r20, 0x12	; 18
    221e:	57 e0       	ldi	r21, 0x07	; 7
    2220:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <handle_read>
    2224:	88 23       	and	r24, r24
    2226:	09 f4       	brne	.+2      	; 0x222a <CONF_enter+0xa2>
    2228:	ba cf       	rjmp	.-140    	; 0x219e <CONF_enter+0x16>
					state=CONF_REPLY;
    222a:	cb e0       	ldi	r28, 0x0B	; 11
    222c:	bd cf       	rjmp	.-134    	; 0x21a8 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    222e:	6a ed       	ldi	r22, 0xDA	; 218
    2230:	77 e0       	ldi	r23, 0x07	; 7
    2232:	80 e8       	ldi	r24, 0x80	; 128
    2234:	42 e1       	ldi	r20, 0x12	; 18
    2236:	57 e0       	ldi	r21, 0x07	; 7
    2238:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <handle_write>
    223c:	88 23       	and	r24, r24
    223e:	09 f4       	brne	.+2      	; 0x2242 <CONF_enter+0xba>
    2240:	b0 cf       	rjmp	.-160    	; 0x21a2 <CONF_enter+0x1a>
					state=CONF_REPLY;
    2242:	cb e0       	ldi	r28, 0x0B	; 11
    2244:	b1 cf       	rjmp	.-158    	; 0x21a8 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				CON_RN2483();
    2246:	0e 94 60 14 	call	0x28c0	; 0x28c0 <CON_RN2483>
				uart1_hal_clear_rx_buffer();
    224a:	0e 94 77 2e 	call	0x5cee	; 0x5cee <uart1_hal_clear_rx_buffer>
				state=CONF_CLEAR_FOR_NEW_CMD;
    224e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2250:	ab cf       	rjmp	.-170    	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    2252:	6a ed       	ldi	r22, 0xDA	; 218
    2254:	77 e0       	ldi	r23, 0x07	; 7
    2256:	80 e8       	ldi	r24, 0x80	; 128
    2258:	42 e1       	ldi	r20, 0x12	; 18
    225a:	57 e0       	ldi	r21, 0x07	; 7
    225c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <handle_sample>
    2260:	88 23       	and	r24, r24
    2262:	09 f4       	brne	.+2      	; 0x2266 <CONF_enter+0xde>
    2264:	a0 cf       	rjmp	.-192    	; 0x21a6 <CONF_enter+0x1e>
					state=CONF_REPLY;
    2266:	cb e0       	ldi	r28, 0x0B	; 11
    2268:	9f cf       	rjmp	.-194    	; 0x21a8 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    226a:	62 e1       	ldi	r22, 0x12	; 18
    226c:	77 e0       	ldi	r23, 0x07	; 7
    226e:	80 e8       	ldi	r24, 0x80	; 128
    2270:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2274:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2276:	98 cf       	rjmp	.-208    	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    2278:	63 e5       	ldi	r22, 0x53	; 83
    227a:	74 e0       	ldi	r23, 0x04	; 4
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2282:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2284:	91 cf       	rjmp	.-222    	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    2286:	6d e5       	ldi	r22, 0x5D	; 93
    2288:	74 e0       	ldi	r23, 0x04	; 4
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2290:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2292:	8a cf       	rjmp	.-236    	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    2294:	0e 94 77 2e 	call	0x5cee	; 0x5cee <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    2298:	6a e6       	ldi	r22, 0x6A	; 106
    229a:	74 e0       	ldi	r23, 0x04	; 4
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    22a2:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    22a4:	81 cf       	rjmp	.-254    	; 0x21a8 <CONF_enter+0x20>
			
			case CONF_EXIT:
				return;
		}
	}
}
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00005514 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    5518:	bc 01       	movw	r22, r24
    551a:	80 e8       	ldi	r24, 0x80	; 128
    551c:	04 e0       	ldi	r16, 0x04	; 4
    551e:	10 e0       	ldi	r17, 0x00	; 0
    5520:	2e e7       	ldi	r18, 0x7E	; 126
    5522:	35 e0       	ldi	r19, 0x05	; 5
    5524:	40 e0       	ldi	r20, 0x00	; 0
    5526:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <strncmp>
    552a:	89 2b       	or	r24, r25
    552c:	11 f4       	brne	.+4      	; 0x5532 <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    552e:	84 e0       	ldi	r24, 0x04	; 4
    5530:	01 c0       	rjmp	.+2      	; 0x5534 <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    5532:	83 e0       	ldi	r24, 0x03	; 3
    5534:	1f 91       	pop	r17
    5536:	0f 91       	pop	r16
    5538:	08 95       	ret

Disassembly of section .text.CON_RN2483:

000028c0 <CON_RN2483>:
extern char cnf_rx_cmd[];
extern char cnf_reply[];

static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CON_RN2483(){
    28c0:	6f 92       	push	r6
    28c2:	7f 92       	push	r7
    28c4:	8f 92       	push	r8
    28c6:	cf 92       	push	r12
    28c8:	df 92       	push	r13
    28ca:	ef 92       	push	r14
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    28d0:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    28d2:	c2 30       	cpi	r28, 0x02	; 2
    28d4:	09 f1       	breq	.+66     	; 0x2918 <CON_RN2483+0x58>
    28d6:	28 f4       	brcc	.+10     	; 0x28e2 <CON_RN2483+0x22>
    28d8:	cc 23       	and	r28, r28
    28da:	49 f0       	breq	.+18     	; 0x28ee <CON_RN2483+0x2e>
    28dc:	c1 30       	cpi	r28, 0x01	; 1
    28de:	91 f0       	breq	.+36     	; 0x2904 <CON_RN2483+0x44>
    28e0:	f8 cf       	rjmp	.-16     	; 0x28d2 <CON_RN2483+0x12>
    28e2:	c3 30       	cpi	r28, 0x03	; 3
    28e4:	f9 f0       	breq	.+62     	; 0x2924 <CON_RN2483+0x64>
    28e6:	c4 30       	cpi	r28, 0x04	; 4
    28e8:	09 f4       	brne	.+2      	; 0x28ec <CON_RN2483+0x2c>
    28ea:	4b c0       	rjmp	.+150    	; 0x2982 <CON_RN2483+0xc2>
    28ec:	f2 cf       	rjmp	.-28     	; 0x28d2 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    28ee:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <uart0_hal_init>
				rn2483_init();
    28f2:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <rn2483_init>
				//LM_reset_module();
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    28f6:	63 e8       	ldi	r22, 0x83	; 131
    28f8:	75 e0       	ldi	r23, 0x05	; 5
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				state=CL_READ_MSG;
    2900:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2902:	e7 cf       	rjmp	.-50     	; 0x28d2 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    2904:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <uart1_hal_message_ready>
    2908:	88 23       	and	r24, r24
    290a:	19 f3       	breq	.-58     	; 0x28d2 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    290c:	8a ed       	ldi	r24, 0xDA	; 218
    290e:	97 e0       	ldi	r25, 0x07	; 7
    2910:	0e 94 3a 2a 	call	0x5474	; 0x5474 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    2914:	c2 e0       	ldi	r28, 0x02	; 2
    2916:	dd cf       	rjmp	.-70     	; 0x28d2 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    2918:	8a ed       	ldi	r24, 0xDA	; 218
    291a:	97 e0       	ldi	r25, 0x07	; 7
    291c:	0e 94 8a 2a 	call	0x5514	; 0x5514 <CON_RN2483_parse>
    2920:	c8 2f       	mov	r28, r24
			break;
    2922:	d7 cf       	rjmp	.-82     	; 0x28d2 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    2924:	8a ed       	ldi	r24, 0xDA	; 218
    2926:	97 e0       	ldi	r25, 0x07	; 7
    2928:	6c 01       	movw	r12, r24
    292a:	20 e8       	ldi	r18, 0x80	; 128
    292c:	e2 2e       	mov	r14, r18
    292e:	2f 93       	push	r18
    2930:	df 92       	push	r13
    2932:	8f 93       	push	r24
    2934:	89 eb       	ldi	r24, 0xB9	; 185
    2936:	95 e0       	ldi	r25, 0x05	; 5
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	af 93       	push	r26
    293c:	9f 93       	push	r25
    293e:	8f 93       	push	r24
    2940:	c2 e1       	ldi	r28, 0x12	; 18
    2942:	d7 e0       	ldi	r29, 0x07	; 7
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
				uart1_hal_send_string(cnf_reply);
    294c:	3e 01       	movw	r6, r28
    294e:	20 e8       	ldi	r18, 0x80	; 128
    2950:	82 2e       	mov	r8, r18
    2952:	88 2d       	mov	r24, r8
    2954:	b3 01       	movw	r22, r6
    2956:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    295a:	ae 01       	movw	r20, r28
    295c:	6c 2d       	mov	r22, r12
    295e:	7d 2d       	mov	r23, r13
    2960:	8e 2d       	mov	r24, r14
    2962:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    2966:	88 2d       	mov	r24, r8
    2968:	b3 01       	movw	r22, r6
    296a:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    296e:	8d b7       	in	r24, 0x3d	; 61
    2970:	9e b7       	in	r25, 0x3e	; 62
    2972:	08 96       	adiw	r24, 0x08	; 8
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	9e bf       	out	0x3e, r25	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    297e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2980:	a8 cf       	rjmp	.-176    	; 0x28d2 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart1_hal_send_string("Closing connection to RN2483...");
    2982:	6f eb       	ldi	r22, 0xBF	; 191
    2984:	75 e0       	ldi	r23, 0x05	; 5
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	ef 90       	pop	r14
    2994:	df 90       	pop	r13
    2996:	cf 90       	pop	r12
    2998:	8f 90       	pop	r8
    299a:	7f 90       	pop	r7
    299c:	6f 90       	pop	r6
    299e:	08 95       	ret

Disassembly of section .text.read_cols:

00002f58 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    2f58:	cf 92       	push	r12
    2f5a:	df 92       	push	r13
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	a3 97       	sbiw	r28, 0x23	; 35
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2f78:	63 e2       	ldi	r22, 0x23	; 35
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <EM_get_collections>
	res[0]='\0';
    2f82:	f7 01       	movw	r30, r14
    2f84:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    2f86:	10 e0       	ldi	r17, 0x00	; 0
    2f88:	35 c0       	rjmp	.+106    	; 0x2ff4 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    2f8a:	81 2f       	mov	r24, r17
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	fc 01       	movw	r30, r24
    2f90:	ee 0f       	add	r30, r30
    2f92:	ff 1f       	adc	r31, r31
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	e8 0f       	add	r30, r24
    2f9a:	f9 1f       	adc	r31, r25
    2f9c:	21 e0       	ldi	r18, 0x01	; 1
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	2c 0f       	add	r18, r28
    2fa2:	3d 1f       	adc	r19, r29
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	23 81       	ldd	r18, Z+3	; 0x03
    2faa:	2f 93       	push	r18
    2fac:	22 81       	ldd	r18, Z+2	; 0x02
    2fae:	2f 93       	push	r18
    2fb0:	21 81       	ldd	r18, Z+1	; 0x01
    2fb2:	2f 93       	push	r18
    2fb4:	20 81       	ld	r18, Z
    2fb6:	2f 93       	push	r18
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	9f 93       	push	r25
    2fbc:	8f 93       	push	r24
    2fbe:	88 e3       	ldi	r24, 0x38	; 56
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	a0 e0       	ldi	r26, 0x00	; 0
    2fc4:	af 93       	push	r26
    2fc6:	9f 93       	push	r25
    2fc8:	8f 93       	push	r24
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	f6 e1       	ldi	r31, 0x16	; 22
    2fce:	cf 2e       	mov	r12, r31
    2fd0:	ff e0       	ldi	r31, 0x0F	; 15
    2fd2:	df 2e       	mov	r13, r31
    2fd4:	f0 2d       	mov	r31, r0
    2fd6:	df 92       	push	r13
    2fd8:	cf 92       	push	r12
    2fda:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
		strcat(res, arg);
    2fde:	a6 01       	movw	r20, r12
    2fe0:	60 e8       	ldi	r22, 0x80	; 128
    2fe2:	c7 01       	movw	r24, r14
    2fe4:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    2fe8:	1f 5f       	subi	r17, 0xFF	; 255
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	17 30       	cpi	r17, 0x07	; 7
    2ff6:	48 f2       	brcs	.-110    	; 0x2f8a <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    2ff8:	a3 96       	adiw	r28, 0x23	; 35
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	df 90       	pop	r13
    3010:	cf 90       	pop	r12
    3012:	08 95       	ret

Disassembly of section .text.write_deveui:

00003ac8 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    3ac8:	cf 92       	push	r12
    3aca:	df 92       	push	r13
    3acc:	ef 92       	push	r14
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3ad6:	22 e0       	ldi	r18, 0x02	; 2
    3ad8:	46 e1       	ldi	r20, 0x16	; 22
    3ada:	5f e0       	ldi	r21, 0x0F	; 15
    3adc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    3ae0:	c8 2f       	mov	r28, r24
    3ae2:	88 23       	and	r24, r24
    3ae4:	29 f1       	breq	.+74     	; 0x3b30 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    3ae6:	86 e1       	ldi	r24, 0x16	; 22
    3ae8:	9f e0       	ldi	r25, 0x0F	; 15
    3aea:	6c 01       	movw	r12, r24
    3aec:	20 e8       	ldi	r18, 0x80	; 128
    3aee:	e2 2e       	mov	r14, r18
    3af0:	8e 2d       	mov	r24, r14
    3af2:	b6 01       	movw	r22, r12
    3af4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3af8:	40 97       	sbiw	r24, 0x10	; 16
    3afa:	c9 f4       	brne	.+50     	; 0x3b2e <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    3afc:	8e 2d       	mov	r24, r14
    3afe:	b6 01       	movw	r22, r12
    3b00:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <EM_set_deveui>
    3b04:	c8 2f       	mov	r28, r24
    3b06:	81 11       	cpse	r24, r1
    3b08:	09 c0       	rjmp	.+18     	; 0x3b1c <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    3b0a:	27 e0       	ldi	r18, 0x07	; 7
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	4e e4       	ldi	r20, 0x4E	; 78
    3b10:	53 e0       	ldi	r21, 0x03	; 3
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	c8 01       	movw	r24, r16
    3b16:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return false;
    3b1a:	0a c0       	rjmp	.+20     	; 0x3b30 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    3b1c:	28 e0       	ldi	r18, 0x08	; 8
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	45 e5       	ldi	r20, 0x55	; 85
    3b22:	53 e0       	ldi	r21, 0x03	; 3
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	c8 01       	movw	r24, r16
    3b28:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
    3b2c:	01 c0       	rjmp	.+2      	; 0x3b30 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    3b2e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    3b30:	8c 2f       	mov	r24, r28
    3b32:	cf 91       	pop	r28
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	ef 90       	pop	r14
    3b3a:	df 90       	pop	r13
    3b3c:	cf 90       	pop	r12
    3b3e:	08 95       	ret

Disassembly of section .text.write_appeui:

00003b40 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	cf 93       	push	r28
    3b4c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3b4e:	22 e0       	ldi	r18, 0x02	; 2
    3b50:	46 e1       	ldi	r20, 0x16	; 22
    3b52:	5f e0       	ldi	r21, 0x0F	; 15
    3b54:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    3b58:	c8 2f       	mov	r28, r24
    3b5a:	88 23       	and	r24, r24
    3b5c:	29 f1       	breq	.+74     	; 0x3ba8 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    3b5e:	86 e1       	ldi	r24, 0x16	; 22
    3b60:	9f e0       	ldi	r25, 0x0F	; 15
    3b62:	6c 01       	movw	r12, r24
    3b64:	20 e8       	ldi	r18, 0x80	; 128
    3b66:	e2 2e       	mov	r14, r18
    3b68:	8e 2d       	mov	r24, r14
    3b6a:	b6 01       	movw	r22, r12
    3b6c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3b70:	40 97       	sbiw	r24, 0x10	; 16
    3b72:	c9 f4       	brne	.+50     	; 0x3ba6 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    3b74:	8e 2d       	mov	r24, r14
    3b76:	b6 01       	movw	r22, r12
    3b78:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <EM_set_appeui>
    3b7c:	c8 2f       	mov	r28, r24
    3b7e:	81 11       	cpse	r24, r1
    3b80:	09 c0       	rjmp	.+18     	; 0x3b94 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    3b82:	27 e0       	ldi	r18, 0x07	; 7
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	4e e4       	ldi	r20, 0x4E	; 78
    3b88:	53 e0       	ldi	r21, 0x03	; 3
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	c8 01       	movw	r24, r16
    3b8e:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return false;
    3b92:	0a c0       	rjmp	.+20     	; 0x3ba8 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    3b94:	28 e0       	ldi	r18, 0x08	; 8
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	45 e5       	ldi	r20, 0x55	; 85
    3b9a:	53 e0       	ldi	r21, 0x03	; 3
    3b9c:	60 e0       	ldi	r22, 0x00	; 0
    3b9e:	c8 01       	movw	r24, r16
    3ba0:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
    3ba4:	01 c0       	rjmp	.+2      	; 0x3ba8 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    3ba6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    3ba8:	8c 2f       	mov	r24, r28
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ef 90       	pop	r14
    3bb2:	df 90       	pop	r13
    3bb4:	cf 90       	pop	r12
    3bb6:	08 95       	ret

Disassembly of section .text.write_appkey:

00003bb8 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    3bb8:	cf 92       	push	r12
    3bba:	df 92       	push	r13
    3bbc:	ef 92       	push	r14
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3bc6:	22 e0       	ldi	r18, 0x02	; 2
    3bc8:	46 e1       	ldi	r20, 0x16	; 22
    3bca:	5f e0       	ldi	r21, 0x0F	; 15
    3bcc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    3bd0:	c8 2f       	mov	r28, r24
    3bd2:	88 23       	and	r24, r24
    3bd4:	29 f1       	breq	.+74     	; 0x3c20 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    3bd6:	86 e1       	ldi	r24, 0x16	; 22
    3bd8:	9f e0       	ldi	r25, 0x0F	; 15
    3bda:	6c 01       	movw	r12, r24
    3bdc:	20 e8       	ldi	r18, 0x80	; 128
    3bde:	e2 2e       	mov	r14, r18
    3be0:	8e 2d       	mov	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3be8:	80 97       	sbiw	r24, 0x20	; 32
    3bea:	c9 f4       	brne	.+50     	; 0x3c1e <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    3bec:	8e 2d       	mov	r24, r14
    3bee:	b6 01       	movw	r22, r12
    3bf0:	0e 94 18 27 	call	0x4e30	; 0x4e30 <EM_set_appkey>
    3bf4:	c8 2f       	mov	r28, r24
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	09 c0       	rjmp	.+18     	; 0x3c0c <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    3bfa:	27 e0       	ldi	r18, 0x07	; 7
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	4e e4       	ldi	r20, 0x4E	; 78
    3c00:	53 e0       	ldi	r21, 0x03	; 3
    3c02:	60 e0       	ldi	r22, 0x00	; 0
    3c04:	c8 01       	movw	r24, r16
    3c06:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return false;
    3c0a:	0a c0       	rjmp	.+20     	; 0x3c20 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    3c0c:	28 e0       	ldi	r18, 0x08	; 8
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	45 e5       	ldi	r20, 0x55	; 85
    3c12:	53 e0       	ldi	r21, 0x03	; 3
    3c14:	60 e0       	ldi	r22, 0x00	; 0
    3c16:	c8 01       	movw	r24, r16
    3c18:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
    3c1c:	01 c0       	rjmp	.+2      	; 0x3c20 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    3c1e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    3c20:	8c 2f       	mov	r24, r28
    3c22:	cf 91       	pop	r28
    3c24:	1f 91       	pop	r17
    3c26:	0f 91       	pop	r16
    3c28:	ef 90       	pop	r14
    3c2a:	df 90       	pop	r13
    3c2c:	cf 90       	pop	r12
    3c2e:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

0000463e <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    463e:	0f 93       	push	r16
    4640:	1f 93       	push	r17
    4642:	cf 93       	push	r28
    4644:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4646:	22 e0       	ldi	r18, 0x02	; 2
    4648:	46 e1       	ldi	r20, 0x16	; 22
    464a:	5f e0       	ldi	r21, 0x0F	; 15
    464c:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    4650:	c8 2f       	mov	r28, r24
    4652:	88 23       	and	r24, r24
    4654:	a9 f0       	breq	.+42     	; 0x4680 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    4656:	86 e1       	ldi	r24, 0x16	; 22
    4658:	9f e0       	ldi	r25, 0x0F	; 15
    465a:	0e 94 ed 20 	call	0x41da	; 0x41da <is_float>
    465e:	c8 2f       	mov	r28, r24
    4660:	88 23       	and	r24, r24
    4662:	71 f0       	breq	.+28     	; 0x4680 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    4664:	86 e1       	ldi	r24, 0x16	; 22
    4666:	9f e0       	ldi	r25, 0x0F	; 15
    4668:	0e 94 86 22 	call	0x450c	; 0x450c <str2flaot>
	EM_set_ppmfactor(val);
    466c:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    4670:	28 e0       	ldi	r18, 0x08	; 8
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	45 e5       	ldi	r20, 0x55	; 85
    4676:	53 e0       	ldi	r21, 0x03	; 3
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	c8 01       	movw	r24, r16
    467c:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
	return true;
}
    4680:	8c 2f       	mov	r24, r28
    4682:	cf 91       	pop	r28
    4684:	1f 91       	pop	r17
    4686:	0f 91       	pop	r16
    4688:	08 95       	ret

Disassembly of section .text.write_RRL:

0000468a <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    468a:	0f 93       	push	r16
    468c:	1f 93       	push	r17
    468e:	cf 93       	push	r28
    4690:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4692:	22 e0       	ldi	r18, 0x02	; 2
    4694:	46 e1       	ldi	r20, 0x16	; 22
    4696:	5f e0       	ldi	r21, 0x0F	; 15
    4698:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    469c:	c8 2f       	mov	r28, r24
    469e:	88 23       	and	r24, r24
    46a0:	a9 f0       	breq	.+42     	; 0x46cc <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    46a2:	86 e1       	ldi	r24, 0x16	; 22
    46a4:	9f e0       	ldi	r25, 0x0F	; 15
    46a6:	0e 94 ed 20 	call	0x41da	; 0x41da <is_float>
    46aa:	c8 2f       	mov	r28, r24
    46ac:	88 23       	and	r24, r24
    46ae:	71 f0       	breq	.+28     	; 0x46cc <write_RRL+0x42>
	
	float val=str2flaot(arg);
    46b0:	86 e1       	ldi	r24, 0x16	; 22
    46b2:	9f e0       	ldi	r25, 0x0F	; 15
    46b4:	0e 94 86 22 	call	0x450c	; 0x450c <str2flaot>
	EM_set_RRL(val);
    46b8:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    46bc:	28 e0       	ldi	r18, 0x08	; 8
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	45 e5       	ldi	r20, 0x55	; 85
    46c2:	53 e0       	ldi	r21, 0x03	; 3
    46c4:	60 e0       	ldi	r22, 0x00	; 0
    46c6:	c8 01       	movw	r24, r16
    46c8:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
	return true;
}
    46cc:	8c 2f       	mov	r24, r28
    46ce:	cf 91       	pop	r28
    46d0:	1f 91       	pop	r17
    46d2:	0f 91       	pop	r16
    46d4:	08 95       	ret

Disassembly of section .text.write_VCC:

000046d6 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    46d6:	0f 93       	push	r16
    46d8:	1f 93       	push	r17
    46da:	cf 93       	push	r28
    46dc:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    46de:	22 e0       	ldi	r18, 0x02	; 2
    46e0:	46 e1       	ldi	r20, 0x16	; 22
    46e2:	5f e0       	ldi	r21, 0x0F	; 15
    46e4:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    46e8:	c8 2f       	mov	r28, r24
    46ea:	88 23       	and	r24, r24
    46ec:	a9 f0       	breq	.+42     	; 0x4718 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    46ee:	86 e1       	ldi	r24, 0x16	; 22
    46f0:	9f e0       	ldi	r25, 0x0F	; 15
    46f2:	0e 94 ed 20 	call	0x41da	; 0x41da <is_float>
    46f6:	c8 2f       	mov	r28, r24
    46f8:	88 23       	and	r24, r24
    46fa:	71 f0       	breq	.+28     	; 0x4718 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    46fc:	86 e1       	ldi	r24, 0x16	; 22
    46fe:	9f e0       	ldi	r25, 0x0F	; 15
    4700:	0e 94 86 22 	call	0x450c	; 0x450c <str2flaot>
	EM_set_Vcc(val);
    4704:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    4708:	28 e0       	ldi	r18, 0x08	; 8
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	45 e5       	ldi	r20, 0x55	; 85
    470e:	53 e0       	ldi	r21, 0x03	; 3
    4710:	60 e0       	ldi	r22, 0x00	; 0
    4712:	c8 01       	movw	r24, r16
    4714:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
	return true;
}
    4718:	8c 2f       	mov	r24, r28
    471a:	cf 91       	pop	r28
    471c:	1f 91       	pop	r17
    471e:	0f 91       	pop	r16
    4720:	08 95       	ret

Disassembly of section .text.write_cols:

00001f38 <write_cols>:

static bool write_cols(const char cmd[], char res[]){
    1f38:	4f 92       	push	r4
    1f3a:	5f 92       	push	r5
    1f3c:	6f 92       	push	r6
    1f3e:	7f 92       	push	r7
    1f40:	8f 92       	push	r8
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	a3 97       	sbiw	r28, 0x23	; 35
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	3b 01       	movw	r6, r22
    1f68:	88 2e       	mov	r8, r24
    1f6a:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    1f6c:	22 e0       	ldi	r18, 0x02	; 2
    1f6e:	46 e1       	ldi	r20, 0x16	; 22
    1f70:	5f e0       	ldi	r21, 0x0F	; 15
    1f72:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    1f76:	18 2f       	mov	r17, r24
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <write_cols+0x46>
    1f7c:	5d c0       	rjmp	.+186    	; 0x2038 <write_cols+0x100>
	index=atoi(arg);
    1f7e:	86 e1       	ldi	r24, 0x16	; 22
    1f80:	9f e0       	ldi	r25, 0x0F	; 15
    1f82:	6c 01       	movw	r12, r24
    1f84:	20 e8       	ldi	r18, 0x80	; 128
    1f86:	e2 2e       	mov	r14, r18
    1f88:	8e 2d       	mov	r24, r14
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <atoi>
	if(index<1 || index>7) return false;
    1f90:	0f ef       	ldi	r16, 0xFF	; 255
    1f92:	08 0f       	add	r16, r24
    1f94:	07 30       	cpi	r16, 0x07	; 7
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <write_cols+0x62>
    1f98:	4a c0       	rjmp	.+148    	; 0x202e <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    1f9a:	23 e0       	ldi	r18, 0x03	; 3
    1f9c:	46 e1       	ldi	r20, 0x16	; 22
    1f9e:	5f e0       	ldi	r21, 0x0F	; 15
    1fa0:	88 2d       	mov	r24, r8
    1fa2:	b3 01       	movw	r22, r6
    1fa4:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    1fa8:	18 2f       	mov	r17, r24
    1faa:	88 23       	and	r24, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <write_cols+0x78>
    1fae:	44 c0       	rjmp	.+136    	; 0x2038 <write_cols+0x100>
	samplings=atoi(arg);
    1fb0:	8e 2d       	mov	r24, r14
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <atoi>
    1fb8:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1fba:	02 97       	sbiw	r24, 0x02	; 2
    1fbc:	8b 32       	cpi	r24, 0x2B	; 43
    1fbe:	91 40       	sbci	r25, 0x01	; 1
    1fc0:	c0 f5       	brcc	.+112    	; 0x2032 <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1fc2:	24 e0       	ldi	r18, 0x04	; 4
    1fc4:	46 e1       	ldi	r20, 0x16	; 22
    1fc6:	5f e0       	ldi	r21, 0x0F	; 15
    1fc8:	88 2d       	mov	r24, r8
    1fca:	b3 01       	movw	r22, r6
    1fcc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    1fd0:	18 2f       	mov	r17, r24
    1fd2:	88 23       	and	r24, r24
    1fd4:	89 f1       	breq	.+98     	; 0x2038 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1fd6:	8e 2d       	mov	r24, r14
    1fd8:	b6 01       	movw	r22, r12
    1fda:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <atoi>
    1fde:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1fe0:	02 97       	sbiw	r24, 0x02	; 2
    1fe2:	87 35       	cpi	r24, 0x57	; 87
    1fe4:	92 40       	sbci	r25, 0x02	; 2
    1fe6:	38 f5       	brcc	.+78     	; 0x2036 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1fe8:	63 e2       	ldi	r22, 0x23	; 35
    1fea:	ce 01       	movw	r24, r28
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	7c 01       	movw	r14, r24
    1ff0:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <EM_get_collections>
	
	cols[index].samplings=samplings;
    1ff4:	80 2f       	mov	r24, r16
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	e8 0f       	add	r30, r24
    2004:	f9 1f       	adc	r31, r25
    2006:	ee 0d       	add	r30, r14
    2008:	ff 1d       	adc	r31, r15
    200a:	51 82       	std	Z+1, r5	; 0x01
    200c:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    200e:	d3 82       	std	Z+3, r13	; 0x03
    2010:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    2012:	b7 01       	movw	r22, r14
    2014:	80 e8       	ldi	r24, 0x80	; 128
    2016:	43 e2       	ldi	r20, 0x23	; 35
    2018:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    201c:	28 e0       	ldi	r18, 0x08	; 8
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	45 e5       	ldi	r20, 0x55	; 85
    2022:	53 e0       	ldi	r21, 0x03	; 3
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	c5 01       	movw	r24, r10
    2028:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
	return true;	
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    202e:	10 e0       	ldi	r17, 0x00	; 0
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    2036:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    2038:	81 2f       	mov	r24, r17
    203a:	a3 96       	adiw	r28, 0x23	; 35
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	af 90       	pop	r10
    205a:	8f 90       	pop	r8
    205c:	7f 90       	pop	r7
    205e:	6f 90       	pop	r6
    2060:	5f 90       	pop	r5
    2062:	4f 90       	pop	r4
    2064:	08 95       	ret

Disassembly of section .text.write_reset:

00002c2a <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	a3 97       	sbiw	r28, 0x23	; 35
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    2c44:	6d e5       	ldi	r22, 0x5D	; 93
    2c46:	73 e0       	ldi	r23, 0x03	; 3
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    2c4e:	6d e5       	ldi	r22, 0x5D	; 93
    2c50:	73 e0       	ldi	r23, 0x03	; 3
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    2c58:	6e e6       	ldi	r22, 0x6E	; 110
    2c5a:	73 e0       	ldi	r23, 0x03	; 3
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	80 e8       	ldi	r24, 0x80	; 128
    2c68:	9f e3       	ldi	r25, 0x3F	; 63
    2c6a:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	70 e4       	ldi	r23, 0x40	; 64
    2c72:	8c e1       	ldi	r24, 0x1C	; 28
    2c74:	95 e4       	ldi	r25, 0x45	; 69
    2c76:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <EM_set_RRL>
	EM_set_Vcc(5.00);
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	80 ea       	ldi	r24, 0xA0	; 160
    2c80:	90 e4       	ldi	r25, 0x40	; 64
    2c82:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <EM_set_Vcc>
	
	for (uint8_t i=0; i<7; i++)
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	1a c0       	rjmp	.+52     	; 0x2cbe <write_reset+0x94>
	{
		cols[i].type=T_INT16;
    2c8a:	e8 2f       	mov	r30, r24
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	9f 01       	movw	r18, r30
    2c90:	22 0f       	add	r18, r18
    2c92:	33 1f       	adc	r19, r19
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	e2 0f       	add	r30, r18
    2c9a:	f3 1f       	adc	r31, r19
    2c9c:	21 e0       	ldi	r18, 0x01	; 1
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	2c 0f       	add	r18, r28
    2ca2:	3d 1f       	adc	r19, r29
    2ca4:	e2 0f       	add	r30, r18
    2ca6:	f3 1f       	adc	r31, r19
    2ca8:	92 e0       	ldi	r25, 0x02	; 2
    2caa:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    2cac:	22 e0       	ldi	r18, 0x02	; 2
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	31 83       	std	Z+1, r19	; 0x01
    2cb2:	20 83       	st	Z, r18
		cols[i].samplingInterval=10;
    2cb4:	2a e0       	ldi	r18, 0x0A	; 10
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	33 83       	std	Z+3, r19	; 0x03
    2cba:	22 83       	std	Z+2, r18	; 0x02
	EM_set_appkey("00000000000000000000000000000000");
	EM_set_ppmfactor(1.00);
	EM_set_RRL(2500.00);
	EM_set_Vcc(5.00);
	
	for (uint8_t i=0; i<7; i++)
    2cbc:	8f 5f       	subi	r24, 0xFF	; 255
    2cbe:	87 30       	cpi	r24, 0x07	; 7
    2cc0:	20 f3       	brcs	.-56     	; 0x2c8a <write_reset+0x60>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=10;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    2cc2:	be 01       	movw	r22, r28
    2cc4:	6f 5f       	subi	r22, 0xFF	; 255
    2cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc8:	80 e8       	ldi	r24, 0x80	; 128
    2cca:	43 e2       	ldi	r20, 0x23	; 35
    2ccc:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <EM_set_collections>
	
	strcpy(res, "All settings reset");
    2cd0:	23 e1       	ldi	r18, 0x13	; 19
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4f e8       	ldi	r20, 0x8F	; 143
    2cd6:	53 e0       	ldi	r21, 0x03	; 3
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	c8 01       	movw	r24, r16
    2cdc:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
	return true;
}
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	a3 96       	adiw	r28, 0x23	; 35
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	08 95       	ret

Disassembly of section .text.handle_read:

000015d0 <handle_read>:
static bool write_RRL(const char cmd[], char res[]);
static bool write_VCC(const char cmd[], char res[]);
static bool write_cols(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);

bool handle_read(const char cmd[], char res[]){
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	68 97       	sbiw	r28, 0x18	; 24
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	6b 01       	movw	r12, r22
    15f2:	e8 2e       	mov	r14, r24
    15f4:	f4 2e       	mov	r15, r20
    15f6:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	ae 01       	movw	r20, r28
    15fc:	4f 5f       	subi	r20, 0xFF	; 255
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    1604:	18 2f       	mov	r17, r24
    1606:	88 23       	and	r24, r24
    1608:	09 f4       	brne	.+2      	; 0x160c <handle_read+0x3c>
    160a:	be c0       	rjmp	.+380    	; 0x1788 <handle_read+0x1b8>
    160c:	8e 2d       	mov	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 99 21 	call	0x4332	; 0x4332 <count_parameters>
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	09 f4       	brne	.+2      	; 0x161a <handle_read+0x4a>
    1618:	b6 c0       	rjmp	.+364    	; 0x1786 <handle_read+0x1b6>
	
	if (strcmp(par, RW_DEVEUI)==0)
    161a:	ce 01       	movw	r24, r28
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	6c 01       	movw	r12, r24
    1620:	20 e8       	ldi	r18, 0x80	; 128
    1622:	e2 2e       	mov	r14, r18
    1624:	22 ea       	ldi	r18, 0xA2	; 162
    1626:	33 e0       	ldi	r19, 0x03	; 3
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	8e 2d       	mov	r24, r14
    162c:	b6 01       	movw	r22, r12
    162e:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1632:	89 2b       	or	r24, r25
    1634:	29 f4       	brne	.+10     	; 0x1640 <handle_read+0x70>
	{
		EM_get_deveui(res);
    1636:	8f 2d       	mov	r24, r15
    1638:	90 2f       	mov	r25, r16
    163a:	0e 94 f7 28 	call	0x51ee	; 0x51ee <EM_get_deveui>
    163e:	a4 c0       	rjmp	.+328    	; 0x1788 <handle_read+0x1b8>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1640:	29 ea       	ldi	r18, 0xA9	; 169
    1642:	33 e0       	ldi	r19, 0x03	; 3
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	8e 2d       	mov	r24, r14
    1648:	b6 01       	movw	r22, r12
    164a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    164e:	89 2b       	or	r24, r25
    1650:	29 f4       	brne	.+10     	; 0x165c <handle_read+0x8c>
	{
		EM_get_appeui(res);
    1652:	8f 2d       	mov	r24, r15
    1654:	90 2f       	mov	r25, r16
    1656:	0e 94 0f 29 	call	0x521e	; 0x521e <EM_get_appeui>
    165a:	96 c0       	rjmp	.+300    	; 0x1788 <handle_read+0x1b8>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    165c:	20 eb       	ldi	r18, 0xB0	; 176
    165e:	33 e0       	ldi	r19, 0x03	; 3
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	8e 2d       	mov	r24, r14
    1664:	b6 01       	movw	r22, r12
    1666:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    166a:	89 2b       	or	r24, r25
    166c:	29 f4       	brne	.+10     	; 0x1678 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    166e:	8f 2d       	mov	r24, r15
    1670:	90 2f       	mov	r25, r16
    1672:	0e 94 27 29 	call	0x524e	; 0x524e <EM_get_appkey>
    1676:	88 c0       	rjmp	.+272    	; 0x1788 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1678:	27 eb       	ldi	r18, 0xB7	; 183
    167a:	33 e0       	ldi	r19, 0x03	; 3
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	8e 2d       	mov	r24, r14
    1680:	b6 01       	movw	r22, r12
    1682:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1686:	89 2b       	or	r24, r25
    1688:	e1 f4       	brne	.+56     	; 0x16c2 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    168a:	ce 01       	movw	r24, r28
    168c:	45 96       	adiw	r24, 0x15	; 21
    168e:	0e 94 aa 2b 	call	0x5754	; 0x5754 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1692:	88 8d       	ldd	r24, Y+24	; 0x18
    1694:	8f 93       	push	r24
    1696:	8f 89       	ldd	r24, Y+23	; 0x17
    1698:	8f 93       	push	r24
    169a:	8e 89       	ldd	r24, Y+22	; 0x16
    169c:	8f 93       	push	r24
    169e:	8d 89       	ldd	r24, Y+21	; 0x15
    16a0:	8f 93       	push	r24
    16a2:	8c eb       	ldi	r24, 0xBC	; 188
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	a0 e0       	ldi	r26, 0x00	; 0
    16a8:	af 93       	push	r26
    16aa:	9f 93       	push	r25
    16ac:	8f 93       	push	r24
    16ae:	0f 93       	push	r16
    16b0:	ff 92       	push	r15
    16b2:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	63 c0       	rjmp	.+198    	; 0x1788 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_RRL)==0)
    16c2:	21 ec       	ldi	r18, 0xC1	; 193
    16c4:	33 e0       	ldi	r19, 0x03	; 3
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	8e 2d       	mov	r24, r14
    16ca:	b6 01       	movw	r22, r12
    16cc:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    16d0:	89 2b       	or	r24, r25
    16d2:	e1 f4       	brne	.+56     	; 0x170c <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    16d4:	ce 01       	movw	r24, r28
    16d6:	45 96       	adiw	r24, 0x15	; 21
    16d8:	0e 94 b9 2b 	call	0x5772	; 0x5772 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    16dc:	88 8d       	ldd	r24, Y+24	; 0x18
    16de:	8f 93       	push	r24
    16e0:	8f 89       	ldd	r24, Y+23	; 0x17
    16e2:	8f 93       	push	r24
    16e4:	8e 89       	ldd	r24, Y+22	; 0x16
    16e6:	8f 93       	push	r24
    16e8:	8d 89       	ldd	r24, Y+21	; 0x15
    16ea:	8f 93       	push	r24
    16ec:	8c eb       	ldi	r24, 0xBC	; 188
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	af 93       	push	r26
    16f4:	9f 93       	push	r25
    16f6:	8f 93       	push	r24
    16f8:	0f 93       	push	r16
    16fa:	ff 92       	push	r15
    16fc:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	3e c0       	rjmp	.+124    	; 0x1788 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_VCC)==0)
    170c:	26 ec       	ldi	r18, 0xC6	; 198
    170e:	33 e0       	ldi	r19, 0x03	; 3
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	8e 2d       	mov	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    171a:	89 2b       	or	r24, r25
    171c:	e1 f4       	brne	.+56     	; 0x1756 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    171e:	ce 01       	movw	r24, r28
    1720:	45 96       	adiw	r24, 0x15	; 21
    1722:	0e 94 c8 2b 	call	0x5790	; 0x5790 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1726:	88 8d       	ldd	r24, Y+24	; 0x18
    1728:	8f 93       	push	r24
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	8f 93       	push	r24
    172e:	8e 89       	ldd	r24, Y+22	; 0x16
    1730:	8f 93       	push	r24
    1732:	8d 89       	ldd	r24, Y+21	; 0x15
    1734:	8f 93       	push	r24
    1736:	8c eb       	ldi	r24, 0xBC	; 188
    1738:	93 e0       	ldi	r25, 0x03	; 3
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	af 93       	push	r26
    173e:	9f 93       	push	r25
    1740:	8f 93       	push	r24
    1742:	0f 93       	push	r16
    1744:	ff 92       	push	r15
    1746:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	19 c0       	rjmp	.+50     	; 0x1788 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_COLS)==0)
    1756:	2b ec       	ldi	r18, 0xCB	; 203
    1758:	33 e0       	ldi	r19, 0x03	; 3
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	8e 2d       	mov	r24, r14
    175e:	b6 01       	movw	r22, r12
    1760:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1764:	89 2b       	or	r24, r25
    1766:	29 f4       	brne	.+10     	; 0x1772 <handle_read+0x1a2>
	{
		read_cols(res);
    1768:	8f 2d       	mov	r24, r15
    176a:	90 2f       	mov	r25, r16
    176c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <read_cols>
    1770:	0b c0       	rjmp	.+22     	; 0x1788 <handle_read+0x1b8>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1772:	26 e1       	ldi	r18, 0x16	; 22
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 ed       	ldi	r20, 0xD0	; 208
    1778:	53 e0       	ldi	r21, 0x03	; 3
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	8f 2d       	mov	r24, r15
    177e:	90 2f       	mov	r25, r16
    1780:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <handle_read+0x1b8>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1786:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1788:	81 2f       	mov	r24, r17
    178a:	68 96       	adiw	r28, 0x18	; 24
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	cf 90       	pop	r12
    17a6:	08 95       	ret

Disassembly of section .text.handle_write:

00001b16 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1b16:	6f 92       	push	r6
    1b18:	7f 92       	push	r7
    1b1a:	8f 92       	push	r8
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	64 97       	sbiw	r28, 0x14	; 20
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	3b 01       	movw	r6, r22
    1b3e:	88 2e       	mov	r8, r24
    1b40:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1b42:	21 e0       	ldi	r18, 0x01	; 1
    1b44:	ae 01       	movw	r20, r28
    1b46:	4f 5f       	subi	r20, 0xFF	; 255
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    1b4e:	18 2f       	mov	r17, r24
    1b50:	88 23       	and	r24, r24
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <handle_write+0x40>
    1b54:	8d c0       	rjmp	.+282    	; 0x1c70 <handle_write+0x15a>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	6c 01       	movw	r12, r24
    1b5c:	20 e8       	ldi	r18, 0x80	; 128
    1b5e:	e2 2e       	mov	r14, r18
    1b60:	22 ea       	ldi	r18, 0xA2	; 162
    1b62:	33 e0       	ldi	r19, 0x03	; 3
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	8e 2d       	mov	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1b6e:	89 2b       	or	r24, r25
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1b72:	a5 01       	movw	r20, r10
    1b74:	88 2d       	mov	r24, r8
    1b76:	b3 01       	movw	r22, r6
    1b78:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <write_deveui>
    1b7c:	18 2f       	mov	r17, r24
    1b7e:	78 c0       	rjmp	.+240    	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1b80:	29 ea       	ldi	r18, 0xA9	; 169
    1b82:	33 e0       	ldi	r19, 0x03	; 3
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	8e 2d       	mov	r24, r14
    1b88:	b6 01       	movw	r22, r12
    1b8a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1b8e:	89 2b       	or	r24, r25
    1b90:	39 f4       	brne	.+14     	; 0x1ba0 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1b92:	a5 01       	movw	r20, r10
    1b94:	88 2d       	mov	r24, r8
    1b96:	b3 01       	movw	r22, r6
    1b98:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <write_appeui>
    1b9c:	18 2f       	mov	r17, r24
    1b9e:	68 c0       	rjmp	.+208    	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1ba0:	20 eb       	ldi	r18, 0xB0	; 176
    1ba2:	33 e0       	ldi	r19, 0x03	; 3
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	8e 2d       	mov	r24, r14
    1ba8:	b6 01       	movw	r22, r12
    1baa:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1bae:	89 2b       	or	r24, r25
    1bb0:	39 f4       	brne	.+14     	; 0x1bc0 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1bb2:	a5 01       	movw	r20, r10
    1bb4:	88 2d       	mov	r24, r8
    1bb6:	b3 01       	movw	r22, r6
    1bb8:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <write_appkey>
    1bbc:	18 2f       	mov	r17, r24
    1bbe:	58 c0       	rjmp	.+176    	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1bc0:	27 eb       	ldi	r18, 0xB7	; 183
    1bc2:	33 e0       	ldi	r19, 0x03	; 3
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	8e 2d       	mov	r24, r14
    1bc8:	b6 01       	movw	r22, r12
    1bca:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1bce:	89 2b       	or	r24, r25
    1bd0:	39 f4       	brne	.+14     	; 0x1be0 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1bd2:	a5 01       	movw	r20, r10
    1bd4:	88 2d       	mov	r24, r8
    1bd6:	b3 01       	movw	r22, r6
    1bd8:	0e 94 1f 23 	call	0x463e	; 0x463e <write_PPM_factor>
    1bdc:	18 2f       	mov	r17, r24
    1bde:	48 c0       	rjmp	.+144    	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_RRL)==0)
    1be0:	21 ec       	ldi	r18, 0xC1	; 193
    1be2:	33 e0       	ldi	r19, 0x03	; 3
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	8e 2d       	mov	r24, r14
    1be8:	b6 01       	movw	r22, r12
    1bea:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1bee:	89 2b       	or	r24, r25
    1bf0:	39 f4       	brne	.+14     	; 0x1c00 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1bf2:	a5 01       	movw	r20, r10
    1bf4:	88 2d       	mov	r24, r8
    1bf6:	b3 01       	movw	r22, r6
    1bf8:	0e 94 45 23 	call	0x468a	; 0x468a <write_RRL>
    1bfc:	18 2f       	mov	r17, r24
    1bfe:	38 c0       	rjmp	.+112    	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_VCC)==0)
    1c00:	26 ec       	ldi	r18, 0xC6	; 198
    1c02:	33 e0       	ldi	r19, 0x03	; 3
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	8e 2d       	mov	r24, r14
    1c08:	b6 01       	movw	r22, r12
    1c0a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1c0e:	89 2b       	or	r24, r25
    1c10:	39 f4       	brne	.+14     	; 0x1c20 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1c12:	a5 01       	movw	r20, r10
    1c14:	88 2d       	mov	r24, r8
    1c16:	b3 01       	movw	r22, r6
    1c18:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <write_VCC>
    1c1c:	18 2f       	mov	r17, r24
    1c1e:	28 c0       	rjmp	.+80     	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_COLS)==0)
    1c20:	2b ec       	ldi	r18, 0xCB	; 203
    1c22:	33 e0       	ldi	r19, 0x03	; 3
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	8e 2d       	mov	r24, r14
    1c28:	b6 01       	movw	r22, r12
    1c2a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1c2e:	89 2b       	or	r24, r25
    1c30:	39 f4       	brne	.+14     	; 0x1c40 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1c32:	a5 01       	movw	r20, r10
    1c34:	88 2d       	mov	r24, r8
    1c36:	b3 01       	movw	r22, r6
    1c38:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <write_cols>
    1c3c:	18 2f       	mov	r17, r24
    1c3e:	18 c0       	rjmp	.+48     	; 0x1c70 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_RESET)==0)
    1c40:	26 ee       	ldi	r18, 0xE6	; 230
    1c42:	33 e0       	ldi	r19, 0x03	; 3
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	8e 2d       	mov	r24, r14
    1c48:	b6 01       	movw	r22, r12
    1c4a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    1c4e:	89 2b       	or	r24, r25
    1c50:	39 f4       	brne	.+14     	; 0x1c60 <handle_write+0x14a>
	{
		return write_reset(cmd, res);
    1c52:	a5 01       	movw	r20, r10
    1c54:	88 2d       	mov	r24, r8
    1c56:	b3 01       	movw	r22, r6
    1c58:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <write_reset>
    1c5c:	18 2f       	mov	r17, r24
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <handle_write+0x15a>
	}else{
		strcpy(res, RW_S_NOT_EXIST);
    1c60:	26 e1       	ldi	r18, 0x16	; 22
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 ed       	ldi	r20, 0xD0	; 208
    1c66:	53 e0       	ldi	r21, 0x03	; 3
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	c5 01       	movw	r24, r10
    1c6c:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
	}
	
}
    1c70:	81 2f       	mov	r24, r17
    1c72:	64 96       	adiw	r28, 0x14	; 20
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	8f 90       	pop	r8
    1c90:	7f 90       	pop	r7
    1c92:	6f 90       	pop	r6
    1c94:	08 95       	ret

Disassembly of section .text.handle_methane:

000023c4 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    23c4:	cf 92       	push	r12
    23c6:	df 92       	push	r13
    23c8:	ef 92       	push	r14
    23ca:	ff 92       	push	r15
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <handle_methane+0x12>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	f4 2e       	mov	r15, r20
    23dc:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    23de:	22 e0       	ldi	r18, 0x02	; 2
    23e0:	49 e8       	ldi	r20, 0x89	; 137
    23e2:	5f e0       	ldi	r21, 0x0F	; 15
    23e4:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    23e8:	18 2f       	mov	r17, r24
    23ea:	88 23       	and	r24, r24
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <handle_methane+0x2c>
    23ee:	6b c0       	rjmp	.+214    	; 0x24c6 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    23f0:	89 e8       	ldi	r24, 0x89	; 137
    23f2:	9f e0       	ldi	r25, 0x0F	; 15
    23f4:	6c 01       	movw	r12, r24
    23f6:	20 e8       	ldi	r18, 0x80	; 128
    23f8:	e2 2e       	mov	r14, r18
    23fa:	20 e9       	ldi	r18, 0x90	; 144
    23fc:	34 e0       	ldi	r19, 0x04	; 4
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	8e 2d       	mov	r24, r14
    2402:	b6 01       	movw	r22, r12
    2404:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    2408:	89 2b       	or	r24, r25
    240a:	79 f4       	brne	.+30     	; 0x242a <handle_methane+0x66>
		PM_HAL_meth_power_init();
    240c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    2416:	28 e1       	ldi	r18, 0x18	; 24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	43 e9       	ldi	r20, 0x93	; 147
    241c:	54 e0       	ldi	r21, 0x04	; 4
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	8f 2d       	mov	r24, r15
    2422:	90 2f       	mov	r25, r16
    2424:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
    2428:	4e c0       	rjmp	.+156    	; 0x24c6 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    242a:	2b ea       	ldi	r18, 0xAB	; 171
    242c:	34 e0       	ldi	r19, 0x04	; 4
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	8e 2d       	mov	r24, r14
    2432:	b6 01       	movw	r22, r12
    2434:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    2438:	89 2b       	or	r24, r25
    243a:	79 f4       	brne	.+30     	; 0x245a <handle_methane+0x96>
		PM_HAL_meth_power_init();
    243c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    2446:	29 e1       	ldi	r18, 0x19	; 25
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4f ea       	ldi	r20, 0xAF	; 175
    244c:	54 e0       	ldi	r21, 0x04	; 4
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	8f 2d       	mov	r24, r15
    2452:	90 2f       	mov	r25, r16
    2454:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
    2458:	36 c0       	rjmp	.+108    	; 0x24c6 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    245a:	28 ec       	ldi	r18, 0xC8	; 200
    245c:	34 e0       	ldi	r19, 0x04	; 4
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	8e 2d       	mov	r24, r14
    2462:	b6 01       	movw	r22, r12
    2464:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    2468:	89 2b       	or	r24, r25
    246a:	21 f5       	brne	.+72     	; 0x24b4 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	0e 94 19 21 	call	0x4232	; 0x4232 <ADC_get_value>
    2474:	88 23       	and	r24, r24
    2476:	51 f0       	breq	.+20     	; 0x248c <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    2478:	28 e1       	ldi	r18, 0x18	; 24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4d ec       	ldi	r20, 0xCD	; 205
    247e:	54 e0       	ldi	r21, 0x04	; 4
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	8f 2d       	mov	r24, r15
    2484:	90 2f       	mov	r25, r16
    2486:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
    248a:	1d c0       	rjmp	.+58     	; 0x24c6 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	8f 93       	push	r24
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	8f 93       	push	r24
    2494:	85 ee       	ldi	r24, 0xE5	; 229
    2496:	94 e0       	ldi	r25, 0x04	; 4
    2498:	a0 e0       	ldi	r26, 0x00	; 0
    249a:	af 93       	push	r26
    249c:	9f 93       	push	r25
    249e:	8f 93       	push	r24
    24a0:	0f 93       	push	r16
    24a2:	ff 92       	push	r15
    24a4:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	09 c0       	rjmp	.+18     	; 0x24c6 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    24b4:	26 e1       	ldi	r18, 0x16	; 22
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4c ee       	ldi	r20, 0xEC	; 236
    24ba:	54 e0       	ldi	r21, 0x04	; 4
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	8f 2d       	mov	r24, r15
    24c0:	90 2f       	mov	r25, r16
    24c2:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
	}
	return false;
}
    24c6:	81 2f       	mov	r24, r17
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	08 95       	ret

Disassembly of section .text.handle_co2:

000032d4 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <handle_co2+0xc>
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	f4 2e       	mov	r15, r20
    32e6:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    32e8:	22 e0       	ldi	r18, 0x02	; 2
    32ea:	49 e8       	ldi	r20, 0x89	; 137
    32ec:	5f e0       	ldi	r21, 0x0F	; 15
    32ee:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    32f2:	18 2f       	mov	r17, r24
    32f4:	88 23       	and	r24, r24
    32f6:	b9 f1       	breq	.+110    	; 0x3366 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    32f8:	69 e8       	ldi	r22, 0x89	; 137
    32fa:	7f e0       	ldi	r23, 0x0F	; 15
    32fc:	80 e8       	ldi	r24, 0x80	; 128
    32fe:	28 ec       	ldi	r18, 0xC8	; 200
    3300:	34 e0       	ldi	r19, 0x04	; 4
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    3308:	89 2b       	or	r24, r25
    330a:	21 f5       	brne	.+72     	; 0x3354 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    330c:	ce 01       	movw	r24, r28
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	0e 94 82 2c 	call	0x5904	; 0x5904 <SCD30_get_reading>
    3314:	88 23       	and	r24, r24
    3316:	51 f0       	breq	.+20     	; 0x332c <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    3318:	28 e1       	ldi	r18, 0x18	; 24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4d ec       	ldi	r20, 0xCD	; 205
    331e:	54 e0       	ldi	r21, 0x04	; 4
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	8f 2d       	mov	r24, r15
    3324:	90 2f       	mov	r25, r16
    3326:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
    332a:	1d c0       	rjmp	.+58     	; 0x3366 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	8f 93       	push	r24
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	8f 93       	push	r24
    3334:	85 ee       	ldi	r24, 0xE5	; 229
    3336:	94 e0       	ldi	r25, 0x04	; 4
    3338:	a0 e0       	ldi	r26, 0x00	; 0
    333a:	af 93       	push	r26
    333c:	9f 93       	push	r25
    333e:	8f 93       	push	r24
    3340:	0f 93       	push	r16
    3342:	ff 92       	push	r15
    3344:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <sprintf>
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	09 c0       	rjmp	.+18     	; 0x3366 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3354:	26 e1       	ldi	r18, 0x16	; 22
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4c ee       	ldi	r20, 0xEC	; 236
    335a:	54 e0       	ldi	r21, 0x04	; 4
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	8f 2d       	mov	r24, r15
    3360:	90 2f       	mov	r25, r16
    3362:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
	}
}
    3366:	81 2f       	mov	r24, r17
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	08 95       	ret

Disassembly of section .text.handle_sample:

00003554 <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    3554:	6f 92       	push	r6
    3556:	7f 92       	push	r7
    3558:	8f 92       	push	r8
    355a:	cf 92       	push	r12
    355c:	df 92       	push	r13
    355e:	ef 92       	push	r14
    3560:	0f 93       	push	r16
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	3b 01       	movw	r6, r22
    3568:	88 2e       	mov	r8, r24
    356a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    356c:	21 e0       	ldi	r18, 0x01	; 1
    356e:	49 e8       	ldi	r20, 0x89	; 137
    3570:	5f e0       	ldi	r21, 0x0F	; 15
    3572:	0e 94 8c 1b 	call	0x3718	; 0x3718 <get_parameter>
    3576:	c8 2f       	mov	r28, r24
    3578:	88 23       	and	r24, r24
    357a:	69 f1       	breq	.+90     	; 0x35d6 <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    357c:	89 e8       	ldi	r24, 0x89	; 137
    357e:	9f e0       	ldi	r25, 0x0F	; 15
    3580:	6c 01       	movw	r12, r24
    3582:	20 e8       	ldi	r18, 0x80	; 128
    3584:	e2 2e       	mov	r14, r18
    3586:	22 e0       	ldi	r18, 0x02	; 2
    3588:	35 e0       	ldi	r19, 0x05	; 5
    358a:	40 e0       	ldi	r20, 0x00	; 0
    358c:	8e 2d       	mov	r24, r14
    358e:	b6 01       	movw	r22, r12
    3590:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    3594:	89 2b       	or	r24, r25
    3596:	39 f4       	brne	.+14     	; 0x35a6 <handle_sample+0x52>
		return handle_methane(cmd, res);
    3598:	a8 01       	movw	r20, r16
    359a:	88 2d       	mov	r24, r8
    359c:	b3 01       	movw	r22, r6
    359e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <handle_methane>
    35a2:	c8 2f       	mov	r28, r24
    35a4:	18 c0       	rjmp	.+48     	; 0x35d6 <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    35a6:	27 e0       	ldi	r18, 0x07	; 7
    35a8:	35 e0       	ldi	r19, 0x05	; 5
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	8e 2d       	mov	r24, r14
    35ae:	b6 01       	movw	r22, r12
    35b0:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strcmp>
    35b4:	89 2b       	or	r24, r25
    35b6:	39 f4       	brne	.+14     	; 0x35c6 <handle_sample+0x72>
		return handle_co2(cmd, res);
    35b8:	a8 01       	movw	r20, r16
    35ba:	88 2d       	mov	r24, r8
    35bc:	b3 01       	movw	r22, r6
    35be:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <handle_co2>
    35c2:	c8 2f       	mov	r28, r24
    35c4:	08 c0       	rjmp	.+16     	; 0x35d6 <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    35c6:	26 e1       	ldi	r18, 0x16	; 22
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4c ee       	ldi	r20, 0xEC	; 236
    35cc:	54 e0       	ldi	r21, 0x04	; 4
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	c8 01       	movw	r24, r16
    35d2:	0e 94 de 28 	call	0x51bc	; 0x51bc <memcpy>
		return true;
	}
}
    35d6:	8c 2f       	mov	r24, r28
    35d8:	cf 91       	pop	r28
    35da:	1f 91       	pop	r17
    35dc:	0f 91       	pop	r16
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	8f 90       	pop	r8
    35e6:	7f 90       	pop	r7
    35e8:	6f 90       	pop	r6
    35ea:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

000054c4 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    54c4:	0e 94 67 2d 	call	0x5ace	; 0x5ace <TWI_HAL_init>
	PM_HAL_adc_power_init();
    54c8:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    54cc:	81 e0       	ldi	r24, 0x01	; 1
    54ce:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    54d2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_init_get_reading();
    54dc:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <SCD30_init_get_reading>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    54e0:	88 23       	and	r24, r24
    54e2:	11 f0       	breq	.+4      	; 0x54e8 <init_methane_SCD30+0x24>
    54e4:	80 e0       	ldi	r24, 0x00	; 0
    54e6:	08 95       	ret
	return true;
    54e8:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    54ea:	08 95       	ret

Disassembly of section .text.count_parameters:

00004332 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4332:	6f 92       	push	r6
    4334:	7f 92       	push	r7
    4336:	8f 92       	push	r8
    4338:	cf 92       	push	r12
    433a:	df 92       	push	r13
    433c:	ef 92       	push	r14
    433e:	3b 01       	movw	r6, r22
    4340:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4342:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4346:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    434c:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    434e:	10 c0       	rjmp	.+32     	; 0x4370 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4350:	e8 2c       	mov	r14, r8
    4352:	63 01       	movw	r12, r6
    4354:	c2 0e       	add	r12, r18
    4356:	d3 1e       	adc	r13, r19
    4358:	e1 1c       	adc	r14, r1
    435a:	37 fd       	sbrc	r19, 7
    435c:	ea 94       	dec	r14
    435e:	f6 01       	movw	r30, r12
    4360:	94 91       	lpm	r25, Z
    4362:	e7 fc       	sbrc	r14, 7
    4364:	90 81       	ld	r25, Z
    4366:	90 32       	cpi	r25, 0x20	; 32
    4368:	09 f4       	brne	.+2      	; 0x436c <count_parameters+0x3a>
			cnt++;
    436a:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    436c:	2f 5f       	subi	r18, 0xFF	; 255
    436e:	3f 4f       	sbci	r19, 0xFF	; 255
    4370:	26 17       	cp	r18, r22
    4372:	37 07       	cpc	r19, r23
    4374:	68 f3       	brcs	.-38     	; 0x4350 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4376:	ef 90       	pop	r14
    4378:	df 90       	pop	r13
    437a:	cf 90       	pop	r12
    437c:	8f 90       	pop	r8
    437e:	7f 90       	pop	r7
    4380:	6f 90       	pop	r6
    4382:	08 95       	ret

Disassembly of section .text.par_index:

00003dfc <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    3dfc:	cf 92       	push	r12
    3dfe:	df 92       	push	r13
    3e00:	ef 92       	push	r14
    3e02:	0f 93       	push	r16
    3e04:	1f 93       	push	r17
    3e06:	cf 93       	push	r28
    3e08:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    3e0a:	44 23       	and	r20, r20
    3e0c:	29 f1       	breq	.+74     	; 0x3e58 <par_index+0x5c>
    3e0e:	04 2f       	mov	r16, r20
    3e10:	6b 01       	movw	r12, r22
    3e12:	e8 2e       	mov	r14, r24
    3e14:	c0 e0       	ldi	r28, 0x00	; 0
    3e16:	d0 e0       	ldi	r29, 0x00	; 0
    3e18:	10 e0       	ldi	r17, 0x00	; 0
    3e1a:	14 c0       	rjmp	.+40     	; 0x3e44 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    3e1c:	ae 2d       	mov	r26, r14
    3e1e:	c6 01       	movw	r24, r12
    3e20:	8c 0f       	add	r24, r28
    3e22:	9d 1f       	adc	r25, r29
    3e24:	a1 1d       	adc	r26, r1
    3e26:	d7 fd       	sbrc	r29, 7
    3e28:	aa 95       	dec	r26
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	84 91       	lpm	r24, Z
    3e2e:	a7 fd       	sbrc	r26, 7
    3e30:	80 81       	ld	r24, Z
    3e32:	80 32       	cpi	r24, 0x20	; 32
    3e34:	31 f4       	brne	.+12     	; 0x3e42 <par_index+0x46>
			cnt++;
    3e36:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    3e38:	01 13       	cpse	r16, r17
    3e3a:	03 c0       	rjmp	.+6      	; 0x3e42 <par_index+0x46>
				return i+1;
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	01 96       	adiw	r24, 0x01	; 1
    3e40:	0d c0       	rjmp	.+26     	; 0x3e5c <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    3e42:	21 96       	adiw	r28, 0x01	; 1
    3e44:	8e 2d       	mov	r24, r14
    3e46:	b6 01       	movw	r22, r12
    3e48:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3e4c:	c8 17       	cp	r28, r24
    3e4e:	d9 07       	cpc	r29, r25
    3e50:	28 f3       	brcs	.-54     	; 0x3e1c <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ef 90       	pop	r14
    3e66:	df 90       	pop	r13
    3e68:	cf 90       	pop	r12
    3e6a:	08 95       	ret

Disassembly of section .text.get_parameter:

00003718 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3718:	8f 92       	push	r8
    371a:	9f 92       	push	r9
    371c:	af 92       	push	r10
    371e:	cf 92       	push	r12
    3720:	df 92       	push	r13
    3722:	ef 92       	push	r14
    3724:	ff 92       	push	r15
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	cf 93       	push	r28
    372c:	df 93       	push	r29
    372e:	6b 01       	movw	r12, r22
    3730:	e8 2e       	mov	r14, r24
    3732:	ea 01       	movw	r28, r20
    3734:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3736:	0e 94 99 21 	call	0x4332	; 0x4332 <count_parameters>
	if(pars<parNo) return false;
    373a:	8f 15       	cp	r24, r15
    373c:	58 f1       	brcs	.+86     	; 0x3794 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    373e:	8e 2d       	mov	r24, r14
    3740:	b6 01       	movw	r22, r12
    3742:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3746:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3748:	4f 2d       	mov	r20, r15
    374a:	8e 2d       	mov	r24, r14
    374c:	b6 01       	movw	r22, r12
    374e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <par_index>
	uint8_t parLen=0;
    3752:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3754:	15 c0       	rjmp	.+42     	; 0x3780 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3756:	46 01       	movw	r8, r12
    3758:	ae 2c       	mov	r10, r14
    375a:	82 0e       	add	r8, r18
    375c:	93 1e       	adc	r9, r19
    375e:	a1 1c       	adc	r10, r1
    3760:	37 fd       	sbrc	r19, 7
    3762:	aa 94       	dec	r10
    3764:	4a 2d       	mov	r20, r10
    3766:	94 01       	movw	r18, r8
    3768:	f4 01       	movw	r30, r8
    376a:	24 91       	lpm	r18, Z
    376c:	47 fd       	sbrc	r20, 7
    376e:	20 81       	ld	r18, Z
    3770:	20 32       	cpi	r18, 0x20	; 32
    3772:	59 f0       	breq	.+22     	; 0x378a <get_parameter+0x72>
		par[parLen++]=src[i];
    3774:	fe 01       	movw	r30, r28
    3776:	e9 0f       	add	r30, r25
    3778:	f1 1d       	adc	r31, r1
    377a:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    377c:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    377e:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	20 17       	cp	r18, r16
    3786:	31 07       	cpc	r19, r17
    3788:	30 f3       	brcs	.-52     	; 0x3756 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    378a:	c9 0f       	add	r28, r25
    378c:	d1 1d       	adc	r29, r1
    378e:	18 82       	st	Y, r1
	
	return true;
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	01 c0       	rjmp	.+2      	; 0x3796 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    3794:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	cf 90       	pop	r12
    37a6:	af 90       	pop	r10
    37a8:	9f 90       	pop	r9
    37aa:	8f 90       	pop	r8
    37ac:	08 95       	ret

Disassembly of section .text.decode_stage_response:

000059da <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    59da:	88 23       	and	r24, r24
    59dc:	19 f0       	breq	.+6      	; 0x59e4 <decode_stage_response+0xa>
    59de:	81 30       	cpi	r24, 0x01	; 1
    59e0:	29 f0       	breq	.+10     	; 0x59ec <decode_stage_response+0x12>
    59e2:	02 c0       	rjmp	.+4      	; 0x59e8 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    59e4:	8f e0       	ldi	r24, 0x0F	; 15
    59e6:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    59e8:	84 e1       	ldi	r24, 0x14	; 20
    59ea:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    59ec:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    59ee:	08 95       	ret

Disassembly of section .text.decode_join_response:

000058ce <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    58ce:	83 30       	cpi	r24, 0x03	; 3
    58d0:	51 f0       	breq	.+20     	; 0x58e6 <decode_join_response+0x18>
    58d2:	84 30       	cpi	r24, 0x04	; 4
    58d4:	21 f0       	breq	.+8      	; 0x58de <decode_join_response+0x10>
    58d6:	81 11       	cpse	r24, r1
    58d8:	04 c0       	rjmp	.+8      	; 0x58e2 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    58da:	82 e0       	ldi	r24, 0x02	; 2
    58dc:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    58de:	84 e0       	ldi	r24, 0x04	; 4
    58e0:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    58e2:	84 e1       	ldi	r24, 0x14	; 20
    58e4:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    58e6:	83 e0       	ldi	r24, 0x03	; 3
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    58e8:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

000057cc <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    57cc:	83 30       	cpi	r24, 0x03	; 3
    57ce:	49 f0       	breq	.+18     	; 0x57e2 <decode_header_tail_response+0x16>
    57d0:	18 f4       	brcc	.+6      	; 0x57d8 <decode_header_tail_response+0xc>
    57d2:	88 23       	and	r24, r24
    57d4:	41 f0       	breq	.+16     	; 0x57e6 <decode_header_tail_response+0x1a>
    57d6:	03 c0       	rjmp	.+6      	; 0x57de <decode_header_tail_response+0x12>
    57d8:	85 50       	subi	r24, 0x05	; 5
    57da:	82 30       	cpi	r24, 0x02	; 2
    57dc:	20 f0       	brcs	.+8      	; 0x57e6 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    57de:	84 e1       	ldi	r24, 0x14	; 20
    57e0:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    57e2:	84 2f       	mov	r24, r20
    57e4:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    57e6:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    57e8:	08 95       	ret

Disassembly of section .text.join_lora:

000039d4 <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(6);
}

static LM_STATUS join_lora(){
    39d4:	cf 93       	push	r28
    39d6:	df 93       	push	r29
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	c3 54       	subi	r28, 0x43	; 67
    39de:	d1 09       	sbc	r29, r1
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    39ea:	26 e6       	ldi	r18, 0x66	; 102
    39ec:	32 e0       	ldi	r19, 0x02	; 2
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	81 e1       	ldi	r24, 0x11	; 17
    39f2:	f9 01       	movw	r30, r18
    39f4:	de 01       	movw	r26, r28
    39f6:	11 96       	adiw	r26, 0x01	; 1
    39f8:	74 2f       	mov	r23, r20
    39fa:	0e 94 8f 2c 	call	0x591e	; 0x591e <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    39fe:	27 e7       	ldi	r18, 0x77	; 119
    3a00:	32 e0       	ldi	r19, 0x02	; 2
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	81 e1       	ldi	r24, 0x11	; 17
    3a06:	f9 01       	movw	r30, r18
    3a08:	de 01       	movw	r26, r28
    3a0a:	52 96       	adiw	r26, 0x12	; 18
    3a0c:	74 2f       	mov	r23, r20
    3a0e:	0e 94 8f 2c 	call	0x591e	; 0x591e <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    3a12:	28 e8       	ldi	r18, 0x88	; 136
    3a14:	32 e0       	ldi	r19, 0x02	; 2
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	81 e2       	ldi	r24, 0x21	; 33
    3a1a:	f9 01       	movw	r30, r18
    3a1c:	de 01       	movw	r26, r28
    3a1e:	93 96       	adiw	r26, 0x23	; 35
    3a20:	74 2f       	mov	r23, r20
    3a22:	0e 94 8f 2c 	call	0x591e	; 0x591e <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    3a26:	ae 01       	movw	r20, r28
    3a28:	4d 5d       	subi	r20, 0xDD	; 221
    3a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2c:	be 01       	movw	r22, r28
    3a2e:	6e 5e       	subi	r22, 0xEE	; 238
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	ce 01       	movw	r24, r28
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <LM_join_network>
}
    3a3a:	cd 5b       	subi	r28, 0xBD	; 189
    3a3c:	df 4f       	sbci	r29, 0xFF	; 255
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	08 95       	ret

Disassembly of section .text.set_wakeup:

00005d56 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(6);
    5d56:	86 e0       	ldi	r24, 0x06	; 6
    5d58:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <RTC_set_wake_up_interrupt_minutes>
}
    5d5c:	08 95       	ret

Disassembly of section .text.send_header:

00004c8e <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	e4 97       	sbiw	r28, 0x34	; 52
    4c98:	0f b6       	in	r0, 0x3f	; 63
    4c9a:	f8 94       	cli
    4c9c:	de bf       	out	0x3e, r29	; 62
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    4ca2:	be 01       	movw	r22, r28
    4ca4:	6c 5c       	subi	r22, 0xCC	; 204
    4ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca8:	ce 01       	movw	r24, r28
    4caa:	01 96       	adiw	r24, 0x01	; 1
    4cac:	0e 94 07 2b 	call	0x560e	; 0x560e <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    4cb0:	6c a9       	ldd	r22, Y+52	; 0x34
    4cb2:	ce 01       	movw	r24, r28
    4cb4:	01 96       	adiw	r24, 0x01	; 1
    4cb6:	0e 94 cd 29 	call	0x539a	; 0x539a <LM_send_uplink>
}
    4cba:	e4 96       	adiw	r28, 0x34	; 52
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	08 95       	ret

Disassembly of section .text.stage_0:

00002cf8 <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    2cf8:	80 91 ed 0f 	lds	r24, 0x0FED	; 0x800fed <state_s0>
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	29 f1       	breq	.+74     	; 0x2d4a <stage_0+0x52>
    2d00:	28 f4       	brcc	.+10     	; 0x2d0c <stage_0+0x14>
    2d02:	88 23       	and	r24, r24
    2d04:	51 f0       	breq	.+20     	; 0x2d1a <stage_0+0x22>
    2d06:	81 30       	cpi	r24, 0x01	; 1
    2d08:	c1 f0       	breq	.+48     	; 0x2d3a <stage_0+0x42>
    2d0a:	f6 cf       	rjmp	.-20     	; 0x2cf8 <stage_0>
    2d0c:	84 30       	cpi	r24, 0x04	; 4
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <stage_0+0x1a>
    2d10:	4e c0       	rjmp	.+156    	; 0x2dae <stage_0+0xb6>
    2d12:	30 f1       	brcs	.+76     	; 0x2d60 <stage_0+0x68>
    2d14:	85 30       	cpi	r24, 0x05	; 5
    2d16:	81 f1       	breq	.+96     	; 0x2d78 <stage_0+0x80>
    2d18:	ef cf       	rjmp	.-34     	; 0x2cf8 <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    2d1a:	e6 e6       	ldi	r30, 0x66	; 102
    2d1c:	ff e0       	ldi	r31, 0x0F	; 15
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	4c ef       	ldi	r20, 0xFC	; 252
    2d24:	5a e0       	ldi	r21, 0x0A	; 10
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2d2e:	81 11       	cpse	r24, r1
    2d30:	42 c0       	rjmp	.+132    	; 0x2db6 <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <state_s0>
			break;
    2d38:	df cf       	rjmp	.-66     	; 0x2cf8 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2d3a:	87 ea       	ldi	r24, 0xA7	; 167
    2d3c:	9f e0       	ldi	r25, 0x0F	; 15
    2d3e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <RTC_get_current_time>
				state_s0=STAGE_START;
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <state_s0>
			break;
    2d48:	d7 cf       	rjmp	.-82     	; 0x2cf8 <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2d50:	81 11       	cpse	r24, r1
    2d52:	33 c0       	rjmp	.+102    	; 0x2dba <stage_0+0xc2>
			
				SCD30_start_sampling();
    2d54:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <state_s0>
			break;
    2d5e:	cc cf       	rjmp	.-104    	; 0x2cf8 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    2d60:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <ADC_meth_sens_ready>
    2d64:	88 23       	and	r24, r24
    2d66:	59 f1       	breq	.+86     	; 0x2dbe <stage_0+0xc6>
    2d68:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <SCD30_is_sampling_done>
    2d6c:	88 23       	and	r24, r24
    2d6e:	49 f1       	breq	.+82     	; 0x2dc2 <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    2d70:	85 e0       	ldi	r24, 0x05	; 5
    2d72:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <state_s0>
			break;
    2d76:	c0 cf       	rjmp	.-128    	; 0x2cf8 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2d78:	2e eb       	ldi	r18, 0xBE	; 190
    2d7a:	3f e0       	ldi	r19, 0x0F	; 15
    2d7c:	40 91 a7 0f 	lds	r20, 0x0FA7	; 0x800fa7 <dt>
    2d80:	50 91 a8 0f 	lds	r21, 0x0FA8	; 0x800fa8 <dt+0x1>
    2d84:	60 91 a9 0f 	lds	r22, 0x0FA9	; 0x800fa9 <dt+0x2>
    2d88:	70 91 aa 0f 	lds	r23, 0x0FAA	; 0x800faa <dt+0x3>
    2d8c:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <dt+0x4>
    2d90:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <dt+0x5>
    2d94:	0e 94 33 10 	call	0x2066	; 0x2066 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    2d98:	4c ef       	ldi	r20, 0xFC	; 252
    2d9a:	5a e0       	ldi	r21, 0x0A	; 10
    2d9c:	6e eb       	ldi	r22, 0xBE	; 190
    2d9e:	7f e0       	ldi	r23, 0x0F	; 15
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    2da6:	84 e0       	ldi	r24, 0x04	; 4
    2da8:	80 93 ed 0f 	sts	0x0FED, r24	; 0x800fed <state_s0>
			break;
    2dac:	a5 cf       	rjmp	.-182    	; 0x2cf8 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    2dae:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <SCD30_deinit_sampling>
				return STAGE_DONE;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2dba:	83 e0       	ldi	r24, 0x03	; 3
    2dbc:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	08 95       	ret
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    2dc4:	08 95       	ret

Disassembly of section .text.stage_1:

000026e0 <stage_1>:
/************************************************************************/
static STAGE_STATUS stage_1(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    26e0:	80 91 ec 0f 	lds	r24, 0x0FEC	; 0x800fec <state_s1>
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	81 f1       	breq	.+96     	; 0x2748 <stage_1+0x68>
    26e8:	28 f4       	brcc	.+10     	; 0x26f4 <stage_1+0x14>
    26ea:	88 23       	and	r24, r24
    26ec:	51 f0       	breq	.+20     	; 0x2702 <stage_1+0x22>
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	19 f1       	breq	.+70     	; 0x2738 <stage_1+0x58>
    26f2:	f6 cf       	rjmp	.-20     	; 0x26e0 <stage_1>
    26f4:	84 30       	cpi	r24, 0x04	; 4
    26f6:	09 f4       	brne	.+2      	; 0x26fa <stage_1+0x1a>
    26f8:	5d c0       	rjmp	.+186    	; 0x27b4 <stage_1+0xd4>
    26fa:	70 f1       	brcs	.+92     	; 0x2758 <stage_1+0x78>
    26fc:	85 30       	cpi	r24, 0x05	; 5
    26fe:	c1 f1       	breq	.+112    	; 0x2770 <stage_1+0x90>
    2700:	ef cf       	rjmp	.-34     	; 0x26e0 <stage_1>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
    2702:	e6 e6       	ldi	r30, 0x66	; 102
    2704:	ff e0       	ldi	r31, 0x0F	; 15
    2706:	65 81       	ldd	r22, Z+5	; 0x05
    2708:	76 81       	ldd	r23, Z+6	; 0x06
    270a:	4c ef       	ldi	r20, 0xFC	; 252
    270c:	5a e0       	ldi	r21, 0x0A	; 10
    270e:	87 81       	ldd	r24, Z+7	; 0x07
    2710:	90 85       	ldd	r25, Z+8	; 0x08
    2712:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2716:	81 11       	cpse	r24, r1
    2718:	53 c0       	rjmp	.+166    	; 0x27c0 <stage_1+0xe0>
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
    271a:	e6 e6       	ldi	r30, 0x66	; 102
    271c:	ff e0       	ldi	r31, 0x0F	; 15
    271e:	62 85       	ldd	r22, Z+10	; 0x0a
    2720:	73 85       	ldd	r23, Z+11	; 0x0b
    2722:	44 ea       	ldi	r20, 0xA4	; 164
    2724:	58 e0       	ldi	r21, 0x08	; 8
    2726:	84 85       	ldd	r24, Z+12	; 0x0c
    2728:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    272c:	81 11       	cpse	r24, r1
    272e:	4a c0       	rjmp	.+148    	; 0x27c4 <stage_1+0xe4>
				
				state_s1=STAGE_GET_TIME;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <state_s1>
			break;
    2736:	d4 cf       	rjmp	.-88     	; 0x26e0 <stage_1>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2738:	87 ea       	ldi	r24, 0xA7	; 167
    273a:	9f e0       	ldi	r25, 0x0F	; 15
    273c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <state_s1>
			break;
    2746:	cc cf       	rjmp	.-104    	; 0x26e0 <stage_1>
			
			case STAGE_START:
				SCD30_start_sampling();
    2748:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <SCD30_start_sampling>
				ADC_start_sampling();
    274c:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <state_s1>
			break;
    2756:	c4 cf       	rjmp	.-120    	; 0x26e0 <stage_1>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2758:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <SCD30_is_sampling_done>
    275c:	88 23       	and	r24, r24
    275e:	a1 f1       	breq	.+104    	; 0x27c8 <stage_1+0xe8>
    2760:	0e 94 13 2c 	call	0x5826	; 0x5826 <ADC_is_sampling_done>
    2764:	88 23       	and	r24, r24
    2766:	91 f1       	breq	.+100    	; 0x27cc <stage_1+0xec>
				state_s1=STAGE_UPDATE_MRPP;
    2768:	85 e0       	ldi	r24, 0x05	; 5
    276a:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <state_s1>
			break;
    276e:	b8 cf       	rjmp	.-144    	; 0x26e0 <stage_1>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2770:	2e eb       	ldi	r18, 0xBE	; 190
    2772:	3f e0       	ldi	r19, 0x0F	; 15
    2774:	40 91 a7 0f 	lds	r20, 0x0FA7	; 0x800fa7 <dt>
    2778:	50 91 a8 0f 	lds	r21, 0x0FA8	; 0x800fa8 <dt+0x1>
    277c:	60 91 a9 0f 	lds	r22, 0x0FA9	; 0x800fa9 <dt+0x2>
    2780:	70 91 aa 0f 	lds	r23, 0x0FAA	; 0x800faa <dt+0x3>
    2784:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <dt+0x4>
    2788:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <dt+0x5>
    278c:	0e 94 33 10 	call	0x2066	; 0x2066 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(2, ts, co2_data);
    2790:	4c ef       	ldi	r20, 0xFC	; 252
    2792:	5a e0       	ldi	r21, 0x0A	; 10
    2794:	6e eb       	ldi	r22, 0xBE	; 190
    2796:	7f e0       	ldi	r23, 0x0F	; 15
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(3, ts, meth_data);
    279e:	44 ea       	ldi	r20, 0xA4	; 164
    27a0:	58 e0       	ldi	r21, 0x08	; 8
    27a2:	6e eb       	ldi	r22, 0xBE	; 190
    27a4:	7f e0       	ldi	r23, 0x0F	; 15
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    27ac:	84 e0       	ldi	r24, 0x04	; 4
    27ae:	80 93 ec 0f 	sts	0x0FEC, r24	; 0x800fec <state_s1>
			break;
    27b2:	96 cf       	rjmp	.-212    	; 0x26e0 <stage_1>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    27b4:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    27b8:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <ADC_deinit_sampling>
				return STAGE_DONE;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    27c4:	83 e0       	ldi	r24, 0x03	; 3
    27c6:	08 95       	ret
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	08 95       	ret
    27cc:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    27ce:	08 95       	ret

Disassembly of section .text.stage_3:

000027d0 <stage_3>:
/************************************************************************/
static STAGE_STATUS stage_3(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
    27d0:	80 91 ea 0f 	lds	r24, 0x0FEA	; 0x800fea <state_s3>
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	81 f1       	breq	.+96     	; 0x2838 <stage_3+0x68>
    27d8:	28 f4       	brcc	.+10     	; 0x27e4 <stage_3+0x14>
    27da:	88 23       	and	r24, r24
    27dc:	51 f0       	breq	.+20     	; 0x27f2 <stage_3+0x22>
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	19 f1       	breq	.+70     	; 0x2828 <stage_3+0x58>
    27e2:	f6 cf       	rjmp	.-20     	; 0x27d0 <stage_3>
    27e4:	84 30       	cpi	r24, 0x04	; 4
    27e6:	09 f4       	brne	.+2      	; 0x27ea <stage_3+0x1a>
    27e8:	5d c0       	rjmp	.+186    	; 0x28a4 <stage_3+0xd4>
    27ea:	70 f1       	brcs	.+92     	; 0x2848 <stage_3+0x78>
    27ec:	85 30       	cpi	r24, 0x05	; 5
    27ee:	c1 f1       	breq	.+112    	; 0x2860 <stage_3+0x90>
    27f0:	ef cf       	rjmp	.-34     	; 0x27d0 <stage_3>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[5].samplingInterval, cols[5].samplings, co2_data);
    27f2:	e6 e6       	ldi	r30, 0x66	; 102
    27f4:	ff e0       	ldi	r31, 0x0F	; 15
    27f6:	61 8d       	ldd	r22, Z+25	; 0x19
    27f8:	72 8d       	ldd	r23, Z+26	; 0x1a
    27fa:	4c ef       	ldi	r20, 0xFC	; 252
    27fc:	5a e0       	ldi	r21, 0x0A	; 10
    27fe:	83 8d       	ldd	r24, Z+27	; 0x1b
    2800:	94 8d       	ldd	r25, Z+28	; 0x1c
    2802:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2806:	81 11       	cpse	r24, r1
    2808:	53 c0       	rjmp	.+166    	; 0x28b0 <stage_3+0xe0>
				
				adcStatus=ADC_init_sampling(cols[6].samplingInterval, cols[6].samplings, meth_data);
    280a:	e6 e6       	ldi	r30, 0x66	; 102
    280c:	ff e0       	ldi	r31, 0x0F	; 15
    280e:	66 8d       	ldd	r22, Z+30	; 0x1e
    2810:	77 8d       	ldd	r23, Z+31	; 0x1f
    2812:	44 ea       	ldi	r20, 0xA4	; 164
    2814:	58 e0       	ldi	r21, 0x08	; 8
    2816:	80 a1       	ldd	r24, Z+32	; 0x20
    2818:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    281c:	81 11       	cpse	r24, r1
    281e:	4a c0       	rjmp	.+148    	; 0x28b4 <stage_3+0xe4>
			
				state_s3=STAGE_GET_TIME;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <state_s3>
			break;
    2826:	d4 cf       	rjmp	.-88     	; 0x27d0 <stage_3>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2828:	87 ea       	ldi	r24, 0xA7	; 167
    282a:	9f e0       	ldi	r25, 0x0F	; 15
    282c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <state_s3>
			break;
    2836:	cc cf       	rjmp	.-104    	; 0x27d0 <stage_3>
			
			case STAGE_START:
				SCD30_start_sampling();
    2838:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <SCD30_start_sampling>
				ADC_start_sampling();
    283c:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <state_s3>
			break;
    2846:	c4 cf       	rjmp	.-120    	; 0x27d0 <stage_3>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2848:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <SCD30_is_sampling_done>
    284c:	88 23       	and	r24, r24
    284e:	a1 f1       	breq	.+104    	; 0x28b8 <stage_3+0xe8>
    2850:	0e 94 13 2c 	call	0x5826	; 0x5826 <ADC_is_sampling_done>
    2854:	88 23       	and	r24, r24
    2856:	91 f1       	breq	.+100    	; 0x28bc <stage_3+0xec>
				state_s3=STAGE_UPDATE_MRPP;
    2858:	85 e0       	ldi	r24, 0x05	; 5
    285a:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <state_s3>
			break;
    285e:	b8 cf       	rjmp	.-144    	; 0x27d0 <stage_3>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2860:	2e eb       	ldi	r18, 0xBE	; 190
    2862:	3f e0       	ldi	r19, 0x0F	; 15
    2864:	40 91 a7 0f 	lds	r20, 0x0FA7	; 0x800fa7 <dt>
    2868:	50 91 a8 0f 	lds	r21, 0x0FA8	; 0x800fa8 <dt+0x1>
    286c:	60 91 a9 0f 	lds	r22, 0x0FA9	; 0x800fa9 <dt+0x2>
    2870:	70 91 aa 0f 	lds	r23, 0x0FAA	; 0x800faa <dt+0x3>
    2874:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <dt+0x4>
    2878:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <dt+0x5>
    287c:	0e 94 33 10 	call	0x2066	; 0x2066 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(6, ts, co2_data);
    2880:	4c ef       	ldi	r20, 0xFC	; 252
    2882:	5a e0       	ldi	r21, 0x0A	; 10
    2884:	6e eb       	ldi	r22, 0xBE	; 190
    2886:	7f e0       	ldi	r23, 0x0F	; 15
    2888:	86 e0       	ldi	r24, 0x06	; 6
    288a:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(7, ts, meth_data);
    288e:	44 ea       	ldi	r20, 0xA4	; 164
    2890:	58 e0       	ldi	r21, 0x08	; 8
    2892:	6e eb       	ldi	r22, 0xBE	; 190
    2894:	7f e0       	ldi	r23, 0x0F	; 15
    2896:	87 e0       	ldi	r24, 0x07	; 7
    2898:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    289c:	84 e0       	ldi	r24, 0x04	; 4
    289e:	80 93 ea 0f 	sts	0x0FEA, r24	; 0x800fea <state_s3>
			break;
    28a2:	96 cf       	rjmp	.-212    	; 0x27d0 <stage_3>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    28a4:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    28a8:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <ADC_deinit_sampling>
				return STAGE_DONE;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[5].samplingInterval, cols[5].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    28b0:	83 e0       	ldi	r24, 0x03	; 3
    28b2:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[6].samplingInterval, cols[6].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    28b4:	83 e0       	ldi	r24, 0x03	; 3
    28b6:	08 95       	ret
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	08 95       	ret
    28bc:	80 e0       	ldi	r24, 0x00	; 0
				ADC_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    28be:	08 95       	ret

Disassembly of section .text.stage_2:

000024de <stage_2>:
static STAGE_STATUS stage_2(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
    24de:	80 91 eb 0f 	lds	r24, 0x0FEB	; 0x800feb <state_s2>
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	89 f1       	breq	.+98     	; 0x2548 <stage_2+0x6a>
    24e6:	28 f4       	brcc	.+10     	; 0x24f2 <stage_2+0x14>
    24e8:	88 23       	and	r24, r24
    24ea:	59 f0       	breq	.+22     	; 0x2502 <stage_2+0x24>
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	21 f1       	breq	.+72     	; 0x2538 <stage_2+0x5a>
    24f0:	f6 cf       	rjmp	.-20     	; 0x24de <stage_2>
    24f2:	84 30       	cpi	r24, 0x04	; 4
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <stage_2+0x1a>
    24f6:	66 c0       	rjmp	.+204    	; 0x25c4 <stage_2+0xe6>
    24f8:	98 f1       	brcs	.+102    	; 0x2560 <stage_2+0x82>
    24fa:	85 30       	cpi	r24, 0x05	; 5
    24fc:	09 f4       	brne	.+2      	; 0x2500 <stage_2+0x22>
    24fe:	40 c0       	rjmp	.+128    	; 0x2580 <stage_2+0xa2>
    2500:	ee cf       	rjmp	.-36     	; 0x24de <stage_2>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
    2502:	e6 e6       	ldi	r30, 0x66	; 102
    2504:	ff e0       	ldi	r31, 0x0F	; 15
    2506:	67 85       	ldd	r22, Z+15	; 0x0f
    2508:	70 89       	ldd	r23, Z+16	; 0x10
    250a:	4c ef       	ldi	r20, 0xFC	; 252
    250c:	5a e0       	ldi	r21, 0x0A	; 10
    250e:	81 89       	ldd	r24, Z+17	; 0x11
    2510:	92 89       	ldd	r25, Z+18	; 0x12
    2512:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2516:	81 11       	cpse	r24, r1
    2518:	5b c0       	rjmp	.+182    	; 0x25d0 <stage_2+0xf2>
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
    251a:	e6 e6       	ldi	r30, 0x66	; 102
    251c:	ff e0       	ldi	r31, 0x0F	; 15
    251e:	64 89       	ldd	r22, Z+20	; 0x14
    2520:	75 89       	ldd	r23, Z+21	; 0x15
    2522:	44 ea       	ldi	r20, 0xA4	; 164
    2524:	58 e0       	ldi	r21, 0x08	; 8
    2526:	86 89       	ldd	r24, Z+22	; 0x16
    2528:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    252c:	81 11       	cpse	r24, r1
    252e:	52 c0       	rjmp	.+164    	; 0x25d4 <stage_2+0xf6>
			
				state_s2=STAGE_GET_TIME;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	80 93 eb 0f 	sts	0x0FEB, r24	; 0x800feb <state_s2>
			break;
    2536:	d3 cf       	rjmp	.-90     	; 0x24de <stage_2>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2538:	87 ea       	ldi	r24, 0xA7	; 167
    253a:	9f e0       	ldi	r25, 0x0F	; 15
    253c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	80 93 eb 0f 	sts	0x0FEB, r24	; 0x800feb <state_s2>
			break;
    2546:	cb cf       	rjmp	.-106    	; 0x24de <stage_2>
			
			case STAGE_START:
				SCD30_start_sampling();
    2548:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <SCD30_start_sampling>
				ADC_start_sampling();
    254c:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <ADC_start_sampling>
				PUMP_start(seconds);
    2550:	8a e0       	ldi	r24, 0x0A	; 10
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 af 2a 	call	0x555e	; 0x555e <PUMP_start>
			
				state_s2=STAGE_WAIT;
    2558:	83 e0       	ldi	r24, 0x03	; 3
    255a:	80 93 eb 0f 	sts	0x0FEB, r24	; 0x800feb <state_s2>
			break;
    255e:	bf cf       	rjmp	.-130    	; 0x24de <stage_2>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2560:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <SCD30_is_sampling_done>
    2564:	88 23       	and	r24, r24
    2566:	c1 f1       	breq	.+112    	; 0x25d8 <stage_2+0xfa>
    2568:	0e 94 13 2c 	call	0x5826	; 0x5826 <ADC_is_sampling_done>
    256c:	88 23       	and	r24, r24
    256e:	b1 f1       	breq	.+108    	; 0x25dc <stage_2+0xfe>
    2570:	0e 94 4b 2c 	call	0x5896	; 0x5896 <PUMP_is_done>
    2574:	88 23       	and	r24, r24
    2576:	a1 f1       	breq	.+104    	; 0x25e0 <stage_2+0x102>
				state_s2=STAGE_UPDATE_MRPP;
    2578:	85 e0       	ldi	r24, 0x05	; 5
    257a:	80 93 eb 0f 	sts	0x0FEB, r24	; 0x800feb <state_s2>
			break;
    257e:	af cf       	rjmp	.-162    	; 0x24de <stage_2>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2580:	2e eb       	ldi	r18, 0xBE	; 190
    2582:	3f e0       	ldi	r19, 0x0F	; 15
    2584:	40 91 a7 0f 	lds	r20, 0x0FA7	; 0x800fa7 <dt>
    2588:	50 91 a8 0f 	lds	r21, 0x0FA8	; 0x800fa8 <dt+0x1>
    258c:	60 91 a9 0f 	lds	r22, 0x0FA9	; 0x800fa9 <dt+0x2>
    2590:	70 91 aa 0f 	lds	r23, 0x0FAA	; 0x800faa <dt+0x3>
    2594:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <dt+0x4>
    2598:	90 91 ac 0f 	lds	r25, 0x0FAC	; 0x800fac <dt+0x5>
    259c:	0e 94 33 10 	call	0x2066	; 0x2066 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(4, ts, co2_data);
    25a0:	4c ef       	ldi	r20, 0xFC	; 252
    25a2:	5a e0       	ldi	r21, 0x0A	; 10
    25a4:	6e eb       	ldi	r22, 0xBE	; 190
    25a6:	7f e0       	ldi	r23, 0x0F	; 15
    25a8:	84 e0       	ldi	r24, 0x04	; 4
    25aa:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(5, ts, meth_data);
    25ae:	44 ea       	ldi	r20, 0xA4	; 164
    25b0:	58 e0       	ldi	r21, 0x08	; 8
    25b2:	6e eb       	ldi	r22, 0xBE	; 190
    25b4:	7f e0       	ldi	r23, 0x0F	; 15
    25b6:	85 e0       	ldi	r24, 0x05	; 5
    25b8:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    25bc:	84 e0       	ldi	r24, 0x04	; 4
    25be:	80 93 eb 0f 	sts	0x0FEB, r24	; 0x800feb <state_s2>
			break;
    25c2:	8d cf       	rjmp	.-230    	; 0x24de <stage_2>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    25c4:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    25c8:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <ADC_deinit_sampling>
				return STAGE_DONE;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	08 95       	ret
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	08 95       	ret
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	08 95       	ret
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	08 95       	ret
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	08 95       	ret
    25e0:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    25e2:	08 95       	ret

Disassembly of section .text.send_body:

00004c4e <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	cd b7       	in	r28, 0x3d	; 61
    4c54:	de b7       	in	r29, 0x3e	; 62
    4c56:	e4 97       	sbiw	r28, 0x34	; 52
    4c58:	0f b6       	in	r0, 0x3f	; 63
    4c5a:	f8 94       	cli
    4c5c:	de bf       	out	0x3e, r29	; 62
    4c5e:	0f be       	out	0x3f, r0	; 63
    4c60:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    4c62:	ae 01       	movw	r20, r28
    4c64:	4c 5c       	subi	r20, 0xCC	; 204
    4c66:	5f 4f       	sbci	r21, 0xFF	; 255
    4c68:	be 01       	movw	r22, r28
    4c6a:	6f 5f       	subi	r22, 0xFF	; 255
    4c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6e:	0e 94 41 1b 	call	0x3682	; 0x3682 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    4c72:	6c a9       	ldd	r22, Y+52	; 0x34
    4c74:	ce 01       	movw	r24, r28
    4c76:	01 96       	adiw	r24, 0x01	; 1
    4c78:	0e 94 cd 29 	call	0x539a	; 0x539a <LM_send_uplink>
}
    4c7c:	e4 96       	adiw	r28, 0x34	; 52
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	08 95       	ret

Disassembly of section .text.decode_body_response:

000054ec <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    54ec:	cf 93       	push	r28
	switch(status){
    54ee:	63 30       	cpi	r22, 0x03	; 3
    54f0:	71 f0       	breq	.+28     	; 0x550e <decode_body_response+0x22>
    54f2:	18 f4       	brcc	.+6      	; 0x54fa <decode_body_response+0xe>
    54f4:	66 23       	and	r22, r22
    54f6:	31 f0       	breq	.+12     	; 0x5504 <decode_body_response+0x18>
    54f8:	03 c0       	rjmp	.+6      	; 0x5500 <decode_body_response+0x14>
    54fa:	65 50       	subi	r22, 0x05	; 5
    54fc:	62 30       	cpi	r22, 0x02	; 2
    54fe:	10 f0       	brcs	.+4      	; 0x5504 <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    5500:	84 e1       	ldi	r24, 0x14	; 20
    5502:	06 c0       	rjmp	.+12     	; 0x5510 <decode_body_response+0x24>
    5504:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    5506:	0e 94 55 2e 	call	0x5caa	; 0x5caa <MRPP_set_body_sent>
			return success;
    550a:	8c 2f       	mov	r24, r28
    550c:	01 c0       	rjmp	.+2      	; 0x5510 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    550e:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    5510:	cf 91       	pop	r28
    5512:	08 95       	ret

Disassembly of section .text.send_tail:

00004ccc <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	cd b7       	in	r28, 0x3d	; 61
    4cd2:	de b7       	in	r29, 0x3e	; 62
    4cd4:	e4 97       	sbiw	r28, 0x34	; 52
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	f8 94       	cli
    4cda:	de bf       	out	0x3e, r29	; 62
    4cdc:	0f be       	out	0x3f, r0	; 63
    4cde:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    4ce0:	be 01       	movw	r22, r28
    4ce2:	6c 5c       	subi	r22, 0xCC	; 204
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	01 96       	adiw	r24, 0x01	; 1
    4cea:	0e 94 18 2b 	call	0x5630	; 0x5630 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    4cee:	6c a9       	ldd	r22, Y+52	; 0x34
    4cf0:	ce 01       	movw	r24, r28
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	0e 94 cd 29 	call	0x539a	; 0x539a <LM_send_uplink>
}
    4cf8:	e4 96       	adiw	r28, 0x34	; 52
    4cfa:	0f b6       	in	r0, 0x3f	; 63
    4cfc:	f8 94       	cli
    4cfe:	de bf       	out	0x3e, r29	; 62
    4d00:	0f be       	out	0x3f, r0	; 63
    4d02:	cd bf       	out	0x3d, r28	; 61
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	08 95       	ret

Disassembly of section .text.send_msg:

00005968 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    5968:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <uart0_hal_send_string>
    596c:	2f ef       	ldi	r18, 0xFF	; 255
    596e:	80 e7       	ldi	r24, 0x70	; 112
    5970:	92 e0       	ldi	r25, 0x02	; 2
    5972:	21 50       	subi	r18, 0x01	; 1
    5974:	80 40       	sbci	r24, 0x00	; 0
    5976:	90 40       	sbci	r25, 0x00	; 0
    5978:	e1 f7       	brne	.-8      	; 0x5972 <send_msg+0xa>
    597a:	00 c0       	rjmp	.+0      	; 0x597c <send_msg+0x14>
    597c:	00 00       	nop
    597e:	08 95       	ret

Disassembly of section .text.MAINPG_start:

0000135a <MAINPG_start>:
static uint8_t colsNumber=7;

static void send_msg(const char msg[]);


void MAINPG_start(){
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
    1360:	10 e0       	ldi	r17, 0x00	; 0

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
    1362:	c0 e0       	ldi	r28, 0x00	; 0
    1364:	10 c0       	rjmp	.+32     	; 0x1386 <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
    1366:	c5 e0       	ldi	r28, 0x05	; 5
    1368:	0e c0       	rjmp	.+28     	; 0x1386 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    136a:	c4 e1       	ldi	r28, 0x14	; 20
    136c:	0c c0       	rjmp	.+24     	; 0x1386 <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    136e:	c4 e1       	ldi	r28, 0x14	; 20
    1370:	0a c0       	rjmp	.+20     	; 0x1386 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1372:	c4 e1       	ldi	r28, 0x14	; 20
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1376:	c4 e1       	ldi	r28, 0x14	; 20
    1378:	06 c0       	rjmp	.+12     	; 0x1386 <MAINPG_start+0x2c>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    137a:	cd 2f       	mov	r28, r29
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <MAINPG_start+0x2c>
    137e:	cd 2f       	mov	r28, r29
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    1382:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1384:	cf e0       	ldi	r28, 0x0F	; 15
	bool fromSleep=false;
	//bool fromSleep=true;
	
	
	while(1){
		switch(state){
    1386:	ec 2f       	mov	r30, r28
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	e6 31       	cpi	r30, 0x16	; 22
    138c:	f1 05       	cpc	r31, r1
    138e:	d8 f7       	brcc	.-10     	; 0x1386 <MAINPG_start+0x2c>
    1390:	ef 59       	subi	r30, 0x9F	; 159
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
    1398:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <uart0_hal_init>
				uart1_hal_init();
    139c:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <uart1_hal_init>
				TWI_HAL_init();
    13a0:	0e 94 67 2d 	call	0x5ace	; 0x5ace <TWI_HAL_init>
				TC2_HAL_init();
    13a4:	0e 94 4a 2b 	call	0x5694	; 0x5694 <TC2_HAL_init>
				rn2483_init();
    13a8:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <rn2483_init>
				SCD30_HAL_init();
    13ac:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    13b0:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    13b4:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    13b8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    13bc:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    13c0:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <PM_HAL_LED_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
    13c4:	85 b1       	in	r24, 0x05	; 5
    13c6:	81 60       	ori	r24, 0x01	; 1
    13c8:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
    13ca:	85 b1       	in	r24, 0x05	; 5
    13cc:	82 60       	ori	r24, 0x02	; 2
    13ce:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
    13d0:	11 11       	cpse	r17, r1
    13d2:	c9 cf       	rjmp	.-110    	; 0x1366 <MAINPG_start+0xc>
    13d4:	c1 e0       	ldi	r28, 0x01	; 1
    13d6:	d7 cf       	rjmp	.-82     	; 0x1386 <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
    13d8:	69 ea       	ldi	r22, 0xA9	; 169
    13da:	72 e0       	ldi	r23, 0x02	; 2
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				LED_start_try_join();
    13e2:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <LED_start_try_join>
				lmStatus=join_lora();
    13e6:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <join_lora>
    13ea:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    13ec:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    13f0:	8c 2f       	mov	r24, r28
    13f2:	0e 94 67 2c 	call	0x58ce	; 0x58ce <decode_join_response>
    13f6:	c8 2f       	mov	r28, r24
			break;
    13f8:	c6 cf       	rjmp	.-116    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				LED_join_success();
    13fa:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <LED_join_success>
				state=MAINPG_INIT_RTC;
    13fe:	c6 e0       	ldi	r28, 0x06	; 6
			break;
    1400:	c2 cf       	rjmp	.-124    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
    1402:	60 eb       	ldi	r22, 0xB0	; 176
    1404:	72 e0       	ldi	r23, 0x02	; 2
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				lmStatus=LM_wake_up();
    140c:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    1410:	81 11       	cpse	r24, r1
    1412:	ab cf       	rjmp	.-170    	; 0x136a <MAINPG_start+0x10>
    1414:	c6 e0       	ldi	r28, 0x06	; 6
    1416:	b7 cf       	rjmp	.-146    	; 0x1386 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
    1418:	6f eb       	ldi	r22, 0xBF	; 191
    141a:	72 e0       	ldi	r23, 0x02	; 2
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				LED_join_denied();
    1422:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <LED_join_denied>
    1426:	2f ef       	ldi	r18, 0xFF	; 255
    1428:	81 e1       	ldi	r24, 0x11	; 17
    142a:	9a e7       	ldi	r25, 0x7A	; 122
    142c:	21 50       	subi	r18, 0x01	; 1
    142e:	80 40       	sbci	r24, 0x00	; 0
    1430:	90 40       	sbci	r25, 0x00	; 0
    1432:	e1 f7       	brne	.-8      	; 0x142c <MAINPG_start+0xd2>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <MAINPG_start+0xdc>
    1436:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
    1438:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    143a:	a5 cf       	rjmp	.-182    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				LED_join_conf_err();
    143c:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <LED_join_conf_err>
				print_debug("Conf err\n\r");
    1440:	6b ec       	ldi	r22, 0xCB	; 203
    1442:	72 e0       	ldi	r23, 0x02	; 2
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				state=MAINPG_END;
    144a:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    144c:	9c cf       	rjmp	.-200    	; 0x1386 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
    144e:	66 ed       	ldi	r22, 0xD6	; 214
    1450:	72 e0       	ldi	r23, 0x02	; 2
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	0e 94 c2 21 	call	0x4384	; 0x4384 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    145e:	81 11       	cpse	r24, r1
    1460:	86 cf       	rjmp	.-244    	; 0x136e <MAINPG_start+0x14>
    1462:	c8 e0       	ldi	r28, 0x08	; 8
    1464:	90 cf       	rjmp	.-224    	; 0x1386 <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
    1466:	61 ee       	ldi	r22, 0xE1	; 225
    1468:	72 e0       	ldi	r23, 0x02	; 2
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    1470:	0e 94 60 28 	call	0x50c0	; 0x50c0 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1474:	81 11       	cpse	r24, r1
    1476:	7d cf       	rjmp	.-262    	; 0x1372 <MAINPG_start+0x18>
    1478:	c7 e0       	ldi	r28, 0x07	; 7
    147a:	85 cf       	rjmp	.-246    	; 0x1386 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
    147c:	63 ef       	ldi	r22, 0xF3	; 243
    147e:	72 e0       	ldi	r23, 0x02	; 2
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				rtcStatus=set_wakeup();
    1486:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    148a:	81 11       	cpse	r24, r1
    148c:	74 cf       	rjmp	.-280    	; 0x1376 <MAINPG_start+0x1c>
    148e:	c9 e0       	ldi	r28, 0x09	; 9
    1490:	7a cf       	rjmp	.-268    	; 0x1386 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
    1492:	68 e0       	ldi	r22, 0x08	; 8
    1494:	73 e0       	ldi	r23, 0x03	; 3
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				MRPP_init_group(cols, colsNumber);
    149c:	67 e0       	ldi	r22, 0x07	; 7
    149e:	86 e6       	ldi	r24, 0x66	; 102
    14a0:	9f e0       	ldi	r25, 0x0F	; 15
    14a2:	0e 94 ac 28 	call	0x5158	; 0x5158 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
    14a6:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    14a8:	6e cf       	rjmp	.-292    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    14aa:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <LM_is_free>
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <MAINPG_start+0x15a>
    14b2:	69 cf       	rjmp	.-302    	; 0x1386 <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
    14b4:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    14b8:	4a e0       	ldi	r20, 0x0A	; 10
    14ba:	6b e0       	ldi	r22, 0x0B	; 11
    14bc:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <decode_header_tail_response>
    14c0:	c8 2f       	mov	r28, r24
			break;
    14c2:	61 cf       	rjmp	.-318    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    14c4:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    14c8:	6c e0       	ldi	r22, 0x0C	; 12
    14ca:	0e 94 ed 2c 	call	0x59da	; 0x59da <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    14ce:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    14d0:	c8 2f       	mov	r28, r24
			break;
    14d2:	59 cf       	rjmp	.-334    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    14d4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    14d8:	6d e0       	ldi	r22, 0x0D	; 13
    14da:	0e 94 ed 2c 	call	0x59da	; 0x59da <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    14de:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    14e0:	c8 2f       	mov	r28, r24
			break;
    14e2:	51 cf       	rjmp	.-350    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    14e4:	0e 94 6f 12 	call	0x24de	; 0x24de <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    14e8:	6e e0       	ldi	r22, 0x0E	; 14
    14ea:	0e 94 ed 2c 	call	0x59da	; 0x59da <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    14ee:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    14f0:	c8 2f       	mov	r28, r24
			break;
    14f2:	49 cf       	rjmp	.-366    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    14f4:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    14f8:	60 e1       	ldi	r22, 0x10	; 16
    14fa:	0e 94 ed 2c 	call	0x59da	; 0x59da <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    14fe:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1500:	c8 2f       	mov	r28, r24
			break;
    1502:	41 cf       	rjmp	.-382    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    1504:	86 ed       	ldi	r24, 0xD6	; 214
    1506:	9f e0       	ldi	r25, 0x0F	; 15
    1508:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <MRPP_is_body_package_ready>
    150c:	88 23       	and	r24, r24
    150e:	09 f4       	brne	.+2      	; 0x1512 <MAINPG_start+0x1b8>
    1510:	34 cf       	rjmp	.-408    	; 0x137a <MAINPG_start+0x20>
    1512:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <LM_is_free>
    1516:	88 23       	and	r24, r24
    1518:	09 f4       	brne	.+2      	; 0x151c <MAINPG_start+0x1c2>
    151a:	31 cf       	rjmp	.-414    	; 0x137e <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
    151c:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <bodyIndex>
    1520:	90 91 d7 0f 	lds	r25, 0x0FD7	; 0x800fd7 <bodyIndex+0x1>
    1524:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    1528:	4d 2f       	mov	r20, r29
    152a:	68 2f       	mov	r22, r24
    152c:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <bodyIndex>
    1530:	90 91 d7 0f 	lds	r25, 0x0FD7	; 0x800fd7 <bodyIndex+0x1>
    1534:	0e 94 76 2a 	call	0x54ec	; 0x54ec <decode_body_response>
    1538:	c8 2f       	mov	r28, r24
    153a:	25 cf       	rjmp	.-438    	; 0x1386 <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    153c:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <MRPP_all_body_package_sent>
    1540:	88 23       	and	r24, r24
    1542:	09 f4       	brne	.+2      	; 0x1546 <MAINPG_start+0x1ec>
    1544:	1e cf       	rjmp	.-452    	; 0x1382 <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
    1546:	c1 e1       	ldi	r28, 0x11	; 17
    1548:	1e cf       	rjmp	.-452    	; 0x1386 <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    154a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <LM_is_free>
    154e:	88 23       	and	r24, r24
    1550:	09 f4       	brne	.+2      	; 0x1554 <MAINPG_start+0x1fa>
    1552:	19 cf       	rjmp	.-462    	; 0x1386 <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
    1554:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    1558:	41 e1       	ldi	r20, 0x11	; 17
    155a:	62 e1       	ldi	r22, 0x12	; 18
    155c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <decode_header_tail_response>
    1560:	c8 2f       	mov	r28, r24
				
			break;
    1562:	11 cf       	rjmp	.-478    	; 0x1386 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
    1564:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    1568:	11 e0       	ldi	r17, 0x01	; 1
    156a:	81 11       	cpse	r24, r1
    156c:	10 e0       	ldi	r17, 0x00	; 0
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <PM_HAL_LED_power>
				
				state=MAINPG_SLEEP;
    158c:	c3 e1       	ldi	r28, 0x13	; 19
			break;
    158e:	fb ce       	rjmp	.-522    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
    1590:	64 e1       	ldi	r22, 0x14	; 20
    1592:	73 e0       	ldi	r23, 0x03	; 3
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				PM_HAL_enter_power_down();
    159a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
    159e:	6c e1       	ldi	r22, 0x1C	; 28
    15a0:	73 e0       	ldi	r23, 0x03	; 3
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				state=MAINPG_INIT_HW;
    15a8:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    15aa:	ed ce       	rjmp	.-550    	; 0x1386 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
    15ac:	64 e2       	ldi	r22, 0x24	; 36
    15ae:	73 e0       	ldi	r23, 0x03	; 3
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				LED_fatal_err();
    15b6:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <LED_fatal_err>
				state=MAINPG_END;
    15ba:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    15bc:	e4 ce       	rjmp	.-568    	; 0x1386 <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
    15be:	62 e3       	ldi	r22, 0x32	; 50
    15c0:	73 e0       	ldi	r23, 0x03	; 3
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	0e 94 b4 2c 	call	0x5968	; 0x5968 <send_msg>
				return;
			break;	
		}
	}
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	08 95       	ret

Disassembly of section .text.test_runner:

00005db8 <test_runner>:
	//test_ADC_module_start();
	//test_RTC_module_start();
	//test_TC0_HAL_start();
	//test_TC1_HAL_start();
	//test_RTC_module_start();
	test_UART0_HAL_start();
    5db8:	0e 94 6d 27 	call	0x4eda	; 0x4eda <test_UART0_HAL_start>
    5dbc:	08 95       	ret

Disassembly of section .text.test_UART0_HAL_start:

00004eda <test_UART0_HAL_start>:
#include "../../HAL/UART1/UART1_HAL.h"



void test_UART0_HAL_start(){
	uart0_hal_init();
    4eda:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <uart0_hal_init>
	uart1_hal_init();
    4ede:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <uart1_hal_init>
	
	uart1_hal_send_string("Running ");
    4ee2:	66 e7       	ldi	r22, 0x76	; 118
    4ee4:	76 e0       	ldi	r23, 0x06	; 6
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
	while(1){
		if(uart0_hal_message_ready()){
    4eec:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <uart0_hal_message_ready>
    4ef0:	88 23       	and	r24, r24
    4ef2:	29 f0       	breq	.+10     	; 0x4efe <test_UART0_HAL_start+0x24>
			uart1_hal_send_string("MSG received");
    4ef4:	6f e7       	ldi	r22, 0x7F	; 127
    4ef6:	76 e0       	ldi	r23, 0x06	; 6
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	0e 94 20 1c 	call	0x3840	; 0x3840 <uart1_hal_send_string>
    4efe:	2f ef       	ldi	r18, 0xFF	; 255
    4f00:	89 e6       	ldi	r24, 0x69	; 105
    4f02:	98 e1       	ldi	r25, 0x18	; 24
    4f04:	21 50       	subi	r18, 0x01	; 1
    4f06:	80 40       	sbci	r24, 0x00	; 0
    4f08:	90 40       	sbci	r25, 0x00	; 0
    4f0a:	e1 f7       	brne	.-8      	; 0x4f04 <test_UART0_HAL_start+0x2a>
    4f0c:	00 c0       	rjmp	.+0      	; 0x4f0e <test_UART0_HAL_start+0x34>
    4f0e:	00 00       	nop
    4f10:	ed cf       	rjmp	.-38     	; 0x4eec <test_UART0_HAL_start+0x12>

Disassembly of section .text.calc_crc8:

00004fb6 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    4fb6:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    4fba:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    4fbc:	14 c0       	rjmp	.+40     	; 0x4fe6 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    4fbe:	fa 01       	movw	r30, r20
    4fc0:	e3 0f       	add	r30, r19
    4fc2:	f1 1d       	adc	r31, r1
    4fc4:	90 81       	ld	r25, Z
    4fc6:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    4fc8:	28 e0       	ldi	r18, 0x08	; 8
    4fca:	0a c0       	rjmp	.+20     	; 0x4fe0 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    4fcc:	88 23       	and	r24, r24
    4fce:	34 f4       	brge	.+12     	; 0x4fdc <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	88 0f       	add	r24, r24
    4fd4:	99 1f       	adc	r25, r25
    4fd6:	91 e3       	ldi	r25, 0x31	; 49
    4fd8:	89 27       	eor	r24, r25
    4fda:	01 c0       	rjmp	.+2      	; 0x4fde <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    4fdc:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    4fde:	21 50       	subi	r18, 0x01	; 1
    4fe0:	21 11       	cpse	r18, r1
    4fe2:	f4 cf       	rjmp	.-24     	; 0x4fcc <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    4fe4:	3f 5f       	subi	r19, 0xFF	; 255
    4fe6:	36 17       	cp	r19, r22
    4fe8:	50 f3       	brcs	.-44     	; 0x4fbe <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    4fea:	08 95       	ret

Disassembly of section .text.get_decimal:

000030d0 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    30d0:	cf 92       	push	r12
    30d2:	df 92       	push	r13
    30d4:	ef 92       	push	r14
    30d6:	ff 92       	push	r15
    30d8:	0f 93       	push	r16
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    30e6:	cc 0d       	add	r28, r12
    30e8:	dd 1d       	adc	r29, r13
    30ea:	88 81       	ld	r24, Y
    30ec:	8e 32       	cpi	r24, 0x2E	; 46
    30ee:	11 f4       	brne	.+4      	; 0x30f4 <get_decimal+0x24>
			index=i+1;
    30f0:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    30f2:	0c c0       	rjmp	.+24     	; 0x310c <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    30f4:	1f 5f       	subi	r17, 0xFF	; 255
    30f6:	c1 2f       	mov	r28, r17
    30f8:	d0 e0       	ldi	r29, 0x00	; 0
    30fa:	b6 01       	movw	r22, r12
    30fc:	80 e8       	ldi	r24, 0x80	; 128
    30fe:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	c8 17       	cp	r28, r24
    3106:	d9 07       	cpc	r29, r25
    3108:	70 f3       	brcs	.-36     	; 0x30e6 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    310a:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    310c:	11 23       	and	r17, r17
    310e:	71 f1       	breq	.+92     	; 0x316c <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    3110:	c1 0e       	add	r12, r17
    3112:	d1 1c       	adc	r13, r1
    3114:	80 e8       	ldi	r24, 0x80	; 128
    3116:	e8 2e       	mov	r14, r24
    3118:	8e 2d       	mov	r24, r14
    311a:	b6 01       	movw	r22, r12
    311c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    3120:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    3122:	8e 2d       	mov	r24, r14
    3124:	b6 01       	movw	r22, r12
    3126:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <atoi>
    312a:	8c 01       	movw	r16, r24
	float divisor=1;
    312c:	0f 2e       	mov	r0, r31
    312e:	c1 2c       	mov	r12, r1
    3130:	d1 2c       	mov	r13, r1
    3132:	f0 e8       	ldi	r31, 0x80	; 128
    3134:	ef 2e       	mov	r14, r31
    3136:	ff e3       	ldi	r31, 0x3F	; 63
    3138:	ff 2e       	mov	r15, r31
    313a:	f0 2d       	mov	r31, r0
	
	while(len>0){
    313c:	0b c0       	rjmp	.+22     	; 0x3154 <get_decimal+0x84>
		divisor*=10;
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	c7 01       	movw	r24, r14
    3148:	b6 01       	movw	r22, r12
    314a:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__mulsf3>
    314e:	6b 01       	movw	r12, r22
    3150:	7c 01       	movw	r14, r24
		len--;
    3152:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    3154:	c1 11       	cpse	r28, r1
    3156:	f3 cf       	rjmp	.-26     	; 0x313e <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    3158:	b8 01       	movw	r22, r16
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__floatunsisf>
    3162:	a7 01       	movw	r20, r14
    3164:	96 01       	movw	r18, r12
    3166:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__divsf3>
    316a:	03 c0       	rjmp	.+6      	; 0x3172 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    3172:	df 91       	pop	r29
    3174:	cf 91       	pop	r28
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	cf 90       	pop	r12
    3182:	08 95       	ret

Disassembly of section .text.str2flaot:

0000450c <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    450c:	cf 92       	push	r12
    450e:	df 92       	push	r13
    4510:	ef 92       	push	r14
    4512:	ff 92       	push	r15
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    451e:	bc 01       	movw	r22, r24
    4520:	80 e8       	ldi	r24, 0x80	; 128
    4522:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <atoi>
    4526:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    4528:	c8 01       	movw	r24, r16
    452a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <get_decimal>
    452e:	6b 01       	movw	r12, r22
    4530:	7c 01       	movw	r14, r24
	return intVal+deci;
    4532:	be 01       	movw	r22, r28
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__floatunsisf>
    453c:	9b 01       	movw	r18, r22
    453e:	ac 01       	movw	r20, r24
    4540:	c7 01       	movw	r24, r14
    4542:	b6 01       	movw	r22, r12
    4544:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__addsf3>
	
	
}
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	df 90       	pop	r13
    4556:	cf 90       	pop	r12
    4558:	08 95       	ret

Disassembly of section .text.is_float:

000041da <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    41da:	ef 92       	push	r14
    41dc:	ff 92       	push	r15
    41de:	0f 93       	push	r16
    41e0:	1f 93       	push	r17
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    41e8:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    41ea:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    41ec:	0d c0       	rjmp	.+26     	; 0x4208 <is_float+0x2e>
	{
		if(str[i]=='.'){
    41ee:	ce 0d       	add	r28, r14
    41f0:	df 1d       	adc	r29, r15
    41f2:	88 81       	ld	r24, Y
    41f4:	8e 32       	cpi	r24, 0x2E	; 46
    41f6:	21 f4       	brne	.+8      	; 0x4200 <is_float+0x26>
			if (got_dot)
    41f8:	01 11       	cpse	r16, r1
    41fa:	11 c0       	rjmp	.+34     	; 0x421e <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    41fc:	01 e0       	ldi	r16, 0x01	; 1
    41fe:	03 c0       	rjmp	.+6      	; 0x4206 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4200:	80 53       	subi	r24, 0x30	; 48
    4202:	8a 30       	cpi	r24, 0x0A	; 10
    4204:	70 f4       	brcc	.+28     	; 0x4222 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4206:	1f 5f       	subi	r17, 0xFF	; 255
    4208:	c1 2f       	mov	r28, r17
    420a:	d0 e0       	ldi	r29, 0x00	; 0
    420c:	b7 01       	movw	r22, r14
    420e:	80 e8       	ldi	r24, 0x80	; 128
    4210:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strlen>
    4214:	c8 17       	cp	r28, r24
    4216:	d9 07       	cpc	r29, r25
    4218:	50 f3       	brcs	.-44     	; 0x41ee <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	03 c0       	rjmp	.+6      	; 0x4224 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4222:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	ff 90       	pop	r15
    422e:	ef 90       	pop	r14
    4230:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005c1a <__subsf3>:
    5c1a:	50 58       	subi	r21, 0x80	; 128

00005c1c <__addsf3>:
    5c1c:	bb 27       	eor	r27, r27
    5c1e:	aa 27       	eor	r26, r26
    5c20:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__addsf3x>
    5c24:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002dc6 <__addsf3x>:
    2dc6:	11 c0       	rjmp	.+34     	; 0x2dea <__addsf3x+0x24>
    2dc8:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__fp_pscA>
    2dcc:	38 f0       	brcs	.+14     	; 0x2ddc <__addsf3x+0x16>
    2dce:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__fp_pscB>
    2dd2:	20 f0       	brcs	.+8      	; 0x2ddc <__addsf3x+0x16>
    2dd4:	39 f4       	brne	.+14     	; 0x2de4 <__addsf3x+0x1e>
    2dd6:	9f 3f       	cpi	r25, 0xFF	; 255
    2dd8:	19 f4       	brne	.+6      	; 0x2de0 <__addsf3x+0x1a>
    2dda:	26 f4       	brtc	.+8      	; 0x2de4 <__addsf3x+0x1e>
    2ddc:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__fp_nan>
    2de0:	0e f4       	brtc	.+2      	; 0x2de4 <__addsf3x+0x1e>
    2de2:	e0 95       	com	r30
    2de4:	e7 fb       	bst	r30, 7
    2de6:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <__fp_inf>
    2dea:	e9 2f       	mov	r30, r25
    2dec:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__fp_split3>
    2df0:	58 f3       	brcs	.-42     	; 0x2dc8 <__addsf3x+0x2>
    2df2:	ba 17       	cp	r27, r26
    2df4:	62 07       	cpc	r22, r18
    2df6:	73 07       	cpc	r23, r19
    2df8:	84 07       	cpc	r24, r20
    2dfa:	95 07       	cpc	r25, r21
    2dfc:	20 f0       	brcs	.+8      	; 0x2e06 <__addsf3x+0x40>
    2dfe:	79 f4       	brne	.+30     	; 0x2e1e <__addsf3x+0x58>
    2e00:	a6 f5       	brtc	.+104    	; 0x2e6a <__addsf3x+0xa4>
    2e02:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__fp_zero>
    2e06:	0e f4       	brtc	.+2      	; 0x2e0a <__addsf3x+0x44>
    2e08:	e0 95       	com	r30
    2e0a:	0b 2e       	mov	r0, r27
    2e0c:	ba 2f       	mov	r27, r26
    2e0e:	a0 2d       	mov	r26, r0
    2e10:	0b 01       	movw	r0, r22
    2e12:	b9 01       	movw	r22, r18
    2e14:	90 01       	movw	r18, r0
    2e16:	0c 01       	movw	r0, r24
    2e18:	ca 01       	movw	r24, r20
    2e1a:	a0 01       	movw	r20, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	ff 27       	eor	r31, r31
    2e20:	59 1b       	sub	r21, r25
    2e22:	99 f0       	breq	.+38     	; 0x2e4a <__addsf3x+0x84>
    2e24:	59 3f       	cpi	r21, 0xF9	; 249
    2e26:	50 f4       	brcc	.+20     	; 0x2e3c <__addsf3x+0x76>
    2e28:	50 3e       	cpi	r21, 0xE0	; 224
    2e2a:	68 f1       	brcs	.+90     	; 0x2e86 <__addsf3x+0xc0>
    2e2c:	1a 16       	cp	r1, r26
    2e2e:	f0 40       	sbci	r31, 0x00	; 0
    2e30:	a2 2f       	mov	r26, r18
    2e32:	23 2f       	mov	r18, r19
    2e34:	34 2f       	mov	r19, r20
    2e36:	44 27       	eor	r20, r20
    2e38:	58 5f       	subi	r21, 0xF8	; 248
    2e3a:	f3 cf       	rjmp	.-26     	; 0x2e22 <__addsf3x+0x5c>
    2e3c:	46 95       	lsr	r20
    2e3e:	37 95       	ror	r19
    2e40:	27 95       	ror	r18
    2e42:	a7 95       	ror	r26
    2e44:	f0 40       	sbci	r31, 0x00	; 0
    2e46:	53 95       	inc	r21
    2e48:	c9 f7       	brne	.-14     	; 0x2e3c <__addsf3x+0x76>
    2e4a:	7e f4       	brtc	.+30     	; 0x2e6a <__addsf3x+0xa4>
    2e4c:	1f 16       	cp	r1, r31
    2e4e:	ba 0b       	sbc	r27, r26
    2e50:	62 0b       	sbc	r22, r18
    2e52:	73 0b       	sbc	r23, r19
    2e54:	84 0b       	sbc	r24, r20
    2e56:	ba f0       	brmi	.+46     	; 0x2e86 <__addsf3x+0xc0>
    2e58:	91 50       	subi	r25, 0x01	; 1
    2e5a:	a1 f0       	breq	.+40     	; 0x2e84 <__addsf3x+0xbe>
    2e5c:	ff 0f       	add	r31, r31
    2e5e:	bb 1f       	adc	r27, r27
    2e60:	66 1f       	adc	r22, r22
    2e62:	77 1f       	adc	r23, r23
    2e64:	88 1f       	adc	r24, r24
    2e66:	c2 f7       	brpl	.-16     	; 0x2e58 <__addsf3x+0x92>
    2e68:	0e c0       	rjmp	.+28     	; 0x2e86 <__addsf3x+0xc0>
    2e6a:	ba 0f       	add	r27, r26
    2e6c:	62 1f       	adc	r22, r18
    2e6e:	73 1f       	adc	r23, r19
    2e70:	84 1f       	adc	r24, r20
    2e72:	48 f4       	brcc	.+18     	; 0x2e86 <__addsf3x+0xc0>
    2e74:	87 95       	ror	r24
    2e76:	77 95       	ror	r23
    2e78:	67 95       	ror	r22
    2e7a:	b7 95       	ror	r27
    2e7c:	f7 95       	ror	r31
    2e7e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e80:	08 f0       	brcs	.+2      	; 0x2e84 <__addsf3x+0xbe>
    2e82:	b0 cf       	rjmp	.-160    	; 0x2de4 <__addsf3x+0x1e>
    2e84:	93 95       	inc	r25
    2e86:	88 0f       	add	r24, r24
    2e88:	08 f0       	brcs	.+2      	; 0x2e8c <__addsf3x+0xc6>
    2e8a:	99 27       	eor	r25, r25
    2e8c:	ee 0f       	add	r30, r30
    2e8e:	97 95       	ror	r25
    2e90:	87 95       	ror	r24
    2e92:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005d5e <__divsf3>:
    5d5e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__divsf3x>
    5d62:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000029a0 <__divsf3x>:
    29a0:	10 c0       	rjmp	.+32     	; 0x29c2 <__divsf3x+0x22>
    29a2:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__fp_pscB>
    29a6:	58 f0       	brcs	.+22     	; 0x29be <__divsf3x+0x1e>
    29a8:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__fp_pscA>
    29ac:	40 f0       	brcs	.+16     	; 0x29be <__divsf3x+0x1e>
    29ae:	29 f4       	brne	.+10     	; 0x29ba <__divsf3x+0x1a>
    29b0:	5f 3f       	cpi	r21, 0xFF	; 255
    29b2:	29 f0       	breq	.+10     	; 0x29be <__divsf3x+0x1e>
    29b4:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <__fp_inf>
    29b8:	51 11       	cpse	r21, r1
    29ba:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__fp_szero>
    29be:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__fp_nan>
    29c2:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__fp_split3>
    29c6:	68 f3       	brcs	.-38     	; 0x29a2 <__divsf3x+0x2>

000029c8 <__divsf3_pse>:
    29c8:	99 23       	and	r25, r25
    29ca:	b1 f3       	breq	.-20     	; 0x29b8 <__divsf3x+0x18>
    29cc:	55 23       	and	r21, r21
    29ce:	91 f3       	breq	.-28     	; 0x29b4 <__divsf3x+0x14>
    29d0:	95 1b       	sub	r25, r21
    29d2:	55 0b       	sbc	r21, r21
    29d4:	bb 27       	eor	r27, r27
    29d6:	aa 27       	eor	r26, r26
    29d8:	62 17       	cp	r22, r18
    29da:	73 07       	cpc	r23, r19
    29dc:	84 07       	cpc	r24, r20
    29de:	38 f0       	brcs	.+14     	; 0x29ee <__divsf3_pse+0x26>
    29e0:	9f 5f       	subi	r25, 0xFF	; 255
    29e2:	5f 4f       	sbci	r21, 0xFF	; 255
    29e4:	22 0f       	add	r18, r18
    29e6:	33 1f       	adc	r19, r19
    29e8:	44 1f       	adc	r20, r20
    29ea:	aa 1f       	adc	r26, r26
    29ec:	a9 f3       	breq	.-22     	; 0x29d8 <__divsf3_pse+0x10>
    29ee:	35 d0       	rcall	.+106    	; 0x2a5a <__divsf3_pse+0x92>
    29f0:	0e 2e       	mov	r0, r30
    29f2:	3a f0       	brmi	.+14     	; 0x2a02 <__divsf3_pse+0x3a>
    29f4:	e0 e8       	ldi	r30, 0x80	; 128
    29f6:	32 d0       	rcall	.+100    	; 0x2a5c <__divsf3_pse+0x94>
    29f8:	91 50       	subi	r25, 0x01	; 1
    29fa:	50 40       	sbci	r21, 0x00	; 0
    29fc:	e6 95       	lsr	r30
    29fe:	00 1c       	adc	r0, r0
    2a00:	ca f7       	brpl	.-14     	; 0x29f4 <__divsf3_pse+0x2c>
    2a02:	2b d0       	rcall	.+86     	; 0x2a5a <__divsf3_pse+0x92>
    2a04:	fe 2f       	mov	r31, r30
    2a06:	29 d0       	rcall	.+82     	; 0x2a5a <__divsf3_pse+0x92>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	bb 1f       	adc	r27, r27
    2a10:	26 17       	cp	r18, r22
    2a12:	37 07       	cpc	r19, r23
    2a14:	48 07       	cpc	r20, r24
    2a16:	ab 07       	cpc	r26, r27
    2a18:	b0 e8       	ldi	r27, 0x80	; 128
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <__divsf3_pse+0x56>
    2a1c:	bb 0b       	sbc	r27, r27
    2a1e:	80 2d       	mov	r24, r0
    2a20:	bf 01       	movw	r22, r30
    2a22:	ff 27       	eor	r31, r31
    2a24:	93 58       	subi	r25, 0x83	; 131
    2a26:	5f 4f       	sbci	r21, 0xFF	; 255
    2a28:	3a f0       	brmi	.+14     	; 0x2a38 <__divsf3_pse+0x70>
    2a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a2c:	51 05       	cpc	r21, r1
    2a2e:	78 f0       	brcs	.+30     	; 0x2a4e <__divsf3_pse+0x86>
    2a30:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <__fp_inf>
    2a34:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__fp_szero>
    2a38:	5f 3f       	cpi	r21, 0xFF	; 255
    2a3a:	e4 f3       	brlt	.-8      	; 0x2a34 <__divsf3_pse+0x6c>
    2a3c:	98 3e       	cpi	r25, 0xE8	; 232
    2a3e:	d4 f3       	brlt	.-12     	; 0x2a34 <__divsf3_pse+0x6c>
    2a40:	86 95       	lsr	r24
    2a42:	77 95       	ror	r23
    2a44:	67 95       	ror	r22
    2a46:	b7 95       	ror	r27
    2a48:	f7 95       	ror	r31
    2a4a:	9f 5f       	subi	r25, 0xFF	; 255
    2a4c:	c9 f7       	brne	.-14     	; 0x2a40 <__divsf3_pse+0x78>
    2a4e:	88 0f       	add	r24, r24
    2a50:	91 1d       	adc	r25, r1
    2a52:	96 95       	lsr	r25
    2a54:	87 95       	ror	r24
    2a56:	97 f9       	bld	r25, 7
    2a58:	08 95       	ret
    2a5a:	e1 e0       	ldi	r30, 0x01	; 1
    2a5c:	66 0f       	add	r22, r22
    2a5e:	77 1f       	adc	r23, r23
    2a60:	88 1f       	adc	r24, r24
    2a62:	bb 1f       	adc	r27, r27
    2a64:	62 17       	cp	r22, r18
    2a66:	73 07       	cpc	r23, r19
    2a68:	84 07       	cpc	r24, r20
    2a6a:	ba 07       	cpc	r27, r26
    2a6c:	20 f0       	brcs	.+8      	; 0x2a76 <__divsf3_pse+0xae>
    2a6e:	62 1b       	sub	r22, r18
    2a70:	73 0b       	sbc	r23, r19
    2a72:	84 0b       	sbc	r24, r20
    2a74:	ba 0b       	sbc	r27, r26
    2a76:	ee 1f       	adc	r30, r30
    2a78:	88 f7       	brcc	.-30     	; 0x2a5c <__divsf3_pse+0x94>
    2a7a:	e0 95       	com	r30
    2a7c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040ca <__fixunssfsi>:
    40ca:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__fp_splitA>
    40ce:	88 f0       	brcs	.+34     	; 0x40f2 <__fixunssfsi+0x28>
    40d0:	9f 57       	subi	r25, 0x7F	; 127
    40d2:	98 f0       	brcs	.+38     	; 0x40fa <__fixunssfsi+0x30>
    40d4:	b9 2f       	mov	r27, r25
    40d6:	99 27       	eor	r25, r25
    40d8:	b7 51       	subi	r27, 0x17	; 23
    40da:	b0 f0       	brcs	.+44     	; 0x4108 <__fixunssfsi+0x3e>
    40dc:	e1 f0       	breq	.+56     	; 0x4116 <__fixunssfsi+0x4c>
    40de:	66 0f       	add	r22, r22
    40e0:	77 1f       	adc	r23, r23
    40e2:	88 1f       	adc	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	1a f0       	brmi	.+6      	; 0x40ee <__fixunssfsi+0x24>
    40e8:	ba 95       	dec	r27
    40ea:	c9 f7       	brne	.-14     	; 0x40de <__fixunssfsi+0x14>
    40ec:	14 c0       	rjmp	.+40     	; 0x4116 <__fixunssfsi+0x4c>
    40ee:	b1 30       	cpi	r27, 0x01	; 1
    40f0:	91 f0       	breq	.+36     	; 0x4116 <__fixunssfsi+0x4c>
    40f2:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__fp_zero>
    40f6:	b1 e0       	ldi	r27, 0x01	; 1
    40f8:	08 95       	ret
    40fa:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__fp_zero>
    40fe:	67 2f       	mov	r22, r23
    4100:	78 2f       	mov	r23, r24
    4102:	88 27       	eor	r24, r24
    4104:	b8 5f       	subi	r27, 0xF8	; 248
    4106:	39 f0       	breq	.+14     	; 0x4116 <__fixunssfsi+0x4c>
    4108:	b9 3f       	cpi	r27, 0xF9	; 249
    410a:	cc f3       	brlt	.-14     	; 0x40fe <__fixunssfsi+0x34>
    410c:	86 95       	lsr	r24
    410e:	77 95       	ror	r23
    4110:	67 95       	ror	r22
    4112:	b3 95       	inc	r27
    4114:	d9 f7       	brne	.-10     	; 0x410c <__fixunssfsi+0x42>
    4116:	3e f4       	brtc	.+14     	; 0x4126 <__fixunssfsi+0x5c>
    4118:	90 95       	com	r25
    411a:	80 95       	com	r24
    411c:	70 95       	com	r23
    411e:	61 95       	neg	r22
    4120:	7f 4f       	sbci	r23, 0xFF	; 255
    4122:	8f 4f       	sbci	r24, 0xFF	; 255
    4124:	9f 4f       	sbci	r25, 0xFF	; 255
    4126:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a4e <__floatunsisf>:
    3a4e:	e8 94       	clt
    3a50:	09 c0       	rjmp	.+18     	; 0x3a64 <__floatsisf+0x12>

00003a52 <__floatsisf>:
    3a52:	97 fb       	bst	r25, 7
    3a54:	3e f4       	brtc	.+14     	; 0x3a64 <__floatsisf+0x12>
    3a56:	90 95       	com	r25
    3a58:	80 95       	com	r24
    3a5a:	70 95       	com	r23
    3a5c:	61 95       	neg	r22
    3a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a60:	8f 4f       	sbci	r24, 0xFF	; 255
    3a62:	9f 4f       	sbci	r25, 0xFF	; 255
    3a64:	99 23       	and	r25, r25
    3a66:	a9 f0       	breq	.+42     	; 0x3a92 <__floatsisf+0x40>
    3a68:	f9 2f       	mov	r31, r25
    3a6a:	96 e9       	ldi	r25, 0x96	; 150
    3a6c:	bb 27       	eor	r27, r27
    3a6e:	93 95       	inc	r25
    3a70:	f6 95       	lsr	r31
    3a72:	87 95       	ror	r24
    3a74:	77 95       	ror	r23
    3a76:	67 95       	ror	r22
    3a78:	b7 95       	ror	r27
    3a7a:	f1 11       	cpse	r31, r1
    3a7c:	f8 cf       	rjmp	.-16     	; 0x3a6e <__floatsisf+0x1c>
    3a7e:	fa f4       	brpl	.+62     	; 0x3abe <__floatsisf+0x6c>
    3a80:	bb 0f       	add	r27, r27
    3a82:	11 f4       	brne	.+4      	; 0x3a88 <__floatsisf+0x36>
    3a84:	60 ff       	sbrs	r22, 0
    3a86:	1b c0       	rjmp	.+54     	; 0x3abe <__floatsisf+0x6c>
    3a88:	6f 5f       	subi	r22, 0xFF	; 255
    3a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a90:	16 c0       	rjmp	.+44     	; 0x3abe <__floatsisf+0x6c>
    3a92:	88 23       	and	r24, r24
    3a94:	11 f0       	breq	.+4      	; 0x3a9a <__floatsisf+0x48>
    3a96:	96 e9       	ldi	r25, 0x96	; 150
    3a98:	11 c0       	rjmp	.+34     	; 0x3abc <__floatsisf+0x6a>
    3a9a:	77 23       	and	r23, r23
    3a9c:	21 f0       	breq	.+8      	; 0x3aa6 <__floatsisf+0x54>
    3a9e:	9e e8       	ldi	r25, 0x8E	; 142
    3aa0:	87 2f       	mov	r24, r23
    3aa2:	76 2f       	mov	r23, r22
    3aa4:	05 c0       	rjmp	.+10     	; 0x3ab0 <__floatsisf+0x5e>
    3aa6:	66 23       	and	r22, r22
    3aa8:	71 f0       	breq	.+28     	; 0x3ac6 <__floatsisf+0x74>
    3aaa:	96 e8       	ldi	r25, 0x86	; 134
    3aac:	86 2f       	mov	r24, r22
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	2a f0       	brmi	.+10     	; 0x3abe <__floatsisf+0x6c>
    3ab4:	9a 95       	dec	r25
    3ab6:	66 0f       	add	r22, r22
    3ab8:	77 1f       	adc	r23, r23
    3aba:	88 1f       	adc	r24, r24
    3abc:	da f7       	brpl	.-10     	; 0x3ab4 <__floatsisf+0x62>
    3abe:	88 0f       	add	r24, r24
    3ac0:	96 95       	lsr	r25
    3ac2:	87 95       	ror	r24
    3ac4:	97 f9       	bld	r25, 7
    3ac6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005cc2 <__fp_inf>:
    5cc2:	97 f9       	bld	r25, 7
    5cc4:	9f 67       	ori	r25, 0x7F	; 127
    5cc6:	80 e8       	ldi	r24, 0x80	; 128
    5cc8:	70 e0       	ldi	r23, 0x00	; 0
    5cca:	60 e0       	ldi	r22, 0x00	; 0
    5ccc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005dbe <__fp_nan>:
    5dbe:	9f ef       	ldi	r25, 0xFF	; 255
    5dc0:	80 ec       	ldi	r24, 0xC0	; 192
    5dc2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005c28 <__fp_pscA>:
    5c28:	00 24       	eor	r0, r0
    5c2a:	0a 94       	dec	r0
    5c2c:	16 16       	cp	r1, r22
    5c2e:	17 06       	cpc	r1, r23
    5c30:	18 06       	cpc	r1, r24
    5c32:	09 06       	cpc	r0, r25
    5c34:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005c36 <__fp_pscB>:
    5c36:	00 24       	eor	r0, r0
    5c38:	0a 94       	dec	r0
    5c3a:	12 16       	cp	r1, r18
    5c3c:	13 06       	cpc	r1, r19
    5c3e:	14 06       	cpc	r1, r20
    5c40:	05 06       	cpc	r0, r21
    5c42:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005652 <__fp_round>:
    5652:	09 2e       	mov	r0, r25
    5654:	03 94       	inc	r0
    5656:	00 0c       	add	r0, r0
    5658:	11 f4       	brne	.+4      	; 0x565e <__fp_round+0xc>
    565a:	88 23       	and	r24, r24
    565c:	52 f0       	brmi	.+20     	; 0x5672 <__fp_round+0x20>
    565e:	bb 0f       	add	r27, r27
    5660:	40 f4       	brcc	.+16     	; 0x5672 <__fp_round+0x20>
    5662:	bf 2b       	or	r27, r31
    5664:	11 f4       	brne	.+4      	; 0x566a <__fp_round+0x18>
    5666:	60 ff       	sbrs	r22, 0
    5668:	04 c0       	rjmp	.+8      	; 0x5672 <__fp_round+0x20>
    566a:	6f 5f       	subi	r22, 0xFF	; 255
    566c:	7f 4f       	sbci	r23, 0xFF	; 255
    566e:	8f 4f       	sbci	r24, 0xFF	; 255
    5670:	9f 4f       	sbci	r25, 0xFF	; 255
    5672:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004a7c <__fp_split3>:
    4a7c:	57 fd       	sbrc	r21, 7
    4a7e:	90 58       	subi	r25, 0x80	; 128
    4a80:	44 0f       	add	r20, r20
    4a82:	55 1f       	adc	r21, r21
    4a84:	59 f0       	breq	.+22     	; 0x4a9c <__fp_splitA+0x10>
    4a86:	5f 3f       	cpi	r21, 0xFF	; 255
    4a88:	71 f0       	breq	.+28     	; 0x4aa6 <__fp_splitA+0x1a>
    4a8a:	47 95       	ror	r20

00004a8c <__fp_splitA>:
    4a8c:	88 0f       	add	r24, r24
    4a8e:	97 fb       	bst	r25, 7
    4a90:	99 1f       	adc	r25, r25
    4a92:	61 f0       	breq	.+24     	; 0x4aac <__fp_splitA+0x20>
    4a94:	9f 3f       	cpi	r25, 0xFF	; 255
    4a96:	79 f0       	breq	.+30     	; 0x4ab6 <__fp_splitA+0x2a>
    4a98:	87 95       	ror	r24
    4a9a:	08 95       	ret
    4a9c:	12 16       	cp	r1, r18
    4a9e:	13 06       	cpc	r1, r19
    4aa0:	14 06       	cpc	r1, r20
    4aa2:	55 1f       	adc	r21, r21
    4aa4:	f2 cf       	rjmp	.-28     	; 0x4a8a <__fp_split3+0xe>
    4aa6:	46 95       	lsr	r20
    4aa8:	f1 df       	rcall	.-30     	; 0x4a8c <__fp_splitA>
    4aaa:	08 c0       	rjmp	.+16     	; 0x4abc <__fp_splitA+0x30>
    4aac:	16 16       	cp	r1, r22
    4aae:	17 06       	cpc	r1, r23
    4ab0:	18 06       	cpc	r1, r24
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	f1 cf       	rjmp	.-30     	; 0x4a98 <__fp_splitA+0xc>
    4ab6:	86 95       	lsr	r24
    4ab8:	71 05       	cpc	r23, r1
    4aba:	61 05       	cpc	r22, r1
    4abc:	08 94       	sec
    4abe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005c44 <__fp_zero>:
    5c44:	e8 94       	clt

00005c46 <__fp_szero>:
    5c46:	bb 27       	eor	r27, r27
    5c48:	66 27       	eor	r22, r22
    5c4a:	77 27       	eor	r23, r23
    5c4c:	cb 01       	movw	r24, r22
    5c4e:	97 f9       	bld	r25, 7
    5c50:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005d66 <__mulsf3>:
    5d66:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <__mulsf3x>
    5d6a:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002b56 <__mulsf3x>:
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <__mulsf3x+0x20>
    2b58:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__fp_pscA>
    2b5c:	38 f0       	brcs	.+14     	; 0x2b6c <__mulsf3x+0x16>
    2b5e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__fp_pscB>
    2b62:	20 f0       	brcs	.+8      	; 0x2b6c <__mulsf3x+0x16>
    2b64:	95 23       	and	r25, r21
    2b66:	11 f0       	breq	.+4      	; 0x2b6c <__mulsf3x+0x16>
    2b68:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <__fp_inf>
    2b6c:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__fp_nan>
    2b70:	11 24       	eor	r1, r1
    2b72:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__fp_szero>
    2b76:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__fp_split3>
    2b7a:	70 f3       	brcs	.-36     	; 0x2b58 <__mulsf3x+0x2>

00002b7c <__mulsf3_pse>:
    2b7c:	95 9f       	mul	r25, r21
    2b7e:	c1 f3       	breq	.-16     	; 0x2b70 <__mulsf3x+0x1a>
    2b80:	95 0f       	add	r25, r21
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	55 1f       	adc	r21, r21
    2b86:	62 9f       	mul	r22, r18
    2b88:	f0 01       	movw	r30, r0
    2b8a:	72 9f       	mul	r23, r18
    2b8c:	bb 27       	eor	r27, r27
    2b8e:	f0 0d       	add	r31, r0
    2b90:	b1 1d       	adc	r27, r1
    2b92:	63 9f       	mul	r22, r19
    2b94:	aa 27       	eor	r26, r26
    2b96:	f0 0d       	add	r31, r0
    2b98:	b1 1d       	adc	r27, r1
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	64 9f       	mul	r22, r20
    2b9e:	66 27       	eor	r22, r22
    2ba0:	b0 0d       	add	r27, r0
    2ba2:	a1 1d       	adc	r26, r1
    2ba4:	66 1f       	adc	r22, r22
    2ba6:	82 9f       	mul	r24, r18
    2ba8:	22 27       	eor	r18, r18
    2baa:	b0 0d       	add	r27, r0
    2bac:	a1 1d       	adc	r26, r1
    2bae:	62 1f       	adc	r22, r18
    2bb0:	73 9f       	mul	r23, r19
    2bb2:	b0 0d       	add	r27, r0
    2bb4:	a1 1d       	adc	r26, r1
    2bb6:	62 1f       	adc	r22, r18
    2bb8:	83 9f       	mul	r24, r19
    2bba:	a0 0d       	add	r26, r0
    2bbc:	61 1d       	adc	r22, r1
    2bbe:	22 1f       	adc	r18, r18
    2bc0:	74 9f       	mul	r23, r20
    2bc2:	33 27       	eor	r19, r19
    2bc4:	a0 0d       	add	r26, r0
    2bc6:	61 1d       	adc	r22, r1
    2bc8:	23 1f       	adc	r18, r19
    2bca:	84 9f       	mul	r24, r20
    2bcc:	60 0d       	add	r22, r0
    2bce:	21 1d       	adc	r18, r1
    2bd0:	82 2f       	mov	r24, r18
    2bd2:	76 2f       	mov	r23, r22
    2bd4:	6a 2f       	mov	r22, r26
    2bd6:	11 24       	eor	r1, r1
    2bd8:	9f 57       	subi	r25, 0x7F	; 127
    2bda:	50 40       	sbci	r21, 0x00	; 0
    2bdc:	9a f0       	brmi	.+38     	; 0x2c04 <__mulsf3_pse+0x88>
    2bde:	f1 f0       	breq	.+60     	; 0x2c1c <__mulsf3_pse+0xa0>
    2be0:	88 23       	and	r24, r24
    2be2:	4a f0       	brmi	.+18     	; 0x2bf6 <__mulsf3_pse+0x7a>
    2be4:	ee 0f       	add	r30, r30
    2be6:	ff 1f       	adc	r31, r31
    2be8:	bb 1f       	adc	r27, r27
    2bea:	66 1f       	adc	r22, r22
    2bec:	77 1f       	adc	r23, r23
    2bee:	88 1f       	adc	r24, r24
    2bf0:	91 50       	subi	r25, 0x01	; 1
    2bf2:	50 40       	sbci	r21, 0x00	; 0
    2bf4:	a9 f7       	brne	.-22     	; 0x2be0 <__mulsf3_pse+0x64>
    2bf6:	9e 3f       	cpi	r25, 0xFE	; 254
    2bf8:	51 05       	cpc	r21, r1
    2bfa:	80 f0       	brcs	.+32     	; 0x2c1c <__mulsf3_pse+0xa0>
    2bfc:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <__fp_inf>
    2c00:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__fp_szero>
    2c04:	5f 3f       	cpi	r21, 0xFF	; 255
    2c06:	e4 f3       	brlt	.-8      	; 0x2c00 <__mulsf3_pse+0x84>
    2c08:	98 3e       	cpi	r25, 0xE8	; 232
    2c0a:	d4 f3       	brlt	.-12     	; 0x2c00 <__mulsf3_pse+0x84>
    2c0c:	86 95       	lsr	r24
    2c0e:	77 95       	ror	r23
    2c10:	67 95       	ror	r22
    2c12:	b7 95       	ror	r27
    2c14:	f7 95       	ror	r31
    2c16:	e7 95       	ror	r30
    2c18:	9f 5f       	subi	r25, 0xFF	; 255
    2c1a:	c1 f7       	brne	.-16     	; 0x2c0c <__mulsf3_pse+0x90>
    2c1c:	fe 2b       	or	r31, r30
    2c1e:	88 0f       	add	r24, r24
    2c20:	91 1d       	adc	r25, r1
    2c22:	96 95       	lsr	r25
    2c24:	87 95       	ror	r24
    2c26:	97 f9       	bld	r25, 7
    2c28:	08 95       	ret

Disassembly of section .text.avrlibc:

000006a4 <vfprintf>:
 6a4:	a4 e1       	ldi	r26, 0x14	; 20
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e8 e5       	ldi	r30, 0x58	; 88
 6aa:	f3 e0       	ldi	r31, 0x03	; 3
 6ac:	0c 94 89 27 	jmp	0x4f12	; 0x4f12 <__prologue_saves__>
 6b0:	6c 01       	movw	r12, r24
 6b2:	1a 01       	movw	r2, r20
 6b4:	46 2e       	mov	r4, r22
 6b6:	59 01       	movw	r10, r18
 6b8:	fc 01       	movw	r30, r24
 6ba:	10 86       	std	Z+8, r1	; 0x08
 6bc:	17 82       	std	Z+7, r1	; 0x07
 6be:	84 81       	ldd	r24, Z+4	; 0x04
 6c0:	81 ff       	sbrs	r24, 1
 6c2:	62 c3       	rjmp	.+1732   	; 0xd88 <__EEPROM_REGION_LENGTH__+0x588>
 6c4:	ce 01       	movw	r24, r28
 6c6:	01 96       	adiw	r24, 0x01	; 1
 6c8:	9d 87       	std	Y+13, r25	; 0x0d
 6ca:	8c 87       	std	Y+12, r24	; 0x0c
 6cc:	a0 e8       	ldi	r26, 0x80	; 128
 6ce:	8a 8b       	std	Y+18, r24	; 0x12
 6d0:	9b 8b       	std	Y+19, r25	; 0x13
 6d2:	ac 8b       	std	Y+20, r26	; 0x14
 6d4:	f1 01       	movw	r30, r2
 6d6:	84 91       	lpm	r24, Z
 6d8:	47 fc       	sbrc	r4, 7
 6da:	80 81       	ld	r24, Z
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <vfprintf+0x3e>
 6e0:	4f c3       	rjmp	.+1694   	; 0xd80 <__EEPROM_REGION_LENGTH__+0x580>
 6e2:	44 2d       	mov	r20, r4
 6e4:	91 01       	movw	r18, r2
 6e6:	2f 5f       	subi	r18, 0xFF	; 255
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	4f 4f       	sbci	r20, 0xFF	; 255
 6ec:	85 32       	cpi	r24, 0x25	; 37
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <vfprintf+0x52>
 6f0:	19 01       	movw	r2, r18
 6f2:	44 2e       	mov	r4, r20
 6f4:	0a c0       	rjmp	.+20     	; 0x70a <vfprintf+0x66>
 6f6:	f9 01       	movw	r30, r18
 6f8:	84 91       	lpm	r24, Z
 6fa:	47 fd       	sbrc	r20, 7
 6fc:	80 81       	ld	r24, Z
 6fe:	92 e0       	ldi	r25, 0x02	; 2
 700:	29 0e       	add	r2, r25
 702:	31 1c       	adc	r3, r1
 704:	41 1c       	adc	r4, r1
 706:	85 32       	cpi	r24, 0x25	; 37
 708:	49 f4       	brne	.+18     	; 0x71c <vfprintf+0x78>
 70a:	b6 01       	movw	r22, r12
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 712:	bf 86       	std	Y+15, r11	; 0x0f
 714:	ae 86       	std	Y+14, r10	; 0x0e
 716:	ae 84       	ldd	r10, Y+14	; 0x0e
 718:	bf 84       	ldd	r11, Y+15	; 0x0f
 71a:	dc cf       	rjmp	.-72     	; 0x6d4 <vfprintf+0x30>
 71c:	10 e0       	ldi	r17, 0x00	; 0
 71e:	f1 2c       	mov	r15, r1
 720:	00 e0       	ldi	r16, 0x00	; 0
 722:	00 32       	cpi	r16, 0x20	; 32
 724:	a0 f4       	brcc	.+40     	; 0x74e <vfprintf+0xaa>
 726:	8b 32       	cpi	r24, 0x2B	; 43
 728:	69 f0       	breq	.+26     	; 0x744 <vfprintf+0xa0>
 72a:	30 f4       	brcc	.+12     	; 0x738 <vfprintf+0x94>
 72c:	80 32       	cpi	r24, 0x20	; 32
 72e:	59 f0       	breq	.+22     	; 0x746 <vfprintf+0xa2>
 730:	83 32       	cpi	r24, 0x23	; 35
 732:	69 f4       	brne	.+26     	; 0x74e <vfprintf+0xaa>
 734:	00 61       	ori	r16, 0x10	; 16
 736:	2c c0       	rjmp	.+88     	; 0x790 <vfprintf+0xec>
 738:	8d 32       	cpi	r24, 0x2D	; 45
 73a:	39 f0       	breq	.+14     	; 0x74a <vfprintf+0xa6>
 73c:	80 33       	cpi	r24, 0x30	; 48
 73e:	39 f4       	brne	.+14     	; 0x74e <vfprintf+0xaa>
 740:	01 60       	ori	r16, 0x01	; 1
 742:	26 c0       	rjmp	.+76     	; 0x790 <vfprintf+0xec>
 744:	02 60       	ori	r16, 0x02	; 2
 746:	04 60       	ori	r16, 0x04	; 4
 748:	23 c0       	rjmp	.+70     	; 0x790 <vfprintf+0xec>
 74a:	08 60       	ori	r16, 0x08	; 8
 74c:	21 c0       	rjmp	.+66     	; 0x790 <vfprintf+0xec>
 74e:	07 fd       	sbrc	r16, 7
 750:	29 c0       	rjmp	.+82     	; 0x7a4 <vfprintf+0x100>
 752:	90 ed       	ldi	r25, 0xD0	; 208
 754:	98 0f       	add	r25, r24
 756:	9a 30       	cpi	r25, 0x0A	; 10
 758:	78 f4       	brcc	.+30     	; 0x778 <vfprintf+0xd4>
 75a:	06 ff       	sbrs	r16, 6
 75c:	06 c0       	rjmp	.+12     	; 0x76a <vfprintf+0xc6>
 75e:	aa e0       	ldi	r26, 0x0A	; 10
 760:	1a 9f       	mul	r17, r26
 762:	90 0d       	add	r25, r0
 764:	11 24       	eor	r1, r1
 766:	19 2f       	mov	r17, r25
 768:	13 c0       	rjmp	.+38     	; 0x790 <vfprintf+0xec>
 76a:	ea e0       	ldi	r30, 0x0A	; 10
 76c:	fe 9e       	mul	r15, r30
 76e:	90 0d       	add	r25, r0
 770:	11 24       	eor	r1, r1
 772:	f9 2e       	mov	r15, r25
 774:	00 62       	ori	r16, 0x20	; 32
 776:	0c c0       	rjmp	.+24     	; 0x790 <vfprintf+0xec>
 778:	8e 32       	cpi	r24, 0x2E	; 46
 77a:	21 f4       	brne	.+8      	; 0x784 <vfprintf+0xe0>
 77c:	06 fd       	sbrc	r16, 6
 77e:	00 c3       	rjmp	.+1536   	; 0xd80 <__EEPROM_REGION_LENGTH__+0x580>
 780:	00 64       	ori	r16, 0x40	; 64
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0xec>
 784:	8c 36       	cpi	r24, 0x6C	; 108
 786:	11 f4       	brne	.+4      	; 0x78c <vfprintf+0xe8>
 788:	00 68       	ori	r16, 0x80	; 128
 78a:	02 c0       	rjmp	.+4      	; 0x790 <vfprintf+0xec>
 78c:	88 36       	cpi	r24, 0x68	; 104
 78e:	51 f4       	brne	.+20     	; 0x7a4 <vfprintf+0x100>
 790:	f1 01       	movw	r30, r2
 792:	84 91       	lpm	r24, Z
 794:	47 fc       	sbrc	r4, 7
 796:	80 81       	ld	r24, Z
 798:	ff ef       	ldi	r31, 0xFF	; 255
 79a:	2f 1a       	sub	r2, r31
 79c:	3f 0a       	sbc	r3, r31
 79e:	4f 0a       	sbc	r4, r31
 7a0:	81 11       	cpse	r24, r1
 7a2:	bf cf       	rjmp	.-130    	; 0x722 <vfprintf+0x7e>
 7a4:	9b eb       	ldi	r25, 0xBB	; 187
 7a6:	98 0f       	add	r25, r24
 7a8:	93 30       	cpi	r25, 0x03	; 3
 7aa:	18 f4       	brcc	.+6      	; 0x7b2 <vfprintf+0x10e>
 7ac:	00 61       	ori	r16, 0x10	; 16
 7ae:	80 5e       	subi	r24, 0xE0	; 224
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <vfprintf+0x11a>
 7b2:	9b e9       	ldi	r25, 0x9B	; 155
 7b4:	98 0f       	add	r25, r24
 7b6:	93 30       	cpi	r25, 0x03	; 3
 7b8:	08 f0       	brcs	.+2      	; 0x7bc <vfprintf+0x118>
 7ba:	66 c1       	rjmp	.+716    	; 0xa88 <__EEPROM_REGION_LENGTH__+0x288>
 7bc:	0f 7e       	andi	r16, 0xEF	; 239
 7be:	06 ff       	sbrs	r16, 6
 7c0:	16 e0       	ldi	r17, 0x06	; 6
 7c2:	0f 73       	andi	r16, 0x3F	; 63
 7c4:	70 2e       	mov	r7, r16
 7c6:	85 36       	cpi	r24, 0x65	; 101
 7c8:	21 f4       	brne	.+8      	; 0x7d2 <vfprintf+0x12e>
 7ca:	20 2f       	mov	r18, r16
 7cc:	20 64       	ori	r18, 0x40	; 64
 7ce:	72 2e       	mov	r7, r18
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <vfprintf+0x13e>
 7d2:	86 36       	cpi	r24, 0x66	; 102
 7d4:	21 f4       	brne	.+8      	; 0x7de <vfprintf+0x13a>
 7d6:	80 2f       	mov	r24, r16
 7d8:	80 68       	ori	r24, 0x80	; 128
 7da:	78 2e       	mov	r7, r24
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x13e>
 7de:	11 11       	cpse	r17, r1
 7e0:	11 50       	subi	r17, 0x01	; 1
 7e2:	77 fe       	sbrs	r7, 7
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <vfprintf+0x150>
 7e6:	1c 33       	cpi	r17, 0x3C	; 60
 7e8:	50 f4       	brcc	.+20     	; 0x7fe <vfprintf+0x15a>
 7ea:	ee 24       	eor	r14, r14
 7ec:	e3 94       	inc	r14
 7ee:	e1 0e       	add	r14, r17
 7f0:	27 e0       	ldi	r18, 0x07	; 7
 7f2:	0b c0       	rjmp	.+22     	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 7f4:	18 30       	cpi	r17, 0x08	; 8
 7f6:	38 f0       	brcs	.+14     	; 0x806 <__EEPROM_REGION_LENGTH__+0x6>
 7f8:	27 e0       	ldi	r18, 0x07	; 7
 7fa:	17 e0       	ldi	r17, 0x07	; 7
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 7fe:	27 e0       	ldi	r18, 0x07	; 7
 800:	6c e3       	ldi	r22, 0x3C	; 60
 802:	e6 2e       	mov	r14, r22
 804:	02 c0       	rjmp	.+4      	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 806:	21 2f       	mov	r18, r17
 808:	e1 2c       	mov	r14, r1
 80a:	f5 01       	movw	r30, r10
 80c:	34 96       	adiw	r30, 0x04	; 4
 80e:	ff 87       	std	Y+15, r31	; 0x0f
 810:	ee 87       	std	Y+14, r30	; 0x0e
 812:	f5 01       	movw	r30, r10
 814:	60 81       	ld	r22, Z
 816:	71 81       	ldd	r23, Z+1	; 0x01
 818:	82 81       	ldd	r24, Z+2	; 0x02
 81a:	93 81       	ldd	r25, Z+3	; 0x03
 81c:	0e 2d       	mov	r16, r14
 81e:	ae 01       	movw	r20, r28
 820:	4f 5f       	subi	r20, 0xFF	; 255
 822:	5f 4f       	sbci	r21, 0xFF	; 255
 824:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ftoa_engine>
 828:	5c 01       	movw	r10, r24
 82a:	59 80       	ldd	r5, Y+1	; 0x01
 82c:	50 fe       	sbrs	r5, 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 830:	53 fe       	sbrs	r5, 3
 832:	06 c0       	rjmp	.+12     	; 0x840 <__EEPROM_REGION_LENGTH__+0x40>
 834:	71 fc       	sbrc	r7, 1
 836:	06 c0       	rjmp	.+12     	; 0x844 <__EEPROM_REGION_LENGTH__+0x44>
 838:	72 fe       	sbrs	r7, 2
 83a:	06 c0       	rjmp	.+12     	; 0x848 <__EEPROM_REGION_LENGTH__+0x48>
 83c:	00 e2       	ldi	r16, 0x20	; 32
 83e:	05 c0       	rjmp	.+10     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 840:	0d e2       	ldi	r16, 0x2D	; 45
 842:	03 c0       	rjmp	.+6      	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 844:	0b e2       	ldi	r16, 0x2B	; 43
 846:	01 c0       	rjmp	.+2      	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 848:	00 e0       	ldi	r16, 0x00	; 0
 84a:	85 2d       	mov	r24, r5
 84c:	8c 70       	andi	r24, 0x0C	; 12
 84e:	19 f0       	breq	.+6      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 850:	01 11       	cpse	r16, r1
 852:	73 c2       	rjmp	.+1254   	; 0xd3a <__EEPROM_REGION_LENGTH__+0x53a>
 854:	be c2       	rjmp	.+1404   	; 0xdd2 <__EEPROM_REGION_LENGTH__+0x5d2>
 856:	77 fe       	sbrs	r7, 7
 858:	0f c0       	rjmp	.+30     	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
 85a:	ea 0c       	add	r14, r10
 85c:	54 fe       	sbrs	r5, 4
 85e:	04 c0       	rjmp	.+8      	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 860:	8a 81       	ldd	r24, Y+2	; 0x02
 862:	81 33       	cpi	r24, 0x31	; 49
 864:	09 f4       	brne	.+2      	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 866:	ea 94       	dec	r14
 868:	1e 14       	cp	r1, r14
 86a:	74 f5       	brge	.+92     	; 0x8c8 <__EEPROM_REGION_LENGTH__+0xc8>
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	2e 15       	cp	r18, r14
 870:	78 f5       	brcc	.+94     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 872:	38 e0       	ldi	r19, 0x08	; 8
 874:	e3 2e       	mov	r14, r19
 876:	2c c0       	rjmp	.+88     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 878:	76 fc       	sbrc	r7, 6
 87a:	2a c0       	rjmp	.+84     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 87c:	81 2f       	mov	r24, r17
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	8a 15       	cp	r24, r10
 882:	9b 05       	cpc	r25, r11
 884:	9c f0       	brlt	.+38     	; 0x8ac <__EEPROM_REGION_LENGTH__+0xac>
 886:	8c ef       	ldi	r24, 0xFC	; 252
 888:	a8 16       	cp	r10, r24
 88a:	8f ef       	ldi	r24, 0xFF	; 255
 88c:	b8 06       	cpc	r11, r24
 88e:	74 f0       	brlt	.+28     	; 0x8ac <__EEPROM_REGION_LENGTH__+0xac>
 890:	97 2d       	mov	r25, r7
 892:	90 68       	ori	r25, 0x80	; 128
 894:	79 2e       	mov	r7, r25
 896:	0a c0       	rjmp	.+20     	; 0x8ac <__EEPROM_REGION_LENGTH__+0xac>
 898:	e2 e0       	ldi	r30, 0x02	; 2
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	ec 0f       	add	r30, r28
 89e:	fd 1f       	adc	r31, r29
 8a0:	e1 0f       	add	r30, r17
 8a2:	f1 1d       	adc	r31, r1
 8a4:	80 81       	ld	r24, Z
 8a6:	80 33       	cpi	r24, 0x30	; 48
 8a8:	19 f4       	brne	.+6      	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
 8aa:	11 50       	subi	r17, 0x01	; 1
 8ac:	11 11       	cpse	r17, r1
 8ae:	f4 cf       	rjmp	.-24     	; 0x898 <__EEPROM_REGION_LENGTH__+0x98>
 8b0:	77 fe       	sbrs	r7, 7
 8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8b4:	ee 24       	eor	r14, r14
 8b6:	e3 94       	inc	r14
 8b8:	e1 0e       	add	r14, r17
 8ba:	81 2f       	mov	r24, r17
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	a8 16       	cp	r10, r24
 8c0:	b9 06       	cpc	r11, r25
 8c2:	2c f4       	brge	.+10     	; 0x8ce <__EEPROM_REGION_LENGTH__+0xce>
 8c4:	1a 19       	sub	r17, r10
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8c8:	ee 24       	eor	r14, r14
 8ca:	e3 94       	inc	r14
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8ce:	10 e0       	ldi	r17, 0x00	; 0
 8d0:	77 fe       	sbrs	r7, 7
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <__EEPROM_REGION_LENGTH__+0xe0>
 8d4:	1a 14       	cp	r1, r10
 8d6:	1b 04       	cpc	r1, r11
 8d8:	34 f4       	brge	.+12     	; 0x8e6 <__EEPROM_REGION_LENGTH__+0xe6>
 8da:	c5 01       	movw	r24, r10
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <__EEPROM_REGION_LENGTH__+0xea>
 8e0:	85 e0       	ldi	r24, 0x05	; 5
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__EEPROM_REGION_LENGTH__+0xea>
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	01 11       	cpse	r16, r1
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	11 23       	and	r17, r17
 8f0:	31 f0       	breq	.+12     	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
 8f2:	21 2f       	mov	r18, r17
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	2f 5f       	subi	r18, 0xFF	; 255
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	82 0f       	add	r24, r18
 8fc:	93 1f       	adc	r25, r19
 8fe:	2f 2d       	mov	r18, r15
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	82 17       	cp	r24, r18
 904:	93 07       	cpc	r25, r19
 906:	14 f4       	brge	.+4      	; 0x90c <__EEPROM_REGION_LENGTH__+0x10c>
 908:	f8 1a       	sub	r15, r24
 90a:	01 c0       	rjmp	.+2      	; 0x90e <__EEPROM_REGION_LENGTH__+0x10e>
 90c:	f1 2c       	mov	r15, r1
 90e:	87 2d       	mov	r24, r7
 910:	89 70       	andi	r24, 0x09	; 9
 912:	49 f4       	brne	.+18     	; 0x926 <__EEPROM_REGION_LENGTH__+0x126>
 914:	ff 20       	and	r15, r15
 916:	39 f0       	breq	.+14     	; 0x926 <__EEPROM_REGION_LENGTH__+0x126>
 918:	b6 01       	movw	r22, r12
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 922:	fa 94       	dec	r15
 924:	f7 cf       	rjmp	.-18     	; 0x914 <__EEPROM_REGION_LENGTH__+0x114>
 926:	00 23       	and	r16, r16
 928:	29 f0       	breq	.+10     	; 0x934 <__EEPROM_REGION_LENGTH__+0x134>
 92a:	b6 01       	movw	r22, r12
 92c:	80 2f       	mov	r24, r16
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 934:	73 fc       	sbrc	r7, 3
 936:	09 c0       	rjmp	.+18     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 938:	ff 20       	and	r15, r15
 93a:	39 f0       	breq	.+14     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 93c:	b6 01       	movw	r22, r12
 93e:	80 e3       	ldi	r24, 0x30	; 48
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 946:	fa 94       	dec	r15
 948:	f7 cf       	rjmp	.-18     	; 0x938 <__EEPROM_REGION_LENGTH__+0x138>
 94a:	77 fe       	sbrs	r7, 7
 94c:	49 c0       	rjmp	.+146    	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 94e:	35 01       	movw	r6, r10
 950:	b7 fe       	sbrs	r11, 7
 952:	02 c0       	rjmp	.+4      	; 0x958 <__EEPROM_REGION_LENGTH__+0x158>
 954:	61 2c       	mov	r6, r1
 956:	71 2c       	mov	r7, r1
 958:	c5 01       	movw	r24, r10
 95a:	86 19       	sub	r24, r6
 95c:	97 09       	sbc	r25, r7
 95e:	88 24       	eor	r8, r8
 960:	83 94       	inc	r8
 962:	91 2c       	mov	r9, r1
 964:	8c 0e       	add	r8, r28
 966:	9d 1e       	adc	r9, r29
 968:	88 0e       	add	r8, r24
 96a:	99 1e       	adc	r9, r25
 96c:	f5 01       	movw	r30, r10
 96e:	ee 19       	sub	r30, r14
 970:	f1 09       	sbc	r31, r1
 972:	f9 8b       	std	Y+17, r31	; 0x11
 974:	e8 8b       	std	Y+16, r30	; 0x10
 976:	01 2f       	mov	r16, r17
 978:	10 e0       	ldi	r17, 0x00	; 0
 97a:	11 95       	neg	r17
 97c:	01 95       	neg	r16
 97e:	11 09       	sbc	r17, r1
 980:	ff ef       	ldi	r31, 0xFF	; 255
 982:	6f 16       	cp	r6, r31
 984:	7f 06       	cpc	r7, r31
 986:	29 f4       	brne	.+10     	; 0x992 <__EEPROM_REGION_LENGTH__+0x192>
 988:	b6 01       	movw	r22, r12
 98a:	8e e2       	ldi	r24, 0x2E	; 46
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 992:	a6 14       	cp	r10, r6
 994:	b7 04       	cpc	r11, r7
 996:	44 f0       	brlt	.+16     	; 0x9a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 998:	88 89       	ldd	r24, Y+16	; 0x10
 99a:	99 89       	ldd	r25, Y+17	; 0x11
 99c:	86 15       	cp	r24, r6
 99e:	97 05       	cpc	r25, r7
 9a0:	1c f4       	brge	.+6      	; 0x9a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 9a2:	f4 01       	movw	r30, r8
 9a4:	81 81       	ldd	r24, Z+1	; 0x01
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__EEPROM_REGION_LENGTH__+0x1aa>
 9a8:	80 e3       	ldi	r24, 0x30	; 48
 9aa:	f1 e0       	ldi	r31, 0x01	; 1
 9ac:	6f 1a       	sub	r6, r31
 9ae:	71 08       	sbc	r7, r1
 9b0:	2f ef       	ldi	r18, 0xFF	; 255
 9b2:	82 1a       	sub	r8, r18
 9b4:	92 0a       	sbc	r9, r18
 9b6:	60 16       	cp	r6, r16
 9b8:	71 06       	cpc	r7, r17
 9ba:	2c f0       	brlt	.+10     	; 0x9c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 9bc:	b6 01       	movw	r22, r12
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 9c4:	dd cf       	rjmp	.-70     	; 0x980 <__EEPROM_REGION_LENGTH__+0x180>
 9c6:	a6 14       	cp	r10, r6
 9c8:	b7 04       	cpc	r11, r7
 9ca:	39 f4       	brne	.+14     	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9cc:	9a 81       	ldd	r25, Y+2	; 0x02
 9ce:	96 33       	cpi	r25, 0x36	; 54
 9d0:	18 f4       	brcc	.+6      	; 0x9d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 9d2:	95 33       	cpi	r25, 0x35	; 53
 9d4:	11 f4       	brne	.+4      	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9d6:	54 fe       	sbrs	r5, 4
 9d8:	81 e3       	ldi	r24, 0x31	; 49
 9da:	b6 01       	movw	r22, r12
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	51 c0       	rjmp	.+162    	; 0xa82 <__EEPROM_REGION_LENGTH__+0x282>
 9e0:	8a 81       	ldd	r24, Y+2	; 0x02
 9e2:	81 33       	cpi	r24, 0x31	; 49
 9e4:	19 f0       	breq	.+6      	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9e6:	95 2d       	mov	r25, r5
 9e8:	9f 7e       	andi	r25, 0xEF	; 239
 9ea:	59 2e       	mov	r5, r25
 9ec:	b6 01       	movw	r22, r12
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 9f4:	11 11       	cpse	r17, r1
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__EEPROM_REGION_LENGTH__+0x202>
 9f8:	74 fc       	sbrc	r7, 4
 9fa:	1c c0       	rjmp	.+56     	; 0xa34 <__EEPROM_REGION_LENGTH__+0x234>
 9fc:	85 e6       	ldi	r24, 0x65	; 101
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	1b c0       	rjmp	.+54     	; 0xa38 <__EEPROM_REGION_LENGTH__+0x238>
 a02:	b6 01       	movw	r22, r12
 a04:	8e e2       	ldi	r24, 0x2E	; 46
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 a0c:	02 e0       	ldi	r16, 0x02	; 2
 a0e:	01 0f       	add	r16, r17
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	11 e0       	ldi	r17, 0x01	; 1
 a14:	18 0f       	add	r17, r24
 a16:	e1 e0       	ldi	r30, 0x01	; 1
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	ec 0f       	add	r30, r28
 a1c:	fd 1f       	adc	r31, r29
 a1e:	e8 0f       	add	r30, r24
 a20:	f1 1d       	adc	r31, r1
 a22:	80 81       	ld	r24, Z
 a24:	b6 01       	movw	r22, r12
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 a2c:	81 2f       	mov	r24, r17
 a2e:	10 13       	cpse	r17, r16
 a30:	f0 cf       	rjmp	.-32     	; 0xa12 <__EEPROM_REGION_LENGTH__+0x212>
 a32:	e2 cf       	rjmp	.-60     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 a34:	85 e4       	ldi	r24, 0x45	; 69
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	b6 01       	movw	r22, r12
 a3a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 a3e:	b7 fc       	sbrc	r11, 7
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <__EEPROM_REGION_LENGTH__+0x24c>
 a42:	a1 14       	cp	r10, r1
 a44:	b1 04       	cpc	r11, r1
 a46:	39 f4       	brne	.+14     	; 0xa56 <__EEPROM_REGION_LENGTH__+0x256>
 a48:	54 fe       	sbrs	r5, 4
 a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__EEPROM_REGION_LENGTH__+0x256>
 a4c:	b1 94       	neg	r11
 a4e:	a1 94       	neg	r10
 a50:	b1 08       	sbc	r11, r1
 a52:	8d e2       	ldi	r24, 0x2D	; 45
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <__EEPROM_REGION_LENGTH__+0x258>
 a56:	8b e2       	ldi	r24, 0x2B	; 43
 a58:	b6 01       	movw	r22, r12
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 a60:	80 e3       	ldi	r24, 0x30	; 48
 a62:	ea e0       	ldi	r30, 0x0A	; 10
 a64:	ae 16       	cp	r10, r30
 a66:	b1 04       	cpc	r11, r1
 a68:	2c f0       	brlt	.+10     	; 0xa74 <__EEPROM_REGION_LENGTH__+0x274>
 a6a:	8f 5f       	subi	r24, 0xFF	; 255
 a6c:	aa e0       	ldi	r26, 0x0A	; 10
 a6e:	aa 1a       	sub	r10, r26
 a70:	b1 08       	sbc	r11, r1
 a72:	f7 cf       	rjmp	.-18     	; 0xa62 <__EEPROM_REGION_LENGTH__+0x262>
 a74:	b6 01       	movw	r22, r12
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 a7c:	b6 01       	movw	r22, r12
 a7e:	c5 01       	movw	r24, r10
 a80:	c0 96       	adiw	r24, 0x30	; 48
 a82:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 a86:	72 c1       	rjmp	.+740    	; 0xd6c <__EEPROM_REGION_LENGTH__+0x56c>
 a88:	83 36       	cpi	r24, 0x63	; 99
 a8a:	31 f0       	breq	.+12     	; 0xa98 <__EEPROM_REGION_LENGTH__+0x298>
 a8c:	83 37       	cpi	r24, 0x73	; 115
 a8e:	91 f0       	breq	.+36     	; 0xab4 <__EEPROM_REGION_LENGTH__+0x2b4>
 a90:	83 35       	cpi	r24, 0x53	; 83
 a92:	09 f0       	breq	.+2      	; 0xa96 <__EEPROM_REGION_LENGTH__+0x296>
 a94:	5d c0       	rjmp	.+186    	; 0xb50 <__EEPROM_REGION_LENGTH__+0x350>
 a96:	24 c0       	rjmp	.+72     	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 a98:	c5 01       	movw	r24, r10
 a9a:	02 96       	adiw	r24, 0x02	; 2
 a9c:	9f 87       	std	Y+15, r25	; 0x0f
 a9e:	8e 87       	std	Y+14, r24	; 0x0e
 aa0:	f5 01       	movw	r30, r10
 aa2:	80 81       	ld	r24, Z
 aa4:	89 83       	std	Y+1, r24	; 0x01
 aa6:	6a 88       	ldd	r6, Y+18	; 0x12
 aa8:	7b 88       	ldd	r7, Y+19	; 0x13
 aaa:	8c 88       	ldd	r8, Y+20	; 0x14
 aac:	aa 24       	eor	r10, r10
 aae:	a3 94       	inc	r10
 ab0:	b1 2c       	mov	r11, r1
 ab2:	14 c0       	rjmp	.+40     	; 0xadc <__EEPROM_REGION_LENGTH__+0x2dc>
 ab4:	c5 01       	movw	r24, r10
 ab6:	03 96       	adiw	r24, 0x03	; 3
 ab8:	9f 87       	std	Y+15, r25	; 0x0f
 aba:	8e 87       	std	Y+14, r24	; 0x0e
 abc:	f5 01       	movw	r30, r10
 abe:	60 80       	ld	r6, Z
 ac0:	71 80       	ldd	r7, Z+1	; 0x01
 ac2:	82 80       	ldd	r8, Z+2	; 0x02
 ac4:	06 ff       	sbrs	r16, 6
 ac6:	03 c0       	rjmp	.+6      	; 0xace <__EEPROM_REGION_LENGTH__+0x2ce>
 ac8:	41 2f       	mov	r20, r17
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 ace:	4f ef       	ldi	r20, 0xFF	; 255
 ad0:	5f ef       	ldi	r21, 0xFF	; 255
 ad2:	88 2d       	mov	r24, r8
 ad4:	b3 01       	movw	r22, r6
 ad6:	0e 94 11 28 	call	0x5022	; 0x5022 <strnlen>
 ada:	5c 01       	movw	r10, r24
 adc:	0f 77       	andi	r16, 0x7F	; 127
 ade:	15 c0       	rjmp	.+42     	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 ae0:	c5 01       	movw	r24, r10
 ae2:	03 96       	adiw	r24, 0x03	; 3
 ae4:	9f 87       	std	Y+15, r25	; 0x0f
 ae6:	8e 87       	std	Y+14, r24	; 0x0e
 ae8:	f5 01       	movw	r30, r10
 aea:	60 80       	ld	r6, Z
 aec:	71 80       	ldd	r7, Z+1	; 0x01
 aee:	82 80       	ldd	r8, Z+2	; 0x02
 af0:	06 ff       	sbrs	r16, 6
 af2:	03 c0       	rjmp	.+6      	; 0xafa <__EEPROM_REGION_LENGTH__+0x2fa>
 af4:	41 2f       	mov	r20, r17
 af6:	50 e0       	ldi	r21, 0x00	; 0
 af8:	02 c0       	rjmp	.+4      	; 0xafe <__EEPROM_REGION_LENGTH__+0x2fe>
 afa:	4f ef       	ldi	r20, 0xFF	; 255
 afc:	5f ef       	ldi	r21, 0xFF	; 255
 afe:	88 2d       	mov	r24, r8
 b00:	b3 01       	movw	r22, r6
 b02:	0e 94 11 28 	call	0x5022	; 0x5022 <strnlen>
 b06:	5c 01       	movw	r10, r24
 b08:	00 68       	ori	r16, 0x80	; 128
 b0a:	03 fd       	sbrc	r16, 3
 b0c:	1d c0       	rjmp	.+58     	; 0xb48 <__EEPROM_REGION_LENGTH__+0x348>
 b0e:	8f 2d       	mov	r24, r15
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	a8 16       	cp	r10, r24
 b14:	b9 06       	cpc	r11, r25
 b16:	c0 f4       	brcc	.+48     	; 0xb48 <__EEPROM_REGION_LENGTH__+0x348>
 b18:	b6 01       	movw	r22, r12
 b1a:	80 e2       	ldi	r24, 0x20	; 32
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 b22:	fa 94       	dec	r15
 b24:	f4 cf       	rjmp	.-24     	; 0xb0e <__EEPROM_REGION_LENGTH__+0x30e>
 b26:	f3 01       	movw	r30, r6
 b28:	84 91       	lpm	r24, Z
 b2a:	87 fc       	sbrc	r8, 7
 b2c:	80 81       	ld	r24, Z
 b2e:	ff ef       	ldi	r31, 0xFF	; 255
 b30:	6f 1a       	sub	r6, r31
 b32:	7f 0a       	sbc	r7, r31
 b34:	8f 0a       	sbc	r8, r31
 b36:	b6 01       	movw	r22, r12
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 b3e:	f1 10       	cpse	r15, r1
 b40:	fa 94       	dec	r15
 b42:	21 e0       	ldi	r18, 0x01	; 1
 b44:	a2 1a       	sub	r10, r18
 b46:	b1 08       	sbc	r11, r1
 b48:	a1 14       	cp	r10, r1
 b4a:	b1 04       	cpc	r11, r1
 b4c:	61 f7       	brne	.-40     	; 0xb26 <__EEPROM_REGION_LENGTH__+0x326>
 b4e:	0e c1       	rjmp	.+540    	; 0xd6c <__EEPROM_REGION_LENGTH__+0x56c>
 b50:	84 36       	cpi	r24, 0x64	; 100
 b52:	11 f0       	breq	.+4      	; 0xb58 <__EEPROM_REGION_LENGTH__+0x358>
 b54:	89 36       	cpi	r24, 0x69	; 105
 b56:	79 f5       	brne	.+94     	; 0xbb6 <__EEPROM_REGION_LENGTH__+0x3b6>
 b58:	c5 01       	movw	r24, r10
 b5a:	07 ff       	sbrs	r16, 7
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__EEPROM_REGION_LENGTH__+0x370>
 b5e:	04 96       	adiw	r24, 0x04	; 4
 b60:	9f 87       	std	Y+15, r25	; 0x0f
 b62:	8e 87       	std	Y+14, r24	; 0x0e
 b64:	f5 01       	movw	r30, r10
 b66:	60 81       	ld	r22, Z
 b68:	71 81       	ldd	r23, Z+1	; 0x01
 b6a:	82 81       	ldd	r24, Z+2	; 0x02
 b6c:	93 81       	ldd	r25, Z+3	; 0x03
 b6e:	0a c0       	rjmp	.+20     	; 0xb84 <__EEPROM_REGION_LENGTH__+0x384>
 b70:	02 96       	adiw	r24, 0x02	; 2
 b72:	9f 87       	std	Y+15, r25	; 0x0f
 b74:	8e 87       	std	Y+14, r24	; 0x0e
 b76:	f5 01       	movw	r30, r10
 b78:	60 81       	ld	r22, Z
 b7a:	71 81       	ldd	r23, Z+1	; 0x01
 b7c:	07 2e       	mov	r0, r23
 b7e:	00 0c       	add	r0, r0
 b80:	88 0b       	sbc	r24, r24
 b82:	99 0b       	sbc	r25, r25
 b84:	0f 76       	andi	r16, 0x6F	; 111
 b86:	e0 2e       	mov	r14, r16
 b88:	97 ff       	sbrs	r25, 7
 b8a:	0a c0       	rjmp	.+20     	; 0xba0 <__EEPROM_REGION_LENGTH__+0x3a0>
 b8c:	90 95       	com	r25
 b8e:	80 95       	com	r24
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	f0 2f       	mov	r31, r16
 b9c:	f0 68       	ori	r31, 0x80	; 128
 b9e:	ef 2e       	mov	r14, r31
 ba0:	2a e0       	ldi	r18, 0x0A	; 10
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	ae 01       	movw	r20, r28
 ba6:	4f 5f       	subi	r20, 0xFF	; 255
 ba8:	5f 4f       	sbci	r21, 0xFF	; 255
 baa:	0e 94 0a 18 	call	0x3014	; 0x3014 <__ultoa_invert>
 bae:	a8 2e       	mov	r10, r24
 bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
 bb2:	a2 1a       	sub	r10, r18
 bb4:	4b c0       	rjmp	.+150    	; 0xc4c <__EEPROM_REGION_LENGTH__+0x44c>
 bb6:	85 37       	cpi	r24, 0x75	; 117
 bb8:	29 f4       	brne	.+10     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 bba:	0f 7e       	andi	r16, 0xEF	; 239
 bbc:	e0 2e       	mov	r14, r16
 bbe:	2a e0       	ldi	r18, 0x0A	; 10
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	25 c0       	rjmp	.+74     	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 bc4:	90 2f       	mov	r25, r16
 bc6:	99 7f       	andi	r25, 0xF9	; 249
 bc8:	e9 2e       	mov	r14, r25
 bca:	8f 36       	cpi	r24, 0x6F	; 111
 bcc:	c1 f0       	breq	.+48     	; 0xbfe <__EEPROM_REGION_LENGTH__+0x3fe>
 bce:	18 f4       	brcc	.+6      	; 0xbd6 <__EEPROM_REGION_LENGTH__+0x3d6>
 bd0:	88 35       	cpi	r24, 0x58	; 88
 bd2:	79 f0       	breq	.+30     	; 0xbf2 <__EEPROM_REGION_LENGTH__+0x3f2>
 bd4:	d5 c0       	rjmp	.+426    	; 0xd80 <__EEPROM_REGION_LENGTH__+0x580>
 bd6:	80 37       	cpi	r24, 0x70	; 112
 bd8:	19 f0       	breq	.+6      	; 0xbe0 <__EEPROM_REGION_LENGTH__+0x3e0>
 bda:	88 37       	cpi	r24, 0x78	; 120
 bdc:	21 f0       	breq	.+8      	; 0xbe6 <__EEPROM_REGION_LENGTH__+0x3e6>
 bde:	d0 c0       	rjmp	.+416    	; 0xd80 <__EEPROM_REGION_LENGTH__+0x580>
 be0:	a9 2f       	mov	r26, r25
 be2:	a0 61       	ori	r26, 0x10	; 16
 be4:	ea 2e       	mov	r14, r26
 be6:	e4 fe       	sbrs	r14, 4
 be8:	0d c0       	rjmp	.+26     	; 0xc04 <__EEPROM_REGION_LENGTH__+0x404>
 bea:	ee 2d       	mov	r30, r14
 bec:	e4 60       	ori	r30, 0x04	; 4
 bee:	ee 2e       	mov	r14, r30
 bf0:	09 c0       	rjmp	.+18     	; 0xc04 <__EEPROM_REGION_LENGTH__+0x404>
 bf2:	04 ff       	sbrs	r16, 4
 bf4:	0a c0       	rjmp	.+20     	; 0xc0a <__EEPROM_REGION_LENGTH__+0x40a>
 bf6:	f9 2f       	mov	r31, r25
 bf8:	f6 60       	ori	r31, 0x06	; 6
 bfa:	ef 2e       	mov	r14, r31
 bfc:	06 c0       	rjmp	.+12     	; 0xc0a <__EEPROM_REGION_LENGTH__+0x40a>
 bfe:	28 e0       	ldi	r18, 0x08	; 8
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	05 c0       	rjmp	.+10     	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 c04:	20 e1       	ldi	r18, 0x10	; 16
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 c0a:	20 e1       	ldi	r18, 0x10	; 16
 c0c:	32 e0       	ldi	r19, 0x02	; 2
 c0e:	c5 01       	movw	r24, r10
 c10:	e7 fe       	sbrs	r14, 7
 c12:	09 c0       	rjmp	.+18     	; 0xc26 <__EEPROM_REGION_LENGTH__+0x426>
 c14:	04 96       	adiw	r24, 0x04	; 4
 c16:	9f 87       	std	Y+15, r25	; 0x0f
 c18:	8e 87       	std	Y+14, r24	; 0x0e
 c1a:	f5 01       	movw	r30, r10
 c1c:	60 81       	ld	r22, Z
 c1e:	71 81       	ldd	r23, Z+1	; 0x01
 c20:	82 81       	ldd	r24, Z+2	; 0x02
 c22:	93 81       	ldd	r25, Z+3	; 0x03
 c24:	08 c0       	rjmp	.+16     	; 0xc36 <__EEPROM_REGION_LENGTH__+0x436>
 c26:	02 96       	adiw	r24, 0x02	; 2
 c28:	9f 87       	std	Y+15, r25	; 0x0f
 c2a:	8e 87       	std	Y+14, r24	; 0x0e
 c2c:	f5 01       	movw	r30, r10
 c2e:	60 81       	ld	r22, Z
 c30:	71 81       	ldd	r23, Z+1	; 0x01
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	ae 01       	movw	r20, r28
 c38:	4f 5f       	subi	r20, 0xFF	; 255
 c3a:	5f 4f       	sbci	r21, 0xFF	; 255
 c3c:	0e 94 0a 18 	call	0x3014	; 0x3014 <__ultoa_invert>
 c40:	a8 2e       	mov	r10, r24
 c42:	fc 85       	ldd	r31, Y+12	; 0x0c
 c44:	af 1a       	sub	r10, r31
 c46:	2e 2d       	mov	r18, r14
 c48:	2f 77       	andi	r18, 0x7F	; 127
 c4a:	e2 2e       	mov	r14, r18
 c4c:	e6 fe       	sbrs	r14, 6
 c4e:	0b c0       	rjmp	.+22     	; 0xc66 <__EEPROM_REGION_LENGTH__+0x466>
 c50:	0e 2d       	mov	r16, r14
 c52:	0e 7f       	andi	r16, 0xFE	; 254
 c54:	a1 16       	cp	r10, r17
 c56:	50 f4       	brcc	.+20     	; 0xc6c <__EEPROM_REGION_LENGTH__+0x46c>
 c58:	e4 fe       	sbrs	r14, 4
 c5a:	0a c0       	rjmp	.+20     	; 0xc70 <__EEPROM_REGION_LENGTH__+0x470>
 c5c:	e2 fc       	sbrc	r14, 2
 c5e:	08 c0       	rjmp	.+16     	; 0xc70 <__EEPROM_REGION_LENGTH__+0x470>
 c60:	0e 2d       	mov	r16, r14
 c62:	0e 7e       	andi	r16, 0xEE	; 238
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <__EEPROM_REGION_LENGTH__+0x470>
 c66:	ba 2c       	mov	r11, r10
 c68:	0e 2d       	mov	r16, r14
 c6a:	03 c0       	rjmp	.+6      	; 0xc72 <__EEPROM_REGION_LENGTH__+0x472>
 c6c:	ba 2c       	mov	r11, r10
 c6e:	01 c0       	rjmp	.+2      	; 0xc72 <__EEPROM_REGION_LENGTH__+0x472>
 c70:	b1 2e       	mov	r11, r17
 c72:	04 ff       	sbrs	r16, 4
 c74:	0d c0       	rjmp	.+26     	; 0xc90 <__EEPROM_REGION_LENGTH__+0x490>
 c76:	fe 01       	movw	r30, r28
 c78:	ea 0d       	add	r30, r10
 c7a:	f1 1d       	adc	r31, r1
 c7c:	80 81       	ld	r24, Z
 c7e:	80 33       	cpi	r24, 0x30	; 48
 c80:	11 f4       	brne	.+4      	; 0xc86 <__EEPROM_REGION_LENGTH__+0x486>
 c82:	09 7e       	andi	r16, 0xE9	; 233
 c84:	09 c0       	rjmp	.+18     	; 0xc98 <__EEPROM_REGION_LENGTH__+0x498>
 c86:	02 ff       	sbrs	r16, 2
 c88:	06 c0       	rjmp	.+12     	; 0xc96 <__EEPROM_REGION_LENGTH__+0x496>
 c8a:	b3 94       	inc	r11
 c8c:	b3 94       	inc	r11
 c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__EEPROM_REGION_LENGTH__+0x498>
 c90:	80 2f       	mov	r24, r16
 c92:	86 78       	andi	r24, 0x86	; 134
 c94:	09 f0       	breq	.+2      	; 0xc98 <__EEPROM_REGION_LENGTH__+0x498>
 c96:	b3 94       	inc	r11
 c98:	03 fd       	sbrc	r16, 3
 c9a:	11 c0       	rjmp	.+34     	; 0xcbe <__EEPROM_REGION_LENGTH__+0x4be>
 c9c:	00 ff       	sbrs	r16, 0
 c9e:	06 c0       	rjmp	.+12     	; 0xcac <__EEPROM_REGION_LENGTH__+0x4ac>
 ca0:	bf 14       	cp	r11, r15
 ca2:	88 f4       	brcc	.+34     	; 0xcc6 <__EEPROM_REGION_LENGTH__+0x4c6>
 ca4:	fa 0c       	add	r15, r10
 ca6:	1f 2d       	mov	r17, r15
 ca8:	1b 19       	sub	r17, r11
 caa:	0e c0       	rjmp	.+28     	; 0xcc8 <__EEPROM_REGION_LENGTH__+0x4c8>
 cac:	bf 14       	cp	r11, r15
 cae:	60 f4       	brcc	.+24     	; 0xcc8 <__EEPROM_REGION_LENGTH__+0x4c8>
 cb0:	b6 01       	movw	r22, r12
 cb2:	80 e2       	ldi	r24, 0x20	; 32
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 cba:	b3 94       	inc	r11
 cbc:	f7 cf       	rjmp	.-18     	; 0xcac <__EEPROM_REGION_LENGTH__+0x4ac>
 cbe:	bf 14       	cp	r11, r15
 cc0:	18 f4       	brcc	.+6      	; 0xcc8 <__EEPROM_REGION_LENGTH__+0x4c8>
 cc2:	fb 18       	sub	r15, r11
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <__EEPROM_REGION_LENGTH__+0x4ca>
 cc6:	1a 2d       	mov	r17, r10
 cc8:	f1 2c       	mov	r15, r1
 cca:	04 ff       	sbrs	r16, 4
 ccc:	10 c0       	rjmp	.+32     	; 0xcee <__EEPROM_REGION_LENGTH__+0x4ee>
 cce:	b6 01       	movw	r22, r12
 cd0:	80 e3       	ldi	r24, 0x30	; 48
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 cd8:	02 ff       	sbrs	r16, 2
 cda:	17 c0       	rjmp	.+46     	; 0xd0a <__EEPROM_REGION_LENGTH__+0x50a>
 cdc:	01 fd       	sbrc	r16, 1
 cde:	03 c0       	rjmp	.+6      	; 0xce6 <__EEPROM_REGION_LENGTH__+0x4e6>
 ce0:	88 e7       	ldi	r24, 0x78	; 120
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	02 c0       	rjmp	.+4      	; 0xcea <__EEPROM_REGION_LENGTH__+0x4ea>
 ce6:	88 e5       	ldi	r24, 0x58	; 88
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	b6 01       	movw	r22, r12
 cec:	0c c0       	rjmp	.+24     	; 0xd06 <__EEPROM_REGION_LENGTH__+0x506>
 cee:	80 2f       	mov	r24, r16
 cf0:	86 78       	andi	r24, 0x86	; 134
 cf2:	59 f0       	breq	.+22     	; 0xd0a <__EEPROM_REGION_LENGTH__+0x50a>
 cf4:	01 ff       	sbrs	r16, 1
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <__EEPROM_REGION_LENGTH__+0x4fc>
 cf8:	8b e2       	ldi	r24, 0x2B	; 43
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <__EEPROM_REGION_LENGTH__+0x4fe>
 cfc:	80 e2       	ldi	r24, 0x20	; 32
 cfe:	07 fd       	sbrc	r16, 7
 d00:	8d e2       	ldi	r24, 0x2D	; 45
 d02:	b6 01       	movw	r22, r12
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 d0a:	a1 16       	cp	r10, r17
 d0c:	38 f4       	brcc	.+14     	; 0xd1c <__EEPROM_REGION_LENGTH__+0x51c>
 d0e:	b6 01       	movw	r22, r12
 d10:	80 e3       	ldi	r24, 0x30	; 48
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 d18:	11 50       	subi	r17, 0x01	; 1
 d1a:	f7 cf       	rjmp	.-18     	; 0xd0a <__EEPROM_REGION_LENGTH__+0x50a>
 d1c:	aa 94       	dec	r10
 d1e:	e1 e0       	ldi	r30, 0x01	; 1
 d20:	f0 e0       	ldi	r31, 0x00	; 0
 d22:	ec 0f       	add	r30, r28
 d24:	fd 1f       	adc	r31, r29
 d26:	ea 0d       	add	r30, r10
 d28:	f1 1d       	adc	r31, r1
 d2a:	80 81       	ld	r24, Z
 d2c:	b6 01       	movw	r22, r12
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 d34:	a1 10       	cpse	r10, r1
 d36:	f2 cf       	rjmp	.-28     	; 0xd1c <__EEPROM_REGION_LENGTH__+0x51c>
 d38:	19 c0       	rjmp	.+50     	; 0xd6c <__EEPROM_REGION_LENGTH__+0x56c>
 d3a:	f4 e0       	ldi	r31, 0x04	; 4
 d3c:	ff 15       	cp	r31, r15
 d3e:	80 f5       	brcc	.+96     	; 0xda0 <__EEPROM_REGION_LENGTH__+0x5a0>
 d40:	84 e0       	ldi	r24, 0x04	; 4
 d42:	f8 1a       	sub	r15, r24
 d44:	73 fe       	sbrs	r7, 3
 d46:	23 c0       	rjmp	.+70     	; 0xd8e <__EEPROM_REGION_LENGTH__+0x58e>
 d48:	01 11       	cpse	r16, r1
 d4a:	2b c0       	rjmp	.+86     	; 0xda2 <__EEPROM_REGION_LENGTH__+0x5a2>
 d4c:	53 fe       	sbrs	r5, 3
 d4e:	2f c0       	rjmp	.+94     	; 0xdae <__EEPROM_REGION_LENGTH__+0x5ae>
 d50:	50 e9       	ldi	r21, 0x90	; 144
 d52:	85 2e       	mov	r8, r21
 d54:	56 e0       	ldi	r21, 0x06	; 6
 d56:	95 2e       	mov	r9, r21
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	a5 2e       	mov	r10, r21
 d5c:	07 2d       	mov	r16, r7
 d5e:	00 71       	andi	r16, 0x10	; 16
 d60:	f4 01       	movw	r30, r8
 d62:	84 91       	lpm	r24, Z
 d64:	a7 fc       	sbrc	r10, 7
 d66:	80 81       	ld	r24, Z
 d68:	81 11       	cpse	r24, r1
 d6a:	28 c0       	rjmp	.+80     	; 0xdbc <__EEPROM_REGION_LENGTH__+0x5bc>
 d6c:	ff 20       	and	r15, r15
 d6e:	09 f4       	brne	.+2      	; 0xd72 <__EEPROM_REGION_LENGTH__+0x572>
 d70:	d2 cc       	rjmp	.-1628   	; 0x716 <vfprintf+0x72>
 d72:	b6 01       	movw	r22, r12
 d74:	80 e2       	ldi	r24, 0x20	; 32
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 d7c:	fa 94       	dec	r15
 d7e:	f6 cf       	rjmp	.-20     	; 0xd6c <__EEPROM_REGION_LENGTH__+0x56c>
 d80:	f6 01       	movw	r30, r12
 d82:	87 81       	ldd	r24, Z+7	; 0x07
 d84:	90 85       	ldd	r25, Z+8	; 0x08
 d86:	2c c0       	rjmp	.+88     	; 0xde0 <__EEPROM_REGION_LENGTH__+0x5e0>
 d88:	8f ef       	ldi	r24, 0xFF	; 255
 d8a:	9f ef       	ldi	r25, 0xFF	; 255
 d8c:	29 c0       	rjmp	.+82     	; 0xde0 <__EEPROM_REGION_LENGTH__+0x5e0>
 d8e:	b6 01       	movw	r22, r12
 d90:	80 e2       	ldi	r24, 0x20	; 32
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 d98:	fa 94       	dec	r15
 d9a:	f1 10       	cpse	r15, r1
 d9c:	f8 cf       	rjmp	.-16     	; 0xd8e <__EEPROM_REGION_LENGTH__+0x58e>
 d9e:	d4 cf       	rjmp	.-88     	; 0xd48 <__EEPROM_REGION_LENGTH__+0x548>
 da0:	f1 2c       	mov	r15, r1
 da2:	b6 01       	movw	r22, r12
 da4:	80 2f       	mov	r24, r16
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 dac:	cf cf       	rjmp	.-98     	; 0xd4c <__EEPROM_REGION_LENGTH__+0x54c>
 dae:	4c e8       	ldi	r20, 0x8C	; 140
 db0:	84 2e       	mov	r8, r20
 db2:	46 e0       	ldi	r20, 0x06	; 6
 db4:	94 2e       	mov	r9, r20
 db6:	40 e0       	ldi	r20, 0x00	; 0
 db8:	a4 2e       	mov	r10, r20
 dba:	d0 cf       	rjmp	.-96     	; 0xd5c <__EEPROM_REGION_LENGTH__+0x55c>
 dbc:	01 11       	cpse	r16, r1
 dbe:	80 52       	subi	r24, 0x20	; 32
 dc0:	b6 01       	movw	r22, r12
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fputc>
 dc8:	ff ef       	ldi	r31, 0xFF	; 255
 dca:	8f 1a       	sub	r8, r31
 dcc:	9f 0a       	sbc	r9, r31
 dce:	af 0a       	sbc	r10, r31
 dd0:	c7 cf       	rjmp	.-114    	; 0xd60 <__EEPROM_REGION_LENGTH__+0x560>
 dd2:	23 e0       	ldi	r18, 0x03	; 3
 dd4:	2f 15       	cp	r18, r15
 dd6:	10 f4       	brcc	.+4      	; 0xddc <__EEPROM_REGION_LENGTH__+0x5dc>
 dd8:	83 e0       	ldi	r24, 0x03	; 3
 dda:	b3 cf       	rjmp	.-154    	; 0xd42 <__EEPROM_REGION_LENGTH__+0x542>
 ddc:	f1 2c       	mov	r15, r1
 dde:	b6 cf       	rjmp	.-148    	; 0xd4c <__EEPROM_REGION_LENGTH__+0x54c>
 de0:	64 96       	adiw	r28, 0x14	; 20
 de2:	e2 e1       	ldi	r30, 0x12	; 18
 de4:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__>

Disassembly of section .text.libgcc:

00005cce <__tablejump2__>:
    5cce:	ee 0f       	add	r30, r30
    5cd0:	ff 1f       	adc	r31, r31
    5cd2:	05 90       	lpm	r0, Z+
    5cd4:	f4 91       	lpm	r31, Z
    5cd6:	e0 2d       	mov	r30, r0
    5cd8:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000057ea <__umulhisi3>:
    57ea:	a2 9f       	mul	r26, r18
    57ec:	b0 01       	movw	r22, r0
    57ee:	b3 9f       	mul	r27, r19
    57f0:	c0 01       	movw	r24, r0
    57f2:	a3 9f       	mul	r26, r19
    57f4:	70 0d       	add	r23, r0
    57f6:	81 1d       	adc	r24, r1
    57f8:	11 24       	eor	r1, r1
    57fa:	91 1d       	adc	r25, r1
    57fc:	b2 9f       	mul	r27, r18
    57fe:	70 0d       	add	r23, r0
    5800:	81 1d       	adc	r24, r1
    5802:	11 24       	eor	r1, r1
    5804:	91 1d       	adc	r25, r1
    5806:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00004f12 <__prologue_saves__>:
    4f12:	2f 92       	push	r2
    4f14:	3f 92       	push	r3
    4f16:	4f 92       	push	r4
    4f18:	5f 92       	push	r5
    4f1a:	6f 92       	push	r6
    4f1c:	7f 92       	push	r7
    4f1e:	8f 92       	push	r8
    4f20:	9f 92       	push	r9
    4f22:	af 92       	push	r10
    4f24:	bf 92       	push	r11
    4f26:	cf 92       	push	r12
    4f28:	df 92       	push	r13
    4f2a:	ef 92       	push	r14
    4f2c:	ff 92       	push	r15
    4f2e:	0f 93       	push	r16
    4f30:	1f 93       	push	r17
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
    4f3a:	ca 1b       	sub	r28, r26
    4f3c:	db 0b       	sbc	r29, r27
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	f8 94       	cli
    4f42:	de bf       	out	0x3e, r29	; 62
    4f44:	0f be       	out	0x3f, r0	; 63
    4f46:	cd bf       	out	0x3d, r28	; 61
    4f48:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004fec <__epilogue_restores__>:
    4fec:	2a 88       	ldd	r2, Y+18	; 0x12
    4fee:	39 88       	ldd	r3, Y+17	; 0x11
    4ff0:	48 88       	ldd	r4, Y+16	; 0x10
    4ff2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ff4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ff6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ff8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ffa:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ffc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ffe:	b9 84       	ldd	r11, Y+9	; 0x09
    5000:	c8 84       	ldd	r12, Y+8	; 0x08
    5002:	df 80       	ldd	r13, Y+7	; 0x07
    5004:	ee 80       	ldd	r14, Y+6	; 0x06
    5006:	fd 80       	ldd	r15, Y+5	; 0x05
    5008:	0c 81       	ldd	r16, Y+4	; 0x04
    500a:	1b 81       	ldd	r17, Y+3	; 0x03
    500c:	aa 81       	ldd	r26, Y+2	; 0x02
    500e:	b9 81       	ldd	r27, Y+1	; 0x01
    5010:	ce 0f       	add	r28, r30
    5012:	d1 1d       	adc	r29, r1
    5014:	0f b6       	in	r0, 0x3f	; 63
    5016:	f8 94       	cli
    5018:	de bf       	out	0x3e, r29	; 62
    501a:	0f be       	out	0x3f, r0	; 63
    501c:	cd bf       	out	0x3d, r28	; 61
    501e:	ed 01       	movw	r28, r26
    5020:	08 95       	ret

Disassembly of section .text.libgcc:

0000591e <__movmemx_qi>:
    591e:	99 27       	eor	r25, r25

00005920 <__movmemx_hi>:
    5920:	77 fd       	sbrc	r23, 7
    5922:	05 c0       	rjmp	.+10     	; 0x592e <__movmemx_hi+0xe>
    5924:	05 90       	lpm	r0, Z+
    5926:	0d 92       	st	X+, r0
    5928:	01 97       	sbiw	r24, 0x01	; 1
    592a:	e1 f7       	brne	.-8      	; 0x5924 <__movmemx_hi+0x4>
    592c:	08 95       	ret
    592e:	01 90       	ld	r0, Z+
    5930:	0d 92       	st	X+, r0
    5932:	01 97       	sbiw	r24, 0x01	; 1
    5934:	e1 f7       	brne	.-8      	; 0x592e <__movmemx_hi+0xe>
    5936:	08 95       	ret

Disassembly of section .text.avrlibc:

00005d6e <atoi>:
    5d6e:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <atol>
    5d72:	cb 01       	movw	r24, r22
    5d74:	08 95       	ret

Disassembly of section .text.avrlibc:

00005c52 <atol>:
    5c52:	2a e0       	ldi	r18, 0x0A	; 10
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	40 e0       	ldi	r20, 0x00	; 0
    5c58:	50 e0       	ldi	r21, 0x00	; 0
    5c5a:	0e 94 f4 06 	call	0xde8	; 0xde8 <strtol>
    5c5e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000de8 <strtol>:
     de8:	2f 92       	push	r2
     dea:	3f 92       	push	r3
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 d0       	rcall	.+0      	; 0xe0a <strtol+0x22>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <strtol+0x24>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <strtol+0x26>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	3b 01       	movw	r6, r22
     e14:	88 2e       	mov	r8, r24
     e16:	5a 01       	movw	r10, r20
     e18:	19 01       	movw	r2, r18
     e1a:	41 15       	cp	r20, r1
     e1c:	51 05       	cpc	r21, r1
     e1e:	21 f0       	breq	.+8      	; 0xe28 <strtol+0x40>
     e20:	fa 01       	movw	r30, r20
     e22:	60 83       	st	Z, r22
     e24:	71 83       	std	Z+1, r23	; 0x01
     e26:	82 83       	std	Z+2, r24	; 0x02
     e28:	21 14       	cp	r2, r1
     e2a:	31 04       	cpc	r3, r1
     e2c:	29 f0       	breq	.+10     	; 0xe38 <strtol+0x50>
     e2e:	c1 01       	movw	r24, r2
     e30:	02 97       	sbiw	r24, 0x02	; 2
     e32:	83 97       	sbiw	r24, 0x23	; 35
     e34:	08 f0       	brcs	.+2      	; 0xe38 <strtol+0x50>
     e36:	1a c1       	rjmp	.+564    	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
     e38:	e8 2c       	mov	r14, r8
     e3a:	63 01       	movw	r12, r6
     e3c:	ff ef       	ldi	r31, 0xFF	; 255
     e3e:	cf 1a       	sub	r12, r31
     e40:	df 0a       	sbc	r13, r31
     e42:	ef 0a       	sbc	r14, r31
     e44:	f3 01       	movw	r30, r6
     e46:	14 91       	lpm	r17, Z
     e48:	87 fc       	sbrc	r8, 7
     e4a:	10 81       	ld	r17, Z
     e4c:	81 2f       	mov	r24, r17
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <isspace>
     e54:	4c 2d       	mov	r20, r12
     e56:	3d 2d       	mov	r19, r13
     e58:	2e 2d       	mov	r18, r14
     e5a:	89 2b       	or	r24, r25
     e5c:	19 f0       	breq	.+6      	; 0xe64 <strtol+0x7c>
     e5e:	36 01       	movw	r6, r12
     e60:	8e 2c       	mov	r8, r14
     e62:	ea cf       	rjmp	.-44     	; 0xe38 <strtol+0x50>
     e64:	1d 32       	cpi	r17, 0x2D	; 45
     e66:	69 f4       	brne	.+26     	; 0xe82 <strtol+0x9a>
     e68:	e8 2c       	mov	r14, r8
     e6a:	63 01       	movw	r12, r6
     e6c:	52 e0       	ldi	r21, 0x02	; 2
     e6e:	c5 0e       	add	r12, r21
     e70:	d1 1c       	adc	r13, r1
     e72:	e1 1c       	adc	r14, r1
     e74:	e4 2f       	mov	r30, r20
     e76:	f3 2f       	mov	r31, r19
     e78:	14 91       	lpm	r17, Z
     e7a:	27 fd       	sbrc	r18, 7
     e7c:	10 81       	ld	r17, Z
     e7e:	01 e0       	ldi	r16, 0x01	; 1
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <strtol+0xb6>
     e82:	1b 32       	cpi	r17, 0x2B	; 43
     e84:	59 f4       	brne	.+22     	; 0xe9c <strtol+0xb4>
     e86:	e8 2c       	mov	r14, r8
     e88:	63 01       	movw	r12, r6
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	c8 0e       	add	r12, r24
     e8e:	d1 1c       	adc	r13, r1
     e90:	e1 1c       	adc	r14, r1
     e92:	e4 2f       	mov	r30, r20
     e94:	f3 2f       	mov	r31, r19
     e96:	14 91       	lpm	r17, Z
     e98:	27 fd       	sbrc	r18, 7
     e9a:	10 81       	ld	r17, Z
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	21 14       	cp	r2, r1
     ea0:	31 04       	cpc	r3, r1
     ea2:	09 f1       	breq	.+66     	; 0xee6 <strtol+0xfe>
     ea4:	90 e1       	ldi	r25, 0x10	; 16
     ea6:	29 16       	cp	r2, r25
     ea8:	31 04       	cpc	r3, r1
     eaa:	29 f4       	brne	.+10     	; 0xeb6 <strtol+0xce>
     eac:	3f c0       	rjmp	.+126    	; 0xf2c <strtol+0x144>
     eae:	10 e3       	ldi	r17, 0x30	; 48
     eb0:	21 14       	cp	r2, r1
     eb2:	31 04       	cpc	r3, r1
     eb4:	21 f1       	breq	.+72     	; 0xefe <strtol+0x116>
     eb6:	f8 e0       	ldi	r31, 0x08	; 8
     eb8:	2f 16       	cp	r2, r31
     eba:	31 04       	cpc	r3, r1
     ebc:	01 f1       	breq	.+64     	; 0xefe <strtol+0x116>
     ebe:	54 f4       	brge	.+20     	; 0xed4 <strtol+0xec>
     ec0:	32 e0       	ldi	r19, 0x02	; 2
     ec2:	23 16       	cp	r2, r19
     ec4:	31 04       	cpc	r3, r1
     ec6:	21 f5       	brne	.+72     	; 0xf10 <strtol+0x128>
     ec8:	41 2c       	mov	r4, r1
     eca:	51 2c       	mov	r5, r1
     ecc:	61 2c       	mov	r6, r1
     ece:	50 e4       	ldi	r21, 0x40	; 64
     ed0:	75 2e       	mov	r7, r21
     ed2:	4b c0       	rjmp	.+150    	; 0xf6a <strtol+0x182>
     ed4:	4a e0       	ldi	r20, 0x0A	; 10
     ed6:	24 16       	cp	r2, r20
     ed8:	31 04       	cpc	r3, r1
     eda:	39 f0       	breq	.+14     	; 0xeea <strtol+0x102>
     edc:	50 e1       	ldi	r21, 0x10	; 16
     ede:	25 16       	cp	r2, r21
     ee0:	31 04       	cpc	r3, r1
     ee2:	b1 f4       	brne	.+44     	; 0xf10 <strtol+0x128>
     ee4:	3d c0       	rjmp	.+122    	; 0xf60 <strtol+0x178>
     ee6:	10 33       	cpi	r17, 0x30	; 48
     ee8:	19 f1       	breq	.+70     	; 0xf30 <strtol+0x148>
     eea:	3a e0       	ldi	r19, 0x0A	; 10
     eec:	23 2e       	mov	r2, r19
     eee:	31 2c       	mov	r3, r1
     ef0:	4c ec       	ldi	r20, 0xCC	; 204
     ef2:	44 2e       	mov	r4, r20
     ef4:	54 2c       	mov	r5, r4
     ef6:	64 2c       	mov	r6, r4
     ef8:	4c e0       	ldi	r20, 0x0C	; 12
     efa:	74 2e       	mov	r7, r20
     efc:	36 c0       	rjmp	.+108    	; 0xf6a <strtol+0x182>
     efe:	98 e0       	ldi	r25, 0x08	; 8
     f00:	29 2e       	mov	r2, r25
     f02:	31 2c       	mov	r3, r1
     f04:	41 2c       	mov	r4, r1
     f06:	51 2c       	mov	r5, r1
     f08:	61 2c       	mov	r6, r1
     f0a:	20 e1       	ldi	r18, 0x10	; 16
     f0c:	72 2e       	mov	r7, r18
     f0e:	2d c0       	rjmp	.+90     	; 0xf6a <strtol+0x182>
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e8       	ldi	r25, 0x80	; 128
     f18:	91 01       	movw	r18, r2
     f1a:	03 2c       	mov	r0, r3
     f1c:	00 0c       	add	r0, r0
     f1e:	44 0b       	sbc	r20, r20
     f20:	55 0b       	sbc	r21, r21
     f22:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodsi4>
     f26:	29 01       	movw	r4, r18
     f28:	3a 01       	movw	r6, r20
     f2a:	1f c0       	rjmp	.+62     	; 0xf6a <strtol+0x182>
     f2c:	10 33       	cpi	r17, 0x30	; 48
     f2e:	c1 f4       	brne	.+48     	; 0xf60 <strtol+0x178>
     f30:	f6 01       	movw	r30, r12
     f32:	84 91       	lpm	r24, Z
     f34:	e7 fc       	sbrc	r14, 7
     f36:	80 81       	ld	r24, Z
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	88 35       	cpi	r24, 0x58	; 88
     f3c:	09 f0       	breq	.+2      	; 0xf40 <strtol+0x158>
     f3e:	b7 cf       	rjmp	.-146    	; 0xeae <strtol+0xc6>
     f40:	ae 2d       	mov	r26, r14
     f42:	c6 01       	movw	r24, r12
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	a1 1d       	adc	r26, r1
     f48:	fc 01       	movw	r30, r24
     f4a:	14 91       	lpm	r17, Z
     f4c:	a7 fd       	sbrc	r26, 7
     f4e:	10 81       	ld	r17, Z
     f50:	e2 e0       	ldi	r30, 0x02	; 2
     f52:	ce 0e       	add	r12, r30
     f54:	d1 1c       	adc	r13, r1
     f56:	e1 1c       	adc	r14, r1
     f58:	02 60       	ori	r16, 0x02	; 2
     f5a:	60 e1       	ldi	r22, 0x10	; 16
     f5c:	26 2e       	mov	r2, r22
     f5e:	31 2c       	mov	r3, r1
     f60:	41 2c       	mov	r4, r1
     f62:	51 2c       	mov	r5, r1
     f64:	61 2c       	mov	r6, r1
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	78 2e       	mov	r7, r24
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	cb 01       	movw	r24, r22
     f72:	91 01       	movw	r18, r2
     f74:	03 2c       	mov	r0, r3
     f76:	00 0c       	add	r0, r0
     f78:	44 0b       	sbc	r20, r20
     f7a:	55 0b       	sbc	r21, r21
     f7c:	29 83       	std	Y+1, r18	; 0x01
     f7e:	3a 83       	std	Y+2, r19	; 0x02
     f80:	4b 83       	std	Y+3, r20	; 0x03
     f82:	5c 83       	std	Y+4, r21	; 0x04
     f84:	e0 ed       	ldi	r30, 0xD0	; 208
     f86:	e1 0f       	add	r30, r17
     f88:	ea 30       	cpi	r30, 0x0A	; 10
     f8a:	60 f0       	brcs	.+24     	; 0xfa4 <strtol+0x1bc>
     f8c:	2f eb       	ldi	r18, 0xBF	; 191
     f8e:	21 0f       	add	r18, r17
     f90:	2a 31       	cpi	r18, 0x1A	; 26
     f92:	10 f4       	brcc	.+4      	; 0xf98 <strtol+0x1b0>
     f94:	e9 ec       	ldi	r30, 0xC9	; 201
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <strtol+0x1ba>
     f98:	2f e9       	ldi	r18, 0x9F	; 159
     f9a:	21 0f       	add	r18, r17
     f9c:	2a 31       	cpi	r18, 0x1A	; 26
     f9e:	50 f5       	brcc	.+84     	; 0xff4 <strtol+0x20c>
     fa0:	e9 ea       	ldi	r30, 0xA9	; 169
     fa2:	e1 0f       	add	r30, r17
     fa4:	2e 2f       	mov	r18, r30
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	22 15       	cp	r18, r2
     faa:	33 05       	cpc	r19, r3
     fac:	1c f5       	brge	.+70     	; 0xff4 <strtol+0x20c>
     fae:	a7 fd       	sbrc	r26, 7
     fb0:	18 c0       	rjmp	.+48     	; 0xfe2 <strtol+0x1fa>
     fb2:	46 16       	cp	r4, r22
     fb4:	57 06       	cpc	r5, r23
     fb6:	68 06       	cpc	r6, r24
     fb8:	79 06       	cpc	r7, r25
     fba:	80 f0       	brcs	.+32     	; 0xfdc <strtol+0x1f4>
     fbc:	29 81       	ldd	r18, Y+1	; 0x01
     fbe:	3a 81       	ldd	r19, Y+2	; 0x02
     fc0:	4b 81       	ldd	r20, Y+3	; 0x03
     fc2:	5c 81       	ldd	r21, Y+4	; 0x04
     fc4:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__mulsi3>
     fc8:	6e 0f       	add	r22, r30
     fca:	71 1d       	adc	r23, r1
     fcc:	81 1d       	adc	r24, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	61 30       	cpi	r22, 0x01	; 1
     fd2:	71 05       	cpc	r23, r1
     fd4:	81 05       	cpc	r24, r1
     fd6:	30 e8       	ldi	r19, 0x80	; 128
     fd8:	93 07       	cpc	r25, r19
     fda:	10 f0       	brcs	.+4      	; 0xfe0 <strtol+0x1f8>
     fdc:	af ef       	ldi	r26, 0xFF	; 255
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <strtol+0x1fa>
     fe0:	a1 e0       	ldi	r26, 0x01	; 1
     fe2:	f6 01       	movw	r30, r12
     fe4:	14 91       	lpm	r17, Z
     fe6:	e7 fc       	sbrc	r14, 7
     fe8:	10 81       	ld	r17, Z
     fea:	4f ef       	ldi	r20, 0xFF	; 255
     fec:	c4 1a       	sub	r12, r20
     fee:	d4 0a       	sbc	r13, r20
     ff0:	e4 0a       	sbc	r14, r20
     ff2:	c8 cf       	rjmp	.-112    	; 0xf84 <strtol+0x19c>
     ff4:	20 2f       	mov	r18, r16
     ff6:	21 70       	andi	r18, 0x01	; 1
     ff8:	a1 14       	cp	r10, r1
     ffa:	b1 04       	cpc	r11, r1
     ffc:	b1 f0       	breq	.+44     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
     ffe:	aa 23       	and	r26, r26
    1000:	49 f0       	breq	.+18     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1002:	51 e0       	ldi	r21, 0x01	; 1
    1004:	c5 1a       	sub	r12, r21
    1006:	d1 08       	sbc	r13, r1
    1008:	e1 08       	sbc	r14, r1
    100a:	f5 01       	movw	r30, r10
    100c:	c0 82       	st	Z, r12
    100e:	d1 82       	std	Z+1, r13	; 0x01
    1010:	e2 82       	std	Z+2, r14	; 0x02
    1012:	0b c0       	rjmp	.+22     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    1014:	01 ff       	sbrs	r16, 1
    1016:	1d c0       	rjmp	.+58     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1018:	f2 e0       	ldi	r31, 0x02	; 2
    101a:	cf 1a       	sub	r12, r31
    101c:	d1 08       	sbc	r13, r1
    101e:	e1 08       	sbc	r14, r1
    1020:	f5 01       	movw	r30, r10
    1022:	c0 82       	st	Z, r12
    1024:	d1 82       	std	Z+1, r13	; 0x01
    1026:	e2 82       	std	Z+2, r14	; 0x02
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    102a:	a7 ff       	sbrs	r26, 7
    102c:	12 c0       	rjmp	.+36     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    102e:	22 23       	and	r18, r18
    1030:	29 f0       	breq	.+10     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e8       	ldi	r25, 0x80	; 128
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    103c:	6f ef       	ldi	r22, 0xFF	; 255
    103e:	7f ef       	ldi	r23, 0xFF	; 255
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	9f e7       	ldi	r25, 0x7F	; 127
    1044:	22 e2       	ldi	r18, 0x22	; 34
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	30 93 a3 08 	sts	0x08A3, r19	; 0x8008a3 <errno+0x1>
    104c:	20 93 a2 08 	sts	0x08A2, r18	; 0x8008a2 <errno>
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    1052:	22 23       	and	r18, r18
    1054:	81 f0       	breq	.+32     	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    1056:	90 95       	com	r25
    1058:	80 95       	com	r24
    105a:	70 95       	com	r23
    105c:	61 95       	neg	r22
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	46 2f       	mov	r20, r22
    1066:	37 2f       	mov	r19, r23
    1068:	28 2f       	mov	r18, r24
    106a:	12 c0       	rjmp	.+36     	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    1076:	97 ff       	sbrs	r25, 7
    1078:	f5 cf       	rjmp	.-22     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    107a:	82 e2       	ldi	r24, 0x22	; 34
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <errno+0x1>
    1082:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <errno>
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	7f ef       	ldi	r23, 0xFF	; 255
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	9f e7       	ldi	r25, 0x7F	; 127
    108e:	ea cf       	rjmp	.-44     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    1090:	64 2f       	mov	r22, r20
    1092:	73 2f       	mov	r23, r19
    1094:	82 2f       	mov	r24, r18
    1096:	26 96       	adiw	r28, 0x06	; 6
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	2f 90       	pop	r2
    10c2:	08 95       	ret

Disassembly of section .text.avrlibc:

00001966 <__ftoa_engine>:
    1966:	28 30       	cpi	r18, 0x08	; 8
    1968:	08 f0       	brcs	.+2      	; 0x196c <__ftoa_engine+0x6>
    196a:	27 e0       	ldi	r18, 0x07	; 7
    196c:	33 27       	eor	r19, r19
    196e:	da 01       	movw	r26, r20
    1970:	99 0f       	add	r25, r25
    1972:	31 1d       	adc	r19, r1
    1974:	87 fd       	sbrc	r24, 7
    1976:	91 60       	ori	r25, 0x01	; 1
    1978:	00 96       	adiw	r24, 0x00	; 0
    197a:	61 05       	cpc	r22, r1
    197c:	71 05       	cpc	r23, r1
    197e:	39 f4       	brne	.+14     	; 0x198e <__ftoa_engine+0x28>
    1980:	32 60       	ori	r19, 0x02	; 2
    1982:	2e 5f       	subi	r18, 0xFE	; 254
    1984:	3d 93       	st	X+, r19
    1986:	30 e3       	ldi	r19, 0x30	; 48
    1988:	2a 95       	dec	r18
    198a:	e1 f7       	brne	.-8      	; 0x1984 <__ftoa_engine+0x1e>
    198c:	08 95       	ret
    198e:	9f 3f       	cpi	r25, 0xFF	; 255
    1990:	30 f0       	brcs	.+12     	; 0x199e <__ftoa_engine+0x38>
    1992:	80 38       	cpi	r24, 0x80	; 128
    1994:	71 05       	cpc	r23, r1
    1996:	61 05       	cpc	r22, r1
    1998:	09 f0       	breq	.+2      	; 0x199c <__ftoa_engine+0x36>
    199a:	3c 5f       	subi	r19, 0xFC	; 252
    199c:	3c 5f       	subi	r19, 0xFC	; 252
    199e:	3d 93       	st	X+, r19
    19a0:	91 30       	cpi	r25, 0x01	; 1
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <__ftoa_engine+0x40>
    19a4:	80 68       	ori	r24, 0x80	; 128
    19a6:	91 1d       	adc	r25, r1
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	1f 93       	push	r17
    19ae:	0f 93       	push	r16
    19b0:	ff 92       	push	r15
    19b2:	ef 92       	push	r14
    19b4:	19 2f       	mov	r17, r25
    19b6:	98 7f       	andi	r25, 0xF8	; 248
    19b8:	96 95       	lsr	r25
    19ba:	e9 2f       	mov	r30, r25
    19bc:	96 95       	lsr	r25
    19be:	96 95       	lsr	r25
    19c0:	e9 0f       	add	r30, r25
    19c2:	ff 27       	eor	r31, r31
    19c4:	ee 58       	subi	r30, 0x8E	; 142
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	99 27       	eor	r25, r25
    19ca:	33 27       	eor	r19, r19
    19cc:	ee 24       	eor	r14, r14
    19ce:	ff 24       	eor	r15, r15
    19d0:	a7 01       	movw	r20, r14
    19d2:	e7 01       	movw	r28, r14
    19d4:	05 90       	lpm	r0, Z+
    19d6:	08 94       	sec
    19d8:	07 94       	ror	r0
    19da:	28 f4       	brcc	.+10     	; 0x19e6 <__ftoa_engine+0x80>
    19dc:	36 0f       	add	r19, r22
    19de:	e7 1e       	adc	r14, r23
    19e0:	f8 1e       	adc	r15, r24
    19e2:	49 1f       	adc	r20, r25
    19e4:	51 1d       	adc	r21, r1
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	88 1f       	adc	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	06 94       	lsr	r0
    19f0:	a1 f7       	brne	.-24     	; 0x19da <__ftoa_engine+0x74>
    19f2:	05 90       	lpm	r0, Z+
    19f4:	07 94       	ror	r0
    19f6:	28 f4       	brcc	.+10     	; 0x1a02 <__ftoa_engine+0x9c>
    19f8:	e7 0e       	add	r14, r23
    19fa:	f8 1e       	adc	r15, r24
    19fc:	49 1f       	adc	r20, r25
    19fe:	56 1f       	adc	r21, r22
    1a00:	c1 1d       	adc	r28, r1
    1a02:	77 0f       	add	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	66 1f       	adc	r22, r22
    1a0a:	06 94       	lsr	r0
    1a0c:	a1 f7       	brne	.-24     	; 0x19f6 <__ftoa_engine+0x90>
    1a0e:	05 90       	lpm	r0, Z+
    1a10:	07 94       	ror	r0
    1a12:	28 f4       	brcc	.+10     	; 0x1a1e <__ftoa_engine+0xb8>
    1a14:	f8 0e       	add	r15, r24
    1a16:	49 1f       	adc	r20, r25
    1a18:	56 1f       	adc	r21, r22
    1a1a:	c7 1f       	adc	r28, r23
    1a1c:	d1 1d       	adc	r29, r1
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	66 1f       	adc	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	06 94       	lsr	r0
    1a28:	a1 f7       	brne	.-24     	; 0x1a12 <__ftoa_engine+0xac>
    1a2a:	05 90       	lpm	r0, Z+
    1a2c:	07 94       	ror	r0
    1a2e:	20 f4       	brcc	.+8      	; 0x1a38 <__ftoa_engine+0xd2>
    1a30:	49 0f       	add	r20, r25
    1a32:	56 1f       	adc	r21, r22
    1a34:	c7 1f       	adc	r28, r23
    1a36:	d8 1f       	adc	r29, r24
    1a38:	99 0f       	add	r25, r25
    1a3a:	66 1f       	adc	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	88 1f       	adc	r24, r24
    1a40:	06 94       	lsr	r0
    1a42:	a9 f7       	brne	.-22     	; 0x1a2e <__ftoa_engine+0xc8>
    1a44:	84 91       	lpm	r24, Z
    1a46:	10 95       	com	r17
    1a48:	17 70       	andi	r17, 0x07	; 7
    1a4a:	41 f0       	breq	.+16     	; 0x1a5c <__ftoa_engine+0xf6>
    1a4c:	d6 95       	lsr	r29
    1a4e:	c7 95       	ror	r28
    1a50:	57 95       	ror	r21
    1a52:	47 95       	ror	r20
    1a54:	f7 94       	ror	r15
    1a56:	e7 94       	ror	r14
    1a58:	1a 95       	dec	r17
    1a5a:	c1 f7       	brne	.-16     	; 0x1a4c <__ftoa_engine+0xe6>
    1a5c:	e8 e1       	ldi	r30, 0x18	; 24
    1a5e:	f1 e0       	ldi	r31, 0x01	; 1
    1a60:	68 94       	set
    1a62:	15 90       	lpm	r1, Z+
    1a64:	15 91       	lpm	r17, Z+
    1a66:	35 91       	lpm	r19, Z+
    1a68:	65 91       	lpm	r22, Z+
    1a6a:	95 91       	lpm	r25, Z+
    1a6c:	05 90       	lpm	r0, Z+
    1a6e:	7f e2       	ldi	r23, 0x2F	; 47
    1a70:	73 95       	inc	r23
    1a72:	e1 18       	sub	r14, r1
    1a74:	f1 0a       	sbc	r15, r17
    1a76:	43 0b       	sbc	r20, r19
    1a78:	56 0b       	sbc	r21, r22
    1a7a:	c9 0b       	sbc	r28, r25
    1a7c:	d0 09       	sbc	r29, r0
    1a7e:	c0 f7       	brcc	.-16     	; 0x1a70 <__ftoa_engine+0x10a>
    1a80:	e1 0c       	add	r14, r1
    1a82:	f1 1e       	adc	r15, r17
    1a84:	43 1f       	adc	r20, r19
    1a86:	56 1f       	adc	r21, r22
    1a88:	c9 1f       	adc	r28, r25
    1a8a:	d0 1d       	adc	r29, r0
    1a8c:	7e f4       	brtc	.+30     	; 0x1aac <__ftoa_engine+0x146>
    1a8e:	70 33       	cpi	r23, 0x30	; 48
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <__ftoa_engine+0x130>
    1a92:	8a 95       	dec	r24
    1a94:	e6 cf       	rjmp	.-52     	; 0x1a62 <__ftoa_engine+0xfc>
    1a96:	e8 94       	clt
    1a98:	01 50       	subi	r16, 0x01	; 1
    1a9a:	30 f0       	brcs	.+12     	; 0x1aa8 <__ftoa_engine+0x142>
    1a9c:	08 0f       	add	r16, r24
    1a9e:	0a f4       	brpl	.+2      	; 0x1aa2 <__ftoa_engine+0x13c>
    1aa0:	00 27       	eor	r16, r16
    1aa2:	02 17       	cp	r16, r18
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <__ftoa_engine+0x142>
    1aa6:	20 2f       	mov	r18, r16
    1aa8:	23 95       	inc	r18
    1aaa:	02 2f       	mov	r16, r18
    1aac:	7a 33       	cpi	r23, 0x3A	; 58
    1aae:	28 f0       	brcs	.+10     	; 0x1aba <__ftoa_engine+0x154>
    1ab0:	79 e3       	ldi	r23, 0x39	; 57
    1ab2:	7d 93       	st	X+, r23
    1ab4:	2a 95       	dec	r18
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2 <__ftoa_engine+0x14c>
    1ab8:	10 c0       	rjmp	.+32     	; 0x1ada <__ftoa_engine+0x174>
    1aba:	7d 93       	st	X+, r23
    1abc:	2a 95       	dec	r18
    1abe:	89 f6       	brne	.-94     	; 0x1a62 <__ftoa_engine+0xfc>
    1ac0:	06 94       	lsr	r0
    1ac2:	97 95       	ror	r25
    1ac4:	67 95       	ror	r22
    1ac6:	37 95       	ror	r19
    1ac8:	17 95       	ror	r17
    1aca:	17 94       	ror	r1
    1acc:	e1 18       	sub	r14, r1
    1ace:	f1 0a       	sbc	r15, r17
    1ad0:	43 0b       	sbc	r20, r19
    1ad2:	56 0b       	sbc	r21, r22
    1ad4:	c9 0b       	sbc	r28, r25
    1ad6:	d0 09       	sbc	r29, r0
    1ad8:	98 f0       	brcs	.+38     	; 0x1b00 <__ftoa_engine+0x19a>
    1ada:	23 95       	inc	r18
    1adc:	7e 91       	ld	r23, -X
    1ade:	73 95       	inc	r23
    1ae0:	7a 33       	cpi	r23, 0x3A	; 58
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <__ftoa_engine+0x180>
    1ae4:	70 e3       	ldi	r23, 0x30	; 48
    1ae6:	7c 93       	st	X, r23
    1ae8:	20 13       	cpse	r18, r16
    1aea:	b8 f7       	brcc	.-18     	; 0x1ada <__ftoa_engine+0x174>
    1aec:	7e 91       	ld	r23, -X
    1aee:	70 61       	ori	r23, 0x10	; 16
    1af0:	7d 93       	st	X+, r23
    1af2:	30 f0       	brcs	.+12     	; 0x1b00 <__ftoa_engine+0x19a>
    1af4:	83 95       	inc	r24
    1af6:	71 e3       	ldi	r23, 0x31	; 49
    1af8:	7d 93       	st	X+, r23
    1afa:	70 e3       	ldi	r23, 0x30	; 48
    1afc:	2a 95       	dec	r18
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <__ftoa_engine+0x192>
    1b00:	11 24       	eor	r1, r1
    1b02:	ef 90       	pop	r14
    1b04:	ff 90       	pop	r15
    1b06:	0f 91       	pop	r16
    1b08:	1f 91       	pop	r17
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	99 27       	eor	r25, r25
    1b10:	87 fd       	sbrc	r24, 7
    1b12:	90 95       	com	r25
    1b14:	08 95       	ret

Disassembly of section .text.avrlibc:

00005af2 <isspace>:
    5af2:	91 11       	cpse	r25, r1
    5af4:	0c 94 e2 2e 	jmp	0x5dc4	; 0x5dc4 <__ctype_isfalse>
    5af8:	80 32       	cpi	r24, 0x20	; 32
    5afa:	19 f0       	breq	.+6      	; 0x5b02 <isspace+0x10>
    5afc:	89 50       	subi	r24, 0x09	; 9
    5afe:	85 50       	subi	r24, 0x05	; 5
    5b00:	c8 f7       	brcc	.-14     	; 0x5af4 <isspace+0x2>
    5b02:	08 95       	ret

Disassembly of section .text.avrlibc:

000051bc <memcpy>:
    51bc:	cf 92       	push	r12
    51be:	df 92       	push	r13
    51c0:	ef 92       	push	r14
    51c2:	dc 01       	movw	r26, r24
    51c4:	6a 01       	movw	r12, r20
    51c6:	e6 2e       	mov	r14, r22
    51c8:	28 0f       	add	r18, r24
    51ca:	39 1f       	adc	r19, r25
    51cc:	a2 17       	cp	r26, r18
    51ce:	b3 07       	cpc	r27, r19
    51d0:	51 f0       	breq	.+20     	; 0x51e6 <memcpy+0x2a>
    51d2:	f6 01       	movw	r30, r12
    51d4:	44 91       	lpm	r20, Z
    51d6:	e7 fc       	sbrc	r14, 7
    51d8:	40 81       	ld	r20, Z
    51da:	4d 93       	st	X+, r20
    51dc:	4f ef       	ldi	r20, 0xFF	; 255
    51de:	c4 1a       	sub	r12, r20
    51e0:	d4 0a       	sbc	r13, r20
    51e2:	e4 0a       	sbc	r14, r20
    51e4:	f3 cf       	rjmp	.-26     	; 0x51cc <memcpy+0x10>
    51e6:	ef 90       	pop	r14
    51e8:	df 90       	pop	r13
    51ea:	cf 90       	pop	r12
    51ec:	08 95       	ret

Disassembly of section .text.avrlibc:

000053c8 <strcat>:
    53c8:	9a 01       	movw	r18, r20
    53ca:	46 2f       	mov	r20, r22
    53cc:	dc 01       	movw	r26, r24
    53ce:	bd 01       	movw	r22, r26
    53d0:	6f 5f       	subi	r22, 0xFF	; 255
    53d2:	7f 4f       	sbci	r23, 0xFF	; 255
    53d4:	5c 91       	ld	r21, X
    53d6:	55 23       	and	r21, r21
    53d8:	11 f0       	breq	.+4      	; 0x53de <strcat+0x16>
    53da:	db 01       	movw	r26, r22
    53dc:	f8 cf       	rjmp	.-16     	; 0x53ce <strcat+0x6>
    53de:	f9 01       	movw	r30, r18
    53e0:	54 91       	lpm	r21, Z
    53e2:	47 fd       	sbrc	r20, 7
    53e4:	50 81       	ld	r21, Z
    53e6:	5d 93       	st	X+, r21
    53e8:	55 23       	and	r21, r21
    53ea:	21 f0       	breq	.+8      	; 0x53f4 <strcat+0x2c>
    53ec:	2f 5f       	subi	r18, 0xFF	; 255
    53ee:	3f 4f       	sbci	r19, 0xFF	; 255
    53f0:	4f 4f       	sbci	r20, 0xFF	; 255
    53f2:	f5 cf       	rjmp	.-22     	; 0x53de <strcat+0x16>
    53f4:	08 95       	ret

Disassembly of section .text.avrlibc:

00004bcc <strcmp>:
    4bcc:	cf 92       	push	r12
    4bce:	df 92       	push	r13
    4bd0:	ef 92       	push	r14
    4bd2:	6b 01       	movw	r12, r22
    4bd4:	e8 2e       	mov	r14, r24
    4bd6:	f6 01       	movw	r30, r12
    4bd8:	84 91       	lpm	r24, Z
    4bda:	e7 fc       	sbrc	r14, 7
    4bdc:	80 81       	ld	r24, Z
    4bde:	f9 01       	movw	r30, r18
    4be0:	54 91       	lpm	r21, Z
    4be2:	47 fd       	sbrc	r20, 7
    4be4:	50 81       	ld	r21, Z
    4be6:	85 13       	cpse	r24, r21
    4be8:	0b c0       	rjmp	.+22     	; 0x4c00 <strcmp+0x34>
    4bea:	88 23       	and	r24, r24
    4bec:	41 f0       	breq	.+16     	; 0x4bfe <strcmp+0x32>
    4bee:	8f ef       	ldi	r24, 0xFF	; 255
    4bf0:	c8 1a       	sub	r12, r24
    4bf2:	d8 0a       	sbc	r13, r24
    4bf4:	e8 0a       	sbc	r14, r24
    4bf6:	2f 5f       	subi	r18, 0xFF	; 255
    4bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfa:	4f 4f       	sbci	r20, 0xFF	; 255
    4bfc:	ec cf       	rjmp	.-40     	; 0x4bd6 <strcmp+0xa>
    4bfe:	58 2f       	mov	r21, r24
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	85 1b       	sub	r24, r21
    4c04:	91 09       	sbc	r25, r1
    4c06:	ef 90       	pop	r14
    4c08:	df 90       	pop	r13
    4c0a:	cf 90       	pop	r12
    4c0c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ed6 <strncmp>:
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	6b 01       	movw	r12, r22
    3ee2:	e8 2e       	mov	r14, r24
    3ee4:	01 15       	cp	r16, r1
    3ee6:	11 05       	cpc	r17, r1
    3ee8:	19 f1       	breq	.+70     	; 0x3f30 <strncmp+0x5a>
    3eea:	01 50       	subi	r16, 0x01	; 1
    3eec:	11 09       	sbc	r17, r1
    3eee:	f6 01       	movw	r30, r12
    3ef0:	84 91       	lpm	r24, Z
    3ef2:	e7 fc       	sbrc	r14, 7
    3ef4:	80 81       	ld	r24, Z
    3ef6:	88 23       	and	r24, r24
    3ef8:	99 f0       	breq	.+38     	; 0x3f20 <strncmp+0x4a>
    3efa:	f9 01       	movw	r30, r18
    3efc:	94 91       	lpm	r25, Z
    3efe:	47 fd       	sbrc	r20, 7
    3f00:	90 81       	ld	r25, Z
    3f02:	99 23       	and	r25, r25
    3f04:	69 f0       	breq	.+26     	; 0x3f20 <strncmp+0x4a>
    3f06:	01 15       	cp	r16, r1
    3f08:	11 05       	cpc	r17, r1
    3f0a:	51 f0       	breq	.+20     	; 0x3f20 <strncmp+0x4a>
    3f0c:	89 13       	cpse	r24, r25
    3f0e:	08 c0       	rjmp	.+16     	; 0x3f20 <strncmp+0x4a>
    3f10:	8f ef       	ldi	r24, 0xFF	; 255
    3f12:	c8 1a       	sub	r12, r24
    3f14:	d8 0a       	sbc	r13, r24
    3f16:	e8 0a       	sbc	r14, r24
    3f18:	2f 5f       	subi	r18, 0xFF	; 255
    3f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f1e:	e5 cf       	rjmp	.-54     	; 0x3eea <strncmp+0x14>
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	f9 01       	movw	r30, r18
    3f24:	24 91       	lpm	r18, Z
    3f26:	47 fd       	sbrc	r20, 7
    3f28:	20 81       	ld	r18, Z
    3f2a:	82 1b       	sub	r24, r18
    3f2c:	91 09       	sbc	r25, r1
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <strncmp+0x5e>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	ef 90       	pop	r14
    3f3a:	df 90       	pop	r13
    3f3c:	cf 90       	pop	r12
    3f3e:	08 95       	ret

Disassembly of section .text.avrlibc:

000053f6 <strlen>:
    53f6:	cf 92       	push	r12
    53f8:	df 92       	push	r13
    53fa:	ef 92       	push	r14
    53fc:	6b 01       	movw	r12, r22
    53fe:	e8 2e       	mov	r14, r24
    5400:	a8 2f       	mov	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	fc 01       	movw	r30, r24
    5406:	24 91       	lpm	r18, Z
    5408:	a7 fd       	sbrc	r26, 7
    540a:	20 81       	ld	r18, Z
    540c:	22 23       	and	r18, r18
    540e:	19 f0       	breq	.+6      	; 0x5416 <strlen+0x20>
    5410:	01 96       	adiw	r24, 0x01	; 1
    5412:	a1 1d       	adc	r26, r1
    5414:	f7 cf       	rjmp	.-18     	; 0x5404 <strlen+0xe>
    5416:	8c 19       	sub	r24, r12
    5418:	9d 09       	sbc	r25, r13
    541a:	ef 90       	pop	r14
    541c:	df 90       	pop	r13
    541e:	cf 90       	pop	r12
    5420:	08 95       	ret

Disassembly of section .text.avrlibc:

00005808 <strcpy>:
    5808:	9a 01       	movw	r18, r20
    580a:	46 2f       	mov	r20, r22
    580c:	dc 01       	movw	r26, r24
    580e:	f9 01       	movw	r30, r18
    5810:	54 91       	lpm	r21, Z
    5812:	47 fd       	sbrc	r20, 7
    5814:	50 81       	ld	r21, Z
    5816:	5d 93       	st	X+, r21
    5818:	55 23       	and	r21, r21
    581a:	21 f0       	breq	.+8      	; 0x5824 <strcpy+0x1c>
    581c:	2f 5f       	subi	r18, 0xFF	; 255
    581e:	3f 4f       	sbci	r19, 0xFF	; 255
    5820:	4f 4f       	sbci	r20, 0xFF	; 255
    5822:	f5 cf       	rjmp	.-22     	; 0x580e <strcpy+0x6>
    5824:	08 95       	ret

Disassembly of section .text.avrlibc:

00005022 <strnlen>:
    5022:	cf 92       	push	r12
    5024:	df 92       	push	r13
    5026:	ef 92       	push	r14
    5028:	6b 01       	movw	r12, r22
    502a:	e8 2e       	mov	r14, r24
    502c:	a8 2f       	mov	r26, r24
    502e:	cb 01       	movw	r24, r22
    5030:	41 15       	cp	r20, r1
    5032:	51 05       	cpc	r21, r1
    5034:	31 f4       	brne	.+12     	; 0x5042 <strnlen+0x20>
    5036:	8c 19       	sub	r24, r12
    5038:	9d 09       	sbc	r25, r13
    503a:	ef 90       	pop	r14
    503c:	df 90       	pop	r13
    503e:	cf 90       	pop	r12
    5040:	08 95       	ret
    5042:	fc 01       	movw	r30, r24
    5044:	24 91       	lpm	r18, Z
    5046:	a7 fd       	sbrc	r26, 7
    5048:	20 81       	ld	r18, Z
    504a:	22 23       	and	r18, r18
    504c:	a1 f3       	breq	.-24     	; 0x5036 <strnlen+0x14>
    504e:	01 96       	adiw	r24, 0x01	; 1
    5050:	a1 1d       	adc	r26, r1
    5052:	41 50       	subi	r20, 0x01	; 1
    5054:	51 09       	sbc	r21, r1
    5056:	ec cf       	rjmp	.-40     	; 0x5030 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00003c30 <fputc>:
    3c30:	0f 93       	push	r16
    3c32:	1f 93       	push	r17
    3c34:	cf 93       	push	r28
    3c36:	df 93       	push	r29
    3c38:	fb 01       	movw	r30, r22
    3c3a:	24 81       	ldd	r18, Z+4	; 0x04
    3c3c:	21 fd       	sbrc	r18, 1
    3c3e:	03 c0       	rjmp	.+6      	; 0x3c46 <fputc+0x16>
    3c40:	8f ef       	ldi	r24, 0xFF	; 255
    3c42:	9f ef       	ldi	r25, 0xFF	; 255
    3c44:	2c c0       	rjmp	.+88     	; 0x3c9e <fputc+0x6e>
    3c46:	22 ff       	sbrs	r18, 2
    3c48:	16 c0       	rjmp	.+44     	; 0x3c76 <fputc+0x46>
    3c4a:	47 81       	ldd	r20, Z+7	; 0x07
    3c4c:	50 85       	ldd	r21, Z+8	; 0x08
    3c4e:	25 81       	ldd	r18, Z+5	; 0x05
    3c50:	36 81       	ldd	r19, Z+6	; 0x06
    3c52:	42 17       	cp	r20, r18
    3c54:	53 07       	cpc	r21, r19
    3c56:	44 f4       	brge	.+16     	; 0x3c68 <fputc+0x38>
    3c58:	a0 81       	ld	r26, Z
    3c5a:	b1 81       	ldd	r27, Z+1	; 0x01
    3c5c:	9d 01       	movw	r18, r26
    3c5e:	2f 5f       	subi	r18, 0xFF	; 255
    3c60:	3f 4f       	sbci	r19, 0xFF	; 255
    3c62:	31 83       	std	Z+1, r19	; 0x01
    3c64:	20 83       	st	Z, r18
    3c66:	8c 93       	st	X, r24
    3c68:	27 81       	ldd	r18, Z+7	; 0x07
    3c6a:	30 85       	ldd	r19, Z+8	; 0x08
    3c6c:	2f 5f       	subi	r18, 0xFF	; 255
    3c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c70:	30 87       	std	Z+8, r19	; 0x08
    3c72:	27 83       	std	Z+7, r18	; 0x07
    3c74:	14 c0       	rjmp	.+40     	; 0x3c9e <fputc+0x6e>
    3c76:	8b 01       	movw	r16, r22
    3c78:	ec 01       	movw	r28, r24
    3c7a:	fb 01       	movw	r30, r22
    3c7c:	01 84       	ldd	r0, Z+9	; 0x09
    3c7e:	f2 85       	ldd	r31, Z+10	; 0x0a
    3c80:	e0 2d       	mov	r30, r0
    3c82:	09 95       	icall
    3c84:	89 2b       	or	r24, r25
    3c86:	e1 f6       	brne	.-72     	; 0x3c40 <fputc+0x10>
    3c88:	d8 01       	movw	r26, r16
    3c8a:	17 96       	adiw	r26, 0x07	; 7
    3c8c:	8d 91       	ld	r24, X+
    3c8e:	9c 91       	ld	r25, X
    3c90:	18 97       	sbiw	r26, 0x08	; 8
    3c92:	01 96       	adiw	r24, 0x01	; 1
    3c94:	18 96       	adiw	r26, 0x08	; 8
    3c96:	9c 93       	st	X, r25
    3c98:	8e 93       	st	-X, r24
    3c9a:	17 97       	sbiw	r26, 0x07	; 7
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	df 91       	pop	r29
    3ca0:	cf 91       	pop	r28
    3ca2:	1f 91       	pop	r17
    3ca4:	0f 91       	pop	r16
    3ca6:	08 95       	ret

Disassembly of section .text.avrlibc:

000049f2 <sprintf>:
    49f2:	af e0       	ldi	r26, 0x0F	; 15
    49f4:	b0 e0       	ldi	r27, 0x00	; 0
    49f6:	ef ef       	ldi	r30, 0xFF	; 255
    49f8:	f4 e2       	ldi	r31, 0x24	; 36
    49fa:	0c 94 97 27 	jmp	0x4f2e	; 0x4f2e <__prologue_saves__+0x1c>
    49fe:	0e 89       	ldd	r16, Y+22	; 0x16
    4a00:	1f 89       	ldd	r17, Y+23	; 0x17
    4a02:	86 e0       	ldi	r24, 0x06	; 6
    4a04:	8d 83       	std	Y+5, r24	; 0x05
    4a06:	1a 83       	std	Y+2, r17	; 0x02
    4a08:	09 83       	std	Y+1, r16	; 0x01
    4a0a:	8f ef       	ldi	r24, 0xFF	; 255
    4a0c:	9f e7       	ldi	r25, 0x7F	; 127
    4a0e:	9f 83       	std	Y+7, r25	; 0x07
    4a10:	8e 83       	std	Y+6, r24	; 0x06
    4a12:	9e 01       	movw	r18, r28
    4a14:	25 5e       	subi	r18, 0xE5	; 229
    4a16:	3f 4f       	sbci	r19, 0xFF	; 255
    4a18:	48 8d       	ldd	r20, Y+24	; 0x18
    4a1a:	59 8d       	ldd	r21, Y+25	; 0x19
    4a1c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4a1e:	ce 01       	movw	r24, r28
    4a20:	01 96       	adiw	r24, 0x01	; 1
    4a22:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vfprintf>
    4a26:	e8 85       	ldd	r30, Y+8	; 0x08
    4a28:	f9 85       	ldd	r31, Y+9	; 0x09
    4a2a:	e0 0f       	add	r30, r16
    4a2c:	f1 1f       	adc	r31, r17
    4a2e:	10 82       	st	Z, r1
    4a30:	2f 96       	adiw	r28, 0x0f	; 15
    4a32:	e4 e0       	ldi	r30, 0x04	; 4
    4a34:	0c 94 04 28 	jmp	0x5008	; 0x5008 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00003014 <__ultoa_invert>:
    3014:	fa 01       	movw	r30, r20
    3016:	aa 27       	eor	r26, r26
    3018:	28 30       	cpi	r18, 0x08	; 8
    301a:	51 f1       	breq	.+84     	; 0x3070 <__ultoa_invert+0x5c>
    301c:	20 31       	cpi	r18, 0x10	; 16
    301e:	81 f1       	breq	.+96     	; 0x3080 <__ultoa_invert+0x6c>
    3020:	e8 94       	clt
    3022:	6f 93       	push	r22
    3024:	6e 7f       	andi	r22, 0xFE	; 254
    3026:	6e 5f       	subi	r22, 0xFE	; 254
    3028:	7f 4f       	sbci	r23, 0xFF	; 255
    302a:	8f 4f       	sbci	r24, 0xFF	; 255
    302c:	9f 4f       	sbci	r25, 0xFF	; 255
    302e:	af 4f       	sbci	r26, 0xFF	; 255
    3030:	b1 e0       	ldi	r27, 0x01	; 1
    3032:	3e d0       	rcall	.+124    	; 0x30b0 <__ultoa_invert+0x9c>
    3034:	b4 e0       	ldi	r27, 0x04	; 4
    3036:	3c d0       	rcall	.+120    	; 0x30b0 <__ultoa_invert+0x9c>
    3038:	67 0f       	add	r22, r23
    303a:	78 1f       	adc	r23, r24
    303c:	89 1f       	adc	r24, r25
    303e:	9a 1f       	adc	r25, r26
    3040:	a1 1d       	adc	r26, r1
    3042:	68 0f       	add	r22, r24
    3044:	79 1f       	adc	r23, r25
    3046:	8a 1f       	adc	r24, r26
    3048:	91 1d       	adc	r25, r1
    304a:	a1 1d       	adc	r26, r1
    304c:	6a 0f       	add	r22, r26
    304e:	71 1d       	adc	r23, r1
    3050:	81 1d       	adc	r24, r1
    3052:	91 1d       	adc	r25, r1
    3054:	a1 1d       	adc	r26, r1
    3056:	20 d0       	rcall	.+64     	; 0x3098 <__ultoa_invert+0x84>
    3058:	09 f4       	brne	.+2      	; 0x305c <__ultoa_invert+0x48>
    305a:	68 94       	set
    305c:	3f 91       	pop	r19
    305e:	2a e0       	ldi	r18, 0x0A	; 10
    3060:	26 9f       	mul	r18, r22
    3062:	11 24       	eor	r1, r1
    3064:	30 19       	sub	r19, r0
    3066:	30 5d       	subi	r19, 0xD0	; 208
    3068:	31 93       	st	Z+, r19
    306a:	de f6       	brtc	.-74     	; 0x3022 <__ultoa_invert+0xe>
    306c:	cf 01       	movw	r24, r30
    306e:	08 95       	ret
    3070:	46 2f       	mov	r20, r22
    3072:	47 70       	andi	r20, 0x07	; 7
    3074:	40 5d       	subi	r20, 0xD0	; 208
    3076:	41 93       	st	Z+, r20
    3078:	b3 e0       	ldi	r27, 0x03	; 3
    307a:	0f d0       	rcall	.+30     	; 0x309a <__ultoa_invert+0x86>
    307c:	c9 f7       	brne	.-14     	; 0x3070 <__ultoa_invert+0x5c>
    307e:	f6 cf       	rjmp	.-20     	; 0x306c <__ultoa_invert+0x58>
    3080:	46 2f       	mov	r20, r22
    3082:	4f 70       	andi	r20, 0x0F	; 15
    3084:	40 5d       	subi	r20, 0xD0	; 208
    3086:	4a 33       	cpi	r20, 0x3A	; 58
    3088:	18 f0       	brcs	.+6      	; 0x3090 <__ultoa_invert+0x7c>
    308a:	49 5d       	subi	r20, 0xD9	; 217
    308c:	31 fd       	sbrc	r19, 1
    308e:	40 52       	subi	r20, 0x20	; 32
    3090:	41 93       	st	Z+, r20
    3092:	02 d0       	rcall	.+4      	; 0x3098 <__ultoa_invert+0x84>
    3094:	a9 f7       	brne	.-22     	; 0x3080 <__ultoa_invert+0x6c>
    3096:	ea cf       	rjmp	.-44     	; 0x306c <__ultoa_invert+0x58>
    3098:	b4 e0       	ldi	r27, 0x04	; 4
    309a:	a6 95       	lsr	r26
    309c:	97 95       	ror	r25
    309e:	87 95       	ror	r24
    30a0:	77 95       	ror	r23
    30a2:	67 95       	ror	r22
    30a4:	ba 95       	dec	r27
    30a6:	c9 f7       	brne	.-14     	; 0x309a <__ultoa_invert+0x86>
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	61 05       	cpc	r22, r1
    30ac:	71 05       	cpc	r23, r1
    30ae:	08 95       	ret
    30b0:	9b 01       	movw	r18, r22
    30b2:	ac 01       	movw	r20, r24
    30b4:	0a 2e       	mov	r0, r26
    30b6:	06 94       	lsr	r0
    30b8:	57 95       	ror	r21
    30ba:	47 95       	ror	r20
    30bc:	37 95       	ror	r19
    30be:	27 95       	ror	r18
    30c0:	ba 95       	dec	r27
    30c2:	c9 f7       	brne	.-14     	; 0x30b6 <__ultoa_invert+0xa2>
    30c4:	62 0f       	add	r22, r18
    30c6:	73 1f       	adc	r23, r19
    30c8:	84 1f       	adc	r24, r20
    30ca:	95 1f       	adc	r25, r21
    30cc:	a0 1d       	adc	r26, r0
    30ce:	08 95       	ret

Disassembly of section .text.avrlibc:

00005dc4 <__ctype_isfalse>:
    5dc4:	99 27       	eor	r25, r25
    5dc6:	88 27       	eor	r24, r24

00005dc8 <__ctype_istrue>:
    5dc8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005582 <eeprom_read_block>:
    5582:	ba 01       	movw	r22, r20
    5584:	a9 01       	movw	r20, r18
    5586:	dc 01       	movw	r26, r24
    5588:	cb 01       	movw	r24, r22

0000558a <eeprom_read_blraw>:
    558a:	fc 01       	movw	r30, r24
    558c:	f9 99       	sbic	0x1f, 1	; 31
    558e:	fe cf       	rjmp	.-4      	; 0x558c <eeprom_read_blraw+0x2>
    5590:	06 c0       	rjmp	.+12     	; 0x559e <eeprom_read_blraw+0x14>
    5592:	f2 bd       	out	0x22, r31	; 34
    5594:	e1 bd       	out	0x21, r30	; 33
    5596:	f8 9a       	sbi	0x1f, 0	; 31
    5598:	31 96       	adiw	r30, 0x01	; 1
    559a:	00 b4       	in	r0, 0x20	; 32
    559c:	0d 92       	st	X+, r0
    559e:	41 50       	subi	r20, 0x01	; 1
    55a0:	50 40       	sbci	r21, 0x00	; 0
    55a2:	b8 f7       	brcc	.-18     	; 0x5592 <eeprom_read_blraw+0x8>
    55a4:	08 95       	ret

Disassembly of section .text.avrlibc:

00005b04 <eeprom_read_byte>:
    5b04:	cb 01       	movw	r24, r22
    5b06:	f9 99       	sbic	0x1f, 1	; 31
    5b08:	fe cf       	rjmp	.-4      	; 0x5b06 <eeprom_read_byte+0x2>
    5b0a:	92 bd       	out	0x22, r25	; 34
    5b0c:	81 bd       	out	0x21, r24	; 33
    5b0e:	f8 9a       	sbi	0x1f, 0	; 31
    5b10:	99 27       	eor	r25, r25
    5b12:	80 b5       	in	r24, 0x20	; 32
    5b14:	08 95       	ret

Disassembly of section .text.avrlibc:

00005c60 <eeprom_read_dword>:
    5c60:	cb 01       	movw	r24, r22
    5c62:	a6 e1       	ldi	r26, 0x16	; 22
    5c64:	b0 e0       	ldi	r27, 0x00	; 0
    5c66:	44 e0       	ldi	r20, 0x04	; 4
    5c68:	50 e0       	ldi	r21, 0x00	; 0
    5c6a:	0c 94 c5 2a 	jmp	0x558a	; 0x558a <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00004ac0 <eeprom_update_block>:
    4ac0:	cf 92       	push	r12
    4ac2:	df 92       	push	r13
    4ac4:	ef 92       	push	r14
    4ac6:	21 50       	subi	r18, 0x01	; 1
    4ac8:	31 09       	sbc	r19, r1
    4aca:	c0 f0       	brcs	.+48     	; 0x4afc <eeprom_update_block+0x3c>
    4acc:	6b 01       	movw	r12, r22
    4ace:	e8 2e       	mov	r14, r24
    4ad0:	c2 0e       	add	r12, r18
    4ad2:	d3 1e       	adc	r13, r19
    4ad4:	e1 1c       	adc	r14, r1
    4ad6:	ca 01       	movw	r24, r20
    4ad8:	82 0f       	add	r24, r18
    4ada:	93 1f       	adc	r25, r19
    4adc:	42 2f       	mov	r20, r18
    4ade:	73 2f       	mov	r23, r19
    4ae0:	f6 01       	movw	r30, r12
    4ae2:	5e 2d       	mov	r21, r14
    4ae4:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <__xload_1>
    4ae8:	26 2f       	mov	r18, r22
    4aea:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <eeprom_update_r18>
    4aee:	31 e0       	ldi	r19, 0x01	; 1
    4af0:	c3 1a       	sub	r12, r19
    4af2:	d1 08       	sbc	r13, r1
    4af4:	e1 08       	sbc	r14, r1
    4af6:	41 50       	subi	r20, 0x01	; 1
    4af8:	70 40       	sbci	r23, 0x00	; 0
    4afa:	90 f7       	brcc	.-28     	; 0x4ae0 <eeprom_update_block+0x20>
    4afc:	ef 90       	pop	r14
    4afe:	df 90       	pop	r13
    4b00:	cf 90       	pop	r12
    4b02:	08 95       	ret

Disassembly of section .text.avrlibc:

000055a6 <eeprom_update_byte>:
    55a6:	26 2f       	mov	r18, r22

000055a8 <eeprom_update_r18>:
    55a8:	f9 99       	sbic	0x1f, 1	; 31
    55aa:	fe cf       	rjmp	.-4      	; 0x55a8 <eeprom_update_r18>
    55ac:	92 bd       	out	0x22, r25	; 34
    55ae:	81 bd       	out	0x21, r24	; 33
    55b0:	f8 9a       	sbi	0x1f, 0	; 31
    55b2:	01 97       	sbiw	r24, 0x01	; 1
    55b4:	00 b4       	in	r0, 0x20	; 32
    55b6:	02 16       	cp	r0, r18
    55b8:	39 f0       	breq	.+14     	; 0x55c8 <eeprom_update_r18+0x20>
    55ba:	1f ba       	out	0x1f, r1	; 31
    55bc:	20 bd       	out	0x20, r18	; 32
    55be:	0f b6       	in	r0, 0x3f	; 63
    55c0:	f8 94       	cli
    55c2:	fa 9a       	sbi	0x1f, 2	; 31
    55c4:	f9 9a       	sbi	0x1f, 1	; 31
    55c6:	0f be       	out	0x3f, r0	; 63
    55c8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005980 <eeprom_update_dword>:
    5980:	03 96       	adiw	r24, 0x03	; 3
    5982:	27 2f       	mov	r18, r23
    5984:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <eeprom_update_r18>
    5988:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <eeprom_update_byte>
    598c:	25 2f       	mov	r18, r21
    598e:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <eeprom_update_r18>
    5992:	24 2f       	mov	r18, r20
    5994:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <eeprom_update_r18>

Disassembly of section .text.libgcc.mul:

00005734 <__mulsi3>:
    5734:	db 01       	movw	r26, r22
    5736:	8f 93       	push	r24
    5738:	9f 93       	push	r25
    573a:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <__muluhisi3>
    573e:	bf 91       	pop	r27
    5740:	af 91       	pop	r26
    5742:	a2 9f       	mul	r26, r18
    5744:	80 0d       	add	r24, r0
    5746:	91 1d       	adc	r25, r1
    5748:	a3 9f       	mul	r26, r19
    574a:	90 0d       	add	r25, r0
    574c:	b2 9f       	mul	r27, r18
    574e:	90 0d       	add	r25, r0
    5750:	11 24       	eor	r1, r1
    5752:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004b04 <__udivmodsi4>:
    4b04:	a1 e2       	ldi	r26, 0x21	; 33
    4b06:	1a 2e       	mov	r1, r26
    4b08:	aa 1b       	sub	r26, r26
    4b0a:	bb 1b       	sub	r27, r27
    4b0c:	fd 01       	movw	r30, r26
    4b0e:	0d c0       	rjmp	.+26     	; 0x4b2a <__udivmodsi4_ep>

00004b10 <__udivmodsi4_loop>:
    4b10:	aa 1f       	adc	r26, r26
    4b12:	bb 1f       	adc	r27, r27
    4b14:	ee 1f       	adc	r30, r30
    4b16:	ff 1f       	adc	r31, r31
    4b18:	a2 17       	cp	r26, r18
    4b1a:	b3 07       	cpc	r27, r19
    4b1c:	e4 07       	cpc	r30, r20
    4b1e:	f5 07       	cpc	r31, r21
    4b20:	20 f0       	brcs	.+8      	; 0x4b2a <__udivmodsi4_ep>
    4b22:	a2 1b       	sub	r26, r18
    4b24:	b3 0b       	sbc	r27, r19
    4b26:	e4 0b       	sbc	r30, r20
    4b28:	f5 0b       	sbc	r31, r21

00004b2a <__udivmodsi4_ep>:
    4b2a:	66 1f       	adc	r22, r22
    4b2c:	77 1f       	adc	r23, r23
    4b2e:	88 1f       	adc	r24, r24
    4b30:	99 1f       	adc	r25, r25
    4b32:	1a 94       	dec	r1
    4b34:	69 f7       	brne	.-38     	; 0x4b10 <__udivmodsi4_loop>
    4b36:	60 95       	com	r22
    4b38:	70 95       	com	r23
    4b3a:	80 95       	com	r24
    4b3c:	90 95       	com	r25
    4b3e:	9b 01       	movw	r18, r22
    4b40:	ac 01       	movw	r20, r24
    4b42:	bd 01       	movw	r22, r26
    4b44:	cf 01       	movw	r24, r30
    4b46:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000059f0 <__muluhisi3>:
    59f0:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__umulhisi3>
    59f4:	a5 9f       	mul	r26, r21
    59f6:	90 0d       	add	r25, r0
    59f8:	b4 9f       	mul	r27, r20
    59fa:	90 0d       	add	r25, r0
    59fc:	a4 9f       	mul	r26, r20
    59fe:	80 0d       	add	r24, r0
    5a00:	91 1d       	adc	r25, r1
    5a02:	11 24       	eor	r1, r1
    5a04:	08 95       	ret

Disassembly of section .text.libgcc:

00005d0c <__xload_1>:
    5d0c:	57 fd       	sbrc	r21, 7
    5d0e:	60 81       	ld	r22, Z
    5d10:	57 ff       	sbrs	r21, 7
    5d12:	64 91       	lpm	r22, Z
    5d14:	08 95       	ret
