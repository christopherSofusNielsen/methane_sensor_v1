
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003ea8  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000612  00800100  00800100  00003ea8  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000840  00000000  00000000  00003f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c947  00000000  00000000  00004743  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002875  00000000  00000000  0001108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004887  00000000  00000000  000138ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000015ec  00000000  00000000  00018188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e42  00000000  00000000  00019774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004fdb  00000000  00000000  0001a5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000738  00000000  00000000  0001f591  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00003d16  00003d16  00003e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001fccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_adc_power_init 0000000e  00003b48  00003b48  00003c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_adc_power 00000014  00003a2c  00003a2c  00003b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_meth_power_init 0000000e  00003b56  00003b56  00003caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power 00000014  00003a40  00003a40  00003b94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_SCD30_power_init 0000000e  00003b64  00003b64  00003cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power 00000014  00003a54  00003a54  00003ba8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_BC_power_init 0000000e  00003b72  00003b72  00003cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power 00000014  00003a68  00003a68  00003bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_LED_power_init 0000000e  00003b80  00003b80  00003cd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power 00000014  00003a7c  00003a7c  00003bd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_toggle 00000008  00003c84  00003c84  00003dd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_enter_power_down 00000042  00002f86  00002f86  000030da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_3 00000014  00003a90  00003a90  00003be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.rn2483_reset_active 00000008  00003c8c  00003c8c  00003de0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_reset_deactive 00000008  00003c94  00003c94  00003de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.SCD30_HAL_init 0000000e  00003b8e  00003b8e  00003ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SCD30_HAL_data_ready 0000000a  00003c5c  00003c5c  00003db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.TC0_HAL_init 00000020  000037c4  000037c4  00003918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.TC0_HAL_start 00000006  00003cd4  00003cd4  00003e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_stop 00000004  00003d1a  00003d1a  00003e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_16 0000004e  000029cc  000029cc  00002b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss._cb      00000002  00800d9a  00800d9a  00003ea8  2**0
                  ALLOC
 36 .text.TC1_HAL_init 00000034  0000337a  0000337a  000034ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TC1_HAL_start 0000000c  00003bf0  00003bf0  00003d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TC1_HAL_stop 0000000c  00003bfc  00003bfc  00003d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_13 0000004e  00002a1a  00002a1a  00002b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .bss._cb      00000002  00800d9c  00800d9c  00003ea8  2**0
                  ALLOC
 41 .text.start_timer 00000008  00003c9c  00003c9c  00003df0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.stop_timer 00000006  00003cda  00003cda  00003e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TC2_HAL_init 00000020  000037e4  000037e4  00003938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TC2_HAL_subscribe 00000054  00002928  00002928  00002a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TC2_HAL_cancel 0000003a  000031c0  000031c0  00003314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__vector_9 00000098  00001f3e  00001f3e  00002092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .bss.cnt      00000001  00800db0  00800db0  00003ea8  2**0
                  ALLOC
 48 .bss.cbCounter 00000001  00800db1  00800db1  00003ea8  2**0
                  ALLOC
 49 .bss.callbacks 0000000a  00800d75  00800d75  00003ea8  2**0
                  ALLOC
 50 .text.start_and_write_data 0000004c  00002b04  00002b04  00002c58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.read_and_stop 0000005a  00002876  00002876  000029ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_API_write_data 00000006  00003ce0  00003ce0  00003e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_API_write_data_stop 00000010  00003b18  00003b18  00003c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_API_read_data_ack_end_nack_stop 00000024  000036d2  000036d2  00003826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_API_repeat_read_data_stop 00000022  0000371a  0000371a  0000386e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_HAL_init 00000012  00003af4  00003af4  00003c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_HAL_start 00000048  00002cc6  00002cc6  00002e1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_repeated_start 00000042  00002fc8  00002fc8  0000311c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_write_byte 00000020  00003804  00003804  00003958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_read_byte_ack 00000014  00003aa4  00003aa4  00003bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_read_byte_nack 00000014  00003ab8  00003ab8  00003c0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_stop 00000010  00003b28  00003b28  00003c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.copy_buffer 0000002e  000035d0  000035d0  00003724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart0_hal_init 0000003c  00003148  00003148  0000329c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart0_hal_send_message 00000034  000033ae  000033ae  00003502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_send_string 0000006a  0000255e  0000255e  000026b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_message_ready 0000000e  00003b9c  00003b9c  00003cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_clear_rx_buffer 0000000a  00003c66  00003c66  00003dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_read_message_as_str 00000028  00003682  00003682  000037d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_break 00000046  00002de6  00002de6  00002f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_22 0000004a  00002be8  00002be8  00002d3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_20 00000074  0000240a  0000240a  0000255e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .bss.rx_buffer_has_message 00000001  00800db2  00800db2  00003ea8  2**0
                  ALLOC
 74 .bss.rx_buffer_data_len 00000001  00800db3  00800db3  00003ea8  2**0
                  ALLOC
 75 .bss.tx_buffer_cursor 00000001  00800db4  00800db4  00003ea8  2**0
                  ALLOC
 76 .bss.tx_buffer_data_len 00000001  00800db5  00800db5  00003ea8  2**0
                  ALLOC
 77 .text.uart1_hal_init 0000003c  00003184  00003184  000032d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_30 0000004a  00002c32  00002c32  00002d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_28 00000070  0000247e  0000247e  000025d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .bss.rx_buffer_has_message 00000001  00800db6  00800db6  00003ea8  2**0
                  ALLOC
 81 .bss.rx_buffer_data_len 00000001  00800db7  00800db7  00003ea8  2**0
                  ALLOC
 82 .bss.rx_buffer 00000064  00800cee  00800cee  00003ea8  2**0
                  ALLOC
 83 .bss.tx_buffer_cursor 00000001  00800db8  00800db8  00003ea8  2**0
                  ALLOC
 84 .bss.tx_buffer_data_len 00000001  00800db9  00800db9  00003ea8  2**0
                  ALLOC
 85 .bss.tx_buffer 0000012c  00800bc2  00800bc2  00003ea8  2**0
                  ALLOC
 86 .text.main    00000018  000039b6  000039b6  00003b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.vect_ADC_heat_timeout 00000018  000039ce  000039ce  00003b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_init_sampling 00000066  0000269a  0000269a  000027ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.ADC_deinit_sampling 00000014  00003acc  00003acc  00003c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.ADC_is_sampling_done 0000001c  000038be  000038be  00003a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ADC_meth_sens_power_on 00000020  00003824  00003824  00003978  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ADC_meth_sens_ready 00000012  00003b06  00003b06  00003c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.calc_ppm_methane 00000096  00001fd6  00001fd6  0000212a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.ADC_get_value 0000005c  0000281a  0000281a  0000296e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.vect_ADC_do_sample 00000046  00002e2c  00002e2c  00002f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ADC_start_sampling 0000000c  00003c08  00003c08  00003d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .bss.cntPowerUpTime 00000001  00800dba  00800dba  00003ea8  2**0
                  ALLOC
 98 .bss._powerUpTime 00000001  00800dbb  00800dbb  00003ea8  2**0
                  ALLOC
 99 .bss.cntSamples 00000002  00800d9e  00800d9e  00003ea8  2**0
                  ALLOC
100 .bss._data    00000002  00800da0  00800da0  00003ea8  2**0
                  ALLOC
101 .bss._nSamples 00000002  00800da2  00800da2  00003ea8  2**0
                  ALLOC
102 .data.PPM_factor 00000004  00800d8a  00003d46  00003e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
103 .data.RRL     00000004  00800d8e  00003d4a  00003e9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
104 .data.Vc      00000004  00800d92  00003d4e  00003ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
105 .text.cb_blink 00000006  00003ce6  00003ce6  00003e3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.blink   0000004c  00002b50  00002b50  00002ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.err_code 00000038  000031fa  000031fa  0000334e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LED_start_try_join 0000000e  00003baa  00003baa  00003cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LED_stop_try_join 00000010  00003b38  00003b38  00003c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.LED_join_success 00000040  0000304c  0000304c  000031a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.LED_join_denied 00000008  00003ca4  00003ca4  00003df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.LED_join_conf_err 00000008  00003cac  00003cac  00003e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.LED_fatal_err 00000008  00003cb4  00003cb4  00003e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .bss.cbPointer 00000001  00800dbc  00800dbc  00003ea8  2**0
                  ALLOC
115 .progmemx.data 00000038  00000299  00000299  000003ed  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
116 .text.JN_join_network 00000296  00000782  00000782  000008d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.set_block_uplink 00000018  000039e6  000039e6  00003b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.block_uplink 0000001c  000038da  000038da  00003a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.LM_join_network 00000006  00003cec  00003cec  00003e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.LM_send_uplink 0000002e  000035fe  000035fe  00003752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.LM_put_to_sleep 00000006  00003cf2  00003cf2  00003e46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.LM_wake_up 00000006  00003cf8  00003cf8  00003e4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.LM_is_free 0000000a  00003c70  00003c70  00003dc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .bss.subPointer 00000001  00800dbd  00800dbd  00003ea8  2**0
                  ALLOC
125 .bss.busy     00000001  00800dbe  00800dbe  00003ea8  2**0
                  ALLOC
126 .bss.cnt      00000001  00800dbf  00800dbf  00003ea8  2**0
                  ALLOC
127 .progmemx.data 00000073  00000226  00000226  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
128 .text.tohex   00000084  0000221a  0000221a  0000236e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.attach_ending 0000001c  000038f6  000038f6  00003a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.cmd_with_ending 00000032  00003416  00003416  0000356a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.sys_sleep_cmd 0000005e  00002700  00002700  00002854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.mac_set_parameter 0000004e  00002a68  00002a68  00002bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.mac_set_deveui 00000048  00002d0e  00002d0e  00002e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.mac_set_appeui 00000048  00002d56  00002d56  00002eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.mac_set_appkey 00000048  00002d9e  00002d9e  00002ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.mac_set_ADR 00000030  00003510  00003510  00003664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.mac_tx_confirmed 000000ac  00001caa  00001caa  00001dfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.beginsWidth 0000004a  00002c7c  00002c7c  00002dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .progmemx.data 00000038  000002d1  000002d1  00000425  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
140 .text.decode_tx_response 00000068  00002632  00002632  00002786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.SU_send_uplink 000000fc  00001428  00001428  0000157c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .progmemx.data 00000003  00000333  00000333  00000487  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
143 .text.SC_put_to_sleep 0000004c  00002b9c  00002b9c  00002cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.SC_wake_up 00000032  00003448  00003448  0000359c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.LM_strbeginswith 00000044  00002efe  00002efe  00003052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.util_setPendingStates 0000000c  00003c14  00003c14  00003d68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.util_setMatchCase 0000000c  00003c20  00003c20  00003d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.util_matchMessage 0000005e  0000275e  0000275e  000028b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.util_transmit_msg 0000001c  00003912  00003912  00003a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.util_read_msg 00000006  00003cfe  00003cfe  00003e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .progmemx.data 00000020  00000309  00000309  0000045d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
152 .text.util_parse_err 00000058  000028d0  000028d0  00002a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.get_group_id 00000006  00003d04  00003d04  00003e58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.set_group_id 00000006  00003d0a  00003d0a  00003e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.MRPP_init_group 00000032  0000347a  0000347a  000035ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.MRPP_add_collection_data_INT16 00000070  000024ee  000024ee  00002642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.MRPP_is_body_package_ready 00000022  0000373c  0000373c  00003890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.MRPP_get_ready_body_package 00000096  0000206c  0000206c  000021c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.MRPP_set_body_sent 0000000c  00003c2c  00003c2c  00003d80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.MRPP_get_header_package 00000022  0000375e  0000375e  000038b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.MRPP_get_tail_package 00000022  00003780  00003780  000038d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.MRPP_all_body_package_sent 0000000a  00003c7a  00003c7a  00003dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss._groupId 00000001  00800dc0  00800dc0  00003ea8  2**0
                  ALLOC
164 .text.mrpp_data_add_int16 00000092  00002102  00002102  00002256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.mrpp_data_get 00000030  00003540  00003540  00003694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.add_data_types 000000d8  000017e2  000017e2  00001936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.update_bodies 00000162  00000e44  00000e44  00000f98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.mrpp_state_init 000001be  00000c86  00000c86  00000dda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.mrpp_state_get_header 000000a2  00001dfa  00001dfa  00001f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.mrpp_state_get_tail 000000a4  00001d56  00001d56  00001eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.mrpp_state_set_collection 00000086  00002194  00002194  000022e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.mrpp_state_is_body_ready 00000030  00003570  00003570  000036c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.mrpp_state_all_bodies_sent 0000002a  00003658  00003658  000037ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.mrpp_state_get_ready_body 0000011a  00001208  00001208  0000135c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mrpp_state_set_body_sent 00000020  00003844  00003844  00003998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mrpp_state_get_collection_address 00000036  000032a2  000032a2  000033f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.cb_cnt_time 00000030  000035a0  000035a0  000036f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.PUMP_start 00000024  000036f6  000036f6  0000384a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.PUMP_is_done 0000001c  0000392e  0000392e  00003a82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .bss.eventPointer 00000001  00800dc1  00800dc1  00003ea8  2**0
                  ALLOC
181 .bss.cnt      00000002  00800da4  00800da4  00003ea8  2**0
                  ALLOC
182 .bss._seconds 00000002  00800da6  00800da6  00003ea8  2**0
                  ALLOC
183 .text.RTC_set_clock_out 00000050  0000297c  0000297c  00002ad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.RTC_clear_wake_up_interrupt 00000034  000033e2  000033e2  00003536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.RTC_get_current_time 00000140  00000fa6  00000fa6  000010fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .rodata       00000005  00800d85  00003d41  00003e95  2**0
                  CONTENTS, ALLOC, LOAD, DATA
187 .text.RTC_set_wake_up_interrupt_minutes 000000c4  00001b2a  00001b2a  00001c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.RTC_datetime_to_ts 00000122  000010e6  000010e6  0000123a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000338  00000338  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
190 .text.bytes_2_uint 0000001a  00003982  00003982  00003ad6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.init_measurement 00000038  00003232  00003232  00003386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.validate_data 00000032  000034ac  000034ac  00003600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.read_value 000000a2  00001e9c  00001e9c  00001ff0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.vect_SCD_do_sample 00000046  00002e72  00002e72  00002fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.SCD30_init_sampling 0000004e  00002ab6  00002ab6  00002c0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.SCD30_deinit_sampling 00000014  00003ae0  00003ae0  00003c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.SCD30_start_sampling 0000000c  00003c38  00003c38  00003d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.SCD30_is_sampling_done 0000001c  0000394a  0000394a  00003a9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.cntSamples 00000002  00800da8  00800da8  00003ea8  2**0
                  ALLOC
200 .bss._data    00000002  00800daa  00800daa  00003ea8  2**0
                  ALLOC
201 .bss._nSamples 00000002  00800dac  00800dac  00003ea8  2**0
                  ALLOC
202 .progmemx.data.READ_DATA_CMD 00000002  00000336  00000336  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
203 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000329  00000329  0000047d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
204 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  0000032e  0000032e  00000482  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
205 .text.decode_stage_response 00000016  00003a16  00003a16  00003b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.decode_join_response 0000001c  00003966  00003966  00003aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.decode_header_tail_response 0000001e  00003864  00003864  000039b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .progmemx.data 000000d2  00000154  00000154  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
209 .text.join_lora 0000007a  0000229e  0000229e  000023f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.set_wakeup 00000008  00003cbc  00003cbc  00003e10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.send_header 0000003e  000030cc  000030cc  00003220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.stage_0 000000ce  0000198e  0000198e  00001ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.stage_1 000000f0  00001524  00001524  00001678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.stage_3 000000f0  00001614  00001614  00001768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.stage_2 00000106  00001322  00001322  00001476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.send_body 00000040  0000308c  0000308c  000031e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.decode_body_response 00000028  000036aa  000036aa  000037fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.send_tail 0000003e  0000310a  0000310a  0000325e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.send_msg 00000018  000039fe  000039fe  00003b52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.MAINPG_start 0000026e  00000a18  00000a18  00000b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .data.cols    00000023  00800d52  00003d1e  00003e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
222 .bss.dt       00000006  00800d7f  00800d7f  00003ea8  2**0
                  ALLOC
223 .bss.ts       00000004  00800d96  00800d96  00003ea8  2**0
                  ALLOC
224 .bss.meth_data 00000258  00800712  00800712  00003ea8  2**0
                  ALLOC
225 .bss.co2_data 00000258  0080096a  0080096a  00003ea8  2**0
                  ALLOC
226 .data.bodyIndex 00000002  00800dae  00003d52  00003ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
227 .bss.state_s3 00000001  00800dc2  00800dc2  00003ea8  2**0
                  ALLOC
228 .bss.state_s2 00000001  00800dc3  00800dc3  00003ea8  2**0
                  ALLOC
229 .bss.state_s1 00000001  00800dc4  00800dc4  00003ea8  2**0
                  ALLOC
230 .bss.state_s0 00000001  00800dc5  00800dc5  00003ea8  2**0
                  ALLOC
231 .text.calc_crc8 00000036  000032d8  000032d8  0000342c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.avrlibc.fplib 0000000e  00003bb8  00003bb8  00003d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.avrlibc.fplib 000000ce  00001a5c  00001a5c  00001bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.avrlibc.fplib 00000008  00003cc4  00003cc4  00003e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.avrlibc.fplib 000000de  00001704  00001704  00001858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.avrlibc.fplib 0000005e  000027bc  000027bc  00002910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.avrlibc.fplib 0000007a  00002318  00002318  0000246c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.avrlibc.fplib 0000000c  00003c44  00003c44  00003d98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.avrlibc.fplib 00000006  00003d10  00003d10  00003e64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.avrlibc.fplib 0000000e  00003bc6  00003bc6  00003d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.avrlibc.fplib 0000000e  00003bd4  00003bd4  00003d28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.avrlibc.fplib 00000022  000037a2  000037a2  000038f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.avrlibc.fplib 00000044  00002f42  00002f42  00003096  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.avrlibc.fplib 0000000e  00003be2  00003be2  00003d36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.avrlibc.fplib 00000008  00003ccc  00003ccc  00003e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.avrlibc.fplib 000000d4  000018ba  000018ba  00001a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc  0000000c  00003c50  00003c50  00003da4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc.mul 0000001e  00003882  00003882  000039d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.libgcc  0000001a  0000399c  0000399c  00003af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.avrlibc 00000032  000034de  000034de  00003632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.avrlibc 00000042  0000300a  0000300a  0000315e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.avrlibc 0000006a  000025c8  000025c8  0000271c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.avrlibc 0000002c  0000362c  0000362c  00003780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.avrlibc 0000001e  000038a0  000038a0  000039f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .text.avrlibc 00000046  00002eb8  00002eb8  0000300c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.avrlibc 00000448  0000033a  0000033a  0000048e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.avrlibc 00000036  0000330e  0000330e  00003462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .text.avrlibc 00000078  00002392  00002392  000024e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .text.avrlibc 000000bc  00001bee  00001bee  00001d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 .text.libgcc.prologue 00000038  0000326a  0000326a  000033be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.libgcc.prologue 00000036  00003344  00003344  00003498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 80 00 	jmp	0x100	; 0x100 <__ctors_end>
   4:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
   8:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
   c:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__vector_3>
  10:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  14:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  18:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  1c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  20:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  24:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_9>
  28:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  2c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  30:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  34:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__vector_13>
  38:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  3c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  40:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__vector_16>
  44:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  48:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  4c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  50:	0c 94 05 12 	jmp	0x240a	; 0x240a <__vector_20>
  54:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  58:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__vector_22>
  5c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  60:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  64:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  68:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  6c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  70:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_28>
  74:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__bad_interrupt>
  78:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__vector_30>
  7c:	df 03       	fmulsu	r21, r23
  7e:	e8 04       	cpc	r14, r8
  80:	fe 03       	fmulsu	r23, r22
  82:	1b 04       	cpc	r1, r11
  84:	3a 04       	cpc	r3, r10
  86:	59 04       	cpc	r5, r9
  88:	78 04       	cpc	r7, r8
  8a:	97 04       	cpc	r9, r7
  8c:	b4 04       	cpc	r11, r4
  8e:	d1 04       	cpc	r13, r1
  90:	e3 04       	cpc	r14, r3
  92:	f9 04       	cpc	r15, r9
  94:	fb 04       	cpc	r15, r11
  96:	30 0a       	sbc	r3, r16
  98:	63 0a       	sbc	r6, r19
  9a:	51 0a       	sbc	r5, r17
  9c:	81 0a       	sbc	r8, r17
  9e:	81 0a       	sbc	r8, r17
  a0:	70 0a       	sbc	r7, r16
  a2:	6e 0a       	sbc	r6, r30
  a4:	83 0a       	sbc	r8, r19
  a6:	6a 0a       	sbc	r6, r26
  a8:	6c 0a       	sbc	r6, r28
  aa:	2b 05       	cpc	r18, r11
  ac:	47 05       	cpc	r20, r7
  ae:	58 05       	cpc	r21, r8
  b0:	67 05       	cpc	r22, r7
  b2:	79 05       	cpc	r23, r9
  b4:	5c 05       	cpc	r21, r12
  b6:	82 05       	cpc	r24, r2
  b8:	99 05       	cpc	r25, r9
  ba:	8e 05       	cpc	r24, r14
  bc:	a4 05       	cpc	r26, r4
  be:	b0 05       	cpc	r27, r0
  c0:	bd 05       	cpc	r27, r13
  c2:	c5 05       	cpc	r28, r5
  c4:	cd 05       	cpc	r28, r13
  c6:	d5 05       	cpc	r29, r5
  c8:	dd 05       	cpc	r29, r13
  ca:	f9 05       	cpc	r31, r9
  cc:	00 06       	cpc	r0, r16
  ce:	0d 06       	cpc	r0, r29
  d0:	23 06       	cpc	r2, r19
  d2:	31 06       	cpc	r3, r17
  d4:	3a 06       	cpc	r3, r26

000000d6 <.dinit>:
  d6:	01 00       	.word	0x0001	; ????
  d8:	0d 52       	subi	r16, 0x2D	; 45
  da:	80 0d       	add	r24, r0
  dc:	52 0d       	add	r21, r2
  de:	75 00       	.word	0x0075	; ????
  e0:	3d 1e       	adc	r3, r29
  e2:	0d 75       	andi	r16, 0x5D	; 93
  e4:	0d 85       	ldd	r16, Y+13	; 0x0d
  e6:	80 0d       	add	r24, r0
  e8:	85 0d       	add	r24, r5
  ea:	96 00       	.word	0x0096	; ????
  ec:	3d 41       	sbci	r19, 0x1D	; 29
  ee:	0d 96       	adiw	r24, 0x0d	; 13
  f0:	0d ae       	std	Y+61, r0	; 0x3d
  f2:	80 0d       	add	r24, r0
  f4:	ae 0d       	add	r26, r14
  f6:	b0 00       	.word	0x00b0	; ????
  f8:	3d 52       	subi	r19, 0x2D	; 45
  fa:	0d b0       	in	r0, 0x0d	; 13
  fc:	0d c6       	rjmp	.+3098   	; 0xd18 <mrpp_state_init+0x92>
  fe:	80 00       	.word	0x0080	; ????

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	d0 e1       	ldi	r29, 0x10	; 16
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
 10c:	e6 ed       	ldi	r30, 0xD6	; 214
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	17 c0       	rjmp	.+46     	; 0x142 <__do_clear_bss+0x8>
 114:	b5 91       	lpm	r27, Z+
 116:	a5 91       	lpm	r26, Z+
 118:	35 91       	lpm	r19, Z+
 11a:	25 91       	lpm	r18, Z+
 11c:	05 91       	lpm	r16, Z+
 11e:	07 fd       	sbrc	r16, 7
 120:	0c c0       	rjmp	.+24     	; 0x13a <__do_clear_bss>
 122:	95 91       	lpm	r25, Z+
 124:	85 91       	lpm	r24, Z+
 126:	ef 01       	movw	r28, r30
 128:	f9 2f       	mov	r31, r25
 12a:	e8 2f       	mov	r30, r24
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a2 17       	cp	r26, r18
 132:	b3 07       	cpc	r27, r19
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0x20>
 136:	fe 01       	movw	r30, r28
 138:	04 c0       	rjmp	.+8      	; 0x142 <__do_clear_bss+0x8>

0000013a <__do_clear_bss>:
 13a:	1d 92       	st	X+, r1
 13c:	a2 17       	cp	r26, r18
 13e:	b3 07       	cpc	r27, r19
 140:	e1 f7       	brne	.-8      	; 0x13a <__do_clear_bss>
 142:	ef 3f       	cpi	r30, 0xFF	; 255
 144:	f4 07       	cpc	r31, r20
 146:	31 f7       	brne	.-52     	; 0x114 <__do_copy_data+0x8>
 148:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <main>
 14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>

Disassembly of section .text:

00003d16 <__bad_interrupt>:
    3d16:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003b48 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3b48:	81 b1       	in	r24, 0x01	; 1
    3b4a:	88 60       	ori	r24, 0x08	; 8
    3b4c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3b4e:	82 b1       	in	r24, 0x02	; 2
    3b50:	87 7f       	andi	r24, 0xF7	; 247
    3b52:	82 b9       	out	0x02, r24	; 2
    3b54:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003a2c <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    3a2c:	88 23       	and	r24, r24
    3a2e:	21 f0       	breq	.+8      	; 0x3a38 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    3a30:	82 b1       	in	r24, 0x02	; 2
    3a32:	88 60       	ori	r24, 0x08	; 8
    3a34:	82 b9       	out	0x02, r24	; 2
    3a36:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    3a38:	82 b1       	in	r24, 0x02	; 2
    3a3a:	87 7f       	andi	r24, 0xF7	; 247
    3a3c:	82 b9       	out	0x02, r24	; 2
    3a3e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003b56 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3b56:	81 b1       	in	r24, 0x01	; 1
    3b58:	80 62       	ori	r24, 0x20	; 32
    3b5a:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3b5c:	82 b1       	in	r24, 0x02	; 2
    3b5e:	8f 7d       	andi	r24, 0xDF	; 223
    3b60:	82 b9       	out	0x02, r24	; 2
    3b62:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003a40 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    3a40:	88 23       	and	r24, r24
    3a42:	21 f0       	breq	.+8      	; 0x3a4c <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    3a44:	82 b1       	in	r24, 0x02	; 2
    3a46:	80 62       	ori	r24, 0x20	; 32
    3a48:	82 b9       	out	0x02, r24	; 2
    3a4a:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    3a4c:	82 b1       	in	r24, 0x02	; 2
    3a4e:	8f 7d       	andi	r24, 0xDF	; 223
    3a50:	82 b9       	out	0x02, r24	; 2
    3a52:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003b64 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3b64:	81 b1       	in	r24, 0x01	; 1
    3b66:	80 61       	ori	r24, 0x10	; 16
    3b68:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3b6a:	82 b1       	in	r24, 0x02	; 2
    3b6c:	8f 7e       	andi	r24, 0xEF	; 239
    3b6e:	82 b9       	out	0x02, r24	; 2
    3b70:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003a54 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    3a54:	88 23       	and	r24, r24
    3a56:	21 f0       	breq	.+8      	; 0x3a60 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    3a58:	82 b1       	in	r24, 0x02	; 2
    3a5a:	80 61       	ori	r24, 0x10	; 16
    3a5c:	82 b9       	out	0x02, r24	; 2
    3a5e:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    3a60:	82 b1       	in	r24, 0x02	; 2
    3a62:	8f 7e       	andi	r24, 0xEF	; 239
    3a64:	82 b9       	out	0x02, r24	; 2
    3a66:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00003b72 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    3b72:	8a b1       	in	r24, 0x0a	; 10
    3b74:	80 61       	ori	r24, 0x10	; 16
    3b76:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    3b78:	8b b1       	in	r24, 0x0b	; 11
    3b7a:	8f 7e       	andi	r24, 0xEF	; 239
    3b7c:	8b b9       	out	0x0b, r24	; 11
    3b7e:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00003a68 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    3a68:	88 23       	and	r24, r24
    3a6a:	21 f0       	breq	.+8      	; 0x3a74 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    3a6c:	8b b1       	in	r24, 0x0b	; 11
    3a6e:	80 61       	ori	r24, 0x10	; 16
    3a70:	8b b9       	out	0x0b, r24	; 11
    3a72:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    3a74:	8b b1       	in	r24, 0x0b	; 11
    3a76:	8f 7e       	andi	r24, 0xEF	; 239
    3a78:	8b b9       	out	0x0b, r24	; 11
    3a7a:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00003b80 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    3b80:	81 b1       	in	r24, 0x01	; 1
    3b82:	80 68       	ori	r24, 0x80	; 128
    3b84:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    3b86:	82 b1       	in	r24, 0x02	; 2
    3b88:	8f 77       	andi	r24, 0x7F	; 127
    3b8a:	82 b9       	out	0x02, r24	; 2
    3b8c:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00003a7c <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    3a7c:	88 23       	and	r24, r24
    3a7e:	21 f0       	breq	.+8      	; 0x3a88 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    3a80:	82 b1       	in	r24, 0x02	; 2
    3a82:	80 68       	ori	r24, 0x80	; 128
    3a84:	82 b9       	out	0x02, r24	; 2
    3a86:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    3a88:	82 b1       	in	r24, 0x02	; 2
    3a8a:	8f 77       	andi	r24, 0x7F	; 127
    3a8c:	82 b9       	out	0x02, r24	; 2
    3a8e:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00003c84 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    3c84:	82 b1       	in	r24, 0x02	; 2
    3c86:	80 58       	subi	r24, 0x80	; 128
    3c88:	82 b9       	out	0x02, r24	; 2
    3c8a:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00002f86 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    2f86:	84 b1       	in	r24, 0x04	; 4
    2f88:	8b 7f       	andi	r24, 0xFB	; 251
    2f8a:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    2f8c:	85 b1       	in	r24, 0x05	; 5
    2f8e:	84 60       	ori	r24, 0x04	; 4
    2f90:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    2f92:	e9 e6       	ldi	r30, 0x69	; 105
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8f 7e       	andi	r24, 0xEF	; 239
    2f9a:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    2f9c:	80 81       	ld	r24, Z
    2f9e:	80 62       	ori	r24, 0x20	; 32
    2fa0:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    2fa2:	8d b3       	in	r24, 0x1d	; 29
    2fa4:	84 60       	ori	r24, 0x04	; 4
    2fa6:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2fa8:	83 b7       	in	r24, 0x33	; 51
    2faa:	81 7f       	andi	r24, 0xF1	; 241
    2fac:	84 60       	ori	r24, 0x04	; 4
    2fae:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2fb0:	83 b7       	in	r24, 0x33	; 51
    2fb2:	81 60       	ori	r24, 0x01	; 1
    2fb4:	83 bf       	out	0x33, r24	; 51
	sei();
    2fb6:	78 94       	sei
	sleep_cpu();
    2fb8:	88 95       	sleep
	sleep_disable();
    2fba:	83 b7       	in	r24, 0x33	; 51
    2fbc:	8e 7f       	andi	r24, 0xFE	; 254
    2fbe:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    2fc0:	8d b3       	in	r24, 0x1d	; 29
    2fc2:	8b 7f       	andi	r24, 0xFB	; 251
    2fc4:	8d bb       	out	0x1d, r24	; 29
    2fc6:	08 95       	ret

Disassembly of section .text.__vector_3:

00003a90 <__vector_3>:
}

ISR(INT2_vect){
    3a90:	1f 92       	push	r1
    3a92:	0f 92       	push	r0
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	0f 92       	push	r0
    3a98:	11 24       	eor	r1, r1
	
}
    3a9a:	0f 90       	pop	r0
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	0f 90       	pop	r0
    3aa0:	1f 90       	pop	r1
    3aa2:	18 95       	reti

Disassembly of section .text.rn2483_reset_active:

00003c8c <rn2483_reset_active>:
void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3c8c:	85 b1       	in	r24, 0x05	; 5
    3c8e:	8f 7e       	andi	r24, 0xEF	; 239
    3c90:	85 b9       	out	0x05, r24	; 5
    3c92:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00003c94 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    3c94:	85 b1       	in	r24, 0x05	; 5
    3c96:	80 61       	ori	r24, 0x10	; 16
    3c98:	85 b9       	out	0x05, r24	; 5
    3c9a:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003b8e <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3b8e:	87 b1       	in	r24, 0x07	; 7
    3b90:	8f 7b       	andi	r24, 0xBF	; 191
    3b92:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3b94:	88 b1       	in	r24, 0x08	; 8
    3b96:	8f 7b       	andi	r24, 0xBF	; 191
    3b98:	88 b9       	out	0x08, r24	; 8
    3b9a:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00003c5c <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    3c5c:	86 b1       	in	r24, 0x06	; 6
    3c5e:	86 fb       	bst	r24, 6
    3c60:	88 27       	eor	r24, r24
    3c62:	80 f9       	bld	r24, 0
    3c64:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

000037c4 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    37c4:	92 e0       	ldi	r25, 0x02	; 2
    37c6:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    37c8:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    37ca:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    37cc:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    37ce:	ee e6       	ldi	r30, 0x6E	; 110
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	82 60       	ori	r24, 0x02	; 2
    37d6:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    37d8:	78 94       	sei
	
	//Set callback
	_cb=cb;
    37da:	70 93 9b 0d 	sts	0x0D9B, r23	; 0x800d9b <_cb+0x1>
    37de:	60 93 9a 0d 	sts	0x0D9A, r22	; 0x800d9a <_cb>
    37e2:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00003cd4 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    3cd4:	86 e0       	ldi	r24, 0x06	; 6
    3cd6:	85 bd       	out	0x25, r24	; 37
    3cd8:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00003d1a <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    3d1a:	15 bc       	out	0x25, r1	; 37
    3d1c:	08 95       	ret

Disassembly of section .text.__vector_16:

000029cc <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    29cc:	1f 92       	push	r1
    29ce:	0f 92       	push	r0
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	0f 92       	push	r0
    29d4:	11 24       	eor	r1, r1
    29d6:	2f 93       	push	r18
    29d8:	3f 93       	push	r19
    29da:	4f 93       	push	r20
    29dc:	5f 93       	push	r21
    29de:	6f 93       	push	r22
    29e0:	7f 93       	push	r23
    29e2:	8f 93       	push	r24
    29e4:	9f 93       	push	r25
    29e6:	af 93       	push	r26
    29e8:	bf 93       	push	r27
    29ea:	ef 93       	push	r30
    29ec:	ff 93       	push	r31
	_cb();
    29ee:	e0 91 9a 0d 	lds	r30, 0x0D9A	; 0x800d9a <_cb>
    29f2:	f0 91 9b 0d 	lds	r31, 0x0D9B	; 0x800d9b <_cb+0x1>
    29f6:	09 95       	icall
}
    29f8:	ff 91       	pop	r31
    29fa:	ef 91       	pop	r30
    29fc:	bf 91       	pop	r27
    29fe:	af 91       	pop	r26
    2a00:	9f 91       	pop	r25
    2a02:	8f 91       	pop	r24
    2a04:	7f 91       	pop	r23
    2a06:	6f 91       	pop	r22
    2a08:	5f 91       	pop	r21
    2a0a:	4f 91       	pop	r20
    2a0c:	3f 91       	pop	r19
    2a0e:	2f 91       	pop	r18
    2a10:	0f 90       	pop	r0
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	0f 90       	pop	r0
    2a16:	1f 90       	pop	r1
    2a18:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

0000337a <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    337a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    337e:	28 e0       	ldi	r18, 0x08	; 8
    3380:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    3384:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    3388:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    338c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3390:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3394:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    3398:	ef e6       	ldi	r30, 0x6F	; 111
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	82 60       	ori	r24, 0x02	; 2
    33a0:	80 83       	st	Z, r24
	sei();
    33a2:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    33a4:	70 93 9d 0d 	sts	0x0D9D, r23	; 0x800d9d <_cb+0x1>
    33a8:	60 93 9c 0d 	sts	0x0D9C, r22	; 0x800d9c <_cb>
    33ac:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00003bf0 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    3bf0:	e1 e8       	ldi	r30, 0x81	; 129
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	86 60       	ori	r24, 0x06	; 6
    3bf8:	80 83       	st	Z, r24
    3bfa:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00003bfc <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    3bfc:	e1 e8       	ldi	r30, 0x81	; 129
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	88 7f       	andi	r24, 0xF8	; 248
    3c04:	80 83       	st	Z, r24
    3c06:	08 95       	ret

Disassembly of section .text.__vector_13:

00002a1a <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    2a1a:	1f 92       	push	r1
    2a1c:	0f 92       	push	r0
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	0f 92       	push	r0
    2a22:	11 24       	eor	r1, r1
    2a24:	2f 93       	push	r18
    2a26:	3f 93       	push	r19
    2a28:	4f 93       	push	r20
    2a2a:	5f 93       	push	r21
    2a2c:	6f 93       	push	r22
    2a2e:	7f 93       	push	r23
    2a30:	8f 93       	push	r24
    2a32:	9f 93       	push	r25
    2a34:	af 93       	push	r26
    2a36:	bf 93       	push	r27
    2a38:	ef 93       	push	r30
    2a3a:	ff 93       	push	r31
	_cb();
    2a3c:	e0 91 9c 0d 	lds	r30, 0x0D9C	; 0x800d9c <_cb>
    2a40:	f0 91 9d 0d 	lds	r31, 0x0D9D	; 0x800d9d <_cb+0x1>
    2a44:	09 95       	icall
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	0f 90       	pop	r0
    2a64:	1f 90       	pop	r1
    2a66:	18 95       	reti

Disassembly of section .text.start_timer:

00003c9c <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    3c9c:	87 e0       	ldi	r24, 0x07	; 7
    3c9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3ca2:	08 95       	ret

Disassembly of section .text.stop_timer:

00003cda <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    3cda:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3cde:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

000037e4 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    37e4:	82 e0       	ldi	r24, 0x02	; 2
    37e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    37ea:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    37ee:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    37f2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    37f6:	9b ef       	ldi	r25, 0xFB	; 251
    37f8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    37fc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    3800:	78 94       	sei
    3802:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00002928 <TC2_HAL_subscribe>:
    2928:	cf 93       	push	r28
    292a:	dc 01       	movw	r26, r24
    292c:	60 91 b1 0d 	lds	r22, 0x0DB1	; 0x800db1 <cbCounter>
    2930:	65 30       	cpi	r22, 0x05	; 5
    2932:	00 f5       	brcc	.+64     	; 0x2974 <TC2_HAL_subscribe+0x4c>
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	15 c0       	rjmp	.+42     	; 0x2962 <TC2_HAL_subscribe+0x3a>
    2938:	29 2f       	mov	r18, r25
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	f9 01       	movw	r30, r18
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	eb 58       	subi	r30, 0x8B	; 139
    2944:	f2 4f       	sbci	r31, 0xF2	; 242
    2946:	40 81       	ld	r20, Z
    2948:	51 81       	ldd	r21, Z+1	; 0x01
    294a:	45 2b       	or	r20, r21
    294c:	49 f4       	brne	.+18     	; 0x2960 <TC2_HAL_subscribe+0x38>
    294e:	22 0f       	add	r18, r18
    2950:	33 1f       	adc	r19, r19
    2952:	f9 01       	movw	r30, r18
    2954:	eb 58       	subi	r30, 0x8B	; 139
    2956:	f2 4f       	sbci	r31, 0xF2	; 242
    2958:	b1 83       	std	Z+1, r27	; 0x01
    295a:	a0 83       	st	Z, r26
    295c:	c9 2f       	mov	r28, r25
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <TC2_HAL_subscribe+0x40>
    2960:	9f 5f       	subi	r25, 0xFF	; 255
    2962:	95 30       	cpi	r25, 0x05	; 5
    2964:	48 f3       	brcs	.-46     	; 0x2938 <TC2_HAL_subscribe+0x10>
    2966:	cf ef       	ldi	r28, 0xFF	; 255
    2968:	6f 5f       	subi	r22, 0xFF	; 255
    296a:	60 93 b1 0d 	sts	0x0DB1, r22	; 0x800db1 <cbCounter>
    296e:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <start_timer>
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <TC2_HAL_subscribe+0x4e>
    2974:	cf ef       	ldi	r28, 0xFF	; 255
    2976:	8c 2f       	mov	r24, r28
    2978:	cf 91       	pop	r28
    297a:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000031c0 <TC2_HAL_cancel>:
    31c0:	08 2e       	mov	r0, r24
    31c2:	00 0c       	add	r0, r0
    31c4:	99 0b       	sbc	r25, r25
    31c6:	fc 01       	movw	r30, r24
    31c8:	ee 0f       	add	r30, r30
    31ca:	ff 1f       	adc	r31, r31
    31cc:	eb 58       	subi	r30, 0x8B	; 139
    31ce:	f2 4f       	sbci	r31, 0xF2	; 242
    31d0:	20 81       	ld	r18, Z
    31d2:	31 81       	ldd	r19, Z+1	; 0x01
    31d4:	23 2b       	or	r18, r19
    31d6:	81 f0       	breq	.+32     	; 0x31f8 <TC2_HAL_cancel+0x38>
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	fc 01       	movw	r30, r24
    31de:	eb 58       	subi	r30, 0x8B	; 139
    31e0:	f2 4f       	sbci	r31, 0xF2	; 242
    31e2:	11 82       	std	Z+1, r1	; 0x01
    31e4:	10 82       	st	Z, r1
    31e6:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <cbCounter>
    31ea:	81 50       	subi	r24, 0x01	; 1
    31ec:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <cbCounter>
    31f0:	81 11       	cpse	r24, r1
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <TC2_HAL_cancel+0x38>
    31f4:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <stop_timer>
    31f8:	08 95       	ret

Disassembly of section .text.__vector_9:

00001f3e <__vector_9>:
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	cf 93       	push	r28
    1f5e:	ef 93       	push	r30
    1f60:	ff 93       	push	r31
    1f62:	90 91 b0 0d 	lds	r25, 0x0DB0	; 0x800db0 <cnt>
    1f66:	9f 5f       	subi	r25, 0xFF	; 255
    1f68:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <cnt>
    1f6c:	89 e0       	ldi	r24, 0x09	; 9
    1f6e:	98 9f       	mul	r25, r24
    1f70:	21 2d       	mov	r18, r1
    1f72:	11 24       	eor	r1, r1
    1f74:	89 2f       	mov	r24, r25
    1f76:	82 1b       	sub	r24, r18
    1f78:	86 95       	lsr	r24
    1f7a:	82 0f       	add	r24, r18
    1f7c:	82 95       	swap	r24
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	2f e1       	ldi	r18, 0x1F	; 31
    1f82:	82 9f       	mul	r24, r18
    1f84:	90 19       	sub	r25, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	91 11       	cpse	r25, r1
    1f8a:	13 c0       	rjmp	.+38     	; 0x1fb2 <__vector_9+0x74>
    1f8c:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <cnt>
    1f90:	c0 e0       	ldi	r28, 0x00	; 0
    1f92:	0d c0       	rjmp	.+26     	; 0x1fae <__vector_9+0x70>
    1f94:	ec 2f       	mov	r30, r28
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	eb 58       	subi	r30, 0x8B	; 139
    1f9e:	f2 4f       	sbci	r31, 0xF2	; 242
    1fa0:	01 90       	ld	r0, Z+
    1fa2:	f0 81       	ld	r31, Z
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	30 97       	sbiw	r30, 0x00	; 0
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <__vector_9+0x6e>
    1faa:	09 95       	icall
    1fac:	cf 5f       	subi	r28, 0xFF	; 255
    1fae:	c5 30       	cpi	r28, 0x05	; 5
    1fb0:	88 f3       	brcs	.-30     	; 0x1f94 <__vector_9+0x56>
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	cf 91       	pop	r28
    1fb8:	bf 91       	pop	r27
    1fba:	af 91       	pop	r26
    1fbc:	9f 91       	pop	r25
    1fbe:	8f 91       	pop	r24
    1fc0:	7f 91       	pop	r23
    1fc2:	6f 91       	pop	r22
    1fc4:	5f 91       	pop	r21
    1fc6:	4f 91       	pop	r20
    1fc8:	3f 91       	pop	r19
    1fca:	2f 91       	pop	r18
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00002b04 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	6a 01       	movw	r12, r20
    2b10:	e6 2e       	mov	r14, r22
    2b12:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    2b1a:	81 11       	cpse	r24, r1
    2b1c:	13 c0       	rjmp	.+38     	; 0x2b44 <start_and_write_data+0x40>
    2b1e:	c0 e0       	ldi	r28, 0x00	; 0
    2b20:	0e c0       	rjmp	.+28     	; 0x2b3e <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    2b22:	ae 2d       	mov	r26, r14
    2b24:	c6 01       	movw	r24, r12
    2b26:	8c 0f       	add	r24, r28
    2b28:	91 1d       	adc	r25, r1
    2b2a:	a1 1d       	adc	r26, r1
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	84 91       	lpm	r24, Z
    2b30:	a7 fd       	sbrc	r26, 7
    2b32:	80 81       	ld	r24, Z
    2b34:	0e 94 02 1c 	call	0x3804	; 0x3804 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    2b38:	81 11       	cpse	r24, r1
    2b3a:	04 c0       	rjmp	.+8      	; 0x2b44 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    2b3c:	cf 5f       	subi	r28, 0xFF	; 255
    2b3e:	cd 17       	cp	r28, r29
    2b40:	80 f3       	brcs	.-32     	; 0x2b22 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    2b42:	80 e0       	ldi	r24, 0x00	; 0
}
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002876 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2876:	ef 92       	push	r14
    2878:	ff 92       	push	r15
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	8c 01       	movw	r16, r24
    2884:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2886:	c0 e0       	ldi	r28, 0x00	; 0
    2888:	08 c0       	rjmp	.+16     	; 0x289a <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    288a:	78 01       	movw	r14, r16
    288c:	ec 0e       	add	r14, r28
    288e:	f1 1c       	adc	r15, r1
    2890:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <TWI_HAL_read_byte_ack>
    2894:	f7 01       	movw	r30, r14
    2896:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2898:	cf 5f       	subi	r28, 0xFF	; 255
    289a:	2c 2f       	mov	r18, r28
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8d 2f       	mov	r24, r29
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	28 17       	cp	r18, r24
    28a6:	39 07       	cpc	r19, r25
    28a8:	84 f3       	brlt	.-32     	; 0x288a <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    28aa:	8d 2f       	mov	r24, r29
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	e8 01       	movw	r28, r16
    28b2:	c8 0f       	add	r28, r24
    28b4:	d9 1f       	adc	r29, r25
    28b6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <TWI_HAL_read_byte_nack>
    28ba:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    28bc:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	1f 91       	pop	r17
    28c8:	0f 91       	pop	r16
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003ce0 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    3ce0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <start_and_write_data>
}
    3ce4:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003b18 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3b18:	0e 94 82 15 	call	0x2b04	; 0x2b04 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    3b1c:	81 11       	cpse	r24, r1
    3b1e:	03 c0       	rjmp	.+6      	; 0x3b26 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    3b20:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    3b24:	80 e0       	ldi	r24, 0x00	; 0
}
    3b26:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000036d2 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    36d2:	1f 93       	push	r17
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	eb 01       	movw	r28, r22
    36da:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    36dc:	61 e0       	ldi	r22, 0x01	; 1
    36de:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    36e2:	81 11       	cpse	r24, r1
    36e4:	04 c0       	rjmp	.+8      	; 0x36ee <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    36e6:	61 2f       	mov	r22, r17
    36e8:	ce 01       	movw	r24, r28
    36ea:	0e 94 3b 14 	call	0x2876	; 0x2876 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

0000371a <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    371a:	1f 93       	push	r17
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	eb 01       	movw	r28, r22
    3722:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3724:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3728:	81 11       	cpse	r24, r1
    372a:	04 c0       	rjmp	.+8      	; 0x3734 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    372c:	61 2f       	mov	r22, r17
    372e:	ce 01       	movw	r24, r28
    3730:	0e 94 3b 14 	call	0x2876	; 0x2876 <read_and_stop>
	
}
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	1f 91       	pop	r17
    373a:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003af4 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3af4:	80 e2       	ldi	r24, 0x20	; 32
    3af6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    3afa:	e9 eb       	ldi	r30, 0xB9	; 185
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	80 81       	ld	r24, Z
    3b00:	8c 7f       	andi	r24, 0xFC	; 252
    3b02:	80 83       	st	Z, r24
    3b04:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00002cc6 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2cce:	84 ea       	ldi	r24, 0xA4	; 164
    2cd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2cd4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2cd8:	99 23       	and	r25, r25
    2cda:	e4 f7       	brge	.-8      	; 0x2cd4 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    2cdc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2ce0:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    2ce2:	88 30       	cpi	r24, 0x08	; 8
    2ce4:	99 f4       	brne	.+38     	; 0x2d0c <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    2ce6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2cea:	84 e8       	ldi	r24, 0x84	; 132
    2cec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2cf0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2cf4:	88 23       	and	r24, r24
    2cf6:	e4 f7       	brge	.-8      	; 0x2cf0 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    2cf8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2cfc:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    2cfe:	88 31       	cpi	r24, 0x18	; 24
    2d00:	21 f0       	breq	.+8      	; 0x2d0a <TWI_HAL_start+0x44>
    2d02:	80 34       	cpi	r24, 0x40	; 64
    2d04:	19 f4       	brne	.+6      	; 0x2d0c <TWI_HAL_start+0x46>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	08 95       	ret
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2d0c:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00002fc8 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	28 2f       	mov	r18, r24
    2fd0:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2fd2:	84 ea       	ldi	r24, 0xA4	; 164
    2fd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2fd8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2fdc:	99 23       	and	r25, r25
    2fde:	e4 f7       	brge	.-8      	; 0x2fd8 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    2fe0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2fe4:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    2fe6:	80 31       	cpi	r24, 0x10	; 16
    2fe8:	79 f4       	brne	.+30     	; 0x3008 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    2fea:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2fee:	84 e8       	ldi	r24, 0x84	; 132
    2ff0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2ff4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2ff8:	88 23       	and	r24, r24
    2ffa:	e4 f7       	brge	.-8      	; 0x2ff4 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    2ffc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3000:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    3002:	80 34       	cpi	r24, 0x40	; 64
    3004:	09 f4       	brne	.+2      	; 0x3008 <TWI_HAL_repeated_start+0x40>
    3006:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3008:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003804 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3804:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3808:	84 e8       	ldi	r24, 0x84	; 132
    380a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    380e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3812:	88 23       	and	r24, r24
    3814:	e4 f7       	brge	.-8      	; 0x380e <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3816:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    381a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    381c:	88 32       	cpi	r24, 0x28	; 40
    381e:	09 f4       	brne	.+2      	; 0x3822 <TWI_HAL_write_byte+0x1e>
    3820:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3822:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003aa4 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3aa4:	84 ec       	ldi	r24, 0xC4	; 196
    3aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3aaa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3aae:	88 23       	and	r24, r24
    3ab0:	e4 f7       	brge	.-8      	; 0x3aaa <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3ab2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3ab6:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003ab8 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3ab8:	84 e8       	ldi	r24, 0x84	; 132
    3aba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3abe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3ac2:	88 23       	and	r24, r24
    3ac4:	e4 f7       	brge	.-8      	; 0x3abe <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3ac6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3aca:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003b28 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3b28:	84 e9       	ldi	r24, 0x94	; 148
    3b2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3b2e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3b32:	84 fd       	sbrc	r24, 4
    3b34:	fc cf       	rjmp	.-8      	; 0x3b2e <TWI_HAL_stop+0x6>
}
    3b36:	08 95       	ret

Disassembly of section .text.copy_buffer:

000035d0 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    35d0:	bc 01       	movw	r22, r24
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	09 c0       	rjmp	.+18     	; 0x35e8 <copy_buffer+0x18>
    35d6:	fb 01       	movw	r30, r22
    35d8:	e9 0f       	add	r30, r25
    35da:	f1 1d       	adc	r31, r1
    35dc:	da 01       	movw	r26, r20
    35de:	a0 50       	subi	r26, 0x00	; 0
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	2c 91       	ld	r18, X
    35e4:	20 83       	st	Z, r18
    35e6:	9f 5f       	subi	r25, 0xFF	; 255
    35e8:	49 2f       	mov	r20, r25
    35ea:	50 e0       	ldi	r21, 0x00	; 0
    35ec:	20 91 b3 0d 	lds	r18, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	22 50       	subi	r18, 0x02	; 2
    35f4:	31 09       	sbc	r19, r1
    35f6:	42 17       	cp	r20, r18
    35f8:	53 07       	cpc	r21, r19
    35fa:	6c f3       	brlt	.-38     	; 0x35d6 <copy_buffer+0x6>
    35fc:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003148 <uart0_hal_init>:
    3148:	e1 ec       	ldi	r30, 0xC1	; 193
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	80 61       	ori	r24, 0x10	; 16
    3150:	80 83       	st	Z, r24
    3152:	80 81       	ld	r24, Z
    3154:	88 60       	ori	r24, 0x08	; 8
    3156:	80 83       	st	Z, r24
    3158:	80 81       	ld	r24, Z
    315a:	80 68       	ori	r24, 0x80	; 128
    315c:	80 83       	st	Z, r24
    315e:	80 81       	ld	r24, Z
    3160:	80 64       	ori	r24, 0x40	; 64
    3162:	80 83       	st	Z, r24
    3164:	e0 ec       	ldi	r30, 0xC0	; 192
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	82 60       	ori	r24, 0x02	; 2
    316c:	80 83       	st	Z, r24
    316e:	86 e0       	ldi	r24, 0x06	; 6
    3170:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3174:	80 e1       	ldi	r24, 0x10	; 16
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    317c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3180:	78 94       	sei
    3182:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000033ae <uart0_hal_send_message>:
    33ae:	dc 01       	movw	r26, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0b c0       	rjmp	.+22     	; 0x33ca <uart0_hal_send_message+0x1c>
    33b4:	29 2f       	mov	r18, r25
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	fd 01       	movw	r30, r26
    33ba:	e2 0f       	add	r30, r18
    33bc:	f3 1f       	adc	r31, r19
    33be:	40 81       	ld	r20, Z
    33c0:	f9 01       	movw	r30, r18
    33c2:	ec 59       	subi	r30, 0x9C	; 156
    33c4:	fe 4f       	sbci	r31, 0xFE	; 254
    33c6:	40 83       	st	Z, r20
    33c8:	9f 5f       	subi	r25, 0xFF	; 255
    33ca:	96 17       	cp	r25, r22
    33cc:	98 f3       	brcs	.-26     	; 0x33b4 <uart0_hal_send_message+0x6>
    33ce:	60 93 b5 0d 	sts	0x0DB5, r22	; 0x800db5 <tx_buffer_data_len>
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <tx_buffer_cursor>
    33d8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    33dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    33e0:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000255e <uart0_hal_send_string>:
    255e:	cf 92       	push	r12
    2560:	df 92       	push	r13
    2562:	ef 92       	push	r14
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	6b 01       	movw	r12, r22
    256c:	e8 2e       	mov	r14, r24
    256e:	c0 e0       	ldi	r28, 0x00	; 0
    2570:	12 c0       	rjmp	.+36     	; 0x2596 <uart0_hal_send_string+0x38>
    2572:	8c 2f       	mov	r24, r28
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	4e 2d       	mov	r20, r14
    2578:	96 01       	movw	r18, r12
    257a:	20 0f       	add	r18, r16
    257c:	31 1f       	adc	r19, r17
    257e:	41 1d       	adc	r20, r1
    2580:	17 fd       	sbrc	r17, 7
    2582:	4a 95       	dec	r20
    2584:	f9 01       	movw	r30, r18
    2586:	24 91       	lpm	r18, Z
    2588:	47 fd       	sbrc	r20, 7
    258a:	20 81       	ld	r18, Z
    258c:	fc 01       	movw	r30, r24
    258e:	ec 59       	subi	r30, 0x9C	; 156
    2590:	fe 4f       	sbci	r31, 0xFE	; 254
    2592:	20 83       	st	Z, r18
    2594:	cf 5f       	subi	r28, 0xFF	; 255
    2596:	0c 2f       	mov	r16, r28
    2598:	10 e0       	ldi	r17, 0x00	; 0
    259a:	8e 2d       	mov	r24, r14
    259c:	b6 01       	movw	r22, r12
    259e:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    25a2:	08 17       	cp	r16, r24
    25a4:	19 07       	cpc	r17, r25
    25a6:	28 f3       	brcs	.-54     	; 0x2572 <uart0_hal_send_string+0x14>
    25a8:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <tx_buffer_data_len>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <tx_buffer_cursor>
    25b2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    25b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ef 90       	pop	r14
    25c2:	df 90       	pop	r13
    25c4:	cf 90       	pop	r12
    25c6:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003b9c <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3b9c:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <rx_buffer_has_message>
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	91 11       	cpse	r25, r1
    3ba4:	01 c0       	rjmp	.+2      	; 0x3ba8 <uart0_hal_message_ready+0xc>
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
}
    3ba8:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00003c66 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    3c66:	10 92 b2 0d 	sts	0x0DB2, r1	; 0x800db2 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    3c6a:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <rx_buffer_data_len>
    3c6e:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003682 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	8c 01       	movw	r16, r24
	copy_buffer(msg);
    368a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    368e:	c0 91 b3 0d 	lds	r28, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    3692:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3694:	f8 01       	movw	r30, r16
    3696:	ec 0f       	add	r30, r28
    3698:	f1 1d       	adc	r31, r1
    369a:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    369c:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <uart0_hal_clear_rx_buffer>
	return len;
}
    36a0:	8c 2f       	mov	r24, r28
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00002de6 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	1f 92       	push	r1
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	9a b1       	in	r25, 0x0a	; 10
    2df2:	92 60       	ori	r25, 0x02	; 2
    2df4:	9a b9       	out	0x0a, r25	; 10
    2df6:	e1 ec       	ldi	r30, 0xC1	; 193
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	90 81       	ld	r25, Z
    2dfc:	97 7f       	andi	r25, 0xF7	; 247
    2dfe:	90 83       	st	Z, r25
    2e00:	9b b1       	in	r25, 0x0b	; 11
    2e02:	9d 7f       	andi	r25, 0xFD	; 253
    2e04:	9b b9       	out	0x0b, r25	; 11
    2e06:	af e9       	ldi	r26, 0x9F	; 159
    2e08:	bf e0       	ldi	r27, 0x0F	; 15
    2e0a:	11 97       	sbiw	r26, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <uart0_hal_send_break+0x24>
    2e0e:	00 c0       	rjmp	.+0      	; 0x2e10 <uart0_hal_send_break+0x2a>
    2e10:	00 00       	nop
    2e12:	90 81       	ld	r25, Z
    2e14:	98 60       	ori	r25, 0x08	; 8
    2e16:	90 83       	st	Z, r25
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	61 e0       	ldi	r22, 0x01	; 1
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	0e 94 d7 19 	call	0x33ae	; 0x33ae <uart0_hal_send_message>
    2e24:	0f 90       	pop	r0
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

Disassembly of section .text.__vector_22:

00002be8 <__vector_22>:
    2be8:	1f 92       	push	r1
    2bea:	0f 92       	push	r0
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	0f 92       	push	r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	8f 93       	push	r24
    2bf4:	ef 93       	push	r30
    2bf6:	ff 93       	push	r31
    2bf8:	e0 91 b4 0d 	lds	r30, 0x0DB4	; 0x800db4 <tx_buffer_cursor>
    2bfc:	80 91 b5 0d 	lds	r24, 0x0DB5	; 0x800db5 <tx_buffer_data_len>
    2c00:	e8 17       	cp	r30, r24
    2c02:	58 f4       	brcc	.+22     	; 0x2c1a <__vector_22+0x32>
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	8e 0f       	add	r24, r30
    2c08:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <tx_buffer_cursor>
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	ec 59       	subi	r30, 0x9C	; 156
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	80 81       	ld	r24, Z
    2c14:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2c18:	04 c0       	rjmp	.+8      	; 0x2c22 <__vector_22+0x3a>
    2c1a:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <tx_buffer_cursor>
    2c1e:	10 92 b5 0d 	sts	0x0DB5, r1	; 0x800db5 <tx_buffer_data_len>
    2c22:	ff 91       	pop	r31
    2c24:	ef 91       	pop	r30
    2c26:	8f 91       	pop	r24
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

Disassembly of section .text.__vector_20:

0000240a <__vector_20>:
    240a:	1f 92       	push	r1
    240c:	0f 92       	push	r0
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	0f 92       	push	r0
    2412:	11 24       	eor	r1, r1
    2414:	2f 93       	push	r18
    2416:	8f 93       	push	r24
    2418:	9f 93       	push	r25
    241a:	ef 93       	push	r30
    241c:	ff 93       	push	r31
    241e:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <rx_buffer_has_message>
    2422:	81 11       	cpse	r24, r1
    2424:	0e c0       	rjmp	.+28     	; 0x2442 <__vector_20+0x38>
    2426:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    242a:	e4 36       	cpi	r30, 0x64	; 100
    242c:	50 f4       	brcc	.+20     	; 0x2442 <__vector_20+0x38>
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	8e 0f       	add	r24, r30
    2432:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <rx_buffer_data_len>
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    243c:	e0 50       	subi	r30, 0x00	; 0
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 83       	st	Z, r24
    2442:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <rx_buffer_data_len>
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	80 f0       	brcs	.+32     	; 0x246a <__vector_20+0x60>
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	fc 01       	movw	r30, r24
    244e:	e1 50       	subi	r30, 0x01	; 1
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	20 81       	ld	r18, Z
    2454:	2a 30       	cpi	r18, 0x0A	; 10
    2456:	49 f4       	brne	.+18     	; 0x246a <__vector_20+0x60>
    2458:	fc 01       	movw	r30, r24
    245a:	e2 50       	subi	r30, 0x02	; 2
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	8d 30       	cpi	r24, 0x0D	; 13
    2462:	19 f4       	brne	.+6      	; 0x246a <__vector_20+0x60>
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <rx_buffer_has_message>
    246a:	ff 91       	pop	r31
    246c:	ef 91       	pop	r30
    246e:	9f 91       	pop	r25
    2470:	8f 91       	pop	r24
    2472:	2f 91       	pop	r18
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	0f 90       	pop	r0
    247a:	1f 90       	pop	r1
    247c:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00003184 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    3184:	e9 ec       	ldi	r30, 0xC9	; 201
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 61       	ori	r24, 0x10	; 16
    318c:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    318e:	80 81       	ld	r24, Z
    3190:	88 60       	ori	r24, 0x08	; 8
    3192:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    3194:	80 81       	ld	r24, Z
    3196:	80 68       	ori	r24, 0x80	; 128
    3198:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    319a:	80 81       	ld	r24, Z
    319c:	80 64       	ori	r24, 0x40	; 64
    319e:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    31a0:	e8 ec       	ldi	r30, 0xC8	; 200
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	82 60       	ori	r24, 0x02	; 2
    31a8:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    31aa:	86 e0       	ldi	r24, 0x06	; 6
    31ac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    31b0:	80 e1       	ldi	r24, 0x10	; 16
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    31b8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    31bc:	78 94       	sei
    31be:	08 95       	ret

Disassembly of section .text.__vector_30:

00002c32 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    2c32:	1f 92       	push	r1
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	8f 93       	push	r24
    2c3e:	ef 93       	push	r30
    2c40:	ff 93       	push	r31
    2c42:	e0 91 b8 0d 	lds	r30, 0x0DB8	; 0x800db8 <tx_buffer_cursor>
    2c46:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <tx_buffer_data_len>
    2c4a:	e8 17       	cp	r30, r24
    2c4c:	58 f4       	brcc	.+22     	; 0x2c64 <__vector_30+0x32>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	8e 0f       	add	r24, r30
    2c52:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <tx_buffer_cursor>
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	ee 53       	subi	r30, 0x3E	; 62
    2c5a:	f4 4f       	sbci	r31, 0xF4	; 244
    2c5c:	80 81       	ld	r24, Z
    2c5e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <__vector_30+0x3a>
    2c64:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <tx_buffer_cursor>
    2c68:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <tx_buffer_data_len>
    2c6c:	ff 91       	pop	r31
    2c6e:	ef 91       	pop	r30
    2c70:	8f 91       	pop	r24
    2c72:	0f 90       	pop	r0
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	0f 90       	pop	r0
    2c78:	1f 90       	pop	r1
    2c7a:	18 95       	reti

Disassembly of section .text.__vector_28:

0000247e <__vector_28>:
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	2f 93       	push	r18
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	ef 93       	push	r30
    2490:	ff 93       	push	r31
    2492:	80 91 b6 0d 	lds	r24, 0x0DB6	; 0x800db6 <rx_buffer_has_message>
    2496:	81 11       	cpse	r24, r1
    2498:	0e c0       	rjmp	.+28     	; 0x24b6 <__vector_28+0x38>
    249a:	e0 91 b7 0d 	lds	r30, 0x0DB7	; 0x800db7 <rx_buffer_data_len>
    249e:	e4 36       	cpi	r30, 0x64	; 100
    24a0:	50 f4       	brcc	.+20     	; 0x24b6 <__vector_28+0x38>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	8e 0f       	add	r24, r30
    24a6:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <rx_buffer_data_len>
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    24b0:	e2 51       	subi	r30, 0x12	; 18
    24b2:	f3 4f       	sbci	r31, 0xF3	; 243
    24b4:	80 83       	st	Z, r24
    24b6:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <rx_buffer_data_len>
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	fc 01       	movw	r30, r24
    24be:	e3 51       	subi	r30, 0x13	; 19
    24c0:	f3 4f       	sbci	r31, 0xF3	; 243
    24c2:	20 81       	ld	r18, Z
    24c4:	2a 30       	cpi	r18, 0x0A	; 10
    24c6:	49 f4       	brne	.+18     	; 0x24da <__vector_28+0x5c>
    24c8:	fc 01       	movw	r30, r24
    24ca:	e4 51       	subi	r30, 0x14	; 20
    24cc:	f3 4f       	sbci	r31, 0xF3	; 243
    24ce:	80 81       	ld	r24, Z
    24d0:	8d 30       	cpi	r24, 0x0D	; 13
    24d2:	19 f4       	brne	.+6      	; 0x24da <__vector_28+0x5c>
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 b6 0d 	sts	0x0DB6, r24	; 0x800db6 <rx_buffer_has_message>
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	9f 91       	pop	r25
    24e0:	8f 91       	pop	r24
    24e2:	2f 91       	pop	r18
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

Disassembly of section .text.main:

000039b6 <main>:
{
	//test_runner();
	
	while(1)
    {
		MAINPG_start();
    39b6:	0e 94 0c 05 	call	0xa18	; 0xa18 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39ba:	2f ef       	ldi	r18, 0xFF	; 255
    39bc:	8d e3       	ldi	r24, 0x3D	; 61
    39be:	99 e4       	ldi	r25, 0x49	; 73
    39c0:	21 50       	subi	r18, 0x01	; 1
    39c2:	80 40       	sbci	r24, 0x00	; 0
    39c4:	90 40       	sbci	r25, 0x00	; 0
    39c6:	e1 f7       	brne	.-8      	; 0x39c0 <main+0xa>
    39c8:	00 c0       	rjmp	.+0      	; 0x39ca <main+0x14>
    39ca:	00 00       	nop
    39cc:	f4 cf       	rjmp	.-24     	; 0x39b6 <main>

Disassembly of section .text.vect_ADC_heat_timeout:

000039ce <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    39ce:	80 91 ba 0d 	lds	r24, 0x0DBA	; 0x800dba <cntPowerUpTime>
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <cntPowerUpTime>
    39d8:	90 91 bb 0d 	lds	r25, 0x0DBB	; 0x800dbb <_powerUpTime>
    39dc:	89 17       	cp	r24, r25
    39de:	10 f0       	brcs	.+4      	; 0x39e4 <vect_ADC_heat_timeout+0x16>
    39e0:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <TC0_HAL_stop>
    39e4:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

0000269a <ADC_init_sampling>:
    269a:	cf 93       	push	r28
    269c:	50 93 a1 0d 	sts	0x0DA1, r21	; 0x800da1 <_data+0x1>
    26a0:	40 93 a0 0d 	sts	0x0DA0, r20	; 0x800da0 <_data>
    26a4:	70 93 a3 0d 	sts	0x0DA3, r23	; 0x800da3 <_nSamples+0x1>
    26a8:	60 93 a2 0d 	sts	0x0DA2, r22	; 0x800da2 <_nSamples>
    26ac:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <cntSamples+0x1>
    26b0:	10 92 9e 0d 	sts	0x0D9E, r1	; 0x800d9e <cntSamples>
    26b4:	66 e1       	ldi	r22, 0x16	; 22
    26b6:	77 e1       	ldi	r23, 0x17	; 23
    26b8:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <TC0_HAL_init>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <PM_HAL_adc_power>
    26c2:	2f ef       	ldi	r18, 0xFF	; 255
    26c4:	83 ec       	ldi	r24, 0xC3	; 195
    26c6:	99 e0       	ldi	r25, 0x09	; 9
    26c8:	21 50       	subi	r18, 0x01	; 1
    26ca:	80 40       	sbci	r24, 0x00	; 0
    26cc:	90 40       	sbci	r25, 0x00	; 0
    26ce:	e1 f7       	brne	.-8      	; 0x26c8 <ADC_init_sampling+0x2e>
    26d0:	00 c0       	rjmp	.+0      	; 0x26d2 <ADC_init_sampling+0x38>
    26d2:	00 00       	nop
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	8d e4       	ldi	r24, 0x4D	; 77
    26d8:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <TWI_HAL_start>
    26dc:	c8 2f       	mov	r28, r24
    26de:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <TWI_HAL_stop>
    26e2:	cc 23       	and	r28, r28
    26e4:	51 f0       	breq	.+20     	; 0x26fa <ADC_init_sampling+0x60>
    26e6:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <_data+0x1>
    26ea:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <_data>
    26ee:	10 92 a3 0d 	sts	0x0DA3, r1	; 0x800da3 <_nSamples+0x1>
    26f2:	10 92 a2 0d 	sts	0x0DA2, r1	; 0x800da2 <_nSamples>
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <ADC_init_sampling+0x62>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00003acc <ADC_deinit_sampling>:
    3acc:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <TC0_HAL_stop>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <PM_HAL_adc_power>
    3ad6:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <_data+0x1>
    3ada:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <_data>
    3ade:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

000038be <ADC_is_sampling_done>:
    38be:	40 91 9e 0d 	lds	r20, 0x0D9E	; 0x800d9e <cntSamples>
    38c2:	50 91 9f 0d 	lds	r21, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    38c6:	20 91 a2 0d 	lds	r18, 0x0DA2	; 0x800da2 <_nSamples>
    38ca:	30 91 a3 0d 	lds	r19, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	42 17       	cp	r20, r18
    38d2:	53 07       	cpc	r21, r19
    38d4:	08 f4       	brcc	.+2      	; 0x38d8 <ADC_is_sampling_done+0x1a>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00003824 <ADC_meth_sens_power_on>:
    3824:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <_powerUpTime>
    3828:	10 92 ba 0d 	sts	0x0DBA, r1	; 0x800dba <cntPowerUpTime>
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <PM_HAL_meth_power>
    3832:	67 ee       	ldi	r22, 0xE7	; 231
    3834:	7c e1       	ldi	r23, 0x1C	; 28
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <TC0_HAL_init>
    383c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <TC0_HAL_start>
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00003b06 <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    3b06:	20 91 ba 0d 	lds	r18, 0x0DBA	; 0x800dba <cntPowerUpTime>
    3b0a:	90 91 bb 0d 	lds	r25, 0x0DBB	; 0x800dbb <_powerUpTime>
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	29 17       	cp	r18, r25
    3b12:	08 f4       	brcc	.+2      	; 0x3b16 <ADC_meth_sens_ready+0x10>
    3b14:	80 e0       	ldi	r24, 0x00	; 0
}
    3b16:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00001fd6 <calc_ppm_methane>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 8c 11 	call	0x2318	; 0x2318 <__floatunsisf>
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	59 e3       	ldi	r21, 0x39	; 57
    1ff8:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__mulsf3>
    1ffc:	80 90 92 0d 	lds	r8, 0x0D92	; 0x800d92 <Vc>
    2000:	90 90 93 0d 	lds	r9, 0x0D93	; 0x800d93 <Vc+0x1>
    2004:	a0 90 94 0d 	lds	r10, 0x0D94	; 0x800d94 <Vc+0x2>
    2008:	b0 90 95 0d 	lds	r11, 0x0D95	; 0x800d95 <Vc+0x3>
    200c:	a5 01       	movw	r20, r10
    200e:	94 01       	movw	r18, r8
    2010:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__mulsf3>
    2014:	6b 01       	movw	r12, r22
    2016:	7c 01       	movw	r14, r24
    2018:	9b 01       	movw	r18, r22
    201a:	ac 01       	movw	r20, r24
    201c:	c5 01       	movw	r24, r10
    201e:	b4 01       	movw	r22, r8
    2020:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__subsf3>
    2024:	a7 01       	movw	r20, r14
    2026:	96 01       	movw	r18, r12
    2028:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__divsf3>
    202c:	20 91 8e 0d 	lds	r18, 0x0D8E	; 0x800d8e <RRL>
    2030:	30 91 8f 0d 	lds	r19, 0x0D8F	; 0x800d8f <RRL+0x1>
    2034:	40 91 90 0d 	lds	r20, 0x0D90	; 0x800d90 <RRL+0x2>
    2038:	50 91 91 0d 	lds	r21, 0x0D91	; 0x800d91 <RRL+0x3>
    203c:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__mulsf3>
    2040:	20 91 8a 0d 	lds	r18, 0x0D8A	; 0x800d8a <PPM_factor>
    2044:	30 91 8b 0d 	lds	r19, 0x0D8B	; 0x800d8b <PPM_factor+0x1>
    2048:	40 91 8c 0d 	lds	r20, 0x0D8C	; 0x800d8c <PPM_factor+0x2>
    204c:	50 91 8d 0d 	lds	r21, 0x0D8D	; 0x800d8d <PPM_factor+0x3>
    2050:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__mulsf3>
    2054:	0e 94 de 13 	call	0x27bc	; 0x27bc <__fixunssfsi>
    2058:	cb 01       	movw	r24, r22
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	08 95       	ret

Disassembly of section .text.ADC_get_value:

0000281a <ADC_get_value>:
    281a:	ef 92       	push	r14
    281c:	ff 92       	push	r15
    281e:	1f 93       	push	r17
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	00 d0       	rcall	.+0      	; 0x2826 <ADC_get_value+0xc>
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	7c 01       	movw	r14, r24
    282c:	8f ef       	ldi	r24, 0xFF	; 255
    282e:	9f ef       	ldi	r25, 0xFF	; 255
    2830:	f7 01       	movw	r30, r14
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	42 e0       	ldi	r20, 0x02	; 2
    2838:	be 01       	movw	r22, r28
    283a:	6f 5f       	subi	r22, 0xFF	; 255
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	8d e4       	ldi	r24, 0x4D	; 77
    2840:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <TWI_API_read_data_ack_end_nack_stop>
    2844:	18 2f       	mov	r17, r24
    2846:	81 11       	cpse	r24, r1
    2848:	0d c0       	rjmp	.+26     	; 0x2864 <ADC_get_value+0x4a>
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	98 2f       	mov	r25, r24
    2850:	88 27       	eor	r24, r24
    2852:	2a 81       	ldd	r18, Y+2	; 0x02
    2854:	82 2b       	or	r24, r18
    2856:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <calc_ppm_methane>
    285a:	f7 01       	movw	r30, r14
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	81 2f       	mov	r24, r17
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <ADC_get_value+0x4c>
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00002e2c <vect_ADC_do_sample>:
    2e2c:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <_data>
    2e30:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <_data+0x1>
    2e34:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2e38:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2e3c:	a9 01       	movw	r20, r18
    2e3e:	4f 5f       	subi	r20, 0xFF	; 255
    2e40:	5f 4f       	sbci	r21, 0xFF	; 255
    2e42:	50 93 9f 0d 	sts	0x0D9F, r21	; 0x800d9f <cntSamples+0x1>
    2e46:	40 93 9e 0d 	sts	0x0D9E, r20	; 0x800d9e <cntSamples>
    2e4a:	22 0f       	add	r18, r18
    2e4c:	33 1f       	adc	r19, r19
    2e4e:	82 0f       	add	r24, r18
    2e50:	93 1f       	adc	r25, r19
    2e52:	0e 94 0d 14 	call	0x281a	; 0x281a <ADC_get_value>
    2e56:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2e5a:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2e5e:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <_nSamples>
    2e62:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    2e66:	28 17       	cp	r18, r24
    2e68:	39 07       	cpc	r19, r25
    2e6a:	10 f0       	brcs	.+4      	; 0x2e70 <vect_ADC_do_sample+0x44>
    2e6c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <TC0_HAL_stop>
    2e70:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00003c08 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    3c08:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <TC0_HAL_start>
	vect_ADC_do_sample();
    3c0c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	08 95       	ret

Disassembly of section .text.cb_blink:

00003ce6 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    3ce6:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <PM_HAL_LED_toggle>
    3cea:	08 95       	ret

Disassembly of section .text.blink:

00002b50 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    2b56:	c0 e0       	ldi	r28, 0x00	; 0
    2b58:	19 c0       	rjmp	.+50     	; 0x2b8c <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
    2b60:	2f ef       	ldi	r18, 0xFF	; 255
    2b62:	82 e5       	ldi	r24, 0x52	; 82
    2b64:	97 e0       	ldi	r25, 0x07	; 7
    2b66:	21 50       	subi	r18, 0x01	; 1
    2b68:	80 40       	sbci	r24, 0x00	; 0
    2b6a:	90 40       	sbci	r25, 0x00	; 0
    2b6c:	e1 f7       	brne	.-8      	; 0x2b66 <blink+0x16>
    2b6e:	00 c0       	rjmp	.+0      	; 0x2b70 <blink+0x20>
    2b70:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
    2b78:	2f ef       	ldi	r18, 0xFF	; 255
    2b7a:	82 e5       	ldi	r24, 0x52	; 82
    2b7c:	97 e0       	ldi	r25, 0x07	; 7
    2b7e:	21 50       	subi	r18, 0x01	; 1
    2b80:	80 40       	sbci	r24, 0x00	; 0
    2b82:	90 40       	sbci	r25, 0x00	; 0
    2b84:	e1 f7       	brne	.-8      	; 0x2b7e <blink+0x2e>
    2b86:	00 c0       	rjmp	.+0      	; 0x2b88 <blink+0x38>
    2b88:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    2b8a:	cf 5f       	subi	r28, 0xFF	; 255
    2b8c:	cd 17       	cp	r28, r29
    2b8e:	28 f3       	brcs	.-54     	; 0x2b5a <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
}
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	08 95       	ret

Disassembly of section .text.err_code:

000031fa <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    31fa:	cf 93       	push	r28
    31fc:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
    3204:	2f ef       	ldi	r18, 0xFF	; 255
    3206:	83 ed       	ldi	r24, 0xD3	; 211
    3208:	90 e3       	ldi	r25, 0x30	; 48
    320a:	21 50       	subi	r18, 0x01	; 1
    320c:	80 40       	sbci	r24, 0x00	; 0
    320e:	90 40       	sbci	r25, 0x00	; 0
    3210:	e1 f7       	brne	.-8      	; 0x320a <err_code+0x10>
    3212:	00 c0       	rjmp	.+0      	; 0x3214 <err_code+0x1a>
    3214:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    3216:	8c 2f       	mov	r24, r28
    3218:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <blink>
    321c:	2f ef       	ldi	r18, 0xFF	; 255
    321e:	89 e6       	ldi	r24, 0x69	; 105
    3220:	98 e1       	ldi	r25, 0x18	; 24
    3222:	21 50       	subi	r18, 0x01	; 1
    3224:	80 40       	sbci	r24, 0x00	; 0
    3226:	90 40       	sbci	r25, 0x00	; 0
    3228:	e1 f7       	brne	.-8      	; 0x3222 <err_code+0x28>
    322a:	00 c0       	rjmp	.+0      	; 0x322c <err_code+0x32>
    322c:	00 00       	nop
	_delay_ms(1000);
}
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00003baa <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    3baa:	83 e7       	ldi	r24, 0x73	; 115
    3bac:	9e e1       	ldi	r25, 0x1E	; 30
    3bae:	0e 94 94 14 	call	0x2928	; 0x2928 <TC2_HAL_subscribe>
    3bb2:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <cbPointer>
    3bb6:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00003b38 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    3b38:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <cbPointer>
    3b3c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
    3b46:	08 95       	ret

Disassembly of section .text.LED_join_success:

0000304c <LED_join_success>:
}

void LED_join_success(){
    304c:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    304e:	c0 e0       	ldi	r28, 0x00	; 0
    3050:	19 c0       	rjmp	.+50     	; 0x3084 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
    3058:	2f ef       	ldi	r18, 0xFF	; 255
    305a:	80 e7       	ldi	r24, 0x70	; 112
    305c:	92 e0       	ldi	r25, 0x02	; 2
    305e:	21 50       	subi	r18, 0x01	; 1
    3060:	80 40       	sbci	r24, 0x00	; 0
    3062:	90 40       	sbci	r25, 0x00	; 0
    3064:	e1 f7       	brne	.-8      	; 0x305e <LED_join_success+0x12>
    3066:	00 c0       	rjmp	.+0      	; 0x3068 <LED_join_success+0x1c>
    3068:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
    3070:	2f ef       	ldi	r18, 0xFF	; 255
    3072:	80 e7       	ldi	r24, 0x70	; 112
    3074:	92 e0       	ldi	r25, 0x02	; 2
    3076:	21 50       	subi	r18, 0x01	; 1
    3078:	80 40       	sbci	r24, 0x00	; 0
    307a:	90 40       	sbci	r25, 0x00	; 0
    307c:	e1 f7       	brne	.-8      	; 0x3076 <LED_join_success+0x2a>
    307e:	00 c0       	rjmp	.+0      	; 0x3080 <LED_join_success+0x34>
    3080:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    3082:	cf 5f       	subi	r28, 0xFF	; 255
    3084:	ca 30       	cpi	r28, 0x0A	; 10
    3086:	28 f3       	brcs	.-54     	; 0x3052 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00003ca4 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <err_code>
    3caa:	08 95       	ret

Disassembly of section .text.LED_join_conf_err:

00003cac <LED_join_conf_err>:
}

void LED_join_conf_err(){
	err_code(5);
    3cac:	85 e0       	ldi	r24, 0x05	; 5
    3cae:	0e 94 fd 18 	call	0x31fa	; 0x31fa <err_code>
    3cb2:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

00003cb4 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    3cb4:	87 e0       	ldi	r24, 0x07	; 7
    3cb6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <err_code>
    3cba:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000782 <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 782:	af 92       	push	r10
 784:	bf 92       	push	r11
 786:	cf 92       	push	r12
 788:	df 92       	push	r13
 78a:	ef 92       	push	r14
 78c:	ff 92       	push	r15
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	28 97       	sbiw	r28, 0x08	; 8
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	cd bf       	out	0x3d, r28	; 61
 7a4:	5c 01       	movw	r10, r24
 7a6:	6b 01       	movw	r12, r22
 7a8:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 7aa:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
 7ac:	e1 2f       	mov	r30, r17
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ed 30       	cpi	r30, 0x0D	; 13
 7b2:	f1 05       	cpc	r31, r1
 7b4:	d8 f7       	brcc	.-10     	; 0x7ac <JN_join_network+0x2a>
 7b6:	e2 5c       	subi	r30, 0xC2	; 194
 7b8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ba:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 7be:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <rn2483_reset_active>
 7c2:	2f ef       	ldi	r18, 0xFF	; 255
 7c4:	89 e6       	ldi	r24, 0x69	; 105
 7c6:	98 e1       	ldi	r25, 0x18	; 24
 7c8:	21 50       	subi	r18, 0x01	; 1
 7ca:	80 40       	sbci	r24, 0x00	; 0
 7cc:	90 40       	sbci	r25, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <JN_join_network+0x46>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <JN_join_network+0x50>
 7d2:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 7d4:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 7d8:	4c e0       	ldi	r20, 0x0C	; 12
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	62 e0       	ldi	r22, 0x02	; 2
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	ce 01       	movw	r24, r28
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 7e8:	29 e9       	ldi	r18, 0x99	; 153
 7ea:	32 e0       	ldi	r19, 0x02	; 2
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	ce 01       	movw	r24, r28
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 7f8:	11 e0       	ldi	r17, 0x01	; 1
			break;
 7fa:	d8 cf       	rjmp	.-80     	; 0x7ac <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 7fc:	40 ea       	ldi	r20, 0xA0	; 160
 7fe:	52 e0       	ldi	r21, 0x02	; 2
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	80 e9       	ldi	r24, 0x90	; 144
 804:	92 e0       	ldi	r25, 0x02	; 2
 806:	0e 94 0b 1a 	call	0x3416	; 0x3416 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 80a:	80 e9       	ldi	r24, 0x90	; 144
 80c:	92 e0       	ldi	r25, 0x02	; 2
 80e:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 812:	4c e0       	ldi	r20, 0x0C	; 12
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	63 e0       	ldi	r22, 0x03	; 3
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	ce 01       	movw	r24, r28
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 822:	2e ea       	ldi	r18, 0xAE	; 174
 824:	32 e0       	ldi	r19, 0x02	; 2
 826:	40 e0       	ldi	r20, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	ce 01       	movw	r24, r28
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 832:	11 e0       	ldi	r17, 0x01	; 1
			break;
 834:	bb cf       	rjmp	.-138    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 836:	b5 01       	movw	r22, r10
 838:	80 e9       	ldi	r24, 0x90	; 144
 83a:	92 e0       	ldi	r25, 0x02	; 2
 83c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <mac_set_deveui>
				attach_ending(lm_msg);
 840:	80 e9       	ldi	r24, 0x90	; 144
 842:	92 e0       	ldi	r25, 0x02	; 2
 844:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <attach_ending>
				util_transmit_msg(lm_msg);
 848:	80 e9       	ldi	r24, 0x90	; 144
 84a:	92 e0       	ldi	r25, 0x02	; 2
 84c:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 850:	4c e0       	ldi	r20, 0x0C	; 12
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	64 e0       	ldi	r22, 0x04	; 4
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	ce 01       	movw	r24, r28
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 860:	2e ea       	ldi	r18, 0xAE	; 174
 862:	32 e0       	ldi	r19, 0x02	; 2
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	ce 01       	movw	r24, r28
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 870:	11 e0       	ldi	r17, 0x01	; 1
			break;
 872:	9c cf       	rjmp	.-200    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 874:	b7 01       	movw	r22, r14
 876:	80 e9       	ldi	r24, 0x90	; 144
 878:	92 e0       	ldi	r25, 0x02	; 2
 87a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <mac_set_appkey>
				attach_ending(lm_msg);
 87e:	80 e9       	ldi	r24, 0x90	; 144
 880:	92 e0       	ldi	r25, 0x02	; 2
 882:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <attach_ending>
				util_transmit_msg(lm_msg);
 886:	80 e9       	ldi	r24, 0x90	; 144
 888:	92 e0       	ldi	r25, 0x02	; 2
 88a:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 88e:	4c e0       	ldi	r20, 0x0C	; 12
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	65 e0       	ldi	r22, 0x05	; 5
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	ce 01       	movw	r24, r28
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 89e:	2e ea       	ldi	r18, 0xAE	; 174
 8a0:	32 e0       	ldi	r19, 0x02	; 2
 8a2:	40 e0       	ldi	r20, 0x00	; 0
 8a4:	60 e0       	ldi	r22, 0x00	; 0
 8a6:	ce 01       	movw	r24, r28
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8ae:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8b0:	7d cf       	rjmp	.-262    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 8b2:	b6 01       	movw	r22, r12
 8b4:	80 e9       	ldi	r24, 0x90	; 144
 8b6:	92 e0       	ldi	r25, 0x02	; 2
 8b8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <mac_set_appeui>
				attach_ending(lm_msg);
 8bc:	80 e9       	ldi	r24, 0x90	; 144
 8be:	92 e0       	ldi	r25, 0x02	; 2
 8c0:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <attach_ending>
				util_transmit_msg(lm_msg);
 8c4:	80 e9       	ldi	r24, 0x90	; 144
 8c6:	92 e0       	ldi	r25, 0x02	; 2
 8c8:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 8cc:	4c e0       	ldi	r20, 0x0C	; 12
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	66 e0       	ldi	r22, 0x06	; 6
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	ce 01       	movw	r24, r28
 8d6:	01 96       	adiw	r24, 0x01	; 1
 8d8:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8dc:	2e ea       	ldi	r18, 0xAE	; 174
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	ce 01       	movw	r24, r28
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8ec:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8ee:	5e cf       	rjmp	.-324    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	80 e9       	ldi	r24, 0x90	; 144
 8f4:	92 e0       	ldi	r25, 0x02	; 2
 8f6:	0e 94 88 1a 	call	0x3510	; 0x3510 <mac_set_ADR>
				attach_ending(lm_msg);
 8fa:	80 e9       	ldi	r24, 0x90	; 144
 8fc:	92 e0       	ldi	r25, 0x02	; 2
 8fe:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <attach_ending>
				util_transmit_msg(lm_msg);
 902:	80 e9       	ldi	r24, 0x90	; 144
 904:	92 e0       	ldi	r25, 0x02	; 2
 906:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 90a:	4c e0       	ldi	r20, 0x0C	; 12
 90c:	50 e0       	ldi	r21, 0x00	; 0
 90e:	67 e0       	ldi	r22, 0x07	; 7
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	ce 01       	movw	r24, r28
 914:	01 96       	adiw	r24, 0x01	; 1
 916:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 91a:	2e ea       	ldi	r18, 0xAE	; 174
 91c:	32 e0       	ldi	r19, 0x02	; 2
 91e:	40 e0       	ldi	r20, 0x00	; 0
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	ce 01       	movw	r24, r28
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 92a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 92c:	3f cf       	rjmp	.-386    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 92e:	41 eb       	ldi	r20, 0xB1	; 177
 930:	52 e0       	ldi	r21, 0x02	; 2
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	80 e9       	ldi	r24, 0x90	; 144
 936:	92 e0       	ldi	r25, 0x02	; 2
 938:	0e 94 0b 1a 	call	0x3416	; 0x3416 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 93c:	80 e9       	ldi	r24, 0x90	; 144
 93e:	92 e0       	ldi	r25, 0x02	; 2
 940:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 944:	4c e0       	ldi	r20, 0x0C	; 12
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	68 e0       	ldi	r22, 0x08	; 8
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	ce 01       	movw	r24, r28
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 954:	2e ea       	ldi	r18, 0xAE	; 174
 956:	32 e0       	ldi	r19, 0x02	; 2
 958:	40 e0       	ldi	r20, 0x00	; 0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	ce 01       	movw	r24, r28
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 964:	11 e0       	ldi	r17, 0x01	; 1
			break;
 966:	22 cf       	rjmp	.-444    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 968:	4a eb       	ldi	r20, 0xBA	; 186
 96a:	52 e0       	ldi	r21, 0x02	; 2
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	80 e9       	ldi	r24, 0x90	; 144
 970:	92 e0       	ldi	r25, 0x02	; 2
 972:	0e 94 0b 1a 	call	0x3416	; 0x3416 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 976:	80 e9       	ldi	r24, 0x90	; 144
 978:	92 e0       	ldi	r25, 0x02	; 2
 97a:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 97e:	4a e0       	ldi	r20, 0x0A	; 10
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	69 e0       	ldi	r22, 0x09	; 9
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	ce 01       	movw	r24, r28
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 98e:	2e ea       	ldi	r18, 0xAE	; 174
 990:	32 e0       	ldi	r19, 0x02	; 2
 992:	40 e0       	ldi	r20, 0x00	; 0
 994:	60 e0       	ldi	r22, 0x00	; 0
 996:	ce 01       	movw	r24, r28
 998:	01 96       	adiw	r24, 0x01	; 1
 99a:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 99e:	11 e0       	ldi	r17, 0x01	; 1
			break;
 9a0:	05 cf       	rjmp	.-502    	; 0x7ac <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 9a2:	4a e0       	ldi	r20, 0x0A	; 10
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	6b e0       	ldi	r22, 0x0B	; 11
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	ce 01       	movw	r24, r28
 9ac:	01 96       	adiw	r24, 0x01	; 1
 9ae:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 9b2:	28 ec       	ldi	r18, 0xC8	; 200
 9b4:	32 e0       	ldi	r19, 0x02	; 2
 9b6:	40 e0       	ldi	r20, 0x00	; 0
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	ce 01       	movw	r24, r28
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 9c2:	11 e0       	ldi	r17, 0x01	; 1
			break;
 9c4:	f3 ce       	rjmp	.-538    	; 0x7ac <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
 9c6:	80 e9       	ldi	r24, 0x90	; 144
 9c8:	92 e0       	ldi	r25, 0x02	; 2
 9ca:	0e 94 68 14 	call	0x28d0	; 0x28d0 <util_parse_err>
 9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 9d0:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <uart0_hal_message_ready>
 9d4:	88 23       	and	r24, r24
 9d6:	09 f4       	brne	.+2      	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9d8:	e9 ce       	rjmp	.-558    	; 0x7ac <JN_join_network+0x2a>
					util_read_msg(lm_msg);
 9da:	80 e9       	ldi	r24, 0x90	; 144
 9dc:	92 e0       	ldi	r25, 0x02	; 2
 9de:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
 9e2:	60 e9       	ldi	r22, 0x90	; 144
 9e4:	72 e0       	ldi	r23, 0x02	; 2
 9e6:	ce 01       	movw	r24, r28
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	0e 94 af 13 	call	0x275e	; 0x275e <util_matchMessage>
 9ee:	18 2f       	mov	r17, r24
 9f0:	dd ce       	rjmp	.-582    	; 0x7ac <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 9f6:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 9f8:	28 96       	adiw	r28, 0x08	; 8
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	f8 94       	cli
 9fe:	de bf       	out	0x3e, r29	; 62
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	cd bf       	out	0x3d, r28	; 61
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	1f 91       	pop	r17
 a0a:	ff 90       	pop	r15
 a0c:	ef 90       	pop	r14
 a0e:	df 90       	pop	r13
 a10:	cf 90       	pop	r12
 a12:	bf 90       	pop	r11
 a14:	af 90       	pop	r10
 a16:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000039e6 <set_block_uplink>:
bool LM_is_free(){
	return busy==false;
}

static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    39e6:	8d e6       	ldi	r24, 0x6D	; 109
    39e8:	9c e1       	ldi	r25, 0x1C	; 28
    39ea:	0e 94 94 14 	call	0x2928	; 0x2928 <TC2_HAL_subscribe>
    39ee:	80 93 bd 0d 	sts	0x0DBD, r24	; 0x800dbd <subPointer>
	busy=true;
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <busy>
	cnt=0;
    39f8:	10 92 bf 0d 	sts	0x0DBF, r1	; 0x800dbf <cnt>
    39fc:	08 95       	ret

Disassembly of section .text.block_uplink:

000038da <block_uplink>:
}

static void block_uplink(){
	cnt++;
    38da:	80 91 bf 0d 	lds	r24, 0x0DBF	; 0x800dbf <cnt>
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	80 93 bf 0d 	sts	0x0DBF, r24	; 0x800dbf <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    38e4:	86 30       	cpi	r24, 0x06	; 6
    38e6:	30 f0       	brcs	.+12     	; 0x38f4 <block_uplink+0x1a>
		busy=false;
    38e8:	10 92 be 0d 	sts	0x0DBE, r1	; 0x800dbe <busy>
		TC2_HAL_cancel(subPointer);
    38ec:	80 91 bd 0d 	lds	r24, 0x0DBD	; 0x800dbd <subPointer>
    38f0:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <TC2_HAL_cancel>
    38f4:	08 95       	ret

Disassembly of section .text.LM_join_network:

00003cec <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    3cec:	0e 94 c1 03 	call	0x782	; 0x782 <JN_join_network>
}
    3cf0:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

000035fe <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    3606:	90 91 be 0d 	lds	r25, 0x0DBE	; 0x800dbe <busy>
    360a:	91 11       	cpse	r25, r1
    360c:	0a c0       	rjmp	.+20     	; 0x3622 <LM_send_uplink+0x24>
    360e:	16 2f       	mov	r17, r22
    3610:	e9 01       	movw	r28, r18
	set_block_uplink();
    3612:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    3616:	41 2f       	mov	r20, r17
    3618:	be 01       	movw	r22, r28
    361a:	84 e6       	ldi	r24, 0x64	; 100
    361c:	0e 94 14 0a 	call	0x1428	; 0x1428 <SU_send_uplink>
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    3622:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00003cf2 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    3cf2:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <SC_put_to_sleep>
}
    3cf6:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00003cf8 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    3cf8:	0e 94 24 1a 	call	0x3448	; 0x3448 <SC_wake_up>
}
    3cfc:	08 95       	ret

Disassembly of section .text.LM_is_free:

00003c70 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    3c70:	90 91 be 0d 	lds	r25, 0x0DBE	; 0x800dbe <busy>
}
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	89 27       	eor	r24, r25
    3c78:	08 95       	ret

Disassembly of section .text.tohex:

0000221a <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    221a:	6f 92       	push	r6
    221c:	7f 92       	push	r7
    221e:	8f 92       	push	r8
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	7c 01       	movw	r14, r24
    222e:	3a 01       	movw	r6, r20
    2230:	86 2e       	mov	r8, r22
    2232:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    2234:	c0 e0       	ldi	r28, 0x00	; 0
    2236:	d0 e0       	ldi	r29, 0x00	; 0
    2238:	25 c0       	rjmp	.+74     	; 0x2284 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    223a:	a8 2d       	mov	r26, r8
    223c:	c3 01       	movw	r24, r6
    223e:	8c 0f       	add	r24, r28
    2240:	9d 1f       	adc	r25, r29
    2242:	a1 1d       	adc	r26, r1
    2244:	d7 fd       	sbrc	r29, 7
    2246:	aa 95       	dec	r26
    2248:	fc 01       	movw	r30, r24
    224a:	24 91       	lpm	r18, Z
    224c:	a7 fd       	sbrc	r26, 7
    224e:	20 81       	ld	r18, Z
    2250:	ce 01       	movw	r24, r28
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	1f 92       	push	r1
    2258:	2f 93       	push	r18
    225a:	26 e2       	ldi	r18, 0x26	; 38
    225c:	32 e0       	ldi	r19, 0x02	; 2
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	4f 93       	push	r20
    2262:	3f 93       	push	r19
    2264:	2f 93       	push	r18
    2266:	8e 0d       	add	r24, r14
    2268:	9f 1d       	adc	r25, r15
    226a:	9f 93       	push	r25
    226c:	8f 93       	push	r24
    226e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    2272:	21 96       	adiw	r28, 0x01	; 1
    2274:	8d b7       	in	r24, 0x3d	; 61
    2276:	9e b7       	in	r25, 0x3e	; 62
    2278:	07 96       	adiw	r24, 0x07	; 7
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	9e bf       	out	0x3e, r25	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	8d bf       	out	0x3d, r24	; 61
    2284:	c0 17       	cp	r28, r16
    2286:	d1 07       	cpc	r29, r17
    2288:	c4 f2       	brlt	.-80     	; 0x223a <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	ff 90       	pop	r15
    2294:	ef 90       	pop	r14
    2296:	8f 90       	pop	r8
    2298:	7f 90       	pop	r7
    229a:	6f 90       	pop	r6
    229c:	08 95       	ret

Disassembly of section .text.attach_ending:

000038f6 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    38f6:	fc 01       	movw	r30, r24
    38f8:	01 90       	ld	r0, Z+
    38fa:	00 20       	and	r0, r0
    38fc:	e9 f7       	brne	.-6      	; 0x38f8 <attach_ending+0x2>
    38fe:	cf 01       	movw	r24, r30
    3900:	23 e0       	ldi	r18, 0x03	; 3
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	4b e2       	ldi	r20, 0x2B	; 43
    3906:	52 e0       	ldi	r21, 0x02	; 2
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	0e 94 6f 1a 	call	0x34de	; 0x34de <memcpy>
    3910:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00003416 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    341c:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    3420:	fe 01       	movw	r30, r28
    3422:	01 90       	ld	r0, Z+
    3424:	00 20       	and	r0, r0
    3426:	e9 f7       	brne	.-6      	; 0x3422 <cmd_with_ending+0xc>
    3428:	cf 01       	movw	r24, r30
    342a:	23 e0       	ldi	r18, 0x03	; 3
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	4b e2       	ldi	r20, 0x2B	; 43
    3430:	52 e0       	ldi	r21, 0x02	; 2
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	0e 94 6f 1a 	call	0x34de	; 0x34de <memcpy>
	return strlen(buffer);
    343a:	be 01       	movw	r22, r28
    343c:	80 e8       	ldi	r24, 0x80	; 128
    343e:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
}
    3442:	df 91       	pop	r29
    3444:	cf 91       	pop	r28
    3446:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00002700 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    2704:	44 36       	cpi	r20, 0x64	; 100
    2706:	51 05       	cpc	r21, r1
    2708:	61 05       	cpc	r22, r1
    270a:	71 05       	cpc	r23, r1
    270c:	18 f1       	brcs	.+70     	; 0x2754 <sys_sleep_cmd+0x54>
    270e:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    2710:	7f 93       	push	r23
    2712:	6f 93       	push	r22
    2714:	5f 93       	push	r21
    2716:	4f 93       	push	r20
    2718:	8e e2       	ldi	r24, 0x2E	; 46
    271a:	92 e0       	ldi	r25, 0x02	; 2
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	af 93       	push	r26
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	88 e3       	ldi	r24, 0x38	; 56
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	af 93       	push	r26
    272c:	9f 93       	push	r25
    272e:	8f 93       	push	r24
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <sprintf>
    return strlen(buffer);
    2738:	be 01       	movw	r22, r28
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2740:	2d b7       	in	r18, 0x3d	; 61
    2742:	3e b7       	in	r19, 0x3e	; 62
    2744:	24 5f       	subi	r18, 0xF4	; 244
    2746:	3f 4f       	sbci	r19, 0xFF	; 255
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	3e bf       	out	0x3e, r19	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	2d bf       	out	0x3d, r18	; 61
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    2754:	8f ef       	ldi	r24, 0xFF	; 255
    2756:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00002a68 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    2a72:	2f 93       	push	r18
    2a74:	1f 93       	push	r17
    2a76:	0f 93       	push	r16
    2a78:	6f 93       	push	r22
    2a7a:	5f 93       	push	r21
    2a7c:	4f 93       	push	r20
    2a7e:	8f e3       	ldi	r24, 0x3F	; 63
    2a80:	92 e0       	ldi	r25, 0x02	; 2
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	af 93       	push	r26
    2a86:	9f 93       	push	r25
    2a88:	8f 93       	push	r24
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <sprintf>
    return strlen(buffer);
    2a92:	be 01       	movw	r22, r28
    2a94:	80 e8       	ldi	r24, 0x80	; 128
    2a96:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2a9a:	2d b7       	in	r18, 0x3d	; 61
    2a9c:	3e b7       	in	r19, 0x3e	; 62
    2a9e:	25 5f       	subi	r18, 0xF5	; 245
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	3e bf       	out	0x3e, r19	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	2d bf       	out	0x3d, r18	; 61
}
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00002d0e <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    2d1e:	6b 01       	movw	r12, r22
    2d20:	80 e8       	ldi	r24, 0x80	; 128
    2d22:	e8 2e       	mov	r14, r24
    2d24:	8e 2d       	mov	r24, r14
    2d26:	b6 01       	movw	r22, r12
    2d28:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2d2c:	40 97       	sbiw	r24, 0x10	; 16
    2d2e:	49 f4       	brne	.+18     	; 0x2d42 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    2d30:	2e 2d       	mov	r18, r14
    2d32:	86 01       	movw	r16, r12
    2d34:	45 e4       	ldi	r20, 0x45	; 69
    2d36:	52 e0       	ldi	r21, 0x02	; 2
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <mac_set_parameter>
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00002d56 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    2d66:	6b 01       	movw	r12, r22
    2d68:	80 e8       	ldi	r24, 0x80	; 128
    2d6a:	e8 2e       	mov	r14, r24
    2d6c:	8e 2d       	mov	r24, r14
    2d6e:	b6 01       	movw	r22, r12
    2d70:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2d74:	40 97       	sbiw	r24, 0x10	; 16
    2d76:	49 f4       	brne	.+18     	; 0x2d8a <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    2d78:	2e 2d       	mov	r18, r14
    2d7a:	86 01       	movw	r16, r12
    2d7c:	44 e5       	ldi	r20, 0x54	; 84
    2d7e:	52 e0       	ldi	r21, 0x02	; 2
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	ce 01       	movw	r24, r28
    2d84:	0e 94 34 15 	call	0x2a68	; 0x2a68 <mac_set_parameter>
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00002d9e <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    2d9e:	cf 92       	push	r12
    2da0:	df 92       	push	r13
    2da2:	ef 92       	push	r14
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    2dae:	6b 01       	movw	r12, r22
    2db0:	80 e8       	ldi	r24, 0x80	; 128
    2db2:	e8 2e       	mov	r14, r24
    2db4:	8e 2d       	mov	r24, r14
    2db6:	b6 01       	movw	r22, r12
    2db8:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2dbc:	80 97       	sbiw	r24, 0x20	; 32
    2dbe:	49 f4       	brne	.+18     	; 0x2dd2 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    2dc0:	2e 2d       	mov	r18, r14
    2dc2:	86 01       	movw	r16, r12
    2dc4:	43 e6       	ldi	r20, 0x63	; 99
    2dc6:	52 e0       	ldi	r21, 0x02	; 2
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0e 94 34 15 	call	0x2a68	; 0x2a68 <mac_set_parameter>
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    2dd2:	8f ef       	ldi	r24, 0xFF	; 255
    2dd4:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
    2de4:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00003510 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
	if(state==0){
    3514:	61 11       	cpse	r22, r1
    3516:	09 c0       	rjmp	.+18     	; 0x352a <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    3518:	02 e7       	ldi	r16, 0x72	; 114
    351a:	12 e0       	ldi	r17, 0x02	; 2
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	46 e7       	ldi	r20, 0x76	; 118
    3520:	52 e0       	ldi	r21, 0x02	; 2
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	0e 94 34 15 	call	0x2a68	; 0x2a68 <mac_set_parameter>
    3528:	08 c0       	rjmp	.+16     	; 0x353a <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    352a:	02 e8       	ldi	r16, 0x82	; 130
    352c:	12 e0       	ldi	r17, 0x02	; 2
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	46 e7       	ldi	r20, 0x76	; 118
    3532:	52 e0       	ldi	r21, 0x02	; 2
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	0e 94 34 15 	call	0x2a68	; 0x2a68 <mac_set_parameter>
	}
}
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00001caa <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	c7 56       	subi	r28, 0x67	; 103
    1cbe:	d1 09       	sbc	r29, r1
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    1ccc:	9f ef       	ldi	r25, 0xFF	; 255
    1cce:	96 0f       	add	r25, r22
    1cd0:	9f 3d       	cpi	r25, 0xDF	; 223
    1cd2:	68 f5       	brcc	.+90     	; 0x1d2e <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
    1cd6:	92 0f       	add	r25, r18
    1cd8:	93 33       	cpi	r25, 0x33	; 51
    1cda:	60 f5       	brcc	.+88     	; 0x1d34 <mac_tx_confirmed+0x8a>
    1cdc:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	60 e8       	ldi	r22, 0x80	; 128
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	7c 01       	movw	r14, r24
    1ce8:	0e 94 0d 11 	call	0x221a	; 0x221a <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    1cec:	c7 01       	movw	r24, r14
    1cee:	a0 e8       	ldi	r26, 0x80	; 128
    1cf0:	af 93       	push	r26
    1cf2:	9f 93       	push	r25
    1cf4:	ef 92       	push	r14
    1cf6:	1f 92       	push	r1
    1cf8:	df 92       	push	r13
    1cfa:	85 e8       	ldi	r24, 0x85	; 133
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	a0 e0       	ldi	r26, 0x00	; 0
    1d00:	af 93       	push	r26
    1d02:	9f 93       	push	r25
    1d04:	8f 93       	push	r24
    1d06:	80 e9       	ldi	r24, 0x90	; 144
    1d08:	92 e0       	ldi	r25, 0x02	; 2
    1d0a:	a0 e0       	ldi	r26, 0x00	; 0
    1d0c:	af 93       	push	r26
    1d0e:	9f 93       	push	r25
    1d10:	8f 93       	push	r24
    1d12:	1f 93       	push	r17
    1d14:	0f 93       	push	r16
    1d16:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <sprintf>
    
	
    return strlen(buffer);
    1d1a:	b8 01       	movw	r22, r16
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1d38:	c9 59       	subi	r28, 0x99	; 153
    1d3a:	df 4f       	sbci	r29, 0xFF	; 255
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	08 95       	ret

Disassembly of section .text.beginsWidth:

00002c7c <beginsWidth>:
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    2c7c:	6f 92       	push	r6
    2c7e:	7f 92       	push	r7
    2c80:	8f 92       	push	r8
    2c82:	cf 92       	push	r12
    2c84:	df 92       	push	r13
    2c86:	ef 92       	push	r14
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	3b 01       	movw	r6, r22
    2c8e:	88 2e       	mov	r8, r24
    2c90:	69 01       	movw	r12, r18
    2c92:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2c94:	84 2f       	mov	r24, r20
    2c96:	b9 01       	movw	r22, r18
    2c98:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	4e 2d       	mov	r20, r14
    2ca0:	96 01       	movw	r18, r12
    2ca2:	88 2d       	mov	r24, r8
    2ca4:	b3 01       	movw	r22, r6
    2ca6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <strncmp>
    2caa:	21 e0       	ldi	r18, 0x01	; 1
    2cac:	89 2b       	or	r24, r25
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <beginsWidth+0x36>
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	82 2f       	mov	r24, r18
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	8f 90       	pop	r8
    2cc0:	7f 90       	pop	r7
    2cc2:	6f 90       	pop	r6
    2cc4:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00002632 <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    2632:	cf 92       	push	r12
    2634:	df 92       	push	r13
    2636:	ef 92       	push	r14
    2638:	6b 01       	movw	r12, r22
    263a:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    263c:	21 ed       	ldi	r18, 0xD1	; 209
    263e:	32 e0       	ldi	r19, 0x02	; 2
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    2646:	89 2b       	or	r24, r25
    2648:	e9 f0       	breq	.+58     	; 0x2684 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    264a:	2c ed       	ldi	r18, 0xDC	; 220
    264c:	32 e0       	ldi	r19, 0x02	; 2
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	8e 2d       	mov	r24, r14
    2652:	b6 01       	movw	r22, r12
    2654:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    2658:	89 2b       	or	r24, r25
    265a:	b1 f0       	breq	.+44     	; 0x2688 <decode_tx_response+0x56>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    265c:	24 ee       	ldi	r18, 0xE4	; 228
    265e:	32 e0       	ldi	r19, 0x02	; 2
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	8e 2d       	mov	r24, r14
    2664:	b6 01       	movw	r22, r12
    2666:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <beginsWidth>
    266a:	81 11       	cpse	r24, r1
    266c:	0f c0       	rjmp	.+30     	; 0x268c <decode_tx_response+0x5a>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
    266e:	2b ee       	ldi	r18, 0xEB	; 235
    2670:	32 e0       	ldi	r19, 0x02	; 2
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	8e 2d       	mov	r24, r14
    2676:	b6 01       	movw	r22, r12
    2678:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <beginsWidth>
    267c:	88 23       	and	r24, r24
    267e:	41 f0       	breq	.+16     	; 0x2690 <decode_tx_response+0x5e>
    2680:	89 e0       	ldi	r24, 0x09	; 9
    2682:	07 c0       	rjmp	.+14     	; 0x2692 <decode_tx_response+0x60>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2684:	87 e0       	ldi	r24, 0x07	; 7
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2688:	88 e0       	ldi	r24, 0x08	; 8
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <decode_tx_response+0x60>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <decode_tx_response+0x60>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
    2690:	86 e0       	ldi	r24, 0x06	; 6
}
    2692:	ef 90       	pop	r14
    2694:	df 90       	pop	r13
    2696:	cf 90       	pop	r12
    2698:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00001428 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	28 97       	sbiw	r28, 0x08	; 8
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	d8 2e       	mov	r13, r24
    1448:	7b 01       	movw	r14, r22
    144a:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    144c:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    144e:	e1 2f       	mov	r30, r17
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	ea 30       	cpi	r30, 0x0A	; 10
    1454:	f1 05       	cpc	r31, r1
    1456:	d8 f7       	brcc	.-10     	; 0x144e <SU_send_uplink+0x26>
    1458:	e5 5b       	subi	r30, 0xB5	; 181
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    1460:	20 2f       	mov	r18, r16
    1462:	a7 01       	movw	r20, r14
    1464:	6d 2d       	mov	r22, r13
    1466:	80 e9       	ldi	r24, 0x90	; 144
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <mac_tx_confirmed>
				attach_ending(lm_msg);
    146e:	80 e9       	ldi	r24, 0x90	; 144
    1470:	92 e0       	ldi	r25, 0x02	; 2
    1472:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <attach_ending>
				util_transmit_msg(lm_msg);
    1476:	80 e9       	ldi	r24, 0x90	; 144
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    148e:	2c ef       	ldi	r18, 0xFC	; 252
    1490:	32 e0       	ldi	r19, 0x02	; 2
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    149e:	15 e0       	ldi	r17, 0x05	; 5
			break;
    14a0:	d6 cf       	rjmp	.-84     	; 0x144e <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    14a2:	41 e0       	ldi	r20, 0x01	; 1
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	64 e0       	ldi	r22, 0x04	; 4
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	32 e0       	ldi	r19, 0x02	; 2
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    14c2:	15 e0       	ldi	r17, 0x05	; 5
			break;
    14c4:	c4 cf       	rjmp	.-120    	; 0x144e <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    14c6:	60 e9       	ldi	r22, 0x90	; 144
    14c8:	72 e0       	ldi	r23, 0x02	; 2
    14ca:	80 e8       	ldi	r24, 0x80	; 128
    14cc:	0e 94 19 13 	call	0x2632	; 0x2632 <decode_tx_response>
    14d0:	18 2f       	mov	r17, r24
			break;
    14d2:	bd cf       	rjmp	.-134    	; 0x144e <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    14d4:	85 e0       	ldi	r24, 0x05	; 5
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <SU_send_uplink+0xe0>
				
			case SU_INV_DATA_LEN:
				return LM_STATUS_INV_DATA_LEN;
    14d8:	86 e0       	ldi	r24, 0x06	; 6
    14da:	16 c0       	rjmp	.+44     	; 0x1508 <SU_send_uplink+0xe0>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <SU_send_uplink+0xe0>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    14e0:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <uart0_hal_message_ready>
    14e4:	88 23       	and	r24, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <SU_send_uplink+0xc2>
    14e8:	b2 cf       	rjmp	.-156    	; 0x144e <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    14ea:	80 e9       	ldi	r24, 0x90	; 144
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    14f2:	60 e9       	ldi	r22, 0x90	; 144
    14f4:	72 e0       	ldi	r23, 0x02	; 2
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	0e 94 af 13 	call	0x275e	; 0x275e <util_matchMessage>
    14fe:	18 2f       	mov	r17, r24
    1500:	a6 cf       	rjmp	.-180    	; 0x144e <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <SU_send_uplink+0xe0>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    1506:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    1508:	28 96       	adiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00002b9c <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	5c e5       	ldi	r21, 0x5C	; 92
    2ba0:	66 e2       	ldi	r22, 0x26	; 38
    2ba2:	75 e0       	ldi	r23, 0x05	; 5
    2ba4:	80 e9       	ldi	r24, 0x90	; 144
    2ba6:	92 e0       	ldi	r25, 0x02	; 2
    2ba8:	0e 94 80 13 	call	0x2700	; 0x2700 <sys_sleep_cmd>
	attach_ending(lm_msg);
    2bac:	80 e9       	ldi	r24, 0x90	; 144
    2bae:	92 e0       	ldi	r25, 0x02	; 2
    2bb0:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <attach_ending>
	util_transmit_msg(lm_msg);
    2bb4:	80 e9       	ldi	r24, 0x90	; 144
    2bb6:	92 e0       	ldi	r25, 0x02	; 2
    2bb8:	0e 94 89 1c 	call	0x3912	; 0x3912 <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    2bbc:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <uart0_hal_message_ready>
    2bc0:	88 23       	and	r24, r24
    2bc2:	e1 f3       	breq	.-8      	; 0x2bbc <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    2bc4:	80 e9       	ldi	r24, 0x90	; 144
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2bcc:	60 e9       	ldi	r22, 0x90	; 144
    2bce:	72 e0       	ldi	r23, 0x02	; 2
    2bd0:	80 e8       	ldi	r24, 0x80	; 128
    2bd2:	23 e3       	ldi	r18, 0x33	; 51
    2bd4:	33 e0       	ldi	r19, 0x03	; 3
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    2bdc:	89 2b       	or	r24, r25
    2bde:	11 f4       	brne	.+4      	; 0x2be4 <SC_put_to_sleep+0x48>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	08 95       	ret
	return LM_STATUS_ERROR;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
}
    2be6:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00003448 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    3448:	85 e5       	ldi	r24, 0x55	; 85
    344a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    344e:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <uart0_hal_message_ready>
    3452:	88 23       	and	r24, r24
    3454:	e1 f3       	breq	.-8      	; 0x344e <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    3456:	80 e9       	ldi	r24, 0x90	; 144
    3458:	92 e0       	ldi	r25, 0x02	; 2
    345a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    345e:	60 e9       	ldi	r22, 0x90	; 144
    3460:	72 e0       	ldi	r23, 0x02	; 2
    3462:	80 e8       	ldi	r24, 0x80	; 128
    3464:	23 e3       	ldi	r18, 0x33	; 51
    3466:	33 e0       	ldi	r19, 0x03	; 3
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    346e:	89 2b       	or	r24, r25
    3470:	11 f4       	brne	.+4      	; 0x3476 <SC_wake_up+0x2e>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	08 95       	ret
	return LM_STATUS_ERROR;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

00002efe <LM_strbeginswith>:
	}
	
	return LM_STATUS_FATAL_ERROR;
}

static bool LM_strbeginswith(char *s1, const char *s2){
    2efe:	cf 92       	push	r12
    2f00:	df 92       	push	r13
    2f02:	ef 92       	push	r14
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	ec 01       	movw	r28, r24
    2f0e:	6a 01       	movw	r12, r20
    2f10:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2f12:	86 2f       	mov	r24, r22
    2f14:	ba 01       	movw	r22, r20
    2f16:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    2f1a:	8c 01       	movw	r16, r24
    2f1c:	be 01       	movw	r22, r28
    2f1e:	80 e8       	ldi	r24, 0x80	; 128
    2f20:	4e 2d       	mov	r20, r14
    2f22:	96 01       	movw	r18, r12
    2f24:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <strncmp>
    2f28:	21 e0       	ldi	r18, 0x01	; 1
    2f2a:	89 2b       	or	r24, r25
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <LM_strbeginswith+0x32>
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	82 2f       	mov	r24, r18
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ef 90       	pop	r14
    2f3c:	df 90       	pop	r13
    2f3e:	cf 90       	pop	r12
    2f40:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00003c14 <util_setPendingStates>:




void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    3c14:	fc 01       	movw	r30, r24
    3c16:	71 83       	std	Z+1, r23	; 0x01
    3c18:	60 83       	st	Z, r22
	sd->failure_state=failed;
    3c1a:	53 83       	std	Z+3, r21	; 0x03
    3c1c:	42 83       	std	Z+2, r20	; 0x02
    3c1e:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

00003c20 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    3c20:	fc 01       	movw	r30, r24
    3c22:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    3c24:	25 83       	std	Z+5, r18	; 0x05
    3c26:	36 83       	std	Z+6, r19	; 0x06
    3c28:	47 83       	std	Z+7, r20	; 0x07
    3c2a:	08 95       	ret

Disassembly of section .text.util_matchMessage:

0000275e <util_matchMessage>:
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	ec 01       	movw	r28, r24
    2764:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    2766:	9c 81       	ldd	r25, Y+4	; 0x04
    2768:	91 30       	cpi	r25, 0x01	; 1
    276a:	91 f0       	breq	.+36     	; 0x2790 <util_matchMessage+0x32>
    276c:	18 f0       	brcs	.+6      	; 0x2774 <util_matchMessage+0x16>
    276e:	92 30       	cpi	r25, 0x02	; 2
    2770:	e9 f0       	breq	.+58     	; 0x27ac <util_matchMessage+0x4e>
    2772:	1f c0       	rjmp	.+62     	; 0x27b2 <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    2774:	2d 81       	ldd	r18, Y+5	; 0x05
    2776:	3e 81       	ldd	r19, Y+6	; 0x06
    2778:	4f 81       	ldd	r20, Y+7	; 0x07
    277a:	80 e8       	ldi	r24, 0x80	; 128
    277c:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    2780:	89 2b       	or	r24, r25
    2782:	19 f4       	brne	.+6      	; 0x278a <util_matchMessage+0x2c>
    2784:	88 81       	ld	r24, Y
    2786:	99 81       	ldd	r25, Y+1	; 0x01
    2788:	16 c0       	rjmp	.+44     	; 0x27b6 <util_matchMessage+0x58>
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	9b 81       	ldd	r25, Y+3	; 0x03
    278e:	13 c0       	rjmp	.+38     	; 0x27b6 <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    2790:	4d 81       	ldd	r20, Y+5	; 0x05
    2792:	5e 81       	ldd	r21, Y+6	; 0x06
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	cf 01       	movw	r24, r30
    2798:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LM_strbeginswith>
    279c:	88 23       	and	r24, r24
    279e:	19 f0       	breq	.+6      	; 0x27a6 <util_matchMessage+0x48>
    27a0:	88 81       	ld	r24, Y
    27a2:	99 81       	ldd	r25, Y+1	; 0x01
    27a4:	08 c0       	rjmp	.+16     	; 0x27b6 <util_matchMessage+0x58>
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    27ac:	88 81       	ld	r24, Y
    27ae:	99 81       	ldd	r25, Y+1	; 0x01
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

00003912 <util_transmit_msg>:

void util_transmit_msg(char msg[]){
    3912:	cf 93       	push	r28
    3914:	df 93       	push	r29
    3916:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    3918:	bc 01       	movw	r22, r24
    391a:	80 e8       	ldi	r24, 0x80	; 128
    391c:	0e 94 16 1b 	call	0x362c	; 0x362c <strlen>
    3920:	68 2f       	mov	r22, r24
    3922:	ce 01       	movw	r24, r28
    3924:	0e 94 d7 19 	call	0x33ae	; 0x33ae <uart0_hal_send_message>
}
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	08 95       	ret

Disassembly of section .text.util_read_msg:

00003cfe <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
    3cfe:	0e 94 41 1b 	call	0x3682	; 0x3682 <uart0_hal_read_message_as_str>
    3d02:	08 95       	ret

Disassembly of section .text.util_parse_err:

000028d0 <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    28d6:	6c 01       	movw	r12, r24
    28d8:	20 e8       	ldi	r18, 0x80	; 128
    28da:	e2 2e       	mov	r14, r18
    28dc:	29 e0       	ldi	r18, 0x09	; 9
    28de:	33 e0       	ldi	r19, 0x03	; 3
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	8e 2d       	mov	r24, r14
    28e4:	b6 01       	movw	r22, r12
    28e6:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    28ea:	89 2b       	or	r24, r25
    28ec:	a1 f0       	breq	.+40     	; 0x2916 <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    28ee:	24 e1       	ldi	r18, 0x14	; 20
    28f0:	33 e0       	ldi	r19, 0x03	; 3
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	8e 2d       	mov	r24, r14
    28f6:	b6 01       	movw	r22, r12
    28f8:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    28fc:	89 2b       	or	r24, r25
    28fe:	69 f0       	breq	.+26     	; 0x291a <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    2900:	2b e1       	ldi	r18, 0x1B	; 27
    2902:	33 e0       	ldi	r19, 0x03	; 3
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	8e 2d       	mov	r24, r14
    2908:	b6 01       	movw	r22, r12
    290a:	0e 94 05 18 	call	0x300a	; 0x300a <strcmp>
    290e:	89 2b       	or	r24, r25
    2910:	31 f4       	brne	.+12     	; 0x291e <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    2912:	84 e0       	ldi	r24, 0x04	; 4
    2914:	05 c0       	rjmp	.+10     	; 0x2920 <util_parse_err+0x50>
	uart0_hal_read_message_as_str((uint8_t*) msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    291e:	82 e0       	ldi	r24, 0x02	; 2
}
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	08 95       	ret

Disassembly of section .text.get_group_id:

00003d04 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    3d04:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <_groupId>
    3d08:	08 95       	ret

Disassembly of section .text.set_group_id:

00003d0a <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    3d0a:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <_groupId>
    3d0e:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

0000347a <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    347a:	0f 93       	push	r16
    347c:	1f 93       	push	r17
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	8c 01       	movw	r16, r24
    3484:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    3486:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <get_group_id>
    348a:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    348c:	2d 2f       	mov	r18, r29
    348e:	a8 01       	movw	r20, r16
    3490:	68 2f       	mov	r22, r24
    3492:	88 e5       	ldi	r24, 0x58	; 88
    3494:	93 e0       	ldi	r25, 0x03	; 3
    3496:	0e 94 43 06 	call	0xc86	; 0xc86 <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	8c 0f       	add	r24, r28
    349e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <set_group_id>
}
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000024ee <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	1f 93       	push	r17
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	2a 97       	sbiw	r28, 0x0a	; 10
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	18 2f       	mov	r17, r24
    250a:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    250c:	9e 01       	movw	r18, r28
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	ab 01       	movw	r20, r22
    2514:	68 2f       	mov	r22, r24
    2516:	88 e5       	ldi	r24, 0x58	; 88
    2518:	93 e0       	ldi	r25, 0x03	; 3
    251a:	0e 94 ca 10 	call	0x2194	; 0x2194 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    251e:	9e 01       	movw	r18, r28
    2520:	27 5f       	subi	r18, 0xF7	; 247
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	ae 01       	movw	r20, r28
    2526:	49 5f       	subi	r20, 0xF9	; 249
    2528:	5f 4f       	sbci	r21, 0xFF	; 255
    252a:	61 2f       	mov	r22, r17
    252c:	88 e5       	ldi	r24, 0x58	; 88
    252e:	93 e0       	ldi	r25, 0x03	; 3
    2530:	0e 94 51 19 	call	0x32a2	; 0x32a2 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    2534:	29 85       	ldd	r18, Y+9	; 0x09
    2536:	3a 85       	ldd	r19, Y+10	; 0x0a
    2538:	4f 81       	ldd	r20, Y+7	; 0x07
    253a:	58 85       	ldd	r21, Y+8	; 0x08
    253c:	b7 01       	movw	r22, r14
    253e:	ce 01       	movw	r24, r28
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	0e 94 81 10 	call	0x2102	; 0x2102 <mrpp_data_add_int16>
}
    2546:	2a 96       	adiw	r28, 0x0a	; 10
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

0000373c <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    3742:	88 e5       	ldi	r24, 0x58	; 88
    3744:	93 e0       	ldi	r25, 0x03	; 3
    3746:	0e 94 b8 1a 	call	0x3570	; 0x3570 <mrpp_state_is_body_ready>
    374a:	88 83       	st	Y, r24
    374c:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    374e:	89 2f       	mov	r24, r25
    3750:	80 95       	com	r24
    
}
    3752:	88 1f       	adc	r24, r24
    3754:	88 27       	eor	r24, r24
    3756:	88 1f       	adc	r24, r24
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

0000206c <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	00 d0       	rcall	.+0      	; 0x2082 <MRPP_get_ready_body_package+0x16>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <MRPP_get_ready_body_package+0x18>
    2084:	1f 92       	push	r1
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	6b 01       	movw	r12, r22
    208c:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    208e:	9e 01       	movw	r18, r28
    2090:	2b 5f       	subi	r18, 0xFB	; 251
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	79 01       	movw	r14, r18
    2096:	8e 01       	movw	r16, r28
    2098:	0d 5f       	subi	r16, 0xFD	; 253
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	23 50       	subi	r18, 0x03	; 3
    209e:	31 09       	sbc	r19, r1
    20a0:	ae 01       	movw	r20, r28
    20a2:	4f 5f       	subi	r20, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255
    20a6:	bc 01       	movw	r22, r24
    20a8:	88 e5       	ldi	r24, 0x58	; 88
    20aa:	93 e0       	ldi	r25, 0x03	; 3
    20ac:	0e 94 04 09 	call	0x1208	; 0x1208 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    20b0:	88 23       	and	r24, r24
    20b2:	b1 f0       	breq	.+44     	; 0x20e0 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    20b4:	4d 81       	ldd	r20, Y+5	; 0x05
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	84 0f       	add	r24, r20
    20ba:	f5 01       	movw	r30, r10
    20bc:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    20be:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    20c2:	f6 01       	movw	r30, r12
    20c4:	80 83       	st	Z, r24
    package[1]=subId;
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	6b 81       	ldd	r22, Y+3	; 0x03
    20d2:	7c 81       	ldd	r23, Y+4	; 0x04
    20d4:	c6 01       	movw	r24, r12
    20d6:	03 96       	adiw	r24, 0x03	; 3
    20d8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mrpp_data_get>

    return true;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    20e0:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	bf 90       	pop	r11
    20fe:	af 90       	pop	r10
    2100:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

00003c2c <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	88 e5       	ldi	r24, 0x58	; 88
    3c30:	93 e0       	ldi	r25, 0x03	; 3
    3c32:	0e 94 22 1c 	call	0x3844	; 0x3844 <mrpp_state_set_body_sent>
    3c36:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

0000375e <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3764:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3768:	fc 01       	movw	r30, r24
    376a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    376c:	bf 01       	movw	r22, r30
    376e:	88 e5       	ldi	r24, 0x58	; 88
    3770:	93 e0       	ldi	r25, 0x03	; 3
    3772:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <mrpp_state_get_header>
    *package_length+=1;
    3776:	8f 5f       	subi	r24, 0xFF	; 255
    3778:	88 83       	st	Y, r24
}
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003780 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3786:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    378a:	fc 01       	movw	r30, r24
    378c:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    378e:	bf 01       	movw	r22, r30
    3790:	88 e5       	ldi	r24, 0x58	; 88
    3792:	93 e0       	ldi	r25, 0x03	; 3
    3794:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <mrpp_state_get_tail>
    *package_length+=1;
    3798:	8f 5f       	subi	r24, 0xFF	; 255
    379a:	88 83       	st	Y, r24
}
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00003c7a <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    3c7a:	88 e5       	ldi	r24, 0x58	; 88
    3c7c:	93 e0       	ldi	r25, 0x03	; 3
    3c7e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <mrpp_state_all_bodies_sent>
}
    3c82:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00002102 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    2112:	94 2f       	mov	r25, r20
    2114:	0c c0       	rjmp	.+24     	; 0x212e <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    2116:	c9 2f       	mov	r28, r25
    2118:	d0 e0       	ldi	r29, 0x00	; 0
    211a:	e4 1b       	sub	r30, r20
    211c:	f5 0b       	sbc	r31, r21
    211e:	ea 0f       	add	r30, r26
    2120:	fb 1f       	adc	r31, r27
    2122:	80 81       	ld	r24, Z
    2124:	fe 01       	movw	r30, r28
    2126:	ee 50       	subi	r30, 0x0E	; 14
    2128:	fc 4f       	sbci	r31, 0xFC	; 252
    212a:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    212c:	9f 5f       	subi	r25, 0xFF	; 255
    212e:	e9 2f       	mov	r30, r25
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	6a 01       	movw	r12, r20
    2134:	86 e0       	ldi	r24, 0x06	; 6
    2136:	c8 0e       	add	r12, r24
    2138:	d1 1c       	adc	r13, r1
    213a:	ec 15       	cp	r30, r12
    213c:	fd 05       	cpc	r31, r13
    213e:	58 f3       	brcs	.-42     	; 0x2116 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    2140:	26 50       	subi	r18, 0x06	; 6
    2142:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    2144:	36 95       	lsr	r19
    2146:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    2148:	49 5f       	subi	r20, 0xF9	; 249
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    214c:	a0 e0       	ldi	r26, 0x00	; 0
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	16 c0       	rjmp	.+44     	; 0x217e <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    2152:	cd 01       	movw	r24, r26
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	f6 01       	movw	r30, r12
    215a:	e8 0f       	add	r30, r24
    215c:	f9 1f       	adc	r31, r25
    215e:	8b 01       	movw	r16, r22
    2160:	08 0f       	add	r16, r24
    2162:	19 1f       	adc	r17, r25
    2164:	e8 01       	movw	r28, r16
    2166:	f9 80       	ldd	r15, Y+1	; 0x01
    2168:	ee 50       	subi	r30, 0x0E	; 14
    216a:	fc 4f       	sbci	r31, 0xFC	; 252
    216c:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    216e:	84 0f       	add	r24, r20
    2170:	95 1f       	adc	r25, r21
    2172:	18 81       	ld	r17, Y
    2174:	fc 01       	movw	r30, r24
    2176:	ee 50       	subi	r30, 0x0E	; 14
    2178:	fc 4f       	sbci	r31, 0xFC	; 252
    217a:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    217c:	11 96       	adiw	r26, 0x01	; 1
    217e:	a2 17       	cp	r26, r18
    2180:	b3 07       	cpc	r27, r19
    2182:	38 f3       	brcs	.-50     	; 0x2152 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003540 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	0c c0       	rjmp	.+24     	; 0x3564 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    354c:	de 01       	movw	r26, r28
    354e:	a2 0f       	add	r26, r18
    3550:	b3 1f       	adc	r27, r19
    3552:	f9 01       	movw	r30, r18
    3554:	e6 0f       	add	r30, r22
    3556:	f7 1f       	adc	r31, r23
    3558:	ee 50       	subi	r30, 0x0E	; 14
    355a:	fc 4f       	sbci	r31, 0xFC	; 252
    355c:	90 81       	ld	r25, Z
    355e:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3560:	2f 5f       	subi	r18, 0xFF	; 255
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	24 17       	cp	r18, r20
    3566:	35 07       	cpc	r19, r21
    3568:	88 f3       	brcs	.-30     	; 0x354c <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	08 95       	ret

Disassembly of section .text.add_data_types:

000017e2 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	dc 01       	movw	r26, r24
    17f4:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    17fa:	c1 2c       	mov	r12, r1
    17fc:	d1 2c       	mov	r13, r1
    17fe:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1800:	4a c0       	rjmp	.+148    	; 0x1896 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    1802:	29 2f       	mov	r18, r25
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	f9 01       	movw	r30, r18
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	ea 0f       	add	r30, r26
    181e:	fb 1f       	adc	r31, r27
    1820:	27 81       	ldd	r18, Z+7	; 0x07
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	a9 f0       	breq	.+42     	; 0x1850 <add_data_types+0x6e>
    1826:	24 30       	cpi	r18, 0x04	; 4
    1828:	21 f1       	breq	.+72     	; 0x1872 <add_data_types+0x90>
    182a:	21 30       	cpi	r18, 0x01	; 1
    182c:	91 f5       	brne	.+100    	; 0x1892 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    182e:	01 e0       	ldi	r16, 0x01	; 1
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	04 2e       	mov	r0, r20
    1834:	02 c0       	rjmp	.+4      	; 0x183a <add_data_types+0x58>
    1836:	00 0f       	add	r16, r16
    1838:	11 1f       	adc	r17, r17
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <add_data_types+0x54>
    183e:	01 2e       	mov	r0, r17
    1840:	00 0c       	add	r0, r0
    1842:	22 0b       	sbc	r18, r18
    1844:	33 0b       	sbc	r19, r19
    1846:	c0 2a       	or	r12, r16
    1848:	d1 2a       	or	r13, r17
    184a:	e2 2a       	or	r14, r18
    184c:	f3 2a       	or	r15, r19
                break;
    184e:	21 c0       	rjmp	.+66     	; 0x1892 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    1850:	02 e0       	ldi	r16, 0x02	; 2
    1852:	10 e0       	ldi	r17, 0x00	; 0
    1854:	04 2e       	mov	r0, r20
    1856:	02 c0       	rjmp	.+4      	; 0x185c <add_data_types+0x7a>
    1858:	00 0f       	add	r16, r16
    185a:	11 1f       	adc	r17, r17
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <add_data_types+0x76>
    1860:	01 2e       	mov	r0, r17
    1862:	00 0c       	add	r0, r0
    1864:	22 0b       	sbc	r18, r18
    1866:	33 0b       	sbc	r19, r19
    1868:	c0 2a       	or	r12, r16
    186a:	d1 2a       	or	r13, r17
    186c:	e2 2a       	or	r14, r18
    186e:	f3 2a       	or	r15, r19
                break;
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    1872:	03 e0       	ldi	r16, 0x03	; 3
    1874:	10 e0       	ldi	r17, 0x00	; 0
    1876:	04 2e       	mov	r0, r20
    1878:	02 c0       	rjmp	.+4      	; 0x187e <add_data_types+0x9c>
    187a:	00 0f       	add	r16, r16
    187c:	11 1f       	adc	r17, r17
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <add_data_types+0x98>
    1882:	01 2e       	mov	r0, r17
    1884:	00 0c       	add	r0, r0
    1886:	22 0b       	sbc	r18, r18
    1888:	33 0b       	sbc	r19, r19
    188a:	c0 2a       	or	r12, r16
    188c:	d1 2a       	or	r13, r17
    188e:	e2 2a       	or	r14, r18
    1890:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    1892:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1894:	9f 5f       	subi	r25, 0xFF	; 255
    1896:	12 96       	adiw	r26, 0x02	; 2
    1898:	8c 91       	ld	r24, X
    189a:	12 97       	sbiw	r26, 0x02	; 2
    189c:	98 17       	cp	r25, r24
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <add_data_types+0xc0>
    18a0:	b0 cf       	rjmp	.-160    	; 0x1802 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    18a2:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    18a4:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    18a6:	cd 82       	std	Y+5, r12	; 0x05
} 
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	cf 90       	pop	r12
    18b8:	08 95       	ret

Disassembly of section .text.update_bodies:

00000e44 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 e44:	cf 93       	push	r28
 e46:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 e48:	26 2f       	mov	r18, r22
 e4a:	30 e0       	ldi	r19, 0x00	; 0
 e4c:	c9 01       	movw	r24, r18
 e4e:	01 97       	sbiw	r24, 0x01	; 1
 e50:	f9 01       	movw	r30, r18
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	22 0f       	add	r18, r18
 e58:	33 1f       	adc	r19, r19
 e5a:	22 0f       	add	r18, r18
 e5c:	33 1f       	adc	r19, r19
 e5e:	22 0f       	add	r18, r18
 e60:	33 1f       	adc	r19, r19
 e62:	e2 0f       	add	r30, r18
 e64:	f3 1f       	adc	r31, r19
 e66:	ea 0f       	add	r30, r26
 e68:	fb 1f       	adc	r31, r27
 e6a:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
 e6c:	c0 e0       	ldi	r28, 0x00	; 0
 e6e:	25 c0       	rjmp	.+74     	; 0xeba <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
 e70:	82 17       	cp	r24, r18
 e72:	93 07       	cpc	r25, r19
 e74:	09 f1       	breq	.+66     	; 0xeb8 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
 e76:	a9 01       	movw	r20, r18
 e78:	44 0f       	add	r20, r20
 e7a:	55 1f       	adc	r21, r21
 e7c:	44 0f       	add	r20, r20
 e7e:	55 1f       	adc	r21, r21
 e80:	44 0f       	add	r20, r20
 e82:	55 1f       	adc	r21, r21
 e84:	f9 01       	movw	r30, r18
 e86:	ee 0f       	add	r30, r30
 e88:	ff 1f       	adc	r31, r31
 e8a:	e4 0f       	add	r30, r20
 e8c:	f5 1f       	adc	r31, r21
 e8e:	ea 0f       	add	r30, r26
 e90:	fb 1f       	adc	r31, r27
 e92:	43 85       	ldd	r20, Z+11	; 0x0b
 e94:	74 13       	cpse	r23, r20
 e96:	10 c0       	rjmp	.+32     	; 0xeb8 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
 e98:	f9 01       	movw	r30, r18
 e9a:	ee 0f       	add	r30, r30
 e9c:	ff 1f       	adc	r31, r31
 e9e:	22 0f       	add	r18, r18
 ea0:	33 1f       	adc	r19, r19
 ea2:	22 0f       	add	r18, r18
 ea4:	33 1f       	adc	r19, r19
 ea6:	22 0f       	add	r18, r18
 ea8:	33 1f       	adc	r19, r19
 eaa:	e2 0f       	add	r30, r18
 eac:	f3 1f       	adc	r31, r19
 eae:	ea 0f       	add	r30, r26
 eb0:	fb 1f       	adc	r31, r27
 eb2:	24 85       	ldd	r18, Z+12	; 0x0c
 eb4:	23 30       	cpi	r18, 0x03	; 3
 eb6:	41 f4       	brne	.+16     	; 0xec8 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 eb8:	cf 5f       	subi	r28, 0xFF	; 255
 eba:	2c 2f       	mov	r18, r28
 ebc:	30 e0       	ldi	r19, 0x00	; 0
 ebe:	28 17       	cp	r18, r24
 ec0:	39 07       	cpc	r19, r25
 ec2:	b4 f2       	brlt	.-84     	; 0xe70 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 ec4:	21 e0       	ldi	r18, 0x01	; 1
 ec6:	01 c0       	rjmp	.+2      	; 0xeca <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 ec8:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 eca:	22 23       	and	r18, r18
 ecc:	39 f0       	breq	.+14     	; 0xedc <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
 ece:	fd 01       	movw	r30, r26
 ed0:	e7 0f       	add	r30, r23
 ed2:	f1 1d       	adc	r31, r1
 ed4:	e4 58       	subi	r30, 0x84	; 132
 ed6:	ff 4f       	sbci	r31, 0xFF	; 255
 ed8:	21 e0       	ldi	r18, 0x01	; 1
 eda:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 edc:	9c 01       	movw	r18, r24
 ede:	22 0f       	add	r18, r18
 ee0:	33 1f       	adc	r19, r19
 ee2:	22 0f       	add	r18, r18
 ee4:	33 1f       	adc	r19, r19
 ee6:	22 0f       	add	r18, r18
 ee8:	33 1f       	adc	r19, r19
 eea:	fc 01       	movw	r30, r24
 eec:	ee 0f       	add	r30, r30
 eee:	ff 1f       	adc	r31, r31
 ef0:	e2 0f       	add	r30, r18
 ef2:	f3 1f       	adc	r31, r19
 ef4:	ea 0f       	add	r30, r26
 ef6:	fb 1f       	adc	r31, r27
 ef8:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 efa:	29 c0       	rjmp	.+82     	; 0xf4e <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
 efc:	46 2f       	mov	r20, r22
 efe:	50 e0       	ldi	r21, 0x00	; 0
 f00:	84 17       	cp	r24, r20
 f02:	95 07       	cpc	r25, r21
 f04:	19 f1       	breq	.+70     	; 0xf4c <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
 f06:	9a 01       	movw	r18, r20
 f08:	2f 5f       	subi	r18, 0xFF	; 255
 f0a:	3f 4f       	sbci	r19, 0xFF	; 255
 f0c:	f9 01       	movw	r30, r18
 f0e:	ee 0f       	add	r30, r30
 f10:	ff 1f       	adc	r31, r31
 f12:	22 0f       	add	r18, r18
 f14:	33 1f       	adc	r19, r19
 f16:	22 0f       	add	r18, r18
 f18:	33 1f       	adc	r19, r19
 f1a:	22 0f       	add	r18, r18
 f1c:	33 1f       	adc	r19, r19
 f1e:	e2 0f       	add	r30, r18
 f20:	f3 1f       	adc	r31, r19
 f22:	ea 0f       	add	r30, r26
 f24:	fb 1f       	adc	r31, r27
 f26:	20 81       	ld	r18, Z
 f28:	c2 13       	cpse	r28, r18
 f2a:	10 c0       	rjmp	.+32     	; 0xf4c <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
 f2c:	fa 01       	movw	r30, r20
 f2e:	ee 0f       	add	r30, r30
 f30:	ff 1f       	adc	r31, r31
 f32:	44 0f       	add	r20, r20
 f34:	55 1f       	adc	r21, r21
 f36:	44 0f       	add	r20, r20
 f38:	55 1f       	adc	r21, r21
 f3a:	44 0f       	add	r20, r20
 f3c:	55 1f       	adc	r21, r21
 f3e:	e4 0f       	add	r30, r20
 f40:	f5 1f       	adc	r31, r21
 f42:	ea 0f       	add	r30, r26
 f44:	fb 1f       	adc	r31, r27
 f46:	24 85       	ldd	r18, Z+12	; 0x0c
 f48:	23 30       	cpi	r18, 0x03	; 3
 f4a:	41 f4       	brne	.+16     	; 0xf5c <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 f4c:	6f 5f       	subi	r22, 0xFF	; 255
 f4e:	12 96       	adiw	r26, 0x02	; 2
 f50:	2c 91       	ld	r18, X
 f52:	12 97       	sbiw	r26, 0x02	; 2
 f54:	62 17       	cp	r22, r18
 f56:	90 f2       	brcs	.-92     	; 0xefc <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 f58:	81 e0       	ldi	r24, 0x01	; 1
 f5a:	01 c0       	rjmp	.+2      	; 0xf5e <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 f5c:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 f5e:	88 23       	and	r24, r24
 f60:	41 f0       	breq	.+16     	; 0xf72 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
 f62:	fd 01       	movw	r30, r26
 f64:	ec 0f       	add	r30, r28
 f66:	f1 1d       	adc	r31, r1
 f68:	e4 58       	subi	r30, 0x84	; 132
 f6a:	ff 4f       	sbci	r31, 0xFF	; 255
 f6c:	81 e0       	ldi	r24, 0x01	; 1
 f6e:	80 83       	st	Z, r24
 f70:	06 c0       	rjmp	.+12     	; 0xf7e <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 f72:	fd 01       	movw	r30, r26
 f74:	ec 0f       	add	r30, r28
 f76:	f1 1d       	adc	r31, r1
 f78:	e4 58       	subi	r30, 0x84	; 132
 f7a:	ff 4f       	sbci	r31, 0xFF	; 255
 f7c:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 f7e:	8c 2f       	mov	r24, r28
 f80:	90 e0       	ldi	r25, 0x00	; 0
 f82:	87 1b       	sub	r24, r23
 f84:	91 09       	sbc	r25, r1
 f86:	02 97       	sbiw	r24, 0x02	; 2
 f88:	64 f0       	brlt	.+24     	; 0xfa2 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f8a:	7f 5f       	subi	r23, 0xFF	; 255
 f8c:	08 c0       	rjmp	.+16     	; 0xf9e <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
 f8e:	fd 01       	movw	r30, r26
 f90:	e7 0f       	add	r30, r23
 f92:	f1 1d       	adc	r31, r1
 f94:	e4 58       	subi	r30, 0x84	; 132
 f96:	ff 4f       	sbci	r31, 0xFF	; 255
 f98:	81 e0       	ldi	r24, 0x01	; 1
 f9a:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f9c:	7f 5f       	subi	r23, 0xFF	; 255
 f9e:	7c 17       	cp	r23, r28
 fa0:	b0 f3       	brcs	.-20     	; 0xf8e <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
 fa2:	cf 91       	pop	r28
 fa4:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000c86 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 c86:	af 92       	push	r10
 c88:	bf 92       	push	r11
 c8a:	cf 92       	push	r12
 c8c:	df 92       	push	r13
 c8e:	ef 92       	push	r14
 c90:	ff 92       	push	r15
 c92:	0f 93       	push	r16
 c94:	1f 93       	push	r17
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
 c9a:	ec 01       	movw	r28, r24
 c9c:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 c9e:	68 83       	st	Y, r22
    state->nCollections=nCollections;
 ca0:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 ca2:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 ca4:	00 e0       	ldi	r16, 0x00	; 0
 ca6:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 ca8:	8f c0       	rjmp	.+286    	; 0xdc8 <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 caa:	ed 2d       	mov	r30, r13
 cac:	f0 e0       	ldi	r31, 0x00	; 0
 cae:	cf 01       	movw	r24, r30
 cb0:	88 0f       	add	r24, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	88 0f       	add	r24, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	8e 0f       	add	r24, r30
 cba:	9f 1f       	adc	r25, r31
 cbc:	84 0f       	add	r24, r20
 cbe:	95 1f       	adc	r25, r21
 cc0:	dc 01       	movw	r26, r24
 cc2:	12 96       	adiw	r26, 0x02	; 2
 cc4:	6d 91       	ld	r22, X+
 cc6:	7c 91       	ld	r23, X
 cc8:	13 97       	sbiw	r26, 0x03	; 3
 cca:	df 01       	movw	r26, r30
 ccc:	aa 0f       	add	r26, r26
 cce:	bb 1f       	adc	r27, r27
 cd0:	9f 01       	movw	r18, r30
 cd2:	22 0f       	add	r18, r18
 cd4:	33 1f       	adc	r19, r19
 cd6:	22 0f       	add	r18, r18
 cd8:	33 1f       	adc	r19, r19
 cda:	22 0f       	add	r18, r18
 cdc:	33 1f       	adc	r19, r19
 cde:	a2 0f       	add	r26, r18
 ce0:	b3 1f       	adc	r27, r19
 ce2:	5d 01       	movw	r10, r26
 ce4:	ac 0e       	add	r10, r28
 ce6:	bd 1e       	adc	r11, r29
 ce8:	d5 01       	movw	r26, r10
 cea:	19 96       	adiw	r26, 0x09	; 9
 cec:	7c 93       	st	X, r23
 cee:	6e 93       	st	-X, r22
 cf0:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
 cf2:	dc 01       	movw	r26, r24
 cf4:	14 96       	adiw	r26, 0x04	; 4
 cf6:	2c 91       	ld	r18, X
 cf8:	d5 01       	movw	r26, r10
 cfa:	17 96       	adiw	r26, 0x07	; 7
 cfc:	2c 93       	st	X, r18
 cfe:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 d00:	14 96       	adiw	r26, 0x04	; 4
 d02:	1c 93       	st	X, r17
 d04:	0e 93       	st	-X, r16
 d06:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 d08:	dc 01       	movw	r26, r24
 d0a:	2d 91       	ld	r18, X+
 d0c:	3c 91       	ld	r19, X
 d0e:	11 97       	sbiw	r26, 0x01	; 1
 d10:	14 96       	adiw	r26, 0x04	; 4
 d12:	8c 91       	ld	r24, X
 d14:	82 9f       	mul	r24, r18
 d16:	70 01       	movw	r14, r0
 d18:	83 9f       	mul	r24, r19
 d1a:	f0 0c       	add	r15, r0
 d1c:	11 24       	eor	r1, r1
 d1e:	b6 e0       	ldi	r27, 0x06	; 6
 d20:	eb 0e       	add	r14, r27
 d22:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
 d24:	d5 01       	movw	r26, r10
 d26:	16 96       	adiw	r26, 0x06	; 6
 d28:	fc 92       	st	X, r15
 d2a:	ee 92       	st	-X, r14
 d2c:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 d2e:	98 01       	movw	r18, r16
 d30:	ab ea       	ldi	r26, 0xAB	; 171
 d32:	ba ea       	ldi	r27, 0xAA	; 170
 d34:	0e 94 41 1c 	call	0x3882	; 0x3882 <__umulhisi3>
 d38:	96 95       	lsr	r25
 d3a:	87 95       	ror	r24
 d3c:	92 95       	swap	r25
 d3e:	82 95       	swap	r24
 d40:	8f 70       	andi	r24, 0x0F	; 15
 d42:	89 27       	eor	r24, r25
 d44:	9f 70       	andi	r25, 0x0F	; 15
 d46:	89 27       	eor	r24, r25
 d48:	9f 01       	movw	r18, r30
 d4a:	2f 5f       	subi	r18, 0xFF	; 255
 d4c:	3f 4f       	sbci	r19, 0xFF	; 255
 d4e:	d9 01       	movw	r26, r18
 d50:	aa 0f       	add	r26, r26
 d52:	bb 1f       	adc	r27, r27
 d54:	22 0f       	add	r18, r18
 d56:	33 1f       	adc	r19, r19
 d58:	22 0f       	add	r18, r18
 d5a:	33 1f       	adc	r19, r19
 d5c:	22 0f       	add	r18, r18
 d5e:	33 1f       	adc	r19, r19
 d60:	a2 0f       	add	r26, r18
 d62:	b3 1f       	adc	r27, r19
 d64:	ac 0f       	add	r26, r28
 d66:	bd 1f       	adc	r27, r29
 d68:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
 d6a:	0e 0d       	add	r16, r14
 d6c:	1f 1d       	adc	r17, r15
 d6e:	98 01       	movw	r18, r16
 d70:	ab ea       	ldi	r26, 0xAB	; 171
 d72:	ba ea       	ldi	r27, 0xAA	; 170
 d74:	0e 94 41 1c 	call	0x3882	; 0x3882 <__umulhisi3>
 d78:	7c 01       	movw	r14, r24
 d7a:	f6 94       	lsr	r15
 d7c:	e7 94       	ror	r14
 d7e:	f6 94       	lsr	r15
 d80:	e7 94       	ror	r14
 d82:	f6 94       	lsr	r15
 d84:	e7 94       	ror	r14
 d86:	f6 94       	lsr	r15
 d88:	e7 94       	ror	r14
 d8a:	f6 94       	lsr	r15
 d8c:	e7 94       	ror	r14
 d8e:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
 d90:	20 e3       	ldi	r18, 0x30	; 48
 d92:	2e 9d       	mul	r18, r14
 d94:	c0 01       	movw	r24, r0
 d96:	2f 9d       	mul	r18, r15
 d98:	90 0d       	add	r25, r0
 d9a:	11 24       	eor	r1, r1
 d9c:	08 17       	cp	r16, r24
 d9e:	19 07       	cpc	r17, r25
 da0:	19 f4       	brne	.+6      	; 0xda8 <mrpp_state_init+0x122>
 da2:	bb 24       	eor	r11, r11
 da4:	ba 94       	dec	r11
 da6:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
 da8:	cf 01       	movw	r24, r30
 daa:	88 0f       	add	r24, r24
 dac:	99 1f       	adc	r25, r25
 dae:	ee 0f       	add	r30, r30
 db0:	ff 1f       	adc	r31, r31
 db2:	ee 0f       	add	r30, r30
 db4:	ff 1f       	adc	r31, r31
 db6:	ee 0f       	add	r30, r30
 db8:	ff 1f       	adc	r31, r31
 dba:	e8 0f       	add	r30, r24
 dbc:	f9 1f       	adc	r31, r25
 dbe:	ec 0f       	add	r30, r28
 dc0:	fd 1f       	adc	r31, r29
 dc2:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
 dc4:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 dc6:	d3 94       	inc	r13
 dc8:	dc 14       	cp	r13, r12
 dca:	08 f4       	brcc	.+2      	; 0xdce <mrpp_state_init+0x148>
 dcc:	6e cf       	rjmp	.-292    	; 0xcaa <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 dce:	98 01       	movw	r18, r16
 dd0:	ab ea       	ldi	r26, 0xAB	; 171
 dd2:	ba ea       	ldi	r27, 0xAA	; 170
 dd4:	0e 94 41 1c 	call	0x3882	; 0x3882 <__umulhisi3>
 dd8:	fc 01       	movw	r30, r24
 dda:	f6 95       	lsr	r31
 ddc:	e7 95       	ror	r30
 dde:	f2 95       	swap	r31
 de0:	e2 95       	swap	r30
 de2:	ef 70       	andi	r30, 0x0F	; 15
 de4:	ef 27       	eor	r30, r31
 de6:	ff 70       	andi	r31, 0x0F	; 15
 de8:	ef 27       	eor	r30, r31
 dea:	4e 2f       	mov	r20, r30
 dec:	52 e0       	ldi	r21, 0x02	; 2
 dee:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
 df0:	20 e3       	ldi	r18, 0x30	; 48
 df2:	2e 9f       	mul	r18, r30
 df4:	c0 01       	movw	r24, r0
 df6:	2f 9f       	mul	r18, r31
 df8:	90 0d       	add	r25, r0
 dfa:	11 24       	eor	r1, r1
 dfc:	08 1b       	sub	r16, r24
 dfe:	19 0b       	sbc	r17, r25
 e00:	11 f4       	brne	.+4      	; 0xe06 <mrpp_state_init+0x180>
 e02:	51 e0       	ldi	r21, 0x01	; 1
 e04:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
 e06:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
 e08:	01 2b       	or	r16, r17
 e0a:	11 f0       	breq	.+4      	; 0xe10 <mrpp_state_init+0x18a>
 e0c:	41 e0       	ldi	r20, 0x01	; 1
 e0e:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
 e10:	fe 01       	movw	r30, r28
 e12:	e5 58       	subi	r30, 0x85	; 133
 e14:	ff 4f       	sbci	r31, 0xFF	; 255
 e16:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
 e18:	80 e0       	ldi	r24, 0x00	; 0
 e1a:	07 c0       	rjmp	.+14     	; 0xe2a <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
 e1c:	fe 01       	movw	r30, r28
 e1e:	e8 0f       	add	r30, r24
 e20:	f1 1d       	adc	r31, r1
 e22:	e4 58       	subi	r30, 0x84	; 132
 e24:	ff 4f       	sbci	r31, 0xFF	; 255
 e26:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 e28:	8f 5f       	subi	r24, 0xFF	; 255
 e2a:	84 17       	cp	r24, r20
 e2c:	b8 f3       	brcs	.-18     	; 0xe1c <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
 e2e:	df 91       	pop	r29
 e30:	cf 91       	pop	r28
 e32:	1f 91       	pop	r17
 e34:	0f 91       	pop	r16
 e36:	ff 90       	pop	r15
 e38:	ef 90       	pop	r14
 e3a:	df 90       	pop	r13
 e3c:	cf 90       	pop	r12
 e3e:	bf 90       	pop	r11
 e40:	af 90       	pop	r10
 e42:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00001dfa <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	8c 01       	movw	r16, r24
    1e04:	eb 01       	movw	r28, r22
    package[0]=0;
    1e06:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    1e08:	fc 01       	movw	r30, r24
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
    1e0c:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1e0e:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1e10:	c8 01       	movw	r24, r16
    1e12:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	35 c0       	rjmp	.+106    	; 0x1e84 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1e1a:	82 2f       	mov	r24, r18
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	dc 01       	movw	r26, r24
    1e20:	aa 0f       	add	r26, r26
    1e22:	bb 1f       	adc	r27, r27
    1e24:	aa 0f       	add	r26, r26
    1e26:	bb 1f       	adc	r27, r27
    1e28:	ad 01       	movw	r20, r26
    1e2a:	4a 5f       	subi	r20, 0xFA	; 250
    1e2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2e:	4c 0f       	add	r20, r28
    1e30:	5d 1f       	adc	r21, r29
    1e32:	fc 01       	movw	r30, r24
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	e8 0f       	add	r30, r24
    1e46:	f9 1f       	adc	r31, r25
    1e48:	bf 01       	movw	r22, r30
    1e4a:	60 0f       	add	r22, r16
    1e4c:	71 1f       	adc	r23, r17
    1e4e:	fb 01       	movw	r30, r22
    1e50:	84 81       	ldd	r24, Z+4	; 0x04
    1e52:	fa 01       	movw	r30, r20
    1e54:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1e56:	cd 01       	movw	r24, r26
    1e58:	07 96       	adiw	r24, 0x07	; 7
    1e5a:	8c 0f       	add	r24, r28
    1e5c:	9d 1f       	adc	r25, r29
    1e5e:	fb 01       	movw	r30, r22
    1e60:	33 81       	ldd	r19, Z+3	; 0x03
    1e62:	fc 01       	movw	r30, r24
    1e64:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1e66:	cd 01       	movw	r24, r26
    1e68:	08 96       	adiw	r24, 0x08	; 8
    1e6a:	8c 0f       	add	r24, r28
    1e6c:	9d 1f       	adc	r25, r29
    1e6e:	fb 01       	movw	r30, r22
    1e70:	36 81       	ldd	r19, Z+6	; 0x06
    1e72:	fc 01       	movw	r30, r24
    1e74:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1e76:	19 96       	adiw	r26, 0x09	; 9
    1e78:	ac 0f       	add	r26, r28
    1e7a:	bd 1f       	adc	r27, r29
    1e7c:	fb 01       	movw	r30, r22
    1e7e:	85 81       	ldd	r24, Z+5	; 0x05
    1e80:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	f8 01       	movw	r30, r16
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	28 17       	cp	r18, r24
    1e8a:	38 f2       	brcs	.-114    	; 0x1e1a <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1e8c:	88 0f       	add	r24, r24
    1e8e:	88 0f       	add	r24, r24
}
    1e90:	8a 5f       	subi	r24, 0xFA	; 250
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001d56 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	8c 01       	movw	r16, r24
    1d60:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    1d62:	fc 01       	movw	r30, r24
    1d64:	81 81       	ldd	r24, Z+1	; 0x01
    1d66:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    1d68:	81 81       	ldd	r24, Z+1	; 0x01
    1d6a:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1d6c:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	35 c0       	rjmp	.+106    	; 0x1de2 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1d78:	82 2f       	mov	r24, r18
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	aa 0f       	add	r26, r26
    1d80:	bb 1f       	adc	r27, r27
    1d82:	aa 0f       	add	r26, r26
    1d84:	bb 1f       	adc	r27, r27
    1d86:	ad 01       	movw	r20, r26
    1d88:	4a 5f       	subi	r20, 0xFA	; 250
    1d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8c:	4c 0f       	add	r20, r28
    1d8e:	5d 1f       	adc	r21, r29
    1d90:	fc 01       	movw	r30, r24
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	e8 0f       	add	r30, r24
    1da4:	f9 1f       	adc	r31, r25
    1da6:	bf 01       	movw	r22, r30
    1da8:	60 0f       	add	r22, r16
    1daa:	71 1f       	adc	r23, r17
    1dac:	fb 01       	movw	r30, r22
    1dae:	84 81       	ldd	r24, Z+4	; 0x04
    1db0:	fa 01       	movw	r30, r20
    1db2:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1db4:	cd 01       	movw	r24, r26
    1db6:	07 96       	adiw	r24, 0x07	; 7
    1db8:	8c 0f       	add	r24, r28
    1dba:	9d 1f       	adc	r25, r29
    1dbc:	fb 01       	movw	r30, r22
    1dbe:	33 81       	ldd	r19, Z+3	; 0x03
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	08 96       	adiw	r24, 0x08	; 8
    1dc8:	8c 0f       	add	r24, r28
    1dca:	9d 1f       	adc	r25, r29
    1dcc:	fb 01       	movw	r30, r22
    1dce:	36 81       	ldd	r19, Z+6	; 0x06
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1dd4:	19 96       	adiw	r26, 0x09	; 9
    1dd6:	ac 0f       	add	r26, r28
    1dd8:	bd 1f       	adc	r27, r29
    1dda:	fb 01       	movw	r30, r22
    1ddc:	85 81       	ldd	r24, Z+5	; 0x05
    1dde:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1de0:	2f 5f       	subi	r18, 0xFF	; 255
    1de2:	f8 01       	movw	r30, r16
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	28 17       	cp	r18, r24
    1de8:	38 f2       	brcs	.-114    	; 0x1d78 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1dea:	88 0f       	add	r24, r24
    1dec:	88 0f       	add	r24, r24
}
    1dee:	8a 5f       	subi	r24, 0xFA	; 250
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00002194 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    219e:	a6 2f       	mov	r26, r22
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	11 97       	sbiw	r26, 0x01	; 1
    21a4:	fd 01       	movw	r30, r26
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	cd 01       	movw	r24, r26
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	e8 0f       	add	r30, r24
    21ba:	f9 1f       	adc	r31, r25
    21bc:	e0 0f       	add	r30, r16
    21be:	f1 1f       	adc	r31, r17
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0a c0       	rjmp	.+20     	; 0x21dc <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    21c8:	e9 2f       	mov	r30, r25
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	e9 01       	movw	r28, r18
    21ce:	ce 0f       	add	r28, r30
    21d0:	df 1f       	adc	r29, r31
    21d2:	e4 0f       	add	r30, r20
    21d4:	f5 1f       	adc	r31, r21
    21d6:	80 81       	ld	r24, Z
    21d8:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    21da:	9f 5f       	subi	r25, 0xFF	; 255
    21dc:	94 30       	cpi	r25, 0x04	; 4
    21de:	a0 f3       	brcs	.-24     	; 0x21c8 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    21e0:	cd 01       	movw	r24, r26
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	aa 0f       	add	r26, r26
    21e8:	bb 1f       	adc	r27, r27
    21ea:	aa 0f       	add	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	aa 0f       	add	r26, r26
    21f0:	bb 1f       	adc	r27, r27
    21f2:	a8 0f       	add	r26, r24
    21f4:	b9 1f       	adc	r27, r25
    21f6:	a0 0f       	add	r26, r16
    21f8:	b1 1f       	adc	r27, r17
    21fa:	19 96       	adiw	r26, 0x09	; 9
    21fc:	8c 91       	ld	r24, X
    21fe:	19 97       	sbiw	r26, 0x09	; 9
    2200:	f9 01       	movw	r30, r18
    2202:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    2204:	18 96       	adiw	r26, 0x08	; 8
    2206:	8c 91       	ld	r24, X
    2208:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    220a:	c8 01       	movw	r24, r16
    220c:	0e 94 22 07 	call	0xe44	; 0xe44 <update_bodies>
}
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003570 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3570:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0b c0       	rjmp	.+22     	; 0x358c <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    3576:	29 2f       	mov	r18, r25
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	fa 01       	movw	r30, r20
    357c:	e2 0f       	add	r30, r18
    357e:	f3 1f       	adc	r31, r19
    3580:	e4 58       	subi	r30, 0x84	; 132
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 81       	ld	r24, Z
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	49 f0       	breq	.+18     	; 0x359c <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    358a:	9f 5f       	subi	r25, 0xFF	; 255
    358c:	fa 01       	movw	r30, r20
    358e:	e5 58       	subi	r30, 0x85	; 133
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	98 17       	cp	r25, r24
    3596:	78 f3       	brcs	.-34     	; 0x3576 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3598:	2f ef       	ldi	r18, 0xFF	; 255
    359a:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    359c:	c9 01       	movw	r24, r18
    359e:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00003658 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    3658:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    365a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    365c:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    365e:	0a c0       	rjmp	.+20     	; 0x3674 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3660:	f9 01       	movw	r30, r18
    3662:	e9 0f       	add	r30, r25
    3664:	f1 1d       	adc	r31, r1
    3666:	e4 58       	subi	r30, 0x84	; 132
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	40 81       	ld	r20, Z
    366c:	42 30       	cpi	r20, 0x02	; 2
    366e:	09 f0       	breq	.+2      	; 0x3672 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3670:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3672:	9f 5f       	subi	r25, 0xFF	; 255
    3674:	f9 01       	movw	r30, r18
    3676:	e5 58       	subi	r30, 0x85	; 133
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	40 81       	ld	r20, Z
    367c:	94 17       	cp	r25, r20
    367e:	80 f3       	brcs	.-32     	; 0x3660 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3680:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00001208 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    1208:	8f 92       	push	r8
    120a:	9f 92       	push	r9
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
    1222:	6b 01       	movw	r12, r22
    1224:	4a 01       	movw	r8, r20
    1226:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    1228:	0e 94 b8 1a 	call	0x3570	; 0x3570 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    122c:	8f 3f       	cpi	r24, 0xFF	; 255
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	92 07       	cpc	r25, r18
    1232:	09 f4       	brne	.+2      	; 0x1236 <mrpp_state_get_ready_body+0x2e>
    1234:	66 c0       	rjmp	.+204    	; 0x1302 <mrpp_state_get_ready_body+0xfa>
    1236:	8c 15       	cp	r24, r12
    1238:	9d 05       	cpc	r25, r13
    123a:	09 f0       	breq	.+2      	; 0x123e <mrpp_state_get_ready_body+0x36>
    123c:	64 c0       	rjmp	.+200    	; 0x1306 <mrpp_state_get_ready_body+0xfe>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    1242:	fe 01       	movw	r30, r28
    1244:	e8 0f       	add	r30, r24
    1246:	f1 1d       	adc	r31, r1
    1248:	e4 58       	subi	r30, 0x84	; 132
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	90 81       	ld	r25, Z
    124e:	91 30       	cpi	r25, 0x01	; 1
    1250:	41 f0       	breq	.+16     	; 0x1262 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	fe 01       	movw	r30, r28
    1256:	e5 58       	subi	r30, 0x85	; 133
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	90 81       	ld	r25, Z
    125c:	89 17       	cp	r24, r25
    125e:	88 f3       	brcs	.-30     	; 0x1242 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    1260:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	98 0f       	add	r25, r24
    1266:	f4 01       	movw	r30, r8
    1268:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    126a:	99 81       	ldd	r25, Y+1	; 0x01
    126c:	f5 01       	movw	r30, r10
    126e:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	40 e3       	ldi	r20, 0x30	; 48
    1274:	48 9f       	mul	r20, r24
    1276:	90 01       	movw	r18, r0
    1278:	49 9f       	mul	r20, r25
    127a:	30 0d       	add	r19, r0
    127c:	11 24       	eor	r1, r1
    127e:	f8 01       	movw	r30, r16
    1280:	31 83       	std	Z+1, r19	; 0x01
    1282:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    1284:	fe 01       	movw	r30, r28
    1286:	e5 58       	subi	r30, 0x85	; 133
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	20 81       	ld	r18, Z
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	31 09       	sbc	r19, r1
    1292:	82 17       	cp	r24, r18
    1294:	93 07       	cpc	r25, r19
    1296:	2c f4       	brge	.+10     	; 0x12a2 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    1298:	80 e3       	ldi	r24, 0x30	; 48
    129a:	f7 01       	movw	r30, r14
    129c:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	33 c0       	rjmp	.+102    	; 0x1308 <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	9c 01       	movw	r18, r24
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	c8 0f       	add	r28, r24
    12c0:	d9 1f       	adc	r29, r25
    12c2:	4b 81       	ldd	r20, Y+3	; 0x03
    12c4:	5c 81       	ldd	r21, Y+4	; 0x04
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	48 0f       	add	r20, r24
    12cc:	59 1f       	adc	r21, r25
    12ce:	9a 01       	movw	r18, r20
    12d0:	ab ea       	ldi	r26, 0xAB	; 171
    12d2:	ba ea       	ldi	r27, 0xAA	; 170
    12d4:	0e 94 41 1c 	call	0x3882	; 0x3882 <__umulhisi3>
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	92 95       	swap	r25
    12de:	82 95       	swap	r24
    12e0:	8f 70       	andi	r24, 0x0F	; 15
    12e2:	89 27       	eor	r24, r25
    12e4:	9f 70       	andi	r25, 0x0F	; 15
    12e6:	89 27       	eor	r24, r25
    12e8:	60 e3       	ldi	r22, 0x30	; 48
    12ea:	68 9f       	mul	r22, r24
    12ec:	90 01       	movw	r18, r0
    12ee:	69 9f       	mul	r22, r25
    12f0:	30 0d       	add	r19, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	ca 01       	movw	r24, r20
    12f6:	82 1b       	sub	r24, r18
    12f8:	93 0b       	sbc	r25, r19
    12fa:	f7 01       	movw	r30, r14
    12fc:	80 83       	st	Z, r24
    } 
    return true; 
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <mrpp_state_get_ready_body+0x100>
    1306:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	9f 90       	pop	r9
    131e:	8f 90       	pop	r8
    1320:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00003844 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    3844:	fc 01       	movw	r30, r24
    3846:	e5 58       	subi	r30, 0x85	; 133
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	20 81       	ld	r18, Z
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	62 17       	cp	r22, r18
    3850:	73 07       	cpc	r23, r19
    3852:	3c f4       	brge	.+14     	; 0x3862 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    3854:	68 0f       	add	r22, r24
    3856:	79 1f       	adc	r23, r25
    3858:	fb 01       	movw	r30, r22
    385a:	e4 58       	subi	r30, 0x84	; 132
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	82 e0       	ldi	r24, 0x02	; 2
    3860:	80 83       	st	Z, r24
    3862:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

000032a2 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	61 50       	subi	r22, 0x01	; 1
    32a6:	71 09       	sbc	r23, r1
    32a8:	fb 01       	movw	r30, r22
    32aa:	ee 0f       	add	r30, r30
    32ac:	ff 1f       	adc	r31, r31
    32ae:	66 0f       	add	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	66 0f       	add	r22, r22
    32b8:	77 1f       	adc	r23, r23
    32ba:	e6 0f       	add	r30, r22
    32bc:	f7 1f       	adc	r31, r23
    32be:	e8 0f       	add	r30, r24
    32c0:	f9 1f       	adc	r31, r25
    32c2:	83 81       	ldd	r24, Z+3	; 0x03
    32c4:	94 81       	ldd	r25, Z+4	; 0x04
    32c6:	da 01       	movw	r26, r20
    32c8:	8d 93       	st	X+, r24
    32ca:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    32cc:	85 81       	ldd	r24, Z+5	; 0x05
    32ce:	96 81       	ldd	r25, Z+6	; 0x06
    32d0:	f9 01       	movw	r30, r18
    32d2:	91 83       	std	Z+1, r25	; 0x01
    32d4:	80 83       	st	Z, r24
    32d6:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

000035a0 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    35a0:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <cnt>
    35a4:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <cnt+0x1>
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	90 93 a5 0d 	sts	0x0DA5, r25	; 0x800da5 <cnt+0x1>
    35ae:	80 93 a4 0d 	sts	0x0DA4, r24	; 0x800da4 <cnt>
	if(cnt>=_seconds){
    35b2:	20 91 a6 0d 	lds	r18, 0x0DA6	; 0x800da6 <_seconds>
    35b6:	30 91 a7 0d 	lds	r19, 0x0DA7	; 0x800da7 <_seconds+0x1>
    35ba:	82 17       	cp	r24, r18
    35bc:	93 07       	cpc	r25, r19
    35be:	38 f0       	brcs	.+14     	; 0x35ce <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    35c0:	80 91 c1 0d 	lds	r24, 0x0DC1	; 0x800dc1 <eventPointer>
    35c4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <PM_HAL_BC_power>
    35ce:	08 95       	ret

Disassembly of section .text.PUMP_start:

000036f6 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    36f6:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <cnt+0x1>
    36fa:	10 92 a4 0d 	sts	0x0DA4, r1	; 0x800da4 <cnt>
	_seconds=seconds;
    36fe:	90 93 a7 0d 	sts	0x0DA7, r25	; 0x800da7 <_seconds+0x1>
    3702:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    3706:	80 ed       	ldi	r24, 0xD0	; 208
    3708:	9a e1       	ldi	r25, 0x1A	; 26
    370a:	0e 94 94 14 	call	0x2928	; 0x2928 <TC2_HAL_subscribe>
    370e:	80 93 c1 0d 	sts	0x0DC1, r24	; 0x800dc1 <eventPointer>
	PM_HAL_BC_power(true);
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <PM_HAL_BC_power>
    3718:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

0000392e <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    392e:	40 91 a4 0d 	lds	r20, 0x0DA4	; 0x800da4 <cnt>
    3932:	50 91 a5 0d 	lds	r21, 0x0DA5	; 0x800da5 <cnt+0x1>
    3936:	20 91 a6 0d 	lds	r18, 0x0DA6	; 0x800da6 <_seconds>
    393a:	30 91 a7 0d 	lds	r19, 0x0DA7	; 0x800da7 <_seconds+0x1>
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	42 17       	cp	r20, r18
    3942:	53 07       	cpc	r21, r19
    3944:	08 f4       	brcc	.+2      	; 0x3948 <PUMP_is_done+0x1a>
    3946:	80 e0       	ldi	r24, 0x00	; 0
}
    3948:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

0000297c <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	00 d0       	rcall	.+0      	; 0x2982 <RTC_set_clock_out+0x6>
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    2986:	9d e0       	ldi	r25, 0x0D	; 13
    2988:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	31 f0       	breq	.+12     	; 0x299a <RTC_set_clock_out+0x1e>
    298e:	18 f0       	brcs	.+6      	; 0x2996 <RTC_set_clock_out+0x1a>
    2990:	80 32       	cpi	r24, 0x20	; 32
    2992:	31 f0       	breq	.+12     	; 0x29a0 <RTC_set_clock_out+0x24>
    2994:	13 c0       	rjmp	.+38     	; 0x29bc <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    2996:	1a 82       	std	Y+2, r1	; 0x02
			break;
    2998:	05 c0       	rjmp	.+10     	; 0x29a4 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    299a:	83 e8       	ldi	r24, 0x83	; 131
    299c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    29a0:	82 e8       	ldi	r24, 0x82	; 130
    29a2:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    29a4:	ae 01       	movw	r20, r28
    29a6:	4f 5f       	subi	r20, 0xFF	; 255
    29a8:	5f 4f       	sbci	r21, 0xFF	; 255
    29aa:	60 e8       	ldi	r22, 0x80	; 128
    29ac:	22 e0       	ldi	r18, 0x02	; 2
    29ae:	81 e5       	ldi	r24, 0x51	; 81
    29b0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    29b4:	88 23       	and	r24, r24
    29b6:	21 f0       	breq	.+8      	; 0x29c0 <RTC_set_clock_out+0x44>
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	03 c0       	rjmp	.+6      	; 0x29c2 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    29c0:	80 e0       	ldi	r24, 0x00	; 0
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000033e2 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	00 d0       	rcall	.+0      	; 0x33e8 <RTC_clear_wake_up_interrupt+0x6>
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    33f2:	ae 01       	movw	r20, r28
    33f4:	4f 5f       	subi	r20, 0xFF	; 255
    33f6:	5f 4f       	sbci	r21, 0xFF	; 255
    33f8:	60 e8       	ldi	r22, 0x80	; 128
    33fa:	22 e0       	ldi	r18, 0x02	; 2
    33fc:	81 e5       	ldi	r24, 0x51	; 81
    33fe:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3402:	88 23       	and	r24, r24
    3404:	11 f0       	breq	.+4      	; 0x340a <RTC_clear_wake_up_interrupt+0x28>
    3406:	82 e0       	ldi	r24, 0x02	; 2
    3408:	01 c0       	rjmp	.+2      	; 0x340c <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    340a:	80 e0       	ldi	r24, 0x00	; 0
}
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00000fa6 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	27 97       	sbiw	r28, 0x07	; 7
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	8c 01       	movw	r16, r24
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	48 e3       	ldi	r20, 0x38	; 56
     fc4:	53 e0       	ldi	r21, 0x03	; 3
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	81 e5       	ldi	r24, 0x51	; 81
     fca:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <TWI_API_write_data>
     fce:	81 11       	cpse	r24, r1
     fd0:	7c c0       	rjmp	.+248    	; 0x10ca <__DATA_REGION_LENGTH__+0xca>
     fd2:	47 e0       	ldi	r20, 0x07	; 7
     fd4:	be 01       	movw	r22, r28
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	81 e5       	ldi	r24, 0x51	; 81
     fdc:	0e 94 8d 1b 	call	0x371a	; 0x371a <TWI_API_repeat_read_data_stop>
     fe0:	81 11       	cpse	r24, r1
     fe2:	75 c0       	rjmp	.+234    	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
     fe4:	29 81       	ldd	r18, Y+1	; 0x01
     fe6:	82 2f       	mov	r24, r18
     fe8:	8f 77       	andi	r24, 0x7F	; 127
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	95 95       	asr	r25
     fee:	87 95       	ror	r24
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	95 95       	asr	r25
     ffa:	87 95       	ror	r24
     ffc:	88 0f       	add	r24, r24
     ffe:	98 2f       	mov	r25, r24
    1000:	99 0f       	add	r25, r25
    1002:	99 0f       	add	r25, r25
    1004:	89 0f       	add	r24, r25
    1006:	2f 70       	andi	r18, 0x0F	; 15
    1008:	82 0f       	add	r24, r18
    100a:	f8 01       	movw	r30, r16
    100c:	80 83       	st	Z, r24
    100e:	2a 81       	ldd	r18, Y+2	; 0x02
    1010:	82 2f       	mov	r24, r18
    1012:	8f 77       	andi	r24, 0x7F	; 127
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	95 95       	asr	r25
    1018:	87 95       	ror	r24
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	95 95       	asr	r25
    1020:	87 95       	ror	r24
    1022:	95 95       	asr	r25
    1024:	87 95       	ror	r24
    1026:	88 0f       	add	r24, r24
    1028:	98 2f       	mov	r25, r24
    102a:	99 0f       	add	r25, r25
    102c:	99 0f       	add	r25, r25
    102e:	89 0f       	add	r24, r25
    1030:	2f 70       	andi	r18, 0x0F	; 15
    1032:	82 0f       	add	r24, r18
    1034:	81 83       	std	Z+1, r24	; 0x01
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	82 2f       	mov	r24, r18
    103a:	8f 73       	andi	r24, 0x3F	; 63
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	95 95       	asr	r25
    1040:	87 95       	ror	r24
    1042:	95 95       	asr	r25
    1044:	87 95       	ror	r24
    1046:	95 95       	asr	r25
    1048:	87 95       	ror	r24
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	88 0f       	add	r24, r24
    1050:	98 2f       	mov	r25, r24
    1052:	99 0f       	add	r25, r25
    1054:	99 0f       	add	r25, r25
    1056:	89 0f       	add	r24, r25
    1058:	2f 70       	andi	r18, 0x0F	; 15
    105a:	82 0f       	add	r24, r18
    105c:	82 83       	std	Z+2, r24	; 0x02
    105e:	2c 81       	ldd	r18, Y+4	; 0x04
    1060:	82 2f       	mov	r24, r18
    1062:	8f 73       	andi	r24, 0x3F	; 63
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	95 95       	asr	r25
    1068:	87 95       	ror	r24
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	95 95       	asr	r25
    1070:	87 95       	ror	r24
    1072:	95 95       	asr	r25
    1074:	87 95       	ror	r24
    1076:	88 0f       	add	r24, r24
    1078:	98 2f       	mov	r25, r24
    107a:	99 0f       	add	r25, r25
    107c:	99 0f       	add	r25, r25
    107e:	89 0f       	add	r24, r25
    1080:	2f 70       	andi	r18, 0x0F	; 15
    1082:	82 0f       	add	r24, r18
    1084:	83 83       	std	Z+3, r24	; 0x03
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	82 2f       	mov	r24, r18
    108a:	8f 71       	andi	r24, 0x1F	; 31
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	95 95       	asr	r25
    1090:	87 95       	ror	r24
    1092:	95 95       	asr	r25
    1094:	87 95       	ror	r24
    1096:	95 95       	asr	r25
    1098:	87 95       	ror	r24
    109a:	95 95       	asr	r25
    109c:	87 95       	ror	r24
    109e:	88 0f       	add	r24, r24
    10a0:	98 2f       	mov	r25, r24
    10a2:	99 0f       	add	r25, r25
    10a4:	99 0f       	add	r25, r25
    10a6:	89 0f       	add	r24, r25
    10a8:	2f 70       	andi	r18, 0x0F	; 15
    10aa:	82 0f       	add	r24, r18
    10ac:	84 83       	std	Z+4, r24	; 0x04
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 2f       	mov	r25, r24
    10b2:	92 95       	swap	r25
    10b4:	9f 70       	andi	r25, 0x0F	; 15
    10b6:	99 0f       	add	r25, r25
    10b8:	29 2f       	mov	r18, r25
    10ba:	22 0f       	add	r18, r18
    10bc:	22 0f       	add	r18, r18
    10be:	92 0f       	add	r25, r18
    10c0:	8f 70       	andi	r24, 0x0F	; 15
    10c2:	89 0f       	add	r24, r25
    10c4:	85 83       	std	Z+5, r24	; 0x05
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	27 96       	adiw	r28, 0x07	; 7
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

00001b2a <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	2d 97       	sbiw	r28, 0x0d	; 13
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    1b4a:	85 e0       	ldi	r24, 0x05	; 5
    1b4c:	e5 e8       	ldi	r30, 0x85	; 133
    1b4e:	fd e0       	ldi	r31, 0x0D	; 13
    1b50:	de 01       	movw	r26, r28
    1b52:	13 96       	adiw	r26, 0x03	; 3
    1b54:	01 90       	ld	r0, Z+
    1b56:	0d 92       	st	X+, r0
    1b58:	8a 95       	dec	r24
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	08 96       	adiw	r24, 0x08	; 8
    1b60:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	81 0f       	add	r24, r17
	dt.minute %= 60;
    1b68:	99 e8       	ldi	r25, 0x89	; 137
    1b6a:	89 9f       	mul	r24, r25
    1b6c:	91 2d       	mov	r25, r1
    1b6e:	11 24       	eor	r1, r1
    1b70:	92 95       	swap	r25
    1b72:	96 95       	lsr	r25
    1b74:	97 70       	andi	r25, 0x07	; 7
    1b76:	2c e3       	ldi	r18, 0x3C	; 60
    1b78:	92 9f       	mul	r25, r18
    1b7a:	80 19       	sub	r24, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    1b80:	ae 01       	movw	r20, r28
    1b82:	4f 5f       	subi	r20, 0xFF	; 255
    1b84:	5f 4f       	sbci	r21, 0xFF	; 255
    1b86:	60 e8       	ldi	r22, 0x80	; 128
    1b88:	22 e0       	ldi	r18, 0x02	; 2
    1b8a:	81 e5       	ldi	r24, 0x51	; 81
    1b8c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1b90:	81 11       	cpse	r24, r1
    1b92:	20 c0       	rjmp	.+64     	; 0x1bd4 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    1b94:	99 85       	ldd	r25, Y+9	; 0x09
    1b96:	8d ec       	ldi	r24, 0xCD	; 205
    1b98:	98 9f       	mul	r25, r24
    1b9a:	81 2d       	mov	r24, r1
    1b9c:	11 24       	eor	r1, r1
    1b9e:	86 95       	lsr	r24
    1ba0:	86 95       	lsr	r24
    1ba2:	86 95       	lsr	r24
    1ba4:	40 e1       	ldi	r20, 0x10	; 16
    1ba6:	84 9f       	mul	r24, r20
    1ba8:	90 01       	movw	r18, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	88 0f       	add	r24, r24
    1bae:	38 2f       	mov	r19, r24
    1bb0:	33 0f       	add	r19, r19
    1bb2:	33 0f       	add	r19, r19
    1bb4:	83 0f       	add	r24, r19
    1bb6:	98 1b       	sub	r25, r24
    1bb8:	92 2b       	or	r25, r18
    1bba:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    1bbc:	ae 01       	movw	r20, r28
    1bbe:	4d 5f       	subi	r20, 0xFD	; 253
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc2:	60 e8       	ldi	r22, 0x80	; 128
    1bc4:	25 e0       	ldi	r18, 0x05	; 5
    1bc6:	81 e5       	ldi	r24, 0x51	; 81
    1bc8:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1bcc:	88 23       	and	r24, r24
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <RTC_set_wake_up_interrupt_minutes+0xae>
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
}
    1bda:	2d 96       	adiw	r28, 0x0d	; 13
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

000010e6 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    10e6:	4f 92       	push	r4
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	00 d0       	rcall	.+0      	; 0x1108 <__stack+0x9>
    1108:	00 d0       	rcall	.+0      	; 0x110a <__stack+0xb>
    110a:	00 d0       	rcall	.+0      	; 0x110c <__stack+0xd>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	f9 01       	movw	r30, r18
    1112:	49 2e       	mov	r4, r25
    1114:	51 2c       	mov	r5, r1
    1116:	61 2c       	mov	r6, r1
    1118:	71 2c       	mov	r7, r1
    111a:	03 2e       	mov	r0, r19
    111c:	3a e1       	ldi	r19, 0x1A	; 26
    111e:	44 0c       	add	r4, r4
    1120:	55 1c       	adc	r5, r5
    1122:	66 1c       	adc	r6, r6
    1124:	77 1c       	adc	r7, r7
    1126:	3a 95       	dec	r19
    1128:	d1 f7       	brne	.-12     	; 0x111e <__stack+0x1f>
    112a:	30 2d       	mov	r19, r0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	07 2e       	mov	r0, r23
    1134:	76 e1       	ldi	r23, 0x16	; 22
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	7a 95       	dec	r23
    1140:	d1 f7       	brne	.-12     	; 0x1136 <__stack+0x37>
    1142:	70 2d       	mov	r23, r0
    1144:	84 29       	or	r24, r4
    1146:	95 29       	or	r25, r5
    1148:	a6 29       	or	r26, r6
    114a:	b7 29       	or	r27, r7
    114c:	87 2e       	mov	r8, r23
    114e:	91 2c       	mov	r9, r1
    1150:	a1 2c       	mov	r10, r1
    1152:	b1 2c       	mov	r11, r1
    1154:	07 2e       	mov	r0, r23
    1156:	71 e1       	ldi	r23, 0x11	; 17
    1158:	88 0c       	add	r8, r8
    115a:	99 1c       	adc	r9, r9
    115c:	aa 1c       	adc	r10, r10
    115e:	bb 1c       	adc	r11, r11
    1160:	7a 95       	dec	r23
    1162:	d1 f7       	brne	.-12     	; 0x1158 <__stack+0x59>
    1164:	70 2d       	mov	r23, r0
    1166:	88 29       	or	r24, r8
    1168:	99 29       	or	r25, r9
    116a:	aa 29       	or	r26, r10
    116c:	bb 29       	or	r27, r11
    116e:	c6 2e       	mov	r12, r22
    1170:	d1 2c       	mov	r13, r1
    1172:	e1 2c       	mov	r14, r1
    1174:	f1 2c       	mov	r15, r1
    1176:	0b 2e       	mov	r0, r27
    1178:	bc e0       	ldi	r27, 0x0C	; 12
    117a:	cc 0c       	add	r12, r12
    117c:	dd 1c       	adc	r13, r13
    117e:	ee 1c       	adc	r14, r14
    1180:	ff 1c       	adc	r15, r15
    1182:	ba 95       	dec	r27
    1184:	d1 f7       	brne	.-12     	; 0x117a <__stack+0x7b>
    1186:	b0 2d       	mov	r27, r0
    1188:	8c 29       	or	r24, r12
    118a:	9d 29       	or	r25, r13
    118c:	ae 29       	or	r26, r14
    118e:	bf 29       	or	r27, r15
    1190:	05 2f       	mov	r16, r21
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	00 0f       	add	r16, r16
    119a:	11 1f       	adc	r17, r17
    119c:	22 1f       	adc	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	00 0f       	add	r16, r16
    11a2:	11 1f       	adc	r17, r17
    11a4:	22 1f       	adc	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	00 0f       	add	r16, r16
    11aa:	11 1f       	adc	r17, r17
    11ac:	22 1f       	adc	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	00 0f       	add	r16, r16
    11b2:	11 1f       	adc	r17, r17
    11b4:	22 1f       	adc	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	00 0f       	add	r16, r16
    11ba:	11 1f       	adc	r17, r17
    11bc:	22 1f       	adc	r18, r18
    11be:	33 1f       	adc	r19, r19
    11c0:	00 0f       	add	r16, r16
    11c2:	11 1f       	adc	r17, r17
    11c4:	22 1f       	adc	r18, r18
    11c6:	33 1f       	adc	r19, r19
    11c8:	80 2b       	or	r24, r16
    11ca:	91 2b       	or	r25, r17
    11cc:	a2 2b       	or	r26, r18
    11ce:	b3 2b       	or	r27, r19
    11d0:	84 2b       	or	r24, r20
    11d2:	b0 83       	st	Z, r27
    11d4:	a1 83       	std	Z+1, r26	; 0x01
    11d6:	92 83       	std	Z+2, r25	; 0x02
    11d8:	83 83       	std	Z+3, r24	; 0x03
    11da:	26 96       	adiw	r28, 0x06	; 6
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	9f 90       	pop	r9
    11fc:	8f 90       	pop	r8
    11fe:	7f 90       	pop	r7
    1200:	6f 90       	pop	r6
    1202:	5f 90       	pop	r5
    1204:	4f 90       	pop	r4
    1206:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003982 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    3982:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    3984:	54 81       	ldd	r21, Z+4	; 0x04
    3986:	43 81       	ldd	r20, Z+3	; 0x03
    3988:	31 81       	ldd	r19, Z+1	; 0x01
    398a:	20 81       	ld	r18, Z
    398c:	65 2f       	mov	r22, r21
    398e:	74 2f       	mov	r23, r20
    3990:	83 2f       	mov	r24, r19
    3992:	92 2f       	mov	r25, r18
    3994:	0e 94 de 13 	call	0x27bc	; 0x27bc <__fixunssfsi>
}
    3998:	cb 01       	movw	r24, r22
    399a:	08 95       	ret

Disassembly of section .text.init_measurement:

00003232 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    3232:	25 e0       	ldi	r18, 0x05	; 5
    3234:	49 e2       	ldi	r20, 0x29	; 41
    3236:	53 e0       	ldi	r21, 0x03	; 3
    3238:	60 e0       	ldi	r22, 0x00	; 0
    323a:	81 e6       	ldi	r24, 0x61	; 97
    323c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3240:	81 11       	cpse	r24, r1
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    3244:	25 e0       	ldi	r18, 0x05	; 5
    3246:	4e e2       	ldi	r20, 0x2E	; 46
    3248:	53 e0       	ldi	r21, 0x03	; 3
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	81 e6       	ldi	r24, 0x61	; 97
    324e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3252:	81 11       	cpse	r24, r1
    3254:	08 c0       	rjmp	.+16     	; 0x3266 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    3256:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <SCD30_HAL_data_ready>
    325a:	88 23       	and	r24, r24
    325c:	e1 f3       	breq	.-8      	; 0x3256 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3266:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    3268:	08 95       	ret

Disassembly of section .text.validate_data:

000034ac <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    34b2:	62 e0       	ldi	r22, 0x02	; 2
    34b4:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <calc_crc8>
	if(data[2]!=crc) return false;
    34b8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ba:	89 13       	cpse	r24, r25
    34bc:	0a c0       	rjmp	.+20     	; 0x34d2 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    34be:	62 e0       	ldi	r22, 0x02	; 2
    34c0:	ce 01       	movw	r24, r28
    34c2:	03 96       	adiw	r24, 0x03	; 3
    34c4:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <calc_crc8>
	if(data[5]!=crc) return false;
    34c8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ca:	89 17       	cp	r24, r25
    34cc:	21 f0       	breq	.+8      	; 0x34d6 <validate_data+0x2a>
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	03 c0       	rjmp	.+6      	; 0x34d8 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	01 c0       	rjmp	.+2      	; 0x34d8 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
}
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	08 95       	ret

Disassembly of section .text.read_value:

00001e9c <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <read_value+0xa>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <read_value+0xc>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <read_value+0xe>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	9f ef       	ldi	r25, 0xFF	; 255
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    1eba:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <SCD30_HAL_data_ready>
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <read_value+0x34>
		*value=0xfffe;
    1ec2:	8e ef       	ldi	r24, 0xFE	; 254
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	2c c0       	rjmp	.+88     	; 0x1f28 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    1ed0:	22 e0       	ldi	r18, 0x02	; 2
    1ed2:	46 e3       	ldi	r20, 0x36	; 54
    1ed4:	53 e0       	ldi	r21, 0x03	; 3
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	81 e6       	ldi	r24, 0x61	; 97
    1eda:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1ede:	81 11       	cpse	r24, r1
    1ee0:	1e c0       	rjmp	.+60     	; 0x1f1e <read_value+0x82>
    1ee2:	8f e3       	ldi	r24, 0x3F	; 63
    1ee4:	9f e1       	ldi	r25, 0x1F	; 31
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <read_value+0x4a>
    1eea:	00 c0       	rjmp	.+0      	; 0x1eec <read_value+0x50>
    1eec:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    1eee:	46 e0       	ldi	r20, 0x06	; 6
    1ef0:	be 01       	movw	r22, r28
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	81 e6       	ldi	r24, 0x61	; 97
    1ef8:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1efc:	81 11       	cpse	r24, r1
    1efe:	11 c0       	rjmp	.+34     	; 0x1f22 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	0e 94 56 1a 	call	0x34ac	; 0x34ac <validate_data>
    1f08:	88 23       	and	r24, r24
    1f0a:	69 f0       	breq	.+26     	; 0x1f26 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	0e 94 c1 1c 	call	0x3982	; 0x3982 <bytes_2_uint>
    1f14:	f8 01       	movw	r30, r16
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    1f28:	26 96       	adiw	r28, 0x06	; 6
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002e72 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    2e72:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <_data>
    2e76:	90 91 ab 0d 	lds	r25, 0x0DAB	; 0x800dab <_data+0x1>
    2e7a:	20 91 a8 0d 	lds	r18, 0x0DA8	; 0x800da8 <cntSamples>
    2e7e:	30 91 a9 0d 	lds	r19, 0x0DA9	; 0x800da9 <cntSamples+0x1>
    2e82:	a9 01       	movw	r20, r18
    2e84:	4f 5f       	subi	r20, 0xFF	; 255
    2e86:	5f 4f       	sbci	r21, 0xFF	; 255
    2e88:	50 93 a9 0d 	sts	0x0DA9, r21	; 0x800da9 <cntSamples+0x1>
    2e8c:	40 93 a8 0d 	sts	0x0DA8, r20	; 0x800da8 <cntSamples>
    2e90:	22 0f       	add	r18, r18
    2e92:	33 1f       	adc	r19, r19
    2e94:	82 0f       	add	r24, r18
    2e96:	93 1f       	adc	r25, r19
    2e98:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <read_value>
	if(cntSamples>=_nSamples){
    2e9c:	20 91 a8 0d 	lds	r18, 0x0DA8	; 0x800da8 <cntSamples>
    2ea0:	30 91 a9 0d 	lds	r19, 0x0DA9	; 0x800da9 <cntSamples+0x1>
    2ea4:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <_nSamples>
    2ea8:	90 91 ad 0d 	lds	r25, 0x0DAD	; 0x800dad <_nSamples+0x1>
    2eac:	28 17       	cp	r18, r24
    2eae:	39 07       	cpc	r19, r25
    2eb0:	10 f0       	brcs	.+4      	; 0x2eb6 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    2eb2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TC1_HAL_stop>
    2eb6:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00002ab6 <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    2abc:	70 93 ad 0d 	sts	0x0DAD, r23	; 0x800dad <_nSamples+0x1>
    2ac0:	60 93 ac 0d 	sts	0x0DAC, r22	; 0x800dac <_nSamples>
	cntSamples=0;
    2ac4:	10 92 a9 0d 	sts	0x0DA9, r1	; 0x800da9 <cntSamples+0x1>
    2ac8:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <cntSamples>
	_data=data;
    2acc:	50 93 ab 0d 	sts	0x0DAB, r21	; 0x800dab <_data+0x1>
    2ad0:	40 93 aa 0d 	sts	0x0DAA, r20	; 0x800daa <_data>
	
	//Init
	SCD30_HAL_init();
    2ad4:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    2ad8:	69 e3       	ldi	r22, 0x39	; 57
    2ada:	77 e1       	ldi	r23, 0x17	; 23
    2adc:	ce 01       	movw	r24, r28
    2ade:	0e 94 bd 19 	call	0x337a	; 0x337a <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <PM_HAL_SCD30_power>
    2ae8:	2f ef       	ldi	r18, 0xFF	; 255
    2aea:	83 ed       	ldi	r24, 0xD3	; 211
    2aec:	90 e3       	ldi	r25, 0x30	; 48
    2aee:	21 50       	subi	r18, 0x01	; 1
    2af0:	80 40       	sbci	r24, 0x00	; 0
    2af2:	90 40       	sbci	r25, 0x00	; 0
    2af4:	e1 f7       	brne	.-8      	; 0x2aee <SCD30_init_sampling+0x38>
    2af6:	00 c0       	rjmp	.+0      	; 0x2af8 <SCD30_init_sampling+0x42>
    2af8:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    2afa:	0e 94 19 19 	call	0x3232	; 0x3232 <init_measurement>
}
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00003ae0 <SCD30_deinit_sampling>:

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    3ae0:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <PM_HAL_SCD30_power>
	_data=NULL;
    3aea:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <_data+0x1>
    3aee:	10 92 aa 0d 	sts	0x0DAA, r1	; 0x800daa <_data>
    3af2:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

00003c38 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    3c38:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vect_SCD_do_sample>
	TC1_HAL_start();
    3c3c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

0000394a <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    394a:	40 91 a8 0d 	lds	r20, 0x0DA8	; 0x800da8 <cntSamples>
    394e:	50 91 a9 0d 	lds	r21, 0x0DA9	; 0x800da9 <cntSamples+0x1>
    3952:	20 91 ac 0d 	lds	r18, 0x0DAC	; 0x800dac <_nSamples>
    3956:	30 91 ad 0d 	lds	r19, 0x0DAD	; 0x800dad <_nSamples+0x1>
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	42 17       	cp	r20, r18
    395e:	53 07       	cpc	r21, r19
    3960:	08 f4       	brcc	.+2      	; 0x3964 <SCD30_is_sampling_done+0x1a>
    3962:	80 e0       	ldi	r24, 0x00	; 0
}
    3964:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00003a16 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    3a16:	88 23       	and	r24, r24
    3a18:	19 f0       	breq	.+6      	; 0x3a20 <decode_stage_response+0xa>
    3a1a:	81 30       	cpi	r24, 0x01	; 1
    3a1c:	29 f0       	breq	.+10     	; 0x3a28 <decode_stage_response+0x12>
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    3a20:	8f e0       	ldi	r24, 0x0F	; 15
    3a22:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    3a24:	84 e1       	ldi	r24, 0x14	; 20
    3a26:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    3a28:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3a2a:	08 95       	ret

Disassembly of section .text.decode_join_response:

00003966 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    3966:	83 30       	cpi	r24, 0x03	; 3
    3968:	51 f0       	breq	.+20     	; 0x397e <decode_join_response+0x18>
    396a:	84 30       	cpi	r24, 0x04	; 4
    396c:	21 f0       	breq	.+8      	; 0x3976 <decode_join_response+0x10>
    396e:	81 11       	cpse	r24, r1
    3970:	04 c0       	rjmp	.+8      	; 0x397a <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    3972:	82 e0       	ldi	r24, 0x02	; 2
    3974:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    3976:	84 e0       	ldi	r24, 0x04	; 4
    3978:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    397a:	84 e1       	ldi	r24, 0x14	; 20
    397c:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    397e:	83 e0       	ldi	r24, 0x03	; 3
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    3980:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00003864 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    3864:	83 30       	cpi	r24, 0x03	; 3
    3866:	49 f0       	breq	.+18     	; 0x387a <decode_header_tail_response+0x16>
    3868:	18 f4       	brcc	.+6      	; 0x3870 <decode_header_tail_response+0xc>
    386a:	88 23       	and	r24, r24
    386c:	41 f0       	breq	.+16     	; 0x387e <decode_header_tail_response+0x1a>
    386e:	03 c0       	rjmp	.+6      	; 0x3876 <decode_header_tail_response+0x12>
    3870:	85 50       	subi	r24, 0x05	; 5
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	20 f0       	brcs	.+8      	; 0x387e <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    3876:	84 e1       	ldi	r24, 0x14	; 20
    3878:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    387a:	84 2f       	mov	r24, r20
    387c:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    387e:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3880:	08 95       	ret

Disassembly of section .text.join_lora:

0000229e <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(6);
}

static LM_STATUS join_lora(){
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	c3 54       	subi	r28, 0x43	; 67
    22a8:	d1 09       	sbc	r29, r1
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    22b4:	24 e5       	ldi	r18, 0x54	; 84
    22b6:	31 e0       	ldi	r19, 0x01	; 1
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	81 e1       	ldi	r24, 0x11	; 17
    22bc:	f9 01       	movw	r30, r18
    22be:	de 01       	movw	r26, r28
    22c0:	11 96       	adiw	r26, 0x01	; 1
    22c2:	74 2f       	mov	r23, r20
    22c4:	0e 94 ce 1c 	call	0x399c	; 0x399c <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    22c8:	25 e6       	ldi	r18, 0x65	; 101
    22ca:	31 e0       	ldi	r19, 0x01	; 1
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	81 e1       	ldi	r24, 0x11	; 17
    22d0:	f9 01       	movw	r30, r18
    22d2:	de 01       	movw	r26, r28
    22d4:	52 96       	adiw	r26, 0x12	; 18
    22d6:	74 2f       	mov	r23, r20
    22d8:	0e 94 ce 1c 	call	0x399c	; 0x399c <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    22dc:	26 e7       	ldi	r18, 0x76	; 118
    22de:	31 e0       	ldi	r19, 0x01	; 1
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	81 e2       	ldi	r24, 0x21	; 33
    22e4:	f9 01       	movw	r30, r18
    22e6:	de 01       	movw	r26, r28
    22e8:	93 96       	adiw	r26, 0x23	; 35
    22ea:	74 2f       	mov	r23, r20
    22ec:	0e 94 ce 1c 	call	0x399c	; 0x399c <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    22f0:	ae 01       	movw	r20, r28
    22f2:	4d 5d       	subi	r20, 0xDD	; 221
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
    22f6:	be 01       	movw	r22, r28
    22f8:	6e 5e       	subi	r22, 0xEE	; 238
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	0e 94 76 1e 	call	0x3cec	; 0x3cec <LM_join_network>
}
    2304:	cd 5b       	subi	r28, 0xBD	; 189
    2306:	df 4f       	sbci	r29, 0xFF	; 255
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

Disassembly of section .text.set_wakeup:

00003cbc <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(6);
    3cbc:	86 e0       	ldi	r24, 0x06	; 6
    3cbe:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <RTC_set_wake_up_interrupt_minutes>
}
    3cc2:	08 95       	ret

Disassembly of section .text.send_header:

000030cc <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	e4 97       	sbiw	r28, 0x34	; 52
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    30e0:	be 01       	movw	r22, r28
    30e2:	6c 5c       	subi	r22, 0xCC	; 204
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	ce 01       	movw	r24, r28
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	0e 94 af 1b 	call	0x375e	; 0x375e <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    30ee:	6c a9       	ldd	r22, Y+52	; 0x34
    30f0:	ce 01       	movw	r24, r28
    30f2:	01 96       	adiw	r24, 0x01	; 1
    30f4:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <LM_send_uplink>
}
    30f8:	e4 96       	adiw	r28, 0x34	; 52
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	08 95       	ret

Disassembly of section .text.stage_0:

0000198e <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    198e:	80 91 c5 0d 	lds	r24, 0x0DC5	; 0x800dc5 <state_s0>
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	29 f1       	breq	.+74     	; 0x19e0 <stage_0+0x52>
    1996:	28 f4       	brcc	.+10     	; 0x19a2 <stage_0+0x14>
    1998:	88 23       	and	r24, r24
    199a:	51 f0       	breq	.+20     	; 0x19b0 <stage_0+0x22>
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	c1 f0       	breq	.+48     	; 0x19d0 <stage_0+0x42>
    19a0:	f6 cf       	rjmp	.-20     	; 0x198e <stage_0>
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <stage_0+0x1a>
    19a6:	4e c0       	rjmp	.+156    	; 0x1a44 <stage_0+0xb6>
    19a8:	30 f1       	brcs	.+76     	; 0x19f6 <stage_0+0x68>
    19aa:	85 30       	cpi	r24, 0x05	; 5
    19ac:	81 f1       	breq	.+96     	; 0x1a0e <stage_0+0x80>
    19ae:	ef cf       	rjmp	.-34     	; 0x198e <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    19b0:	e2 e5       	ldi	r30, 0x52	; 82
    19b2:	fd e0       	ldi	r31, 0x0D	; 13
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	4a e6       	ldi	r20, 0x6A	; 106
    19ba:	59 e0       	ldi	r21, 0x09	; 9
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    19c4:	81 11       	cpse	r24, r1
    19c6:	42 c0       	rjmp	.+132    	; 0x1a4c <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <state_s0>
			break;
    19ce:	df cf       	rjmp	.-66     	; 0x198e <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    19d0:	8f e7       	ldi	r24, 0x7F	; 127
    19d2:	9d e0       	ldi	r25, 0x0D	; 13
    19d4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <RTC_get_current_time>
				state_s0=STAGE_START;
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <state_s0>
			break;
    19de:	d7 cf       	rjmp	.-82     	; 0x198e <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	0e 94 12 1c 	call	0x3824	; 0x3824 <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    19e6:	81 11       	cpse	r24, r1
    19e8:	33 c0       	rjmp	.+102    	; 0x1a50 <stage_0+0xc2>
			
				SCD30_start_sampling();
    19ea:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <state_s0>
			break;
    19f4:	cc cf       	rjmp	.-104    	; 0x198e <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    19f6:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <ADC_meth_sens_ready>
    19fa:	88 23       	and	r24, r24
    19fc:	59 f1       	breq	.+86     	; 0x1a54 <stage_0+0xc6>
    19fe:	0e 94 a5 1c 	call	0x394a	; 0x394a <SCD30_is_sampling_done>
    1a02:	88 23       	and	r24, r24
    1a04:	49 f1       	breq	.+82     	; 0x1a58 <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    1a06:	85 e0       	ldi	r24, 0x05	; 5
    1a08:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <state_s0>
			break;
    1a0c:	c0 cf       	rjmp	.-128    	; 0x198e <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1a0e:	26 e9       	ldi	r18, 0x96	; 150
    1a10:	3d e0       	ldi	r19, 0x0D	; 13
    1a12:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    1a16:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    1a1a:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    1a1e:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    1a22:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    1a26:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    1a2a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    1a2e:	4a e6       	ldi	r20, 0x6A	; 106
    1a30:	59 e0       	ldi	r21, 0x09	; 9
    1a32:	66 e9       	ldi	r22, 0x96	; 150
    1a34:	7d e0       	ldi	r23, 0x0D	; 13
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <state_s0>
			break;
    1a42:	a5 cf       	rjmp	.-182    	; 0x198e <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1a44:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <SCD30_deinit_sampling>
				return STAGE_DONE;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	08 95       	ret
    1a58:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    1a5a:	08 95       	ret

Disassembly of section .text.stage_1:

00001524 <stage_1>:
/************************************************************************/
static STAGE_STATUS stage_1(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    1524:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <state_s1>
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	81 f1       	breq	.+96     	; 0x158c <stage_1+0x68>
    152c:	28 f4       	brcc	.+10     	; 0x1538 <stage_1+0x14>
    152e:	88 23       	and	r24, r24
    1530:	51 f0       	breq	.+20     	; 0x1546 <stage_1+0x22>
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	19 f1       	breq	.+70     	; 0x157c <stage_1+0x58>
    1536:	f6 cf       	rjmp	.-20     	; 0x1524 <stage_1>
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	09 f4       	brne	.+2      	; 0x153e <stage_1+0x1a>
    153c:	5d c0       	rjmp	.+186    	; 0x15f8 <stage_1+0xd4>
    153e:	70 f1       	brcs	.+92     	; 0x159c <stage_1+0x78>
    1540:	85 30       	cpi	r24, 0x05	; 5
    1542:	c1 f1       	breq	.+112    	; 0x15b4 <stage_1+0x90>
    1544:	ef cf       	rjmp	.-34     	; 0x1524 <stage_1>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
    1546:	e2 e5       	ldi	r30, 0x52	; 82
    1548:	fd e0       	ldi	r31, 0x0D	; 13
    154a:	65 81       	ldd	r22, Z+5	; 0x05
    154c:	76 81       	ldd	r23, Z+6	; 0x06
    154e:	4a e6       	ldi	r20, 0x6A	; 106
    1550:	59 e0       	ldi	r21, 0x09	; 9
    1552:	87 81       	ldd	r24, Z+7	; 0x07
    1554:	90 85       	ldd	r25, Z+8	; 0x08
    1556:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    155a:	81 11       	cpse	r24, r1
    155c:	53 c0       	rjmp	.+166    	; 0x1604 <stage_1+0xe0>
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
    155e:	e2 e5       	ldi	r30, 0x52	; 82
    1560:	fd e0       	ldi	r31, 0x0D	; 13
    1562:	62 85       	ldd	r22, Z+10	; 0x0a
    1564:	73 85       	ldd	r23, Z+11	; 0x0b
    1566:	42 e1       	ldi	r20, 0x12	; 18
    1568:	57 e0       	ldi	r21, 0x07	; 7
    156a:	84 85       	ldd	r24, Z+12	; 0x0c
    156c:	0e 94 4d 13 	call	0x269a	; 0x269a <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1570:	81 11       	cpse	r24, r1
    1572:	4a c0       	rjmp	.+148    	; 0x1608 <stage_1+0xe4>
				
				state_s1=STAGE_GET_TIME;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s1>
			break;
    157a:	d4 cf       	rjmp	.-88     	; 0x1524 <stage_1>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    157c:	8f e7       	ldi	r24, 0x7F	; 127
    157e:	9d e0       	ldi	r25, 0x0D	; 13
    1580:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s1>
			break;
    158a:	cc cf       	rjmp	.-104    	; 0x1524 <stage_1>
			
			case STAGE_START:
				SCD30_start_sampling();
    158c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <SCD30_start_sampling>
				ADC_start_sampling();
    1590:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s1>
			break;
    159a:	c4 cf       	rjmp	.-120    	; 0x1524 <stage_1>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    159c:	0e 94 a5 1c 	call	0x394a	; 0x394a <SCD30_is_sampling_done>
    15a0:	88 23       	and	r24, r24
    15a2:	a1 f1       	breq	.+104    	; 0x160c <stage_1+0xe8>
    15a4:	0e 94 5f 1c 	call	0x38be	; 0x38be <ADC_is_sampling_done>
    15a8:	88 23       	and	r24, r24
    15aa:	91 f1       	breq	.+100    	; 0x1610 <stage_1+0xec>
				state_s1=STAGE_UPDATE_MRPP;
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s1>
			break;
    15b2:	b8 cf       	rjmp	.-144    	; 0x1524 <stage_1>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    15b4:	26 e9       	ldi	r18, 0x96	; 150
    15b6:	3d e0       	ldi	r19, 0x0D	; 13
    15b8:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    15bc:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    15c0:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    15c4:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    15c8:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    15cc:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    15d0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(2, ts, co2_data);
    15d4:	4a e6       	ldi	r20, 0x6A	; 106
    15d6:	59 e0       	ldi	r21, 0x09	; 9
    15d8:	66 e9       	ldi	r22, 0x96	; 150
    15da:	7d e0       	ldi	r23, 0x0D	; 13
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(3, ts, meth_data);
    15e2:	42 e1       	ldi	r20, 0x12	; 18
    15e4:	57 e0       	ldi	r21, 0x07	; 7
    15e6:	66 e9       	ldi	r22, 0x96	; 150
    15e8:	7d e0       	ldi	r23, 0x0D	; 13
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    15f0:	84 e0       	ldi	r24, 0x04	; 4
    15f2:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <state_s1>
			break;
    15f6:	96 cf       	rjmp	.-212    	; 0x1524 <stage_1>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    15f8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    15fc:	0e 94 66 1d 	call	0x3acc	; 0x3acc <ADC_deinit_sampling>
				return STAGE_DONE;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1608:	83 e0       	ldi	r24, 0x03	; 3
    160a:	08 95       	ret
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	08 95       	ret
    1610:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1612:	08 95       	ret

Disassembly of section .text.stage_3:

00001614 <stage_3>:
/************************************************************************/
static STAGE_STATUS stage_3(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
    1614:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <state_s3>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	81 f1       	breq	.+96     	; 0x167c <stage_3+0x68>
    161c:	28 f4       	brcc	.+10     	; 0x1628 <stage_3+0x14>
    161e:	88 23       	and	r24, r24
    1620:	51 f0       	breq	.+20     	; 0x1636 <stage_3+0x22>
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	19 f1       	breq	.+70     	; 0x166c <stage_3+0x58>
    1626:	f6 cf       	rjmp	.-20     	; 0x1614 <stage_3>
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	09 f4       	brne	.+2      	; 0x162e <stage_3+0x1a>
    162c:	5d c0       	rjmp	.+186    	; 0x16e8 <stage_3+0xd4>
    162e:	70 f1       	brcs	.+92     	; 0x168c <stage_3+0x78>
    1630:	85 30       	cpi	r24, 0x05	; 5
    1632:	c1 f1       	breq	.+112    	; 0x16a4 <stage_3+0x90>
    1634:	ef cf       	rjmp	.-34     	; 0x1614 <stage_3>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[5].samplingInterval, cols[5].samplings, co2_data);
    1636:	e2 e5       	ldi	r30, 0x52	; 82
    1638:	fd e0       	ldi	r31, 0x0D	; 13
    163a:	61 8d       	ldd	r22, Z+25	; 0x19
    163c:	72 8d       	ldd	r23, Z+26	; 0x1a
    163e:	4a e6       	ldi	r20, 0x6A	; 106
    1640:	59 e0       	ldi	r21, 0x09	; 9
    1642:	83 8d       	ldd	r24, Z+27	; 0x1b
    1644:	94 8d       	ldd	r25, Z+28	; 0x1c
    1646:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    164a:	81 11       	cpse	r24, r1
    164c:	53 c0       	rjmp	.+166    	; 0x16f4 <stage_3+0xe0>
				
				adcStatus=ADC_init_sampling(cols[6].samplingInterval, cols[6].samplings, meth_data);
    164e:	e2 e5       	ldi	r30, 0x52	; 82
    1650:	fd e0       	ldi	r31, 0x0D	; 13
    1652:	66 8d       	ldd	r22, Z+30	; 0x1e
    1654:	77 8d       	ldd	r23, Z+31	; 0x1f
    1656:	42 e1       	ldi	r20, 0x12	; 18
    1658:	57 e0       	ldi	r21, 0x07	; 7
    165a:	80 a1       	ldd	r24, Z+32	; 0x20
    165c:	0e 94 4d 13 	call	0x269a	; 0x269a <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1660:	81 11       	cpse	r24, r1
    1662:	4a c0       	rjmp	.+148    	; 0x16f8 <stage_3+0xe4>
			
				state_s3=STAGE_GET_TIME;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s3>
			break;
    166a:	d4 cf       	rjmp	.-88     	; 0x1614 <stage_3>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    166c:	8f e7       	ldi	r24, 0x7F	; 127
    166e:	9d e0       	ldi	r25, 0x0D	; 13
    1670:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s3>
			break;
    167a:	cc cf       	rjmp	.-104    	; 0x1614 <stage_3>
			
			case STAGE_START:
				SCD30_start_sampling();
    167c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <SCD30_start_sampling>
				ADC_start_sampling();
    1680:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s3>
			break;
    168a:	c4 cf       	rjmp	.-120    	; 0x1614 <stage_3>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    168c:	0e 94 a5 1c 	call	0x394a	; 0x394a <SCD30_is_sampling_done>
    1690:	88 23       	and	r24, r24
    1692:	a1 f1       	breq	.+104    	; 0x16fc <stage_3+0xe8>
    1694:	0e 94 5f 1c 	call	0x38be	; 0x38be <ADC_is_sampling_done>
    1698:	88 23       	and	r24, r24
    169a:	91 f1       	breq	.+100    	; 0x1700 <stage_3+0xec>
				state_s3=STAGE_UPDATE_MRPP;
    169c:	85 e0       	ldi	r24, 0x05	; 5
    169e:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s3>
			break;
    16a2:	b8 cf       	rjmp	.-144    	; 0x1614 <stage_3>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    16a4:	26 e9       	ldi	r18, 0x96	; 150
    16a6:	3d e0       	ldi	r19, 0x0D	; 13
    16a8:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    16ac:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    16b0:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    16b4:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    16b8:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    16bc:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    16c0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(6, ts, co2_data);
    16c4:	4a e6       	ldi	r20, 0x6A	; 106
    16c6:	59 e0       	ldi	r21, 0x09	; 9
    16c8:	66 e9       	ldi	r22, 0x96	; 150
    16ca:	7d e0       	ldi	r23, 0x0D	; 13
    16cc:	86 e0       	ldi	r24, 0x06	; 6
    16ce:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(7, ts, meth_data);
    16d2:	42 e1       	ldi	r20, 0x12	; 18
    16d4:	57 e0       	ldi	r21, 0x07	; 7
    16d6:	66 e9       	ldi	r22, 0x96	; 150
    16d8:	7d e0       	ldi	r23, 0x0D	; 13
    16da:	87 e0       	ldi	r24, 0x07	; 7
    16dc:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <state_s3>
			break;
    16e6:	96 cf       	rjmp	.-212    	; 0x1614 <stage_3>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    16e8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    16ec:	0e 94 66 1d 	call	0x3acc	; 0x3acc <ADC_deinit_sampling>
				return STAGE_DONE;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[5].samplingInterval, cols[5].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[6].samplingInterval, cols[6].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	08 95       	ret
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	08 95       	ret
    1700:	80 e0       	ldi	r24, 0x00	; 0
				ADC_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    1702:	08 95       	ret

Disassembly of section .text.stage_2:

00001322 <stage_2>:
static STAGE_STATUS stage_2(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
    1322:	80 91 c3 0d 	lds	r24, 0x0DC3	; 0x800dc3 <state_s2>
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	89 f1       	breq	.+98     	; 0x138c <stage_2+0x6a>
    132a:	28 f4       	brcc	.+10     	; 0x1336 <stage_2+0x14>
    132c:	88 23       	and	r24, r24
    132e:	59 f0       	breq	.+22     	; 0x1346 <stage_2+0x24>
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	21 f1       	breq	.+72     	; 0x137c <stage_2+0x5a>
    1334:	f6 cf       	rjmp	.-20     	; 0x1322 <stage_2>
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	09 f4       	brne	.+2      	; 0x133c <stage_2+0x1a>
    133a:	66 c0       	rjmp	.+204    	; 0x1408 <stage_2+0xe6>
    133c:	98 f1       	brcs	.+102    	; 0x13a4 <stage_2+0x82>
    133e:	85 30       	cpi	r24, 0x05	; 5
    1340:	09 f4       	brne	.+2      	; 0x1344 <stage_2+0x22>
    1342:	40 c0       	rjmp	.+128    	; 0x13c4 <stage_2+0xa2>
    1344:	ee cf       	rjmp	.-36     	; 0x1322 <stage_2>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
    1346:	e2 e5       	ldi	r30, 0x52	; 82
    1348:	fd e0       	ldi	r31, 0x0D	; 13
    134a:	67 85       	ldd	r22, Z+15	; 0x0f
    134c:	70 89       	ldd	r23, Z+16	; 0x10
    134e:	4a e6       	ldi	r20, 0x6A	; 106
    1350:	59 e0       	ldi	r21, 0x09	; 9
    1352:	81 89       	ldd	r24, Z+17	; 0x11
    1354:	92 89       	ldd	r25, Z+18	; 0x12
    1356:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    135a:	81 11       	cpse	r24, r1
    135c:	5b c0       	rjmp	.+182    	; 0x1414 <stage_2+0xf2>
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
    135e:	e2 e5       	ldi	r30, 0x52	; 82
    1360:	fd e0       	ldi	r31, 0x0D	; 13
    1362:	64 89       	ldd	r22, Z+20	; 0x14
    1364:	75 89       	ldd	r23, Z+21	; 0x15
    1366:	42 e1       	ldi	r20, 0x12	; 18
    1368:	57 e0       	ldi	r21, 0x07	; 7
    136a:	86 89       	ldd	r24, Z+22	; 0x16
    136c:	0e 94 4d 13 	call	0x269a	; 0x269a <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1370:	81 11       	cpse	r24, r1
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <stage_2+0xf6>
			
				state_s2=STAGE_GET_TIME;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s2>
			break;
    137a:	d3 cf       	rjmp	.-90     	; 0x1322 <stage_2>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    137c:	8f e7       	ldi	r24, 0x7F	; 127
    137e:	9d e0       	ldi	r25, 0x0D	; 13
    1380:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s2>
			break;
    138a:	cb cf       	rjmp	.-106    	; 0x1322 <stage_2>
			
			case STAGE_START:
				SCD30_start_sampling();
    138c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <SCD30_start_sampling>
				ADC_start_sampling();
    1390:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <ADC_start_sampling>
				PUMP_start(seconds);
    1394:	8a e0       	ldi	r24, 0x0A	; 10
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <PUMP_start>
			
				state_s2=STAGE_WAIT;
    139c:	83 e0       	ldi	r24, 0x03	; 3
    139e:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s2>
			break;
    13a2:	bf cf       	rjmp	.-130    	; 0x1322 <stage_2>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    13a4:	0e 94 a5 1c 	call	0x394a	; 0x394a <SCD30_is_sampling_done>
    13a8:	88 23       	and	r24, r24
    13aa:	c1 f1       	breq	.+112    	; 0x141c <stage_2+0xfa>
    13ac:	0e 94 5f 1c 	call	0x38be	; 0x38be <ADC_is_sampling_done>
    13b0:	88 23       	and	r24, r24
    13b2:	b1 f1       	breq	.+108    	; 0x1420 <stage_2+0xfe>
    13b4:	0e 94 97 1c 	call	0x392e	; 0x392e <PUMP_is_done>
    13b8:	88 23       	and	r24, r24
    13ba:	a1 f1       	breq	.+104    	; 0x1424 <stage_2+0x102>
				state_s2=STAGE_UPDATE_MRPP;
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s2>
			break;
    13c2:	af cf       	rjmp	.-162    	; 0x1322 <stage_2>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    13c4:	26 e9       	ldi	r18, 0x96	; 150
    13c6:	3d e0       	ldi	r19, 0x0D	; 13
    13c8:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <dt>
    13cc:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <dt+0x1>
    13d0:	60 91 81 0d 	lds	r22, 0x0D81	; 0x800d81 <dt+0x2>
    13d4:	70 91 82 0d 	lds	r23, 0x0D82	; 0x800d82 <dt+0x3>
    13d8:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <dt+0x4>
    13dc:	90 91 84 0d 	lds	r25, 0x0D84	; 0x800d84 <dt+0x5>
    13e0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(4, ts, co2_data);
    13e4:	4a e6       	ldi	r20, 0x6A	; 106
    13e6:	59 e0       	ldi	r21, 0x09	; 9
    13e8:	66 e9       	ldi	r22, 0x96	; 150
    13ea:	7d e0       	ldi	r23, 0x0D	; 13
    13ec:	84 e0       	ldi	r24, 0x04	; 4
    13ee:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(5, ts, meth_data);
    13f2:	42 e1       	ldi	r20, 0x12	; 18
    13f4:	57 e0       	ldi	r21, 0x07	; 7
    13f6:	66 e9       	ldi	r22, 0x96	; 150
    13f8:	7d e0       	ldi	r23, 0x0D	; 13
    13fa:	85 e0       	ldi	r24, 0x05	; 5
    13fc:	0e 94 77 12 	call	0x24ee	; 0x24ee <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	80 93 c3 0d 	sts	0x0DC3, r24	; 0x800dc3 <state_s2>
			break;
    1406:	8d cf       	rjmp	.-230    	; 0x1322 <stage_2>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1408:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    140c:	0e 94 66 1d 	call	0x3acc	; 0x3acc <ADC_deinit_sampling>
				return STAGE_DONE;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	08 95       	ret
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	08 95       	ret
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	08 95       	ret
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	08 95       	ret
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	08 95       	ret
    1424:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1426:	08 95       	ret

Disassembly of section .text.send_body:

0000308c <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	e4 97       	sbiw	r28, 0x34	; 52
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    30a0:	ae 01       	movw	r20, r28
    30a2:	4c 5c       	subi	r20, 0xCC	; 204
    30a4:	5f 4f       	sbci	r21, 0xFF	; 255
    30a6:	be 01       	movw	r22, r28
    30a8:	6f 5f       	subi	r22, 0xFF	; 255
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	0e 94 36 10 	call	0x206c	; 0x206c <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    30b0:	6c a9       	ldd	r22, Y+52	; 0x34
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <LM_send_uplink>
}
    30ba:	e4 96       	adiw	r28, 0x34	; 52
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	08 95       	ret

Disassembly of section .text.decode_body_response:

000036aa <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    36aa:	cf 93       	push	r28
	switch(status){
    36ac:	63 30       	cpi	r22, 0x03	; 3
    36ae:	71 f0       	breq	.+28     	; 0x36cc <decode_body_response+0x22>
    36b0:	18 f4       	brcc	.+6      	; 0x36b8 <decode_body_response+0xe>
    36b2:	66 23       	and	r22, r22
    36b4:	31 f0       	breq	.+12     	; 0x36c2 <decode_body_response+0x18>
    36b6:	03 c0       	rjmp	.+6      	; 0x36be <decode_body_response+0x14>
    36b8:	65 50       	subi	r22, 0x05	; 5
    36ba:	62 30       	cpi	r22, 0x02	; 2
    36bc:	10 f0       	brcs	.+4      	; 0x36c2 <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    36be:	84 e1       	ldi	r24, 0x14	; 20
    36c0:	06 c0       	rjmp	.+12     	; 0x36ce <decode_body_response+0x24>
    36c2:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    36c4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <MRPP_set_body_sent>
			return success;
    36c8:	8c 2f       	mov	r24, r28
    36ca:	01 c0       	rjmp	.+2      	; 0x36ce <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    36cc:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    36ce:	cf 91       	pop	r28
    36d0:	08 95       	ret

Disassembly of section .text.send_tail:

0000310a <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	e4 97       	sbiw	r28, 0x34	; 52
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    311e:	be 01       	movw	r22, r28
    3120:	6c 5c       	subi	r22, 0xCC	; 204
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	ce 01       	movw	r24, r28
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	0e 94 c0 1b 	call	0x3780	; 0x3780 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    312c:	6c a9       	ldd	r22, Y+52	; 0x34
    312e:	ce 01       	movw	r24, r28
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <LM_send_uplink>
}
    3136:	e4 96       	adiw	r28, 0x34	; 52
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	08 95       	ret

Disassembly of section .text.send_msg:

000039fe <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    39fe:	0e 94 af 12 	call	0x255e	; 0x255e <uart0_hal_send_string>
    3a02:	2f ef       	ldi	r18, 0xFF	; 255
    3a04:	80 e7       	ldi	r24, 0x70	; 112
    3a06:	92 e0       	ldi	r25, 0x02	; 2
    3a08:	21 50       	subi	r18, 0x01	; 1
    3a0a:	80 40       	sbci	r24, 0x00	; 0
    3a0c:	90 40       	sbci	r25, 0x00	; 0
    3a0e:	e1 f7       	brne	.-8      	; 0x3a08 <send_msg+0xa>
    3a10:	00 c0       	rjmp	.+0      	; 0x3a12 <send_msg+0x14>
    3a12:	00 00       	nop
    3a14:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000a18 <MAINPG_start>:
static uint8_t colsNumber=7;

static void send_msg(const char msg[]);


void MAINPG_start(){
 a18:	1f 93       	push	r17
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
 a1e:	10 e0       	ldi	r17, 0x00	; 0

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 a20:	c0 e0       	ldi	r28, 0x00	; 0
 a22:	10 c0       	rjmp	.+32     	; 0xa44 <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a24:	c5 e0       	ldi	r28, 0x05	; 5
 a26:	0e c0       	rjmp	.+28     	; 0xa44 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a28:	c4 e1       	ldi	r28, 0x14	; 20
 a2a:	0c c0       	rjmp	.+24     	; 0xa44 <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 a2c:	c4 e1       	ldi	r28, 0x14	; 20
 a2e:	0a c0       	rjmp	.+20     	; 0xa44 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 a30:	c4 e1       	ldi	r28, 0x14	; 20
 a32:	08 c0       	rjmp	.+16     	; 0xa44 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 a34:	c4 e1       	ldi	r28, 0x14	; 20
 a36:	06 c0       	rjmp	.+12     	; 0xa44 <MAINPG_start+0x2c>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 a38:	cd 2f       	mov	r28, r29
 a3a:	04 c0       	rjmp	.+8      	; 0xa44 <MAINPG_start+0x2c>
 a3c:	cd 2f       	mov	r28, r29
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 a40:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 a42:	cf e0       	ldi	r28, 0x0F	; 15
	bool fromSleep=false;
	//bool fromSleep=true;
	
	
	while(1){
		switch(state){
 a44:	ec 2f       	mov	r30, r28
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	e6 31       	cpi	r30, 0x16	; 22
 a4a:	f1 05       	cpc	r31, r1
 a4c:	d8 f7       	brcc	.-10     	; 0xa44 <MAINPG_start+0x2c>
 a4e:	eb 5a       	subi	r30, 0xAB	; 171
 a50:	ff 4f       	sbci	r31, 0xFF	; 255
 a52:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 a56:	0e 94 a4 18 	call	0x3148	; 0x3148 <uart0_hal_init>
				uart1_hal_init();
 a5a:	0e 94 c2 18 	call	0x3184	; 0x3184 <uart1_hal_init>
				TWI_HAL_init();
 a5e:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <TWI_HAL_init>
				TC2_HAL_init();
 a62:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <TC2_HAL_init>
				PM_HAL_adc_power_init();
 a66:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 a6a:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 a6e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 a72:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
 a76:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <PM_HAL_LED_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 a7a:	85 b1       	in	r24, 0x05	; 5
 a7c:	81 60       	ori	r24, 0x01	; 1
 a7e:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 a80:	85 b1       	in	r24, 0x05	; 5
 a82:	82 60       	ori	r24, 0x02	; 2
 a84:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a86:	11 11       	cpse	r17, r1
 a88:	cd cf       	rjmp	.-102    	; 0xa24 <MAINPG_start+0xc>
 a8a:	c1 e0       	ldi	r28, 0x01	; 1
 a8c:	db cf       	rjmp	.-74     	; 0xa44 <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 a8e:	67 e9       	ldi	r22, 0x97	; 151
 a90:	71 e0       	ldi	r23, 0x01	; 1
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				LED_start_try_join();
 a98:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <LED_start_try_join>
				lmStatus=join_lora();
 a9c:	0e 94 4f 11 	call	0x229e	; 0x229e <join_lora>
 aa0:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
 aa2:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
 aa6:	8c 2f       	mov	r24, r28
 aa8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <decode_join_response>
 aac:	c8 2f       	mov	r28, r24
			break;
 aae:	ca cf       	rjmp	.-108    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				LED_join_success();
 ab0:	0e 94 26 18 	call	0x304c	; 0x304c <LED_join_success>
				state=MAINPG_INIT_RTC;
 ab4:	c6 e0       	ldi	r28, 0x06	; 6
			break;
 ab6:	c6 cf       	rjmp	.-116    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 ab8:	6e e9       	ldi	r22, 0x9E	; 158
 aba:	71 e0       	ldi	r23, 0x01	; 1
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				lmStatus=LM_wake_up();
 ac2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 ac6:	81 11       	cpse	r24, r1
 ac8:	af cf       	rjmp	.-162    	; 0xa28 <MAINPG_start+0x10>
 aca:	c6 e0       	ldi	r28, 0x06	; 6
 acc:	bb cf       	rjmp	.-138    	; 0xa44 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 ace:	6d ea       	ldi	r22, 0xAD	; 173
 ad0:	71 e0       	ldi	r23, 0x01	; 1
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				LED_join_denied();
 ad8:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <LED_join_denied>
 adc:	2f ef       	ldi	r18, 0xFF	; 255
 ade:	81 e1       	ldi	r24, 0x11	; 17
 ae0:	9a e7       	ldi	r25, 0x7A	; 122
 ae2:	21 50       	subi	r18, 0x01	; 1
 ae4:	80 40       	sbci	r24, 0x00	; 0
 ae6:	90 40       	sbci	r25, 0x00	; 0
 ae8:	e1 f7       	brne	.-8      	; 0xae2 <MAINPG_start+0xca>
 aea:	00 c0       	rjmp	.+0      	; 0xaec <MAINPG_start+0xd4>
 aec:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 aee:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 af0:	a9 cf       	rjmp	.-174    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				LED_join_conf_err();
 af2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LED_join_conf_err>
				print_debug("Conf err\n\r");
 af6:	69 eb       	ldi	r22, 0xB9	; 185
 af8:	71 e0       	ldi	r23, 0x01	; 1
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				state=MAINPG_END;
 b00:	c5 e1       	ldi	r28, 0x15	; 21
			break;
 b02:	a0 cf       	rjmp	.-192    	; 0xa44 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 b04:	64 ec       	ldi	r22, 0xC4	; 196
 b06:	71 e0       	ldi	r23, 0x01	; 1
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	0e 94 be 14 	call	0x297c	; 0x297c <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 b14:	81 11       	cpse	r24, r1
 b16:	8a cf       	rjmp	.-236    	; 0xa2c <MAINPG_start+0x14>
 b18:	c8 e0       	ldi	r28, 0x08	; 8
 b1a:	94 cf       	rjmp	.-216    	; 0xa44 <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 b1c:	6f ec       	ldi	r22, 0xCF	; 207
 b1e:	71 e0       	ldi	r23, 0x01	; 1
 b20:	80 e0       	ldi	r24, 0x00	; 0
 b22:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 b26:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 b2a:	81 11       	cpse	r24, r1
 b2c:	81 cf       	rjmp	.-254    	; 0xa30 <MAINPG_start+0x18>
 b2e:	c7 e0       	ldi	r28, 0x07	; 7
 b30:	89 cf       	rjmp	.-238    	; 0xa44 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 b32:	61 ee       	ldi	r22, 0xE1	; 225
 b34:	71 e0       	ldi	r23, 0x01	; 1
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				rtcStatus=set_wakeup();
 b3c:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b40:	81 11       	cpse	r24, r1
 b42:	78 cf       	rjmp	.-272    	; 0xa34 <MAINPG_start+0x1c>
 b44:	c9 e0       	ldi	r28, 0x09	; 9
 b46:	7e cf       	rjmp	.-260    	; 0xa44 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 b48:	66 ef       	ldi	r22, 0xF6	; 246
 b4a:	71 e0       	ldi	r23, 0x01	; 1
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				MRPP_init_group(cols, colsNumber);
 b52:	67 e0       	ldi	r22, 0x07	; 7
 b54:	82 e5       	ldi	r24, 0x52	; 82
 b56:	9d e0       	ldi	r25, 0x0D	; 13
 b58:	0e 94 3d 1a 	call	0x347a	; 0x347a <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 b5c:	ca e0       	ldi	r28, 0x0A	; 10
			break;
 b5e:	72 cf       	rjmp	.-284    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 b60:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <LM_is_free>
 b64:	88 23       	and	r24, r24
 b66:	09 f4       	brne	.+2      	; 0xb6a <MAINPG_start+0x152>
 b68:	6d cf       	rjmp	.-294    	; 0xa44 <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 b6a:	0e 94 66 18 	call	0x30cc	; 0x30cc <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 b6e:	4a e0       	ldi	r20, 0x0A	; 10
 b70:	6b e0       	ldi	r22, 0x0B	; 11
 b72:	0e 94 32 1c 	call	0x3864	; 0x3864 <decode_header_tail_response>
 b76:	c8 2f       	mov	r28, r24
			break;
 b78:	65 cf       	rjmp	.-310    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 b7a:	0e 94 c7 0c 	call	0x198e	; 0x198e <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b7e:	6c e0       	ldi	r22, 0x0C	; 12
 b80:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 b84:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b86:	c8 2f       	mov	r28, r24
			break;
 b88:	5d cf       	rjmp	.-326    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 b8a:	0e 94 92 0a 	call	0x1524	; 0x1524 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b8e:	6d e0       	ldi	r22, 0x0D	; 13
 b90:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 b94:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b96:	c8 2f       	mov	r28, r24
			break;
 b98:	55 cf       	rjmp	.-342    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 b9a:	0e 94 91 09 	call	0x1322	; 0x1322 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 b9e:	6e e0       	ldi	r22, 0x0E	; 14
 ba0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 ba4:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 ba6:	c8 2f       	mov	r28, r24
			break;
 ba8:	4d cf       	rjmp	.-358    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
 baa:	0e 94 0a 0b 	call	0x1614	; 0x1614 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 bae:	60 e1       	ldi	r22, 0x10	; 16
 bb0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
 bb4:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 bb6:	c8 2f       	mov	r28, r24
			break;
 bb8:	45 cf       	rjmp	.-374    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 bba:	8e ea       	ldi	r24, 0xAE	; 174
 bbc:	9d e0       	ldi	r25, 0x0D	; 13
 bbe:	0e 94 9e 1b 	call	0x373c	; 0x373c <MRPP_is_body_package_ready>
 bc2:	88 23       	and	r24, r24
 bc4:	09 f4       	brne	.+2      	; 0xbc8 <MAINPG_start+0x1b0>
 bc6:	38 cf       	rjmp	.-400    	; 0xa38 <MAINPG_start+0x20>
 bc8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <LM_is_free>
 bcc:	88 23       	and	r24, r24
 bce:	09 f4       	brne	.+2      	; 0xbd2 <MAINPG_start+0x1ba>
 bd0:	35 cf       	rjmp	.-406    	; 0xa3c <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
 bd2:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <bodyIndex>
 bd6:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <bodyIndex+0x1>
 bda:	0e 94 46 18 	call	0x308c	; 0x308c <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 bde:	4d 2f       	mov	r20, r29
 be0:	68 2f       	mov	r22, r24
 be2:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <bodyIndex>
 be6:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <bodyIndex+0x1>
 bea:	0e 94 55 1b 	call	0x36aa	; 0x36aa <decode_body_response>
 bee:	c8 2f       	mov	r28, r24
 bf0:	29 cf       	rjmp	.-430    	; 0xa44 <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 bf2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <MRPP_all_body_package_sent>
 bf6:	88 23       	and	r24, r24
 bf8:	09 f4       	brne	.+2      	; 0xbfc <MAINPG_start+0x1e4>
 bfa:	22 cf       	rjmp	.-444    	; 0xa40 <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
 bfc:	c1 e1       	ldi	r28, 0x11	; 17
 bfe:	22 cf       	rjmp	.-444    	; 0xa44 <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 c00:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <LM_is_free>
 c04:	88 23       	and	r24, r24
 c06:	09 f4       	brne	.+2      	; 0xc0a <MAINPG_start+0x1f2>
 c08:	1d cf       	rjmp	.-454    	; 0xa44 <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 c0a:	0e 94 85 18 	call	0x310a	; 0x310a <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 c0e:	41 e1       	ldi	r20, 0x11	; 17
 c10:	62 e1       	ldi	r22, 0x12	; 18
 c12:	0e 94 32 1c 	call	0x3864	; 0x3864 <decode_header_tail_response>
 c16:	c8 2f       	mov	r28, r24
				
			break;
 c18:	15 cf       	rjmp	.-470    	; 0xa44 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 c1a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 c1e:	11 e0       	ldi	r17, 0x01	; 1
 c20:	81 11       	cpse	r24, r1
 c22:	10 e0       	ldi	r17, 0x00	; 0
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
 c24:	80 e0       	ldi	r24, 0x00	; 0
 c26:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <PM_HAL_LED_power>
				
				state=MAINPG_SLEEP;
 c42:	c3 e1       	ldi	r28, 0x13	; 19
			break;
 c44:	ff ce       	rjmp	.-514    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 c46:	62 e0       	ldi	r22, 0x02	; 2
 c48:	72 e0       	ldi	r23, 0x02	; 2
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				PM_HAL_enter_power_down();
 c50:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 c54:	6a e0       	ldi	r22, 0x0A	; 10
 c56:	72 e0       	ldi	r23, 0x02	; 2
 c58:	80 e0       	ldi	r24, 0x00	; 0
 c5a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				state=MAINPG_INIT_HW;
 c5e:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 c60:	f1 ce       	rjmp	.-542    	; 0xa44 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 c62:	62 e1       	ldi	r22, 0x12	; 18
 c64:	72 e0       	ldi	r23, 0x02	; 2
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				LED_fatal_err();
 c6c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <LED_fatal_err>
				state=MAINPG_END;
 c70:	c5 e1       	ldi	r28, 0x15	; 21
			break;
 c72:	e8 ce       	rjmp	.-560    	; 0xa44 <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 c74:	60 e2       	ldi	r22, 0x20	; 32
 c76:	72 e0       	ldi	r23, 0x02	; 2
 c78:	80 e0       	ldi	r24, 0x00	; 0
 c7a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <send_msg>
				return;
			break;	
		}
	}
}
 c7e:	df 91       	pop	r29
 c80:	cf 91       	pop	r28
 c82:	1f 91       	pop	r17
 c84:	08 95       	ret

Disassembly of section .text.calc_crc8:

000032d8 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    32d8:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    32da:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    32dc:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    32e0:	fa 01       	movw	r30, r20
    32e2:	e3 0f       	add	r30, r19
    32e4:	f1 1d       	adc	r31, r1
    32e6:	90 81       	ld	r25, Z
    32e8:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    32ea:	28 e0       	ldi	r18, 0x08	; 8
    32ec:	0a c0       	rjmp	.+20     	; 0x3302 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    32ee:	88 23       	and	r24, r24
    32f0:	34 f4       	brge	.+12     	; 0x32fe <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	91 e3       	ldi	r25, 0x31	; 49
    32fa:	89 27       	eor	r24, r25
    32fc:	01 c0       	rjmp	.+2      	; 0x3300 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    32fe:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    3300:	21 50       	subi	r18, 0x01	; 1
    3302:	21 11       	cpse	r18, r1
    3304:	f4 cf       	rjmp	.-24     	; 0x32ee <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3306:	3f 5f       	subi	r19, 0xFF	; 255
    3308:	36 17       	cp	r19, r22
    330a:	50 f3       	brcs	.-44     	; 0x32e0 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    330c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003bb8 <__subsf3>:
    3bb8:	50 58       	subi	r21, 0x80	; 128

00003bba <__addsf3>:
    3bba:	bb 27       	eor	r27, r27
    3bbc:	aa 27       	eor	r26, r26
    3bbe:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3x>
    3bc2:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001a5c <__addsf3x>:
    1a5c:	11 c0       	rjmp	.+34     	; 0x1a80 <__addsf3x+0x24>
    1a5e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__fp_pscA>
    1a62:	38 f0       	brcs	.+14     	; 0x1a72 <__addsf3x+0x16>
    1a64:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__fp_pscB>
    1a68:	20 f0       	brcs	.+8      	; 0x1a72 <__addsf3x+0x16>
    1a6a:	39 f4       	brne	.+14     	; 0x1a7a <__addsf3x+0x1e>
    1a6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <__addsf3x+0x1a>
    1a70:	26 f4       	brtc	.+8      	; 0x1a7a <__addsf3x+0x1e>
    1a72:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_nan>
    1a76:	0e f4       	brtc	.+2      	; 0x1a7a <__addsf3x+0x1e>
    1a78:	e0 95       	com	r30
    1a7a:	e7 fb       	bst	r30, 7
    1a7c:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_inf>
    1a80:	e9 2f       	mov	r30, r25
    1a82:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__fp_split3>
    1a86:	58 f3       	brcs	.-42     	; 0x1a5e <__addsf3x+0x2>
    1a88:	ba 17       	cp	r27, r26
    1a8a:	62 07       	cpc	r22, r18
    1a8c:	73 07       	cpc	r23, r19
    1a8e:	84 07       	cpc	r24, r20
    1a90:	95 07       	cpc	r25, r21
    1a92:	20 f0       	brcs	.+8      	; 0x1a9c <__addsf3x+0x40>
    1a94:	79 f4       	brne	.+30     	; 0x1ab4 <__addsf3x+0x58>
    1a96:	a6 f5       	brtc	.+104    	; 0x1b00 <__addsf3x+0xa4>
    1a98:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_zero>
    1a9c:	0e f4       	brtc	.+2      	; 0x1aa0 <__addsf3x+0x44>
    1a9e:	e0 95       	com	r30
    1aa0:	0b 2e       	mov	r0, r27
    1aa2:	ba 2f       	mov	r27, r26
    1aa4:	a0 2d       	mov	r26, r0
    1aa6:	0b 01       	movw	r0, r22
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	90 01       	movw	r18, r0
    1aac:	0c 01       	movw	r0, r24
    1aae:	ca 01       	movw	r24, r20
    1ab0:	a0 01       	movw	r20, r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	ff 27       	eor	r31, r31
    1ab6:	59 1b       	sub	r21, r25
    1ab8:	99 f0       	breq	.+38     	; 0x1ae0 <__addsf3x+0x84>
    1aba:	59 3f       	cpi	r21, 0xF9	; 249
    1abc:	50 f4       	brcc	.+20     	; 0x1ad2 <__addsf3x+0x76>
    1abe:	50 3e       	cpi	r21, 0xE0	; 224
    1ac0:	68 f1       	brcs	.+90     	; 0x1b1c <__addsf3x+0xc0>
    1ac2:	1a 16       	cp	r1, r26
    1ac4:	f0 40       	sbci	r31, 0x00	; 0
    1ac6:	a2 2f       	mov	r26, r18
    1ac8:	23 2f       	mov	r18, r19
    1aca:	34 2f       	mov	r19, r20
    1acc:	44 27       	eor	r20, r20
    1ace:	58 5f       	subi	r21, 0xF8	; 248
    1ad0:	f3 cf       	rjmp	.-26     	; 0x1ab8 <__addsf3x+0x5c>
    1ad2:	46 95       	lsr	r20
    1ad4:	37 95       	ror	r19
    1ad6:	27 95       	ror	r18
    1ad8:	a7 95       	ror	r26
    1ada:	f0 40       	sbci	r31, 0x00	; 0
    1adc:	53 95       	inc	r21
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__addsf3x+0x76>
    1ae0:	7e f4       	brtc	.+30     	; 0x1b00 <__addsf3x+0xa4>
    1ae2:	1f 16       	cp	r1, r31
    1ae4:	ba 0b       	sbc	r27, r26
    1ae6:	62 0b       	sbc	r22, r18
    1ae8:	73 0b       	sbc	r23, r19
    1aea:	84 0b       	sbc	r24, r20
    1aec:	ba f0       	brmi	.+46     	; 0x1b1c <__addsf3x+0xc0>
    1aee:	91 50       	subi	r25, 0x01	; 1
    1af0:	a1 f0       	breq	.+40     	; 0x1b1a <__addsf3x+0xbe>
    1af2:	ff 0f       	add	r31, r31
    1af4:	bb 1f       	adc	r27, r27
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	c2 f7       	brpl	.-16     	; 0x1aee <__addsf3x+0x92>
    1afe:	0e c0       	rjmp	.+28     	; 0x1b1c <__addsf3x+0xc0>
    1b00:	ba 0f       	add	r27, r26
    1b02:	62 1f       	adc	r22, r18
    1b04:	73 1f       	adc	r23, r19
    1b06:	84 1f       	adc	r24, r20
    1b08:	48 f4       	brcc	.+18     	; 0x1b1c <__addsf3x+0xc0>
    1b0a:	87 95       	ror	r24
    1b0c:	77 95       	ror	r23
    1b0e:	67 95       	ror	r22
    1b10:	b7 95       	ror	r27
    1b12:	f7 95       	ror	r31
    1b14:	9e 3f       	cpi	r25, 0xFE	; 254
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <__addsf3x+0xbe>
    1b18:	b0 cf       	rjmp	.-160    	; 0x1a7a <__addsf3x+0x1e>
    1b1a:	93 95       	inc	r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <__addsf3x+0xc6>
    1b20:	99 27       	eor	r25, r25
    1b22:	ee 0f       	add	r30, r30
    1b24:	97 95       	ror	r25
    1b26:	87 95       	ror	r24
    1b28:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003cc4 <__divsf3>:
    3cc4:	0e 94 82 0b 	call	0x1704	; 0x1704 <__divsf3x>
    3cc8:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001704 <__divsf3x>:
    1704:	10 c0       	rjmp	.+32     	; 0x1726 <__divsf3x+0x22>
    1706:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__fp_pscB>
    170a:	58 f0       	brcs	.+22     	; 0x1722 <__divsf3x+0x1e>
    170c:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__fp_pscA>
    1710:	40 f0       	brcs	.+16     	; 0x1722 <__divsf3x+0x1e>
    1712:	29 f4       	brne	.+10     	; 0x171e <__divsf3x+0x1a>
    1714:	5f 3f       	cpi	r21, 0xFF	; 255
    1716:	29 f0       	breq	.+10     	; 0x1722 <__divsf3x+0x1e>
    1718:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_inf>
    171c:	51 11       	cpse	r21, r1
    171e:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__fp_szero>
    1722:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_nan>
    1726:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__fp_split3>
    172a:	68 f3       	brcs	.-38     	; 0x1706 <__divsf3x+0x2>

0000172c <__divsf3_pse>:
    172c:	99 23       	and	r25, r25
    172e:	b1 f3       	breq	.-20     	; 0x171c <__divsf3x+0x18>
    1730:	55 23       	and	r21, r21
    1732:	91 f3       	breq	.-28     	; 0x1718 <__divsf3x+0x14>
    1734:	95 1b       	sub	r25, r21
    1736:	55 0b       	sbc	r21, r21
    1738:	bb 27       	eor	r27, r27
    173a:	aa 27       	eor	r26, r26
    173c:	62 17       	cp	r22, r18
    173e:	73 07       	cpc	r23, r19
    1740:	84 07       	cpc	r24, r20
    1742:	38 f0       	brcs	.+14     	; 0x1752 <__divsf3_pse+0x26>
    1744:	9f 5f       	subi	r25, 0xFF	; 255
    1746:	5f 4f       	sbci	r21, 0xFF	; 255
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	44 1f       	adc	r20, r20
    174e:	aa 1f       	adc	r26, r26
    1750:	a9 f3       	breq	.-22     	; 0x173c <__divsf3_pse+0x10>
    1752:	35 d0       	rcall	.+106    	; 0x17be <__divsf3_pse+0x92>
    1754:	0e 2e       	mov	r0, r30
    1756:	3a f0       	brmi	.+14     	; 0x1766 <__divsf3_pse+0x3a>
    1758:	e0 e8       	ldi	r30, 0x80	; 128
    175a:	32 d0       	rcall	.+100    	; 0x17c0 <__divsf3_pse+0x94>
    175c:	91 50       	subi	r25, 0x01	; 1
    175e:	50 40       	sbci	r21, 0x00	; 0
    1760:	e6 95       	lsr	r30
    1762:	00 1c       	adc	r0, r0
    1764:	ca f7       	brpl	.-14     	; 0x1758 <__divsf3_pse+0x2c>
    1766:	2b d0       	rcall	.+86     	; 0x17be <__divsf3_pse+0x92>
    1768:	fe 2f       	mov	r31, r30
    176a:	29 d0       	rcall	.+82     	; 0x17be <__divsf3_pse+0x92>
    176c:	66 0f       	add	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	bb 1f       	adc	r27, r27
    1774:	26 17       	cp	r18, r22
    1776:	37 07       	cpc	r19, r23
    1778:	48 07       	cpc	r20, r24
    177a:	ab 07       	cpc	r26, r27
    177c:	b0 e8       	ldi	r27, 0x80	; 128
    177e:	09 f0       	breq	.+2      	; 0x1782 <__divsf3_pse+0x56>
    1780:	bb 0b       	sbc	r27, r27
    1782:	80 2d       	mov	r24, r0
    1784:	bf 01       	movw	r22, r30
    1786:	ff 27       	eor	r31, r31
    1788:	93 58       	subi	r25, 0x83	; 131
    178a:	5f 4f       	sbci	r21, 0xFF	; 255
    178c:	3a f0       	brmi	.+14     	; 0x179c <__divsf3_pse+0x70>
    178e:	9e 3f       	cpi	r25, 0xFE	; 254
    1790:	51 05       	cpc	r21, r1
    1792:	78 f0       	brcs	.+30     	; 0x17b2 <__divsf3_pse+0x86>
    1794:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_inf>
    1798:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__fp_szero>
    179c:	5f 3f       	cpi	r21, 0xFF	; 255
    179e:	e4 f3       	brlt	.-8      	; 0x1798 <__divsf3_pse+0x6c>
    17a0:	98 3e       	cpi	r25, 0xE8	; 232
    17a2:	d4 f3       	brlt	.-12     	; 0x1798 <__divsf3_pse+0x6c>
    17a4:	86 95       	lsr	r24
    17a6:	77 95       	ror	r23
    17a8:	67 95       	ror	r22
    17aa:	b7 95       	ror	r27
    17ac:	f7 95       	ror	r31
    17ae:	9f 5f       	subi	r25, 0xFF	; 255
    17b0:	c9 f7       	brne	.-14     	; 0x17a4 <__divsf3_pse+0x78>
    17b2:	88 0f       	add	r24, r24
    17b4:	91 1d       	adc	r25, r1
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret
    17be:	e1 e0       	ldi	r30, 0x01	; 1
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	bb 1f       	adc	r27, r27
    17c8:	62 17       	cp	r22, r18
    17ca:	73 07       	cpc	r23, r19
    17cc:	84 07       	cpc	r24, r20
    17ce:	ba 07       	cpc	r27, r26
    17d0:	20 f0       	brcs	.+8      	; 0x17da <__divsf3_pse+0xae>
    17d2:	62 1b       	sub	r22, r18
    17d4:	73 0b       	sbc	r23, r19
    17d6:	84 0b       	sbc	r24, r20
    17d8:	ba 0b       	sbc	r27, r26
    17da:	ee 1f       	adc	r30, r30
    17dc:	88 f7       	brcc	.-30     	; 0x17c0 <__divsf3_pse+0x94>
    17de:	e0 95       	com	r30
    17e0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000027bc <__fixunssfsi>:
    27bc:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fp_splitA>
    27c0:	88 f0       	brcs	.+34     	; 0x27e4 <__fixunssfsi+0x28>
    27c2:	9f 57       	subi	r25, 0x7F	; 127
    27c4:	98 f0       	brcs	.+38     	; 0x27ec <__fixunssfsi+0x30>
    27c6:	b9 2f       	mov	r27, r25
    27c8:	99 27       	eor	r25, r25
    27ca:	b7 51       	subi	r27, 0x17	; 23
    27cc:	b0 f0       	brcs	.+44     	; 0x27fa <__fixunssfsi+0x3e>
    27ce:	e1 f0       	breq	.+56     	; 0x2808 <__fixunssfsi+0x4c>
    27d0:	66 0f       	add	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	1a f0       	brmi	.+6      	; 0x27e0 <__fixunssfsi+0x24>
    27da:	ba 95       	dec	r27
    27dc:	c9 f7       	brne	.-14     	; 0x27d0 <__fixunssfsi+0x14>
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <__fixunssfsi+0x4c>
    27e0:	b1 30       	cpi	r27, 0x01	; 1
    27e2:	91 f0       	breq	.+36     	; 0x2808 <__fixunssfsi+0x4c>
    27e4:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__fp_zero>
    27e8:	b1 e0       	ldi	r27, 0x01	; 1
    27ea:	08 95       	ret
    27ec:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__fp_zero>
    27f0:	67 2f       	mov	r22, r23
    27f2:	78 2f       	mov	r23, r24
    27f4:	88 27       	eor	r24, r24
    27f6:	b8 5f       	subi	r27, 0xF8	; 248
    27f8:	39 f0       	breq	.+14     	; 0x2808 <__fixunssfsi+0x4c>
    27fa:	b9 3f       	cpi	r27, 0xF9	; 249
    27fc:	cc f3       	brlt	.-14     	; 0x27f0 <__fixunssfsi+0x34>
    27fe:	86 95       	lsr	r24
    2800:	77 95       	ror	r23
    2802:	67 95       	ror	r22
    2804:	b3 95       	inc	r27
    2806:	d9 f7       	brne	.-10     	; 0x27fe <__fixunssfsi+0x42>
    2808:	3e f4       	brtc	.+14     	; 0x2818 <__fixunssfsi+0x5c>
    280a:	90 95       	com	r25
    280c:	80 95       	com	r24
    280e:	70 95       	com	r23
    2810:	61 95       	neg	r22
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8f 4f       	sbci	r24, 0xFF	; 255
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002318 <__floatunsisf>:
    2318:	e8 94       	clt
    231a:	09 c0       	rjmp	.+18     	; 0x232e <__floatsisf+0x12>

0000231c <__floatsisf>:
    231c:	97 fb       	bst	r25, 7
    231e:	3e f4       	brtc	.+14     	; 0x232e <__floatsisf+0x12>
    2320:	90 95       	com	r25
    2322:	80 95       	com	r24
    2324:	70 95       	com	r23
    2326:	61 95       	neg	r22
    2328:	7f 4f       	sbci	r23, 0xFF	; 255
    232a:	8f 4f       	sbci	r24, 0xFF	; 255
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	99 23       	and	r25, r25
    2330:	a9 f0       	breq	.+42     	; 0x235c <__floatsisf+0x40>
    2332:	f9 2f       	mov	r31, r25
    2334:	96 e9       	ldi	r25, 0x96	; 150
    2336:	bb 27       	eor	r27, r27
    2338:	93 95       	inc	r25
    233a:	f6 95       	lsr	r31
    233c:	87 95       	ror	r24
    233e:	77 95       	ror	r23
    2340:	67 95       	ror	r22
    2342:	b7 95       	ror	r27
    2344:	f1 11       	cpse	r31, r1
    2346:	f8 cf       	rjmp	.-16     	; 0x2338 <__floatsisf+0x1c>
    2348:	fa f4       	brpl	.+62     	; 0x2388 <__floatsisf+0x6c>
    234a:	bb 0f       	add	r27, r27
    234c:	11 f4       	brne	.+4      	; 0x2352 <__floatsisf+0x36>
    234e:	60 ff       	sbrs	r22, 0
    2350:	1b c0       	rjmp	.+54     	; 0x2388 <__floatsisf+0x6c>
    2352:	6f 5f       	subi	r22, 0xFF	; 255
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	16 c0       	rjmp	.+44     	; 0x2388 <__floatsisf+0x6c>
    235c:	88 23       	and	r24, r24
    235e:	11 f0       	breq	.+4      	; 0x2364 <__floatsisf+0x48>
    2360:	96 e9       	ldi	r25, 0x96	; 150
    2362:	11 c0       	rjmp	.+34     	; 0x2386 <__floatsisf+0x6a>
    2364:	77 23       	and	r23, r23
    2366:	21 f0       	breq	.+8      	; 0x2370 <__floatsisf+0x54>
    2368:	9e e8       	ldi	r25, 0x8E	; 142
    236a:	87 2f       	mov	r24, r23
    236c:	76 2f       	mov	r23, r22
    236e:	05 c0       	rjmp	.+10     	; 0x237a <__floatsisf+0x5e>
    2370:	66 23       	and	r22, r22
    2372:	71 f0       	breq	.+28     	; 0x2390 <__floatsisf+0x74>
    2374:	96 e8       	ldi	r25, 0x86	; 134
    2376:	86 2f       	mov	r24, r22
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	2a f0       	brmi	.+10     	; 0x2388 <__floatsisf+0x6c>
    237e:	9a 95       	dec	r25
    2380:	66 0f       	add	r22, r22
    2382:	77 1f       	adc	r23, r23
    2384:	88 1f       	adc	r24, r24
    2386:	da f7       	brpl	.-10     	; 0x237e <__floatsisf+0x62>
    2388:	88 0f       	add	r24, r24
    238a:	96 95       	lsr	r25
    238c:	87 95       	ror	r24
    238e:	97 f9       	bld	r25, 7
    2390:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003c44 <__fp_inf>:
    3c44:	97 f9       	bld	r25, 7
    3c46:	9f 67       	ori	r25, 0x7F	; 127
    3c48:	80 e8       	ldi	r24, 0x80	; 128
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	60 e0       	ldi	r22, 0x00	; 0
    3c4e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003d10 <__fp_nan>:
    3d10:	9f ef       	ldi	r25, 0xFF	; 255
    3d12:	80 ec       	ldi	r24, 0xC0	; 192
    3d14:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003bc6 <__fp_pscA>:
    3bc6:	00 24       	eor	r0, r0
    3bc8:	0a 94       	dec	r0
    3bca:	16 16       	cp	r1, r22
    3bcc:	17 06       	cpc	r1, r23
    3bce:	18 06       	cpc	r1, r24
    3bd0:	09 06       	cpc	r0, r25
    3bd2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003bd4 <__fp_pscB>:
    3bd4:	00 24       	eor	r0, r0
    3bd6:	0a 94       	dec	r0
    3bd8:	12 16       	cp	r1, r18
    3bda:	13 06       	cpc	r1, r19
    3bdc:	14 06       	cpc	r1, r20
    3bde:	05 06       	cpc	r0, r21
    3be0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000037a2 <__fp_round>:
    37a2:	09 2e       	mov	r0, r25
    37a4:	03 94       	inc	r0
    37a6:	00 0c       	add	r0, r0
    37a8:	11 f4       	brne	.+4      	; 0x37ae <__fp_round+0xc>
    37aa:	88 23       	and	r24, r24
    37ac:	52 f0       	brmi	.+20     	; 0x37c2 <__fp_round+0x20>
    37ae:	bb 0f       	add	r27, r27
    37b0:	40 f4       	brcc	.+16     	; 0x37c2 <__fp_round+0x20>
    37b2:	bf 2b       	or	r27, r31
    37b4:	11 f4       	brne	.+4      	; 0x37ba <__fp_round+0x18>
    37b6:	60 ff       	sbrs	r22, 0
    37b8:	04 c0       	rjmp	.+8      	; 0x37c2 <__fp_round+0x20>
    37ba:	6f 5f       	subi	r22, 0xFF	; 255
    37bc:	7f 4f       	sbci	r23, 0xFF	; 255
    37be:	8f 4f       	sbci	r24, 0xFF	; 255
    37c0:	9f 4f       	sbci	r25, 0xFF	; 255
    37c2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002f42 <__fp_split3>:
    2f42:	57 fd       	sbrc	r21, 7
    2f44:	90 58       	subi	r25, 0x80	; 128
    2f46:	44 0f       	add	r20, r20
    2f48:	55 1f       	adc	r21, r21
    2f4a:	59 f0       	breq	.+22     	; 0x2f62 <__fp_splitA+0x10>
    2f4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f4e:	71 f0       	breq	.+28     	; 0x2f6c <__fp_splitA+0x1a>
    2f50:	47 95       	ror	r20

00002f52 <__fp_splitA>:
    2f52:	88 0f       	add	r24, r24
    2f54:	97 fb       	bst	r25, 7
    2f56:	99 1f       	adc	r25, r25
    2f58:	61 f0       	breq	.+24     	; 0x2f72 <__fp_splitA+0x20>
    2f5a:	9f 3f       	cpi	r25, 0xFF	; 255
    2f5c:	79 f0       	breq	.+30     	; 0x2f7c <__fp_splitA+0x2a>
    2f5e:	87 95       	ror	r24
    2f60:	08 95       	ret
    2f62:	12 16       	cp	r1, r18
    2f64:	13 06       	cpc	r1, r19
    2f66:	14 06       	cpc	r1, r20
    2f68:	55 1f       	adc	r21, r21
    2f6a:	f2 cf       	rjmp	.-28     	; 0x2f50 <__fp_split3+0xe>
    2f6c:	46 95       	lsr	r20
    2f6e:	f1 df       	rcall	.-30     	; 0x2f52 <__fp_splitA>
    2f70:	08 c0       	rjmp	.+16     	; 0x2f82 <__fp_splitA+0x30>
    2f72:	16 16       	cp	r1, r22
    2f74:	17 06       	cpc	r1, r23
    2f76:	18 06       	cpc	r1, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	f1 cf       	rjmp	.-30     	; 0x2f5e <__fp_splitA+0xc>
    2f7c:	86 95       	lsr	r24
    2f7e:	71 05       	cpc	r23, r1
    2f80:	61 05       	cpc	r22, r1
    2f82:	08 94       	sec
    2f84:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003be2 <__fp_zero>:
    3be2:	e8 94       	clt

00003be4 <__fp_szero>:
    3be4:	bb 27       	eor	r27, r27
    3be6:	66 27       	eor	r22, r22
    3be8:	77 27       	eor	r23, r23
    3bea:	cb 01       	movw	r24, r22
    3bec:	97 f9       	bld	r25, 7
    3bee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003ccc <__mulsf3>:
    3ccc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3x>
    3cd0:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000018ba <__mulsf3x>:
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <__mulsf3x+0x20>
    18bc:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__fp_pscA>
    18c0:	38 f0       	brcs	.+14     	; 0x18d0 <__mulsf3x+0x16>
    18c2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__fp_pscB>
    18c6:	20 f0       	brcs	.+8      	; 0x18d0 <__mulsf3x+0x16>
    18c8:	95 23       	and	r25, r21
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <__mulsf3x+0x16>
    18cc:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_inf>
    18d0:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_nan>
    18d4:	11 24       	eor	r1, r1
    18d6:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__fp_szero>
    18da:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__fp_split3>
    18de:	70 f3       	brcs	.-36     	; 0x18bc <__mulsf3x+0x2>

000018e0 <__mulsf3_pse>:
    18e0:	95 9f       	mul	r25, r21
    18e2:	c1 f3       	breq	.-16     	; 0x18d4 <__mulsf3x+0x1a>
    18e4:	95 0f       	add	r25, r21
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	55 1f       	adc	r21, r21
    18ea:	62 9f       	mul	r22, r18
    18ec:	f0 01       	movw	r30, r0
    18ee:	72 9f       	mul	r23, r18
    18f0:	bb 27       	eor	r27, r27
    18f2:	f0 0d       	add	r31, r0
    18f4:	b1 1d       	adc	r27, r1
    18f6:	63 9f       	mul	r22, r19
    18f8:	aa 27       	eor	r26, r26
    18fa:	f0 0d       	add	r31, r0
    18fc:	b1 1d       	adc	r27, r1
    18fe:	aa 1f       	adc	r26, r26
    1900:	64 9f       	mul	r22, r20
    1902:	66 27       	eor	r22, r22
    1904:	b0 0d       	add	r27, r0
    1906:	a1 1d       	adc	r26, r1
    1908:	66 1f       	adc	r22, r22
    190a:	82 9f       	mul	r24, r18
    190c:	22 27       	eor	r18, r18
    190e:	b0 0d       	add	r27, r0
    1910:	a1 1d       	adc	r26, r1
    1912:	62 1f       	adc	r22, r18
    1914:	73 9f       	mul	r23, r19
    1916:	b0 0d       	add	r27, r0
    1918:	a1 1d       	adc	r26, r1
    191a:	62 1f       	adc	r22, r18
    191c:	83 9f       	mul	r24, r19
    191e:	a0 0d       	add	r26, r0
    1920:	61 1d       	adc	r22, r1
    1922:	22 1f       	adc	r18, r18
    1924:	74 9f       	mul	r23, r20
    1926:	33 27       	eor	r19, r19
    1928:	a0 0d       	add	r26, r0
    192a:	61 1d       	adc	r22, r1
    192c:	23 1f       	adc	r18, r19
    192e:	84 9f       	mul	r24, r20
    1930:	60 0d       	add	r22, r0
    1932:	21 1d       	adc	r18, r1
    1934:	82 2f       	mov	r24, r18
    1936:	76 2f       	mov	r23, r22
    1938:	6a 2f       	mov	r22, r26
    193a:	11 24       	eor	r1, r1
    193c:	9f 57       	subi	r25, 0x7F	; 127
    193e:	50 40       	sbci	r21, 0x00	; 0
    1940:	9a f0       	brmi	.+38     	; 0x1968 <__mulsf3_pse+0x88>
    1942:	f1 f0       	breq	.+60     	; 0x1980 <__mulsf3_pse+0xa0>
    1944:	88 23       	and	r24, r24
    1946:	4a f0       	brmi	.+18     	; 0x195a <__mulsf3_pse+0x7a>
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	bb 1f       	adc	r27, r27
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	a9 f7       	brne	.-22     	; 0x1944 <__mulsf3_pse+0x64>
    195a:	9e 3f       	cpi	r25, 0xFE	; 254
    195c:	51 05       	cpc	r21, r1
    195e:	80 f0       	brcs	.+32     	; 0x1980 <__mulsf3_pse+0xa0>
    1960:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_inf>
    1964:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__fp_szero>
    1968:	5f 3f       	cpi	r21, 0xFF	; 255
    196a:	e4 f3       	brlt	.-8      	; 0x1964 <__mulsf3_pse+0x84>
    196c:	98 3e       	cpi	r25, 0xE8	; 232
    196e:	d4 f3       	brlt	.-12     	; 0x1964 <__mulsf3_pse+0x84>
    1970:	86 95       	lsr	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b7 95       	ror	r27
    1978:	f7 95       	ror	r31
    197a:	e7 95       	ror	r30
    197c:	9f 5f       	subi	r25, 0xFF	; 255
    197e:	c1 f7       	brne	.-16     	; 0x1970 <__mulsf3_pse+0x90>
    1980:	fe 2b       	or	r31, r30
    1982:	88 0f       	add	r24, r24
    1984:	91 1d       	adc	r25, r1
    1986:	96 95       	lsr	r25
    1988:	87 95       	ror	r24
    198a:	97 f9       	bld	r25, 7
    198c:	08 95       	ret

Disassembly of section .text.libgcc:

00003c50 <__tablejump2__>:
    3c50:	ee 0f       	add	r30, r30
    3c52:	ff 1f       	adc	r31, r31
    3c54:	05 90       	lpm	r0, Z+
    3c56:	f4 91       	lpm	r31, Z
    3c58:	e0 2d       	mov	r30, r0
    3c5a:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003882 <__umulhisi3>:
    3882:	a2 9f       	mul	r26, r18
    3884:	b0 01       	movw	r22, r0
    3886:	b3 9f       	mul	r27, r19
    3888:	c0 01       	movw	r24, r0
    388a:	a3 9f       	mul	r26, r19
    388c:	70 0d       	add	r23, r0
    388e:	81 1d       	adc	r24, r1
    3890:	11 24       	eor	r1, r1
    3892:	91 1d       	adc	r25, r1
    3894:	b2 9f       	mul	r27, r18
    3896:	70 0d       	add	r23, r0
    3898:	81 1d       	adc	r24, r1
    389a:	11 24       	eor	r1, r1
    389c:	91 1d       	adc	r25, r1
    389e:	08 95       	ret

Disassembly of section .text.libgcc:

0000399c <__movmemx_qi>:
    399c:	99 27       	eor	r25, r25

0000399e <__movmemx_hi>:
    399e:	77 fd       	sbrc	r23, 7
    39a0:	05 c0       	rjmp	.+10     	; 0x39ac <__movmemx_hi+0xe>
    39a2:	05 90       	lpm	r0, Z+
    39a4:	0d 92       	st	X+, r0
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	e1 f7       	brne	.-8      	; 0x39a2 <__movmemx_hi+0x4>
    39aa:	08 95       	ret
    39ac:	01 90       	ld	r0, Z+
    39ae:	0d 92       	st	X+, r0
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	e1 f7       	brne	.-8      	; 0x39ac <__movmemx_hi+0xe>
    39b4:	08 95       	ret

Disassembly of section .text.avrlibc:

000034de <memcpy>:
    34de:	cf 92       	push	r12
    34e0:	df 92       	push	r13
    34e2:	ef 92       	push	r14
    34e4:	dc 01       	movw	r26, r24
    34e6:	6a 01       	movw	r12, r20
    34e8:	e6 2e       	mov	r14, r22
    34ea:	28 0f       	add	r18, r24
    34ec:	39 1f       	adc	r19, r25
    34ee:	a2 17       	cp	r26, r18
    34f0:	b3 07       	cpc	r27, r19
    34f2:	51 f0       	breq	.+20     	; 0x3508 <memcpy+0x2a>
    34f4:	f6 01       	movw	r30, r12
    34f6:	44 91       	lpm	r20, Z
    34f8:	e7 fc       	sbrc	r14, 7
    34fa:	40 81       	ld	r20, Z
    34fc:	4d 93       	st	X+, r20
    34fe:	4f ef       	ldi	r20, 0xFF	; 255
    3500:	c4 1a       	sub	r12, r20
    3502:	d4 0a       	sbc	r13, r20
    3504:	e4 0a       	sbc	r14, r20
    3506:	f3 cf       	rjmp	.-26     	; 0x34ee <memcpy+0x10>
    3508:	ef 90       	pop	r14
    350a:	df 90       	pop	r13
    350c:	cf 90       	pop	r12
    350e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000300a <strcmp>:
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	6b 01       	movw	r12, r22
    3012:	e8 2e       	mov	r14, r24
    3014:	f6 01       	movw	r30, r12
    3016:	84 91       	lpm	r24, Z
    3018:	e7 fc       	sbrc	r14, 7
    301a:	80 81       	ld	r24, Z
    301c:	f9 01       	movw	r30, r18
    301e:	54 91       	lpm	r21, Z
    3020:	47 fd       	sbrc	r20, 7
    3022:	50 81       	ld	r21, Z
    3024:	85 13       	cpse	r24, r21
    3026:	0b c0       	rjmp	.+22     	; 0x303e <strcmp+0x34>
    3028:	88 23       	and	r24, r24
    302a:	41 f0       	breq	.+16     	; 0x303c <strcmp+0x32>
    302c:	8f ef       	ldi	r24, 0xFF	; 255
    302e:	c8 1a       	sub	r12, r24
    3030:	d8 0a       	sbc	r13, r24
    3032:	e8 0a       	sbc	r14, r24
    3034:	2f 5f       	subi	r18, 0xFF	; 255
    3036:	3f 4f       	sbci	r19, 0xFF	; 255
    3038:	4f 4f       	sbci	r20, 0xFF	; 255
    303a:	ec cf       	rjmp	.-40     	; 0x3014 <strcmp+0xa>
    303c:	58 2f       	mov	r21, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	85 1b       	sub	r24, r21
    3042:	91 09       	sbc	r25, r1
    3044:	ef 90       	pop	r14
    3046:	df 90       	pop	r13
    3048:	cf 90       	pop	r12
    304a:	08 95       	ret

Disassembly of section .text.avrlibc:

000025c8 <strncmp>:
    25c8:	cf 92       	push	r12
    25ca:	df 92       	push	r13
    25cc:	ef 92       	push	r14
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	6b 01       	movw	r12, r22
    25d4:	e8 2e       	mov	r14, r24
    25d6:	01 15       	cp	r16, r1
    25d8:	11 05       	cpc	r17, r1
    25da:	19 f1       	breq	.+70     	; 0x2622 <strncmp+0x5a>
    25dc:	01 50       	subi	r16, 0x01	; 1
    25de:	11 09       	sbc	r17, r1
    25e0:	f6 01       	movw	r30, r12
    25e2:	84 91       	lpm	r24, Z
    25e4:	e7 fc       	sbrc	r14, 7
    25e6:	80 81       	ld	r24, Z
    25e8:	88 23       	and	r24, r24
    25ea:	99 f0       	breq	.+38     	; 0x2612 <strncmp+0x4a>
    25ec:	f9 01       	movw	r30, r18
    25ee:	94 91       	lpm	r25, Z
    25f0:	47 fd       	sbrc	r20, 7
    25f2:	90 81       	ld	r25, Z
    25f4:	99 23       	and	r25, r25
    25f6:	69 f0       	breq	.+26     	; 0x2612 <strncmp+0x4a>
    25f8:	01 15       	cp	r16, r1
    25fa:	11 05       	cpc	r17, r1
    25fc:	51 f0       	breq	.+20     	; 0x2612 <strncmp+0x4a>
    25fe:	89 13       	cpse	r24, r25
    2600:	08 c0       	rjmp	.+16     	; 0x2612 <strncmp+0x4a>
    2602:	8f ef       	ldi	r24, 0xFF	; 255
    2604:	c8 1a       	sub	r12, r24
    2606:	d8 0a       	sbc	r13, r24
    2608:	e8 0a       	sbc	r14, r24
    260a:	2f 5f       	subi	r18, 0xFF	; 255
    260c:	3f 4f       	sbci	r19, 0xFF	; 255
    260e:	4f 4f       	sbci	r20, 0xFF	; 255
    2610:	e5 cf       	rjmp	.-54     	; 0x25dc <strncmp+0x14>
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	f9 01       	movw	r30, r18
    2616:	24 91       	lpm	r18, Z
    2618:	47 fd       	sbrc	r20, 7
    261a:	20 81       	ld	r18, Z
    261c:	82 1b       	sub	r24, r18
    261e:	91 09       	sbc	r25, r1
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <strncmp+0x5e>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	ef 90       	pop	r14
    262c:	df 90       	pop	r13
    262e:	cf 90       	pop	r12
    2630:	08 95       	ret

Disassembly of section .text.avrlibc:

0000362c <strlen>:
    362c:	cf 92       	push	r12
    362e:	df 92       	push	r13
    3630:	ef 92       	push	r14
    3632:	6b 01       	movw	r12, r22
    3634:	e8 2e       	mov	r14, r24
    3636:	a8 2f       	mov	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	fc 01       	movw	r30, r24
    363c:	24 91       	lpm	r18, Z
    363e:	a7 fd       	sbrc	r26, 7
    3640:	20 81       	ld	r18, Z
    3642:	22 23       	and	r18, r18
    3644:	19 f0       	breq	.+6      	; 0x364c <strlen+0x20>
    3646:	01 96       	adiw	r24, 0x01	; 1
    3648:	a1 1d       	adc	r26, r1
    364a:	f7 cf       	rjmp	.-18     	; 0x363a <strlen+0xe>
    364c:	8c 19       	sub	r24, r12
    364e:	9d 09       	sbc	r25, r13
    3650:	ef 90       	pop	r14
    3652:	df 90       	pop	r13
    3654:	cf 90       	pop	r12
    3656:	08 95       	ret

Disassembly of section .text.avrlibc:

000038a0 <strcpy>:
    38a0:	9a 01       	movw	r18, r20
    38a2:	46 2f       	mov	r20, r22
    38a4:	dc 01       	movw	r26, r24
    38a6:	f9 01       	movw	r30, r18
    38a8:	54 91       	lpm	r21, Z
    38aa:	47 fd       	sbrc	r20, 7
    38ac:	50 81       	ld	r21, Z
    38ae:	5d 93       	st	X+, r21
    38b0:	55 23       	and	r21, r21
    38b2:	21 f0       	breq	.+8      	; 0x38bc <strcpy+0x1c>
    38b4:	2f 5f       	subi	r18, 0xFF	; 255
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	4f 4f       	sbci	r20, 0xFF	; 255
    38ba:	f5 cf       	rjmp	.-22     	; 0x38a6 <strcpy+0x6>
    38bc:	08 95       	ret

Disassembly of section .text.avrlibc:

00002eb8 <sprintf>:
    2eb8:	af e0       	ldi	r26, 0x0F	; 15
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e2 e6       	ldi	r30, 0x62	; 98
    2ebe:	f7 e1       	ldi	r31, 0x17	; 23
    2ec0:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__prologue_saves__+0x1c>
    2ec4:	0e 89       	ldd	r16, Y+22	; 0x16
    2ec6:	1f 89       	ldd	r17, Y+23	; 0x17
    2ec8:	86 e0       	ldi	r24, 0x06	; 6
    2eca:	8d 83       	std	Y+5, r24	; 0x05
    2ecc:	1a 83       	std	Y+2, r17	; 0x02
    2ece:	09 83       	std	Y+1, r16	; 0x01
    2ed0:	8f ef       	ldi	r24, 0xFF	; 255
    2ed2:	9f e7       	ldi	r25, 0x7F	; 127
    2ed4:	9f 83       	std	Y+7, r25	; 0x07
    2ed6:	8e 83       	std	Y+6, r24	; 0x06
    2ed8:	9e 01       	movw	r18, r28
    2eda:	25 5e       	subi	r18, 0xE5	; 229
    2edc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ede:	48 8d       	ldd	r20, Y+24	; 0x18
    2ee0:	59 8d       	ldd	r21, Y+25	; 0x19
    2ee2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	01 96       	adiw	r24, 0x01	; 1
    2ee8:	0e 94 9d 01 	call	0x33a	; 0x33a <vfprintf>
    2eec:	e8 85       	ldd	r30, Y+8	; 0x08
    2eee:	f9 85       	ldd	r31, Y+9	; 0x09
    2ef0:	e0 0f       	add	r30, r16
    2ef2:	f1 1f       	adc	r31, r17
    2ef4:	10 82       	st	Z, r1
    2ef6:	2f 96       	adiw	r28, 0x0f	; 15
    2ef8:	e4 e0       	ldi	r30, 0x04	; 4
    2efa:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000033a <vfprintf>:
 33a:	2f 92       	push	r2
 33c:	3f 92       	push	r3
 33e:	4f 92       	push	r4
 340:	6f 92       	push	r6
 342:	7f 92       	push	r7
 344:	8f 92       	push	r8
 346:	9f 92       	push	r9
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	62 97       	sbiw	r28, 0x12	; 18
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	6c 01       	movw	r12, r24
 36e:	3a 01       	movw	r6, r20
 370:	86 2e       	mov	r8, r22
 372:	79 01       	movw	r14, r18
 374:	fc 01       	movw	r30, r24
 376:	10 86       	std	Z+8, r1	; 0x08
 378:	17 82       	std	Z+7, r1	; 0x07
 37a:	84 81       	ldd	r24, Z+4	; 0x04
 37c:	81 ff       	sbrs	r24, 1
 37e:	e7 c1       	rjmp	.+974    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 380:	9e 01       	movw	r18, r28
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	3d 87       	std	Y+13, r19	; 0x0d
 388:	2c 87       	std	Y+12, r18	; 0x0c
 38a:	c9 01       	movw	r24, r18
 38c:	a0 e8       	ldi	r26, 0x80	; 128
 38e:	88 8b       	std	Y+16, r24	; 0x10
 390:	99 8b       	std	Y+17, r25	; 0x11
 392:	aa 8b       	std	Y+18, r26	; 0x12
 394:	9f e3       	ldi	r25, 0x3F	; 63
 396:	99 2e       	mov	r9, r25
 398:	f3 01       	movw	r30, r6
 39a:	84 91       	lpm	r24, Z
 39c:	87 fc       	sbrc	r8, 7
 39e:	80 81       	ld	r24, Z
 3a0:	88 23       	and	r24, r24
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <vfprintf+0x6c>
 3a4:	d0 c1       	rjmp	.+928    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 3a6:	48 2d       	mov	r20, r8
 3a8:	93 01       	movw	r18, r6
 3aa:	2f 5f       	subi	r18, 0xFF	; 255
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	4f 4f       	sbci	r20, 0xFF	; 255
 3b0:	85 32       	cpi	r24, 0x25	; 37
 3b2:	19 f0       	breq	.+6      	; 0x3ba <vfprintf+0x80>
 3b4:	39 01       	movw	r6, r18
 3b6:	84 2e       	mov	r8, r20
 3b8:	0a c0       	rjmp	.+20     	; 0x3ce <vfprintf+0x94>
 3ba:	f9 01       	movw	r30, r18
 3bc:	84 91       	lpm	r24, Z
 3be:	47 fd       	sbrc	r20, 7
 3c0:	80 81       	ld	r24, Z
 3c2:	92 e0       	ldi	r25, 0x02	; 2
 3c4:	69 0e       	add	r6, r25
 3c6:	71 1c       	adc	r7, r1
 3c8:	81 1c       	adc	r8, r1
 3ca:	85 32       	cpi	r24, 0x25	; 37
 3cc:	29 f4       	brne	.+10     	; 0x3d8 <vfprintf+0x9e>
 3ce:	b6 01       	movw	r22, r12
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 3d6:	e0 cf       	rjmp	.-64     	; 0x398 <vfprintf+0x5e>
 3d8:	b1 2c       	mov	r11, r1
 3da:	00 e0       	ldi	r16, 0x00	; 0
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	10 32       	cpi	r17, 0x20	; 32
 3e0:	a0 f4       	brcc	.+40     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e2:	8b 32       	cpi	r24, 0x2B	; 43
 3e4:	69 f0       	breq	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e6:	30 f4       	brcc	.+12     	; 0x3f4 <vfprintf+0xba>
 3e8:	80 32       	cpi	r24, 0x20	; 32
 3ea:	59 f0       	breq	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ec:	83 32       	cpi	r24, 0x23	; 35
 3ee:	69 f4       	brne	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f0:	10 61       	ori	r17, 0x10	; 16
 3f2:	2c c0       	rjmp	.+88     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3f4:	8d 32       	cpi	r24, 0x2D	; 45
 3f6:	39 f0       	breq	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f8:	80 33       	cpi	r24, 0x30	; 48
 3fa:	39 f4       	brne	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fc:	11 60       	ori	r17, 0x01	; 1
 3fe:	26 c0       	rjmp	.+76     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 400:	12 60       	ori	r17, 0x02	; 2
 402:	14 60       	ori	r17, 0x04	; 4
 404:	23 c0       	rjmp	.+70     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 406:	18 60       	ori	r17, 0x08	; 8
 408:	21 c0       	rjmp	.+66     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 40a:	17 fd       	sbrc	r17, 7
 40c:	29 c0       	rjmp	.+82     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 40e:	90 ed       	ldi	r25, 0xD0	; 208
 410:	98 0f       	add	r25, r24
 412:	9a 30       	cpi	r25, 0x0A	; 10
 414:	78 f4       	brcc	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 416:	16 ff       	sbrs	r17, 6
 418:	06 c0       	rjmp	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41a:	aa e0       	ldi	r26, 0x0A	; 10
 41c:	ba 9e       	mul	r11, r26
 41e:	90 0d       	add	r25, r0
 420:	11 24       	eor	r1, r1
 422:	b9 2e       	mov	r11, r25
 424:	13 c0       	rjmp	.+38     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 426:	ea e0       	ldi	r30, 0x0A	; 10
 428:	0e 9f       	mul	r16, r30
 42a:	90 0d       	add	r25, r0
 42c:	11 24       	eor	r1, r1
 42e:	09 2f       	mov	r16, r25
 430:	10 62       	ori	r17, 0x20	; 32
 432:	0c c0       	rjmp	.+24     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 434:	8e 32       	cpi	r24, 0x2E	; 46
 436:	21 f4       	brne	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 438:	16 fd       	sbrc	r17, 6
 43a:	85 c1       	rjmp	.+778    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 43c:	10 64       	ori	r17, 0x40	; 64
 43e:	06 c0       	rjmp	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 440:	8c 36       	cpi	r24, 0x6C	; 108
 442:	11 f4       	brne	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	10 68       	ori	r17, 0x80	; 128
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	88 36       	cpi	r24, 0x68	; 104
 44a:	51 f4       	brne	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 44c:	f3 01       	movw	r30, r6
 44e:	84 91       	lpm	r24, Z
 450:	87 fc       	sbrc	r8, 7
 452:	80 81       	ld	r24, Z
 454:	ff ef       	ldi	r31, 0xFF	; 255
 456:	6f 1a       	sub	r6, r31
 458:	7f 0a       	sbc	r7, r31
 45a:	8f 0a       	sbc	r8, r31
 45c:	81 11       	cpse	r24, r1
 45e:	bf cf       	rjmp	.-130    	; 0x3de <vfprintf+0xa4>
 460:	98 2f       	mov	r25, r24
 462:	9f 7d       	andi	r25, 0xDF	; 223
 464:	95 54       	subi	r25, 0x45	; 69
 466:	93 30       	cpi	r25, 0x03	; 3
 468:	28 f4       	brcc	.+10     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46a:	24 e0       	ldi	r18, 0x04	; 4
 46c:	e2 0e       	add	r14, r18
 46e:	f1 1c       	adc	r15, r1
 470:	99 82       	std	Y+1, r9	; 0x01
 472:	0f c0       	rjmp	.+30     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 474:	83 36       	cpi	r24, 0x63	; 99
 476:	31 f0       	breq	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 478:	83 37       	cpi	r24, 0x73	; 115
 47a:	91 f0       	breq	.+36     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 47c:	83 35       	cpi	r24, 0x53	; 83
 47e:	09 f0       	breq	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	63 c0       	rjmp	.+198    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 482:	27 c0       	rjmp	.+78     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 484:	f7 01       	movw	r30, r14
 486:	80 81       	ld	r24, Z
 488:	89 83       	std	Y+1, r24	; 0x01
 48a:	97 01       	movw	r18, r14
 48c:	2e 5f       	subi	r18, 0xFE	; 254
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	79 01       	movw	r14, r18
 492:	28 88       	ldd	r2, Y+16	; 0x10
 494:	39 88       	ldd	r3, Y+17	; 0x11
 496:	4a 88       	ldd	r4, Y+18	; 0x12
 498:	aa 24       	eor	r10, r10
 49a:	a3 94       	inc	r10
 49c:	b1 2c       	mov	r11, r1
 49e:	17 c0       	rjmp	.+46     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4a0:	a7 01       	movw	r20, r14
 4a2:	4d 5f       	subi	r20, 0xFD	; 253
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	5f 87       	std	Y+15, r21	; 0x0f
 4a8:	4e 87       	std	Y+14, r20	; 0x0e
 4aa:	f7 01       	movw	r30, r14
 4ac:	20 80       	ld	r2, Z
 4ae:	31 80       	ldd	r3, Z+1	; 0x01
 4b0:	42 80       	ldd	r4, Z+2	; 0x02
 4b2:	16 ff       	sbrs	r17, 6
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b6:	4b 2d       	mov	r20, r11
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4bc:	4f ef       	ldi	r20, 0xFF	; 255
 4be:	5f ef       	ldi	r21, 0xFF	; 255
 4c0:	84 2d       	mov	r24, r4
 4c2:	b1 01       	movw	r22, r2
 4c4:	0e 94 87 19 	call	0x330e	; 0x330e <strnlen>
 4c8:	5c 01       	movw	r10, r24
 4ca:	ee 84       	ldd	r14, Y+14	; 0x0e
 4cc:	ff 84       	ldd	r15, Y+15	; 0x0f
 4ce:	1f 77       	andi	r17, 0x7F	; 127
 4d0:	18 c0       	rjmp	.+48     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4d2:	97 01       	movw	r18, r14
 4d4:	2d 5f       	subi	r18, 0xFD	; 253
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	3f 87       	std	Y+15, r19	; 0x0f
 4da:	2e 87       	std	Y+14, r18	; 0x0e
 4dc:	f7 01       	movw	r30, r14
 4de:	20 80       	ld	r2, Z
 4e0:	31 80       	ldd	r3, Z+1	; 0x01
 4e2:	42 80       	ldd	r4, Z+2	; 0x02
 4e4:	16 ff       	sbrs	r17, 6
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4e8:	4b 2d       	mov	r20, r11
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ee:	4f ef       	ldi	r20, 0xFF	; 255
 4f0:	5f ef       	ldi	r21, 0xFF	; 255
 4f2:	84 2d       	mov	r24, r4
 4f4:	b1 01       	movw	r22, r2
 4f6:	0e 94 87 19 	call	0x330e	; 0x330e <strnlen>
 4fa:	5c 01       	movw	r10, r24
 4fc:	10 68       	ori	r17, 0x80	; 128
 4fe:	ee 84       	ldd	r14, Y+14	; 0x0e
 500:	ff 84       	ldd	r15, Y+15	; 0x0f
 502:	13 fd       	sbrc	r17, 3
 504:	1d c0       	rjmp	.+58     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 506:	80 2f       	mov	r24, r16
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	a8 16       	cp	r10, r24
 50c:	b9 06       	cpc	r11, r25
 50e:	c0 f4       	brcc	.+48     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 510:	b6 01       	movw	r22, r12
 512:	80 e2       	ldi	r24, 0x20	; 32
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 51a:	01 50       	subi	r16, 0x01	; 1
 51c:	f4 cf       	rjmp	.-24     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 51e:	f1 01       	movw	r30, r2
 520:	84 91       	lpm	r24, Z
 522:	47 fc       	sbrc	r4, 7
 524:	80 81       	ld	r24, Z
 526:	ff ef       	ldi	r31, 0xFF	; 255
 528:	2f 1a       	sub	r2, r31
 52a:	3f 0a       	sbc	r3, r31
 52c:	4f 0a       	sbc	r4, r31
 52e:	b6 01       	movw	r22, r12
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 536:	01 11       	cpse	r16, r1
 538:	01 50       	subi	r16, 0x01	; 1
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	a2 1a       	sub	r10, r18
 53e:	b1 08       	sbc	r11, r1
 540:	a1 14       	cp	r10, r1
 542:	b1 04       	cpc	r11, r1
 544:	61 f7       	brne	.-40     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 546:	f5 c0       	rjmp	.+490    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 548:	84 36       	cpi	r24, 0x64	; 100
 54a:	11 f0       	breq	.+4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54c:	89 36       	cpi	r24, 0x69	; 105
 54e:	71 f5       	brne	.+92     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 550:	f7 01       	movw	r30, r14
 552:	17 ff       	sbrs	r17, 7
 554:	08 c0       	rjmp	.+16     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 556:	60 81       	ld	r22, Z
 558:	71 81       	ldd	r23, Z+1	; 0x01
 55a:	82 81       	ldd	r24, Z+2	; 0x02
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	97 01       	movw	r18, r14
 560:	2c 5f       	subi	r18, 0xFC	; 252
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	09 c0       	rjmp	.+18     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 566:	60 81       	ld	r22, Z
 568:	71 81       	ldd	r23, Z+1	; 0x01
 56a:	07 2e       	mov	r0, r23
 56c:	00 0c       	add	r0, r0
 56e:	88 0b       	sbc	r24, r24
 570:	99 0b       	sbc	r25, r25
 572:	97 01       	movw	r18, r14
 574:	2e 5f       	subi	r18, 0xFE	; 254
 576:	3f 4f       	sbci	r19, 0xFF	; 255
 578:	79 01       	movw	r14, r18
 57a:	1f 76       	andi	r17, 0x6F	; 111
 57c:	31 2e       	mov	r3, r17
 57e:	97 ff       	sbrs	r25, 7
 580:	0a c0       	rjmp	.+20     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 582:	90 95       	com	r25
 584:	80 95       	com	r24
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	31 2f       	mov	r19, r17
 592:	30 68       	ori	r19, 0x80	; 128
 594:	33 2e       	mov	r3, r19
 596:	2a e0       	ldi	r18, 0x0A	; 10
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	ae 01       	movw	r20, r28
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__ultoa_invert>
 5a4:	48 2e       	mov	r4, r24
 5a6:	4c 85       	ldd	r20, Y+12	; 0x0c
 5a8:	44 1a       	sub	r4, r20
 5aa:	4a c0       	rjmp	.+148    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 5ac:	85 37       	cpi	r24, 0x75	; 117
 5ae:	29 f4       	brne	.+10     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b0:	1f 7e       	andi	r17, 0xEF	; 239
 5b2:	a1 2e       	mov	r10, r17
 5b4:	2a e0       	ldi	r18, 0x0A	; 10
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	25 c0       	rjmp	.+74     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5ba:	51 2f       	mov	r21, r17
 5bc:	59 7f       	andi	r21, 0xF9	; 249
 5be:	a5 2e       	mov	r10, r21
 5c0:	8f 36       	cpi	r24, 0x6F	; 111
 5c2:	c1 f0       	breq	.+48     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5c4:	18 f4       	brcc	.+6      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c6:	88 35       	cpi	r24, 0x58	; 88
 5c8:	79 f0       	breq	.+30     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5ca:	bd c0       	rjmp	.+378    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 5cc:	80 37       	cpi	r24, 0x70	; 112
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d0:	88 37       	cpi	r24, 0x78	; 120
 5d2:	21 f0       	breq	.+8      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d4:	b8 c0       	rjmp	.+368    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 5d6:	85 2f       	mov	r24, r21
 5d8:	80 61       	ori	r24, 0x10	; 16
 5da:	a8 2e       	mov	r10, r24
 5dc:	a4 fe       	sbrs	r10, 4
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5e0:	9a 2d       	mov	r25, r10
 5e2:	94 60       	ori	r25, 0x04	; 4
 5e4:	a9 2e       	mov	r10, r25
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5e8:	14 ff       	sbrs	r17, 4
 5ea:	0a c0       	rjmp	.+20     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5ec:	a5 2f       	mov	r26, r21
 5ee:	a6 60       	ori	r26, 0x06	; 6
 5f0:	aa 2e       	mov	r10, r26
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5f4:	28 e0       	ldi	r18, 0x08	; 8
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	05 c0       	rjmp	.+10     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5fa:	20 e1       	ldi	r18, 0x10	; 16
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 600:	20 e1       	ldi	r18, 0x10	; 16
 602:	32 e0       	ldi	r19, 0x02	; 2
 604:	f7 01       	movw	r30, r14
 606:	a7 fe       	sbrs	r10, 7
 608:	08 c0       	rjmp	.+16     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 60a:	60 81       	ld	r22, Z
 60c:	71 81       	ldd	r23, Z+1	; 0x01
 60e:	82 81       	ldd	r24, Z+2	; 0x02
 610:	93 81       	ldd	r25, Z+3	; 0x03
 612:	a7 01       	movw	r20, r14
 614:	4c 5f       	subi	r20, 0xFC	; 252
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	07 c0       	rjmp	.+14     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 61a:	60 81       	ld	r22, Z
 61c:	71 81       	ldd	r23, Z+1	; 0x01
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	a7 01       	movw	r20, r14
 624:	4e 5f       	subi	r20, 0xFE	; 254
 626:	5f 4f       	sbci	r21, 0xFF	; 255
 628:	7a 01       	movw	r14, r20
 62a:	ae 01       	movw	r20, r28
 62c:	4f 5f       	subi	r20, 0xFF	; 255
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__ultoa_invert>
 634:	48 2e       	mov	r4, r24
 636:	5c 85       	ldd	r21, Y+12	; 0x0c
 638:	45 1a       	sub	r4, r21
 63a:	8a 2d       	mov	r24, r10
 63c:	8f 77       	andi	r24, 0x7F	; 127
 63e:	38 2e       	mov	r3, r24
 640:	36 fe       	sbrs	r3, 6
 642:	0d c0       	rjmp	.+26     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 644:	93 2d       	mov	r25, r3
 646:	9e 7f       	andi	r25, 0xFE	; 254
 648:	a9 2e       	mov	r10, r25
 64a:	4b 14       	cp	r4, r11
 64c:	58 f4       	brcc	.+22     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 64e:	34 fe       	sbrs	r3, 4
 650:	0b c0       	rjmp	.+22     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 652:	32 fc       	sbrc	r3, 2
 654:	09 c0       	rjmp	.+18     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 656:	a3 2d       	mov	r26, r3
 658:	ae 7e       	andi	r26, 0xEE	; 238
 65a:	aa 2e       	mov	r10, r26
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 65e:	14 2d       	mov	r17, r4
 660:	a3 2c       	mov	r10, r3
 662:	03 c0       	rjmp	.+6      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 664:	14 2d       	mov	r17, r4
 666:	01 c0       	rjmp	.+2      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 668:	1b 2d       	mov	r17, r11
 66a:	a4 fe       	sbrs	r10, 4
 66c:	0e c0       	rjmp	.+28     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 66e:	fe 01       	movw	r30, r28
 670:	e4 0d       	add	r30, r4
 672:	f1 1d       	adc	r31, r1
 674:	80 81       	ld	r24, Z
 676:	80 33       	cpi	r24, 0x30	; 48
 678:	21 f4       	brne	.+8      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 67a:	ea 2d       	mov	r30, r10
 67c:	e9 7e       	andi	r30, 0xE9	; 233
 67e:	ae 2e       	mov	r10, r30
 680:	08 c0       	rjmp	.+16     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 682:	a2 fe       	sbrs	r10, 2
 684:	05 c0       	rjmp	.+10     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 686:	1e 5f       	subi	r17, 0xFE	; 254
 688:	04 c0       	rjmp	.+8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 68a:	8a 2d       	mov	r24, r10
 68c:	86 78       	andi	r24, 0x86	; 134
 68e:	09 f0       	breq	.+2      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 690:	1f 5f       	subi	r17, 0xFF	; 255
 692:	a3 fc       	sbrc	r10, 3
 694:	11 c0       	rjmp	.+34     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 696:	a0 fe       	sbrs	r10, 0
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 69a:	10 17       	cp	r17, r16
 69c:	88 f4       	brcc	.+34     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 69e:	04 0d       	add	r16, r4
 6a0:	b0 2e       	mov	r11, r16
 6a2:	b1 1a       	sub	r11, r17
 6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6a6:	10 17       	cp	r17, r16
 6a8:	60 f4       	brcc	.+24     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6aa:	b6 01       	movw	r22, r12
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 6b4:	1f 5f       	subi	r17, 0xFF	; 255
 6b6:	f7 cf       	rjmp	.-18     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 6b8:	10 17       	cp	r17, r16
 6ba:	18 f4       	brcc	.+6      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6bc:	01 1b       	sub	r16, r17
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6c0:	b4 2c       	mov	r11, r4
 6c2:	00 e0       	ldi	r16, 0x00	; 0
 6c4:	a4 fe       	sbrs	r10, 4
 6c6:	10 c0       	rjmp	.+32     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 6c8:	b6 01       	movw	r22, r12
 6ca:	80 e3       	ldi	r24, 0x30	; 48
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 6d2:	a2 fe       	sbrs	r10, 2
 6d4:	17 c0       	rjmp	.+46     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6d6:	a1 fc       	sbrc	r10, 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6da:	88 e7       	ldi	r24, 0x78	; 120
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6e0:	88 e5       	ldi	r24, 0x58	; 88
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	b6 01       	movw	r22, r12
 6e6:	0c c0       	rjmp	.+24     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6e8:	8a 2d       	mov	r24, r10
 6ea:	86 78       	andi	r24, 0x86	; 134
 6ec:	59 f0       	breq	.+22     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6ee:	a1 fe       	sbrs	r10, 1
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6f2:	8b e2       	ldi	r24, 0x2B	; 43
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	a7 fc       	sbrc	r10, 7
 6fa:	8d e2       	ldi	r24, 0x2D	; 45
 6fc:	b6 01       	movw	r22, r12
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 704:	4b 14       	cp	r4, r11
 706:	38 f4       	brcc	.+14     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 708:	b6 01       	movw	r22, r12
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 712:	ba 94       	dec	r11
 714:	f7 cf       	rjmp	.-18     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 716:	4a 94       	dec	r4
 718:	e1 e0       	ldi	r30, 0x01	; 1
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	ec 0f       	add	r30, r28
 71e:	fd 1f       	adc	r31, r29
 720:	e4 0d       	add	r30, r4
 722:	f1 1d       	adc	r31, r1
 724:	80 81       	ld	r24, Z
 726:	b6 01       	movw	r22, r12
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 72e:	41 10       	cpse	r4, r1
 730:	f2 cf       	rjmp	.-28     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 732:	00 23       	and	r16, r16
 734:	09 f4       	brne	.+2      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 736:	30 ce       	rjmp	.-928    	; 0x398 <vfprintf+0x5e>
 738:	b6 01       	movw	r22, r12
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
 742:	01 50       	subi	r16, 0x01	; 1
 744:	f6 cf       	rjmp	.-20     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 746:	f6 01       	movw	r30, r12
 748:	87 81       	ldd	r24, Z+7	; 0x07
 74a:	90 85       	ldd	r25, Z+8	; 0x08
 74c:	02 c0       	rjmp	.+4      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	9f ef       	ldi	r25, 0xFF	; 255
 752:	62 96       	adiw	r28, 0x12	; 18
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	8f 90       	pop	r8
 776:	7f 90       	pop	r7
 778:	6f 90       	pop	r6
 77a:	4f 90       	pop	r4
 77c:	3f 90       	pop	r3
 77e:	2f 90       	pop	r2
 780:	08 95       	ret

Disassembly of section .text.avrlibc:

0000330e <strnlen>:
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	6b 01       	movw	r12, r22
    3316:	e8 2e       	mov	r14, r24
    3318:	a8 2f       	mov	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	41 15       	cp	r20, r1
    331e:	51 05       	cpc	r21, r1
    3320:	31 f4       	brne	.+12     	; 0x332e <strnlen+0x20>
    3322:	8c 19       	sub	r24, r12
    3324:	9d 09       	sbc	r25, r13
    3326:	ef 90       	pop	r14
    3328:	df 90       	pop	r13
    332a:	cf 90       	pop	r12
    332c:	08 95       	ret
    332e:	fc 01       	movw	r30, r24
    3330:	24 91       	lpm	r18, Z
    3332:	a7 fd       	sbrc	r26, 7
    3334:	20 81       	ld	r18, Z
    3336:	22 23       	and	r18, r18
    3338:	a1 f3       	breq	.-24     	; 0x3322 <strnlen+0x14>
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	a1 1d       	adc	r26, r1
    333e:	41 50       	subi	r20, 0x01	; 1
    3340:	51 09       	sbc	r21, r1
    3342:	ec cf       	rjmp	.-40     	; 0x331c <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002392 <fputc>:
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	fb 01       	movw	r30, r22
    239c:	24 81       	ldd	r18, Z+4	; 0x04
    239e:	21 fd       	sbrc	r18, 1
    23a0:	03 c0       	rjmp	.+6      	; 0x23a8 <fputc+0x16>
    23a2:	8f ef       	ldi	r24, 0xFF	; 255
    23a4:	9f ef       	ldi	r25, 0xFF	; 255
    23a6:	2c c0       	rjmp	.+88     	; 0x2400 <fputc+0x6e>
    23a8:	22 ff       	sbrs	r18, 2
    23aa:	16 c0       	rjmp	.+44     	; 0x23d8 <fputc+0x46>
    23ac:	47 81       	ldd	r20, Z+7	; 0x07
    23ae:	50 85       	ldd	r21, Z+8	; 0x08
    23b0:	25 81       	ldd	r18, Z+5	; 0x05
    23b2:	36 81       	ldd	r19, Z+6	; 0x06
    23b4:	42 17       	cp	r20, r18
    23b6:	53 07       	cpc	r21, r19
    23b8:	44 f4       	brge	.+16     	; 0x23ca <fputc+0x38>
    23ba:	a0 81       	ld	r26, Z
    23bc:	b1 81       	ldd	r27, Z+1	; 0x01
    23be:	9d 01       	movw	r18, r26
    23c0:	2f 5f       	subi	r18, 0xFF	; 255
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	31 83       	std	Z+1, r19	; 0x01
    23c6:	20 83       	st	Z, r18
    23c8:	8c 93       	st	X, r24
    23ca:	27 81       	ldd	r18, Z+7	; 0x07
    23cc:	30 85       	ldd	r19, Z+8	; 0x08
    23ce:	2f 5f       	subi	r18, 0xFF	; 255
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255
    23d2:	30 87       	std	Z+8, r19	; 0x08
    23d4:	27 83       	std	Z+7, r18	; 0x07
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <fputc+0x6e>
    23d8:	8b 01       	movw	r16, r22
    23da:	ec 01       	movw	r28, r24
    23dc:	fb 01       	movw	r30, r22
    23de:	01 84       	ldd	r0, Z+9	; 0x09
    23e0:	f2 85       	ldd	r31, Z+10	; 0x0a
    23e2:	e0 2d       	mov	r30, r0
    23e4:	09 95       	icall
    23e6:	89 2b       	or	r24, r25
    23e8:	e1 f6       	brne	.-72     	; 0x23a2 <fputc+0x10>
    23ea:	d8 01       	movw	r26, r16
    23ec:	17 96       	adiw	r26, 0x07	; 7
    23ee:	8d 91       	ld	r24, X+
    23f0:	9c 91       	ld	r25, X
    23f2:	18 97       	sbiw	r26, 0x08	; 8
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	18 96       	adiw	r26, 0x08	; 8
    23f8:	9c 93       	st	X, r25
    23fa:	8e 93       	st	-X, r24
    23fc:	17 97       	sbiw	r26, 0x07	; 7
    23fe:	ce 01       	movw	r24, r28
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret

Disassembly of section .text.avrlibc:

00001bee <__ultoa_invert>:
    1bee:	fa 01       	movw	r30, r20
    1bf0:	aa 27       	eor	r26, r26
    1bf2:	28 30       	cpi	r18, 0x08	; 8
    1bf4:	51 f1       	breq	.+84     	; 0x1c4a <__ultoa_invert+0x5c>
    1bf6:	20 31       	cpi	r18, 0x10	; 16
    1bf8:	81 f1       	breq	.+96     	; 0x1c5a <__ultoa_invert+0x6c>
    1bfa:	e8 94       	clt
    1bfc:	6f 93       	push	r22
    1bfe:	6e 7f       	andi	r22, 0xFE	; 254
    1c00:	6e 5f       	subi	r22, 0xFE	; 254
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255
    1c04:	8f 4f       	sbci	r24, 0xFF	; 255
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	af 4f       	sbci	r26, 0xFF	; 255
    1c0a:	b1 e0       	ldi	r27, 0x01	; 1
    1c0c:	3e d0       	rcall	.+124    	; 0x1c8a <__ultoa_invert+0x9c>
    1c0e:	b4 e0       	ldi	r27, 0x04	; 4
    1c10:	3c d0       	rcall	.+120    	; 0x1c8a <__ultoa_invert+0x9c>
    1c12:	67 0f       	add	r22, r23
    1c14:	78 1f       	adc	r23, r24
    1c16:	89 1f       	adc	r24, r25
    1c18:	9a 1f       	adc	r25, r26
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	68 0f       	add	r22, r24
    1c1e:	79 1f       	adc	r23, r25
    1c20:	8a 1f       	adc	r24, r26
    1c22:	91 1d       	adc	r25, r1
    1c24:	a1 1d       	adc	r26, r1
    1c26:	6a 0f       	add	r22, r26
    1c28:	71 1d       	adc	r23, r1
    1c2a:	81 1d       	adc	r24, r1
    1c2c:	91 1d       	adc	r25, r1
    1c2e:	a1 1d       	adc	r26, r1
    1c30:	20 d0       	rcall	.+64     	; 0x1c72 <__ultoa_invert+0x84>
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <__ultoa_invert+0x48>
    1c34:	68 94       	set
    1c36:	3f 91       	pop	r19
    1c38:	2a e0       	ldi	r18, 0x0A	; 10
    1c3a:	26 9f       	mul	r18, r22
    1c3c:	11 24       	eor	r1, r1
    1c3e:	30 19       	sub	r19, r0
    1c40:	30 5d       	subi	r19, 0xD0	; 208
    1c42:	31 93       	st	Z+, r19
    1c44:	de f6       	brtc	.-74     	; 0x1bfc <__ultoa_invert+0xe>
    1c46:	cf 01       	movw	r24, r30
    1c48:	08 95       	ret
    1c4a:	46 2f       	mov	r20, r22
    1c4c:	47 70       	andi	r20, 0x07	; 7
    1c4e:	40 5d       	subi	r20, 0xD0	; 208
    1c50:	41 93       	st	Z+, r20
    1c52:	b3 e0       	ldi	r27, 0x03	; 3
    1c54:	0f d0       	rcall	.+30     	; 0x1c74 <__ultoa_invert+0x86>
    1c56:	c9 f7       	brne	.-14     	; 0x1c4a <__ultoa_invert+0x5c>
    1c58:	f6 cf       	rjmp	.-20     	; 0x1c46 <__ultoa_invert+0x58>
    1c5a:	46 2f       	mov	r20, r22
    1c5c:	4f 70       	andi	r20, 0x0F	; 15
    1c5e:	40 5d       	subi	r20, 0xD0	; 208
    1c60:	4a 33       	cpi	r20, 0x3A	; 58
    1c62:	18 f0       	brcs	.+6      	; 0x1c6a <__ultoa_invert+0x7c>
    1c64:	49 5d       	subi	r20, 0xD9	; 217
    1c66:	31 fd       	sbrc	r19, 1
    1c68:	40 52       	subi	r20, 0x20	; 32
    1c6a:	41 93       	st	Z+, r20
    1c6c:	02 d0       	rcall	.+4      	; 0x1c72 <__ultoa_invert+0x84>
    1c6e:	a9 f7       	brne	.-22     	; 0x1c5a <__ultoa_invert+0x6c>
    1c70:	ea cf       	rjmp	.-44     	; 0x1c46 <__ultoa_invert+0x58>
    1c72:	b4 e0       	ldi	r27, 0x04	; 4
    1c74:	a6 95       	lsr	r26
    1c76:	97 95       	ror	r25
    1c78:	87 95       	ror	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	ba 95       	dec	r27
    1c80:	c9 f7       	brne	.-14     	; 0x1c74 <__ultoa_invert+0x86>
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	61 05       	cpc	r22, r1
    1c86:	71 05       	cpc	r23, r1
    1c88:	08 95       	ret
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	0a 2e       	mov	r0, r26
    1c90:	06 94       	lsr	r0
    1c92:	57 95       	ror	r21
    1c94:	47 95       	ror	r20
    1c96:	37 95       	ror	r19
    1c98:	27 95       	ror	r18
    1c9a:	ba 95       	dec	r27
    1c9c:	c9 f7       	brne	.-14     	; 0x1c90 <__ultoa_invert+0xa2>
    1c9e:	62 0f       	add	r22, r18
    1ca0:	73 1f       	adc	r23, r19
    1ca2:	84 1f       	adc	r24, r20
    1ca4:	95 1f       	adc	r25, r21
    1ca6:	a0 1d       	adc	r26, r0
    1ca8:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000326a <__prologue_saves__>:
    326a:	2f 92       	push	r2
    326c:	3f 92       	push	r3
    326e:	4f 92       	push	r4
    3270:	5f 92       	push	r5
    3272:	6f 92       	push	r6
    3274:	7f 92       	push	r7
    3276:	8f 92       	push	r8
    3278:	9f 92       	push	r9
    327a:	af 92       	push	r10
    327c:	bf 92       	push	r11
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	ca 1b       	sub	r28, r26
    3294:	db 0b       	sbc	r29, r27
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003344 <__epilogue_restores__>:
    3344:	2a 88       	ldd	r2, Y+18	; 0x12
    3346:	39 88       	ldd	r3, Y+17	; 0x11
    3348:	48 88       	ldd	r4, Y+16	; 0x10
    334a:	5f 84       	ldd	r5, Y+15	; 0x0f
    334c:	6e 84       	ldd	r6, Y+14	; 0x0e
    334e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3350:	8c 84       	ldd	r8, Y+12	; 0x0c
    3352:	9b 84       	ldd	r9, Y+11	; 0x0b
    3354:	aa 84       	ldd	r10, Y+10	; 0x0a
    3356:	b9 84       	ldd	r11, Y+9	; 0x09
    3358:	c8 84       	ldd	r12, Y+8	; 0x08
    335a:	df 80       	ldd	r13, Y+7	; 0x07
    335c:	ee 80       	ldd	r14, Y+6	; 0x06
    335e:	fd 80       	ldd	r15, Y+5	; 0x05
    3360:	0c 81       	ldd	r16, Y+4	; 0x04
    3362:	1b 81       	ldd	r17, Y+3	; 0x03
    3364:	aa 81       	ldd	r26, Y+2	; 0x02
    3366:	b9 81       	ldd	r27, Y+1	; 0x01
    3368:	ce 0f       	add	r28, r30
    336a:	d1 1d       	adc	r29, r1
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	ed 01       	movw	r28, r26
    3378:	08 95       	ret
