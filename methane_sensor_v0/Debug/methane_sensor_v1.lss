
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000434a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b8  00800100  00800100  0000434a  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  000043a5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000938  00000000  00000000  00004418  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c32d  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002603  00000000  00000000  0001107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045e6  00000000  00000000  00013680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001838  00000000  00000000  00017c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a12  00000000  00000000  000194a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051e5  00000000  00000000  00019eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  0001f097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00004266  00004266  0000433a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  0000407a  0000407a  0000414e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003f84  00003f84  00004058  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00004088  00004088  0000415c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003f98  00003f98  0000406c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00004096  00004096  0000416a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00003fac  00003fac  00004080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  000040a4  000040a4  00004178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00003fc0  00003fc0  00004094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000014  00003fd4  00003fd4  000040a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_init 00000008  00004218  00004218  000042ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_reset_active 00000008  00004220  00004220  000042f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.rn2483_reset_deactive 00000008  00004228  00004228  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SCD30_HAL_init 0000000e  000040b2  000040b2  00004186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SCD30_HAL_data_ready 0000000a  000041f0  000041f0  000042c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_16 0000004e  0000318a  0000318a  0000325e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  00800690  00800690  0000434a  2**0
                  ALLOC
 31 .text.__vector_13 0000004e  000031d8  000031d8  000032ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss._cb      00000002  00800692  00800692  0000434a  2**0
                  ALLOC
 33 .text.__vector_9 0000007c  000028fe  000028fe  000029d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.cnt      00000001  00800694  00800694  0000434a  2**0
                  ALLOC
 35 .bss.callbacks 0000000a  0080067a  0080067a  0000434a  2**0
                  ALLOC
 36 .text.start_and_write_data 0000004c  00003274  00003274  00003348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.read_and_stop 0000005a  00002f36  00002f36  0000300a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_API_write_data 00000014  00003fe8  00003fe8  000040bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_API_write_data_stop 0000001a  00003eae  00003eae  00003f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00003a64  00003a64  00003b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_API_repeat_read_data_stop 00000030  00003afa  00003afa  00003bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_HAL_init 00000012  00004024  00004024  000040f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_HAL_start 00000048  0000351a  0000351a  000035ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TWI_HAL_repeated_start 00000042  00003700  00003700  000037d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_HAL_write_byte 00000020  00003d9c  00003d9c  00003e70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_HAL_read_byte_ack 00000014  00003ffc  00003ffc  000040d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_HAL_read_byte_nack 00000014  00004010  00004010  000040e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_HAL_stop 00000010  0000405a  0000405a  0000412e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.copy_buffer 0000002e  00003bba  00003bba  00003c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.uart0_hal_init 0000003c  00003784  00003784  00003858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.uart0_hal_send_message 0000003c  000037c0  000037c0  00003894  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.uart0_hal_send_string 0000006e  00002d2c  00002d2c  00002e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.uart0_hal_message_ready 0000000e  000040c0  000040c0  00004194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart0_hal_clear_rx_buffer 0000000a  000041fa  000041fa  000042ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart0_hal_read_message_as_str 00000028  00003c70  00003c70  00003d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.uart0_hal_send_break 00000046  00003562  00003562  00003636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__vector_22 0000004a  0000343c  0000343c  00003510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.__vector_20 00000074  00002bd4  00002bd4  00002ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .bss.rx_buffer_has_message 00000001  00800695  00800695  0000434a  2**0
                  ALLOC
 60 .bss.rx_buffer_data_len 00000001  00800696  00800696  0000434a  2**0
                  ALLOC
 61 .bss.tx_buffer_cursor 00000001  00800697  00800697  0000434a  2**0
                  ALLOC
 62 .bss.tx_buffer_data_len 00000001  00800698  00800698  0000434a  2**0
                  ALLOC
 63 .text.copy_buffer 0000002e  00003be8  00003be8  00003cbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart1_hal_init 0000003c  000037fc  000037fc  000038d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart1_hal_send_string 0000008a  00002874  00002874  00002948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart1_hal_message_ready 0000000e  000040ce  000040ce  000041a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart1_hal_rx_full 0000000e  000040dc  000040dc  000041b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart1_hal_clear_rx_buffer 0000000a  00004204  00004204  000042d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart1_hal_read_message_as_str 00000028  00003c98  00003c98  00003d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_30 0000004a  00003486  00003486  0000355a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_28 00000074  00002c48  00002c48  00002d1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .bss.rx_buffer_has_message 00000001  00800699  00800699  0000434a  2**0
                  ALLOC
 73 .bss.rx_buffer_data_len 00000001  0080069a  0080069a  0000434a  2**0
                  ALLOC
 74 .bss.rx_buffer 00000096  00800580  00800580  0000434a  2**0
                  ALLOC
 75 .bss.tx_buffer_cursor 00000001  0080069b  0080069b  0000434a  2**0
                  ALLOC
 76 .bss.tx_buffer_data_len 00000001  0080069c  0080069c  0000434a  2**0
                  ALLOC
 77 .bss.tx_buffer 000000c8  008004b8  008004b8  0000434a  2**0
                  ALLOC
 78 .text.main    00000018  00003efc  00003efc  00003fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.calc_ppm_methane 00000096  000026b6  000026b6  0000278a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.ADC_get_value 00000056  00002fe8  00002fe8  000030bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .data.PPM_factor 00000004  00800684  0000426a  0000433e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 82 .data.RRL     00000004  00800688  0000426e  00004342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 83 .data.Vc      00000004  0080068c  00004272  00004346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 84 .text.EM_has_deveui 00000016  00003f2c  00003f2c  00004000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_has_appeui 00000016  00003f42  00003f42  00004016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_has_appkey 00000016  00003f58  00003f58  0000402c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_set_deveui 0000003a  00003838  00003838  0000390c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_get_deveui 00000030  00003b2a  00003b2a  00003bfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_set_appeui 0000003a  00003872  00003872  00003946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_get_appeui 00000030  00003b5a  00003b5a  00003c2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_set_appkey 0000003a  000038ac  000038ac  00003980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_get_appkey 00000030  00003b8a  00003b8a  00003c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_set_ppmfactor 0000000e  000040ea  000040ea  000041be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_get_ppmfactor 0000001e  00003dfc  00003dfc  00003ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_RRL 0000000e  000040f8  000040f8  000041cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_RRL 0000001e  00003e1a  00003e1a  00003eee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_Vcc 0000000e  00004106  00004106  000041da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_Vcc 0000001e  00003e38  00003e38  00003f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_collections 0000000e  00004114  00004114  000041e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_collections 00000010  0000406a  0000406a  0000413e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_heat_up_time 0000000c  00004184  00004184  00004258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_heat_up_time 0000000c  00004190  00004190  00004264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_set_air_pump_time 0000000c  0000419c  0000419c  00004270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_get_air_pump_time 0000000c  000041a8  000041a8  0000427c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.EM_set_sp_interval 0000000c  000041b4  000041b4  00004288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.EM_get_sp_interval 0000000c  000041c0  000041c0  00004294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_reset_module 00000006  00004248  00004248  0000431c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LM_forward_msg 00000006  0000424e  0000424e  00004322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_send_break 00000006  00004254  00004254  00004328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .progmemx.data 00000073  0000055a  0000055a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
111 .text.attach_ending 0000001c  00003e92  00003e92  00003f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.util_strbeginswith 0000004a  000034d0  000034d0  000035a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .progmemx.data 00000007  000005d5  000005d5  000006a9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
114 .text.util_reset_module 00000046  000035a8  000035a8  0000367c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.util_lora_forward_msg 00000038  000038e6  000038e6  000039ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.util_send_break 00000020  00003dbc  00003dbc  00003e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.datetime_to_BCD 00000100  00001c88  00001c88  00001d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.RTC_get_current_time 00000140  000017d2  000017d2  000018a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.RTC_set_current_time 00000068  00002e70  00002e70  00002f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000005e8  000005e8  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
121 .text.bytes_2_uint 0000001a  00003ec8  00003ec8  00003f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.init_measurement 00000038  0000391e  0000391e  000039f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.validate_data 00000032  00003a96  00003a96  00003b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.read_value 000000a2  00002614  00002614  000026e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.SCD30_sensor_on 00000022  00003d58  00003d58  00003e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.SCD30_get_reading 0000001a  00003ee2  00003ee2  00003fb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .progmemx.data.READ_DATA_CMD 00000002  000005e6  000005e6  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
128 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000005dc  000005dc  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
129 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000005e1  000005e1  000006b5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
130 .text.parse_cmd 00000028  00003cc0  00003cc0  00003d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.validate_cmd 00000056  0000303e  0000303e  00003112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .progmemx.data 000000a4  00000435  00000435  00000509  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.CONF_enter 0000012e  00001912  00001912  000019e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .progmemx.data 00000081  000004d9  000004d9  000005ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
135 .text.CON_RN2483_parse 0000006c  00002d9a  00002d9a  00002e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.CON_RN2483 00000176  0000165c  0000165c  00001730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.CONNECT 00000054  00003094  00003094  00003168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000188  00000202  00000202  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.read_cols 000000bc  000021e8  000021e8  000022bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.read_time 00000092  000027e2  000027e2  000028b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.write_deveui 00000078  000029f4  000029f4  00002ac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.write_appeui 00000078  00002a6c  00002a6c  00002b40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.write_appkey 00000078  00002ae4  00002ae4  00002bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.write_PPM_factor 0000004c  000032c0  000032c0  00003394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.write_RRL 0000004c  0000330c  0000330c  000033e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.write_VCC 0000004c  00003358  00003358  0000342c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.get_time_par 00000034  00003a30  00003a30  00003b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.write_cols 0000012e  00001a40  00001a40  00001b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.write_heat_up 0000004c  000033a4  000033a4  00003478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.write_air_pump 00000050  0000313a  0000313a  0000320e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.write_sp_interval 0000004c  000033f0  000033f0  000034c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.write_reset 000000e2  00001e86  00001e86  00001f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.write_time 000000fe  00001d88  00001d88  00001e5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.handle_read 000002a2  0000100a  0000100a  000010de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.handle_write 00000200  000012ac  000012ac  00001380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .bss.arg      00000050  00800616  00800616  0000434a  2**0
                  ALLOC
157 .progmemx.data 000000ab  0000038a  0000038a  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
158 .text.handle_methane 0000011a  00001b6e  00001b6e  00001c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.handle_co2 000000a4  000024cc  000024cc  000025a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.handle_pump 000000a4  00002570  00002570  00002644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.handle_sample 000000b8  00002360  00002360  00002434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.init_methane_SCD30 00000028  00003ce8  00003ce8  00003dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.par      00000014  00800666  00800666  0000434a  2**0
                  ALLOC
164 .text.count_parameters 00000052  000030e8  000030e8  000031bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.par_index 00000070  00002cbc  00002cbc  00002d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.get_parameter 00000096  0000274c  0000274c  00002820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.calc_crc8 00000036  0000398e  0000398e  00003a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.get_decimal 000000b4  00002418  00002418  000024ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.str2flaot 0000004e  00003226  00003226  000032fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.is_float 00000058  00002f90  00002f90  00003064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.avrlibc.fplib 0000000e  00004122  00004122  000041f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.avrlibc.fplib 000000ce  0000211a  0000211a  000021ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.avrlibc.fplib 00000008  00004230  00004230  00004304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.avrlibc.fplib 000000de  00001f68  00001f68  0000203c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.avrlibc.fplib 0000005e  00002ed8  00002ed8  00002fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc.fplib 0000007a  0000297a  0000297a  00002a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc.fplib 0000000c  000041cc  000041cc  000042a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc.fplib 00000006  0000425a  0000425a  0000432e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc.fplib 0000000e  00004130  00004130  00004204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc.fplib 0000000e  0000413e  0000413e  00004212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc.fplib 00000022  00003d7a  00003d7a  00003e4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.avrlibc.fplib 00000044  00003634  00003634  00003708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.avrlibc.fplib 0000000e  0000414c  0000414c  00004220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.avrlibc.fplib 00000008  00004238  00004238  0000430c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.avrlibc.fplib 000000d4  00002046  00002046  0000211a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000008  000005cd  000005cd  000006a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.avrlibc 00000744  000005ea  000005ea  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.libgcc  0000000c  000041d8  000041d8  000042ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.libgcc.mul 0000001e  00003e56  00003e56  00003f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.libgcc.prologue 00000038  00003956  00003956  00003a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.libgcc.prologue 00000036  000039c4  000039c4  00003a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc 00000008  00004240  00004240  00004314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc 0000000e  0000415a  0000415a  0000422e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc 000002dc  00000d2e  00000d2e  00000e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc 000001b0  000014ac  000014ac  00001580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc 00000012  00004036  00004036  0000410a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 00000032  00003ac8  00003ac8  00003b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 0000002e  00003c16  00003c16  00003cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc 00000042  00003742  00003742  00003816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 0000006a  00002e06  00002e06  00002eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 0000002c  00003c44  00003c44  00003d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 0000001e  00003e74  00003e74  00003f48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 00000036  000039fa  000039fa  00003ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc 00000078  00002b5c  00002b5c  00002c30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc 00000046  000035ee  000035ee  000036c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc 000000bc  000022a4  000022a4  00002378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc 00000006  00004260  00004260  00004334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc 00000024  00003d10  00003d10  00003de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.avrlibc 00000012  00004048  00004048  0000411c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.avrlibc 0000000e  00004168  00004168  0000423c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.avrlibc 0000000e  00004176  00004176  0000424a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc 00000044  00003678  00003678  0000374c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.avrlibc 00000024  00003d34  00003d34  00003e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.avrlibc 00000018  00003f14  00003f14  00003fe8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.avrlibc 0000000c  000041e4  000041e4  000042b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc.mul 00000020  00003ddc  00003ddc  00003eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc.div 00000044  000036bc  000036bc  00003790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.libgcc.mul 00000016  00003f6e  00003f6e  00004042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.libgcc  0000000a  0000420e  0000420e  000042e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
   4:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
   8:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
   c:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <__vector_3>
  10:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  14:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  18:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  1c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  20:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  24:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__vector_9>
  28:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  2c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  30:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  34:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__vector_13>
  38:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  3c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  40:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__vector_16>
  44:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  48:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  4c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  50:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__vector_20>
  54:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  58:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__vector_22>
  5c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  60:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  64:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  68:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  6c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  70:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__vector_28>
  74:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__bad_interrupt>
  78:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__vector_30>
  7c:	a4 0c       	add	r10, r4
  7e:	b9 0c       	add	r11, r9
  80:	15 0d       	add	r17, r5
  82:	c2 0c       	add	r12, r2
  84:	1e 0d       	add	r17, r14
  86:	07 0d       	add	r16, r7
  88:	0e 0d       	add	r16, r14
  8a:	d2 0c       	add	r13, r2
  8c:	de 0c       	add	r13, r14
  8e:	ea 0c       	add	r14, r10
  90:	f4 0c       	add	r15, r4
  92:	00 0d       	add	r16, r0
  94:	40 0b       	sbc	r20, r16
  96:	4d 0b       	sbc	r20, r29
  98:	57 0b       	sbc	r21, r23
  9a:	5d 0b       	sbc	r21, r29
  9c:	8c 0b       	sbc	r24, r28
  9e:	bf 0b       	sbc	r27, r31
  a0:	d8 0b       	sbc	r29, r24

000000a2 <.dinit>:
  a2:	01 00       	.word	0x0001	; ????
  a4:	06 84       	ldd	r0, Z+14	; 0x0e
  a6:	80 06       	cpc	r8, r16
  a8:	84 06       	cpc	r8, r20
  aa:	90 00       	.word	0x0090	; ????
  ac:	42 6a       	ori	r20, 0xA2	; 162
  ae:	06 90       	elpm	r0, Z
  b0:	06 9d       	mul	r16, r6
  b2:	80 00       	.word	0x0080	; ????

000000b4 <__trampolines_end>:
  b4:	00 40       	sbci	r16, 0x00	; 0
  b6:	7a 10       	cpse	r7, r10
  b8:	f3 5a       	subi	r31, 0xA3	; 163
  ba:	00 a0       	ldd	r0, Z+32	; 0x20
  bc:	72 4e       	sbci	r23, 0xE2	; 226
  be:	18 09       	sbc	r17, r8
  c0:	00 10       	cpse	r0, r0
  c2:	a5 d4       	rcall	.+2378   	; 0xa0e <__EEPROM_REGION_LENGTH__+0x20e>
  c4:	e8 00       	.word	0x00e8	; ????
  c6:	00 e8       	ldi	r16, 0x80	; 128
  c8:	76 48       	sbci	r23, 0x86	; 134
  ca:	17 00       	.word	0x0017	; ????
  cc:	00 e4       	ldi	r16, 0x40	; 64
  ce:	0b 54       	subi	r16, 0x4B	; 75
  d0:	02 00       	.word	0x0002	; ????
  d2:	00 ca       	rjmp	.-3072   	; 0xfffff4d4 <__eeprom_end+0xff7ef4d4>
  d4:	9a 3b       	cpi	r25, 0xBA	; 186
  d6:	00 00       	nop
  d8:	00 e1       	ldi	r16, 0x10	; 16
  da:	f5 05       	cpc	r31, r5
  dc:	00 00       	nop
  de:	80 96       	adiw	r24, 0x20	; 32
  e0:	98 00       	.word	0x0098	; ????
  e2:	00 00       	nop
  e4:	40 42       	sbci	r20, 0x20	; 32
  e6:	0f 00       	.word	0x000f	; ????
  e8:	00 00       	nop
  ea:	a0 86       	std	Z+8, r10	; 0x08
  ec:	01 00       	.word	0x0001	; ????
  ee:	00 00       	nop
  f0:	10 27       	eor	r17, r16
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	e8 03       	fmulsu	r22, r16
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	64 00       	.word	0x0064	; ????
  fe:	00 00       	nop
 100:	00 00       	nop
 102:	0a 00       	.word	0x000a	; ????
 104:	00 00       	nop
 106:	00 00       	nop
 108:	01 00       	.word	0x0001	; ????
 10a:	00 00       	nop
 10c:	00 00       	nop
 10e:	2c 76       	andi	r18, 0x6C	; 108
 110:	d8 88       	ldd	r13, Y+16	; 0x10
 112:	dc 67       	ori	r29, 0x7C	; 124
 114:	4f 08       	sbc	r4, r15
 116:	23 df       	rcall	.-442    	; 0xffffff5e <__eeprom_end+0xff7eff5e>
 118:	c1 df       	rcall	.-126    	; 0x9c <__SREG__+0x5d>
 11a:	ae 59       	subi	r26, 0x9E	; 158
 11c:	e1 b1       	in	r30, 0x01	; 1
 11e:	b7 96       	adiw	r30, 0x27	; 39
 120:	e5 e3       	ldi	r30, 0x35	; 53
 122:	e4 53       	subi	r30, 0x34	; 52
 124:	c6 3a       	cpi	r28, 0xA6	; 166
 126:	e6 51       	subi	r30, 0x16	; 22
 128:	99 76       	andi	r25, 0x69	; 105
 12a:	96 e8       	ldi	r25, 0x86	; 134
 12c:	e6 c2       	rjmp	.+1484   	; 0x6fa <vfprintf+0x110>
 12e:	84 26       	eor	r8, r20
 130:	eb 89       	ldd	r30, Y+19	; 0x13
 132:	8c 9b       	sbis	0x11, 4	; 17
 134:	62 ed       	ldi	r22, 0xD2	; 210
 136:	40 7c       	andi	r20, 0xC0	; 192
 138:	6f fc       	.word	0xfc6f	; ????
 13a:	ef bc       	out	0x2f, r14	; 47
 13c:	9c 9f       	mul	r25, r28
 13e:	40 f2       	brcs	.-112    	; 0xd0 <__trampolines_end+0x1c>
 140:	ba a5       	ldd	r27, Y+42	; 0x2a
 142:	6f a5       	ldd	r22, Y+47	; 0x2f
 144:	f4 90       	lpm	r15, Z
 146:	05 5a       	subi	r16, 0xA5	; 165
 148:	2a f7       	brpl	.-54     	; 0x114 <__trampolines_end+0x60>
 14a:	5c 93       	st	X, r21
 14c:	6b 6c       	ori	r22, 0xCB	; 203
 14e:	f9 67       	ori	r31, 0x79	; 121
 150:	6d c1       	rjmp	.+730    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 152:	1b fc       	.word	0xfc1b	; ????
 154:	e0 e4       	ldi	r30, 0x40	; 64
 156:	0d 47       	sbci	r16, 0x7D	; 125
 158:	fe f5       	brtc	.+126    	; 0x1d8 <__do_copy_data+0x1e>
 15a:	20 e6       	ldi	r18, 0x60	; 96
 15c:	b5 00       	.word	0x00b5	; ????
 15e:	d0 ed       	ldi	r29, 0xD0	; 208
 160:	90 2e       	mov	r9, r16
 162:	03 00       	.word	0x0003	; ????
 164:	94 35       	cpi	r25, 0x54	; 84
 166:	77 05       	cpc	r23, r7
 168:	00 80       	ld	r0, Z
 16a:	84 1e       	adc	r8, r20
 16c:	08 00       	.word	0x0008	; ????
 16e:	00 20       	and	r0, r0
 170:	4e 0a       	sbc	r4, r30
 172:	00 00       	nop
 174:	00 c8       	rjmp	.-4096   	; 0xfffff176 <__eeprom_end+0xff7ef176>
 176:	0c 33       	cpi	r16, 0x3C	; 60
 178:	33 33       	cpi	r19, 0x33	; 51
 17a:	33 0f       	add	r19, r19
 17c:	98 6e       	ori	r25, 0xE8	; 232
 17e:	12 83       	std	Z+2, r17	; 0x02
 180:	11 41       	sbci	r17, 0x11	; 17
 182:	ef 8d       	ldd	r30, Y+31	; 0x1f
 184:	21 14       	cp	r2, r1
 186:	89 3b       	cpi	r24, 0xB9	; 185
 188:	e6 55       	subi	r30, 0x56	; 86
 18a:	16 cf       	rjmp	.-468    	; 0xffffffb8 <__eeprom_end+0xff7effb8>
 18c:	fe e6       	ldi	r31, 0x6E	; 110
 18e:	db 18       	sub	r13, r11
 190:	d1 84       	ldd	r13, Z+9	; 0x09
 192:	4b 38       	cpi	r20, 0x8B	; 139
 194:	1b f7       	brvc	.-58     	; 0x15c <__trampolines_end+0xa8>
 196:	7c 1d       	adc	r23, r12
 198:	90 1d       	adc	r25, r0
 19a:	a4 bb       	out	0x14, r26	; 20
 19c:	e4 24       	eor	r14, r4
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	84 72       	andi	r24, 0x24	; 36
 1a2:	5e 22       	and	r5, r30
 1a4:	81 00       	.word	0x0081	; ????
 1a6:	c9 f1       	breq	.+114    	; 0x21a <_etext+0x18>
 1a8:	24 ec       	ldi	r18, 0xC4	; 196
 1aa:	a1 e5       	ldi	r26, 0x51	; 81
 1ac:	3d 27       	eor	r19, r29

000001ae <__ctors_end>:
 1ae:	11 24       	eor	r1, r1
 1b0:	1f be       	out	0x3f, r1	; 63
 1b2:	cf ef       	ldi	r28, 0xFF	; 255
 1b4:	d0 e1       	ldi	r29, 0x10	; 16
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	cd bf       	out	0x3d, r28	; 61

000001ba <__do_copy_data>:
 1ba:	e2 ea       	ldi	r30, 0xA2	; 162
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <__do_clear_bss+0x8>
 1c2:	b5 91       	lpm	r27, Z+
 1c4:	a5 91       	lpm	r26, Z+
 1c6:	35 91       	lpm	r19, Z+
 1c8:	25 91       	lpm	r18, Z+
 1ca:	05 91       	lpm	r16, Z+
 1cc:	07 fd       	sbrc	r16, 7
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <__do_clear_bss>
 1d0:	95 91       	lpm	r25, Z+
 1d2:	85 91       	lpm	r24, Z+
 1d4:	ef 01       	movw	r28, r30
 1d6:	f9 2f       	mov	r31, r25
 1d8:	e8 2f       	mov	r30, r24
 1da:	05 90       	lpm	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	a2 17       	cp	r26, r18
 1e0:	b3 07       	cpc	r27, r19
 1e2:	d9 f7       	brne	.-10     	; 0x1da <__do_copy_data+0x20>
 1e4:	fe 01       	movw	r30, r28
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <__do_clear_bss+0x8>

000001e8 <__do_clear_bss>:
 1e8:	1d 92       	st	X+, r1
 1ea:	a2 17       	cp	r26, r18
 1ec:	b3 07       	cpc	r27, r19
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <__do_clear_bss>
 1f0:	e3 3b       	cpi	r30, 0xB3	; 179
 1f2:	f4 07       	cpc	r31, r20
 1f4:	31 f7       	brne	.-52     	; 0x1c2 <__do_copy_data+0x8>
 1f6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <main>
 1fa:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>

Disassembly of section .text:

00004266 <__bad_interrupt>:
    4266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

0000407a <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    407a:	81 b1       	in	r24, 0x01	; 1
    407c:	88 60       	ori	r24, 0x08	; 8
    407e:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    4080:	82 b1       	in	r24, 0x02	; 2
    4082:	87 7f       	andi	r24, 0xF7	; 247
    4084:	82 b9       	out	0x02, r24	; 2
    4086:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003f84 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3f84:	88 23       	and	r24, r24
    3f86:	21 f0       	breq	.+8      	; 0x3f90 <PM_HAL_adc_power+0xc>
    3f88:	82 b1       	in	r24, 0x02	; 2
    3f8a:	88 60       	ori	r24, 0x08	; 8
    3f8c:	82 b9       	out	0x02, r24	; 2
    3f8e:	08 95       	ret
    3f90:	82 b1       	in	r24, 0x02	; 2
    3f92:	87 7f       	andi	r24, 0xF7	; 247
    3f94:	82 b9       	out	0x02, r24	; 2
    3f96:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00004088 <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    4088:	81 b1       	in	r24, 0x01	; 1
    408a:	80 62       	ori	r24, 0x20	; 32
    408c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    408e:	82 b1       	in	r24, 0x02	; 2
    4090:	8f 7d       	andi	r24, 0xDF	; 223
    4092:	82 b9       	out	0x02, r24	; 2
    4094:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003f98 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3f98:	88 23       	and	r24, r24
    3f9a:	21 f0       	breq	.+8      	; 0x3fa4 <PM_HAL_meth_power+0xc>
    3f9c:	82 b1       	in	r24, 0x02	; 2
    3f9e:	80 62       	ori	r24, 0x20	; 32
    3fa0:	82 b9       	out	0x02, r24	; 2
    3fa2:	08 95       	ret
    3fa4:	82 b1       	in	r24, 0x02	; 2
    3fa6:	8f 7d       	andi	r24, 0xDF	; 223
    3fa8:	82 b9       	out	0x02, r24	; 2
    3faa:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00004096 <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    4096:	81 b1       	in	r24, 0x01	; 1
    4098:	80 61       	ori	r24, 0x10	; 16
    409a:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    409c:	82 b1       	in	r24, 0x02	; 2
    409e:	8f 7e       	andi	r24, 0xEF	; 239
    40a0:	82 b9       	out	0x02, r24	; 2
    40a2:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003fac <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3fac:	88 23       	and	r24, r24
    3fae:	21 f0       	breq	.+8      	; 0x3fb8 <PM_HAL_SCD30_power+0xc>
    3fb0:	82 b1       	in	r24, 0x02	; 2
    3fb2:	80 61       	ori	r24, 0x10	; 16
    3fb4:	82 b9       	out	0x02, r24	; 2
    3fb6:	08 95       	ret
    3fb8:	82 b1       	in	r24, 0x02	; 2
    3fba:	8f 7e       	andi	r24, 0xEF	; 239
    3fbc:	82 b9       	out	0x02, r24	; 2
    3fbe:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

000040a4 <PM_HAL_BC_power_init>:
		clear_bit(PORTA, 4);
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    40a4:	8a b1       	in	r24, 0x0a	; 10
    40a6:	80 61       	ori	r24, 0x10	; 16
    40a8:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    40aa:	8b b1       	in	r24, 0x0b	; 11
    40ac:	8f 7e       	andi	r24, 0xEF	; 239
    40ae:	8b b9       	out	0x0b, r24	; 11
    40b0:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00003fc0 <PM_HAL_BC_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3fc0:	88 23       	and	r24, r24
    3fc2:	21 f0       	breq	.+8      	; 0x3fcc <PM_HAL_BC_power+0xc>
    3fc4:	8b b1       	in	r24, 0x0b	; 11
    3fc6:	80 61       	ori	r24, 0x10	; 16
    3fc8:	8b b9       	out	0x0b, r24	; 11
    3fca:	08 95       	ret
    3fcc:	8b b1       	in	r24, 0x0b	; 11
    3fce:	8f 7e       	andi	r24, 0xEF	; 239
    3fd0:	8b b9       	out	0x0b, r24	; 11
    3fd2:	08 95       	ret

Disassembly of section .text.__vector_3:

00003fd4 <__vector_3>:
}

ISR(INT2_vect){
    3fd4:	1f 92       	push	r1
    3fd6:	0f 92       	push	r0
    3fd8:	0f b6       	in	r0, 0x3f	; 63
    3fda:	0f 92       	push	r0
    3fdc:	11 24       	eor	r1, r1
	
}
    3fde:	0f 90       	pop	r0
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	0f 90       	pop	r0
    3fe4:	1f 90       	pop	r1
    3fe6:	18 95       	reti

Disassembly of section .text.rn2483_init:

00004218 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    4218:	84 b1       	in	r24, 0x04	; 4
    421a:	80 61       	ori	r24, 0x10	; 16
    421c:	84 b9       	out	0x04, r24	; 4
    421e:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00004220 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    4220:	85 b1       	in	r24, 0x05	; 5
    4222:	8f 7e       	andi	r24, 0xEF	; 239
    4224:	85 b9       	out	0x05, r24	; 5
    4226:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00004228 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    4228:	85 b1       	in	r24, 0x05	; 5
    422a:	80 61       	ori	r24, 0x10	; 16
    422c:	85 b9       	out	0x05, r24	; 5
    422e:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

000040b2 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    40b2:	87 b1       	in	r24, 0x07	; 7
    40b4:	8f 7b       	andi	r24, 0xBF	; 191
    40b6:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    40b8:	88 b1       	in	r24, 0x08	; 8
    40ba:	8f 7b       	andi	r24, 0xBF	; 191
    40bc:	88 b9       	out	0x08, r24	; 8
    40be:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

000041f0 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    41f0:	86 b1       	in	r24, 0x06	; 6
    41f2:	86 fb       	bst	r24, 6
    41f4:	88 27       	eor	r24, r24
    41f6:	80 f9       	bld	r24, 0
    41f8:	08 95       	ret

Disassembly of section .text.__vector_16:

0000318a <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    318a:	1f 92       	push	r1
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	0f 92       	push	r0
    3192:	11 24       	eor	r1, r1
    3194:	2f 93       	push	r18
    3196:	3f 93       	push	r19
    3198:	4f 93       	push	r20
    319a:	5f 93       	push	r21
    319c:	6f 93       	push	r22
    319e:	7f 93       	push	r23
    31a0:	8f 93       	push	r24
    31a2:	9f 93       	push	r25
    31a4:	af 93       	push	r26
    31a6:	bf 93       	push	r27
    31a8:	ef 93       	push	r30
    31aa:	ff 93       	push	r31
	_cb();
    31ac:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <_cb>
    31b0:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <_cb+0x1>
    31b4:	09 95       	icall
}
    31b6:	ff 91       	pop	r31
    31b8:	ef 91       	pop	r30
    31ba:	bf 91       	pop	r27
    31bc:	af 91       	pop	r26
    31be:	9f 91       	pop	r25
    31c0:	8f 91       	pop	r24
    31c2:	7f 91       	pop	r23
    31c4:	6f 91       	pop	r22
    31c6:	5f 91       	pop	r21
    31c8:	4f 91       	pop	r20
    31ca:	3f 91       	pop	r19
    31cc:	2f 91       	pop	r18
    31ce:	0f 90       	pop	r0
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	0f 90       	pop	r0
    31d4:	1f 90       	pop	r1
    31d6:	18 95       	reti

Disassembly of section .text.__vector_13:

000031d8 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    31d8:	1f 92       	push	r1
    31da:	0f 92       	push	r0
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	0f 92       	push	r0
    31e0:	11 24       	eor	r1, r1
    31e2:	2f 93       	push	r18
    31e4:	3f 93       	push	r19
    31e6:	4f 93       	push	r20
    31e8:	5f 93       	push	r21
    31ea:	6f 93       	push	r22
    31ec:	7f 93       	push	r23
    31ee:	8f 93       	push	r24
    31f0:	9f 93       	push	r25
    31f2:	af 93       	push	r26
    31f4:	bf 93       	push	r27
    31f6:	ef 93       	push	r30
    31f8:	ff 93       	push	r31
	_cb();
    31fa:	e0 91 92 06 	lds	r30, 0x0692	; 0x800692 <_cb>
    31fe:	f0 91 93 06 	lds	r31, 0x0693	; 0x800693 <_cb+0x1>
    3202:	09 95       	icall
    3204:	ff 91       	pop	r31
    3206:	ef 91       	pop	r30
    3208:	bf 91       	pop	r27
    320a:	af 91       	pop	r26
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	7f 91       	pop	r23
    3212:	6f 91       	pop	r22
    3214:	5f 91       	pop	r21
    3216:	4f 91       	pop	r20
    3218:	3f 91       	pop	r19
    321a:	2f 91       	pop	r18
    321c:	0f 90       	pop	r0
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	0f 90       	pop	r0
    3222:	1f 90       	pop	r1
    3224:	18 95       	reti

Disassembly of section .text.__vector_9:

000028fe <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    28fe:	1f 92       	push	r1
    2900:	0f 92       	push	r0
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	0f 92       	push	r0
    2906:	11 24       	eor	r1, r1
    2908:	2f 93       	push	r18
    290a:	3f 93       	push	r19
    290c:	4f 93       	push	r20
    290e:	5f 93       	push	r21
    2910:	6f 93       	push	r22
    2912:	7f 93       	push	r23
    2914:	8f 93       	push	r24
    2916:	9f 93       	push	r25
    2918:	af 93       	push	r26
    291a:	bf 93       	push	r27
    291c:	cf 93       	push	r28
    291e:	ef 93       	push	r30
    2920:	ff 93       	push	r31
	cnt++;
    2922:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <cnt>
    2926:	8f 5f       	subi	r24, 0xFF	; 255
    2928:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    292c:	80 32       	cpi	r24, 0x20	; 32
    292e:	99 f4       	brne	.+38     	; 0x2956 <__vector_9+0x58>
		cnt=0;
    2930:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    2934:	c0 e0       	ldi	r28, 0x00	; 0
    2936:	0d c0       	rjmp	.+26     	; 0x2952 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    2938:	ec 2f       	mov	r30, r28
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	e6 58       	subi	r30, 0x86	; 134
    2942:	f9 4f       	sbci	r31, 0xF9	; 249
    2944:	01 90       	ld	r0, Z+
    2946:	f0 81       	ld	r31, Z
    2948:	e0 2d       	mov	r30, r0
    294a:	30 97       	sbiw	r30, 0x00	; 0
    294c:	09 f0       	breq	.+2      	; 0x2950 <__vector_9+0x52>
				callbacks[i]();
    294e:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    2950:	cf 5f       	subi	r28, 0xFF	; 255
    2952:	c5 30       	cpi	r28, 0x05	; 5
    2954:	88 f3       	brcs	.-30     	; 0x2938 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    2956:	ff 91       	pop	r31
    2958:	ef 91       	pop	r30
    295a:	cf 91       	pop	r28
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	9f 91       	pop	r25
    2962:	8f 91       	pop	r24
    2964:	7f 91       	pop	r23
    2966:	6f 91       	pop	r22
    2968:	5f 91       	pop	r21
    296a:	4f 91       	pop	r20
    296c:	3f 91       	pop	r19
    296e:	2f 91       	pop	r18
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00003274 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3274:	cf 92       	push	r12
    3276:	df 92       	push	r13
    3278:	ef 92       	push	r14
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	6a 01       	movw	r12, r20
    3280:	e6 2e       	mov	r14, r22
    3282:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    328a:	81 11       	cpse	r24, r1
    328c:	13 c0       	rjmp	.+38     	; 0x32b4 <start_and_write_data+0x40>
    328e:	c0 e0       	ldi	r28, 0x00	; 0
    3290:	0e c0       	rjmp	.+28     	; 0x32ae <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    3292:	ae 2d       	mov	r26, r14
    3294:	c6 01       	movw	r24, r12
    3296:	8c 0f       	add	r24, r28
    3298:	91 1d       	adc	r25, r1
    329a:	a1 1d       	adc	r26, r1
    329c:	fc 01       	movw	r30, r24
    329e:	84 91       	lpm	r24, Z
    32a0:	a7 fd       	sbrc	r26, 7
    32a2:	80 81       	ld	r24, Z
    32a4:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    32a8:	81 11       	cpse	r24, r1
    32aa:	04 c0       	rjmp	.+8      	; 0x32b4 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    32ac:	cf 5f       	subi	r28, 0xFF	; 255
    32ae:	cd 17       	cp	r28, r29
    32b0:	80 f3       	brcs	.-32     	; 0x3292 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    32b2:	80 e0       	ldi	r24, 0x00	; 0
}
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	ef 90       	pop	r14
    32ba:	df 90       	pop	r13
    32bc:	cf 90       	pop	r12
    32be:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002f36 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	8c 01       	movw	r16, r24
    2f44:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2f46:	c0 e0       	ldi	r28, 0x00	; 0
    2f48:	08 c0       	rjmp	.+16     	; 0x2f5a <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2f4a:	78 01       	movw	r14, r16
    2f4c:	ec 0e       	add	r14, r28
    2f4e:	f1 1c       	adc	r15, r1
    2f50:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <TWI_HAL_read_byte_ack>
    2f54:	f7 01       	movw	r30, r14
    2f56:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2f58:	cf 5f       	subi	r28, 0xFF	; 255
    2f5a:	2c 2f       	mov	r18, r28
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	8d 2f       	mov	r24, r29
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	28 17       	cp	r18, r24
    2f66:	39 07       	cpc	r19, r25
    2f68:	84 f3       	brlt	.-32     	; 0x2f4a <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2f6a:	8d 2f       	mov	r24, r29
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	e8 01       	movw	r28, r16
    2f72:	c8 0f       	add	r28, r24
    2f74:	d9 1f       	adc	r29, r25
    2f76:	0e 94 08 20 	call	0x4010	; 0x4010 <TWI_HAL_read_byte_nack>
    2f7a:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2f7c:	0e 94 2d 20 	call	0x405a	; 0x405a <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	ff 90       	pop	r15
    2f8c:	ef 90       	pop	r14
    2f8e:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003fe8 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3fe8:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3fea:	0e 94 3a 19 	call	0x3274	; 0x3274 <start_and_write_data>
    3fee:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3ff0:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    3ff2:	0e 94 2d 20 	call	0x405a	; 0x405a <TWI_HAL_stop>
	}
	return status;
}
    3ff6:	8c 2f       	mov	r24, r28
    3ff8:	cf 91       	pop	r28
    3ffa:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003eae <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3eae:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3eb0:	0e 94 3a 19 	call	0x3274	; 0x3274 <start_and_write_data>
    3eb4:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    3eb6:	0e 94 2d 20 	call	0x405a	; 0x405a <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    3eba:	c1 11       	cpse	r28, r1
    3ebc:	02 c0       	rjmp	.+4      	; 0x3ec2 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	01 c0       	rjmp	.+2      	; 0x3ec4 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    3ec2:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    3ec4:	cf 91       	pop	r28
    3ec6:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003a64 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	8b 01       	movw	r16, r22
    3a6e:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3a70:	61 e0       	ldi	r22, 0x01	; 1
    3a72:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_HAL_start>
    3a76:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3a78:	88 23       	and	r24, r24
    3a7a:	21 f0       	breq	.+8      	; 0x3a84 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    3a7c:	0e 94 2d 20 	call	0x405a	; 0x405a <TWI_HAL_stop>
		return status;	
    3a80:	8c 2f       	mov	r24, r28
    3a82:	04 c0       	rjmp	.+8      	; 0x3a8c <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    3a84:	6d 2f       	mov	r22, r29
    3a86:	c8 01       	movw	r24, r16
    3a88:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <read_and_stop>
	
}
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003afa <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	8b 01       	movw	r16, r22
    3b04:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3b06:	0e 94 80 1b 	call	0x3700	; 0x3700 <TWI_HAL_repeated_start>
    3b0a:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3b0c:	88 23       	and	r24, r24
    3b0e:	21 f0       	breq	.+8      	; 0x3b18 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    3b10:	0e 94 2d 20 	call	0x405a	; 0x405a <TWI_HAL_stop>
		return status;
    3b14:	8c 2f       	mov	r24, r28
    3b16:	04 c0       	rjmp	.+8      	; 0x3b20 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    3b18:	6d 2f       	mov	r22, r29
    3b1a:	c8 01       	movw	r24, r16
    3b1c:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <read_and_stop>
	
}
    3b20:	df 91       	pop	r29
    3b22:	cf 91       	pop	r28
    3b24:	1f 91       	pop	r17
    3b26:	0f 91       	pop	r16
    3b28:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00004024 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    4024:	80 e2       	ldi	r24, 0x20	; 32
    4026:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    402a:	e9 eb       	ldi	r30, 0xB9	; 185
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	8c 7f       	andi	r24, 0xFC	; 252
    4032:	80 83       	st	Z, r24
    4034:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

0000351a <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	88 0f       	add	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3522:	84 ea       	ldi	r24, 0xA4	; 164
    3524:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3528:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    352c:	99 23       	and	r25, r25
    352e:	e4 f7       	brge	.-8      	; 0x3528 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    3530:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3534:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    3536:	88 30       	cpi	r24, 0x08	; 8
    3538:	99 f4       	brne	.+38     	; 0x3560 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    353a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    353e:	84 e8       	ldi	r24, 0x84	; 132
    3540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3544:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3548:	88 23       	and	r24, r24
    354a:	e4 f7       	brge	.-8      	; 0x3544 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    354c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3550:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3552:	88 31       	cpi	r24, 0x18	; 24
    3554:	21 f0       	breq	.+8      	; 0x355e <TWI_HAL_start+0x44>
    3556:	80 34       	cpi	r24, 0x40	; 64
    3558:	19 f4       	brne	.+6      	; 0x3560 <TWI_HAL_start+0x46>
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	08 95       	ret
    355e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3560:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003700 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	28 2f       	mov	r18, r24
    3708:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    370a:	84 ea       	ldi	r24, 0xA4	; 164
    370c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3710:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3714:	99 23       	and	r25, r25
    3716:	e4 f7       	brge	.-8      	; 0x3710 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    3718:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    371c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    371e:	80 31       	cpi	r24, 0x10	; 16
    3720:	79 f4       	brne	.+30     	; 0x3740 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    3722:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3726:	84 e8       	ldi	r24, 0x84	; 132
    3728:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    372c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3730:	88 23       	and	r24, r24
    3732:	e4 f7       	brge	.-8      	; 0x372c <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    3734:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3738:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    373a:	80 34       	cpi	r24, 0x40	; 64
    373c:	09 f4       	brne	.+2      	; 0x3740 <TWI_HAL_repeated_start+0x40>
    373e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3740:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003d9c <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3d9c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3da0:	84 e8       	ldi	r24, 0x84	; 132
    3da2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3da6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3daa:	88 23       	and	r24, r24
    3dac:	e4 f7       	brge	.-8      	; 0x3da6 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3dae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3db2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3db4:	88 32       	cpi	r24, 0x28	; 40
    3db6:	09 f4       	brne	.+2      	; 0x3dba <TWI_HAL_write_byte+0x1e>
    3db8:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3dba:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003ffc <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3ffc:	84 ec       	ldi	r24, 0xC4	; 196
    3ffe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    4002:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4006:	88 23       	and	r24, r24
    4008:	e4 f7       	brge	.-8      	; 0x4002 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    400a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    400e:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00004010 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    4010:	84 e8       	ldi	r24, 0x84	; 132
    4012:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    4016:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    401a:	88 23       	and	r24, r24
    401c:	e4 f7       	brge	.-8      	; 0x4016 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    401e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4022:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

0000405a <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    405a:	84 e9       	ldi	r24, 0x94	; 148
    405c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    4060:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4064:	84 fd       	sbrc	r24, 4
    4066:	fc cf       	rjmp	.-8      	; 0x4060 <TWI_HAL_stop+0x6>
}
    4068:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003bba <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3bba:	bc 01       	movw	r22, r24
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	09 c0       	rjmp	.+18     	; 0x3bd2 <copy_buffer+0x18>
    3bc0:	fb 01       	movw	r30, r22
    3bc2:	e9 0f       	add	r30, r25
    3bc4:	f1 1d       	adc	r31, r1
    3bc6:	da 01       	movw	r26, r20
    3bc8:	a0 50       	subi	r26, 0x00	; 0
    3bca:	bf 4f       	sbci	r27, 0xFF	; 255
    3bcc:	2c 91       	ld	r18, X
    3bce:	20 83       	st	Z, r18
    3bd0:	9f 5f       	subi	r25, 0xFF	; 255
    3bd2:	49 2f       	mov	r20, r25
    3bd4:	50 e0       	ldi	r21, 0x00	; 0
    3bd6:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <rx_buffer_data_len>
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	22 50       	subi	r18, 0x02	; 2
    3bde:	31 09       	sbc	r19, r1
    3be0:	42 17       	cp	r20, r18
    3be2:	53 07       	cpc	r21, r19
    3be4:	6c f3       	brlt	.-38     	; 0x3bc0 <copy_buffer+0x6>
    3be6:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003784 <uart0_hal_init>:
    3784:	e1 ec       	ldi	r30, 0xC1	; 193
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	80 61       	ori	r24, 0x10	; 16
    378c:	80 83       	st	Z, r24
    378e:	80 81       	ld	r24, Z
    3790:	88 60       	ori	r24, 0x08	; 8
    3792:	80 83       	st	Z, r24
    3794:	80 81       	ld	r24, Z
    3796:	80 68       	ori	r24, 0x80	; 128
    3798:	80 83       	st	Z, r24
    379a:	80 81       	ld	r24, Z
    379c:	80 64       	ori	r24, 0x40	; 64
    379e:	80 83       	st	Z, r24
    37a0:	e0 ec       	ldi	r30, 0xC0	; 192
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	82 60       	ori	r24, 0x02	; 2
    37a8:	80 83       	st	Z, r24
    37aa:	86 e0       	ldi	r24, 0x06	; 6
    37ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    37b0:	80 e1       	ldi	r24, 0x10	; 16
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    37b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    37bc:	78 94       	sei
    37be:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000037c0 <uart0_hal_send_message>:
    37c0:	dc 01       	movw	r26, r24
    37c2:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    37c6:	81 11       	cpse	r24, r1
    37c8:	fc cf       	rjmp	.-8      	; 0x37c2 <uart0_hal_send_message+0x2>
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0b c0       	rjmp	.+22     	; 0x37e4 <uart0_hal_send_message+0x24>
    37ce:	29 2f       	mov	r18, r25
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	fd 01       	movw	r30, r26
    37d4:	e2 0f       	add	r30, r18
    37d6:	f3 1f       	adc	r31, r19
    37d8:	40 81       	ld	r20, Z
    37da:	f9 01       	movw	r30, r18
    37dc:	ea 56       	subi	r30, 0x6A	; 106
    37de:	fe 4f       	sbci	r31, 0xFE	; 254
    37e0:	40 83       	st	Z, r20
    37e2:	9f 5f       	subi	r25, 0xFF	; 255
    37e4:	96 17       	cp	r25, r22
    37e6:	98 f3       	brcs	.-26     	; 0x37ce <uart0_hal_send_message+0xe>
    37e8:	60 93 98 06 	sts	0x0698, r22	; 0x800698 <tx_buffer_data_len>
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    37f2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    37f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    37fa:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002d2c <uart0_hal_send_string>:
    2d2c:	6f 92       	push	r6
    2d2e:	7f 92       	push	r7
    2d30:	8f 92       	push	r8
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	3b 01       	movw	r6, r22
    2d3a:	88 2e       	mov	r8, r24
    2d3c:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    2d40:	81 11       	cpse	r24, r1
    2d42:	fc cf       	rjmp	.-8      	; 0x2d3c <uart0_hal_send_string+0x10>
    2d44:	88 2d       	mov	r24, r8
    2d46:	b3 01       	movw	r22, r6
    2d48:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2d4c:	68 2f       	mov	r22, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	12 c0       	rjmp	.+36     	; 0x2d76 <uart0_hal_send_string+0x4a>
    2d52:	29 2f       	mov	r18, r25
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	e8 2c       	mov	r14, r8
    2d58:	63 01       	movw	r12, r6
    2d5a:	c2 0e       	add	r12, r18
    2d5c:	d3 1e       	adc	r13, r19
    2d5e:	e1 1c       	adc	r14, r1
    2d60:	37 fd       	sbrc	r19, 7
    2d62:	ea 94       	dec	r14
    2d64:	f6 01       	movw	r30, r12
    2d66:	44 91       	lpm	r20, Z
    2d68:	e7 fc       	sbrc	r14, 7
    2d6a:	40 81       	ld	r20, Z
    2d6c:	f9 01       	movw	r30, r18
    2d6e:	ea 56       	subi	r30, 0x6A	; 106
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	40 83       	st	Z, r20
    2d74:	9f 5f       	subi	r25, 0xFF	; 255
    2d76:	96 17       	cp	r25, r22
    2d78:	60 f3       	brcs	.-40     	; 0x2d52 <uart0_hal_send_string+0x26>
    2d7a:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tx_buffer_data_len>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    2d84:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    2d88:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	8f 90       	pop	r8
    2d94:	7f 90       	pop	r7
    2d96:	6f 90       	pop	r6
    2d98:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000040c0 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    40c0:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <rx_buffer_has_message>
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	91 11       	cpse	r25, r1
    40c8:	01 c0       	rjmp	.+2      	; 0x40cc <uart0_hal_message_ready+0xc>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
}
    40cc:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000041fa <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    41fa:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    41fe:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <rx_buffer_data_len>
    4202:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003c70 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    3c70:	0f 93       	push	r16
    3c72:	1f 93       	push	r17
    3c74:	cf 93       	push	r28
    3c76:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3c78:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3c7c:	c0 91 96 06 	lds	r28, 0x0696	; 0x800696 <rx_buffer_data_len>
    3c80:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3c82:	f8 01       	movw	r30, r16
    3c84:	ec 0f       	add	r30, r28
    3c86:	f1 1d       	adc	r31, r1
    3c88:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3c8a:	0e 94 fd 20 	call	0x41fa	; 0x41fa <uart0_hal_clear_rx_buffer>
	return len;
}
    3c8e:	8c 2f       	mov	r24, r28
    3c90:	cf 91       	pop	r28
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00003562 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	1f 92       	push	r1
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	9a b1       	in	r25, 0x0a	; 10
    356e:	92 60       	ori	r25, 0x02	; 2
    3570:	9a b9       	out	0x0a, r25	; 10
    3572:	e1 ec       	ldi	r30, 0xC1	; 193
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	90 81       	ld	r25, Z
    3578:	97 7f       	andi	r25, 0xF7	; 247
    357a:	90 83       	st	Z, r25
    357c:	9b b1       	in	r25, 0x0b	; 11
    357e:	9d 7f       	andi	r25, 0xFD	; 253
    3580:	9b b9       	out	0x0b, r25	; 11
    3582:	af e9       	ldi	r26, 0x9F	; 159
    3584:	bf e0       	ldi	r27, 0x0F	; 15
    3586:	11 97       	sbiw	r26, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <uart0_hal_send_break+0x24>
    358a:	00 c0       	rjmp	.+0      	; 0x358c <uart0_hal_send_break+0x2a>
    358c:	00 00       	nop
    358e:	90 81       	ld	r25, Z
    3590:	98 60       	ori	r25, 0x08	; 8
    3592:	90 83       	st	Z, r25
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	61 e0       	ldi	r22, 0x01	; 1
    3598:	ce 01       	movw	r24, r28
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <uart0_hal_send_message>
    35a0:	0f 90       	pop	r0
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	08 95       	ret

Disassembly of section .text.__vector_22:

0000343c <__vector_22>:
    343c:	1f 92       	push	r1
    343e:	0f 92       	push	r0
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	0f 92       	push	r0
    3444:	11 24       	eor	r1, r1
    3446:	8f 93       	push	r24
    3448:	ef 93       	push	r30
    344a:	ff 93       	push	r31
    344c:	e0 91 97 06 	lds	r30, 0x0697	; 0x800697 <tx_buffer_cursor>
    3450:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    3454:	e8 17       	cp	r30, r24
    3456:	58 f4       	brcc	.+22     	; 0x346e <__vector_22+0x32>
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	8e 0f       	add	r24, r30
    345c:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	ea 56       	subi	r30, 0x6A	; 106
    3464:	fe 4f       	sbci	r31, 0xFE	; 254
    3466:	80 81       	ld	r24, Z
    3468:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <__vector_22+0x3a>
    346e:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <tx_buffer_cursor>
    3472:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <tx_buffer_data_len>
    3476:	ff 91       	pop	r31
    3478:	ef 91       	pop	r30
    347a:	8f 91       	pop	r24
    347c:	0f 90       	pop	r0
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	0f 90       	pop	r0
    3482:	1f 90       	pop	r1
    3484:	18 95       	reti

Disassembly of section .text.__vector_20:

00002bd4 <__vector_20>:
    2bd4:	1f 92       	push	r1
    2bd6:	0f 92       	push	r0
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	0f 92       	push	r0
    2bdc:	11 24       	eor	r1, r1
    2bde:	2f 93       	push	r18
    2be0:	8f 93       	push	r24
    2be2:	9f 93       	push	r25
    2be4:	ef 93       	push	r30
    2be6:	ff 93       	push	r31
    2be8:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <rx_buffer_has_message>
    2bec:	81 11       	cpse	r24, r1
    2bee:	0e c0       	rjmp	.+28     	; 0x2c0c <__vector_20+0x38>
    2bf0:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <rx_buffer_data_len>
    2bf4:	e6 39       	cpi	r30, 0x96	; 150
    2bf6:	50 f4       	brcc	.+20     	; 0x2c0c <__vector_20+0x38>
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	8e 0f       	add	r24, r30
    2bfc:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <rx_buffer_data_len>
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2c06:	e0 50       	subi	r30, 0x00	; 0
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 83       	st	Z, r24
    2c0c:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <rx_buffer_data_len>
    2c10:	83 30       	cpi	r24, 0x03	; 3
    2c12:	80 f0       	brcs	.+32     	; 0x2c34 <__vector_20+0x60>
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	fc 01       	movw	r30, r24
    2c18:	e1 50       	subi	r30, 0x01	; 1
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	20 81       	ld	r18, Z
    2c1e:	2a 30       	cpi	r18, 0x0A	; 10
    2c20:	49 f4       	brne	.+18     	; 0x2c34 <__vector_20+0x60>
    2c22:	fc 01       	movw	r30, r24
    2c24:	e2 50       	subi	r30, 0x02	; 2
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	8d 30       	cpi	r24, 0x0D	; 13
    2c2c:	19 f4       	brne	.+6      	; 0x2c34 <__vector_20+0x60>
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <rx_buffer_has_message>
    2c34:	ff 91       	pop	r31
    2c36:	ef 91       	pop	r30
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	2f 91       	pop	r18
    2c3e:	0f 90       	pop	r0
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	0f 90       	pop	r0
    2c44:	1f 90       	pop	r1
    2c46:	18 95       	reti

Disassembly of section .text.copy_buffer:

00003be8 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3be8:	bc 01       	movw	r22, r24
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	09 c0       	rjmp	.+18     	; 0x3c00 <copy_buffer+0x18>
    3bee:	fb 01       	movw	r30, r22
    3bf0:	e9 0f       	add	r30, r25
    3bf2:	f1 1d       	adc	r31, r1
    3bf4:	da 01       	movw	r26, r20
    3bf6:	a0 58       	subi	r26, 0x80	; 128
    3bf8:	ba 4f       	sbci	r27, 0xFA	; 250
    3bfa:	2c 91       	ld	r18, X
    3bfc:	20 83       	st	Z, r18
    3bfe:	9f 5f       	subi	r25, 0xFF	; 255
    3c00:	49 2f       	mov	r20, r25
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <rx_buffer_data_len>
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	22 50       	subi	r18, 0x02	; 2
    3c0c:	31 09       	sbc	r19, r1
    3c0e:	42 17       	cp	r20, r18
    3c10:	53 07       	cpc	r21, r19
    3c12:	6c f3       	brlt	.-38     	; 0x3bee <copy_buffer+0x6>
    3c14:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000037fc <uart1_hal_init>:
    37fc:	e9 ec       	ldi	r30, 0xC9	; 201
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	80 61       	ori	r24, 0x10	; 16
    3804:	80 83       	st	Z, r24
    3806:	80 81       	ld	r24, Z
    3808:	88 60       	ori	r24, 0x08	; 8
    380a:	80 83       	st	Z, r24
    380c:	80 81       	ld	r24, Z
    380e:	80 68       	ori	r24, 0x80	; 128
    3810:	80 83       	st	Z, r24
    3812:	80 81       	ld	r24, Z
    3814:	80 64       	ori	r24, 0x40	; 64
    3816:	80 83       	st	Z, r24
    3818:	e8 ec       	ldi	r30, 0xC8	; 200
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	82 60       	ori	r24, 0x02	; 2
    3820:	80 83       	st	Z, r24
    3822:	86 e0       	ldi	r24, 0x06	; 6
    3824:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    3828:	80 e1       	ldi	r24, 0x10	; 16
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3830:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    3834:	78 94       	sei
    3836:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002874 <uart1_hal_send_string>:
    2874:	6f 92       	push	r6
    2876:	7f 92       	push	r7
    2878:	8f 92       	push	r8
    287a:	cf 92       	push	r12
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	3b 01       	movw	r6, r22
    2882:	88 2e       	mov	r8, r24
    2884:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tx_buffer_data_len>
    2888:	81 11       	cpse	r24, r1
    288a:	fc cf       	rjmp	.-8      	; 0x2884 <uart1_hal_send_string+0x10>
    288c:	88 2d       	mov	r24, r8
    288e:	b3 01       	movw	r22, r6
    2890:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2894:	bc 01       	movw	r22, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	12 c0       	rjmp	.+36     	; 0x28be <uart1_hal_send_string+0x4a>
    289a:	29 2f       	mov	r18, r25
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	e8 2c       	mov	r14, r8
    28a0:	63 01       	movw	r12, r6
    28a2:	c4 0e       	add	r12, r20
    28a4:	d5 1e       	adc	r13, r21
    28a6:	e1 1c       	adc	r14, r1
    28a8:	57 fd       	sbrc	r21, 7
    28aa:	ea 94       	dec	r14
    28ac:	f6 01       	movw	r30, r12
    28ae:	44 91       	lpm	r20, Z
    28b0:	e7 fc       	sbrc	r14, 7
    28b2:	40 81       	ld	r20, Z
    28b4:	f9 01       	movw	r30, r18
    28b6:	e8 54       	subi	r30, 0x48	; 72
    28b8:	fb 4f       	sbci	r31, 0xFB	; 251
    28ba:	40 83       	st	Z, r20
    28bc:	9f 5f       	subi	r25, 0xFF	; 255
    28be:	49 2f       	mov	r20, r25
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	46 17       	cp	r20, r22
    28c4:	57 07       	cpc	r21, r23
    28c6:	48 f3       	brcs	.-46     	; 0x289a <uart1_hal_send_string+0x26>
    28c8:	fb 01       	movw	r30, r22
    28ca:	e8 54       	subi	r30, 0x48	; 72
    28cc:	fb 4f       	sbci	r31, 0xFB	; 251
    28ce:	8d e0       	ldi	r24, 0x0D	; 13
    28d0:	80 83       	st	Z, r24
    28d2:	fb 01       	movw	r30, r22
    28d4:	e7 54       	subi	r30, 0x47	; 71
    28d6:	fb 4f       	sbci	r31, 0xFB	; 251
    28d8:	8a e0       	ldi	r24, 0x0A	; 10
    28da:	80 83       	st	Z, r24
    28dc:	6e 5f       	subi	r22, 0xFE	; 254
    28de:	60 93 9c 06 	sts	0x069C, r22	; 0x80069c <tx_buffer_data_len>
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <tx_buffer_cursor>
    28e8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_end>
    28ec:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    28f0:	ef 90       	pop	r14
    28f2:	df 90       	pop	r13
    28f4:	cf 90       	pop	r12
    28f6:	8f 90       	pop	r8
    28f8:	7f 90       	pop	r7
    28fa:	6f 90       	pop	r6
    28fc:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

000040ce <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    40ce:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <rx_buffer_has_message>
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	91 11       	cpse	r25, r1
    40d6:	01 c0       	rjmp	.+2      	; 0x40da <uart1_hal_message_ready+0xc>
    40d8:	80 e0       	ldi	r24, 0x00	; 0
}
    40da:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

000040dc <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    40dc:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <rx_buffer_data_len>
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	95 39       	cpi	r25, 0x95	; 149
    40e4:	08 f4       	brcc	.+2      	; 0x40e8 <uart1_hal_rx_full+0xc>
    40e6:	80 e0       	ldi	r24, 0x00	; 0
}
    40e8:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00004204 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4204:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4208:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <rx_buffer_data_len>
    420c:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00003c98 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
    3c9c:	cf 93       	push	r28
    3c9e:	8c 01       	movw	r16, r24
    3ca0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <copy_buffer>
    3ca4:	c0 91 9a 06 	lds	r28, 0x069A	; 0x80069a <rx_buffer_data_len>
    3ca8:	c2 50       	subi	r28, 0x02	; 2
    3caa:	f8 01       	movw	r30, r16
    3cac:	ec 0f       	add	r30, r28
    3cae:	f1 1d       	adc	r31, r1
    3cb0:	10 82       	st	Z, r1
    3cb2:	0e 94 02 21 	call	0x4204	; 0x4204 <uart1_hal_clear_rx_buffer>
    3cb6:	8c 2f       	mov	r24, r28
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	08 95       	ret

Disassembly of section .text.__vector_30:

00003486 <__vector_30>:
    3486:	1f 92       	push	r1
    3488:	0f 92       	push	r0
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	0f 92       	push	r0
    348e:	11 24       	eor	r1, r1
    3490:	8f 93       	push	r24
    3492:	ef 93       	push	r30
    3494:	ff 93       	push	r31
    3496:	e0 91 9b 06 	lds	r30, 0x069B	; 0x80069b <tx_buffer_cursor>
    349a:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tx_buffer_data_len>
    349e:	e8 17       	cp	r30, r24
    34a0:	58 f4       	brcc	.+22     	; 0x34b8 <__vector_30+0x32>
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	8e 0f       	add	r24, r30
    34a6:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <tx_buffer_cursor>
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	e8 54       	subi	r30, 0x48	; 72
    34ae:	fb 4f       	sbci	r31, 0xFB	; 251
    34b0:	80 81       	ld	r24, Z
    34b2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <__vector_30+0x3a>
    34b8:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <tx_buffer_cursor>
    34bc:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <tx_buffer_data_len>
    34c0:	ff 91       	pop	r31
    34c2:	ef 91       	pop	r30
    34c4:	8f 91       	pop	r24
    34c6:	0f 90       	pop	r0
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	0f 90       	pop	r0
    34cc:	1f 90       	pop	r1
    34ce:	18 95       	reti

Disassembly of section .text.__vector_28:

00002c48 <__vector_28>:
    2c48:	1f 92       	push	r1
    2c4a:	0f 92       	push	r0
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	0f 92       	push	r0
    2c50:	11 24       	eor	r1, r1
    2c52:	2f 93       	push	r18
    2c54:	8f 93       	push	r24
    2c56:	9f 93       	push	r25
    2c58:	ef 93       	push	r30
    2c5a:	ff 93       	push	r31
    2c5c:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <rx_buffer_has_message>
    2c60:	81 11       	cpse	r24, r1
    2c62:	0e c0       	rjmp	.+28     	; 0x2c80 <__vector_28+0x38>
    2c64:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <rx_buffer_data_len>
    2c68:	e6 39       	cpi	r30, 0x96	; 150
    2c6a:	50 f4       	brcc	.+20     	; 0x2c80 <__vector_28+0x38>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	8e 0f       	add	r24, r30
    2c70:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <rx_buffer_data_len>
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2c7a:	e0 58       	subi	r30, 0x80	; 128
    2c7c:	fa 4f       	sbci	r31, 0xFA	; 250
    2c7e:	80 83       	st	Z, r24
    2c80:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <rx_buffer_data_len>
    2c84:	83 30       	cpi	r24, 0x03	; 3
    2c86:	80 f0       	brcs	.+32     	; 0x2ca8 <__vector_28+0x60>
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	e1 58       	subi	r30, 0x81	; 129
    2c8e:	fa 4f       	sbci	r31, 0xFA	; 250
    2c90:	20 81       	ld	r18, Z
    2c92:	2a 30       	cpi	r18, 0x0A	; 10
    2c94:	49 f4       	brne	.+18     	; 0x2ca8 <__vector_28+0x60>
    2c96:	fc 01       	movw	r30, r24
    2c98:	e2 58       	subi	r30, 0x82	; 130
    2c9a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8d 30       	cpi	r24, 0x0D	; 13
    2ca0:	19 f4       	brne	.+6      	; 0x2ca8 <__vector_28+0x60>
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <rx_buffer_has_message>
    2ca8:	ff 91       	pop	r31
    2caa:	ef 91       	pop	r30
    2cac:	9f 91       	pop	r25
    2cae:	8f 91       	pop	r24
    2cb0:	2f 91       	pop	r18
    2cb2:	0f 90       	pop	r0
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	0f 90       	pop	r0
    2cb8:	1f 90       	pop	r1
    2cba:	18 95       	reti

Disassembly of section .text.main:

00003efc <main>:
	//test_runner();
	
	while(1)
	{
		if(1){
			CONF_enter();
    3efc:	0e 94 89 0c 	call	0x1912	; 0x1912 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3f00:	2f ef       	ldi	r18, 0xFF	; 255
    3f02:	81 e1       	ldi	r24, 0x11	; 17
    3f04:	9a e7       	ldi	r25, 0x7A	; 122
    3f06:	21 50       	subi	r18, 0x01	; 1
    3f08:	80 40       	sbci	r24, 0x00	; 0
    3f0a:	90 40       	sbci	r25, 0x00	; 0
    3f0c:	e1 f7       	brne	.-8      	; 0x3f06 <main+0xa>
    3f0e:	00 c0       	rjmp	.+0      	; 0x3f10 <main+0x14>
    3f10:	00 00       	nop
    3f12:	f4 cf       	rjmp	.-24     	; 0x3efc <main>

Disassembly of section .text.calc_ppm_methane:

000026b6 <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    26b6:	8f 92       	push	r8
    26b8:	9f 92       	push	r9
    26ba:	af 92       	push	r10
    26bc:	bf 92       	push	r11
    26be:	cf 92       	push	r12
    26c0:	df 92       	push	r13
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	bc 01       	movw	r22, r24
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 bd 14 	call	0x297a	; 0x297a <__floatunsisf>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	59 e3       	ldi	r21, 0x39	; 57
    26d8:	0e 94 1c 21 	call	0x4238	; 0x4238 <__mulsf3>
    26dc:	80 90 8c 06 	lds	r8, 0x068C	; 0x80068c <Vc>
    26e0:	90 90 8d 06 	lds	r9, 0x068D	; 0x80068d <Vc+0x1>
    26e4:	a0 90 8e 06 	lds	r10, 0x068E	; 0x80068e <Vc+0x2>
    26e8:	b0 90 8f 06 	lds	r11, 0x068F	; 0x80068f <Vc+0x3>
    26ec:	a5 01       	movw	r20, r10
    26ee:	94 01       	movw	r18, r8
    26f0:	0e 94 1c 21 	call	0x4238	; 0x4238 <__mulsf3>
    26f4:	6b 01       	movw	r12, r22
    26f6:	7c 01       	movw	r14, r24
    26f8:	9b 01       	movw	r18, r22
    26fa:	ac 01       	movw	r20, r24
    26fc:	c5 01       	movw	r24, r10
    26fe:	b4 01       	movw	r22, r8
    2700:	0e 94 91 20 	call	0x4122	; 0x4122 <__subsf3>
    2704:	a7 01       	movw	r20, r14
    2706:	96 01       	movw	r18, r12
    2708:	0e 94 18 21 	call	0x4230	; 0x4230 <__divsf3>
    270c:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <RRL>
    2710:	30 91 89 06 	lds	r19, 0x0689	; 0x800689 <RRL+0x1>
    2714:	40 91 8a 06 	lds	r20, 0x068A	; 0x80068a <RRL+0x2>
    2718:	50 91 8b 06 	lds	r21, 0x068B	; 0x80068b <RRL+0x3>
    271c:	0e 94 1c 21 	call	0x4238	; 0x4238 <__mulsf3>
    2720:	20 91 84 06 	lds	r18, 0x0684	; 0x800684 <PPM_factor>
    2724:	30 91 85 06 	lds	r19, 0x0685	; 0x800685 <PPM_factor+0x1>
    2728:	40 91 86 06 	lds	r20, 0x0686	; 0x800686 <PPM_factor+0x2>
    272c:	50 91 87 06 	lds	r21, 0x0687	; 0x800687 <PPM_factor+0x3>
    2730:	0e 94 1c 21 	call	0x4238	; 0x4238 <__mulsf3>
    2734:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__fixunssfsi>
    2738:	cb 01       	movw	r24, r22
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	df 90       	pop	r13
    2740:	cf 90       	pop	r12
    2742:	bf 90       	pop	r11
    2744:	af 90       	pop	r10
    2746:	9f 90       	pop	r9
    2748:	8f 90       	pop	r8
    274a:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002fe8 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <ADC_get_value+0xa>
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2ff8:	8f ef       	ldi	r24, 0xFF	; 255
    2ffa:	9f ef       	ldi	r25, 0xFF	; 255
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    3002:	42 e0       	ldi	r20, 0x02	; 2
    3004:	be 01       	movw	r22, r28
    3006:	6f 5f       	subi	r22, 0xFF	; 255
    3008:	7f 4f       	sbci	r23, 0xFF	; 255
    300a:	8d e4       	ldi	r24, 0x4D	; 77
    300c:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    3010:	81 11       	cpse	r24, r1
    3012:	0d c0       	rjmp	.+26     	; 0x302e <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	98 2f       	mov	r25, r24
    301a:	88 27       	eor	r24, r24
    301c:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    301e:	82 2b       	or	r24, r18
    3020:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <calc_ppm_methane>
    3024:	f8 01       	movw	r30, r16
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    302e:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003f2c <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3f2c:	60 e4       	ldi	r22, 0x40	; 64
    3f2e:	70 e0       	ldi	r23, 0x00	; 0
    3f30:	80 e8       	ldi	r24, 0x80	; 128
    3f32:	0e 94 24 20 	call	0x4048	; 0x4048 <eeprom_read_byte>
    3f36:	91 e0       	ldi	r25, 0x01	; 1
    3f38:	81 11       	cpse	r24, r1
    3f3a:	01 c0       	rjmp	.+2      	; 0x3f3e <EM_has_deveui+0x12>
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
}
    3f3e:	89 2f       	mov	r24, r25
    3f40:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003f42 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3f42:	61 e4       	ldi	r22, 0x41	; 65
    3f44:	70 e0       	ldi	r23, 0x00	; 0
    3f46:	80 e8       	ldi	r24, 0x80	; 128
    3f48:	0e 94 24 20 	call	0x4048	; 0x4048 <eeprom_read_byte>
    3f4c:	91 e0       	ldi	r25, 0x01	; 1
    3f4e:	81 11       	cpse	r24, r1
    3f50:	01 c0       	rjmp	.+2      	; 0x3f54 <EM_has_appeui+0x12>
    3f52:	90 e0       	ldi	r25, 0x00	; 0
}
    3f54:	89 2f       	mov	r24, r25
    3f56:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003f58 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3f58:	62 e4       	ldi	r22, 0x42	; 66
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	80 e8       	ldi	r24, 0x80	; 128
    3f5e:	0e 94 24 20 	call	0x4048	; 0x4048 <eeprom_read_byte>
    3f62:	91 e0       	ldi	r25, 0x01	; 1
    3f64:	81 11       	cpse	r24, r1
    3f66:	01 c0       	rjmp	.+2      	; 0x3f6a <EM_has_appkey+0x12>
    3f68:	90 e0       	ldi	r25, 0x00	; 0
}
    3f6a:	89 2f       	mov	r24, r25
    3f6c:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00003838 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3838:	cf 92       	push	r12
    383a:	df 92       	push	r13
    383c:	ef 92       	push	r14
    383e:	6b 01       	movw	r12, r22
    3840:	e8 2e       	mov	r14, r24
    3842:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    3846:	40 97       	sbiw	r24, 0x10	; 16
    3848:	79 f4       	brne	.+30     	; 0x3868 <EM_set_deveui+0x30>
    384a:	20 e1       	ldi	r18, 0x10	; 16
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	8e 2d       	mov	r24, r14
    3854:	b6 01       	movw	r22, r12
    3856:	0e 94 3c 1b 	call	0x3678	; 0x3678 <eeprom_update_block>
    385a:	61 e0       	ldi	r22, 0x01	; 1
    385c:	80 e4       	ldi	r24, 0x40	; 64
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <eeprom_update_byte>
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	01 c0       	rjmp	.+2      	; 0x386a <EM_set_deveui+0x32>
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	ef 90       	pop	r14
    386c:	df 90       	pop	r13
    386e:	cf 90       	pop	r12
    3870:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003b2a <EM_get_deveui>:
    3b2a:	0f 93       	push	r16
    3b2c:	1f 93       	push	r17
    3b2e:	cf 93       	push	r28
    3b30:	8c 01       	movw	r16, r24
    3b32:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <EM_has_deveui>
    3b36:	c8 2f       	mov	r28, r24
    3b38:	88 23       	and	r24, r24
    3b3a:	51 f0       	breq	.+20     	; 0x3b50 <EM_get_deveui+0x26>
    3b3c:	20 e1       	ldi	r18, 0x10	; 16
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e0       	ldi	r20, 0x00	; 0
    3b42:	50 e0       	ldi	r21, 0x00	; 0
    3b44:	60 e0       	ldi	r22, 0x00	; 0
    3b46:	c8 01       	movw	r24, r16
    3b48:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <eeprom_read_block>
    3b4c:	f8 01       	movw	r30, r16
    3b4e:	10 8a       	std	Z+16, r1	; 0x10
    3b50:	8c 2f       	mov	r24, r28
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00003872 <EM_set_appeui>:
    3872:	cf 92       	push	r12
    3874:	df 92       	push	r13
    3876:	ef 92       	push	r14
    3878:	6b 01       	movw	r12, r22
    387a:	e8 2e       	mov	r14, r24
    387c:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    3880:	40 97       	sbiw	r24, 0x10	; 16
    3882:	79 f4       	brne	.+30     	; 0x38a2 <EM_set_appeui+0x30>
    3884:	20 e1       	ldi	r18, 0x10	; 16
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e1       	ldi	r20, 0x10	; 16
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	8e 2d       	mov	r24, r14
    388e:	b6 01       	movw	r22, r12
    3890:	0e 94 3c 1b 	call	0x3678	; 0x3678 <eeprom_update_block>
    3894:	61 e0       	ldi	r22, 0x01	; 1
    3896:	81 e4       	ldi	r24, 0x41	; 65
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <eeprom_update_byte>
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	01 c0       	rjmp	.+2      	; 0x38a4 <EM_set_appeui+0x32>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	ef 90       	pop	r14
    38a6:	df 90       	pop	r13
    38a8:	cf 90       	pop	r12
    38aa:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003b5a <EM_get_appeui>:
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	8c 01       	movw	r16, r24
    3b62:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <EM_has_appeui>
    3b66:	c8 2f       	mov	r28, r24
    3b68:	88 23       	and	r24, r24
    3b6a:	51 f0       	breq	.+20     	; 0x3b80 <EM_get_appeui+0x26>
    3b6c:	20 e1       	ldi	r18, 0x10	; 16
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e1       	ldi	r20, 0x10	; 16
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	c8 01       	movw	r24, r16
    3b78:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <eeprom_read_block>
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	10 8a       	std	Z+16, r1	; 0x10
    3b80:	8c 2f       	mov	r24, r28
    3b82:	cf 91       	pop	r28
    3b84:	1f 91       	pop	r17
    3b86:	0f 91       	pop	r16
    3b88:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

000038ac <EM_set_appkey>:
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	6b 01       	movw	r12, r22
    38b4:	e8 2e       	mov	r14, r24
    38b6:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    38ba:	80 97       	sbiw	r24, 0x20	; 32
    38bc:	79 f4       	brne	.+30     	; 0x38dc <EM_set_appkey+0x30>
    38be:	20 e2       	ldi	r18, 0x20	; 32
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e2       	ldi	r20, 0x20	; 32
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	8e 2d       	mov	r24, r14
    38c8:	b6 01       	movw	r22, r12
    38ca:	0e 94 3c 1b 	call	0x3678	; 0x3678 <eeprom_update_block>
    38ce:	61 e0       	ldi	r22, 0x01	; 1
    38d0:	82 e4       	ldi	r24, 0x42	; 66
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <eeprom_update_byte>
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	01 c0       	rjmp	.+2      	; 0x38de <EM_set_appkey+0x32>
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	ef 90       	pop	r14
    38e0:	df 90       	pop	r13
    38e2:	cf 90       	pop	r12
    38e4:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003b8a <EM_get_appkey>:
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	8c 01       	movw	r16, r24
    3b92:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <EM_has_appkey>
    3b96:	c8 2f       	mov	r28, r24
    3b98:	88 23       	and	r24, r24
    3b9a:	51 f0       	breq	.+20     	; 0x3bb0 <EM_get_appkey+0x26>
    3b9c:	20 e2       	ldi	r18, 0x20	; 32
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	40 e2       	ldi	r20, 0x20	; 32
    3ba2:	50 e0       	ldi	r21, 0x00	; 0
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	c8 01       	movw	r24, r16
    3ba8:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <eeprom_read_block>
    3bac:	f8 01       	movw	r30, r16
    3bae:	10 a2       	std	Z+32, r1	; 0x20
    3bb0:	8c 2f       	mov	r24, r28
    3bb2:	cf 91       	pop	r28
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

000040ea <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    40ea:	ab 01       	movw	r20, r22
    40ec:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    40ee:	83 e4       	ldi	r24, 0x43	; 67
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <eeprom_update_dword>
    40f6:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003dfc <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	ec 01       	movw	r28, r24
    3e02:	63 e4       	ldi	r22, 0x43	; 67
    3e04:	70 e0       	ldi	r23, 0x00	; 0
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	0e 94 b4 20 	call	0x4168	; 0x4168 <eeprom_read_dword>
    3e0c:	68 83       	st	Y, r22
    3e0e:	79 83       	std	Y+1, r23	; 0x01
    3e10:	8a 83       	std	Y+2, r24	; 0x02
    3e12:	9b 83       	std	Y+3, r25	; 0x03
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000040f8 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    40f8:	ab 01       	movw	r20, r22
    40fa:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    40fc:	87 e4       	ldi	r24, 0x47	; 71
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <eeprom_update_dword>
    4104:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003e1a <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	ec 01       	movw	r28, r24
    3e20:	67 e4       	ldi	r22, 0x47	; 71
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	0e 94 b4 20 	call	0x4168	; 0x4168 <eeprom_read_dword>
    3e2a:	68 83       	st	Y, r22
    3e2c:	79 83       	std	Y+1, r23	; 0x01
    3e2e:	8a 83       	std	Y+2, r24	; 0x02
    3e30:	9b 83       	std	Y+3, r25	; 0x03
    3e32:	df 91       	pop	r29
    3e34:	cf 91       	pop	r28
    3e36:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00004106 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    4106:	ab 01       	movw	r20, r22
    4108:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    410a:	8b e4       	ldi	r24, 0x4B	; 75
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <eeprom_update_dword>
    4112:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003e38 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	ec 01       	movw	r28, r24
    3e3e:	6b e4       	ldi	r22, 0x4B	; 75
    3e40:	70 e0       	ldi	r23, 0x00	; 0
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	0e 94 b4 20 	call	0x4168	; 0x4168 <eeprom_read_dword>
    3e48:	68 83       	st	Y, r22
    3e4a:	79 83       	std	Y+1, r23	; 0x01
    3e4c:	8a 83       	std	Y+2, r24	; 0x02
    3e4e:	9b 83       	std	Y+3, r25	; 0x03
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00004114 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    4114:	24 2f       	mov	r18, r20
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	44 e6       	ldi	r20, 0x64	; 100
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <eeprom_update_block>
    4120:	08 95       	ret

Disassembly of section .text.EM_get_collections:

0000406a <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    406a:	26 2f       	mov	r18, r22
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	44 e6       	ldi	r20, 0x64	; 100
    4070:	50 e0       	ldi	r21, 0x00	; 0
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <eeprom_read_block>
    4078:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00004184 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    4184:	68 2f       	mov	r22, r24
    4186:	8f e4       	ldi	r24, 0x4F	; 79
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <eeprom_update_byte>
    418e:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00004190 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    4190:	6f e4       	ldi	r22, 0x4F	; 79
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	0e 94 24 20 	call	0x4048	; 0x4048 <eeprom_read_byte>
}
    419a:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

0000419c <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    419c:	bc 01       	movw	r22, r24
    419e:	80 e5       	ldi	r24, 0x50	; 80
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <eeprom_update_word>
    41a6:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000041a8 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    41a8:	60 e5       	ldi	r22, 0x50	; 80
    41aa:	70 e0       	ldi	r23, 0x00	; 0
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	0e 94 bb 20 	call	0x4176	; 0x4176 <eeprom_read_word>
}
    41b2:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000041b4 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    41b4:	68 2f       	mov	r22, r24
    41b6:	82 e5       	ldi	r24, 0x52	; 82
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <eeprom_update_byte>
    41be:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000041c0 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    41c0:	62 e5       	ldi	r22, 0x52	; 82
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	0e 94 24 20 	call	0x4048	; 0x4048 <eeprom_read_byte>
    41ca:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00004248 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    4248:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <util_reset_module>
}
    424c:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

0000424e <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    424e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <util_lora_forward_msg>
    4252:	08 95       	ret

Disassembly of section .text.LM_send_break:

00004254 <LM_send_break>:
}

void LM_send_break(char res[]){
	util_send_break(res);
    4254:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <util_send_break>
    4258:	08 95       	ret

Disassembly of section .text.attach_ending:

00003e92 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    3e92:	fc 01       	movw	r30, r24
    3e94:	01 90       	ld	r0, Z+
    3e96:	00 20       	and	r0, r0
    3e98:	e9 f7       	brne	.-6      	; 0x3e94 <attach_ending+0x2>
    3e9a:	cf 01       	movw	r24, r30
    3e9c:	23 e0       	ldi	r18, 0x03	; 3
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	4f e5       	ldi	r20, 0x5F	; 95
    3ea2:	55 e0       	ldi	r21, 0x05	; 5
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
    3eac:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

000034d0 <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    34d0:	6f 92       	push	r6
    34d2:	7f 92       	push	r7
    34d4:	8f 92       	push	r8
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	3b 01       	movw	r6, r22
    34e2:	88 2e       	mov	r8, r24
    34e4:	69 01       	movw	r12, r18
    34e6:	e4 2e       	mov	r14, r20
    34e8:	84 2f       	mov	r24, r20
    34ea:	b9 01       	movw	r22, r18
    34ec:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    34f0:	8c 01       	movw	r16, r24
    34f2:	4e 2d       	mov	r20, r14
    34f4:	96 01       	movw	r18, r12
    34f6:	88 2d       	mov	r24, r8
    34f8:	b3 01       	movw	r22, r6
    34fa:	0e 94 03 17 	call	0x2e06	; 0x2e06 <strncmp>
    34fe:	21 e0       	ldi	r18, 0x01	; 1
    3500:	89 2b       	or	r24, r25
    3502:	09 f0       	breq	.+2      	; 0x3506 <util_strbeginswith+0x36>
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	82 2f       	mov	r24, r18
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ef 90       	pop	r14
    350e:	df 90       	pop	r13
    3510:	cf 90       	pop	r12
    3512:	8f 90       	pop	r8
    3514:	7f 90       	pop	r7
    3516:	6f 90       	pop	r6
    3518:	08 95       	ret

Disassembly of section .text.util_reset_module:

000035a8 <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    35a8:	0e 94 10 21 	call	0x4220	; 0x4220 <rn2483_reset_active>
    35ac:	2f ef       	ldi	r18, 0xFF	; 255
    35ae:	89 e6       	ldi	r24, 0x69	; 105
    35b0:	98 e1       	ldi	r25, 0x18	; 24
    35b2:	21 50       	subi	r18, 0x01	; 1
    35b4:	80 40       	sbci	r24, 0x00	; 0
    35b6:	90 40       	sbci	r25, 0x00	; 0
    35b8:	e1 f7       	brne	.-8      	; 0x35b2 <util_reset_module+0xa>
    35ba:	00 c0       	rjmp	.+0      	; 0x35bc <util_reset_module+0x14>
    35bc:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    35be:	0e 94 14 21 	call	0x4228	; 0x4228 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    35c2:	0e 94 60 20 	call	0x40c0	; 0x40c0 <uart0_hal_message_ready>
    35c6:	88 23       	and	r24, r24
    35c8:	e1 f3       	breq	.-8      	; 0x35c2 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    35ca:	8e e5       	ldi	r24, 0x5E	; 94
    35cc:	92 e0       	ldi	r25, 0x02	; 2
    35ce:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    35d2:	6e e5       	ldi	r22, 0x5E	; 94
    35d4:	72 e0       	ldi	r23, 0x02	; 2
    35d6:	80 e8       	ldi	r24, 0x80	; 128
    35d8:	25 ed       	ldi	r18, 0xD5	; 213
    35da:	35 e0       	ldi	r19, 0x05	; 5
    35dc:	40 e0       	ldi	r20, 0x00	; 0
    35de:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <util_strbeginswith>
    35e2:	88 23       	and	r24, r24
    35e4:	11 f0       	breq	.+4      	; 0x35ea <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    35ec:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

000038e6 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    38ec:	ab 01       	movw	r20, r22
    38ee:	68 2f       	mov	r22, r24
    38f0:	8e e5       	ldi	r24, 0x5E	; 94
    38f2:	92 e0       	ldi	r25, 0x02	; 2
    38f4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <strcpy>
	attach_ending(lm_msg);
    38f8:	8e e5       	ldi	r24, 0x5E	; 94
    38fa:	92 e0       	ldi	r25, 0x02	; 2
    38fc:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <attach_ending>
	uart0_hal_send_string(lm_msg);
    3900:	6e e5       	ldi	r22, 0x5E	; 94
    3902:	72 e0       	ldi	r23, 0x02	; 2
    3904:	80 e8       	ldi	r24, 0x80	; 128
    3906:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    390a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <uart0_hal_message_ready>
    390e:	88 23       	and	r24, r24
    3910:	e1 f3       	breq	.-8      	; 0x390a <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    3912:	ce 01       	movw	r24, r28
    3914:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <uart0_hal_read_message_as_str>
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	08 95       	ret

Disassembly of section .text.util_send_break:

00003dbc <util_send_break>:

void util_send_break(char res[]){
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	ec 01       	movw	r28, r24
	uart0_hal_send_break(0x55);
    3dc2:	85 e5       	ldi	r24, 0x55	; 85
    3dc4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3dc8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <uart0_hal_message_ready>
    3dcc:	88 23       	and	r24, r24
    3dce:	e1 f3       	breq	.-8      	; 0x3dc8 <util_send_break+0xc>
	
	uart0_hal_read_message_as_str(res);
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <uart0_hal_read_message_as_str>
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001c88 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <datetime_to_BCD+0x8>
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <datetime_to_BCD+0xa>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <datetime_to_BCD+0xc>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	f9 01       	movw	r30, r18
    1c9a:	3d ec       	ldi	r19, 0xCD	; 205
    1c9c:	43 9f       	mul	r20, r19
    1c9e:	21 2d       	mov	r18, r1
    1ca0:	11 24       	eor	r1, r1
    1ca2:	26 95       	lsr	r18
    1ca4:	26 95       	lsr	r18
    1ca6:	26 95       	lsr	r18
    1ca8:	10 e1       	ldi	r17, 0x10	; 16
    1caa:	21 9f       	mul	r18, r17
    1cac:	d0 01       	movw	r26, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	22 0f       	add	r18, r18
    1cb2:	b2 2f       	mov	r27, r18
    1cb4:	bb 0f       	add	r27, r27
    1cb6:	bb 0f       	add	r27, r27
    1cb8:	2b 0f       	add	r18, r27
    1cba:	42 1b       	sub	r20, r18
    1cbc:	4a 2b       	or	r20, r26
    1cbe:	40 83       	st	Z, r20
    1cc0:	53 9f       	mul	r21, r19
    1cc2:	21 2d       	mov	r18, r1
    1cc4:	11 24       	eor	r1, r1
    1cc6:	26 95       	lsr	r18
    1cc8:	26 95       	lsr	r18
    1cca:	26 95       	lsr	r18
    1ccc:	40 e1       	ldi	r20, 0x10	; 16
    1cce:	24 9f       	mul	r18, r20
    1cd0:	d0 01       	movw	r26, r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	22 0f       	add	r18, r18
    1cd6:	42 2f       	mov	r20, r18
    1cd8:	44 0f       	add	r20, r20
    1cda:	44 0f       	add	r20, r20
    1cdc:	24 0f       	add	r18, r20
    1cde:	52 1b       	sub	r21, r18
    1ce0:	5a 2b       	or	r21, r26
    1ce2:	51 83       	std	Z+1, r21	; 0x01
    1ce4:	63 9f       	mul	r22, r19
    1ce6:	41 2d       	mov	r20, r1
    1ce8:	11 24       	eor	r1, r1
    1cea:	46 95       	lsr	r20
    1cec:	46 95       	lsr	r20
    1cee:	46 95       	lsr	r20
    1cf0:	10 e1       	ldi	r17, 0x10	; 16
    1cf2:	41 9f       	mul	r20, r17
    1cf4:	d0 01       	movw	r26, r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	44 0f       	add	r20, r20
    1cfa:	24 2f       	mov	r18, r20
    1cfc:	22 0f       	add	r18, r18
    1cfe:	22 0f       	add	r18, r18
    1d00:	42 0f       	add	r20, r18
    1d02:	64 1b       	sub	r22, r20
    1d04:	6a 2b       	or	r22, r26
    1d06:	62 83       	std	Z+2, r22	; 0x02
    1d08:	73 9f       	mul	r23, r19
    1d0a:	41 2d       	mov	r20, r1
    1d0c:	11 24       	eor	r1, r1
    1d0e:	46 95       	lsr	r20
    1d10:	46 95       	lsr	r20
    1d12:	46 95       	lsr	r20
    1d14:	20 e1       	ldi	r18, 0x10	; 16
    1d16:	42 9f       	mul	r20, r18
    1d18:	d0 01       	movw	r26, r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	44 0f       	add	r20, r20
    1d1e:	24 2f       	mov	r18, r20
    1d20:	22 0f       	add	r18, r18
    1d22:	22 0f       	add	r18, r18
    1d24:	42 0f       	add	r20, r18
    1d26:	74 1b       	sub	r23, r20
    1d28:	7a 2b       	or	r23, r26
    1d2a:	73 83       	std	Z+3, r23	; 0x03
    1d2c:	83 9f       	mul	r24, r19
    1d2e:	41 2d       	mov	r20, r1
    1d30:	11 24       	eor	r1, r1
    1d32:	46 95       	lsr	r20
    1d34:	46 95       	lsr	r20
    1d36:	46 95       	lsr	r20
    1d38:	10 e1       	ldi	r17, 0x10	; 16
    1d3a:	41 9f       	mul	r20, r17
    1d3c:	b0 01       	movw	r22, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	44 0f       	add	r20, r20
    1d42:	24 2f       	mov	r18, r20
    1d44:	22 0f       	add	r18, r18
    1d46:	22 0f       	add	r18, r18
    1d48:	42 0f       	add	r20, r18
    1d4a:	84 1b       	sub	r24, r20
    1d4c:	86 2b       	or	r24, r22
    1d4e:	84 83       	std	Z+4, r24	; 0x04
    1d50:	93 9f       	mul	r25, r19
    1d52:	31 2d       	mov	r19, r1
    1d54:	11 24       	eor	r1, r1
    1d56:	36 95       	lsr	r19
    1d58:	36 95       	lsr	r19
    1d5a:	36 95       	lsr	r19
    1d5c:	20 e1       	ldi	r18, 0x10	; 16
    1d5e:	32 9f       	mul	r19, r18
    1d60:	a0 01       	movw	r20, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	33 0f       	add	r19, r19
    1d66:	83 2f       	mov	r24, r19
    1d68:	88 0f       	add	r24, r24
    1d6a:	88 0f       	add	r24, r24
    1d6c:	38 0f       	add	r19, r24
    1d6e:	93 1b       	sub	r25, r19
    1d70:	94 2b       	or	r25, r20
    1d72:	95 83       	std	Z+5, r25	; 0x05
    1d74:	26 96       	adiw	r28, 0x06	; 6
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

000017d2 <RTC_get_current_time>:
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	27 97       	sbiw	r28, 0x07	; 7
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	8c 01       	movw	r16, r24
    17ec:	21 e0       	ldi	r18, 0x01	; 1
    17ee:	48 ee       	ldi	r20, 0xE8	; 232
    17f0:	55 e0       	ldi	r21, 0x05	; 5
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	81 e5       	ldi	r24, 0x51	; 81
    17f6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <TWI_API_write_data>
    17fa:	81 11       	cpse	r24, r1
    17fc:	7c c0       	rjmp	.+248    	; 0x18f6 <RTC_get_current_time+0x124>
    17fe:	47 e0       	ldi	r20, 0x07	; 7
    1800:	be 01       	movw	r22, r28
    1802:	6f 5f       	subi	r22, 0xFF	; 255
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	81 e5       	ldi	r24, 0x51	; 81
    1808:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <TWI_API_repeat_read_data_stop>
    180c:	81 11       	cpse	r24, r1
    180e:	75 c0       	rjmp	.+234    	; 0x18fa <RTC_get_current_time+0x128>
    1810:	29 81       	ldd	r18, Y+1	; 0x01
    1812:	82 2f       	mov	r24, r18
    1814:	8f 77       	andi	r24, 0x7F	; 127
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	95 95       	asr	r25
    181a:	87 95       	ror	r24
    181c:	95 95       	asr	r25
    181e:	87 95       	ror	r24
    1820:	95 95       	asr	r25
    1822:	87 95       	ror	r24
    1824:	95 95       	asr	r25
    1826:	87 95       	ror	r24
    1828:	88 0f       	add	r24, r24
    182a:	98 2f       	mov	r25, r24
    182c:	99 0f       	add	r25, r25
    182e:	99 0f       	add	r25, r25
    1830:	89 0f       	add	r24, r25
    1832:	2f 70       	andi	r18, 0x0F	; 15
    1834:	82 0f       	add	r24, r18
    1836:	f8 01       	movw	r30, r16
    1838:	80 83       	st	Z, r24
    183a:	2a 81       	ldd	r18, Y+2	; 0x02
    183c:	82 2f       	mov	r24, r18
    183e:	8f 77       	andi	r24, 0x7F	; 127
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	95 95       	asr	r25
    1844:	87 95       	ror	r24
    1846:	95 95       	asr	r25
    1848:	87 95       	ror	r24
    184a:	95 95       	asr	r25
    184c:	87 95       	ror	r24
    184e:	95 95       	asr	r25
    1850:	87 95       	ror	r24
    1852:	88 0f       	add	r24, r24
    1854:	98 2f       	mov	r25, r24
    1856:	99 0f       	add	r25, r25
    1858:	99 0f       	add	r25, r25
    185a:	89 0f       	add	r24, r25
    185c:	2f 70       	andi	r18, 0x0F	; 15
    185e:	82 0f       	add	r24, r18
    1860:	81 83       	std	Z+1, r24	; 0x01
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	82 2f       	mov	r24, r18
    1866:	8f 73       	andi	r24, 0x3F	; 63
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	95 95       	asr	r25
    186c:	87 95       	ror	r24
    186e:	95 95       	asr	r25
    1870:	87 95       	ror	r24
    1872:	95 95       	asr	r25
    1874:	87 95       	ror	r24
    1876:	95 95       	asr	r25
    1878:	87 95       	ror	r24
    187a:	88 0f       	add	r24, r24
    187c:	98 2f       	mov	r25, r24
    187e:	99 0f       	add	r25, r25
    1880:	99 0f       	add	r25, r25
    1882:	89 0f       	add	r24, r25
    1884:	2f 70       	andi	r18, 0x0F	; 15
    1886:	82 0f       	add	r24, r18
    1888:	82 83       	std	Z+2, r24	; 0x02
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	82 2f       	mov	r24, r18
    188e:	8f 73       	andi	r24, 0x3F	; 63
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	95 95       	asr	r25
    1894:	87 95       	ror	r24
    1896:	95 95       	asr	r25
    1898:	87 95       	ror	r24
    189a:	95 95       	asr	r25
    189c:	87 95       	ror	r24
    189e:	95 95       	asr	r25
    18a0:	87 95       	ror	r24
    18a2:	88 0f       	add	r24, r24
    18a4:	98 2f       	mov	r25, r24
    18a6:	99 0f       	add	r25, r25
    18a8:	99 0f       	add	r25, r25
    18aa:	89 0f       	add	r24, r25
    18ac:	2f 70       	andi	r18, 0x0F	; 15
    18ae:	82 0f       	add	r24, r18
    18b0:	83 83       	std	Z+3, r24	; 0x03
    18b2:	2e 81       	ldd	r18, Y+6	; 0x06
    18b4:	82 2f       	mov	r24, r18
    18b6:	8f 71       	andi	r24, 0x1F	; 31
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	95 95       	asr	r25
    18c0:	87 95       	ror	r24
    18c2:	95 95       	asr	r25
    18c4:	87 95       	ror	r24
    18c6:	95 95       	asr	r25
    18c8:	87 95       	ror	r24
    18ca:	88 0f       	add	r24, r24
    18cc:	98 2f       	mov	r25, r24
    18ce:	99 0f       	add	r25, r25
    18d0:	99 0f       	add	r25, r25
    18d2:	89 0f       	add	r24, r25
    18d4:	2f 70       	andi	r18, 0x0F	; 15
    18d6:	82 0f       	add	r24, r18
    18d8:	84 83       	std	Z+4, r24	; 0x04
    18da:	8f 81       	ldd	r24, Y+7	; 0x07
    18dc:	98 2f       	mov	r25, r24
    18de:	92 95       	swap	r25
    18e0:	9f 70       	andi	r25, 0x0F	; 15
    18e2:	99 0f       	add	r25, r25
    18e4:	29 2f       	mov	r18, r25
    18e6:	22 0f       	add	r18, r18
    18e8:	22 0f       	add	r18, r18
    18ea:	92 0f       	add	r25, r18
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	89 0f       	add	r24, r25
    18f0:	85 83       	std	Z+5, r24	; 0x05
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <RTC_get_current_time+0x12a>
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <RTC_get_current_time+0x12a>
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	27 96       	adiw	r28, 0x07	; 7
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00002e70 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	64 97       	sbiw	r28, 0x14	; 20
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    2e84:	9e 01       	movw	r18, r28
    2e86:	27 5f       	subi	r18, 0xF7	; 247
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <datetime_to_BCD>
	
	data[0]=0x02;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    2e96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e98:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    2e9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9c:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    2e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    2ea2:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    2ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eaa:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    2eac:	ae 01       	movw	r20, r28
    2eae:	4f 5f       	subi	r20, 0xFF	; 255
    2eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb2:	60 e8       	ldi	r22, 0x80	; 128
    2eb4:	28 e0       	ldi	r18, 0x08	; 8
    2eb6:	81 e5       	ldi	r24, 0x51	; 81
    2eb8:	0e 94 57 1f 	call	0x3eae	; 0x3eae <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2ebc:	88 23       	and	r24, r24
    2ebe:	11 f0       	breq	.+4      	; 0x2ec4 <RTC_set_current_time+0x54>
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
}
    2ec6:	64 96       	adiw	r28, 0x14	; 20
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003ec8 <bytes_2_uint>:
	TC1_HAL_start();
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    3ec8:	fc 01       	movw	r30, r24
    3eca:	54 81       	ldd	r21, Z+4	; 0x04
    3ecc:	43 81       	ldd	r20, Z+3	; 0x03
    3ece:	31 81       	ldd	r19, Z+1	; 0x01
    3ed0:	20 81       	ld	r18, Z
    3ed2:	65 2f       	mov	r22, r21
    3ed4:	74 2f       	mov	r23, r20
    3ed6:	83 2f       	mov	r24, r19
    3ed8:	92 2f       	mov	r25, r18
    3eda:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__fixunssfsi>
    3ede:	cb 01       	movw	r24, r22
    3ee0:	08 95       	ret

Disassembly of section .text.init_measurement:

0000391e <init_measurement>:
    391e:	25 e0       	ldi	r18, 0x05	; 5
    3920:	4c ed       	ldi	r20, 0xDC	; 220
    3922:	55 e0       	ldi	r21, 0x05	; 5
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	81 e6       	ldi	r24, 0x61	; 97
    3928:	0e 94 57 1f 	call	0x3eae	; 0x3eae <TWI_API_write_data_stop>
    392c:	81 11       	cpse	r24, r1
    392e:	0f c0       	rjmp	.+30     	; 0x394e <init_measurement+0x30>
    3930:	25 e0       	ldi	r18, 0x05	; 5
    3932:	41 ee       	ldi	r20, 0xE1	; 225
    3934:	55 e0       	ldi	r21, 0x05	; 5
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	81 e6       	ldi	r24, 0x61	; 97
    393a:	0e 94 57 1f 	call	0x3eae	; 0x3eae <TWI_API_write_data_stop>
    393e:	81 11       	cpse	r24, r1
    3940:	08 c0       	rjmp	.+16     	; 0x3952 <init_measurement+0x34>
    3942:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <SCD30_HAL_data_ready>
    3946:	88 23       	and	r24, r24
    3948:	e1 f3       	breq	.-8      	; 0x3942 <init_measurement+0x24>
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	08 95       	ret
    394e:	82 e0       	ldi	r24, 0x02	; 2
    3950:	08 95       	ret
    3952:	82 e0       	ldi	r24, 0x02	; 2
    3954:	08 95       	ret

Disassembly of section .text.validate_data:

00003a96 <validate_data>:
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	ec 01       	movw	r28, r24
    3a9c:	62 e0       	ldi	r22, 0x02	; 2
    3a9e:	0e 94 c7 1c 	call	0x398e	; 0x398e <calc_crc8>
    3aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa4:	89 13       	cpse	r24, r25
    3aa6:	0a c0       	rjmp	.+20     	; 0x3abc <validate_data+0x26>
    3aa8:	62 e0       	ldi	r22, 0x02	; 2
    3aaa:	ce 01       	movw	r24, r28
    3aac:	03 96       	adiw	r24, 0x03	; 3
    3aae:	0e 94 c7 1c 	call	0x398e	; 0x398e <calc_crc8>
    3ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ab4:	89 17       	cp	r24, r25
    3ab6:	21 f0       	breq	.+8      	; 0x3ac0 <validate_data+0x2a>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	03 c0       	rjmp	.+6      	; 0x3ac2 <validate_data+0x2c>
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	01 c0       	rjmp	.+2      	; 0x3ac2 <validate_data+0x2c>
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	08 95       	ret

Disassembly of section .text.read_value:

00002614 <read_value>:
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	00 d0       	rcall	.+0      	; 0x261e <read_value+0xa>
    261e:	00 d0       	rcall	.+0      	; 0x2620 <read_value+0xc>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <read_value+0xe>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	8c 01       	movw	r16, r24
    2628:	8f ef       	ldi	r24, 0xFF	; 255
    262a:	9f ef       	ldi	r25, 0xFF	; 255
    262c:	f8 01       	movw	r30, r16
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <SCD30_HAL_data_ready>
    2636:	81 11       	cpse	r24, r1
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <read_value+0x34>
    263a:	8e ef       	ldi	r24, 0xFE	; 254
    263c:	9f ef       	ldi	r25, 0xFF	; 255
    263e:	f8 01       	movw	r30, r16
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	2c c0       	rjmp	.+88     	; 0x26a0 <read_value+0x8c>
    2648:	22 e0       	ldi	r18, 0x02	; 2
    264a:	46 ee       	ldi	r20, 0xE6	; 230
    264c:	55 e0       	ldi	r21, 0x05	; 5
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	81 e6       	ldi	r24, 0x61	; 97
    2652:	0e 94 57 1f 	call	0x3eae	; 0x3eae <TWI_API_write_data_stop>
    2656:	81 11       	cpse	r24, r1
    2658:	1e c0       	rjmp	.+60     	; 0x2696 <read_value+0x82>
    265a:	8f e3       	ldi	r24, 0x3F	; 63
    265c:	9f e1       	ldi	r25, 0x1F	; 31
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <read_value+0x4a>
    2662:	00 c0       	rjmp	.+0      	; 0x2664 <read_value+0x50>
    2664:	00 00       	nop
    2666:	46 e0       	ldi	r20, 0x06	; 6
    2668:	be 01       	movw	r22, r28
    266a:	6f 5f       	subi	r22, 0xFF	; 255
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	81 e6       	ldi	r24, 0x61	; 97
    2670:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <TWI_API_read_data_ack_end_nack_stop>
    2674:	81 11       	cpse	r24, r1
    2676:	11 c0       	rjmp	.+34     	; 0x269a <read_value+0x86>
    2678:	ce 01       	movw	r24, r28
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <validate_data>
    2680:	88 23       	and	r24, r24
    2682:	69 f0       	breq	.+26     	; 0x269e <read_value+0x8a>
    2684:	ce 01       	movw	r24, r28
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <bytes_2_uint>
    268c:	f8 01       	movw	r30, r16
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	05 c0       	rjmp	.+10     	; 0x26a0 <read_value+0x8c>
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	03 c0       	rjmp	.+6      	; 0x26a0 <read_value+0x8c>
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <read_value+0x8c>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	26 96       	adiw	r28, 0x06	; 6
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003d58 <SCD30_sensor_on>:
    3d58:	0e 94 59 20 	call	0x40b2	; 0x40b2 <SCD30_HAL_init>
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <PM_HAL_SCD30_power>
    3d62:	2f ef       	ldi	r18, 0xFF	; 255
    3d64:	83 ed       	ldi	r24, 0xD3	; 211
    3d66:	90 e3       	ldi	r25, 0x30	; 48
    3d68:	21 50       	subi	r18, 0x01	; 1
    3d6a:	80 40       	sbci	r24, 0x00	; 0
    3d6c:	90 40       	sbci	r25, 0x00	; 0
    3d6e:	e1 f7       	brne	.-8      	; 0x3d68 <SCD30_sensor_on+0x10>
    3d70:	00 c0       	rjmp	.+0      	; 0x3d72 <SCD30_sensor_on+0x1a>
    3d72:	00 00       	nop
    3d74:	0e 94 8f 1c 	call	0x391e	; 0x391e <init_measurement>
    3d78:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003ee2 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3ee8:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <SCD30_HAL_data_ready>
    3eec:	88 23       	and	r24, r24
    3eee:	e1 f3       	breq	.-8      	; 0x3ee8 <SCD30_get_reading+0x6>
	
	return read_value(value);
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	0e 94 0a 13 	call	0x2614	; 0x2614 <read_value>
}
    3ef6:	df 91       	pop	r29
    3ef8:	cf 91       	pop	r28
    3efa:	08 95       	ret

Disassembly of section .text.parse_cmd:

00003cc0 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	80 81       	ld	r24, Z
    3cc4:	82 37       	cpi	r24, 0x72	; 114
    3cc6:	41 f0       	breq	.+16     	; 0x3cd8 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    3cc8:	87 37       	cpi	r24, 0x77	; 119
    3cca:	41 f0       	breq	.+16     	; 0x3cdc <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    3ccc:	83 36       	cpi	r24, 0x63	; 99
    3cce:	41 f0       	breq	.+16     	; 0x3ce0 <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    3cd0:	83 37       	cpi	r24, 0x73	; 115
    3cd2:	41 f4       	brne	.+16     	; 0x3ce4 <parse_cmd+0x24>
    3cd4:	8a e0       	ldi	r24, 0x0A	; 10
    3cd6:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3cd8:	87 e0       	ldi	r24, 0x07	; 7
    3cda:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    3cdc:	88 e0       	ldi	r24, 0x08	; 8
    3cde:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    3ce0:	89 e0       	ldi	r24, 0x09	; 9
    3ce2:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    3ce4:	85 e0       	ldi	r24, 0x05	; 5
}
    3ce6:	08 95       	ret

Disassembly of section .text.validate_cmd:

0000303e <validate_cmd>:

static bool validate_cmd(char msg[]){
    303e:	cf 93       	push	r28
    3040:	df 93       	push	r29
    3042:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    3044:	bc 01       	movw	r22, r24
    3046:	80 e8       	ldi	r24, 0x80	; 128
    3048:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    304c:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    304e:	fc 01       	movw	r30, r24
    3050:	31 97       	sbiw	r30, 0x01	; 1
    3052:	ec 0f       	add	r30, r28
    3054:	fd 1f       	adc	r31, r29
    3056:	80 81       	ld	r24, Z
    3058:	80 32       	cpi	r24, 0x20	; 32
    305a:	b1 f0       	breq	.+44     	; 0x3088 <validate_cmd+0x4a>
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	0d c0       	rjmp	.+26     	; 0x307e <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    3064:	fe 01       	movw	r30, r28
    3066:	e2 0f       	add	r30, r18
    3068:	f3 1f       	adc	r31, r19
    306a:	90 81       	ld	r25, Z
    306c:	90 32       	cpi	r25, 0x20	; 32
    306e:	21 f4       	brne	.+8      	; 0x3078 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    3070:	41 11       	cpse	r20, r1
    3072:	0c c0       	rjmp	.+24     	; 0x308c <validate_cmd+0x4e>
			lastCharWasSpace=true;
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	01 c0       	rjmp	.+2      	; 0x307a <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    3078:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    307a:	2f 5f       	subi	r18, 0xFF	; 255
    307c:	3f 4f       	sbci	r19, 0xFF	; 255
    307e:	26 17       	cp	r18, r22
    3080:	37 07       	cpc	r19, r23
    3082:	80 f3       	brcs	.-32     	; 0x3064 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	03 c0       	rjmp	.+6      	; 0x308e <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	01 c0       	rjmp	.+2      	; 0x308e <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    308c:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001912 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1912:	cf 93       	push	r28
	uart1_hal_init();
    1914:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1918:	c0 e0       	ldi	r28, 0x00	; 0
    191a:	0d c0       	rjmp	.+26     	; 0x1936 <CONF_enter+0x24>
				
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    191c:	c2 e0       	ldi	r28, 0x02	; 2
    191e:	0b c0       	rjmp	.+22     	; 0x1936 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1920:	c5 e0       	ldi	r28, 0x05	; 5
    1922:	09 c0       	rjmp	.+18     	; 0x1936 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1924:	c6 e0       	ldi	r28, 0x06	; 6
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1928:	c5 e0       	ldi	r28, 0x05	; 5
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    192c:	c5 e0       	ldi	r28, 0x05	; 5
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1930:	c5 e0       	ldi	r28, 0x05	; 5
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1934:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1936:	ec 2f       	mov	r30, r28
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ec 30       	cpi	r30, 0x0C	; 12
    193c:	f1 05       	cpc	r31, r1
    193e:	d8 f7       	brcc	.-10     	; 0x1936 <CONF_enter+0x24>
    1940:	e2 5c       	subi	r30, 0xC2	; 194
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1948:	65 e3       	ldi	r22, 0x35	; 53
    194a:	74 e0       	ldi	r23, 0x04	; 4
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1952:	6b e5       	ldi	r22, 0x5B	; 91
    1954:	74 e0       	ldi	r23, 0x04	; 4
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				
				if(!init_methane_SCD30()){
    195c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <init_methane_SCD30>
    1960:	81 11       	cpse	r24, r1
    1962:	dc cf       	rjmp	.-72     	; 0x191c <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    1964:	6d e7       	ldi	r22, 0x7D	; 125
    1966:	74 e0       	ldi	r23, 0x04	; 4
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
					state=CONF_EXIT;
    196e:	c4 e0       	ldi	r28, 0x04	; 4
    1970:	e2 cf       	rjmp	.-60     	; 0x1936 <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1972:	0e 94 67 20 	call	0x40ce	; 0x40ce <uart1_hal_message_ready>
    1976:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    1978:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    197a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <uart1_hal_rx_full>
    197e:	81 11       	cpse	r24, r1
    1980:	cf cf       	rjmp	.-98     	; 0x1920 <CONF_enter+0xe>
    1982:	d9 cf       	rjmp	.-78     	; 0x1936 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1984:	8e ee       	ldi	r24, 0xEE	; 238
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    198c:	8e ee       	ldi	r24, 0xEE	; 238
    198e:	93 e0       	ldi	r25, 0x03	; 3
    1990:	0e 94 1f 18 	call	0x303e	; 0x303e <validate_cmd>
    1994:	88 23       	and	r24, r24
    1996:	31 f2       	breq	.-116    	; 0x1924 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    1998:	8e ee       	ldi	r24, 0xEE	; 238
    199a:	93 e0       	ldi	r25, 0x03	; 3
    199c:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <parse_cmd>
    19a0:	c8 2f       	mov	r28, r24
    19a2:	c9 cf       	rjmp	.-110    	; 0x1936 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    19a4:	6e ee       	ldi	r22, 0xEE	; 238
    19a6:	73 e0       	ldi	r23, 0x03	; 3
    19a8:	80 e8       	ldi	r24, 0x80	; 128
    19aa:	46 e2       	ldi	r20, 0x26	; 38
    19ac:	53 e0       	ldi	r21, 0x03	; 3
    19ae:	0e 94 05 08 	call	0x100a	; 0x100a <handle_read>
    19b2:	88 23       	and	r24, r24
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <CONF_enter+0xa6>
    19b6:	b8 cf       	rjmp	.-144    	; 0x1928 <CONF_enter+0x16>
					state=CONF_REPLY;
    19b8:	cb e0       	ldi	r28, 0x0B	; 11
    19ba:	bd cf       	rjmp	.-134    	; 0x1936 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    19bc:	6e ee       	ldi	r22, 0xEE	; 238
    19be:	73 e0       	ldi	r23, 0x03	; 3
    19c0:	80 e8       	ldi	r24, 0x80	; 128
    19c2:	46 e2       	ldi	r20, 0x26	; 38
    19c4:	53 e0       	ldi	r21, 0x03	; 3
    19c6:	0e 94 56 09 	call	0x12ac	; 0x12ac <handle_write>
    19ca:	88 23       	and	r24, r24
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <CONF_enter+0xbe>
    19ce:	ae cf       	rjmp	.-164    	; 0x192c <CONF_enter+0x1a>
					state=CONF_REPLY;
    19d0:	cb e0       	ldi	r28, 0x0B	; 11
    19d2:	b1 cf       	rjmp	.-158    	; 0x1936 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    19d4:	6e ee       	ldi	r22, 0xEE	; 238
    19d6:	73 e0       	ldi	r23, 0x03	; 3
    19d8:	80 e8       	ldi	r24, 0x80	; 128
    19da:	0e 94 4a 18 	call	0x3094	; 0x3094 <CONNECT>
    19de:	88 23       	and	r24, r24
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <CONF_enter+0xd2>
    19e2:	a6 cf       	rjmp	.-180    	; 0x1930 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    19e4:	c2 e0       	ldi	r28, 0x02	; 2
    19e6:	a7 cf       	rjmp	.-178    	; 0x1936 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    19e8:	6e ee       	ldi	r22, 0xEE	; 238
    19ea:	73 e0       	ldi	r23, 0x03	; 3
    19ec:	80 e8       	ldi	r24, 0x80	; 128
    19ee:	46 e2       	ldi	r20, 0x26	; 38
    19f0:	53 e0       	ldi	r21, 0x03	; 3
    19f2:	0e 94 b0 11 	call	0x2360	; 0x2360 <handle_sample>
    19f6:	88 23       	and	r24, r24
    19f8:	09 f4       	brne	.+2      	; 0x19fc <CONF_enter+0xea>
    19fa:	9c cf       	rjmp	.-200    	; 0x1934 <CONF_enter+0x22>
					state=CONF_REPLY;
    19fc:	cb e0       	ldi	r28, 0x0B	; 11
    19fe:	9b cf       	rjmp	.-202    	; 0x1936 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1a00:	66 e2       	ldi	r22, 0x26	; 38
    1a02:	73 e0       	ldi	r23, 0x03	; 3
    1a04:	80 e8       	ldi	r24, 0x80	; 128
    1a06:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1a0a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1a0c:	94 cf       	rjmp	.-216    	; 0x1936 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    1a0e:	6c e9       	ldi	r22, 0x9C	; 156
    1a10:	74 e0       	ldi	r23, 0x04	; 4
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1a18:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1a1a:	8d cf       	rjmp	.-230    	; 0x1936 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    1a1c:	66 ea       	ldi	r22, 0xA6	; 166
    1a1e:	74 e0       	ldi	r23, 0x04	; 4
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1a26:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1a28:	86 cf       	rjmp	.-244    	; 0x1936 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    1a2a:	0e 94 02 21 	call	0x4204	; 0x4204 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1a2e:	63 eb       	ldi	r22, 0xB3	; 179
    1a30:	74 e0       	ldi	r23, 0x04	; 4
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1a38:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1a3a:	7d cf       	rjmp	.-262    	; 0x1936 <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00002d9a <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    2d9a:	cf 92       	push	r12
    2d9c:	df 92       	push	r13
    2d9e:	ef 92       	push	r14
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    2da4:	6c 01       	movw	r12, r24
    2da6:	20 e8       	ldi	r18, 0x80	; 128
    2da8:	e2 2e       	mov	r14, r18
    2daa:	04 e0       	ldi	r16, 0x04	; 4
    2dac:	10 e0       	ldi	r17, 0x00	; 0
    2dae:	29 ed       	ldi	r18, 0xD9	; 217
    2db0:	34 e0       	ldi	r19, 0x04	; 4
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	8e 2d       	mov	r24, r14
    2db6:	b6 01       	movw	r22, r12
    2db8:	0e 94 03 17 	call	0x2e06	; 0x2e06 <strncmp>
    2dbc:	89 2b       	or	r24, r25
    2dbe:	c1 f0       	breq	.+48     	; 0x2df0 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    2dc0:	05 e0       	ldi	r16, 0x05	; 5
    2dc2:	10 e0       	ldi	r17, 0x00	; 0
    2dc4:	2e ed       	ldi	r18, 0xDE	; 222
    2dc6:	34 e0       	ldi	r19, 0x04	; 4
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	8e 2d       	mov	r24, r14
    2dcc:	b6 01       	movw	r22, r12
    2dce:	0e 94 03 17 	call	0x2e06	; 0x2e06 <strncmp>
    2dd2:	89 2b       	or	r24, r25
    2dd4:	79 f0       	breq	.+30     	; 0x2df4 <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    2dd6:	04 e0       	ldi	r16, 0x04	; 4
    2dd8:	10 e0       	ldi	r17, 0x00	; 0
    2dda:	24 ee       	ldi	r18, 0xE4	; 228
    2ddc:	34 e0       	ldi	r19, 0x04	; 4
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	8e 2d       	mov	r24, r14
    2de2:	b6 01       	movw	r22, r12
    2de4:	0e 94 03 17 	call	0x2e06	; 0x2e06 <strncmp>
    2de8:	89 2b       	or	r24, r25
    2dea:	31 f4       	brne	.+12     	; 0x2df8 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    2dec:	85 e0       	ldi	r24, 0x05	; 5
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    2df0:	86 e0       	ldi	r24, 0x06	; 6
    2df2:	03 c0       	rjmp	.+6      	; 0x2dfa <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    2df4:	84 e0       	ldi	r24, 0x04	; 4
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	1f 91       	pop	r17
    2dfc:	0f 91       	pop	r16
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	08 95       	ret

Disassembly of section .text.CON_RN2483:

0000165c <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    165c:	6f 92       	push	r6
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    166c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    166e:	ec 2f       	mov	r30, r28
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	e7 30       	cpi	r30, 0x07	; 7
    1674:	f1 05       	cpc	r31, r1
    1676:	d8 f7       	brcc	.-10     	; 0x166e <CON_RN2483+0x12>
    1678:	e6 5b       	subi	r30, 0xB6	; 182
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    1680:	0e 94 c2 1b 	call	0x3784	; 0x3784 <uart0_hal_init>
				rn2483_init();
    1684:	0e 94 0c 21 	call	0x4218	; 0x4218 <rn2483_init>
				LM_reset_module();
    1688:	0e 94 24 21 	call	0x4248	; 0x4248 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    168c:	69 ee       	ldi	r22, 0xE9	; 233
    168e:	74 e0       	ldi	r23, 0x04	; 4
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1696:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1698:	ea cf       	rjmp	.-44     	; 0x166e <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    169a:	0e 94 67 20 	call	0x40ce	; 0x40ce <uart1_hal_message_ready>
    169e:	88 23       	and	r24, r24
    16a0:	31 f3       	breq	.-52     	; 0x166e <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    16a2:	8e ee       	ldi	r24, 0xEE	; 238
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    16aa:	c2 e0       	ldi	r28, 0x02	; 2
    16ac:	e0 cf       	rjmp	.-64     	; 0x166e <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    16ae:	8e ee       	ldi	r24, 0xEE	; 238
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <CON_RN2483_parse>
    16b6:	c8 2f       	mov	r28, r24
			break;
    16b8:	da cf       	rjmp	.-76     	; 0x166e <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    16ba:	8e ee       	ldi	r24, 0xEE	; 238
    16bc:	93 e0       	ldi	r25, 0x03	; 3
    16be:	6c 01       	movw	r12, r24
    16c0:	20 e8       	ldi	r18, 0x80	; 128
    16c2:	e2 2e       	mov	r14, r18
    16c4:	2f 93       	push	r18
    16c6:	df 92       	push	r13
    16c8:	8f 93       	push	r24
    16ca:	8f e1       	ldi	r24, 0x1F	; 31
    16cc:	95 e0       	ldi	r25, 0x05	; 5
    16ce:	a0 e0       	ldi	r26, 0x00	; 0
    16d0:	af 93       	push	r26
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	c6 e2       	ldi	r28, 0x26	; 38
    16d8:	d3 e0       	ldi	r29, 0x03	; 3
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
				uart1_hal_send_string(cnf_reply);
    16e2:	3e 01       	movw	r6, r28
    16e4:	20 e8       	ldi	r18, 0x80	; 128
    16e6:	82 2e       	mov	r8, r18
    16e8:	88 2d       	mov	r24, r8
    16ea:	b3 01       	movw	r22, r6
    16ec:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    16f0:	ae 01       	movw	r20, r28
    16f2:	6c 2d       	mov	r22, r12
    16f4:	7d 2d       	mov	r23, r13
    16f6:	8e 2d       	mov	r24, r14
    16f8:	0e 94 27 21 	call	0x424e	; 0x424e <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    16fc:	88 2d       	mov	r24, r8
    16fe:	b3 01       	movw	r22, r6
    1700:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1704:	8d b7       	in	r24, 0x3d	; 61
    1706:	9e b7       	in	r25, 0x3e	; 62
    1708:	08 96       	adiw	r24, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	9e bf       	out	0x3e, r25	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1714:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1716:	ab cf       	rjmp	.-170    	; 0x166e <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    1718:	85 e2       	ldi	r24, 0x25	; 37
    171a:	95 e0       	ldi	r25, 0x05	; 5
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	af 93       	push	r26
    1720:	9f 93       	push	r25
    1722:	8f 93       	push	r24
    1724:	8f e1       	ldi	r24, 0x1F	; 31
    1726:	95 e0       	ldi	r25, 0x05	; 5
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	af 93       	push	r26
    172c:	9f 93       	push	r25
    172e:	8f 93       	push	r24
    1730:	c6 e2       	ldi	r28, 0x26	; 38
    1732:	d3 e0       	ldi	r29, 0x03	; 3
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
				uart1_hal_send_string(cnf_reply);
    173c:	6e 01       	movw	r12, r28
    173e:	80 e8       	ldi	r24, 0x80	; 128
    1740:	e8 2e       	mov	r14, r24
    1742:	8e 2d       	mov	r24, r14
    1744:	b6 01       	movw	r22, r12
    1746:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
    174a:	9f e7       	ldi	r25, 0x7F	; 127
    174c:	28 e3       	ldi	r18, 0x38	; 56
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	91 50       	subi	r25, 0x01	; 1
    1752:	20 40       	sbci	r18, 0x00	; 0
    1754:	80 40       	sbci	r24, 0x00	; 0
    1756:	e1 f7       	brne	.-8      	; 0x1750 <CON_RN2483+0xf4>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <CON_RN2483+0xfe>
    175a:	00 00       	nop
				_delay_ms(50);
				LM_send_break(cnf_reply);
    175c:	ce 01       	movw	r24, r28
    175e:	0e 94 2a 21 	call	0x4254	; 0x4254 <LM_send_break>
				uart1_hal_send_string(cnf_reply);
    1762:	8e 2d       	mov	r24, r14
    1764:	b6 01       	movw	r22, r12
    1766:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    176a:	8d b7       	in	r24, 0x3d	; 61
    176c:	9e b7       	in	r25, 0x3e	; 62
    176e:	08 96       	adiw	r24, 0x08	; 8
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	9e bf       	out	0x3e, r25	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	8d bf       	out	0x3d, r24	; 61
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break(cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    177a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    177c:	78 cf       	rjmp	.-272    	; 0x166e <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    177e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <uart0_hal_message_ready>
    1782:	88 23       	and	r24, r24
    1784:	29 f0       	breq	.+10     	; 0x1790 <CON_RN2483+0x134>
					uart0_hal_read_message_as_str(cnf_reply);
    1786:	86 e2       	ldi	r24, 0x26	; 38
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <uart0_hal_read_message_as_str>
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <CON_RN2483+0x146>
				}else{
					strcpy(cnf_reply, "null");
    1790:	25 e0       	ldi	r18, 0x05	; 5
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e3       	ldi	r20, 0x30	; 48
    1796:	55 e0       	ldi	r21, 0x05	; 5
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	86 e2       	ldi	r24, 0x26	; 38
    179c:	93 e0       	ldi	r25, 0x03	; 3
    179e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    17a2:	66 e2       	ldi	r22, 0x26	; 38
    17a4:	73 e0       	ldi	r23, 0x03	; 3
    17a6:	80 e8       	ldi	r24, 0x80	; 128
    17a8:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				state=CL_READ_MSG;
    17ac:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    17ae:	5f cf       	rjmp	.-322    	; 0x166e <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    17b0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    17b4:	65 e3       	ldi	r22, 0x35	; 53
    17b6:	75 e0       	ldi	r23, 0x05	; 5
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 3a 14 	call	0x2874	; 0x2874 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	8f 90       	pop	r8
    17cc:	7f 90       	pop	r7
    17ce:	6f 90       	pop	r6
    17d0:	08 95       	ret

Disassembly of section .text.CONNECT:

00003094 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	64 97       	sbiw	r28, 0x14	; 20
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    30a8:	21 e0       	ldi	r18, 0x01	; 1
    30aa:	ae 01       	movw	r20, r28
    30ac:	4f 5f       	subi	r20, 0xFF	; 255
    30ae:	5f 4f       	sbci	r21, 0xFF	; 255
    30b0:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    30b4:	88 23       	and	r24, r24
    30b6:	79 f0       	breq	.+30     	; 0x30d6 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    30b8:	be 01       	movw	r22, r28
    30ba:	6f 5f       	subi	r22, 0xFF	; 255
    30bc:	7f 4f       	sbci	r23, 0xFF	; 255
    30be:	80 e8       	ldi	r24, 0x80	; 128
    30c0:	25 e5       	ldi	r18, 0x55	; 85
    30c2:	35 e0       	ldi	r19, 0x05	; 5
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    30ca:	89 2b       	or	r24, r25
    30cc:	19 f4       	brne	.+6      	; 0x30d4 <CONNECT+0x40>
		return CON_RN2483();
    30ce:	0e 94 2e 0b 	call	0x165c	; 0x165c <CON_RN2483>
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <CONNECT+0x42>
	}else{
		return false;
    30d4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    30d6:	64 96       	adiw	r28, 0x14	; 20
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	08 95       	ret

Disassembly of section .text.read_cols:

000021e8 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    21e8:	cf 92       	push	r12
    21ea:	df 92       	push	r13
    21ec:	ef 92       	push	r14
    21ee:	ff 92       	push	r15
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	a3 97       	sbiw	r28, 0x23	; 35
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2208:	63 e2       	ldi	r22, 0x23	; 35
    220a:	ce 01       	movw	r24, r28
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 35 20 	call	0x406a	; 0x406a <EM_get_collections>
	res[0]='\0';
    2212:	f7 01       	movw	r30, r14
    2214:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    2216:	10 e0       	ldi	r17, 0x00	; 0
    2218:	35 c0       	rjmp	.+106    	; 0x2284 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    221a:	81 2f       	mov	r24, r17
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	fc 01       	movw	r30, r24
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	e8 0f       	add	r30, r24
    222a:	f9 1f       	adc	r31, r25
    222c:	21 e0       	ldi	r18, 0x01	; 1
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	2c 0f       	add	r18, r28
    2232:	3d 1f       	adc	r19, r29
    2234:	e2 0f       	add	r30, r18
    2236:	f3 1f       	adc	r31, r19
    2238:	23 81       	ldd	r18, Z+3	; 0x03
    223a:	2f 93       	push	r18
    223c:	22 81       	ldd	r18, Z+2	; 0x02
    223e:	2f 93       	push	r18
    2240:	21 81       	ldd	r18, Z+1	; 0x01
    2242:	2f 93       	push	r18
    2244:	20 81       	ld	r18, Z
    2246:	2f 93       	push	r18
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	9f 93       	push	r25
    224c:	8f 93       	push	r24
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	92 e0       	ldi	r25, 0x02	; 2
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	af 93       	push	r26
    2256:	9f 93       	push	r25
    2258:	8f 93       	push	r24
    225a:	0f 2e       	mov	r0, r31
    225c:	f6 e1       	ldi	r31, 0x16	; 22
    225e:	cf 2e       	mov	r12, r31
    2260:	f6 e0       	ldi	r31, 0x06	; 6
    2262:	df 2e       	mov	r13, r31
    2264:	f0 2d       	mov	r31, r0
    2266:	df 92       	push	r13
    2268:	cf 92       	push	r12
    226a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
		strcat(res, arg);
    226e:	a6 01       	movw	r20, r12
    2270:	60 e8       	ldi	r22, 0x80	; 128
    2272:	c7 01       	movw	r24, r14
    2274:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    2278:	1f 5f       	subi	r17, 0xFF	; 255
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	17 30       	cpi	r17, 0x07	; 7
    2286:	48 f2       	brcs	.-110    	; 0x221a <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    2288:	a3 96       	adiw	r28, 0x23	; 35
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	ff 90       	pop	r15
    229c:	ef 90       	pop	r14
    229e:	df 90       	pop	r13
    22a0:	cf 90       	pop	r12
    22a2:	08 95       	ret

Disassembly of section .text.read_time:

000027e2 <read_time>:

static void read_time(char res[]){
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <read_time+0xa>
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <read_time+0xc>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <read_time+0xe>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	18 2f       	mov	r17, r24
    27f6:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    27f8:	0e 94 12 20 	call	0x4024	; 0x4024 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2804:	88 23       	and	r24, r24
    2806:	51 f0       	breq	.+20     	; 0x281c <read_time+0x3a>
		strcpy(res, "Failed to read time");
    2808:	24 e1       	ldi	r18, 0x14	; 20
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	48 e1       	ldi	r20, 0x18	; 24
    280e:	52 e0       	ldi	r21, 0x02	; 2
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	81 2f       	mov	r24, r17
    2814:	90 2f       	mov	r25, r16
    2816:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
    281a:	21 c0       	rjmp	.+66     	; 0x285e <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    281c:	59 81       	ldd	r21, Y+1	; 0x01
    281e:	4a 81       	ldd	r20, Y+2	; 0x02
    2820:	3b 81       	ldd	r19, Y+3	; 0x03
    2822:	2c 81       	ldd	r18, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	8e 81       	ldd	r24, Y+6	; 0x06
    2828:	1f 92       	push	r1
    282a:	5f 93       	push	r21
    282c:	1f 92       	push	r1
    282e:	4f 93       	push	r20
    2830:	1f 92       	push	r1
    2832:	3f 93       	push	r19
    2834:	1f 92       	push	r1
    2836:	2f 93       	push	r18
    2838:	1f 92       	push	r1
    283a:	9f 93       	push	r25
    283c:	1f 92       	push	r1
    283e:	8f 93       	push	r24
    2840:	8c e2       	ldi	r24, 0x2C	; 44
    2842:	92 e0       	ldi	r25, 0x02	; 2
    2844:	a0 e0       	ldi	r26, 0x00	; 0
    2846:	af 93       	push	r26
    2848:	9f 93       	push	r25
    284a:	8f 93       	push	r24
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
	}
}
    285e:	26 96       	adiw	r28, 0x06	; 6
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	08 95       	ret

Disassembly of section .text.write_deveui:

000029f4 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2a02:	22 e0       	ldi	r18, 0x02	; 2
    2a04:	46 e1       	ldi	r20, 0x16	; 22
    2a06:	56 e0       	ldi	r21, 0x06	; 6
    2a08:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    2a0c:	c8 2f       	mov	r28, r24
    2a0e:	88 23       	and	r24, r24
    2a10:	29 f1       	breq	.+74     	; 0x2a5c <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    2a12:	86 e1       	ldi	r24, 0x16	; 22
    2a14:	96 e0       	ldi	r25, 0x06	; 6
    2a16:	6c 01       	movw	r12, r24
    2a18:	20 e8       	ldi	r18, 0x80	; 128
    2a1a:	e2 2e       	mov	r14, r18
    2a1c:	8e 2d       	mov	r24, r14
    2a1e:	b6 01       	movw	r22, r12
    2a20:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2a24:	40 97       	sbiw	r24, 0x10	; 16
    2a26:	c9 f4       	brne	.+50     	; 0x2a5a <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2a28:	8e 2d       	mov	r24, r14
    2a2a:	b6 01       	movw	r22, r12
    2a2c:	0e 94 1c 1c 	call	0x3838	; 0x3838 <EM_set_deveui>
    2a30:	c8 2f       	mov	r28, r24
    2a32:	81 11       	cpse	r24, r1
    2a34:	09 c0       	rjmp	.+18     	; 0x2a48 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    2a36:	27 e0       	ldi	r18, 0x07	; 7
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	4a e4       	ldi	r20, 0x4A	; 74
    2a3c:	52 e0       	ldi	r21, 0x02	; 2
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	c8 01       	movw	r24, r16
    2a42:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return false;
    2a46:	0a c0       	rjmp	.+20     	; 0x2a5c <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2a48:	28 e0       	ldi	r18, 0x08	; 8
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	41 e5       	ldi	r20, 0x51	; 81
    2a4e:	52 e0       	ldi	r21, 0x02	; 2
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	c8 01       	movw	r24, r16
    2a54:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2a5a:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2a5c:	8c 2f       	mov	r24, r28
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ef 90       	pop	r14
    2a66:	df 90       	pop	r13
    2a68:	cf 90       	pop	r12
    2a6a:	08 95       	ret

Disassembly of section .text.write_appeui:

00002a6c <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2a7a:	22 e0       	ldi	r18, 0x02	; 2
    2a7c:	46 e1       	ldi	r20, 0x16	; 22
    2a7e:	56 e0       	ldi	r21, 0x06	; 6
    2a80:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    2a84:	c8 2f       	mov	r28, r24
    2a86:	88 23       	and	r24, r24
    2a88:	29 f1       	breq	.+74     	; 0x2ad4 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    2a8a:	86 e1       	ldi	r24, 0x16	; 22
    2a8c:	96 e0       	ldi	r25, 0x06	; 6
    2a8e:	6c 01       	movw	r12, r24
    2a90:	20 e8       	ldi	r18, 0x80	; 128
    2a92:	e2 2e       	mov	r14, r18
    2a94:	8e 2d       	mov	r24, r14
    2a96:	b6 01       	movw	r22, r12
    2a98:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2a9c:	40 97       	sbiw	r24, 0x10	; 16
    2a9e:	c9 f4       	brne	.+50     	; 0x2ad2 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    2aa0:	8e 2d       	mov	r24, r14
    2aa2:	b6 01       	movw	r22, r12
    2aa4:	0e 94 39 1c 	call	0x3872	; 0x3872 <EM_set_appeui>
    2aa8:	c8 2f       	mov	r28, r24
    2aaa:	81 11       	cpse	r24, r1
    2aac:	09 c0       	rjmp	.+18     	; 0x2ac0 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    2aae:	27 e0       	ldi	r18, 0x07	; 7
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e4       	ldi	r20, 0x4A	; 74
    2ab4:	52 e0       	ldi	r21, 0x02	; 2
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	c8 01       	movw	r24, r16
    2aba:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return false;
    2abe:	0a c0       	rjmp	.+20     	; 0x2ad4 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2ac0:	28 e0       	ldi	r18, 0x08	; 8
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	41 e5       	ldi	r20, 0x51	; 81
    2ac6:	52 e0       	ldi	r21, 0x02	; 2
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2ad2:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2ad4:	8c 2f       	mov	r24, r28
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	ef 90       	pop	r14
    2ade:	df 90       	pop	r13
    2ae0:	cf 90       	pop	r12
    2ae2:	08 95       	ret

Disassembly of section .text.write_appkey:

00002ae4 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    2ae4:	cf 92       	push	r12
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2af2:	22 e0       	ldi	r18, 0x02	; 2
    2af4:	46 e1       	ldi	r20, 0x16	; 22
    2af6:	56 e0       	ldi	r21, 0x06	; 6
    2af8:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    2afc:	c8 2f       	mov	r28, r24
    2afe:	88 23       	and	r24, r24
    2b00:	29 f1       	breq	.+74     	; 0x2b4c <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    2b02:	86 e1       	ldi	r24, 0x16	; 22
    2b04:	96 e0       	ldi	r25, 0x06	; 6
    2b06:	6c 01       	movw	r12, r24
    2b08:	20 e8       	ldi	r18, 0x80	; 128
    2b0a:	e2 2e       	mov	r14, r18
    2b0c:	8e 2d       	mov	r24, r14
    2b0e:	b6 01       	movw	r22, r12
    2b10:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2b14:	80 97       	sbiw	r24, 0x20	; 32
    2b16:	c9 f4       	brne	.+50     	; 0x2b4a <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2b18:	8e 2d       	mov	r24, r14
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <EM_set_appkey>
    2b20:	c8 2f       	mov	r28, r24
    2b22:	81 11       	cpse	r24, r1
    2b24:	09 c0       	rjmp	.+18     	; 0x2b38 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2b26:	27 e0       	ldi	r18, 0x07	; 7
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a e4       	ldi	r20, 0x4A	; 74
    2b2c:	52 e0       	ldi	r21, 0x02	; 2
    2b2e:	60 e0       	ldi	r22, 0x00	; 0
    2b30:	c8 01       	movw	r24, r16
    2b32:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return false;
    2b36:	0a c0       	rjmp	.+20     	; 0x2b4c <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2b38:	28 e0       	ldi	r18, 0x08	; 8
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	41 e5       	ldi	r20, 0x51	; 81
    2b3e:	52 e0       	ldi	r21, 0x02	; 2
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	c8 01       	movw	r24, r16
    2b44:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    2b4a:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2b4c:	8c 2f       	mov	r24, r28
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ef 90       	pop	r14
    2b56:	df 90       	pop	r13
    2b58:	cf 90       	pop	r12
    2b5a:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

000032c0 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    32c8:	22 e0       	ldi	r18, 0x02	; 2
    32ca:	46 e1       	ldi	r20, 0x16	; 22
    32cc:	56 e0       	ldi	r21, 0x06	; 6
    32ce:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    32d2:	c8 2f       	mov	r28, r24
    32d4:	88 23       	and	r24, r24
    32d6:	a9 f0       	breq	.+42     	; 0x3302 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    32d8:	86 e1       	ldi	r24, 0x16	; 22
    32da:	96 e0       	ldi	r25, 0x06	; 6
    32dc:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <is_float>
    32e0:	c8 2f       	mov	r28, r24
    32e2:	88 23       	and	r24, r24
    32e4:	71 f0       	breq	.+28     	; 0x3302 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    32e6:	86 e1       	ldi	r24, 0x16	; 22
    32e8:	96 e0       	ldi	r25, 0x06	; 6
    32ea:	0e 94 13 19 	call	0x3226	; 0x3226 <str2flaot>
	EM_set_ppmfactor(val);
    32ee:	0e 94 75 20 	call	0x40ea	; 0x40ea <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    32f2:	28 e0       	ldi	r18, 0x08	; 8
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	41 e5       	ldi	r20, 0x51	; 81
    32f8:	52 e0       	ldi	r21, 0x02	; 2
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	c8 01       	movw	r24, r16
    32fe:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
}
    3302:	8c 2f       	mov	r24, r28
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	0f 91       	pop	r16
    330a:	08 95       	ret

Disassembly of section .text.write_RRL:

0000330c <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3314:	22 e0       	ldi	r18, 0x02	; 2
    3316:	46 e1       	ldi	r20, 0x16	; 22
    3318:	56 e0       	ldi	r21, 0x06	; 6
    331a:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    331e:	c8 2f       	mov	r28, r24
    3320:	88 23       	and	r24, r24
    3322:	a9 f0       	breq	.+42     	; 0x334e <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    3324:	86 e1       	ldi	r24, 0x16	; 22
    3326:	96 e0       	ldi	r25, 0x06	; 6
    3328:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <is_float>
    332c:	c8 2f       	mov	r28, r24
    332e:	88 23       	and	r24, r24
    3330:	71 f0       	breq	.+28     	; 0x334e <write_RRL+0x42>
	
	float val=str2flaot(arg);
    3332:	86 e1       	ldi	r24, 0x16	; 22
    3334:	96 e0       	ldi	r25, 0x06	; 6
    3336:	0e 94 13 19 	call	0x3226	; 0x3226 <str2flaot>
	EM_set_RRL(val);
    333a:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    333e:	28 e0       	ldi	r18, 0x08	; 8
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	41 e5       	ldi	r20, 0x51	; 81
    3344:	52 e0       	ldi	r21, 0x02	; 2
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	c8 01       	movw	r24, r16
    334a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
}
    334e:	8c 2f       	mov	r24, r28
    3350:	cf 91       	pop	r28
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	08 95       	ret

Disassembly of section .text.write_VCC:

00003358 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	cf 93       	push	r28
    335e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3360:	22 e0       	ldi	r18, 0x02	; 2
    3362:	46 e1       	ldi	r20, 0x16	; 22
    3364:	56 e0       	ldi	r21, 0x06	; 6
    3366:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    336a:	c8 2f       	mov	r28, r24
    336c:	88 23       	and	r24, r24
    336e:	a9 f0       	breq	.+42     	; 0x339a <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    3370:	86 e1       	ldi	r24, 0x16	; 22
    3372:	96 e0       	ldi	r25, 0x06	; 6
    3374:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <is_float>
    3378:	c8 2f       	mov	r28, r24
    337a:	88 23       	and	r24, r24
    337c:	71 f0       	breq	.+28     	; 0x339a <write_VCC+0x42>
	
	float val=str2flaot(arg);
    337e:	86 e1       	ldi	r24, 0x16	; 22
    3380:	96 e0       	ldi	r25, 0x06	; 6
    3382:	0e 94 13 19 	call	0x3226	; 0x3226 <str2flaot>
	EM_set_Vcc(val);
    3386:	0e 94 83 20 	call	0x4106	; 0x4106 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    338a:	28 e0       	ldi	r18, 0x08	; 8
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	41 e5       	ldi	r20, 0x51	; 81
    3390:	52 e0       	ldi	r21, 0x02	; 2
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	c8 01       	movw	r24, r16
    3396:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
}
    339a:	8c 2f       	mov	r24, r28
    339c:	cf 91       	pop	r28
    339e:	1f 91       	pop	r17
    33a0:	0f 91       	pop	r16
    33a2:	08 95       	ret

Disassembly of section .text.get_time_par:

00003a30 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    3a30:	cf 93       	push	r28
    3a32:	df 93       	push	r29
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <get_time_par+0x6>
    3a36:	1f 92       	push	r1
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	e6 0f       	add	r30, r22
    3a40:	f1 1d       	adc	r31, r1
    3a42:	80 81       	ld	r24, Z
    3a44:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    3a46:	81 81       	ldd	r24, Z+1	; 0x01
    3a48:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    3a4a:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    3a4c:	be 01       	movw	r22, r28
    3a4e:	6f 5f       	subi	r22, 0xFF	; 255
    3a50:	7f 4f       	sbci	r23, 0xFF	; 255
    3a52:	80 e8       	ldi	r24, 0x80	; 128
    3a54:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
}
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	08 95       	ret

Disassembly of section .text.write_cols:

00001a40 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1a40:	4f 92       	push	r4
    1a42:	5f 92       	push	r5
    1a44:	6f 92       	push	r6
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	a3 97       	sbiw	r28, 0x23	; 35
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	3b 01       	movw	r6, r22
    1a70:	88 2e       	mov	r8, r24
    1a72:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    1a74:	22 e0       	ldi	r18, 0x02	; 2
    1a76:	46 e1       	ldi	r20, 0x16	; 22
    1a78:	56 e0       	ldi	r21, 0x06	; 6
    1a7a:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    1a7e:	18 2f       	mov	r17, r24
    1a80:	88 23       	and	r24, r24
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <write_cols+0x46>
    1a84:	5d c0       	rjmp	.+186    	; 0x1b40 <write_cols+0x100>
	index=atoi(arg);
    1a86:	86 e1       	ldi	r24, 0x16	; 22
    1a88:	96 e0       	ldi	r25, 0x06	; 6
    1a8a:	6c 01       	movw	r12, r24
    1a8c:	20 e8       	ldi	r18, 0x80	; 128
    1a8e:	e2 2e       	mov	r14, r18
    1a90:	8e 2d       	mov	r24, r14
    1a92:	b6 01       	movw	r22, r12
    1a94:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
	if(index<1 || index>7) return false;
    1a98:	0f ef       	ldi	r16, 0xFF	; 255
    1a9a:	08 0f       	add	r16, r24
    1a9c:	07 30       	cpi	r16, 0x07	; 7
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <write_cols+0x62>
    1aa0:	4a c0       	rjmp	.+148    	; 0x1b36 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    1aa2:	23 e0       	ldi	r18, 0x03	; 3
    1aa4:	46 e1       	ldi	r20, 0x16	; 22
    1aa6:	56 e0       	ldi	r21, 0x06	; 6
    1aa8:	88 2d       	mov	r24, r8
    1aaa:	b3 01       	movw	r22, r6
    1aac:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    1ab0:	18 2f       	mov	r17, r24
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <write_cols+0x78>
    1ab6:	44 c0       	rjmp	.+136    	; 0x1b40 <write_cols+0x100>
	samplings=atoi(arg);
    1ab8:	8e 2d       	mov	r24, r14
    1aba:	b6 01       	movw	r22, r12
    1abc:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
    1ac0:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1ac2:	02 97       	sbiw	r24, 0x02	; 2
    1ac4:	8b 32       	cpi	r24, 0x2B	; 43
    1ac6:	91 40       	sbci	r25, 0x01	; 1
    1ac8:	c0 f5       	brcc	.+112    	; 0x1b3a <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1aca:	24 e0       	ldi	r18, 0x04	; 4
    1acc:	46 e1       	ldi	r20, 0x16	; 22
    1ace:	56 e0       	ldi	r21, 0x06	; 6
    1ad0:	88 2d       	mov	r24, r8
    1ad2:	b3 01       	movw	r22, r6
    1ad4:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    1ad8:	18 2f       	mov	r17, r24
    1ada:	88 23       	and	r24, r24
    1adc:	89 f1       	breq	.+98     	; 0x1b40 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1ade:	8e 2d       	mov	r24, r14
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
    1ae6:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1ae8:	02 97       	sbiw	r24, 0x02	; 2
    1aea:	87 35       	cpi	r24, 0x57	; 87
    1aec:	92 40       	sbci	r25, 0x02	; 2
    1aee:	38 f5       	brcc	.+78     	; 0x1b3e <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1af0:	63 e2       	ldi	r22, 0x23	; 35
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	7c 01       	movw	r14, r24
    1af8:	0e 94 35 20 	call	0x406a	; 0x406a <EM_get_collections>
	
	cols[index].samplings=samplings;
    1afc:	80 2f       	mov	r24, r16
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	fc 01       	movw	r30, r24
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e8 0f       	add	r30, r24
    1b0c:	f9 1f       	adc	r31, r25
    1b0e:	ee 0d       	add	r30, r14
    1b10:	ff 1d       	adc	r31, r15
    1b12:	51 82       	std	Z+1, r5	; 0x01
    1b14:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1b16:	d3 82       	std	Z+3, r13	; 0x03
    1b18:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	80 e8       	ldi	r24, 0x80	; 128
    1b1e:	43 e2       	ldi	r20, 0x23	; 35
    1b20:	0e 94 8a 20 	call	0x4114	; 0x4114 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1b24:	28 e0       	ldi	r18, 0x08	; 8
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	41 e5       	ldi	r20, 0x51	; 81
    1b2a:	52 e0       	ldi	r21, 0x02	; 2
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	c5 01       	movw	r24, r10
    1b30:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;	
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    1b3a:	10 e0       	ldi	r17, 0x00	; 0
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1b40:	81 2f       	mov	r24, r17
    1b42:	a3 96       	adiw	r28, 0x23	; 35
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	bf 90       	pop	r11
    1b60:	af 90       	pop	r10
    1b62:	8f 90       	pop	r8
    1b64:	7f 90       	pop	r7
    1b66:	6f 90       	pop	r6
    1b68:	5f 90       	pop	r5
    1b6a:	4f 90       	pop	r4
    1b6c:	08 95       	ret

Disassembly of section .text.write_heat_up:

000033a4 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    33ac:	22 e0       	ldi	r18, 0x02	; 2
    33ae:	46 e1       	ldi	r20, 0x16	; 22
    33b0:	56 e0       	ldi	r21, 0x06	; 6
    33b2:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    33b6:	c8 2f       	mov	r28, r24
    33b8:	88 23       	and	r24, r24
    33ba:	a9 f0       	breq	.+42     	; 0x33e6 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    33bc:	66 e1       	ldi	r22, 0x16	; 22
    33be:	76 e0       	ldi	r23, 0x06	; 6
    33c0:	80 e8       	ldi	r24, 0x80	; 128
    33c2:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
	
	if(val<1 || val>200) return false;
    33c6:	9f ef       	ldi	r25, 0xFF	; 255
    33c8:	98 0f       	add	r25, r24
    33ca:	98 3c       	cpi	r25, 0xC8	; 200
    33cc:	58 f4       	brcc	.+22     	; 0x33e4 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    33ce:	0e 94 c2 20 	call	0x4184	; 0x4184 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    33d2:	28 e0       	ldi	r18, 0x08	; 8
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	41 e5       	ldi	r20, 0x51	; 81
    33d8:	52 e0       	ldi	r21, 0x02	; 2
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	c8 01       	movw	r24, r16
    33de:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    33e4:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    33e6:	8c 2f       	mov	r24, r28
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	08 95       	ret

Disassembly of section .text.write_air_pump:

0000313a <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3142:	22 e0       	ldi	r18, 0x02	; 2
    3144:	46 e1       	ldi	r20, 0x16	; 22
    3146:	56 e0       	ldi	r21, 0x06	; 6
    3148:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    314c:	c8 2f       	mov	r28, r24
    314e:	88 23       	and	r24, r24
    3150:	b9 f0       	breq	.+46     	; 0x3180 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    3152:	66 e1       	ldi	r22, 0x16	; 22
    3154:	76 e0       	ldi	r23, 0x06	; 6
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
	
	if(val<5 || val>1000) return false;
    315c:	9c 01       	movw	r18, r24
    315e:	25 50       	subi	r18, 0x05	; 5
    3160:	31 09       	sbc	r19, r1
    3162:	24 3e       	cpi	r18, 0xE4	; 228
    3164:	33 40       	sbci	r19, 0x03	; 3
    3166:	58 f4       	brcc	.+22     	; 0x317e <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    3168:	0e 94 ce 20 	call	0x419c	; 0x419c <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    316c:	28 e0       	ldi	r18, 0x08	; 8
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	41 e5       	ldi	r20, 0x51	; 81
    3172:	52 e0       	ldi	r21, 0x02	; 2
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	c8 01       	movw	r24, r16
    3178:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    317e:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3180:	8c 2f       	mov	r24, r28
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000033f0 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    33f8:	22 e0       	ldi	r18, 0x02	; 2
    33fa:	46 e1       	ldi	r20, 0x16	; 22
    33fc:	56 e0       	ldi	r21, 0x06	; 6
    33fe:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    3402:	c8 2f       	mov	r28, r24
    3404:	88 23       	and	r24, r24
    3406:	a9 f0       	breq	.+42     	; 0x3432 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    3408:	66 e1       	ldi	r22, 0x16	; 22
    340a:	76 e0       	ldi	r23, 0x06	; 6
    340c:	80 e8       	ldi	r24, 0x80	; 128
    340e:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
	
	if(val<6 || val>24) return false;
    3412:	9a ef       	ldi	r25, 0xFA	; 250
    3414:	98 0f       	add	r25, r24
    3416:	93 31       	cpi	r25, 0x13	; 19
    3418:	58 f4       	brcc	.+22     	; 0x3430 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    341a:	0e 94 da 20 	call	0x41b4	; 0x41b4 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    341e:	28 e0       	ldi	r18, 0x08	; 8
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	41 e5       	ldi	r20, 0x51	; 81
    3424:	52 e0       	ldi	r21, 0x02	; 2
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	c8 01       	movw	r24, r16
    342a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    3430:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3432:	8c 2f       	mov	r24, r28
    3434:	cf 91       	pop	r28
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	08 95       	ret

Disassembly of section .text.write_reset:

00001e86 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	a3 97       	sbiw	r28, 0x23	; 35
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    1ea0:	69 e5       	ldi	r22, 0x59	; 89
    1ea2:	72 e0       	ldi	r23, 0x02	; 2
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    1eaa:	69 e5       	ldi	r22, 0x59	; 89
    1eac:	72 e0       	ldi	r23, 0x02	; 2
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	0e 94 39 1c 	call	0x3872	; 0x3872 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1eb4:	6a e6       	ldi	r22, 0x6A	; 106
    1eb6:	72 e0       	ldi	r23, 0x02	; 2
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 56 1c 	call	0x38ac	; 0x38ac <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	80 e8       	ldi	r24, 0x80	; 128
    1ec4:	9f e3       	ldi	r25, 0x3F	; 63
    1ec6:	0e 94 75 20 	call	0x40ea	; 0x40ea <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	70 e4       	ldi	r23, 0x40	; 64
    1ece:	8c e1       	ldi	r24, 0x1C	; 28
    1ed0:	95 e4       	ldi	r25, 0x45	; 69
    1ed2:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <EM_set_RRL>
	EM_set_Vcc(5.00);
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	80 ea       	ldi	r24, 0xA0	; 160
    1edc:	90 e4       	ldi	r25, 0x40	; 64
    1ede:	0e 94 83 20 	call	0x4106	; 0x4106 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	0e 94 c2 20 	call	0x4184	; 0x4184 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    1ee8:	85 e0       	ldi	r24, 0x05	; 5
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 ce 20 	call	0x419c	; 0x419c <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	0e 94 da 20 	call	0x41b4	; 0x41b4 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	1a c0       	rjmp	.+52     	; 0x1f2e <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1efa:	e8 2f       	mov	r30, r24
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	9f 01       	movw	r18, r30
    1f00:	22 0f       	add	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	22 0f       	add	r18, r18
    1f06:	33 1f       	adc	r19, r19
    1f08:	e2 0f       	add	r30, r18
    1f0a:	f3 1f       	adc	r31, r19
    1f0c:	21 e0       	ldi	r18, 0x01	; 1
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	2c 0f       	add	r18, r28
    1f12:	3d 1f       	adc	r19, r29
    1f14:	e2 0f       	add	r30, r18
    1f16:	f3 1f       	adc	r31, r19
    1f18:	92 e0       	ldi	r25, 0x02	; 2
    1f1a:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1f1c:	22 e0       	ldi	r18, 0x02	; 2
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	31 83       	std	Z+1, r19	; 0x01
    1f22:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    1f24:	23 e0       	ldi	r18, 0x03	; 3
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	33 83       	std	Z+3, r19	; 0x03
    1f2a:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	87 30       	cpi	r24, 0x07	; 7
    1f30:	20 f3       	brcs	.-56     	; 0x1efa <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1f32:	be 01       	movw	r22, r28
    1f34:	6f 5f       	subi	r22, 0xFF	; 255
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	80 e8       	ldi	r24, 0x80	; 128
    1f3a:	43 e2       	ldi	r20, 0x23	; 35
    1f3c:	0e 94 8a 20 	call	0x4114	; 0x4114 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1f40:	23 e1       	ldi	r18, 0x13	; 19
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4b e8       	ldi	r20, 0x8B	; 139
    1f46:	52 e0       	ldi	r21, 0x02	; 2
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
}
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	a3 96       	adiw	r28, 0x23	; 35
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

Disassembly of section .text.write_time:

00001d88 <write_time>:

static bool write_time(const char cmd[], char res[]){
    1d88:	6f 92       	push	r6
    1d8a:	7f 92       	push	r7
    1d8c:	8f 92       	push	r8
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <write_time+0x16>
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <write_time+0x18>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <write_time+0x1a>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	3b 01       	movw	r6, r22
    1da8:	88 2e       	mov	r8, r24
    1daa:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    1dac:	0e 94 12 20 	call	0x4024	; 0x4024 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    1db0:	22 e0       	ldi	r18, 0x02	; 2
    1db2:	46 e1       	ldi	r20, 0x16	; 22
    1db4:	56 e0       	ldi	r21, 0x06	; 6
    1db6:	88 2d       	mov	r24, r8
    1db8:	b3 01       	movw	r22, r6
    1dba:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    1dbe:	18 2f       	mov	r17, r24
    1dc0:	88 23       	and	r24, r24
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <write_time+0x3e>
    1dc4:	4e c0       	rjmp	.+156    	; 0x1e62 <write_time+0xda>
	if(strlen(arg)!=17){
    1dc6:	66 e1       	ldi	r22, 0x16	; 22
    1dc8:	76 e0       	ldi	r23, 0x06	; 6
    1dca:	80 e8       	ldi	r24, 0x80	; 128
    1dcc:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    1dd0:	41 97       	sbiw	r24, 0x11	; 17
    1dd2:	49 f0       	breq	.+18     	; 0x1de6 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    1dd4:	25 e2       	ldi	r18, 0x25	; 37
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4e e9       	ldi	r20, 0x9E	; 158
    1dda:	52 e0       	ldi	r21, 0x02	; 2
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	c7 01       	movw	r24, r14
    1de0:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    1de4:	3e c0       	rjmp	.+124    	; 0x1e62 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	86 e1       	ldi	r24, 0x16	; 22
    1dea:	96 e0       	ldi	r25, 0x06	; 6
    1dec:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <get_time_par>
    1df0:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    1df2:	63 e0       	ldi	r22, 0x03	; 3
    1df4:	86 e1       	ldi	r24, 0x16	; 22
    1df6:	96 e0       	ldi	r25, 0x06	; 6
    1df8:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <get_time_par>
    1dfc:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	86 e1       	ldi	r24, 0x16	; 22
    1e02:	96 e0       	ldi	r25, 0x06	; 6
    1e04:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <get_time_par>
    1e08:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    1e0a:	69 e0       	ldi	r22, 0x09	; 9
    1e0c:	86 e1       	ldi	r24, 0x16	; 22
    1e0e:	96 e0       	ldi	r25, 0x06	; 6
    1e10:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <get_time_par>
    1e14:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    1e16:	6c e0       	ldi	r22, 0x0C	; 12
    1e18:	86 e1       	ldi	r24, 0x16	; 22
    1e1a:	96 e0       	ldi	r25, 0x06	; 6
    1e1c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <get_time_par>
    1e20:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    1e22:	6f e0       	ldi	r22, 0x0F	; 15
    1e24:	86 e1       	ldi	r24, 0x16	; 22
    1e26:	96 e0       	ldi	r25, 0x06	; 6
    1e28:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	5d 2d       	mov	r21, r13
    1e30:	60 2f       	mov	r22, r16
    1e32:	76 2d       	mov	r23, r6
    1e34:	87 2d       	mov	r24, r7
    1e36:	98 2d       	mov	r25, r8
    1e38:	0e 94 38 17 	call	0x2e70	; 0x2e70 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    1e3c:	88 23       	and	r24, r24
    1e3e:	49 f0       	breq	.+18     	; 0x1e52 <write_time+0xca>
		strcpy(res, "Failed to set time");
    1e40:	23 e1       	ldi	r18, 0x13	; 19
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	43 ec       	ldi	r20, 0xC3	; 195
    1e46:	52 e0       	ldi	r21, 0x02	; 2
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	c7 01       	movw	r24, r14
    1e4c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    1e50:	08 c0       	rjmp	.+16     	; 0x1e62 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    1e52:	28 e0       	ldi	r18, 0x08	; 8
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	41 e5       	ldi	r20, 0x51	; 81
    1e58:	52 e0       	ldi	r21, 0x02	; 2
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	c7 01       	movw	r24, r14
    1e5e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
	return true;
}
    1e62:	81 2f       	mov	r24, r17
    1e64:	26 96       	adiw	r28, 0x06	; 6
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	8f 90       	pop	r8
    1e80:	7f 90       	pop	r7
    1e82:	6f 90       	pop	r6
    1e84:	08 95       	ret

Disassembly of section .text.handle_read:

0000100a <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	68 97       	sbiw	r28, 0x18	; 24
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	6b 01       	movw	r12, r22
    102c:	e8 2e       	mov	r14, r24
    102e:	f4 2e       	mov	r15, r20
    1030:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	ae 01       	movw	r20, r28
    1036:	4f 5f       	subi	r20, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    103e:	18 2f       	mov	r17, r24
    1040:	88 23       	and	r24, r24
    1042:	09 f4       	brne	.+2      	; 0x1046 <handle_read+0x3c>
    1044:	23 c1       	rjmp	.+582    	; 0x128c <__stack+0x18d>
    1046:	8e 2d       	mov	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <count_parameters>
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	09 f4       	brne	.+2      	; 0x1054 <handle_read+0x4a>
    1052:	1b c1       	rjmp	.+566    	; 0x128a <__stack+0x18b>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	6c 01       	movw	r12, r24
    105a:	20 e8       	ldi	r18, 0x80	; 128
    105c:	e2 2e       	mov	r14, r18
    105e:	26 ed       	ldi	r18, 0xD6	; 214
    1060:	32 e0       	ldi	r19, 0x02	; 2
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	8e 2d       	mov	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    106c:	89 2b       	or	r24, r25
    106e:	29 f4       	brne	.+10     	; 0x107a <handle_read+0x70>
	{
		EM_get_deveui(res);
    1070:	8f 2d       	mov	r24, r15
    1072:	90 2f       	mov	r25, r16
    1074:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <EM_get_deveui>
    1078:	09 c1       	rjmp	.+530    	; 0x128c <__stack+0x18d>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    107a:	2d ed       	ldi	r18, 0xDD	; 221
    107c:	32 e0       	ldi	r19, 0x02	; 2
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	8e 2d       	mov	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1088:	89 2b       	or	r24, r25
    108a:	29 f4       	brne	.+10     	; 0x1096 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    108c:	8f 2d       	mov	r24, r15
    108e:	90 2f       	mov	r25, r16
    1090:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <EM_get_appeui>
    1094:	fb c0       	rjmp	.+502    	; 0x128c <__stack+0x18d>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    1096:	24 ee       	ldi	r18, 0xE4	; 228
    1098:	32 e0       	ldi	r19, 0x02	; 2
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	8e 2d       	mov	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    10a4:	89 2b       	or	r24, r25
    10a6:	29 f4       	brne	.+10     	; 0x10b2 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    10a8:	8f 2d       	mov	r24, r15
    10aa:	90 2f       	mov	r25, r16
    10ac:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <EM_get_appkey>
    10b0:	ed c0       	rjmp	.+474    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    10b2:	2b ee       	ldi	r18, 0xEB	; 235
    10b4:	32 e0       	ldi	r19, 0x02	; 2
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	8e 2d       	mov	r24, r14
    10ba:	b6 01       	movw	r22, r12
    10bc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    10c0:	89 2b       	or	r24, r25
    10c2:	e1 f4       	brne	.+56     	; 0x10fc <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    10c4:	ce 01       	movw	r24, r28
    10c6:	45 96       	adiw	r24, 0x15	; 21
    10c8:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    10cc:	88 8d       	ldd	r24, Y+24	; 0x18
    10ce:	8f 93       	push	r24
    10d0:	8f 89       	ldd	r24, Y+23	; 0x17
    10d2:	8f 93       	push	r24
    10d4:	8e 89       	ldd	r24, Y+22	; 0x16
    10d6:	8f 93       	push	r24
    10d8:	8d 89       	ldd	r24, Y+21	; 0x15
    10da:	8f 93       	push	r24
    10dc:	80 ef       	ldi	r24, 0xF0	; 240
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	af 93       	push	r26
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	0f 93       	push	r16
    10ea:	ff 92       	push	r15
    10ec:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	c8 c0       	rjmp	.+400    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_RRL)==0)
    10fc:	25 ef       	ldi	r18, 0xF5	; 245
    10fe:	32 e0       	ldi	r19, 0x02	; 2
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	8e 2d       	mov	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    110a:	89 2b       	or	r24, r25
    110c:	e1 f4       	brne	.+56     	; 0x1146 <__stack+0x47>
	{
		EM_get_RRL(&val);
    110e:	ce 01       	movw	r24, r28
    1110:	45 96       	adiw	r24, 0x15	; 21
    1112:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1116:	88 8d       	ldd	r24, Y+24	; 0x18
    1118:	8f 93       	push	r24
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	8f 93       	push	r24
    111e:	8e 89       	ldd	r24, Y+22	; 0x16
    1120:	8f 93       	push	r24
    1122:	8d 89       	ldd	r24, Y+21	; 0x15
    1124:	8f 93       	push	r24
    1126:	80 ef       	ldi	r24, 0xF0	; 240
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	af 93       	push	r26
    112e:	9f 93       	push	r25
    1130:	8f 93       	push	r24
    1132:	0f 93       	push	r16
    1134:	ff 92       	push	r15
    1136:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	a3 c0       	rjmp	.+326    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_VCC)==0)
    1146:	2a ef       	ldi	r18, 0xFA	; 250
    1148:	32 e0       	ldi	r19, 0x02	; 2
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	8e 2d       	mov	r24, r14
    114e:	b6 01       	movw	r22, r12
    1150:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1154:	89 2b       	or	r24, r25
    1156:	e1 f4       	brne	.+56     	; 0x1190 <__stack+0x91>
	{
		EM_get_Vcc(&val);
    1158:	ce 01       	movw	r24, r28
    115a:	45 96       	adiw	r24, 0x15	; 21
    115c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1160:	88 8d       	ldd	r24, Y+24	; 0x18
    1162:	8f 93       	push	r24
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	8f 93       	push	r24
    1168:	8e 89       	ldd	r24, Y+22	; 0x16
    116a:	8f 93       	push	r24
    116c:	8d 89       	ldd	r24, Y+21	; 0x15
    116e:	8f 93       	push	r24
    1170:	80 ef       	ldi	r24, 0xF0	; 240
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	af 93       	push	r26
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	0f 93       	push	r16
    117e:	ff 92       	push	r15
    1180:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	7e c0       	rjmp	.+252    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_COLS)==0)
    1190:	2f ef       	ldi	r18, 0xFF	; 255
    1192:	32 e0       	ldi	r19, 0x02	; 2
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	8e 2d       	mov	r24, r14
    1198:	b6 01       	movw	r22, r12
    119a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    119e:	89 2b       	or	r24, r25
    11a0:	29 f4       	brne	.+10     	; 0x11ac <__stack+0xad>
	{
		read_cols(res);
    11a2:	8f 2d       	mov	r24, r15
    11a4:	90 2f       	mov	r25, r16
    11a6:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <read_cols>
    11aa:	70 c0       	rjmp	.+224    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    11ac:	24 e0       	ldi	r18, 0x04	; 4
    11ae:	33 e0       	ldi	r19, 0x03	; 3
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	8e 2d       	mov	r24, r14
    11b4:	b6 01       	movw	r22, r12
    11b6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    11ba:	89 2b       	or	r24, r25
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <__stack+0xe7>
	{
		uint8_t val=EM_get_heat_up_time();
    11be:	0e 94 c8 20 	call	0x4190	; 0x4190 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    11c2:	1f 92       	push	r1
    11c4:	8f 93       	push	r24
    11c6:	8e e0       	ldi	r24, 0x0E	; 14
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	af 93       	push	r26
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	0f 93       	push	r16
    11d4:	ff 92       	push	r15
    11d6:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	53 c0       	rjmp	.+166    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    11e6:	20 e2       	ldi	r18, 0x20	; 32
    11e8:	33 e0       	ldi	r19, 0x03	; 3
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	8e 2d       	mov	r24, r14
    11ee:	b6 01       	movw	r22, r12
    11f0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    11f4:	89 2b       	or	r24, r25
    11f6:	a1 f4       	brne	.+40     	; 0x1220 <__stack+0x121>
	{
		uint16_t val=EM_get_air_pump_time();
    11f8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	8b e2       	ldi	r24, 0x2B	; 43
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	af 93       	push	r26
    1208:	9f 93       	push	r25
    120a:	8f 93       	push	r24
    120c:	0f 93       	push	r16
    120e:	ff 92       	push	r15
    1210:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	36 c0       	rjmp	.+108    	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1220:	2e e3       	ldi	r18, 0x3E	; 62
    1222:	33 e0       	ldi	r19, 0x03	; 3
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	8e 2d       	mov	r24, r14
    1228:	b6 01       	movw	r22, r12
    122a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    122e:	89 2b       	or	r24, r25
    1230:	a1 f4       	brne	.+40     	; 0x125a <__stack+0x15b>
	{
		uint8_t val=EM_get_sp_interval();
    1232:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1236:	1f 92       	push	r1
    1238:	8f 93       	push	r24
    123a:	8a e4       	ldi	r24, 0x4A	; 74
    123c:	93 e0       	ldi	r25, 0x03	; 3
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	af 93       	push	r26
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	0f 93       	push	r16
    1248:	ff 92       	push	r15
    124a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	19 c0       	rjmp	.+50     	; 0x128c <__stack+0x18d>
	}
	else if(strcmp(par, RW_TIME)==0)
    125a:	29 e6       	ldi	r18, 0x69	; 105
    125c:	33 e0       	ldi	r19, 0x03	; 3
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	8e 2d       	mov	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1268:	89 2b       	or	r24, r25
    126a:	29 f4       	brne	.+10     	; 0x1276 <__stack+0x177>
	{
		read_time(res);
    126c:	8f 2d       	mov	r24, r15
    126e:	90 2f       	mov	r25, r16
    1270:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <read_time>
    1274:	0b c0       	rjmp	.+22     	; 0x128c <__stack+0x18d>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1276:	26 e1       	ldi	r18, 0x16	; 22
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4e e6       	ldi	r20, 0x6E	; 110
    127c:	53 e0       	ldi	r21, 0x03	; 3
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	8f 2d       	mov	r24, r15
    1282:	90 2f       	mov	r25, r16
    1284:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
    1288:	01 c0       	rjmp	.+2      	; 0x128c <__stack+0x18d>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    128a:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    128c:	81 2f       	mov	r24, r17
    128e:	68 96       	adiw	r28, 0x18	; 24
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

Disassembly of section .text.handle_write:

000012ac <handle_write>:

bool handle_write(const char cmd[], char res[]){
    12ac:	6f 92       	push	r6
    12ae:	7f 92       	push	r7
    12b0:	8f 92       	push	r8
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	64 97       	sbiw	r28, 0x14	; 20
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	3b 01       	movw	r6, r22
    12d4:	88 2e       	mov	r8, r24
    12d6:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	ae 01       	movw	r20, r28
    12dc:	4f 5f       	subi	r20, 0xFF	; 255
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    12e4:	18 2f       	mov	r17, r24
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <handle_write+0x40>
    12ea:	cd c0       	rjmp	.+410    	; 0x1486 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	6c 01       	movw	r12, r24
    12f2:	20 e8       	ldi	r18, 0x80	; 128
    12f4:	e2 2e       	mov	r14, r18
    12f6:	26 ed       	ldi	r18, 0xD6	; 214
    12f8:	32 e0       	ldi	r19, 0x02	; 2
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	8e 2d       	mov	r24, r14
    12fe:	b6 01       	movw	r22, r12
    1300:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1304:	89 2b       	or	r24, r25
    1306:	39 f4       	brne	.+14     	; 0x1316 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1308:	a5 01       	movw	r20, r10
    130a:	88 2d       	mov	r24, r8
    130c:	b3 01       	movw	r22, r6
    130e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <write_deveui>
    1312:	18 2f       	mov	r17, r24
    1314:	b8 c0       	rjmp	.+368    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1316:	2d ed       	ldi	r18, 0xDD	; 221
    1318:	32 e0       	ldi	r19, 0x02	; 2
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	8e 2d       	mov	r24, r14
    131e:	b6 01       	movw	r22, r12
    1320:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1324:	89 2b       	or	r24, r25
    1326:	39 f4       	brne	.+14     	; 0x1336 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1328:	a5 01       	movw	r20, r10
    132a:	88 2d       	mov	r24, r8
    132c:	b3 01       	movw	r22, r6
    132e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <write_appeui>
    1332:	18 2f       	mov	r17, r24
    1334:	a8 c0       	rjmp	.+336    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1336:	24 ee       	ldi	r18, 0xE4	; 228
    1338:	32 e0       	ldi	r19, 0x02	; 2
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	8e 2d       	mov	r24, r14
    133e:	b6 01       	movw	r22, r12
    1340:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1344:	89 2b       	or	r24, r25
    1346:	39 f4       	brne	.+14     	; 0x1356 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1348:	a5 01       	movw	r20, r10
    134a:	88 2d       	mov	r24, r8
    134c:	b3 01       	movw	r22, r6
    134e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <write_appkey>
    1352:	18 2f       	mov	r17, r24
    1354:	98 c0       	rjmp	.+304    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1356:	2b ee       	ldi	r18, 0xEB	; 235
    1358:	32 e0       	ldi	r19, 0x02	; 2
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	8e 2d       	mov	r24, r14
    135e:	b6 01       	movw	r22, r12
    1360:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1364:	89 2b       	or	r24, r25
    1366:	39 f4       	brne	.+14     	; 0x1376 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1368:	a5 01       	movw	r20, r10
    136a:	88 2d       	mov	r24, r8
    136c:	b3 01       	movw	r22, r6
    136e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <write_PPM_factor>
    1372:	18 2f       	mov	r17, r24
    1374:	88 c0       	rjmp	.+272    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1376:	25 ef       	ldi	r18, 0xF5	; 245
    1378:	32 e0       	ldi	r19, 0x02	; 2
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	8e 2d       	mov	r24, r14
    137e:	b6 01       	movw	r22, r12
    1380:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1384:	89 2b       	or	r24, r25
    1386:	39 f4       	brne	.+14     	; 0x1396 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1388:	a5 01       	movw	r20, r10
    138a:	88 2d       	mov	r24, r8
    138c:	b3 01       	movw	r22, r6
    138e:	0e 94 86 19 	call	0x330c	; 0x330c <write_RRL>
    1392:	18 2f       	mov	r17, r24
    1394:	78 c0       	rjmp	.+240    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1396:	2a ef       	ldi	r18, 0xFA	; 250
    1398:	32 e0       	ldi	r19, 0x02	; 2
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	8e 2d       	mov	r24, r14
    139e:	b6 01       	movw	r22, r12
    13a0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    13a4:	89 2b       	or	r24, r25
    13a6:	39 f4       	brne	.+14     	; 0x13b6 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    13a8:	a5 01       	movw	r20, r10
    13aa:	88 2d       	mov	r24, r8
    13ac:	b3 01       	movw	r22, r6
    13ae:	0e 94 ac 19 	call	0x3358	; 0x3358 <write_VCC>
    13b2:	18 2f       	mov	r17, r24
    13b4:	68 c0       	rjmp	.+208    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    13b6:	2f ef       	ldi	r18, 0xFF	; 255
    13b8:	32 e0       	ldi	r19, 0x02	; 2
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	8e 2d       	mov	r24, r14
    13be:	b6 01       	movw	r22, r12
    13c0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    13c4:	89 2b       	or	r24, r25
    13c6:	39 f4       	brne	.+14     	; 0x13d6 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    13c8:	a5 01       	movw	r20, r10
    13ca:	88 2d       	mov	r24, r8
    13cc:	b3 01       	movw	r22, r6
    13ce:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <write_cols>
    13d2:	18 2f       	mov	r17, r24
    13d4:	58 c0       	rjmp	.+176    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    13d6:	24 e0       	ldi	r18, 0x04	; 4
    13d8:	33 e0       	ldi	r19, 0x03	; 3
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	8e 2d       	mov	r24, r14
    13de:	b6 01       	movw	r22, r12
    13e0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    13e4:	89 2b       	or	r24, r25
    13e6:	39 f4       	brne	.+14     	; 0x13f6 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    13e8:	a5 01       	movw	r20, r10
    13ea:	88 2d       	mov	r24, r8
    13ec:	b3 01       	movw	r22, r6
    13ee:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <write_heat_up>
    13f2:	18 2f       	mov	r17, r24
    13f4:	48 c0       	rjmp	.+144    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    13f6:	20 e2       	ldi	r18, 0x20	; 32
    13f8:	33 e0       	ldi	r19, 0x03	; 3
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	8e 2d       	mov	r24, r14
    13fe:	b6 01       	movw	r22, r12
    1400:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1404:	89 2b       	or	r24, r25
    1406:	39 f4       	brne	.+14     	; 0x1416 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1408:	a5 01       	movw	r20, r10
    140a:	88 2d       	mov	r24, r8
    140c:	b3 01       	movw	r22, r6
    140e:	0e 94 9d 18 	call	0x313a	; 0x313a <write_air_pump>
    1412:	18 2f       	mov	r17, r24
    1414:	38 c0       	rjmp	.+112    	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1416:	2e e3       	ldi	r18, 0x3E	; 62
    1418:	33 e0       	ldi	r19, 0x03	; 3
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	8e 2d       	mov	r24, r14
    141e:	b6 01       	movw	r22, r12
    1420:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1424:	89 2b       	or	r24, r25
    1426:	39 f4       	brne	.+14     	; 0x1436 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1428:	a5 01       	movw	r20, r10
    142a:	88 2d       	mov	r24, r8
    142c:	b3 01       	movw	r22, r6
    142e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <write_sp_interval>
    1432:	18 2f       	mov	r17, r24
    1434:	28 c0       	rjmp	.+80     	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1436:	24 e8       	ldi	r18, 0x84	; 132
    1438:	33 e0       	ldi	r19, 0x03	; 3
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	8e 2d       	mov	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1444:	89 2b       	or	r24, r25
    1446:	39 f4       	brne	.+14     	; 0x1456 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1448:	a5 01       	movw	r20, r10
    144a:	88 2d       	mov	r24, r8
    144c:	b3 01       	movw	r22, r6
    144e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <write_reset>
    1452:	18 2f       	mov	r17, r24
    1454:	18 c0       	rjmp	.+48     	; 0x1486 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1456:	29 e6       	ldi	r18, 0x69	; 105
    1458:	33 e0       	ldi	r19, 0x03	; 3
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	8e 2d       	mov	r24, r14
    145e:	b6 01       	movw	r22, r12
    1460:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1464:	89 2b       	or	r24, r25
    1466:	39 f4       	brne	.+14     	; 0x1476 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1468:	a5 01       	movw	r20, r10
    146a:	88 2d       	mov	r24, r8
    146c:	b3 01       	movw	r22, r6
    146e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <write_time>
    1472:	18 2f       	mov	r17, r24
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1476:	26 e1       	ldi	r18, 0x16	; 22
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4e e6       	ldi	r20, 0x6E	; 110
    147c:	53 e0       	ldi	r21, 0x03	; 3
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	c5 01       	movw	r24, r10
    1482:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
	}
	
}
    1486:	81 2f       	mov	r24, r17
    1488:	64 96       	adiw	r28, 0x14	; 20
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	af 90       	pop	r10
    14a4:	8f 90       	pop	r8
    14a6:	7f 90       	pop	r7
    14a8:	6f 90       	pop	r6
    14aa:	08 95       	ret

Disassembly of section .text.handle_methane:

00001b6e <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <handle_methane+0x12>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	f4 2e       	mov	r15, r20
    1b86:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1b88:	22 e0       	ldi	r18, 0x02	; 2
    1b8a:	46 e6       	ldi	r20, 0x66	; 102
    1b8c:	56 e0       	ldi	r21, 0x06	; 6
    1b8e:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    1b92:	18 2f       	mov	r17, r24
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <handle_methane+0x2c>
    1b98:	6b c0       	rjmp	.+214    	; 0x1c70 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    1b9a:	86 e6       	ldi	r24, 0x66	; 102
    1b9c:	96 e0       	ldi	r25, 0x06	; 6
    1b9e:	6c 01       	movw	r12, r24
    1ba0:	20 e8       	ldi	r18, 0x80	; 128
    1ba2:	e2 2e       	mov	r14, r18
    1ba4:	2a e8       	ldi	r18, 0x8A	; 138
    1ba6:	33 e0       	ldi	r19, 0x03	; 3
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	8e 2d       	mov	r24, r14
    1bac:	b6 01       	movw	r22, r12
    1bae:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1bb2:	89 2b       	or	r24, r25
    1bb4:	79 f4       	brne	.+30     	; 0x1bd4 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    1bb6:	0e 94 44 20 	call	0x4088	; 0x4088 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1bc0:	28 e1       	ldi	r18, 0x18	; 24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4d e8       	ldi	r20, 0x8D	; 141
    1bc6:	53 e0       	ldi	r21, 0x03	; 3
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	8f 2d       	mov	r24, r15
    1bcc:	90 2f       	mov	r25, r16
    1bce:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    1bd2:	4e c0       	rjmp	.+156    	; 0x1c70 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1bd4:	25 ea       	ldi	r18, 0xA5	; 165
    1bd6:	33 e0       	ldi	r19, 0x03	; 3
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	8e 2d       	mov	r24, r14
    1bdc:	b6 01       	movw	r22, r12
    1bde:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1be2:	89 2b       	or	r24, r25
    1be4:	79 f4       	brne	.+30     	; 0x1c04 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    1be6:	0e 94 44 20 	call	0x4088	; 0x4088 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1bf0:	29 e1       	ldi	r18, 0x19	; 25
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	49 ea       	ldi	r20, 0xA9	; 169
    1bf6:	53 e0       	ldi	r21, 0x03	; 3
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	8f 2d       	mov	r24, r15
    1bfc:	90 2f       	mov	r25, r16
    1bfe:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    1c02:	36 c0       	rjmp	.+108    	; 0x1c70 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1c04:	22 ec       	ldi	r18, 0xC2	; 194
    1c06:	33 e0       	ldi	r19, 0x03	; 3
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	8e 2d       	mov	r24, r14
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    1c12:	89 2b       	or	r24, r25
    1c14:	21 f5       	brne	.+72     	; 0x1c5e <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <ADC_get_value>
    1c1e:	88 23       	and	r24, r24
    1c20:	51 f0       	breq	.+20     	; 0x1c36 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1c22:	28 e1       	ldi	r18, 0x18	; 24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	47 ec       	ldi	r20, 0xC7	; 199
    1c28:	53 e0       	ldi	r21, 0x03	; 3
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	8f 2d       	mov	r24, r15
    1c2e:	90 2f       	mov	r25, r16
    1c30:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
    1c34:	1d c0       	rjmp	.+58     	; 0x1c70 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	8f 93       	push	r24
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8f 93       	push	r24
    1c3e:	8f ed       	ldi	r24, 0xDF	; 223
    1c40:	93 e0       	ldi	r25, 0x03	; 3
    1c42:	a0 e0       	ldi	r26, 0x00	; 0
    1c44:	af 93       	push	r26
    1c46:	9f 93       	push	r25
    1c48:	8f 93       	push	r24
    1c4a:	0f 93       	push	r16
    1c4c:	ff 92       	push	r15
    1c4e:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	09 c0       	rjmp	.+18     	; 0x1c70 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1c5e:	26 e1       	ldi	r18, 0x16	; 22
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	46 ee       	ldi	r20, 0xE6	; 230
    1c64:	53 e0       	ldi	r21, 0x03	; 3
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	8f 2d       	mov	r24, r15
    1c6a:	90 2f       	mov	r25, r16
    1c6c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
	}
	return false;
}
    1c70:	81 2f       	mov	r24, r17
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	08 95       	ret

Disassembly of section .text.handle_co2:

000024cc <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <handle_co2+0xc>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	f4 2e       	mov	r15, r20
    24de:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    24e0:	22 e0       	ldi	r18, 0x02	; 2
    24e2:	46 e6       	ldi	r20, 0x66	; 102
    24e4:	56 e0       	ldi	r21, 0x06	; 6
    24e6:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    24ea:	18 2f       	mov	r17, r24
    24ec:	88 23       	and	r24, r24
    24ee:	b9 f1       	breq	.+110    	; 0x255e <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    24f0:	66 e6       	ldi	r22, 0x66	; 102
    24f2:	76 e0       	ldi	r23, 0x06	; 6
    24f4:	80 e8       	ldi	r24, 0x80	; 128
    24f6:	22 ec       	ldi	r18, 0xC2	; 194
    24f8:	33 e0       	ldi	r19, 0x03	; 3
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    2500:	89 2b       	or	r24, r25
    2502:	21 f5       	brne	.+72     	; 0x254c <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    2504:	ce 01       	movw	r24, r28
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <SCD30_get_reading>
    250c:	88 23       	and	r24, r24
    250e:	51 f0       	breq	.+20     	; 0x2524 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    2510:	28 e1       	ldi	r18, 0x18	; 24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	47 ec       	ldi	r20, 0xC7	; 199
    2516:	53 e0       	ldi	r21, 0x03	; 3
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	8f 2d       	mov	r24, r15
    251c:	90 2f       	mov	r25, r16
    251e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
    2522:	1d c0       	rjmp	.+58     	; 0x255e <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	8f 93       	push	r24
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	8f 93       	push	r24
    252c:	8f ed       	ldi	r24, 0xDF	; 223
    252e:	93 e0       	ldi	r25, 0x03	; 3
    2530:	a0 e0       	ldi	r26, 0x00	; 0
    2532:	af 93       	push	r26
    2534:	9f 93       	push	r25
    2536:	8f 93       	push	r24
    2538:	0f 93       	push	r16
    253a:	ff 92       	push	r15
    253c:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <sprintf>
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	09 c0       	rjmp	.+18     	; 0x255e <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    254c:	26 e1       	ldi	r18, 0x16	; 22
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	46 ee       	ldi	r20, 0xE6	; 230
    2552:	53 e0       	ldi	r21, 0x03	; 3
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	8f 2d       	mov	r24, r15
    2558:	90 2f       	mov	r25, r16
    255a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
	}
}
    255e:	81 2f       	mov	r24, r17
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	08 95       	ret

Disassembly of section .text.handle_pump:

00002570 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    257e:	22 e0       	ldi	r18, 0x02	; 2
    2580:	46 e6       	ldi	r20, 0x66	; 102
    2582:	56 e0       	ldi	r21, 0x06	; 6
    2584:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    2588:	c8 2f       	mov	r28, r24
    258a:	88 23       	and	r24, r24
    258c:	d9 f1       	breq	.+118    	; 0x2604 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    258e:	86 e6       	ldi	r24, 0x66	; 102
    2590:	96 e0       	ldi	r25, 0x06	; 6
    2592:	6c 01       	movw	r12, r24
    2594:	20 e8       	ldi	r18, 0x80	; 128
    2596:	e2 2e       	mov	r14, r18
    2598:	2a e8       	ldi	r18, 0x8A	; 138
    259a:	33 e0       	ldi	r19, 0x03	; 3
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	8e 2d       	mov	r24, r14
    25a0:	b6 01       	movw	r22, r12
    25a2:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    25a6:	89 2b       	or	r24, r25
    25a8:	71 f4       	brne	.+28     	; 0x25c6 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    25aa:	0e 94 52 20 	call	0x40a4	; 0x40a4 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    25b4:	25 e1       	ldi	r18, 0x15	; 21
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4c ef       	ldi	r20, 0xFC	; 252
    25ba:	53 e0       	ldi	r21, 0x03	; 3
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	c8 01       	movw	r24, r16
    25c0:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    25c4:	1f c0       	rjmp	.+62     	; 0x2604 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    25c6:	25 ea       	ldi	r18, 0xA5	; 165
    25c8:	33 e0       	ldi	r19, 0x03	; 3
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	8e 2d       	mov	r24, r14
    25ce:	b6 01       	movw	r22, r12
    25d0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    25d4:	89 2b       	or	r24, r25
    25d6:	71 f4       	brne	.+28     	; 0x25f4 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    25d8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    25e2:	26 e1       	ldi	r18, 0x16	; 22
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	41 e1       	ldi	r20, 0x11	; 17
    25e8:	54 e0       	ldi	r21, 0x04	; 4
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	c8 01       	movw	r24, r16
    25ee:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
    25f2:	08 c0       	rjmp	.+16     	; 0x2604 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    25f4:	26 e1       	ldi	r18, 0x16	; 22
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	46 ee       	ldi	r20, 0xE6	; 230
    25fa:	53 e0       	ldi	r21, 0x03	; 3
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	c8 01       	movw	r24, r16
    2600:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
	}
}
    2604:	8c 2f       	mov	r24, r28
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ef 90       	pop	r14
    260e:	df 90       	pop	r13
    2610:	cf 90       	pop	r12
    2612:	08 95       	ret

Disassembly of section .text.handle_sample:

00002360 <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    2360:	6f 92       	push	r6
    2362:	7f 92       	push	r7
    2364:	8f 92       	push	r8
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ef 92       	push	r14
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	3b 01       	movw	r6, r22
    2374:	88 2e       	mov	r8, r24
    2376:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2378:	21 e0       	ldi	r18, 0x01	; 1
    237a:	46 e6       	ldi	r20, 0x66	; 102
    237c:	56 e0       	ldi	r21, 0x06	; 6
    237e:	0e 94 a6 13 	call	0x274c	; 0x274c <get_parameter>
    2382:	c8 2f       	mov	r28, r24
    2384:	88 23       	and	r24, r24
    2386:	e9 f1       	breq	.+122    	; 0x2402 <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    2388:	86 e6       	ldi	r24, 0x66	; 102
    238a:	96 e0       	ldi	r25, 0x06	; 6
    238c:	6c 01       	movw	r12, r24
    238e:	20 e8       	ldi	r18, 0x80	; 128
    2390:	e2 2e       	mov	r14, r18
    2392:	27 e2       	ldi	r18, 0x27	; 39
    2394:	34 e0       	ldi	r19, 0x04	; 4
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	8e 2d       	mov	r24, r14
    239a:	b6 01       	movw	r22, r12
    239c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    23a0:	89 2b       	or	r24, r25
    23a2:	39 f4       	brne	.+14     	; 0x23b2 <handle_sample+0x52>
		return handle_methane(cmd, res);
    23a4:	a8 01       	movw	r20, r16
    23a6:	88 2d       	mov	r24, r8
    23a8:	b3 01       	movw	r22, r6
    23aa:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <handle_methane>
    23ae:	c8 2f       	mov	r28, r24
    23b0:	28 c0       	rjmp	.+80     	; 0x2402 <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    23b2:	2c e2       	ldi	r18, 0x2C	; 44
    23b4:	34 e0       	ldi	r19, 0x04	; 4
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	8e 2d       	mov	r24, r14
    23ba:	b6 01       	movw	r22, r12
    23bc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    23c0:	89 2b       	or	r24, r25
    23c2:	39 f4       	brne	.+14     	; 0x23d2 <handle_sample+0x72>
		return handle_co2(cmd, res);
    23c4:	a8 01       	movw	r20, r16
    23c6:	88 2d       	mov	r24, r8
    23c8:	b3 01       	movw	r22, r6
    23ca:	0e 94 66 12 	call	0x24cc	; 0x24cc <handle_co2>
    23ce:	c8 2f       	mov	r28, r24
    23d0:	18 c0       	rjmp	.+48     	; 0x2402 <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    23d2:	20 e3       	ldi	r18, 0x30	; 48
    23d4:	34 e0       	ldi	r19, 0x04	; 4
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	8e 2d       	mov	r24, r14
    23da:	b6 01       	movw	r22, r12
    23dc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strcmp>
    23e0:	89 2b       	or	r24, r25
    23e2:	39 f4       	brne	.+14     	; 0x23f2 <handle_sample+0x92>
		return handle_pump(cmd, res);
    23e4:	a8 01       	movw	r20, r16
    23e6:	88 2d       	mov	r24, r8
    23e8:	b3 01       	movw	r22, r6
    23ea:	0e 94 b8 12 	call	0x2570	; 0x2570 <handle_pump>
    23ee:	c8 2f       	mov	r28, r24
    23f0:	08 c0       	rjmp	.+16     	; 0x2402 <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    23f2:	26 e1       	ldi	r18, 0x16	; 22
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	46 ee       	ldi	r20, 0xE6	; 230
    23f8:	53 e0       	ldi	r21, 0x03	; 3
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	c8 01       	movw	r24, r16
    23fe:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <memcpy>
		return true;
	}
}
    2402:	8c 2f       	mov	r24, r28
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	8f 90       	pop	r8
    2412:	7f 90       	pop	r7
    2414:	6f 90       	pop	r6
    2416:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00003ce8 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    3ce8:	0e 94 12 20 	call	0x4024	; 0x4024 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3cec:	0e 94 3d 20 	call	0x407a	; 0x407a <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    3cf6:	0e 94 4b 20 	call	0x4096	; 0x4096 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    3d00:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3d04:	88 23       	and	r24, r24
    3d06:	11 f0       	breq	.+4      	; 0x3d0c <init_methane_SCD30+0x24>
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	08 95       	ret
	return true;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3d0e:	08 95       	ret

Disassembly of section .text.count_parameters:

000030e8 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    30e8:	6f 92       	push	r6
    30ea:	7f 92       	push	r7
    30ec:	8f 92       	push	r8
    30ee:	cf 92       	push	r12
    30f0:	df 92       	push	r13
    30f2:	ef 92       	push	r14
    30f4:	3b 01       	movw	r6, r22
    30f6:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    30f8:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    30fc:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    3102:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    3104:	10 c0       	rjmp	.+32     	; 0x3126 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    3106:	e8 2c       	mov	r14, r8
    3108:	63 01       	movw	r12, r6
    310a:	c2 0e       	add	r12, r18
    310c:	d3 1e       	adc	r13, r19
    310e:	e1 1c       	adc	r14, r1
    3110:	37 fd       	sbrc	r19, 7
    3112:	ea 94       	dec	r14
    3114:	f6 01       	movw	r30, r12
    3116:	94 91       	lpm	r25, Z
    3118:	e7 fc       	sbrc	r14, 7
    311a:	90 81       	ld	r25, Z
    311c:	90 32       	cpi	r25, 0x20	; 32
    311e:	09 f4       	brne	.+2      	; 0x3122 <count_parameters+0x3a>
			cnt++;
    3120:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    3122:	2f 5f       	subi	r18, 0xFF	; 255
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	26 17       	cp	r18, r22
    3128:	37 07       	cpc	r19, r23
    312a:	68 f3       	brcs	.-38     	; 0x3106 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    312c:	ef 90       	pop	r14
    312e:	df 90       	pop	r13
    3130:	cf 90       	pop	r12
    3132:	8f 90       	pop	r8
    3134:	7f 90       	pop	r7
    3136:	6f 90       	pop	r6
    3138:	08 95       	ret

Disassembly of section .text.par_index:

00002cbc <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2cbc:	cf 92       	push	r12
    2cbe:	df 92       	push	r13
    2cc0:	ef 92       	push	r14
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2cca:	44 23       	and	r20, r20
    2ccc:	29 f1       	breq	.+74     	; 0x2d18 <par_index+0x5c>
    2cce:	04 2f       	mov	r16, r20
    2cd0:	6b 01       	movw	r12, r22
    2cd2:	e8 2e       	mov	r14, r24
    2cd4:	c0 e0       	ldi	r28, 0x00	; 0
    2cd6:	d0 e0       	ldi	r29, 0x00	; 0
    2cd8:	10 e0       	ldi	r17, 0x00	; 0
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2cdc:	ae 2d       	mov	r26, r14
    2cde:	c6 01       	movw	r24, r12
    2ce0:	8c 0f       	add	r24, r28
    2ce2:	9d 1f       	adc	r25, r29
    2ce4:	a1 1d       	adc	r26, r1
    2ce6:	d7 fd       	sbrc	r29, 7
    2ce8:	aa 95       	dec	r26
    2cea:	fc 01       	movw	r30, r24
    2cec:	84 91       	lpm	r24, Z
    2cee:	a7 fd       	sbrc	r26, 7
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 32       	cpi	r24, 0x20	; 32
    2cf4:	31 f4       	brne	.+12     	; 0x2d02 <par_index+0x46>
			cnt++;
    2cf6:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2cf8:	01 13       	cpse	r16, r17
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <par_index+0x46>
				return i+1;
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	0d c0       	rjmp	.+26     	; 0x2d1c <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2d02:	21 96       	adiw	r28, 0x01	; 1
    2d04:	8e 2d       	mov	r24, r14
    2d06:	b6 01       	movw	r22, r12
    2d08:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2d0c:	c8 17       	cp	r28, r24
    2d0e:	d9 07       	cpc	r29, r25
    2d10:	28 f3       	brcs	.-54     	; 0x2cdc <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	08 95       	ret

Disassembly of section .text.get_parameter:

0000274c <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    274c:	8f 92       	push	r8
    274e:	9f 92       	push	r9
    2750:	af 92       	push	r10
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	6b 01       	movw	r12, r22
    2764:	e8 2e       	mov	r14, r24
    2766:	ea 01       	movw	r28, r20
    2768:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    276a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <count_parameters>
	if(pars<parNo) return false;
    276e:	8f 15       	cp	r24, r15
    2770:	58 f1       	brcs	.+86     	; 0x27c8 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    2772:	8e 2d       	mov	r24, r14
    2774:	b6 01       	movw	r22, r12
    2776:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    277a:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    277c:	4f 2d       	mov	r20, r15
    277e:	8e 2d       	mov	r24, r14
    2780:	b6 01       	movw	r22, r12
    2782:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <par_index>
	uint8_t parLen=0;
    2786:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    2788:	15 c0       	rjmp	.+42     	; 0x27b4 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    278a:	46 01       	movw	r8, r12
    278c:	ae 2c       	mov	r10, r14
    278e:	82 0e       	add	r8, r18
    2790:	93 1e       	adc	r9, r19
    2792:	a1 1c       	adc	r10, r1
    2794:	37 fd       	sbrc	r19, 7
    2796:	aa 94       	dec	r10
    2798:	4a 2d       	mov	r20, r10
    279a:	94 01       	movw	r18, r8
    279c:	f4 01       	movw	r30, r8
    279e:	24 91       	lpm	r18, Z
    27a0:	47 fd       	sbrc	r20, 7
    27a2:	20 81       	ld	r18, Z
    27a4:	20 32       	cpi	r18, 0x20	; 32
    27a6:	59 f0       	breq	.+22     	; 0x27be <get_parameter+0x72>
		par[parLen++]=src[i];
    27a8:	fe 01       	movw	r30, r28
    27aa:	e9 0f       	add	r30, r25
    27ac:	f1 1d       	adc	r31, r1
    27ae:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    27b0:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    27b2:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	20 17       	cp	r18, r16
    27ba:	31 07       	cpc	r19, r17
    27bc:	30 f3       	brcs	.-52     	; 0x278a <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    27be:	c9 0f       	add	r28, r25
    27c0:	d1 1d       	adc	r29, r1
    27c2:	18 82       	st	Y, r1
	
	return true;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    27c8:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	df 90       	pop	r13
    27d8:	cf 90       	pop	r12
    27da:	af 90       	pop	r10
    27dc:	9f 90       	pop	r9
    27de:	8f 90       	pop	r8
    27e0:	08 95       	ret

Disassembly of section .text.calc_crc8:

0000398e <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    398e:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3990:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    3992:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    3994:	14 c0       	rjmp	.+40     	; 0x39be <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    3996:	fa 01       	movw	r30, r20
    3998:	e3 0f       	add	r30, r19
    399a:	f1 1d       	adc	r31, r1
    399c:	90 81       	ld	r25, Z
    399e:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    39a0:	28 e0       	ldi	r18, 0x08	; 8
    39a2:	0a c0       	rjmp	.+20     	; 0x39b8 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    39a4:	88 23       	and	r24, r24
    39a6:	34 f4       	brge	.+12     	; 0x39b4 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	91 e3       	ldi	r25, 0x31	; 49
    39b0:	89 27       	eor	r24, r25
    39b2:	01 c0       	rjmp	.+2      	; 0x39b6 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    39b4:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    39b6:	21 50       	subi	r18, 0x01	; 1
    39b8:	21 11       	cpse	r18, r1
    39ba:	f4 cf       	rjmp	.-24     	; 0x39a4 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    39bc:	3f 5f       	subi	r19, 0xFF	; 255
    39be:	36 17       	cp	r19, r22
    39c0:	50 f3       	brcs	.-44     	; 0x3996 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    39c2:	08 95       	ret

Disassembly of section .text.get_decimal:

00002418 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    242a:	10 e0       	ldi	r17, 0x00	; 0
    242c:	08 c0       	rjmp	.+16     	; 0x243e <get_decimal+0x26>
	{
		if(str[i]=='.'){
    242e:	cc 0d       	add	r28, r12
    2430:	dd 1d       	adc	r29, r13
    2432:	88 81       	ld	r24, Y
    2434:	8e 32       	cpi	r24, 0x2E	; 46
    2436:	11 f4       	brne	.+4      	; 0x243c <get_decimal+0x24>
			index=i+1;
    2438:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    243a:	0c c0       	rjmp	.+24     	; 0x2454 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    243c:	1f 5f       	subi	r17, 0xFF	; 255
    243e:	c1 2f       	mov	r28, r17
    2440:	d0 e0       	ldi	r29, 0x00	; 0
    2442:	b6 01       	movw	r22, r12
    2444:	80 e8       	ldi	r24, 0x80	; 128
    2446:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	c8 17       	cp	r28, r24
    244e:	d9 07       	cpc	r29, r25
    2450:	70 f3       	brcs	.-36     	; 0x242e <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    2452:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2454:	11 23       	and	r17, r17
    2456:	71 f1       	breq	.+92     	; 0x24b4 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    2458:	c1 0e       	add	r12, r17
    245a:	d1 1c       	adc	r13, r1
    245c:	80 e8       	ldi	r24, 0x80	; 128
    245e:	e8 2e       	mov	r14, r24
    2460:	8e 2d       	mov	r24, r14
    2462:	b6 01       	movw	r22, r12
    2464:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2468:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    246a:	8e 2d       	mov	r24, r14
    246c:	b6 01       	movw	r22, r12
    246e:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
    2472:	8c 01       	movw	r16, r24
	float divisor=1;
    2474:	0f 2e       	mov	r0, r31
    2476:	c1 2c       	mov	r12, r1
    2478:	d1 2c       	mov	r13, r1
    247a:	f0 e8       	ldi	r31, 0x80	; 128
    247c:	ef 2e       	mov	r14, r31
    247e:	ff e3       	ldi	r31, 0x3F	; 63
    2480:	ff 2e       	mov	r15, r31
    2482:	f0 2d       	mov	r31, r0
	
	while(len>0){
    2484:	0b c0       	rjmp	.+22     	; 0x249c <get_decimal+0x84>
		divisor*=10;
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	c7 01       	movw	r24, r14
    2490:	b6 01       	movw	r22, r12
    2492:	0e 94 1c 21 	call	0x4238	; 0x4238 <__mulsf3>
    2496:	6b 01       	movw	r12, r22
    2498:	7c 01       	movw	r14, r24
		len--;
    249a:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    249c:	c1 11       	cpse	r28, r1
    249e:	f3 cf       	rjmp	.-26     	; 0x2486 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    24a0:	b8 01       	movw	r22, r16
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 bd 14 	call	0x297a	; 0x297a <__floatunsisf>
    24aa:	a7 01       	movw	r20, r14
    24ac:	96 01       	movw	r18, r12
    24ae:	0e 94 18 21 	call	0x4230	; 0x4230 <__divsf3>
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	cf 90       	pop	r12
    24ca:	08 95       	ret

Disassembly of section .text.str2flaot:

00003226 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    3226:	cf 92       	push	r12
    3228:	df 92       	push	r13
    322a:	ef 92       	push	r14
    322c:	ff 92       	push	r15
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    3238:	bc 01       	movw	r22, r24
    323a:	80 e8       	ldi	r24, 0x80	; 128
    323c:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
    3240:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    3242:	c8 01       	movw	r24, r16
    3244:	0e 94 0c 12 	call	0x2418	; 0x2418 <get_decimal>
    3248:	6b 01       	movw	r12, r22
    324a:	7c 01       	movw	r14, r24
	return intVal+deci;
    324c:	be 01       	movw	r22, r28
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 bd 14 	call	0x297a	; 0x297a <__floatunsisf>
    3256:	9b 01       	movw	r18, r22
    3258:	ac 01       	movw	r20, r24
    325a:	c7 01       	movw	r24, r14
    325c:	b6 01       	movw	r22, r12
    325e:	0e 94 92 20 	call	0x4124	; 0x4124 <__addsf3>
	
	
}
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	1f 91       	pop	r17
    3268:	0f 91       	pop	r16
    326a:	ff 90       	pop	r15
    326c:	ef 90       	pop	r14
    326e:	df 90       	pop	r13
    3270:	cf 90       	pop	r12
    3272:	08 95       	ret

Disassembly of section .text.is_float:

00002f90 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    2fa0:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    2fa2:	0d c0       	rjmp	.+26     	; 0x2fbe <is_float+0x2e>
	{
		if(str[i]=='.'){
    2fa4:	ce 0d       	add	r28, r14
    2fa6:	df 1d       	adc	r29, r15
    2fa8:	88 81       	ld	r24, Y
    2faa:	8e 32       	cpi	r24, 0x2E	; 46
    2fac:	21 f4       	brne	.+8      	; 0x2fb6 <is_float+0x26>
			if (got_dot)
    2fae:	01 11       	cpse	r16, r1
    2fb0:	11 c0       	rjmp	.+34     	; 0x2fd4 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    2fb2:	01 e0       	ldi	r16, 0x01	; 1
    2fb4:	03 c0       	rjmp	.+6      	; 0x2fbc <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2fb6:	80 53       	subi	r24, 0x30	; 48
    2fb8:	8a 30       	cpi	r24, 0x0A	; 10
    2fba:	70 f4       	brcc	.+28     	; 0x2fd8 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2fbc:	1f 5f       	subi	r17, 0xFF	; 255
    2fbe:	c1 2f       	mov	r28, r17
    2fc0:	d0 e0       	ldi	r29, 0x00	; 0
    2fc2:	b7 01       	movw	r22, r14
    2fc4:	80 e8       	ldi	r24, 0x80	; 128
    2fc6:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <strlen>
    2fca:	c8 17       	cp	r28, r24
    2fcc:	d9 07       	cpc	r29, r25
    2fce:	50 f3       	brcs	.-44     	; 0x2fa4 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	03 c0       	rjmp	.+6      	; 0x2fda <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	ff 90       	pop	r15
    2fe4:	ef 90       	pop	r14
    2fe6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004122 <__subsf3>:
    4122:	50 58       	subi	r21, 0x80	; 128

00004124 <__addsf3>:
    4124:	bb 27       	eor	r27, r27
    4126:	aa 27       	eor	r26, r26
    4128:	0e 94 8d 10 	call	0x211a	; 0x211a <__addsf3x>
    412c:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000211a <__addsf3x>:
    211a:	11 c0       	rjmp	.+34     	; 0x213e <__addsf3x+0x24>
    211c:	0e 94 98 20 	call	0x4130	; 0x4130 <__fp_pscA>
    2120:	38 f0       	brcs	.+14     	; 0x2130 <__addsf3x+0x16>
    2122:	0e 94 9f 20 	call	0x413e	; 0x413e <__fp_pscB>
    2126:	20 f0       	brcs	.+8      	; 0x2130 <__addsf3x+0x16>
    2128:	39 f4       	brne	.+14     	; 0x2138 <__addsf3x+0x1e>
    212a:	9f 3f       	cpi	r25, 0xFF	; 255
    212c:	19 f4       	brne	.+6      	; 0x2134 <__addsf3x+0x1a>
    212e:	26 f4       	brtc	.+8      	; 0x2138 <__addsf3x+0x1e>
    2130:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__fp_nan>
    2134:	0e f4       	brtc	.+2      	; 0x2138 <__addsf3x+0x1e>
    2136:	e0 95       	com	r30
    2138:	e7 fb       	bst	r30, 7
    213a:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_inf>
    213e:	e9 2f       	mov	r30, r25
    2140:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__fp_split3>
    2144:	58 f3       	brcs	.-42     	; 0x211c <__addsf3x+0x2>
    2146:	ba 17       	cp	r27, r26
    2148:	62 07       	cpc	r22, r18
    214a:	73 07       	cpc	r23, r19
    214c:	84 07       	cpc	r24, r20
    214e:	95 07       	cpc	r25, r21
    2150:	20 f0       	brcs	.+8      	; 0x215a <__addsf3x+0x40>
    2152:	79 f4       	brne	.+30     	; 0x2172 <__addsf3x+0x58>
    2154:	a6 f5       	brtc	.+104    	; 0x21be <__addsf3x+0xa4>
    2156:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__fp_zero>
    215a:	0e f4       	brtc	.+2      	; 0x215e <__addsf3x+0x44>
    215c:	e0 95       	com	r30
    215e:	0b 2e       	mov	r0, r27
    2160:	ba 2f       	mov	r27, r26
    2162:	a0 2d       	mov	r26, r0
    2164:	0b 01       	movw	r0, r22
    2166:	b9 01       	movw	r22, r18
    2168:	90 01       	movw	r18, r0
    216a:	0c 01       	movw	r0, r24
    216c:	ca 01       	movw	r24, r20
    216e:	a0 01       	movw	r20, r0
    2170:	11 24       	eor	r1, r1
    2172:	ff 27       	eor	r31, r31
    2174:	59 1b       	sub	r21, r25
    2176:	99 f0       	breq	.+38     	; 0x219e <__addsf3x+0x84>
    2178:	59 3f       	cpi	r21, 0xF9	; 249
    217a:	50 f4       	brcc	.+20     	; 0x2190 <__addsf3x+0x76>
    217c:	50 3e       	cpi	r21, 0xE0	; 224
    217e:	68 f1       	brcs	.+90     	; 0x21da <__addsf3x+0xc0>
    2180:	1a 16       	cp	r1, r26
    2182:	f0 40       	sbci	r31, 0x00	; 0
    2184:	a2 2f       	mov	r26, r18
    2186:	23 2f       	mov	r18, r19
    2188:	34 2f       	mov	r19, r20
    218a:	44 27       	eor	r20, r20
    218c:	58 5f       	subi	r21, 0xF8	; 248
    218e:	f3 cf       	rjmp	.-26     	; 0x2176 <__addsf3x+0x5c>
    2190:	46 95       	lsr	r20
    2192:	37 95       	ror	r19
    2194:	27 95       	ror	r18
    2196:	a7 95       	ror	r26
    2198:	f0 40       	sbci	r31, 0x00	; 0
    219a:	53 95       	inc	r21
    219c:	c9 f7       	brne	.-14     	; 0x2190 <__addsf3x+0x76>
    219e:	7e f4       	brtc	.+30     	; 0x21be <__addsf3x+0xa4>
    21a0:	1f 16       	cp	r1, r31
    21a2:	ba 0b       	sbc	r27, r26
    21a4:	62 0b       	sbc	r22, r18
    21a6:	73 0b       	sbc	r23, r19
    21a8:	84 0b       	sbc	r24, r20
    21aa:	ba f0       	brmi	.+46     	; 0x21da <__addsf3x+0xc0>
    21ac:	91 50       	subi	r25, 0x01	; 1
    21ae:	a1 f0       	breq	.+40     	; 0x21d8 <__addsf3x+0xbe>
    21b0:	ff 0f       	add	r31, r31
    21b2:	bb 1f       	adc	r27, r27
    21b4:	66 1f       	adc	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	88 1f       	adc	r24, r24
    21ba:	c2 f7       	brpl	.-16     	; 0x21ac <__addsf3x+0x92>
    21bc:	0e c0       	rjmp	.+28     	; 0x21da <__addsf3x+0xc0>
    21be:	ba 0f       	add	r27, r26
    21c0:	62 1f       	adc	r22, r18
    21c2:	73 1f       	adc	r23, r19
    21c4:	84 1f       	adc	r24, r20
    21c6:	48 f4       	brcc	.+18     	; 0x21da <__addsf3x+0xc0>
    21c8:	87 95       	ror	r24
    21ca:	77 95       	ror	r23
    21cc:	67 95       	ror	r22
    21ce:	b7 95       	ror	r27
    21d0:	f7 95       	ror	r31
    21d2:	9e 3f       	cpi	r25, 0xFE	; 254
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <__addsf3x+0xbe>
    21d6:	b0 cf       	rjmp	.-160    	; 0x2138 <__addsf3x+0x1e>
    21d8:	93 95       	inc	r25
    21da:	88 0f       	add	r24, r24
    21dc:	08 f0       	brcs	.+2      	; 0x21e0 <__addsf3x+0xc6>
    21de:	99 27       	eor	r25, r25
    21e0:	ee 0f       	add	r30, r30
    21e2:	97 95       	ror	r25
    21e4:	87 95       	ror	r24
    21e6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004230 <__divsf3>:
    4230:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divsf3x>
    4234:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f68 <__divsf3x>:
    1f68:	10 c0       	rjmp	.+32     	; 0x1f8a <__divsf3x+0x22>
    1f6a:	0e 94 9f 20 	call	0x413e	; 0x413e <__fp_pscB>
    1f6e:	58 f0       	brcs	.+22     	; 0x1f86 <__divsf3x+0x1e>
    1f70:	0e 94 98 20 	call	0x4130	; 0x4130 <__fp_pscA>
    1f74:	40 f0       	brcs	.+16     	; 0x1f86 <__divsf3x+0x1e>
    1f76:	29 f4       	brne	.+10     	; 0x1f82 <__divsf3x+0x1a>
    1f78:	5f 3f       	cpi	r21, 0xFF	; 255
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <__divsf3x+0x1e>
    1f7c:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_inf>
    1f80:	51 11       	cpse	r21, r1
    1f82:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__fp_szero>
    1f86:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__fp_nan>
    1f8a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__fp_split3>
    1f8e:	68 f3       	brcs	.-38     	; 0x1f6a <__divsf3x+0x2>

00001f90 <__divsf3_pse>:
    1f90:	99 23       	and	r25, r25
    1f92:	b1 f3       	breq	.-20     	; 0x1f80 <__divsf3x+0x18>
    1f94:	55 23       	and	r21, r21
    1f96:	91 f3       	breq	.-28     	; 0x1f7c <__divsf3x+0x14>
    1f98:	95 1b       	sub	r25, r21
    1f9a:	55 0b       	sbc	r21, r21
    1f9c:	bb 27       	eor	r27, r27
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	62 17       	cp	r22, r18
    1fa2:	73 07       	cpc	r23, r19
    1fa4:	84 07       	cpc	r24, r20
    1fa6:	38 f0       	brcs	.+14     	; 0x1fb6 <__divsf3_pse+0x26>
    1fa8:	9f 5f       	subi	r25, 0xFF	; 255
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	44 1f       	adc	r20, r20
    1fb2:	aa 1f       	adc	r26, r26
    1fb4:	a9 f3       	breq	.-22     	; 0x1fa0 <__divsf3_pse+0x10>
    1fb6:	35 d0       	rcall	.+106    	; 0x2022 <__divsf3_pse+0x92>
    1fb8:	0e 2e       	mov	r0, r30
    1fba:	3a f0       	brmi	.+14     	; 0x1fca <__divsf3_pse+0x3a>
    1fbc:	e0 e8       	ldi	r30, 0x80	; 128
    1fbe:	32 d0       	rcall	.+100    	; 0x2024 <__divsf3_pse+0x94>
    1fc0:	91 50       	subi	r25, 0x01	; 1
    1fc2:	50 40       	sbci	r21, 0x00	; 0
    1fc4:	e6 95       	lsr	r30
    1fc6:	00 1c       	adc	r0, r0
    1fc8:	ca f7       	brpl	.-14     	; 0x1fbc <__divsf3_pse+0x2c>
    1fca:	2b d0       	rcall	.+86     	; 0x2022 <__divsf3_pse+0x92>
    1fcc:	fe 2f       	mov	r31, r30
    1fce:	29 d0       	rcall	.+82     	; 0x2022 <__divsf3_pse+0x92>
    1fd0:	66 0f       	add	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	88 1f       	adc	r24, r24
    1fd6:	bb 1f       	adc	r27, r27
    1fd8:	26 17       	cp	r18, r22
    1fda:	37 07       	cpc	r19, r23
    1fdc:	48 07       	cpc	r20, r24
    1fde:	ab 07       	cpc	r26, r27
    1fe0:	b0 e8       	ldi	r27, 0x80	; 128
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <__divsf3_pse+0x56>
    1fe4:	bb 0b       	sbc	r27, r27
    1fe6:	80 2d       	mov	r24, r0
    1fe8:	bf 01       	movw	r22, r30
    1fea:	ff 27       	eor	r31, r31
    1fec:	93 58       	subi	r25, 0x83	; 131
    1fee:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff0:	3a f0       	brmi	.+14     	; 0x2000 <__divsf3_pse+0x70>
    1ff2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ff4:	51 05       	cpc	r21, r1
    1ff6:	78 f0       	brcs	.+30     	; 0x2016 <__divsf3_pse+0x86>
    1ff8:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_inf>
    1ffc:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__fp_szero>
    2000:	5f 3f       	cpi	r21, 0xFF	; 255
    2002:	e4 f3       	brlt	.-8      	; 0x1ffc <__divsf3_pse+0x6c>
    2004:	98 3e       	cpi	r25, 0xE8	; 232
    2006:	d4 f3       	brlt	.-12     	; 0x1ffc <__divsf3_pse+0x6c>
    2008:	86 95       	lsr	r24
    200a:	77 95       	ror	r23
    200c:	67 95       	ror	r22
    200e:	b7 95       	ror	r27
    2010:	f7 95       	ror	r31
    2012:	9f 5f       	subi	r25, 0xFF	; 255
    2014:	c9 f7       	brne	.-14     	; 0x2008 <__divsf3_pse+0x78>
    2016:	88 0f       	add	r24, r24
    2018:	91 1d       	adc	r25, r1
    201a:	96 95       	lsr	r25
    201c:	87 95       	ror	r24
    201e:	97 f9       	bld	r25, 7
    2020:	08 95       	ret
    2022:	e1 e0       	ldi	r30, 0x01	; 1
    2024:	66 0f       	add	r22, r22
    2026:	77 1f       	adc	r23, r23
    2028:	88 1f       	adc	r24, r24
    202a:	bb 1f       	adc	r27, r27
    202c:	62 17       	cp	r22, r18
    202e:	73 07       	cpc	r23, r19
    2030:	84 07       	cpc	r24, r20
    2032:	ba 07       	cpc	r27, r26
    2034:	20 f0       	brcs	.+8      	; 0x203e <__divsf3_pse+0xae>
    2036:	62 1b       	sub	r22, r18
    2038:	73 0b       	sbc	r23, r19
    203a:	84 0b       	sbc	r24, r20
    203c:	ba 0b       	sbc	r27, r26
    203e:	ee 1f       	adc	r30, r30
    2040:	88 f7       	brcc	.-30     	; 0x2024 <__divsf3_pse+0x94>
    2042:	e0 95       	com	r30
    2044:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002ed8 <__fixunssfsi>:
    2ed8:	0e 94 22 1b 	call	0x3644	; 0x3644 <__fp_splitA>
    2edc:	88 f0       	brcs	.+34     	; 0x2f00 <__fixunssfsi+0x28>
    2ede:	9f 57       	subi	r25, 0x7F	; 127
    2ee0:	98 f0       	brcs	.+38     	; 0x2f08 <__fixunssfsi+0x30>
    2ee2:	b9 2f       	mov	r27, r25
    2ee4:	99 27       	eor	r25, r25
    2ee6:	b7 51       	subi	r27, 0x17	; 23
    2ee8:	b0 f0       	brcs	.+44     	; 0x2f16 <__fixunssfsi+0x3e>
    2eea:	e1 f0       	breq	.+56     	; 0x2f24 <__fixunssfsi+0x4c>
    2eec:	66 0f       	add	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	88 1f       	adc	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	1a f0       	brmi	.+6      	; 0x2efc <__fixunssfsi+0x24>
    2ef6:	ba 95       	dec	r27
    2ef8:	c9 f7       	brne	.-14     	; 0x2eec <__fixunssfsi+0x14>
    2efa:	14 c0       	rjmp	.+40     	; 0x2f24 <__fixunssfsi+0x4c>
    2efc:	b1 30       	cpi	r27, 0x01	; 1
    2efe:	91 f0       	breq	.+36     	; 0x2f24 <__fixunssfsi+0x4c>
    2f00:	0e 94 a6 20 	call	0x414c	; 0x414c <__fp_zero>
    2f04:	b1 e0       	ldi	r27, 0x01	; 1
    2f06:	08 95       	ret
    2f08:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__fp_zero>
    2f0c:	67 2f       	mov	r22, r23
    2f0e:	78 2f       	mov	r23, r24
    2f10:	88 27       	eor	r24, r24
    2f12:	b8 5f       	subi	r27, 0xF8	; 248
    2f14:	39 f0       	breq	.+14     	; 0x2f24 <__fixunssfsi+0x4c>
    2f16:	b9 3f       	cpi	r27, 0xF9	; 249
    2f18:	cc f3       	brlt	.-14     	; 0x2f0c <__fixunssfsi+0x34>
    2f1a:	86 95       	lsr	r24
    2f1c:	77 95       	ror	r23
    2f1e:	67 95       	ror	r22
    2f20:	b3 95       	inc	r27
    2f22:	d9 f7       	brne	.-10     	; 0x2f1a <__fixunssfsi+0x42>
    2f24:	3e f4       	brtc	.+14     	; 0x2f34 <__fixunssfsi+0x5c>
    2f26:	90 95       	com	r25
    2f28:	80 95       	com	r24
    2f2a:	70 95       	com	r23
    2f2c:	61 95       	neg	r22
    2f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f30:	8f 4f       	sbci	r24, 0xFF	; 255
    2f32:	9f 4f       	sbci	r25, 0xFF	; 255
    2f34:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000297a <__floatunsisf>:
    297a:	e8 94       	clt
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <__floatsisf+0x12>

0000297e <__floatsisf>:
    297e:	97 fb       	bst	r25, 7
    2980:	3e f4       	brtc	.+14     	; 0x2990 <__floatsisf+0x12>
    2982:	90 95       	com	r25
    2984:	80 95       	com	r24
    2986:	70 95       	com	r23
    2988:	61 95       	neg	r22
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	8f 4f       	sbci	r24, 0xFF	; 255
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	99 23       	and	r25, r25
    2992:	a9 f0       	breq	.+42     	; 0x29be <__floatsisf+0x40>
    2994:	f9 2f       	mov	r31, r25
    2996:	96 e9       	ldi	r25, 0x96	; 150
    2998:	bb 27       	eor	r27, r27
    299a:	93 95       	inc	r25
    299c:	f6 95       	lsr	r31
    299e:	87 95       	ror	r24
    29a0:	77 95       	ror	r23
    29a2:	67 95       	ror	r22
    29a4:	b7 95       	ror	r27
    29a6:	f1 11       	cpse	r31, r1
    29a8:	f8 cf       	rjmp	.-16     	; 0x299a <__floatsisf+0x1c>
    29aa:	fa f4       	brpl	.+62     	; 0x29ea <__floatsisf+0x6c>
    29ac:	bb 0f       	add	r27, r27
    29ae:	11 f4       	brne	.+4      	; 0x29b4 <__floatsisf+0x36>
    29b0:	60 ff       	sbrs	r22, 0
    29b2:	1b c0       	rjmp	.+54     	; 0x29ea <__floatsisf+0x6c>
    29b4:	6f 5f       	subi	r22, 0xFF	; 255
    29b6:	7f 4f       	sbci	r23, 0xFF	; 255
    29b8:	8f 4f       	sbci	r24, 0xFF	; 255
    29ba:	9f 4f       	sbci	r25, 0xFF	; 255
    29bc:	16 c0       	rjmp	.+44     	; 0x29ea <__floatsisf+0x6c>
    29be:	88 23       	and	r24, r24
    29c0:	11 f0       	breq	.+4      	; 0x29c6 <__floatsisf+0x48>
    29c2:	96 e9       	ldi	r25, 0x96	; 150
    29c4:	11 c0       	rjmp	.+34     	; 0x29e8 <__floatsisf+0x6a>
    29c6:	77 23       	and	r23, r23
    29c8:	21 f0       	breq	.+8      	; 0x29d2 <__floatsisf+0x54>
    29ca:	9e e8       	ldi	r25, 0x8E	; 142
    29cc:	87 2f       	mov	r24, r23
    29ce:	76 2f       	mov	r23, r22
    29d0:	05 c0       	rjmp	.+10     	; 0x29dc <__floatsisf+0x5e>
    29d2:	66 23       	and	r22, r22
    29d4:	71 f0       	breq	.+28     	; 0x29f2 <__floatsisf+0x74>
    29d6:	96 e8       	ldi	r25, 0x86	; 134
    29d8:	86 2f       	mov	r24, r22
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	2a f0       	brmi	.+10     	; 0x29ea <__floatsisf+0x6c>
    29e0:	9a 95       	dec	r25
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	88 1f       	adc	r24, r24
    29e8:	da f7       	brpl	.-10     	; 0x29e0 <__floatsisf+0x62>
    29ea:	88 0f       	add	r24, r24
    29ec:	96 95       	lsr	r25
    29ee:	87 95       	ror	r24
    29f0:	97 f9       	bld	r25, 7
    29f2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000041cc <__fp_inf>:
    41cc:	97 f9       	bld	r25, 7
    41ce:	9f 67       	ori	r25, 0x7F	; 127
    41d0:	80 e8       	ldi	r24, 0x80	; 128
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000425a <__fp_nan>:
    425a:	9f ef       	ldi	r25, 0xFF	; 255
    425c:	80 ec       	ldi	r24, 0xC0	; 192
    425e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004130 <__fp_pscA>:
    4130:	00 24       	eor	r0, r0
    4132:	0a 94       	dec	r0
    4134:	16 16       	cp	r1, r22
    4136:	17 06       	cpc	r1, r23
    4138:	18 06       	cpc	r1, r24
    413a:	09 06       	cpc	r0, r25
    413c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000413e <__fp_pscB>:
    413e:	00 24       	eor	r0, r0
    4140:	0a 94       	dec	r0
    4142:	12 16       	cp	r1, r18
    4144:	13 06       	cpc	r1, r19
    4146:	14 06       	cpc	r1, r20
    4148:	05 06       	cpc	r0, r21
    414a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003d7a <__fp_round>:
    3d7a:	09 2e       	mov	r0, r25
    3d7c:	03 94       	inc	r0
    3d7e:	00 0c       	add	r0, r0
    3d80:	11 f4       	brne	.+4      	; 0x3d86 <__fp_round+0xc>
    3d82:	88 23       	and	r24, r24
    3d84:	52 f0       	brmi	.+20     	; 0x3d9a <__fp_round+0x20>
    3d86:	bb 0f       	add	r27, r27
    3d88:	40 f4       	brcc	.+16     	; 0x3d9a <__fp_round+0x20>
    3d8a:	bf 2b       	or	r27, r31
    3d8c:	11 f4       	brne	.+4      	; 0x3d92 <__fp_round+0x18>
    3d8e:	60 ff       	sbrs	r22, 0
    3d90:	04 c0       	rjmp	.+8      	; 0x3d9a <__fp_round+0x20>
    3d92:	6f 5f       	subi	r22, 0xFF	; 255
    3d94:	7f 4f       	sbci	r23, 0xFF	; 255
    3d96:	8f 4f       	sbci	r24, 0xFF	; 255
    3d98:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003634 <__fp_split3>:
    3634:	57 fd       	sbrc	r21, 7
    3636:	90 58       	subi	r25, 0x80	; 128
    3638:	44 0f       	add	r20, r20
    363a:	55 1f       	adc	r21, r21
    363c:	59 f0       	breq	.+22     	; 0x3654 <__fp_splitA+0x10>
    363e:	5f 3f       	cpi	r21, 0xFF	; 255
    3640:	71 f0       	breq	.+28     	; 0x365e <__fp_splitA+0x1a>
    3642:	47 95       	ror	r20

00003644 <__fp_splitA>:
    3644:	88 0f       	add	r24, r24
    3646:	97 fb       	bst	r25, 7
    3648:	99 1f       	adc	r25, r25
    364a:	61 f0       	breq	.+24     	; 0x3664 <__fp_splitA+0x20>
    364c:	9f 3f       	cpi	r25, 0xFF	; 255
    364e:	79 f0       	breq	.+30     	; 0x366e <__fp_splitA+0x2a>
    3650:	87 95       	ror	r24
    3652:	08 95       	ret
    3654:	12 16       	cp	r1, r18
    3656:	13 06       	cpc	r1, r19
    3658:	14 06       	cpc	r1, r20
    365a:	55 1f       	adc	r21, r21
    365c:	f2 cf       	rjmp	.-28     	; 0x3642 <__fp_split3+0xe>
    365e:	46 95       	lsr	r20
    3660:	f1 df       	rcall	.-30     	; 0x3644 <__fp_splitA>
    3662:	08 c0       	rjmp	.+16     	; 0x3674 <__fp_splitA+0x30>
    3664:	16 16       	cp	r1, r22
    3666:	17 06       	cpc	r1, r23
    3668:	18 06       	cpc	r1, r24
    366a:	99 1f       	adc	r25, r25
    366c:	f1 cf       	rjmp	.-30     	; 0x3650 <__fp_splitA+0xc>
    366e:	86 95       	lsr	r24
    3670:	71 05       	cpc	r23, r1
    3672:	61 05       	cpc	r22, r1
    3674:	08 94       	sec
    3676:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000414c <__fp_zero>:
    414c:	e8 94       	clt

0000414e <__fp_szero>:
    414e:	bb 27       	eor	r27, r27
    4150:	66 27       	eor	r22, r22
    4152:	77 27       	eor	r23, r23
    4154:	cb 01       	movw	r24, r22
    4156:	97 f9       	bld	r25, 7
    4158:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004238 <__mulsf3>:
    4238:	0e 94 23 10 	call	0x2046	; 0x2046 <__mulsf3x>
    423c:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002046 <__mulsf3x>:
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <__mulsf3x+0x20>
    2048:	0e 94 98 20 	call	0x4130	; 0x4130 <__fp_pscA>
    204c:	38 f0       	brcs	.+14     	; 0x205c <__mulsf3x+0x16>
    204e:	0e 94 9f 20 	call	0x413e	; 0x413e <__fp_pscB>
    2052:	20 f0       	brcs	.+8      	; 0x205c <__mulsf3x+0x16>
    2054:	95 23       	and	r25, r21
    2056:	11 f0       	breq	.+4      	; 0x205c <__mulsf3x+0x16>
    2058:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_inf>
    205c:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__fp_nan>
    2060:	11 24       	eor	r1, r1
    2062:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__fp_szero>
    2066:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__fp_split3>
    206a:	70 f3       	brcs	.-36     	; 0x2048 <__mulsf3x+0x2>

0000206c <__mulsf3_pse>:
    206c:	95 9f       	mul	r25, r21
    206e:	c1 f3       	breq	.-16     	; 0x2060 <__mulsf3x+0x1a>
    2070:	95 0f       	add	r25, r21
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	55 1f       	adc	r21, r21
    2076:	62 9f       	mul	r22, r18
    2078:	f0 01       	movw	r30, r0
    207a:	72 9f       	mul	r23, r18
    207c:	bb 27       	eor	r27, r27
    207e:	f0 0d       	add	r31, r0
    2080:	b1 1d       	adc	r27, r1
    2082:	63 9f       	mul	r22, r19
    2084:	aa 27       	eor	r26, r26
    2086:	f0 0d       	add	r31, r0
    2088:	b1 1d       	adc	r27, r1
    208a:	aa 1f       	adc	r26, r26
    208c:	64 9f       	mul	r22, r20
    208e:	66 27       	eor	r22, r22
    2090:	b0 0d       	add	r27, r0
    2092:	a1 1d       	adc	r26, r1
    2094:	66 1f       	adc	r22, r22
    2096:	82 9f       	mul	r24, r18
    2098:	22 27       	eor	r18, r18
    209a:	b0 0d       	add	r27, r0
    209c:	a1 1d       	adc	r26, r1
    209e:	62 1f       	adc	r22, r18
    20a0:	73 9f       	mul	r23, r19
    20a2:	b0 0d       	add	r27, r0
    20a4:	a1 1d       	adc	r26, r1
    20a6:	62 1f       	adc	r22, r18
    20a8:	83 9f       	mul	r24, r19
    20aa:	a0 0d       	add	r26, r0
    20ac:	61 1d       	adc	r22, r1
    20ae:	22 1f       	adc	r18, r18
    20b0:	74 9f       	mul	r23, r20
    20b2:	33 27       	eor	r19, r19
    20b4:	a0 0d       	add	r26, r0
    20b6:	61 1d       	adc	r22, r1
    20b8:	23 1f       	adc	r18, r19
    20ba:	84 9f       	mul	r24, r20
    20bc:	60 0d       	add	r22, r0
    20be:	21 1d       	adc	r18, r1
    20c0:	82 2f       	mov	r24, r18
    20c2:	76 2f       	mov	r23, r22
    20c4:	6a 2f       	mov	r22, r26
    20c6:	11 24       	eor	r1, r1
    20c8:	9f 57       	subi	r25, 0x7F	; 127
    20ca:	50 40       	sbci	r21, 0x00	; 0
    20cc:	9a f0       	brmi	.+38     	; 0x20f4 <__mulsf3_pse+0x88>
    20ce:	f1 f0       	breq	.+60     	; 0x210c <__mulsf3_pse+0xa0>
    20d0:	88 23       	and	r24, r24
    20d2:	4a f0       	brmi	.+18     	; 0x20e6 <__mulsf3_pse+0x7a>
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	bb 1f       	adc	r27, r27
    20da:	66 1f       	adc	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	91 50       	subi	r25, 0x01	; 1
    20e2:	50 40       	sbci	r21, 0x00	; 0
    20e4:	a9 f7       	brne	.-22     	; 0x20d0 <__mulsf3_pse+0x64>
    20e6:	9e 3f       	cpi	r25, 0xFE	; 254
    20e8:	51 05       	cpc	r21, r1
    20ea:	80 f0       	brcs	.+32     	; 0x210c <__mulsf3_pse+0xa0>
    20ec:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_inf>
    20f0:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__fp_szero>
    20f4:	5f 3f       	cpi	r21, 0xFF	; 255
    20f6:	e4 f3       	brlt	.-8      	; 0x20f0 <__mulsf3_pse+0x84>
    20f8:	98 3e       	cpi	r25, 0xE8	; 232
    20fa:	d4 f3       	brlt	.-12     	; 0x20f0 <__mulsf3_pse+0x84>
    20fc:	86 95       	lsr	r24
    20fe:	77 95       	ror	r23
    2100:	67 95       	ror	r22
    2102:	b7 95       	ror	r27
    2104:	f7 95       	ror	r31
    2106:	e7 95       	ror	r30
    2108:	9f 5f       	subi	r25, 0xFF	; 255
    210a:	c1 f7       	brne	.-16     	; 0x20fc <__mulsf3_pse+0x90>
    210c:	fe 2b       	or	r31, r30
    210e:	88 0f       	add	r24, r24
    2110:	91 1d       	adc	r25, r1
    2112:	96 95       	lsr	r25
    2114:	87 95       	ror	r24
    2116:	97 f9       	bld	r25, 7
    2118:	08 95       	ret

Disassembly of section .text.avrlibc:

000005ea <vfprintf>:
 5ea:	a4 e1       	ldi	r26, 0x14	; 20
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	eb ef       	ldi	r30, 0xFB	; 251
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__prologue_saves__>
 5f6:	6c 01       	movw	r12, r24
 5f8:	1a 01       	movw	r2, r20
 5fa:	46 2e       	mov	r4, r22
 5fc:	59 01       	movw	r10, r18
 5fe:	fc 01       	movw	r30, r24
 600:	10 86       	std	Z+8, r1	; 0x08
 602:	17 82       	std	Z+7, r1	; 0x07
 604:	84 81       	ldd	r24, Z+4	; 0x04
 606:	81 ff       	sbrs	r24, 1
 608:	62 c3       	rjmp	.+1732   	; 0xcce <__EEPROM_REGION_LENGTH__+0x4ce>
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	9d 87       	std	Y+13, r25	; 0x0d
 610:	8c 87       	std	Y+12, r24	; 0x0c
 612:	a0 e8       	ldi	r26, 0x80	; 128
 614:	8a 8b       	std	Y+18, r24	; 0x12
 616:	9b 8b       	std	Y+19, r25	; 0x13
 618:	ac 8b       	std	Y+20, r26	; 0x14
 61a:	f1 01       	movw	r30, r2
 61c:	84 91       	lpm	r24, Z
 61e:	47 fc       	sbrc	r4, 7
 620:	80 81       	ld	r24, Z
 622:	88 23       	and	r24, r24
 624:	09 f4       	brne	.+2      	; 0x628 <vfprintf+0x3e>
 626:	4f c3       	rjmp	.+1694   	; 0xcc6 <__EEPROM_REGION_LENGTH__+0x4c6>
 628:	44 2d       	mov	r20, r4
 62a:	91 01       	movw	r18, r2
 62c:	2f 5f       	subi	r18, 0xFF	; 255
 62e:	3f 4f       	sbci	r19, 0xFF	; 255
 630:	4f 4f       	sbci	r20, 0xFF	; 255
 632:	85 32       	cpi	r24, 0x25	; 37
 634:	19 f0       	breq	.+6      	; 0x63c <vfprintf+0x52>
 636:	19 01       	movw	r2, r18
 638:	44 2e       	mov	r4, r20
 63a:	0a c0       	rjmp	.+20     	; 0x650 <vfprintf+0x66>
 63c:	f9 01       	movw	r30, r18
 63e:	84 91       	lpm	r24, Z
 640:	47 fd       	sbrc	r20, 7
 642:	80 81       	ld	r24, Z
 644:	92 e0       	ldi	r25, 0x02	; 2
 646:	29 0e       	add	r2, r25
 648:	31 1c       	adc	r3, r1
 64a:	41 1c       	adc	r4, r1
 64c:	85 32       	cpi	r24, 0x25	; 37
 64e:	49 f4       	brne	.+18     	; 0x662 <vfprintf+0x78>
 650:	b6 01       	movw	r22, r12
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 658:	bf 86       	std	Y+15, r11	; 0x0f
 65a:	ae 86       	std	Y+14, r10	; 0x0e
 65c:	ae 84       	ldd	r10, Y+14	; 0x0e
 65e:	bf 84       	ldd	r11, Y+15	; 0x0f
 660:	dc cf       	rjmp	.-72     	; 0x61a <vfprintf+0x30>
 662:	10 e0       	ldi	r17, 0x00	; 0
 664:	f1 2c       	mov	r15, r1
 666:	00 e0       	ldi	r16, 0x00	; 0
 668:	00 32       	cpi	r16, 0x20	; 32
 66a:	a0 f4       	brcc	.+40     	; 0x694 <vfprintf+0xaa>
 66c:	8b 32       	cpi	r24, 0x2B	; 43
 66e:	69 f0       	breq	.+26     	; 0x68a <vfprintf+0xa0>
 670:	30 f4       	brcc	.+12     	; 0x67e <vfprintf+0x94>
 672:	80 32       	cpi	r24, 0x20	; 32
 674:	59 f0       	breq	.+22     	; 0x68c <vfprintf+0xa2>
 676:	83 32       	cpi	r24, 0x23	; 35
 678:	69 f4       	brne	.+26     	; 0x694 <vfprintf+0xaa>
 67a:	00 61       	ori	r16, 0x10	; 16
 67c:	2c c0       	rjmp	.+88     	; 0x6d6 <vfprintf+0xec>
 67e:	8d 32       	cpi	r24, 0x2D	; 45
 680:	39 f0       	breq	.+14     	; 0x690 <vfprintf+0xa6>
 682:	80 33       	cpi	r24, 0x30	; 48
 684:	39 f4       	brne	.+14     	; 0x694 <vfprintf+0xaa>
 686:	01 60       	ori	r16, 0x01	; 1
 688:	26 c0       	rjmp	.+76     	; 0x6d6 <vfprintf+0xec>
 68a:	02 60       	ori	r16, 0x02	; 2
 68c:	04 60       	ori	r16, 0x04	; 4
 68e:	23 c0       	rjmp	.+70     	; 0x6d6 <vfprintf+0xec>
 690:	08 60       	ori	r16, 0x08	; 8
 692:	21 c0       	rjmp	.+66     	; 0x6d6 <vfprintf+0xec>
 694:	07 fd       	sbrc	r16, 7
 696:	29 c0       	rjmp	.+82     	; 0x6ea <vfprintf+0x100>
 698:	90 ed       	ldi	r25, 0xD0	; 208
 69a:	98 0f       	add	r25, r24
 69c:	9a 30       	cpi	r25, 0x0A	; 10
 69e:	78 f4       	brcc	.+30     	; 0x6be <vfprintf+0xd4>
 6a0:	06 ff       	sbrs	r16, 6
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <vfprintf+0xc6>
 6a4:	aa e0       	ldi	r26, 0x0A	; 10
 6a6:	1a 9f       	mul	r17, r26
 6a8:	90 0d       	add	r25, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	19 2f       	mov	r17, r25
 6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <vfprintf+0xec>
 6b0:	ea e0       	ldi	r30, 0x0A	; 10
 6b2:	fe 9e       	mul	r15, r30
 6b4:	90 0d       	add	r25, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	f9 2e       	mov	r15, r25
 6ba:	00 62       	ori	r16, 0x20	; 32
 6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <vfprintf+0xec>
 6be:	8e 32       	cpi	r24, 0x2E	; 46
 6c0:	21 f4       	brne	.+8      	; 0x6ca <vfprintf+0xe0>
 6c2:	06 fd       	sbrc	r16, 6
 6c4:	00 c3       	rjmp	.+1536   	; 0xcc6 <__EEPROM_REGION_LENGTH__+0x4c6>
 6c6:	00 64       	ori	r16, 0x40	; 64
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <vfprintf+0xec>
 6ca:	8c 36       	cpi	r24, 0x6C	; 108
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <vfprintf+0xe8>
 6ce:	00 68       	ori	r16, 0x80	; 128
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <vfprintf+0xec>
 6d2:	88 36       	cpi	r24, 0x68	; 104
 6d4:	51 f4       	brne	.+20     	; 0x6ea <vfprintf+0x100>
 6d6:	f1 01       	movw	r30, r2
 6d8:	84 91       	lpm	r24, Z
 6da:	47 fc       	sbrc	r4, 7
 6dc:	80 81       	ld	r24, Z
 6de:	ff ef       	ldi	r31, 0xFF	; 255
 6e0:	2f 1a       	sub	r2, r31
 6e2:	3f 0a       	sbc	r3, r31
 6e4:	4f 0a       	sbc	r4, r31
 6e6:	81 11       	cpse	r24, r1
 6e8:	bf cf       	rjmp	.-130    	; 0x668 <vfprintf+0x7e>
 6ea:	9b eb       	ldi	r25, 0xBB	; 187
 6ec:	98 0f       	add	r25, r24
 6ee:	93 30       	cpi	r25, 0x03	; 3
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <vfprintf+0x10e>
 6f2:	00 61       	ori	r16, 0x10	; 16
 6f4:	80 5e       	subi	r24, 0xE0	; 224
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <vfprintf+0x11a>
 6f8:	9b e9       	ldi	r25, 0x9B	; 155
 6fa:	98 0f       	add	r25, r24
 6fc:	93 30       	cpi	r25, 0x03	; 3
 6fe:	08 f0       	brcs	.+2      	; 0x702 <vfprintf+0x118>
 700:	66 c1       	rjmp	.+716    	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 702:	0f 7e       	andi	r16, 0xEF	; 239
 704:	06 ff       	sbrs	r16, 6
 706:	16 e0       	ldi	r17, 0x06	; 6
 708:	0f 73       	andi	r16, 0x3F	; 63
 70a:	70 2e       	mov	r7, r16
 70c:	85 36       	cpi	r24, 0x65	; 101
 70e:	21 f4       	brne	.+8      	; 0x718 <vfprintf+0x12e>
 710:	20 2f       	mov	r18, r16
 712:	20 64       	ori	r18, 0x40	; 64
 714:	72 2e       	mov	r7, r18
 716:	08 c0       	rjmp	.+16     	; 0x728 <vfprintf+0x13e>
 718:	86 36       	cpi	r24, 0x66	; 102
 71a:	21 f4       	brne	.+8      	; 0x724 <vfprintf+0x13a>
 71c:	80 2f       	mov	r24, r16
 71e:	80 68       	ori	r24, 0x80	; 128
 720:	78 2e       	mov	r7, r24
 722:	02 c0       	rjmp	.+4      	; 0x728 <vfprintf+0x13e>
 724:	11 11       	cpse	r17, r1
 726:	11 50       	subi	r17, 0x01	; 1
 728:	77 fe       	sbrs	r7, 7
 72a:	07 c0       	rjmp	.+14     	; 0x73a <vfprintf+0x150>
 72c:	1c 33       	cpi	r17, 0x3C	; 60
 72e:	50 f4       	brcc	.+20     	; 0x744 <vfprintf+0x15a>
 730:	ee 24       	eor	r14, r14
 732:	e3 94       	inc	r14
 734:	e1 0e       	add	r14, r17
 736:	27 e0       	ldi	r18, 0x07	; 7
 738:	0b c0       	rjmp	.+22     	; 0x750 <vfprintf+0x166>
 73a:	18 30       	cpi	r17, 0x08	; 8
 73c:	38 f0       	brcs	.+14     	; 0x74c <vfprintf+0x162>
 73e:	27 e0       	ldi	r18, 0x07	; 7
 740:	17 e0       	ldi	r17, 0x07	; 7
 742:	05 c0       	rjmp	.+10     	; 0x74e <vfprintf+0x164>
 744:	27 e0       	ldi	r18, 0x07	; 7
 746:	6c e3       	ldi	r22, 0x3C	; 60
 748:	e6 2e       	mov	r14, r22
 74a:	02 c0       	rjmp	.+4      	; 0x750 <vfprintf+0x166>
 74c:	21 2f       	mov	r18, r17
 74e:	e1 2c       	mov	r14, r1
 750:	f5 01       	movw	r30, r10
 752:	34 96       	adiw	r30, 0x04	; 4
 754:	ff 87       	std	Y+15, r31	; 0x0f
 756:	ee 87       	std	Y+14, r30	; 0x0e
 758:	f5 01       	movw	r30, r10
 75a:	60 81       	ld	r22, Z
 75c:	71 81       	ldd	r23, Z+1	; 0x01
 75e:	82 81       	ldd	r24, Z+2	; 0x02
 760:	93 81       	ldd	r25, Z+3	; 0x03
 762:	0e 2d       	mov	r16, r14
 764:	ae 01       	movw	r20, r28
 766:	4f 5f       	subi	r20, 0xFF	; 255
 768:	5f 4f       	sbci	r21, 0xFF	; 255
 76a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__ftoa_engine>
 76e:	5c 01       	movw	r10, r24
 770:	59 80       	ldd	r5, Y+1	; 0x01
 772:	50 fe       	sbrs	r5, 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x190>
 776:	53 fe       	sbrs	r5, 3
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x19c>
 77a:	71 fc       	sbrc	r7, 1
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0x1a0>
 77e:	72 fe       	sbrs	r7, 2
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x1a4>
 782:	00 e2       	ldi	r16, 0x20	; 32
 784:	05 c0       	rjmp	.+10     	; 0x790 <vfprintf+0x1a6>
 786:	0d e2       	ldi	r16, 0x2D	; 45
 788:	03 c0       	rjmp	.+6      	; 0x790 <vfprintf+0x1a6>
 78a:	0b e2       	ldi	r16, 0x2B	; 43
 78c:	01 c0       	rjmp	.+2      	; 0x790 <vfprintf+0x1a6>
 78e:	00 e0       	ldi	r16, 0x00	; 0
 790:	85 2d       	mov	r24, r5
 792:	8c 70       	andi	r24, 0x0C	; 12
 794:	19 f0       	breq	.+6      	; 0x79c <vfprintf+0x1b2>
 796:	01 11       	cpse	r16, r1
 798:	73 c2       	rjmp	.+1254   	; 0xc80 <__EEPROM_REGION_LENGTH__+0x480>
 79a:	be c2       	rjmp	.+1404   	; 0xd18 <__EEPROM_REGION_LENGTH__+0x518>
 79c:	77 fe       	sbrs	r7, 7
 79e:	0f c0       	rjmp	.+30     	; 0x7be <vfprintf+0x1d4>
 7a0:	ea 0c       	add	r14, r10
 7a2:	54 fe       	sbrs	r5, 4
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <vfprintf+0x1c4>
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	81 33       	cpi	r24, 0x31	; 49
 7aa:	09 f4       	brne	.+2      	; 0x7ae <vfprintf+0x1c4>
 7ac:	ea 94       	dec	r14
 7ae:	1e 14       	cp	r1, r14
 7b0:	74 f5       	brge	.+92     	; 0x80e <__EEPROM_REGION_LENGTH__+0xe>
 7b2:	28 e0       	ldi	r18, 0x08	; 8
 7b4:	2e 15       	cp	r18, r14
 7b6:	78 f5       	brcc	.+94     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 7b8:	38 e0       	ldi	r19, 0x08	; 8
 7ba:	e3 2e       	mov	r14, r19
 7bc:	2c c0       	rjmp	.+88     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 7be:	76 fc       	sbrc	r7, 6
 7c0:	2a c0       	rjmp	.+84     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 7c2:	81 2f       	mov	r24, r17
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	8a 15       	cp	r24, r10
 7c8:	9b 05       	cpc	r25, r11
 7ca:	9c f0       	brlt	.+38     	; 0x7f2 <vfprintf+0x208>
 7cc:	8c ef       	ldi	r24, 0xFC	; 252
 7ce:	a8 16       	cp	r10, r24
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	b8 06       	cpc	r11, r24
 7d4:	74 f0       	brlt	.+28     	; 0x7f2 <vfprintf+0x208>
 7d6:	97 2d       	mov	r25, r7
 7d8:	90 68       	ori	r25, 0x80	; 128
 7da:	79 2e       	mov	r7, r25
 7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <vfprintf+0x208>
 7de:	e2 e0       	ldi	r30, 0x02	; 2
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	ec 0f       	add	r30, r28
 7e4:	fd 1f       	adc	r31, r29
 7e6:	e1 0f       	add	r30, r17
 7e8:	f1 1d       	adc	r31, r1
 7ea:	80 81       	ld	r24, Z
 7ec:	80 33       	cpi	r24, 0x30	; 48
 7ee:	19 f4       	brne	.+6      	; 0x7f6 <vfprintf+0x20c>
 7f0:	11 50       	subi	r17, 0x01	; 1
 7f2:	11 11       	cpse	r17, r1
 7f4:	f4 cf       	rjmp	.-24     	; 0x7de <vfprintf+0x1f4>
 7f6:	77 fe       	sbrs	r7, 7
 7f8:	0e c0       	rjmp	.+28     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 7fa:	ee 24       	eor	r14, r14
 7fc:	e3 94       	inc	r14
 7fe:	e1 0e       	add	r14, r17
 800:	81 2f       	mov	r24, r17
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	a8 16       	cp	r10, r24
 806:	b9 06       	cpc	r11, r25
 808:	2c f4       	brge	.+10     	; 0x814 <__EEPROM_REGION_LENGTH__+0x14>
 80a:	1a 19       	sub	r17, r10
 80c:	04 c0       	rjmp	.+8      	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 80e:	ee 24       	eor	r14, r14
 810:	e3 94       	inc	r14
 812:	01 c0       	rjmp	.+2      	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 814:	10 e0       	ldi	r17, 0x00	; 0
 816:	77 fe       	sbrs	r7, 7
 818:	06 c0       	rjmp	.+12     	; 0x826 <__EEPROM_REGION_LENGTH__+0x26>
 81a:	1a 14       	cp	r1, r10
 81c:	1b 04       	cpc	r1, r11
 81e:	34 f4       	brge	.+12     	; 0x82c <__EEPROM_REGION_LENGTH__+0x2c>
 820:	c5 01       	movw	r24, r10
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	05 c0       	rjmp	.+10     	; 0x830 <__EEPROM_REGION_LENGTH__+0x30>
 826:	85 e0       	ldi	r24, 0x05	; 5
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__EEPROM_REGION_LENGTH__+0x30>
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	01 11       	cpse	r16, r1
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	11 23       	and	r17, r17
 836:	31 f0       	breq	.+12     	; 0x844 <__EEPROM_REGION_LENGTH__+0x44>
 838:	21 2f       	mov	r18, r17
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	2f 5f       	subi	r18, 0xFF	; 255
 83e:	3f 4f       	sbci	r19, 0xFF	; 255
 840:	82 0f       	add	r24, r18
 842:	93 1f       	adc	r25, r19
 844:	2f 2d       	mov	r18, r15
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	82 17       	cp	r24, r18
 84a:	93 07       	cpc	r25, r19
 84c:	14 f4       	brge	.+4      	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
 84e:	f8 1a       	sub	r15, r24
 850:	01 c0       	rjmp	.+2      	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 852:	f1 2c       	mov	r15, r1
 854:	87 2d       	mov	r24, r7
 856:	89 70       	andi	r24, 0x09	; 9
 858:	49 f4       	brne	.+18     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 85a:	ff 20       	and	r15, r15
 85c:	39 f0       	breq	.+14     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 85e:	b6 01       	movw	r22, r12
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 868:	fa 94       	dec	r15
 86a:	f7 cf       	rjmp	.-18     	; 0x85a <__EEPROM_REGION_LENGTH__+0x5a>
 86c:	00 23       	and	r16, r16
 86e:	29 f0       	breq	.+10     	; 0x87a <__EEPROM_REGION_LENGTH__+0x7a>
 870:	b6 01       	movw	r22, r12
 872:	80 2f       	mov	r24, r16
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 87a:	73 fc       	sbrc	r7, 3
 87c:	09 c0       	rjmp	.+18     	; 0x890 <__EEPROM_REGION_LENGTH__+0x90>
 87e:	ff 20       	and	r15, r15
 880:	39 f0       	breq	.+14     	; 0x890 <__EEPROM_REGION_LENGTH__+0x90>
 882:	b6 01       	movw	r22, r12
 884:	80 e3       	ldi	r24, 0x30	; 48
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 88c:	fa 94       	dec	r15
 88e:	f7 cf       	rjmp	.-18     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 890:	77 fe       	sbrs	r7, 7
 892:	49 c0       	rjmp	.+146    	; 0x926 <__EEPROM_REGION_LENGTH__+0x126>
 894:	35 01       	movw	r6, r10
 896:	b7 fe       	sbrs	r11, 7
 898:	02 c0       	rjmp	.+4      	; 0x89e <__EEPROM_REGION_LENGTH__+0x9e>
 89a:	61 2c       	mov	r6, r1
 89c:	71 2c       	mov	r7, r1
 89e:	c5 01       	movw	r24, r10
 8a0:	86 19       	sub	r24, r6
 8a2:	97 09       	sbc	r25, r7
 8a4:	88 24       	eor	r8, r8
 8a6:	83 94       	inc	r8
 8a8:	91 2c       	mov	r9, r1
 8aa:	8c 0e       	add	r8, r28
 8ac:	9d 1e       	adc	r9, r29
 8ae:	88 0e       	add	r8, r24
 8b0:	99 1e       	adc	r9, r25
 8b2:	f5 01       	movw	r30, r10
 8b4:	ee 19       	sub	r30, r14
 8b6:	f1 09       	sbc	r31, r1
 8b8:	f9 8b       	std	Y+17, r31	; 0x11
 8ba:	e8 8b       	std	Y+16, r30	; 0x10
 8bc:	01 2f       	mov	r16, r17
 8be:	10 e0       	ldi	r17, 0x00	; 0
 8c0:	11 95       	neg	r17
 8c2:	01 95       	neg	r16
 8c4:	11 09       	sbc	r17, r1
 8c6:	ff ef       	ldi	r31, 0xFF	; 255
 8c8:	6f 16       	cp	r6, r31
 8ca:	7f 06       	cpc	r7, r31
 8cc:	29 f4       	brne	.+10     	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8ce:	b6 01       	movw	r22, r12
 8d0:	8e e2       	ldi	r24, 0x2E	; 46
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 8d8:	a6 14       	cp	r10, r6
 8da:	b7 04       	cpc	r11, r7
 8dc:	44 f0       	brlt	.+16     	; 0x8ee <__EEPROM_REGION_LENGTH__+0xee>
 8de:	88 89       	ldd	r24, Y+16	; 0x10
 8e0:	99 89       	ldd	r25, Y+17	; 0x11
 8e2:	86 15       	cp	r24, r6
 8e4:	97 05       	cpc	r25, r7
 8e6:	1c f4       	brge	.+6      	; 0x8ee <__EEPROM_REGION_LENGTH__+0xee>
 8e8:	f4 01       	movw	r30, r8
 8ea:	81 81       	ldd	r24, Z+1	; 0x01
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <__EEPROM_REGION_LENGTH__+0xf0>
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	6f 1a       	sub	r6, r31
 8f4:	71 08       	sbc	r7, r1
 8f6:	2f ef       	ldi	r18, 0xFF	; 255
 8f8:	82 1a       	sub	r8, r18
 8fa:	92 0a       	sbc	r9, r18
 8fc:	60 16       	cp	r6, r16
 8fe:	71 06       	cpc	r7, r17
 900:	2c f0       	brlt	.+10     	; 0x90c <__EEPROM_REGION_LENGTH__+0x10c>
 902:	b6 01       	movw	r22, r12
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 90a:	dd cf       	rjmp	.-70     	; 0x8c6 <__EEPROM_REGION_LENGTH__+0xc6>
 90c:	a6 14       	cp	r10, r6
 90e:	b7 04       	cpc	r11, r7
 910:	39 f4       	brne	.+14     	; 0x920 <__EEPROM_REGION_LENGTH__+0x120>
 912:	9a 81       	ldd	r25, Y+2	; 0x02
 914:	96 33       	cpi	r25, 0x36	; 54
 916:	18 f4       	brcc	.+6      	; 0x91e <__EEPROM_REGION_LENGTH__+0x11e>
 918:	95 33       	cpi	r25, 0x35	; 53
 91a:	11 f4       	brne	.+4      	; 0x920 <__EEPROM_REGION_LENGTH__+0x120>
 91c:	54 fe       	sbrs	r5, 4
 91e:	81 e3       	ldi	r24, 0x31	; 49
 920:	b6 01       	movw	r22, r12
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	51 c0       	rjmp	.+162    	; 0x9c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	81 33       	cpi	r24, 0x31	; 49
 92a:	19 f0       	breq	.+6      	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 92c:	95 2d       	mov	r25, r5
 92e:	9f 7e       	andi	r25, 0xEF	; 239
 930:	59 2e       	mov	r5, r25
 932:	b6 01       	movw	r22, r12
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 93a:	11 11       	cpse	r17, r1
 93c:	05 c0       	rjmp	.+10     	; 0x948 <__EEPROM_REGION_LENGTH__+0x148>
 93e:	74 fc       	sbrc	r7, 4
 940:	1c c0       	rjmp	.+56     	; 0x97a <__EEPROM_REGION_LENGTH__+0x17a>
 942:	85 e6       	ldi	r24, 0x65	; 101
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	1b c0       	rjmp	.+54     	; 0x97e <__EEPROM_REGION_LENGTH__+0x17e>
 948:	b6 01       	movw	r22, r12
 94a:	8e e2       	ldi	r24, 0x2E	; 46
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 952:	02 e0       	ldi	r16, 0x02	; 2
 954:	01 0f       	add	r16, r17
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	11 e0       	ldi	r17, 0x01	; 1
 95a:	18 0f       	add	r17, r24
 95c:	e1 e0       	ldi	r30, 0x01	; 1
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	ec 0f       	add	r30, r28
 962:	fd 1f       	adc	r31, r29
 964:	e8 0f       	add	r30, r24
 966:	f1 1d       	adc	r31, r1
 968:	80 81       	ld	r24, Z
 96a:	b6 01       	movw	r22, r12
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 972:	81 2f       	mov	r24, r17
 974:	10 13       	cpse	r17, r16
 976:	f0 cf       	rjmp	.-32     	; 0x958 <__EEPROM_REGION_LENGTH__+0x158>
 978:	e2 cf       	rjmp	.-60     	; 0x93e <__EEPROM_REGION_LENGTH__+0x13e>
 97a:	85 e4       	ldi	r24, 0x45	; 69
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	b6 01       	movw	r22, r12
 980:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 984:	b7 fc       	sbrc	r11, 7
 986:	05 c0       	rjmp	.+10     	; 0x992 <__EEPROM_REGION_LENGTH__+0x192>
 988:	a1 14       	cp	r10, r1
 98a:	b1 04       	cpc	r11, r1
 98c:	39 f4       	brne	.+14     	; 0x99c <__EEPROM_REGION_LENGTH__+0x19c>
 98e:	54 fe       	sbrs	r5, 4
 990:	05 c0       	rjmp	.+10     	; 0x99c <__EEPROM_REGION_LENGTH__+0x19c>
 992:	b1 94       	neg	r11
 994:	a1 94       	neg	r10
 996:	b1 08       	sbc	r11, r1
 998:	8d e2       	ldi	r24, 0x2D	; 45
 99a:	01 c0       	rjmp	.+2      	; 0x99e <__EEPROM_REGION_LENGTH__+0x19e>
 99c:	8b e2       	ldi	r24, 0x2B	; 43
 99e:	b6 01       	movw	r22, r12
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 9a6:	80 e3       	ldi	r24, 0x30	; 48
 9a8:	ea e0       	ldi	r30, 0x0A	; 10
 9aa:	ae 16       	cp	r10, r30
 9ac:	b1 04       	cpc	r11, r1
 9ae:	2c f0       	brlt	.+10     	; 0x9ba <__EEPROM_REGION_LENGTH__+0x1ba>
 9b0:	8f 5f       	subi	r24, 0xFF	; 255
 9b2:	aa e0       	ldi	r26, 0x0A	; 10
 9b4:	aa 1a       	sub	r10, r26
 9b6:	b1 08       	sbc	r11, r1
 9b8:	f7 cf       	rjmp	.-18     	; 0x9a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 9ba:	b6 01       	movw	r22, r12
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 9c2:	b6 01       	movw	r22, r12
 9c4:	c5 01       	movw	r24, r10
 9c6:	c0 96       	adiw	r24, 0x30	; 48
 9c8:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 9cc:	72 c1       	rjmp	.+740    	; 0xcb2 <__EEPROM_REGION_LENGTH__+0x4b2>
 9ce:	83 36       	cpi	r24, 0x63	; 99
 9d0:	31 f0       	breq	.+12     	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 9d2:	83 37       	cpi	r24, 0x73	; 115
 9d4:	91 f0       	breq	.+36     	; 0x9fa <__EEPROM_REGION_LENGTH__+0x1fa>
 9d6:	83 35       	cpi	r24, 0x53	; 83
 9d8:	09 f0       	breq	.+2      	; 0x9dc <__EEPROM_REGION_LENGTH__+0x1dc>
 9da:	5d c0       	rjmp	.+186    	; 0xa96 <__EEPROM_REGION_LENGTH__+0x296>
 9dc:	24 c0       	rjmp	.+72     	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 9de:	c5 01       	movw	r24, r10
 9e0:	02 96       	adiw	r24, 0x02	; 2
 9e2:	9f 87       	std	Y+15, r25	; 0x0f
 9e4:	8e 87       	std	Y+14, r24	; 0x0e
 9e6:	f5 01       	movw	r30, r10
 9e8:	80 81       	ld	r24, Z
 9ea:	89 83       	std	Y+1, r24	; 0x01
 9ec:	6a 88       	ldd	r6, Y+18	; 0x12
 9ee:	7b 88       	ldd	r7, Y+19	; 0x13
 9f0:	8c 88       	ldd	r8, Y+20	; 0x14
 9f2:	aa 24       	eor	r10, r10
 9f4:	a3 94       	inc	r10
 9f6:	b1 2c       	mov	r11, r1
 9f8:	14 c0       	rjmp	.+40     	; 0xa22 <__EEPROM_REGION_LENGTH__+0x222>
 9fa:	c5 01       	movw	r24, r10
 9fc:	03 96       	adiw	r24, 0x03	; 3
 9fe:	9f 87       	std	Y+15, r25	; 0x0f
 a00:	8e 87       	std	Y+14, r24	; 0x0e
 a02:	f5 01       	movw	r30, r10
 a04:	60 80       	ld	r6, Z
 a06:	71 80       	ldd	r7, Z+1	; 0x01
 a08:	82 80       	ldd	r8, Z+2	; 0x02
 a0a:	06 ff       	sbrs	r16, 6
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__EEPROM_REGION_LENGTH__+0x214>
 a0e:	41 2f       	mov	r20, r17
 a10:	50 e0       	ldi	r21, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <__EEPROM_REGION_LENGTH__+0x218>
 a14:	4f ef       	ldi	r20, 0xFF	; 255
 a16:	5f ef       	ldi	r21, 0xFF	; 255
 a18:	88 2d       	mov	r24, r8
 a1a:	b3 01       	movw	r22, r6
 a1c:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <strnlen>
 a20:	5c 01       	movw	r10, r24
 a22:	0f 77       	andi	r16, 0x7F	; 127
 a24:	15 c0       	rjmp	.+42     	; 0xa50 <__EEPROM_REGION_LENGTH__+0x250>
 a26:	c5 01       	movw	r24, r10
 a28:	03 96       	adiw	r24, 0x03	; 3
 a2a:	9f 87       	std	Y+15, r25	; 0x0f
 a2c:	8e 87       	std	Y+14, r24	; 0x0e
 a2e:	f5 01       	movw	r30, r10
 a30:	60 80       	ld	r6, Z
 a32:	71 80       	ldd	r7, Z+1	; 0x01
 a34:	82 80       	ldd	r8, Z+2	; 0x02
 a36:	06 ff       	sbrs	r16, 6
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a3a:	41 2f       	mov	r20, r17
 a3c:	50 e0       	ldi	r21, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__EEPROM_REGION_LENGTH__+0x244>
 a40:	4f ef       	ldi	r20, 0xFF	; 255
 a42:	5f ef       	ldi	r21, 0xFF	; 255
 a44:	88 2d       	mov	r24, r8
 a46:	b3 01       	movw	r22, r6
 a48:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <strnlen>
 a4c:	5c 01       	movw	r10, r24
 a4e:	00 68       	ori	r16, 0x80	; 128
 a50:	03 fd       	sbrc	r16, 3
 a52:	1d c0       	rjmp	.+58     	; 0xa8e <__EEPROM_REGION_LENGTH__+0x28e>
 a54:	8f 2d       	mov	r24, r15
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	a8 16       	cp	r10, r24
 a5a:	b9 06       	cpc	r11, r25
 a5c:	c0 f4       	brcc	.+48     	; 0xa8e <__EEPROM_REGION_LENGTH__+0x28e>
 a5e:	b6 01       	movw	r22, r12
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 a68:	fa 94       	dec	r15
 a6a:	f4 cf       	rjmp	.-24     	; 0xa54 <__EEPROM_REGION_LENGTH__+0x254>
 a6c:	f3 01       	movw	r30, r6
 a6e:	84 91       	lpm	r24, Z
 a70:	87 fc       	sbrc	r8, 7
 a72:	80 81       	ld	r24, Z
 a74:	ff ef       	ldi	r31, 0xFF	; 255
 a76:	6f 1a       	sub	r6, r31
 a78:	7f 0a       	sbc	r7, r31
 a7a:	8f 0a       	sbc	r8, r31
 a7c:	b6 01       	movw	r22, r12
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 a84:	f1 10       	cpse	r15, r1
 a86:	fa 94       	dec	r15
 a88:	21 e0       	ldi	r18, 0x01	; 1
 a8a:	a2 1a       	sub	r10, r18
 a8c:	b1 08       	sbc	r11, r1
 a8e:	a1 14       	cp	r10, r1
 a90:	b1 04       	cpc	r11, r1
 a92:	61 f7       	brne	.-40     	; 0xa6c <__EEPROM_REGION_LENGTH__+0x26c>
 a94:	0e c1       	rjmp	.+540    	; 0xcb2 <__EEPROM_REGION_LENGTH__+0x4b2>
 a96:	84 36       	cpi	r24, 0x64	; 100
 a98:	11 f0       	breq	.+4      	; 0xa9e <__EEPROM_REGION_LENGTH__+0x29e>
 a9a:	89 36       	cpi	r24, 0x69	; 105
 a9c:	79 f5       	brne	.+94     	; 0xafc <__EEPROM_REGION_LENGTH__+0x2fc>
 a9e:	c5 01       	movw	r24, r10
 aa0:	07 ff       	sbrs	r16, 7
 aa2:	09 c0       	rjmp	.+18     	; 0xab6 <__EEPROM_REGION_LENGTH__+0x2b6>
 aa4:	04 96       	adiw	r24, 0x04	; 4
 aa6:	9f 87       	std	Y+15, r25	; 0x0f
 aa8:	8e 87       	std	Y+14, r24	; 0x0e
 aaa:	f5 01       	movw	r30, r10
 aac:	60 81       	ld	r22, Z
 aae:	71 81       	ldd	r23, Z+1	; 0x01
 ab0:	82 81       	ldd	r24, Z+2	; 0x02
 ab2:	93 81       	ldd	r25, Z+3	; 0x03
 ab4:	0a c0       	rjmp	.+20     	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 ab6:	02 96       	adiw	r24, 0x02	; 2
 ab8:	9f 87       	std	Y+15, r25	; 0x0f
 aba:	8e 87       	std	Y+14, r24	; 0x0e
 abc:	f5 01       	movw	r30, r10
 abe:	60 81       	ld	r22, Z
 ac0:	71 81       	ldd	r23, Z+1	; 0x01
 ac2:	07 2e       	mov	r0, r23
 ac4:	00 0c       	add	r0, r0
 ac6:	88 0b       	sbc	r24, r24
 ac8:	99 0b       	sbc	r25, r25
 aca:	0f 76       	andi	r16, 0x6F	; 111
 acc:	e0 2e       	mov	r14, r16
 ace:	97 ff       	sbrs	r25, 7
 ad0:	0a c0       	rjmp	.+20     	; 0xae6 <__EEPROM_REGION_LENGTH__+0x2e6>
 ad2:	90 95       	com	r25
 ad4:	80 95       	com	r24
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	f0 2f       	mov	r31, r16
 ae2:	f0 68       	ori	r31, 0x80	; 128
 ae4:	ef 2e       	mov	r14, r31
 ae6:	2a e0       	ldi	r18, 0x0A	; 10
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	ae 01       	movw	r20, r28
 aec:	4f 5f       	subi	r20, 0xFF	; 255
 aee:	5f 4f       	sbci	r21, 0xFF	; 255
 af0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__ultoa_invert>
 af4:	a8 2e       	mov	r10, r24
 af6:	2c 85       	ldd	r18, Y+12	; 0x0c
 af8:	a2 1a       	sub	r10, r18
 afa:	4b c0       	rjmp	.+150    	; 0xb92 <__EEPROM_REGION_LENGTH__+0x392>
 afc:	85 37       	cpi	r24, 0x75	; 117
 afe:	29 f4       	brne	.+10     	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 b00:	0f 7e       	andi	r16, 0xEF	; 239
 b02:	e0 2e       	mov	r14, r16
 b04:	2a e0       	ldi	r18, 0x0A	; 10
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	25 c0       	rjmp	.+74     	; 0xb54 <__EEPROM_REGION_LENGTH__+0x354>
 b0a:	90 2f       	mov	r25, r16
 b0c:	99 7f       	andi	r25, 0xF9	; 249
 b0e:	e9 2e       	mov	r14, r25
 b10:	8f 36       	cpi	r24, 0x6F	; 111
 b12:	c1 f0       	breq	.+48     	; 0xb44 <__EEPROM_REGION_LENGTH__+0x344>
 b14:	18 f4       	brcc	.+6      	; 0xb1c <__EEPROM_REGION_LENGTH__+0x31c>
 b16:	88 35       	cpi	r24, 0x58	; 88
 b18:	79 f0       	breq	.+30     	; 0xb38 <__EEPROM_REGION_LENGTH__+0x338>
 b1a:	d5 c0       	rjmp	.+426    	; 0xcc6 <__EEPROM_REGION_LENGTH__+0x4c6>
 b1c:	80 37       	cpi	r24, 0x70	; 112
 b1e:	19 f0       	breq	.+6      	; 0xb26 <__EEPROM_REGION_LENGTH__+0x326>
 b20:	88 37       	cpi	r24, 0x78	; 120
 b22:	21 f0       	breq	.+8      	; 0xb2c <__EEPROM_REGION_LENGTH__+0x32c>
 b24:	d0 c0       	rjmp	.+416    	; 0xcc6 <__EEPROM_REGION_LENGTH__+0x4c6>
 b26:	a9 2f       	mov	r26, r25
 b28:	a0 61       	ori	r26, 0x10	; 16
 b2a:	ea 2e       	mov	r14, r26
 b2c:	e4 fe       	sbrs	r14, 4
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__EEPROM_REGION_LENGTH__+0x34a>
 b30:	ee 2d       	mov	r30, r14
 b32:	e4 60       	ori	r30, 0x04	; 4
 b34:	ee 2e       	mov	r14, r30
 b36:	09 c0       	rjmp	.+18     	; 0xb4a <__EEPROM_REGION_LENGTH__+0x34a>
 b38:	04 ff       	sbrs	r16, 4
 b3a:	0a c0       	rjmp	.+20     	; 0xb50 <__EEPROM_REGION_LENGTH__+0x350>
 b3c:	f9 2f       	mov	r31, r25
 b3e:	f6 60       	ori	r31, 0x06	; 6
 b40:	ef 2e       	mov	r14, r31
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <__EEPROM_REGION_LENGTH__+0x350>
 b44:	28 e0       	ldi	r18, 0x08	; 8
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <__EEPROM_REGION_LENGTH__+0x354>
 b4a:	20 e1       	ldi	r18, 0x10	; 16
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__EEPROM_REGION_LENGTH__+0x354>
 b50:	20 e1       	ldi	r18, 0x10	; 16
 b52:	32 e0       	ldi	r19, 0x02	; 2
 b54:	c5 01       	movw	r24, r10
 b56:	e7 fe       	sbrs	r14, 7
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 b5a:	04 96       	adiw	r24, 0x04	; 4
 b5c:	9f 87       	std	Y+15, r25	; 0x0f
 b5e:	8e 87       	std	Y+14, r24	; 0x0e
 b60:	f5 01       	movw	r30, r10
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	08 c0       	rjmp	.+16     	; 0xb7c <__EEPROM_REGION_LENGTH__+0x37c>
 b6c:	02 96       	adiw	r24, 0x02	; 2
 b6e:	9f 87       	std	Y+15, r25	; 0x0f
 b70:	8e 87       	std	Y+14, r24	; 0x0e
 b72:	f5 01       	movw	r30, r10
 b74:	60 81       	ld	r22, Z
 b76:	71 81       	ldd	r23, Z+1	; 0x01
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	ae 01       	movw	r20, r28
 b7e:	4f 5f       	subi	r20, 0xFF	; 255
 b80:	5f 4f       	sbci	r21, 0xFF	; 255
 b82:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__ultoa_invert>
 b86:	a8 2e       	mov	r10, r24
 b88:	fc 85       	ldd	r31, Y+12	; 0x0c
 b8a:	af 1a       	sub	r10, r31
 b8c:	2e 2d       	mov	r18, r14
 b8e:	2f 77       	andi	r18, 0x7F	; 127
 b90:	e2 2e       	mov	r14, r18
 b92:	e6 fe       	sbrs	r14, 6
 b94:	0b c0       	rjmp	.+22     	; 0xbac <__EEPROM_REGION_LENGTH__+0x3ac>
 b96:	0e 2d       	mov	r16, r14
 b98:	0e 7f       	andi	r16, 0xFE	; 254
 b9a:	a1 16       	cp	r10, r17
 b9c:	50 f4       	brcc	.+20     	; 0xbb2 <__EEPROM_REGION_LENGTH__+0x3b2>
 b9e:	e4 fe       	sbrs	r14, 4
 ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <__EEPROM_REGION_LENGTH__+0x3b6>
 ba2:	e2 fc       	sbrc	r14, 2
 ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <__EEPROM_REGION_LENGTH__+0x3b6>
 ba6:	0e 2d       	mov	r16, r14
 ba8:	0e 7e       	andi	r16, 0xEE	; 238
 baa:	05 c0       	rjmp	.+10     	; 0xbb6 <__EEPROM_REGION_LENGTH__+0x3b6>
 bac:	ba 2c       	mov	r11, r10
 bae:	0e 2d       	mov	r16, r14
 bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <__EEPROM_REGION_LENGTH__+0x3b8>
 bb2:	ba 2c       	mov	r11, r10
 bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <__EEPROM_REGION_LENGTH__+0x3b8>
 bb6:	b1 2e       	mov	r11, r17
 bb8:	04 ff       	sbrs	r16, 4
 bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__EEPROM_REGION_LENGTH__+0x3d6>
 bbc:	fe 01       	movw	r30, r28
 bbe:	ea 0d       	add	r30, r10
 bc0:	f1 1d       	adc	r31, r1
 bc2:	80 81       	ld	r24, Z
 bc4:	80 33       	cpi	r24, 0x30	; 48
 bc6:	11 f4       	brne	.+4      	; 0xbcc <__EEPROM_REGION_LENGTH__+0x3cc>
 bc8:	09 7e       	andi	r16, 0xE9	; 233
 bca:	09 c0       	rjmp	.+18     	; 0xbde <__EEPROM_REGION_LENGTH__+0x3de>
 bcc:	02 ff       	sbrs	r16, 2
 bce:	06 c0       	rjmp	.+12     	; 0xbdc <__EEPROM_REGION_LENGTH__+0x3dc>
 bd0:	b3 94       	inc	r11
 bd2:	b3 94       	inc	r11
 bd4:	04 c0       	rjmp	.+8      	; 0xbde <__EEPROM_REGION_LENGTH__+0x3de>
 bd6:	80 2f       	mov	r24, r16
 bd8:	86 78       	andi	r24, 0x86	; 134
 bda:	09 f0       	breq	.+2      	; 0xbde <__EEPROM_REGION_LENGTH__+0x3de>
 bdc:	b3 94       	inc	r11
 bde:	03 fd       	sbrc	r16, 3
 be0:	11 c0       	rjmp	.+34     	; 0xc04 <__EEPROM_REGION_LENGTH__+0x404>
 be2:	00 ff       	sbrs	r16, 0
 be4:	06 c0       	rjmp	.+12     	; 0xbf2 <__EEPROM_REGION_LENGTH__+0x3f2>
 be6:	bf 14       	cp	r11, r15
 be8:	88 f4       	brcc	.+34     	; 0xc0c <__EEPROM_REGION_LENGTH__+0x40c>
 bea:	fa 0c       	add	r15, r10
 bec:	1f 2d       	mov	r17, r15
 bee:	1b 19       	sub	r17, r11
 bf0:	0e c0       	rjmp	.+28     	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 bf2:	bf 14       	cp	r11, r15
 bf4:	60 f4       	brcc	.+24     	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 bf6:	b6 01       	movw	r22, r12
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 c00:	b3 94       	inc	r11
 c02:	f7 cf       	rjmp	.-18     	; 0xbf2 <__EEPROM_REGION_LENGTH__+0x3f2>
 c04:	bf 14       	cp	r11, r15
 c06:	18 f4       	brcc	.+6      	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 c08:	fb 18       	sub	r15, r11
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__EEPROM_REGION_LENGTH__+0x410>
 c0c:	1a 2d       	mov	r17, r10
 c0e:	f1 2c       	mov	r15, r1
 c10:	04 ff       	sbrs	r16, 4
 c12:	10 c0       	rjmp	.+32     	; 0xc34 <__EEPROM_REGION_LENGTH__+0x434>
 c14:	b6 01       	movw	r22, r12
 c16:	80 e3       	ldi	r24, 0x30	; 48
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 c1e:	02 ff       	sbrs	r16, 2
 c20:	17 c0       	rjmp	.+46     	; 0xc50 <__EEPROM_REGION_LENGTH__+0x450>
 c22:	01 fd       	sbrc	r16, 1
 c24:	03 c0       	rjmp	.+6      	; 0xc2c <__EEPROM_REGION_LENGTH__+0x42c>
 c26:	88 e7       	ldi	r24, 0x78	; 120
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__EEPROM_REGION_LENGTH__+0x430>
 c2c:	88 e5       	ldi	r24, 0x58	; 88
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	b6 01       	movw	r22, r12
 c32:	0c c0       	rjmp	.+24     	; 0xc4c <__EEPROM_REGION_LENGTH__+0x44c>
 c34:	80 2f       	mov	r24, r16
 c36:	86 78       	andi	r24, 0x86	; 134
 c38:	59 f0       	breq	.+22     	; 0xc50 <__EEPROM_REGION_LENGTH__+0x450>
 c3a:	01 ff       	sbrs	r16, 1
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__EEPROM_REGION_LENGTH__+0x442>
 c3e:	8b e2       	ldi	r24, 0x2B	; 43
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <__EEPROM_REGION_LENGTH__+0x444>
 c42:	80 e2       	ldi	r24, 0x20	; 32
 c44:	07 fd       	sbrc	r16, 7
 c46:	8d e2       	ldi	r24, 0x2D	; 45
 c48:	b6 01       	movw	r22, r12
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 c50:	a1 16       	cp	r10, r17
 c52:	38 f4       	brcc	.+14     	; 0xc62 <__EEPROM_REGION_LENGTH__+0x462>
 c54:	b6 01       	movw	r22, r12
 c56:	80 e3       	ldi	r24, 0x30	; 48
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 c5e:	11 50       	subi	r17, 0x01	; 1
 c60:	f7 cf       	rjmp	.-18     	; 0xc50 <__EEPROM_REGION_LENGTH__+0x450>
 c62:	aa 94       	dec	r10
 c64:	e1 e0       	ldi	r30, 0x01	; 1
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	ec 0f       	add	r30, r28
 c6a:	fd 1f       	adc	r31, r29
 c6c:	ea 0d       	add	r30, r10
 c6e:	f1 1d       	adc	r31, r1
 c70:	80 81       	ld	r24, Z
 c72:	b6 01       	movw	r22, r12
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 c7a:	a1 10       	cpse	r10, r1
 c7c:	f2 cf       	rjmp	.-28     	; 0xc62 <__EEPROM_REGION_LENGTH__+0x462>
 c7e:	19 c0       	rjmp	.+50     	; 0xcb2 <__EEPROM_REGION_LENGTH__+0x4b2>
 c80:	f4 e0       	ldi	r31, 0x04	; 4
 c82:	ff 15       	cp	r31, r15
 c84:	80 f5       	brcc	.+96     	; 0xce6 <__EEPROM_REGION_LENGTH__+0x4e6>
 c86:	84 e0       	ldi	r24, 0x04	; 4
 c88:	f8 1a       	sub	r15, r24
 c8a:	73 fe       	sbrs	r7, 3
 c8c:	23 c0       	rjmp	.+70     	; 0xcd4 <__EEPROM_REGION_LENGTH__+0x4d4>
 c8e:	01 11       	cpse	r16, r1
 c90:	2b c0       	rjmp	.+86     	; 0xce8 <__EEPROM_REGION_LENGTH__+0x4e8>
 c92:	53 fe       	sbrs	r5, 3
 c94:	2f c0       	rjmp	.+94     	; 0xcf4 <__EEPROM_REGION_LENGTH__+0x4f4>
 c96:	51 ed       	ldi	r21, 0xD1	; 209
 c98:	85 2e       	mov	r8, r21
 c9a:	55 e0       	ldi	r21, 0x05	; 5
 c9c:	95 2e       	mov	r9, r21
 c9e:	50 e0       	ldi	r21, 0x00	; 0
 ca0:	a5 2e       	mov	r10, r21
 ca2:	07 2d       	mov	r16, r7
 ca4:	00 71       	andi	r16, 0x10	; 16
 ca6:	f4 01       	movw	r30, r8
 ca8:	84 91       	lpm	r24, Z
 caa:	a7 fc       	sbrc	r10, 7
 cac:	80 81       	ld	r24, Z
 cae:	81 11       	cpse	r24, r1
 cb0:	28 c0       	rjmp	.+80     	; 0xd02 <__EEPROM_REGION_LENGTH__+0x502>
 cb2:	ff 20       	and	r15, r15
 cb4:	09 f4       	brne	.+2      	; 0xcb8 <__EEPROM_REGION_LENGTH__+0x4b8>
 cb6:	d2 cc       	rjmp	.-1628   	; 0x65c <vfprintf+0x72>
 cb8:	b6 01       	movw	r22, r12
 cba:	80 e2       	ldi	r24, 0x20	; 32
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 cc2:	fa 94       	dec	r15
 cc4:	f6 cf       	rjmp	.-20     	; 0xcb2 <__EEPROM_REGION_LENGTH__+0x4b2>
 cc6:	f6 01       	movw	r30, r12
 cc8:	87 81       	ldd	r24, Z+7	; 0x07
 cca:	90 85       	ldd	r25, Z+8	; 0x08
 ccc:	2c c0       	rjmp	.+88     	; 0xd26 <__EEPROM_REGION_LENGTH__+0x526>
 cce:	8f ef       	ldi	r24, 0xFF	; 255
 cd0:	9f ef       	ldi	r25, 0xFF	; 255
 cd2:	29 c0       	rjmp	.+82     	; 0xd26 <__EEPROM_REGION_LENGTH__+0x526>
 cd4:	b6 01       	movw	r22, r12
 cd6:	80 e2       	ldi	r24, 0x20	; 32
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 cde:	fa 94       	dec	r15
 ce0:	f1 10       	cpse	r15, r1
 ce2:	f8 cf       	rjmp	.-16     	; 0xcd4 <__EEPROM_REGION_LENGTH__+0x4d4>
 ce4:	d4 cf       	rjmp	.-88     	; 0xc8e <__EEPROM_REGION_LENGTH__+0x48e>
 ce6:	f1 2c       	mov	r15, r1
 ce8:	b6 01       	movw	r22, r12
 cea:	80 2f       	mov	r24, r16
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 cf2:	cf cf       	rjmp	.-98     	; 0xc92 <__EEPROM_REGION_LENGTH__+0x492>
 cf4:	4d ec       	ldi	r20, 0xCD	; 205
 cf6:	84 2e       	mov	r8, r20
 cf8:	45 e0       	ldi	r20, 0x05	; 5
 cfa:	94 2e       	mov	r9, r20
 cfc:	40 e0       	ldi	r20, 0x00	; 0
 cfe:	a4 2e       	mov	r10, r20
 d00:	d0 cf       	rjmp	.-96     	; 0xca2 <__EEPROM_REGION_LENGTH__+0x4a2>
 d02:	01 11       	cpse	r16, r1
 d04:	80 52       	subi	r24, 0x20	; 32
 d06:	b6 01       	movw	r22, r12
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <fputc>
 d0e:	ff ef       	ldi	r31, 0xFF	; 255
 d10:	8f 1a       	sub	r8, r31
 d12:	9f 0a       	sbc	r9, r31
 d14:	af 0a       	sbc	r10, r31
 d16:	c7 cf       	rjmp	.-114    	; 0xca6 <__EEPROM_REGION_LENGTH__+0x4a6>
 d18:	23 e0       	ldi	r18, 0x03	; 3
 d1a:	2f 15       	cp	r18, r15
 d1c:	10 f4       	brcc	.+4      	; 0xd22 <__EEPROM_REGION_LENGTH__+0x522>
 d1e:	83 e0       	ldi	r24, 0x03	; 3
 d20:	b3 cf       	rjmp	.-154    	; 0xc88 <__EEPROM_REGION_LENGTH__+0x488>
 d22:	f1 2c       	mov	r15, r1
 d24:	b6 cf       	rjmp	.-148    	; 0xc92 <__EEPROM_REGION_LENGTH__+0x492>
 d26:	64 96       	adiw	r28, 0x14	; 20
 d28:	e2 e1       	ldi	r30, 0x12	; 18
 d2a:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__>

Disassembly of section .text.libgcc:

000041d8 <__tablejump2__>:
    41d8:	ee 0f       	add	r30, r30
    41da:	ff 1f       	adc	r31, r31
    41dc:	05 90       	lpm	r0, Z+
    41de:	f4 91       	lpm	r31, Z
    41e0:	e0 2d       	mov	r30, r0
    41e2:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003e56 <__umulhisi3>:
    3e56:	a2 9f       	mul	r26, r18
    3e58:	b0 01       	movw	r22, r0
    3e5a:	b3 9f       	mul	r27, r19
    3e5c:	c0 01       	movw	r24, r0
    3e5e:	a3 9f       	mul	r26, r19
    3e60:	70 0d       	add	r23, r0
    3e62:	81 1d       	adc	r24, r1
    3e64:	11 24       	eor	r1, r1
    3e66:	91 1d       	adc	r25, r1
    3e68:	b2 9f       	mul	r27, r18
    3e6a:	70 0d       	add	r23, r0
    3e6c:	81 1d       	adc	r24, r1
    3e6e:	11 24       	eor	r1, r1
    3e70:	91 1d       	adc	r25, r1
    3e72:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003956 <__prologue_saves__>:
    3956:	2f 92       	push	r2
    3958:	3f 92       	push	r3
    395a:	4f 92       	push	r4
    395c:	5f 92       	push	r5
    395e:	6f 92       	push	r6
    3960:	7f 92       	push	r7
    3962:	8f 92       	push	r8
    3964:	9f 92       	push	r9
    3966:	af 92       	push	r10
    3968:	bf 92       	push	r11
    396a:	cf 92       	push	r12
    396c:	df 92       	push	r13
    396e:	ef 92       	push	r14
    3970:	ff 92       	push	r15
    3972:	0f 93       	push	r16
    3974:	1f 93       	push	r17
    3976:	cf 93       	push	r28
    3978:	df 93       	push	r29
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	ca 1b       	sub	r28, r26
    3980:	db 0b       	sbc	r29, r27
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000039c4 <__epilogue_restores__>:
    39c4:	2a 88       	ldd	r2, Y+18	; 0x12
    39c6:	39 88       	ldd	r3, Y+17	; 0x11
    39c8:	48 88       	ldd	r4, Y+16	; 0x10
    39ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    39cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    39d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    39d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    39d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    39d6:	b9 84       	ldd	r11, Y+9	; 0x09
    39d8:	c8 84       	ldd	r12, Y+8	; 0x08
    39da:	df 80       	ldd	r13, Y+7	; 0x07
    39dc:	ee 80       	ldd	r14, Y+6	; 0x06
    39de:	fd 80       	ldd	r15, Y+5	; 0x05
    39e0:	0c 81       	ldd	r16, Y+4	; 0x04
    39e2:	1b 81       	ldd	r17, Y+3	; 0x03
    39e4:	aa 81       	ldd	r26, Y+2	; 0x02
    39e6:	b9 81       	ldd	r27, Y+1	; 0x01
    39e8:	ce 0f       	add	r28, r30
    39ea:	d1 1d       	adc	r29, r1
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	ed 01       	movw	r28, r26
    39f8:	08 95       	ret

Disassembly of section .text.avrlibc:

00004240 <atoi>:
    4240:	0e 94 ad 20 	call	0x415a	; 0x415a <atol>
    4244:	cb 01       	movw	r24, r22
    4246:	08 95       	ret

Disassembly of section .text.avrlibc:

0000415a <atol>:
    415a:	2a e0       	ldi	r18, 0x0A	; 10
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	40 e0       	ldi	r20, 0x00	; 0
    4160:	50 e0       	ldi	r21, 0x00	; 0
    4162:	0e 94 97 06 	call	0xd2e	; 0xd2e <strtol>
    4166:	08 95       	ret

Disassembly of section .text.avrlibc:

00000d2e <strtol>:
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <strtol+0x22>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <strtol+0x24>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <strtol+0x26>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	3b 01       	movw	r6, r22
     d5a:	88 2e       	mov	r8, r24
     d5c:	5a 01       	movw	r10, r20
     d5e:	19 01       	movw	r2, r18
     d60:	41 15       	cp	r20, r1
     d62:	51 05       	cpc	r21, r1
     d64:	21 f0       	breq	.+8      	; 0xd6e <strtol+0x40>
     d66:	fa 01       	movw	r30, r20
     d68:	60 83       	st	Z, r22
     d6a:	71 83       	std	Z+1, r23	; 0x01
     d6c:	82 83       	std	Z+2, r24	; 0x02
     d6e:	21 14       	cp	r2, r1
     d70:	31 04       	cpc	r3, r1
     d72:	29 f0       	breq	.+10     	; 0xd7e <strtol+0x50>
     d74:	c1 01       	movw	r24, r2
     d76:	02 97       	sbiw	r24, 0x02	; 2
     d78:	83 97       	sbiw	r24, 0x23	; 35
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <strtol+0x50>
     d7c:	1a c1       	rjmp	.+564    	; 0xfb2 <strtol+0x284>
     d7e:	e8 2c       	mov	r14, r8
     d80:	63 01       	movw	r12, r6
     d82:	ff ef       	ldi	r31, 0xFF	; 255
     d84:	cf 1a       	sub	r12, r31
     d86:	df 0a       	sbc	r13, r31
     d88:	ef 0a       	sbc	r14, r31
     d8a:	f3 01       	movw	r30, r6
     d8c:	14 91       	lpm	r17, Z
     d8e:	87 fc       	sbrc	r8, 7
     d90:	10 81       	ld	r17, Z
     d92:	81 2f       	mov	r24, r17
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 1b 20 	call	0x4036	; 0x4036 <isspace>
     d9a:	4c 2d       	mov	r20, r12
     d9c:	3d 2d       	mov	r19, r13
     d9e:	2e 2d       	mov	r18, r14
     da0:	89 2b       	or	r24, r25
     da2:	19 f0       	breq	.+6      	; 0xdaa <strtol+0x7c>
     da4:	36 01       	movw	r6, r12
     da6:	8e 2c       	mov	r8, r14
     da8:	ea cf       	rjmp	.-44     	; 0xd7e <strtol+0x50>
     daa:	1d 32       	cpi	r17, 0x2D	; 45
     dac:	69 f4       	brne	.+26     	; 0xdc8 <strtol+0x9a>
     dae:	e8 2c       	mov	r14, r8
     db0:	63 01       	movw	r12, r6
     db2:	52 e0       	ldi	r21, 0x02	; 2
     db4:	c5 0e       	add	r12, r21
     db6:	d1 1c       	adc	r13, r1
     db8:	e1 1c       	adc	r14, r1
     dba:	e4 2f       	mov	r30, r20
     dbc:	f3 2f       	mov	r31, r19
     dbe:	14 91       	lpm	r17, Z
     dc0:	27 fd       	sbrc	r18, 7
     dc2:	10 81       	ld	r17, Z
     dc4:	01 e0       	ldi	r16, 0x01	; 1
     dc6:	0e c0       	rjmp	.+28     	; 0xde4 <strtol+0xb6>
     dc8:	1b 32       	cpi	r17, 0x2B	; 43
     dca:	59 f4       	brne	.+22     	; 0xde2 <strtol+0xb4>
     dcc:	e8 2c       	mov	r14, r8
     dce:	63 01       	movw	r12, r6
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	c8 0e       	add	r12, r24
     dd4:	d1 1c       	adc	r13, r1
     dd6:	e1 1c       	adc	r14, r1
     dd8:	e4 2f       	mov	r30, r20
     dda:	f3 2f       	mov	r31, r19
     ddc:	14 91       	lpm	r17, Z
     dde:	27 fd       	sbrc	r18, 7
     de0:	10 81       	ld	r17, Z
     de2:	00 e0       	ldi	r16, 0x00	; 0
     de4:	21 14       	cp	r2, r1
     de6:	31 04       	cpc	r3, r1
     de8:	09 f1       	breq	.+66     	; 0xe2c <strtol+0xfe>
     dea:	90 e1       	ldi	r25, 0x10	; 16
     dec:	29 16       	cp	r2, r25
     dee:	31 04       	cpc	r3, r1
     df0:	29 f4       	brne	.+10     	; 0xdfc <strtol+0xce>
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <strtol+0x144>
     df4:	10 e3       	ldi	r17, 0x30	; 48
     df6:	21 14       	cp	r2, r1
     df8:	31 04       	cpc	r3, r1
     dfa:	21 f1       	breq	.+72     	; 0xe44 <strtol+0x116>
     dfc:	f8 e0       	ldi	r31, 0x08	; 8
     dfe:	2f 16       	cp	r2, r31
     e00:	31 04       	cpc	r3, r1
     e02:	01 f1       	breq	.+64     	; 0xe44 <strtol+0x116>
     e04:	54 f4       	brge	.+20     	; 0xe1a <strtol+0xec>
     e06:	32 e0       	ldi	r19, 0x02	; 2
     e08:	23 16       	cp	r2, r19
     e0a:	31 04       	cpc	r3, r1
     e0c:	21 f5       	brne	.+72     	; 0xe56 <strtol+0x128>
     e0e:	41 2c       	mov	r4, r1
     e10:	51 2c       	mov	r5, r1
     e12:	61 2c       	mov	r6, r1
     e14:	50 e4       	ldi	r21, 0x40	; 64
     e16:	75 2e       	mov	r7, r21
     e18:	4b c0       	rjmp	.+150    	; 0xeb0 <strtol+0x182>
     e1a:	4a e0       	ldi	r20, 0x0A	; 10
     e1c:	24 16       	cp	r2, r20
     e1e:	31 04       	cpc	r3, r1
     e20:	39 f0       	breq	.+14     	; 0xe30 <strtol+0x102>
     e22:	50 e1       	ldi	r21, 0x10	; 16
     e24:	25 16       	cp	r2, r21
     e26:	31 04       	cpc	r3, r1
     e28:	b1 f4       	brne	.+44     	; 0xe56 <strtol+0x128>
     e2a:	3d c0       	rjmp	.+122    	; 0xea6 <strtol+0x178>
     e2c:	10 33       	cpi	r17, 0x30	; 48
     e2e:	19 f1       	breq	.+70     	; 0xe76 <strtol+0x148>
     e30:	3a e0       	ldi	r19, 0x0A	; 10
     e32:	23 2e       	mov	r2, r19
     e34:	31 2c       	mov	r3, r1
     e36:	4c ec       	ldi	r20, 0xCC	; 204
     e38:	44 2e       	mov	r4, r20
     e3a:	54 2c       	mov	r5, r4
     e3c:	64 2c       	mov	r6, r4
     e3e:	4c e0       	ldi	r20, 0x0C	; 12
     e40:	74 2e       	mov	r7, r20
     e42:	36 c0       	rjmp	.+108    	; 0xeb0 <strtol+0x182>
     e44:	98 e0       	ldi	r25, 0x08	; 8
     e46:	29 2e       	mov	r2, r25
     e48:	31 2c       	mov	r3, r1
     e4a:	41 2c       	mov	r4, r1
     e4c:	51 2c       	mov	r5, r1
     e4e:	61 2c       	mov	r6, r1
     e50:	20 e1       	ldi	r18, 0x10	; 16
     e52:	72 2e       	mov	r7, r18
     e54:	2d c0       	rjmp	.+90     	; 0xeb0 <strtol+0x182>
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e8       	ldi	r25, 0x80	; 128
     e5e:	91 01       	movw	r18, r2
     e60:	03 2c       	mov	r0, r3
     e62:	00 0c       	add	r0, r0
     e64:	44 0b       	sbc	r20, r20
     e66:	55 0b       	sbc	r21, r21
     e68:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__udivmodsi4>
     e6c:	29 01       	movw	r4, r18
     e6e:	3a 01       	movw	r6, r20
     e70:	1f c0       	rjmp	.+62     	; 0xeb0 <strtol+0x182>
     e72:	10 33       	cpi	r17, 0x30	; 48
     e74:	c1 f4       	brne	.+48     	; 0xea6 <strtol+0x178>
     e76:	f6 01       	movw	r30, r12
     e78:	84 91       	lpm	r24, Z
     e7a:	e7 fc       	sbrc	r14, 7
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7d       	andi	r24, 0xDF	; 223
     e80:	88 35       	cpi	r24, 0x58	; 88
     e82:	09 f0       	breq	.+2      	; 0xe86 <strtol+0x158>
     e84:	b7 cf       	rjmp	.-146    	; 0xdf4 <strtol+0xc6>
     e86:	ae 2d       	mov	r26, r14
     e88:	c6 01       	movw	r24, r12
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	a1 1d       	adc	r26, r1
     e8e:	fc 01       	movw	r30, r24
     e90:	14 91       	lpm	r17, Z
     e92:	a7 fd       	sbrc	r26, 7
     e94:	10 81       	ld	r17, Z
     e96:	e2 e0       	ldi	r30, 0x02	; 2
     e98:	ce 0e       	add	r12, r30
     e9a:	d1 1c       	adc	r13, r1
     e9c:	e1 1c       	adc	r14, r1
     e9e:	02 60       	ori	r16, 0x02	; 2
     ea0:	60 e1       	ldi	r22, 0x10	; 16
     ea2:	26 2e       	mov	r2, r22
     ea4:	31 2c       	mov	r3, r1
     ea6:	41 2c       	mov	r4, r1
     ea8:	51 2c       	mov	r5, r1
     eaa:	61 2c       	mov	r6, r1
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	78 2e       	mov	r7, r24
     eb0:	a0 e0       	ldi	r26, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	cb 01       	movw	r24, r22
     eb8:	91 01       	movw	r18, r2
     eba:	03 2c       	mov	r0, r3
     ebc:	00 0c       	add	r0, r0
     ebe:	44 0b       	sbc	r20, r20
     ec0:	55 0b       	sbc	r21, r21
     ec2:	29 83       	std	Y+1, r18	; 0x01
     ec4:	3a 83       	std	Y+2, r19	; 0x02
     ec6:	4b 83       	std	Y+3, r20	; 0x03
     ec8:	5c 83       	std	Y+4, r21	; 0x04
     eca:	e0 ed       	ldi	r30, 0xD0	; 208
     ecc:	e1 0f       	add	r30, r17
     ece:	ea 30       	cpi	r30, 0x0A	; 10
     ed0:	60 f0       	brcs	.+24     	; 0xeea <strtol+0x1bc>
     ed2:	2f eb       	ldi	r18, 0xBF	; 191
     ed4:	21 0f       	add	r18, r17
     ed6:	2a 31       	cpi	r18, 0x1A	; 26
     ed8:	10 f4       	brcc	.+4      	; 0xede <strtol+0x1b0>
     eda:	e9 ec       	ldi	r30, 0xC9	; 201
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <strtol+0x1ba>
     ede:	2f e9       	ldi	r18, 0x9F	; 159
     ee0:	21 0f       	add	r18, r17
     ee2:	2a 31       	cpi	r18, 0x1A	; 26
     ee4:	50 f5       	brcc	.+84     	; 0xf3a <strtol+0x20c>
     ee6:	e9 ea       	ldi	r30, 0xA9	; 169
     ee8:	e1 0f       	add	r30, r17
     eea:	2e 2f       	mov	r18, r30
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	22 15       	cp	r18, r2
     ef0:	33 05       	cpc	r19, r3
     ef2:	1c f5       	brge	.+70     	; 0xf3a <strtol+0x20c>
     ef4:	a7 fd       	sbrc	r26, 7
     ef6:	18 c0       	rjmp	.+48     	; 0xf28 <strtol+0x1fa>
     ef8:	46 16       	cp	r4, r22
     efa:	57 06       	cpc	r5, r23
     efc:	68 06       	cpc	r6, r24
     efe:	79 06       	cpc	r7, r25
     f00:	80 f0       	brcs	.+32     	; 0xf22 <strtol+0x1f4>
     f02:	29 81       	ldd	r18, Y+1	; 0x01
     f04:	3a 81       	ldd	r19, Y+2	; 0x02
     f06:	4b 81       	ldd	r20, Y+3	; 0x03
     f08:	5c 81       	ldd	r21, Y+4	; 0x04
     f0a:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__mulsi3>
     f0e:	6e 0f       	add	r22, r30
     f10:	71 1d       	adc	r23, r1
     f12:	81 1d       	adc	r24, r1
     f14:	91 1d       	adc	r25, r1
     f16:	61 30       	cpi	r22, 0x01	; 1
     f18:	71 05       	cpc	r23, r1
     f1a:	81 05       	cpc	r24, r1
     f1c:	30 e8       	ldi	r19, 0x80	; 128
     f1e:	93 07       	cpc	r25, r19
     f20:	10 f0       	brcs	.+4      	; 0xf26 <strtol+0x1f8>
     f22:	af ef       	ldi	r26, 0xFF	; 255
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <strtol+0x1fa>
     f26:	a1 e0       	ldi	r26, 0x01	; 1
     f28:	f6 01       	movw	r30, r12
     f2a:	14 91       	lpm	r17, Z
     f2c:	e7 fc       	sbrc	r14, 7
     f2e:	10 81       	ld	r17, Z
     f30:	4f ef       	ldi	r20, 0xFF	; 255
     f32:	c4 1a       	sub	r12, r20
     f34:	d4 0a       	sbc	r13, r20
     f36:	e4 0a       	sbc	r14, r20
     f38:	c8 cf       	rjmp	.-112    	; 0xeca <strtol+0x19c>
     f3a:	20 2f       	mov	r18, r16
     f3c:	21 70       	andi	r18, 0x01	; 1
     f3e:	a1 14       	cp	r10, r1
     f40:	b1 04       	cpc	r11, r1
     f42:	b1 f0       	breq	.+44     	; 0xf70 <strtol+0x242>
     f44:	aa 23       	and	r26, r26
     f46:	49 f0       	breq	.+18     	; 0xf5a <strtol+0x22c>
     f48:	51 e0       	ldi	r21, 0x01	; 1
     f4a:	c5 1a       	sub	r12, r21
     f4c:	d1 08       	sbc	r13, r1
     f4e:	e1 08       	sbc	r14, r1
     f50:	f5 01       	movw	r30, r10
     f52:	c0 82       	st	Z, r12
     f54:	d1 82       	std	Z+1, r13	; 0x01
     f56:	e2 82       	std	Z+2, r14	; 0x02
     f58:	0b c0       	rjmp	.+22     	; 0xf70 <strtol+0x242>
     f5a:	01 ff       	sbrs	r16, 1
     f5c:	1d c0       	rjmp	.+58     	; 0xf98 <strtol+0x26a>
     f5e:	f2 e0       	ldi	r31, 0x02	; 2
     f60:	cf 1a       	sub	r12, r31
     f62:	d1 08       	sbc	r13, r1
     f64:	e1 08       	sbc	r14, r1
     f66:	f5 01       	movw	r30, r10
     f68:	c0 82       	st	Z, r12
     f6a:	d1 82       	std	Z+1, r13	; 0x01
     f6c:	e2 82       	std	Z+2, r14	; 0x02
     f6e:	14 c0       	rjmp	.+40     	; 0xf98 <strtol+0x26a>
     f70:	a7 ff       	sbrs	r26, 7
     f72:	12 c0       	rjmp	.+36     	; 0xf98 <strtol+0x26a>
     f74:	22 23       	and	r18, r18
     f76:	29 f0       	breq	.+10     	; 0xf82 <strtol+0x254>
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e8       	ldi	r25, 0x80	; 128
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <strtol+0x25c>
     f82:	6f ef       	ldi	r22, 0xFF	; 255
     f84:	7f ef       	ldi	r23, 0xFF	; 255
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f e7       	ldi	r25, 0x7F	; 127
     f8a:	22 e2       	ldi	r18, 0x22	; 34
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <errno+0x1>
     f92:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <errno>
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <strtol+0x27c>
     f98:	22 23       	and	r18, r18
     f9a:	81 f0       	breq	.+32     	; 0xfbc <strtol+0x28e>
     f9c:	90 95       	com	r25
     f9e:	80 95       	com	r24
     fa0:	70 95       	com	r23
     fa2:	61 95       	neg	r22
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	46 2f       	mov	r20, r22
     fac:	37 2f       	mov	r19, r23
     fae:	28 2f       	mov	r18, r24
     fb0:	12 c0       	rjmp	.+36     	; 0xfd6 <strtol+0x2a8>
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <strtol+0x2a8>
     fbc:	97 ff       	sbrs	r25, 7
     fbe:	f5 cf       	rjmp	.-22     	; 0xfaa <strtol+0x27c>
     fc0:	82 e2       	ldi	r24, 0x22	; 34
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <errno+0x1>
     fc8:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <errno>
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	7f ef       	ldi	r23, 0xFF	; 255
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	9f e7       	ldi	r25, 0x7F	; 127
     fd4:	ea cf       	rjmp	.-44     	; 0xfaa <strtol+0x27c>
     fd6:	64 2f       	mov	r22, r20
     fd8:	73 2f       	mov	r23, r19
     fda:	82 2f       	mov	r24, r18
     fdc:	26 96       	adiw	r28, 0x06	; 6
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	8f 90       	pop	r8
     ffc:	7f 90       	pop	r7
     ffe:	6f 90       	pop	r6
    1000:	5f 90       	pop	r5
    1002:	4f 90       	pop	r4
    1004:	3f 90       	pop	r3
    1006:	2f 90       	pop	r2
    1008:	08 95       	ret

Disassembly of section .text.avrlibc:

000014ac <__ftoa_engine>:
    14ac:	28 30       	cpi	r18, 0x08	; 8
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <__ftoa_engine+0x6>
    14b0:	27 e0       	ldi	r18, 0x07	; 7
    14b2:	33 27       	eor	r19, r19
    14b4:	da 01       	movw	r26, r20
    14b6:	99 0f       	add	r25, r25
    14b8:	31 1d       	adc	r19, r1
    14ba:	87 fd       	sbrc	r24, 7
    14bc:	91 60       	ori	r25, 0x01	; 1
    14be:	00 96       	adiw	r24, 0x00	; 0
    14c0:	61 05       	cpc	r22, r1
    14c2:	71 05       	cpc	r23, r1
    14c4:	39 f4       	brne	.+14     	; 0x14d4 <__ftoa_engine+0x28>
    14c6:	32 60       	ori	r19, 0x02	; 2
    14c8:	2e 5f       	subi	r18, 0xFE	; 254
    14ca:	3d 93       	st	X+, r19
    14cc:	30 e3       	ldi	r19, 0x30	; 48
    14ce:	2a 95       	dec	r18
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <__ftoa_engine+0x1e>
    14d2:	08 95       	ret
    14d4:	9f 3f       	cpi	r25, 0xFF	; 255
    14d6:	30 f0       	brcs	.+12     	; 0x14e4 <__ftoa_engine+0x38>
    14d8:	80 38       	cpi	r24, 0x80	; 128
    14da:	71 05       	cpc	r23, r1
    14dc:	61 05       	cpc	r22, r1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__ftoa_engine+0x36>
    14e0:	3c 5f       	subi	r19, 0xFC	; 252
    14e2:	3c 5f       	subi	r19, 0xFC	; 252
    14e4:	3d 93       	st	X+, r19
    14e6:	91 30       	cpi	r25, 0x01	; 1
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <__ftoa_engine+0x40>
    14ea:	80 68       	ori	r24, 0x80	; 128
    14ec:	91 1d       	adc	r25, r1
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	1f 93       	push	r17
    14f4:	0f 93       	push	r16
    14f6:	ff 92       	push	r15
    14f8:	ef 92       	push	r14
    14fa:	19 2f       	mov	r17, r25
    14fc:	98 7f       	andi	r25, 0xF8	; 248
    14fe:	96 95       	lsr	r25
    1500:	e9 2f       	mov	r30, r25
    1502:	96 95       	lsr	r25
    1504:	96 95       	lsr	r25
    1506:	e9 0f       	add	r30, r25
    1508:	ff 27       	eor	r31, r31
    150a:	e2 5f       	subi	r30, 0xF2	; 242
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	99 27       	eor	r25, r25
    1510:	33 27       	eor	r19, r19
    1512:	ee 24       	eor	r14, r14
    1514:	ff 24       	eor	r15, r15
    1516:	a7 01       	movw	r20, r14
    1518:	e7 01       	movw	r28, r14
    151a:	05 90       	lpm	r0, Z+
    151c:	08 94       	sec
    151e:	07 94       	ror	r0
    1520:	28 f4       	brcc	.+10     	; 0x152c <__ftoa_engine+0x80>
    1522:	36 0f       	add	r19, r22
    1524:	e7 1e       	adc	r14, r23
    1526:	f8 1e       	adc	r15, r24
    1528:	49 1f       	adc	r20, r25
    152a:	51 1d       	adc	r21, r1
    152c:	66 0f       	add	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	06 94       	lsr	r0
    1536:	a1 f7       	brne	.-24     	; 0x1520 <__ftoa_engine+0x74>
    1538:	05 90       	lpm	r0, Z+
    153a:	07 94       	ror	r0
    153c:	28 f4       	brcc	.+10     	; 0x1548 <__ftoa_engine+0x9c>
    153e:	e7 0e       	add	r14, r23
    1540:	f8 1e       	adc	r15, r24
    1542:	49 1f       	adc	r20, r25
    1544:	56 1f       	adc	r21, r22
    1546:	c1 1d       	adc	r28, r1
    1548:	77 0f       	add	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	66 1f       	adc	r22, r22
    1550:	06 94       	lsr	r0
    1552:	a1 f7       	brne	.-24     	; 0x153c <__ftoa_engine+0x90>
    1554:	05 90       	lpm	r0, Z+
    1556:	07 94       	ror	r0
    1558:	28 f4       	brcc	.+10     	; 0x1564 <__ftoa_engine+0xb8>
    155a:	f8 0e       	add	r15, r24
    155c:	49 1f       	adc	r20, r25
    155e:	56 1f       	adc	r21, r22
    1560:	c7 1f       	adc	r28, r23
    1562:	d1 1d       	adc	r29, r1
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	66 1f       	adc	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	06 94       	lsr	r0
    156e:	a1 f7       	brne	.-24     	; 0x1558 <__ftoa_engine+0xac>
    1570:	05 90       	lpm	r0, Z+
    1572:	07 94       	ror	r0
    1574:	20 f4       	brcc	.+8      	; 0x157e <__ftoa_engine+0xd2>
    1576:	49 0f       	add	r20, r25
    1578:	56 1f       	adc	r21, r22
    157a:	c7 1f       	adc	r28, r23
    157c:	d8 1f       	adc	r29, r24
    157e:	99 0f       	add	r25, r25
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	06 94       	lsr	r0
    1588:	a9 f7       	brne	.-22     	; 0x1574 <__ftoa_engine+0xc8>
    158a:	84 91       	lpm	r24, Z
    158c:	10 95       	com	r17
    158e:	17 70       	andi	r17, 0x07	; 7
    1590:	41 f0       	breq	.+16     	; 0x15a2 <__ftoa_engine+0xf6>
    1592:	d6 95       	lsr	r29
    1594:	c7 95       	ror	r28
    1596:	57 95       	ror	r21
    1598:	47 95       	ror	r20
    159a:	f7 94       	ror	r15
    159c:	e7 94       	ror	r14
    159e:	1a 95       	dec	r17
    15a0:	c1 f7       	brne	.-16     	; 0x1592 <__ftoa_engine+0xe6>
    15a2:	e4 eb       	ldi	r30, 0xB4	; 180
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	68 94       	set
    15a8:	15 90       	lpm	r1, Z+
    15aa:	15 91       	lpm	r17, Z+
    15ac:	35 91       	lpm	r19, Z+
    15ae:	65 91       	lpm	r22, Z+
    15b0:	95 91       	lpm	r25, Z+
    15b2:	05 90       	lpm	r0, Z+
    15b4:	7f e2       	ldi	r23, 0x2F	; 47
    15b6:	73 95       	inc	r23
    15b8:	e1 18       	sub	r14, r1
    15ba:	f1 0a       	sbc	r15, r17
    15bc:	43 0b       	sbc	r20, r19
    15be:	56 0b       	sbc	r21, r22
    15c0:	c9 0b       	sbc	r28, r25
    15c2:	d0 09       	sbc	r29, r0
    15c4:	c0 f7       	brcc	.-16     	; 0x15b6 <__ftoa_engine+0x10a>
    15c6:	e1 0c       	add	r14, r1
    15c8:	f1 1e       	adc	r15, r17
    15ca:	43 1f       	adc	r20, r19
    15cc:	56 1f       	adc	r21, r22
    15ce:	c9 1f       	adc	r28, r25
    15d0:	d0 1d       	adc	r29, r0
    15d2:	7e f4       	brtc	.+30     	; 0x15f2 <__ftoa_engine+0x146>
    15d4:	70 33       	cpi	r23, 0x30	; 48
    15d6:	11 f4       	brne	.+4      	; 0x15dc <__ftoa_engine+0x130>
    15d8:	8a 95       	dec	r24
    15da:	e6 cf       	rjmp	.-52     	; 0x15a8 <__ftoa_engine+0xfc>
    15dc:	e8 94       	clt
    15de:	01 50       	subi	r16, 0x01	; 1
    15e0:	30 f0       	brcs	.+12     	; 0x15ee <__ftoa_engine+0x142>
    15e2:	08 0f       	add	r16, r24
    15e4:	0a f4       	brpl	.+2      	; 0x15e8 <__ftoa_engine+0x13c>
    15e6:	00 27       	eor	r16, r16
    15e8:	02 17       	cp	r16, r18
    15ea:	08 f4       	brcc	.+2      	; 0x15ee <__ftoa_engine+0x142>
    15ec:	20 2f       	mov	r18, r16
    15ee:	23 95       	inc	r18
    15f0:	02 2f       	mov	r16, r18
    15f2:	7a 33       	cpi	r23, 0x3A	; 58
    15f4:	28 f0       	brcs	.+10     	; 0x1600 <__ftoa_engine+0x154>
    15f6:	79 e3       	ldi	r23, 0x39	; 57
    15f8:	7d 93       	st	X+, r23
    15fa:	2a 95       	dec	r18
    15fc:	e9 f7       	brne	.-6      	; 0x15f8 <__ftoa_engine+0x14c>
    15fe:	10 c0       	rjmp	.+32     	; 0x1620 <__ftoa_engine+0x174>
    1600:	7d 93       	st	X+, r23
    1602:	2a 95       	dec	r18
    1604:	89 f6       	brne	.-94     	; 0x15a8 <__ftoa_engine+0xfc>
    1606:	06 94       	lsr	r0
    1608:	97 95       	ror	r25
    160a:	67 95       	ror	r22
    160c:	37 95       	ror	r19
    160e:	17 95       	ror	r17
    1610:	17 94       	ror	r1
    1612:	e1 18       	sub	r14, r1
    1614:	f1 0a       	sbc	r15, r17
    1616:	43 0b       	sbc	r20, r19
    1618:	56 0b       	sbc	r21, r22
    161a:	c9 0b       	sbc	r28, r25
    161c:	d0 09       	sbc	r29, r0
    161e:	98 f0       	brcs	.+38     	; 0x1646 <__ftoa_engine+0x19a>
    1620:	23 95       	inc	r18
    1622:	7e 91       	ld	r23, -X
    1624:	73 95       	inc	r23
    1626:	7a 33       	cpi	r23, 0x3A	; 58
    1628:	08 f0       	brcs	.+2      	; 0x162c <__ftoa_engine+0x180>
    162a:	70 e3       	ldi	r23, 0x30	; 48
    162c:	7c 93       	st	X, r23
    162e:	20 13       	cpse	r18, r16
    1630:	b8 f7       	brcc	.-18     	; 0x1620 <__ftoa_engine+0x174>
    1632:	7e 91       	ld	r23, -X
    1634:	70 61       	ori	r23, 0x10	; 16
    1636:	7d 93       	st	X+, r23
    1638:	30 f0       	brcs	.+12     	; 0x1646 <__ftoa_engine+0x19a>
    163a:	83 95       	inc	r24
    163c:	71 e3       	ldi	r23, 0x31	; 49
    163e:	7d 93       	st	X+, r23
    1640:	70 e3       	ldi	r23, 0x30	; 48
    1642:	2a 95       	dec	r18
    1644:	e1 f7       	brne	.-8      	; 0x163e <__ftoa_engine+0x192>
    1646:	11 24       	eor	r1, r1
    1648:	ef 90       	pop	r14
    164a:	ff 90       	pop	r15
    164c:	0f 91       	pop	r16
    164e:	1f 91       	pop	r17
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	99 27       	eor	r25, r25
    1656:	87 fd       	sbrc	r24, 7
    1658:	90 95       	com	r25
    165a:	08 95       	ret

Disassembly of section .text.avrlibc:

00004036 <isspace>:
    4036:	91 11       	cpse	r25, r1
    4038:	0c 94 30 21 	jmp	0x4260	; 0x4260 <__ctype_isfalse>
    403c:	80 32       	cpi	r24, 0x20	; 32
    403e:	19 f0       	breq	.+6      	; 0x4046 <isspace+0x10>
    4040:	89 50       	subi	r24, 0x09	; 9
    4042:	85 50       	subi	r24, 0x05	; 5
    4044:	c8 f7       	brcc	.-14     	; 0x4038 <isspace+0x2>
    4046:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ac8 <memcpy>:
    3ac8:	cf 92       	push	r12
    3aca:	df 92       	push	r13
    3acc:	ef 92       	push	r14
    3ace:	dc 01       	movw	r26, r24
    3ad0:	6a 01       	movw	r12, r20
    3ad2:	e6 2e       	mov	r14, r22
    3ad4:	28 0f       	add	r18, r24
    3ad6:	39 1f       	adc	r19, r25
    3ad8:	a2 17       	cp	r26, r18
    3ada:	b3 07       	cpc	r27, r19
    3adc:	51 f0       	breq	.+20     	; 0x3af2 <memcpy+0x2a>
    3ade:	f6 01       	movw	r30, r12
    3ae0:	44 91       	lpm	r20, Z
    3ae2:	e7 fc       	sbrc	r14, 7
    3ae4:	40 81       	ld	r20, Z
    3ae6:	4d 93       	st	X+, r20
    3ae8:	4f ef       	ldi	r20, 0xFF	; 255
    3aea:	c4 1a       	sub	r12, r20
    3aec:	d4 0a       	sbc	r13, r20
    3aee:	e4 0a       	sbc	r14, r20
    3af0:	f3 cf       	rjmp	.-26     	; 0x3ad8 <memcpy+0x10>
    3af2:	ef 90       	pop	r14
    3af4:	df 90       	pop	r13
    3af6:	cf 90       	pop	r12
    3af8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003c16 <strcat>:
    3c16:	9a 01       	movw	r18, r20
    3c18:	46 2f       	mov	r20, r22
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	bd 01       	movw	r22, r26
    3c1e:	6f 5f       	subi	r22, 0xFF	; 255
    3c20:	7f 4f       	sbci	r23, 0xFF	; 255
    3c22:	5c 91       	ld	r21, X
    3c24:	55 23       	and	r21, r21
    3c26:	11 f0       	breq	.+4      	; 0x3c2c <strcat+0x16>
    3c28:	db 01       	movw	r26, r22
    3c2a:	f8 cf       	rjmp	.-16     	; 0x3c1c <strcat+0x6>
    3c2c:	f9 01       	movw	r30, r18
    3c2e:	54 91       	lpm	r21, Z
    3c30:	47 fd       	sbrc	r20, 7
    3c32:	50 81       	ld	r21, Z
    3c34:	5d 93       	st	X+, r21
    3c36:	55 23       	and	r21, r21
    3c38:	21 f0       	breq	.+8      	; 0x3c42 <strcat+0x2c>
    3c3a:	2f 5f       	subi	r18, 0xFF	; 255
    3c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3e:	4f 4f       	sbci	r20, 0xFF	; 255
    3c40:	f5 cf       	rjmp	.-22     	; 0x3c2c <strcat+0x16>
    3c42:	08 95       	ret

Disassembly of section .text.avrlibc:

00003742 <strcmp>:
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	6b 01       	movw	r12, r22
    374a:	e8 2e       	mov	r14, r24
    374c:	f6 01       	movw	r30, r12
    374e:	84 91       	lpm	r24, Z
    3750:	e7 fc       	sbrc	r14, 7
    3752:	80 81       	ld	r24, Z
    3754:	f9 01       	movw	r30, r18
    3756:	54 91       	lpm	r21, Z
    3758:	47 fd       	sbrc	r20, 7
    375a:	50 81       	ld	r21, Z
    375c:	85 13       	cpse	r24, r21
    375e:	0b c0       	rjmp	.+22     	; 0x3776 <strcmp+0x34>
    3760:	88 23       	and	r24, r24
    3762:	41 f0       	breq	.+16     	; 0x3774 <strcmp+0x32>
    3764:	8f ef       	ldi	r24, 0xFF	; 255
    3766:	c8 1a       	sub	r12, r24
    3768:	d8 0a       	sbc	r13, r24
    376a:	e8 0a       	sbc	r14, r24
    376c:	2f 5f       	subi	r18, 0xFF	; 255
    376e:	3f 4f       	sbci	r19, 0xFF	; 255
    3770:	4f 4f       	sbci	r20, 0xFF	; 255
    3772:	ec cf       	rjmp	.-40     	; 0x374c <strcmp+0xa>
    3774:	58 2f       	mov	r21, r24
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	85 1b       	sub	r24, r21
    377a:	91 09       	sbc	r25, r1
    377c:	ef 90       	pop	r14
    377e:	df 90       	pop	r13
    3780:	cf 90       	pop	r12
    3782:	08 95       	ret

Disassembly of section .text.avrlibc:

00002e06 <strncmp>:
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	6b 01       	movw	r12, r22
    2e12:	e8 2e       	mov	r14, r24
    2e14:	01 15       	cp	r16, r1
    2e16:	11 05       	cpc	r17, r1
    2e18:	19 f1       	breq	.+70     	; 0x2e60 <strncmp+0x5a>
    2e1a:	01 50       	subi	r16, 0x01	; 1
    2e1c:	11 09       	sbc	r17, r1
    2e1e:	f6 01       	movw	r30, r12
    2e20:	84 91       	lpm	r24, Z
    2e22:	e7 fc       	sbrc	r14, 7
    2e24:	80 81       	ld	r24, Z
    2e26:	88 23       	and	r24, r24
    2e28:	99 f0       	breq	.+38     	; 0x2e50 <strncmp+0x4a>
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	94 91       	lpm	r25, Z
    2e2e:	47 fd       	sbrc	r20, 7
    2e30:	90 81       	ld	r25, Z
    2e32:	99 23       	and	r25, r25
    2e34:	69 f0       	breq	.+26     	; 0x2e50 <strncmp+0x4a>
    2e36:	01 15       	cp	r16, r1
    2e38:	11 05       	cpc	r17, r1
    2e3a:	51 f0       	breq	.+20     	; 0x2e50 <strncmp+0x4a>
    2e3c:	89 13       	cpse	r24, r25
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <strncmp+0x4a>
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	c8 1a       	sub	r12, r24
    2e44:	d8 0a       	sbc	r13, r24
    2e46:	e8 0a       	sbc	r14, r24
    2e48:	2f 5f       	subi	r18, 0xFF	; 255
    2e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e4e:	e5 cf       	rjmp	.-54     	; 0x2e1a <strncmp+0x14>
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	f9 01       	movw	r30, r18
    2e54:	24 91       	lpm	r18, Z
    2e56:	47 fd       	sbrc	r20, 7
    2e58:	20 81       	ld	r18, Z
    2e5a:	82 1b       	sub	r24, r18
    2e5c:	91 09       	sbc	r25, r1
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <strncmp+0x5e>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	ef 90       	pop	r14
    2e6a:	df 90       	pop	r13
    2e6c:	cf 90       	pop	r12
    2e6e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003c44 <strlen>:
    3c44:	cf 92       	push	r12
    3c46:	df 92       	push	r13
    3c48:	ef 92       	push	r14
    3c4a:	6b 01       	movw	r12, r22
    3c4c:	e8 2e       	mov	r14, r24
    3c4e:	a8 2f       	mov	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	fc 01       	movw	r30, r24
    3c54:	24 91       	lpm	r18, Z
    3c56:	a7 fd       	sbrc	r26, 7
    3c58:	20 81       	ld	r18, Z
    3c5a:	22 23       	and	r18, r18
    3c5c:	19 f0       	breq	.+6      	; 0x3c64 <strlen+0x20>
    3c5e:	01 96       	adiw	r24, 0x01	; 1
    3c60:	a1 1d       	adc	r26, r1
    3c62:	f7 cf       	rjmp	.-18     	; 0x3c52 <strlen+0xe>
    3c64:	8c 19       	sub	r24, r12
    3c66:	9d 09       	sbc	r25, r13
    3c68:	ef 90       	pop	r14
    3c6a:	df 90       	pop	r13
    3c6c:	cf 90       	pop	r12
    3c6e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e74 <strcpy>:
    3e74:	9a 01       	movw	r18, r20
    3e76:	46 2f       	mov	r20, r22
    3e78:	dc 01       	movw	r26, r24
    3e7a:	f9 01       	movw	r30, r18
    3e7c:	54 91       	lpm	r21, Z
    3e7e:	47 fd       	sbrc	r20, 7
    3e80:	50 81       	ld	r21, Z
    3e82:	5d 93       	st	X+, r21
    3e84:	55 23       	and	r21, r21
    3e86:	21 f0       	breq	.+8      	; 0x3e90 <strcpy+0x1c>
    3e88:	2f 5f       	subi	r18, 0xFF	; 255
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    3e8e:	f5 cf       	rjmp	.-22     	; 0x3e7a <strcpy+0x6>
    3e90:	08 95       	ret

Disassembly of section .text.avrlibc:

000039fa <strnlen>:
    39fa:	cf 92       	push	r12
    39fc:	df 92       	push	r13
    39fe:	ef 92       	push	r14
    3a00:	6b 01       	movw	r12, r22
    3a02:	e8 2e       	mov	r14, r24
    3a04:	a8 2f       	mov	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	41 15       	cp	r20, r1
    3a0a:	51 05       	cpc	r21, r1
    3a0c:	31 f4       	brne	.+12     	; 0x3a1a <strnlen+0x20>
    3a0e:	8c 19       	sub	r24, r12
    3a10:	9d 09       	sbc	r25, r13
    3a12:	ef 90       	pop	r14
    3a14:	df 90       	pop	r13
    3a16:	cf 90       	pop	r12
    3a18:	08 95       	ret
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	24 91       	lpm	r18, Z
    3a1e:	a7 fd       	sbrc	r26, 7
    3a20:	20 81       	ld	r18, Z
    3a22:	22 23       	and	r18, r18
    3a24:	a1 f3       	breq	.-24     	; 0x3a0e <strnlen+0x14>
    3a26:	01 96       	adiw	r24, 0x01	; 1
    3a28:	a1 1d       	adc	r26, r1
    3a2a:	41 50       	subi	r20, 0x01	; 1
    3a2c:	51 09       	sbc	r21, r1
    3a2e:	ec cf       	rjmp	.-40     	; 0x3a08 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002b5c <fputc>:
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	fb 01       	movw	r30, r22
    2b66:	24 81       	ldd	r18, Z+4	; 0x04
    2b68:	21 fd       	sbrc	r18, 1
    2b6a:	03 c0       	rjmp	.+6      	; 0x2b72 <fputc+0x16>
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	9f ef       	ldi	r25, 0xFF	; 255
    2b70:	2c c0       	rjmp	.+88     	; 0x2bca <fputc+0x6e>
    2b72:	22 ff       	sbrs	r18, 2
    2b74:	16 c0       	rjmp	.+44     	; 0x2ba2 <fputc+0x46>
    2b76:	47 81       	ldd	r20, Z+7	; 0x07
    2b78:	50 85       	ldd	r21, Z+8	; 0x08
    2b7a:	25 81       	ldd	r18, Z+5	; 0x05
    2b7c:	36 81       	ldd	r19, Z+6	; 0x06
    2b7e:	42 17       	cp	r20, r18
    2b80:	53 07       	cpc	r21, r19
    2b82:	44 f4       	brge	.+16     	; 0x2b94 <fputc+0x38>
    2b84:	a0 81       	ld	r26, Z
    2b86:	b1 81       	ldd	r27, Z+1	; 0x01
    2b88:	9d 01       	movw	r18, r26
    2b8a:	2f 5f       	subi	r18, 0xFF	; 255
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	31 83       	std	Z+1, r19	; 0x01
    2b90:	20 83       	st	Z, r18
    2b92:	8c 93       	st	X, r24
    2b94:	27 81       	ldd	r18, Z+7	; 0x07
    2b96:	30 85       	ldd	r19, Z+8	; 0x08
    2b98:	2f 5f       	subi	r18, 0xFF	; 255
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	30 87       	std	Z+8, r19	; 0x08
    2b9e:	27 83       	std	Z+7, r18	; 0x07
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <fputc+0x6e>
    2ba2:	8b 01       	movw	r16, r22
    2ba4:	ec 01       	movw	r28, r24
    2ba6:	fb 01       	movw	r30, r22
    2ba8:	01 84       	ldd	r0, Z+9	; 0x09
    2baa:	f2 85       	ldd	r31, Z+10	; 0x0a
    2bac:	e0 2d       	mov	r30, r0
    2bae:	09 95       	icall
    2bb0:	89 2b       	or	r24, r25
    2bb2:	e1 f6       	brne	.-72     	; 0x2b6c <fputc+0x10>
    2bb4:	d8 01       	movw	r26, r16
    2bb6:	17 96       	adiw	r26, 0x07	; 7
    2bb8:	8d 91       	ld	r24, X+
    2bba:	9c 91       	ld	r25, X
    2bbc:	18 97       	sbiw	r26, 0x08	; 8
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	18 96       	adiw	r26, 0x08	; 8
    2bc2:	9c 93       	st	X, r25
    2bc4:	8e 93       	st	-X, r24
    2bc6:	17 97       	sbiw	r26, 0x07	; 7
    2bc8:	ce 01       	movw	r24, r28
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

Disassembly of section .text.avrlibc:

000035ee <sprintf>:
    35ee:	af e0       	ldi	r26, 0x0F	; 15
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	ed ef       	ldi	r30, 0xFD	; 253
    35f4:	fa e1       	ldi	r31, 0x1A	; 26
    35f6:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__prologue_saves__+0x1c>
    35fa:	0e 89       	ldd	r16, Y+22	; 0x16
    35fc:	1f 89       	ldd	r17, Y+23	; 0x17
    35fe:	86 e0       	ldi	r24, 0x06	; 6
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	1a 83       	std	Y+2, r17	; 0x02
    3604:	09 83       	std	Y+1, r16	; 0x01
    3606:	8f ef       	ldi	r24, 0xFF	; 255
    3608:	9f e7       	ldi	r25, 0x7F	; 127
    360a:	9f 83       	std	Y+7, r25	; 0x07
    360c:	8e 83       	std	Y+6, r24	; 0x06
    360e:	9e 01       	movw	r18, r28
    3610:	25 5e       	subi	r18, 0xE5	; 229
    3612:	3f 4f       	sbci	r19, 0xFF	; 255
    3614:	48 8d       	ldd	r20, Y+24	; 0x18
    3616:	59 8d       	ldd	r21, Y+25	; 0x19
    3618:	6a 8d       	ldd	r22, Y+26	; 0x1a
    361a:	ce 01       	movw	r24, r28
    361c:	01 96       	adiw	r24, 0x01	; 1
    361e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vfprintf>
    3622:	e8 85       	ldd	r30, Y+8	; 0x08
    3624:	f9 85       	ldd	r31, Y+9	; 0x09
    3626:	e0 0f       	add	r30, r16
    3628:	f1 1f       	adc	r31, r17
    362a:	10 82       	st	Z, r1
    362c:	2f 96       	adiw	r28, 0x0f	; 15
    362e:	e4 e0       	ldi	r30, 0x04	; 4
    3630:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000022a4 <__ultoa_invert>:
    22a4:	fa 01       	movw	r30, r20
    22a6:	aa 27       	eor	r26, r26
    22a8:	28 30       	cpi	r18, 0x08	; 8
    22aa:	51 f1       	breq	.+84     	; 0x2300 <__ultoa_invert+0x5c>
    22ac:	20 31       	cpi	r18, 0x10	; 16
    22ae:	81 f1       	breq	.+96     	; 0x2310 <__ultoa_invert+0x6c>
    22b0:	e8 94       	clt
    22b2:	6f 93       	push	r22
    22b4:	6e 7f       	andi	r22, 0xFE	; 254
    22b6:	6e 5f       	subi	r22, 0xFE	; 254
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f 4f       	sbci	r24, 0xFF	; 255
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	af 4f       	sbci	r26, 0xFF	; 255
    22c0:	b1 e0       	ldi	r27, 0x01	; 1
    22c2:	3e d0       	rcall	.+124    	; 0x2340 <__ultoa_invert+0x9c>
    22c4:	b4 e0       	ldi	r27, 0x04	; 4
    22c6:	3c d0       	rcall	.+120    	; 0x2340 <__ultoa_invert+0x9c>
    22c8:	67 0f       	add	r22, r23
    22ca:	78 1f       	adc	r23, r24
    22cc:	89 1f       	adc	r24, r25
    22ce:	9a 1f       	adc	r25, r26
    22d0:	a1 1d       	adc	r26, r1
    22d2:	68 0f       	add	r22, r24
    22d4:	79 1f       	adc	r23, r25
    22d6:	8a 1f       	adc	r24, r26
    22d8:	91 1d       	adc	r25, r1
    22da:	a1 1d       	adc	r26, r1
    22dc:	6a 0f       	add	r22, r26
    22de:	71 1d       	adc	r23, r1
    22e0:	81 1d       	adc	r24, r1
    22e2:	91 1d       	adc	r25, r1
    22e4:	a1 1d       	adc	r26, r1
    22e6:	20 d0       	rcall	.+64     	; 0x2328 <__ultoa_invert+0x84>
    22e8:	09 f4       	brne	.+2      	; 0x22ec <__ultoa_invert+0x48>
    22ea:	68 94       	set
    22ec:	3f 91       	pop	r19
    22ee:	2a e0       	ldi	r18, 0x0A	; 10
    22f0:	26 9f       	mul	r18, r22
    22f2:	11 24       	eor	r1, r1
    22f4:	30 19       	sub	r19, r0
    22f6:	30 5d       	subi	r19, 0xD0	; 208
    22f8:	31 93       	st	Z+, r19
    22fa:	de f6       	brtc	.-74     	; 0x22b2 <__ultoa_invert+0xe>
    22fc:	cf 01       	movw	r24, r30
    22fe:	08 95       	ret
    2300:	46 2f       	mov	r20, r22
    2302:	47 70       	andi	r20, 0x07	; 7
    2304:	40 5d       	subi	r20, 0xD0	; 208
    2306:	41 93       	st	Z+, r20
    2308:	b3 e0       	ldi	r27, 0x03	; 3
    230a:	0f d0       	rcall	.+30     	; 0x232a <__ultoa_invert+0x86>
    230c:	c9 f7       	brne	.-14     	; 0x2300 <__ultoa_invert+0x5c>
    230e:	f6 cf       	rjmp	.-20     	; 0x22fc <__ultoa_invert+0x58>
    2310:	46 2f       	mov	r20, r22
    2312:	4f 70       	andi	r20, 0x0F	; 15
    2314:	40 5d       	subi	r20, 0xD0	; 208
    2316:	4a 33       	cpi	r20, 0x3A	; 58
    2318:	18 f0       	brcs	.+6      	; 0x2320 <__ultoa_invert+0x7c>
    231a:	49 5d       	subi	r20, 0xD9	; 217
    231c:	31 fd       	sbrc	r19, 1
    231e:	40 52       	subi	r20, 0x20	; 32
    2320:	41 93       	st	Z+, r20
    2322:	02 d0       	rcall	.+4      	; 0x2328 <__ultoa_invert+0x84>
    2324:	a9 f7       	brne	.-22     	; 0x2310 <__ultoa_invert+0x6c>
    2326:	ea cf       	rjmp	.-44     	; 0x22fc <__ultoa_invert+0x58>
    2328:	b4 e0       	ldi	r27, 0x04	; 4
    232a:	a6 95       	lsr	r26
    232c:	97 95       	ror	r25
    232e:	87 95       	ror	r24
    2330:	77 95       	ror	r23
    2332:	67 95       	ror	r22
    2334:	ba 95       	dec	r27
    2336:	c9 f7       	brne	.-14     	; 0x232a <__ultoa_invert+0x86>
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	61 05       	cpc	r22, r1
    233c:	71 05       	cpc	r23, r1
    233e:	08 95       	ret
    2340:	9b 01       	movw	r18, r22
    2342:	ac 01       	movw	r20, r24
    2344:	0a 2e       	mov	r0, r26
    2346:	06 94       	lsr	r0
    2348:	57 95       	ror	r21
    234a:	47 95       	ror	r20
    234c:	37 95       	ror	r19
    234e:	27 95       	ror	r18
    2350:	ba 95       	dec	r27
    2352:	c9 f7       	brne	.-14     	; 0x2346 <__ultoa_invert+0xa2>
    2354:	62 0f       	add	r22, r18
    2356:	73 1f       	adc	r23, r19
    2358:	84 1f       	adc	r24, r20
    235a:	95 1f       	adc	r25, r21
    235c:	a0 1d       	adc	r26, r0
    235e:	08 95       	ret

Disassembly of section .text.avrlibc:

00004260 <__ctype_isfalse>:
    4260:	99 27       	eor	r25, r25
    4262:	88 27       	eor	r24, r24

00004264 <__ctype_istrue>:
    4264:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d10 <eeprom_read_block>:
    3d10:	ba 01       	movw	r22, r20
    3d12:	a9 01       	movw	r20, r18
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22

00003d18 <eeprom_read_blraw>:
    3d18:	fc 01       	movw	r30, r24
    3d1a:	f9 99       	sbic	0x1f, 1	; 31
    3d1c:	fe cf       	rjmp	.-4      	; 0x3d1a <eeprom_read_blraw+0x2>
    3d1e:	06 c0       	rjmp	.+12     	; 0x3d2c <eeprom_read_blraw+0x14>
    3d20:	f2 bd       	out	0x22, r31	; 34
    3d22:	e1 bd       	out	0x21, r30	; 33
    3d24:	f8 9a       	sbi	0x1f, 0	; 31
    3d26:	31 96       	adiw	r30, 0x01	; 1
    3d28:	00 b4       	in	r0, 0x20	; 32
    3d2a:	0d 92       	st	X+, r0
    3d2c:	41 50       	subi	r20, 0x01	; 1
    3d2e:	50 40       	sbci	r21, 0x00	; 0
    3d30:	b8 f7       	brcc	.-18     	; 0x3d20 <eeprom_read_blraw+0x8>
    3d32:	08 95       	ret

Disassembly of section .text.avrlibc:

00004048 <eeprom_read_byte>:
    4048:	cb 01       	movw	r24, r22
    404a:	f9 99       	sbic	0x1f, 1	; 31
    404c:	fe cf       	rjmp	.-4      	; 0x404a <eeprom_read_byte+0x2>
    404e:	92 bd       	out	0x22, r25	; 34
    4050:	81 bd       	out	0x21, r24	; 33
    4052:	f8 9a       	sbi	0x1f, 0	; 31
    4054:	99 27       	eor	r25, r25
    4056:	80 b5       	in	r24, 0x20	; 32
    4058:	08 95       	ret

Disassembly of section .text.avrlibc:

00004168 <eeprom_read_dword>:
    4168:	cb 01       	movw	r24, r22
    416a:	a6 e1       	ldi	r26, 0x16	; 22
    416c:	b0 e0       	ldi	r27, 0x00	; 0
    416e:	44 e0       	ldi	r20, 0x04	; 4
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00004176 <eeprom_read_word>:
    4176:	cb 01       	movw	r24, r22
    4178:	a8 e1       	ldi	r26, 0x18	; 24
    417a:	b0 e0       	ldi	r27, 0x00	; 0
    417c:	42 e0       	ldi	r20, 0x02	; 2
    417e:	50 e0       	ldi	r21, 0x00	; 0
    4180:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003678 <eeprom_update_block>:
    3678:	cf 92       	push	r12
    367a:	df 92       	push	r13
    367c:	ef 92       	push	r14
    367e:	21 50       	subi	r18, 0x01	; 1
    3680:	31 09       	sbc	r19, r1
    3682:	c0 f0       	brcs	.+48     	; 0x36b4 <eeprom_update_block+0x3c>
    3684:	6b 01       	movw	r12, r22
    3686:	e8 2e       	mov	r14, r24
    3688:	c2 0e       	add	r12, r18
    368a:	d3 1e       	adc	r13, r19
    368c:	e1 1c       	adc	r14, r1
    368e:	ca 01       	movw	r24, r20
    3690:	82 0f       	add	r24, r18
    3692:	93 1f       	adc	r25, r19
    3694:	42 2f       	mov	r20, r18
    3696:	73 2f       	mov	r23, r19
    3698:	f6 01       	movw	r30, r12
    369a:	5e 2d       	mov	r21, r14
    369c:	0e 94 07 21 	call	0x420e	; 0x420e <__xload_1>
    36a0:	26 2f       	mov	r18, r22
    36a2:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <eeprom_update_r18>
    36a6:	31 e0       	ldi	r19, 0x01	; 1
    36a8:	c3 1a       	sub	r12, r19
    36aa:	d1 08       	sbc	r13, r1
    36ac:	e1 08       	sbc	r14, r1
    36ae:	41 50       	subi	r20, 0x01	; 1
    36b0:	70 40       	sbci	r23, 0x00	; 0
    36b2:	90 f7       	brcc	.-28     	; 0x3698 <eeprom_update_block+0x20>
    36b4:	ef 90       	pop	r14
    36b6:	df 90       	pop	r13
    36b8:	cf 90       	pop	r12
    36ba:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d34 <eeprom_update_byte>:
    3d34:	26 2f       	mov	r18, r22

00003d36 <eeprom_update_r18>:
    3d36:	f9 99       	sbic	0x1f, 1	; 31
    3d38:	fe cf       	rjmp	.-4      	; 0x3d36 <eeprom_update_r18>
    3d3a:	92 bd       	out	0x22, r25	; 34
    3d3c:	81 bd       	out	0x21, r24	; 33
    3d3e:	f8 9a       	sbi	0x1f, 0	; 31
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	00 b4       	in	r0, 0x20	; 32
    3d44:	02 16       	cp	r0, r18
    3d46:	39 f0       	breq	.+14     	; 0x3d56 <eeprom_update_r18+0x20>
    3d48:	1f ba       	out	0x1f, r1	; 31
    3d4a:	20 bd       	out	0x20, r18	; 32
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	fa 9a       	sbi	0x1f, 2	; 31
    3d52:	f9 9a       	sbi	0x1f, 1	; 31
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	08 95       	ret

Disassembly of section .text.avrlibc:

00003f14 <eeprom_update_dword>:
    3f14:	03 96       	adiw	r24, 0x03	; 3
    3f16:	27 2f       	mov	r18, r23
    3f18:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <eeprom_update_r18>
    3f1c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <eeprom_update_byte>
    3f20:	25 2f       	mov	r18, r21
    3f22:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <eeprom_update_r18>
    3f26:	24 2f       	mov	r18, r20
    3f28:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

000041e4 <eeprom_update_word>:
    41e4:	01 96       	adiw	r24, 0x01	; 1
    41e6:	27 2f       	mov	r18, r23
    41e8:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <eeprom_update_r18>
    41ec:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00003ddc <__mulsi3>:
    3ddc:	db 01       	movw	r26, r22
    3dde:	8f 93       	push	r24
    3de0:	9f 93       	push	r25
    3de2:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__muluhisi3>
    3de6:	bf 91       	pop	r27
    3de8:	af 91       	pop	r26
    3dea:	a2 9f       	mul	r26, r18
    3dec:	80 0d       	add	r24, r0
    3dee:	91 1d       	adc	r25, r1
    3df0:	a3 9f       	mul	r26, r19
    3df2:	90 0d       	add	r25, r0
    3df4:	b2 9f       	mul	r27, r18
    3df6:	90 0d       	add	r25, r0
    3df8:	11 24       	eor	r1, r1
    3dfa:	08 95       	ret

Disassembly of section .text.libgcc.div:

000036bc <__udivmodsi4>:
    36bc:	a1 e2       	ldi	r26, 0x21	; 33
    36be:	1a 2e       	mov	r1, r26
    36c0:	aa 1b       	sub	r26, r26
    36c2:	bb 1b       	sub	r27, r27
    36c4:	fd 01       	movw	r30, r26
    36c6:	0d c0       	rjmp	.+26     	; 0x36e2 <__udivmodsi4_ep>

000036c8 <__udivmodsi4_loop>:
    36c8:	aa 1f       	adc	r26, r26
    36ca:	bb 1f       	adc	r27, r27
    36cc:	ee 1f       	adc	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	a2 17       	cp	r26, r18
    36d2:	b3 07       	cpc	r27, r19
    36d4:	e4 07       	cpc	r30, r20
    36d6:	f5 07       	cpc	r31, r21
    36d8:	20 f0       	brcs	.+8      	; 0x36e2 <__udivmodsi4_ep>
    36da:	a2 1b       	sub	r26, r18
    36dc:	b3 0b       	sbc	r27, r19
    36de:	e4 0b       	sbc	r30, r20
    36e0:	f5 0b       	sbc	r31, r21

000036e2 <__udivmodsi4_ep>:
    36e2:	66 1f       	adc	r22, r22
    36e4:	77 1f       	adc	r23, r23
    36e6:	88 1f       	adc	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	1a 94       	dec	r1
    36ec:	69 f7       	brne	.-38     	; 0x36c8 <__udivmodsi4_loop>
    36ee:	60 95       	com	r22
    36f0:	70 95       	com	r23
    36f2:	80 95       	com	r24
    36f4:	90 95       	com	r25
    36f6:	9b 01       	movw	r18, r22
    36f8:	ac 01       	movw	r20, r24
    36fa:	bd 01       	movw	r22, r26
    36fc:	cf 01       	movw	r24, r30
    36fe:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003f6e <__muluhisi3>:
    3f6e:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__umulhisi3>
    3f72:	a5 9f       	mul	r26, r21
    3f74:	90 0d       	add	r25, r0
    3f76:	b4 9f       	mul	r27, r20
    3f78:	90 0d       	add	r25, r0
    3f7a:	a4 9f       	mul	r26, r20
    3f7c:	80 0d       	add	r24, r0
    3f7e:	91 1d       	adc	r25, r1
    3f80:	11 24       	eor	r1, r1
    3f82:	08 95       	ret

Disassembly of section .text.libgcc:

0000420e <__xload_1>:
    420e:	57 fd       	sbrc	r21, 7
    4210:	60 81       	ld	r22, Z
    4212:	57 ff       	sbrs	r21, 7
    4214:	64 91       	lpm	r22, Z
    4216:	08 95       	ret
