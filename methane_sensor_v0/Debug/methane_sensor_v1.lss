
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000042f4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b8  00800100  00800100  000042f4  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000042f4  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  0000434f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000938  00000000  00000000  000043c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c2eb  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002603  00000000  00000000  00010fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045b6  00000000  00000000  000135e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001838  00000000  00000000  00017b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a12  00000000  00000000  000193d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051e5  00000000  00000000  00019de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  0001efcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00004210  00004210  000042e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00004024  00004024  000040f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003f2e  00003f2e  00004002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00004032  00004032  00004106  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003f42  00003f42  00004016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00004040  00004040  00004114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00003f56  00003f56  0000402a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  0000404e  0000404e  00004122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00003f6a  00003f6a  0000403e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000014  00003f7e  00003f7e  00004052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_init 00000008  000041c2  000041c2  00004296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_reset_active 00000008  000041ca  000041ca  0000429e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.rn2483_reset_deactive 00000008  000041d2  000041d2  000042a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SCD30_HAL_init 0000000e  0000405c  0000405c  00004130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SCD30_HAL_data_ready 0000000a  0000419a  0000419a  0000426e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_16 0000004e  00003134  00003134  00003208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  00800690  00800690  000042f4  2**0
                  ALLOC
 31 .text.__vector_13 0000004e  00003182  00003182  00003256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss._cb      00000002  00800692  00800692  000042f4  2**0
                  ALLOC
 33 .text.__vector_9 0000007c  000028c2  000028c2  00002996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.cnt      00000001  00800694  00800694  000042f4  2**0
                  ALLOC
 35 .bss.callbacks 0000000a  0080067a  0080067a  000042f4  2**0
                  ALLOC
 36 .text.start_and_write_data 0000004c  0000321e  0000321e  000032f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.read_and_stop 0000005a  00002e8e  00002e8e  00002f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_API_write_data 00000014  00003f92  00003f92  00004066  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_API_write_data_stop 0000001a  00003e58  00003e58  00003f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00003a0e  00003a0e  00003ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_API_repeat_read_data_stop 00000030  00003aa4  00003aa4  00003b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_HAL_init 00000012  00003fce  00003fce  000040a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_HAL_start 00000048  000034c4  000034c4  00003598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TWI_HAL_repeated_start 00000042  000036aa  000036aa  0000377e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_HAL_write_byte 00000020  00003d46  00003d46  00003e1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_HAL_read_byte_ack 00000014  00003fa6  00003fa6  0000407a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_HAL_read_byte_nack 00000014  00003fba  00003fba  0000408e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_HAL_stop 00000010  00004004  00004004  000040d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.copy_buffer 0000002e  00003b64  00003b64  00003c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.uart0_hal_init 0000003c  0000372e  0000372e  00003802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.uart0_hal_send_message 0000003c  0000376a  0000376a  0000383e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.uart0_hal_send_string 0000006e  00002cf0  00002cf0  00002dc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.uart0_hal_message_ready 0000000e  0000406a  0000406a  0000413e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart0_hal_clear_rx_buffer 0000000a  000041a4  000041a4  00004278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart0_hal_read_message_as_str 00000028  00003c1a  00003c1a  00003cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.uart0_hal_send_break 00000046  0000350c  0000350c  000035e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__vector_22 0000004a  000033e6  000033e6  000034ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.__vector_20 00000074  00002b98  00002b98  00002c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .bss.rx_buffer_has_message 00000001  00800695  00800695  000042f4  2**0
                  ALLOC
 60 .bss.rx_buffer_data_len 00000001  00800696  00800696  000042f4  2**0
                  ALLOC
 61 .bss.tx_buffer_cursor 00000001  00800697  00800697  000042f4  2**0
                  ALLOC
 62 .bss.tx_buffer_data_len 00000001  00800698  00800698  000042f4  2**0
                  ALLOC
 63 .text.copy_buffer 0000002e  00003b92  00003b92  00003c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart1_hal_init 0000003c  000037a6  000037a6  0000387a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart1_hal_send_string 0000008a  00002838  00002838  0000290c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart1_hal_message_ready 0000000e  00004078  00004078  0000414c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart1_hal_rx_full 0000000e  00004086  00004086  0000415a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart1_hal_clear_rx_buffer 0000000a  000041ae  000041ae  00004282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart1_hal_read_message_as_str 00000028  00003c42  00003c42  00003d16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_30 0000004a  00003430  00003430  00003504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_28 00000074  00002c0c  00002c0c  00002ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .bss.rx_buffer_has_message 00000001  00800699  00800699  000042f4  2**0
                  ALLOC
 73 .bss.rx_buffer_data_len 00000001  0080069a  0080069a  000042f4  2**0
                  ALLOC
 74 .bss.rx_buffer 00000096  00800580  00800580  000042f4  2**0
                  ALLOC
 75 .bss.tx_buffer_cursor 00000001  0080069b  0080069b  000042f4  2**0
                  ALLOC
 76 .bss.tx_buffer_data_len 00000001  0080069c  0080069c  000042f4  2**0
                  ALLOC
 77 .bss.tx_buffer 000000c8  008004b8  008004b8  000042f4  2**0
                  ALLOC
 78 .text.main    00000018  00003ea6  00003ea6  00003f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.calc_ppm_methane 00000096  0000267a  0000267a  0000274e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.ADC_get_value 00000056  00002f40  00002f40  00003014  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .data.PPM_factor 00000004  00800684  00004214  000042e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 82 .data.RRL     00000004  00800688  00004218  000042ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 83 .data.Vc      00000004  0080068c  0000421c  000042f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 84 .text.EM_has_deveui 00000016  00003ed6  00003ed6  00003faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_has_appeui 00000016  00003eec  00003eec  00003fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_has_appkey 00000016  00003f02  00003f02  00003fd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_set_deveui 0000003a  000037e2  000037e2  000038b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_get_deveui 00000030  00003ad4  00003ad4  00003ba8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_set_appeui 0000003a  0000381c  0000381c  000038f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_get_appeui 00000030  00003b04  00003b04  00003bd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_set_appkey 0000003a  00003856  00003856  0000392a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_get_appkey 00000030  00003b34  00003b34  00003c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_set_ppmfactor 0000000e  00004094  00004094  00004168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_get_ppmfactor 0000001e  00003da6  00003da6  00003e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_RRL 0000000e  000040a2  000040a2  00004176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_RRL 0000001e  00003dc4  00003dc4  00003e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_Vcc 0000000e  000040b0  000040b0  00004184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_Vcc 0000001e  00003de2  00003de2  00003eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_collections 0000000e  000040be  000040be  00004192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_collections 00000010  00004014  00004014  000040e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_heat_up_time 0000000c  0000412e  0000412e  00004202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_heat_up_time 0000000c  0000413a  0000413a  0000420e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_set_air_pump_time 0000000c  00004146  00004146  0000421a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_get_air_pump_time 0000000c  00004152  00004152  00004226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.EM_set_sp_interval 0000000c  0000415e  0000415e  00004232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.EM_get_sp_interval 0000000c  0000416a  0000416a  0000423e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_reset_module 00000006  000041f2  000041f2  000042c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LM_forward_msg 00000006  000041f8  000041f8  000042cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_send_break 00000006  000041fe  000041fe  000042d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .progmemx.data 00000073  00000542  00000542  00000616  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
111 .text.attach_ending 0000001c  00003e3c  00003e3c  00003f10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.util_strbeginswith 0000004a  0000347a  0000347a  0000354e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .progmemx.data 00000007  000005bd  000005bd  00000691  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
114 .text.util_reset_module 00000046  00003552  00003552  00003626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.util_lora_forward_msg 00000038  00003890  00003890  00003964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.util_send_break 00000020  00003d66  00003d66  00003e3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.datetime_to_BCD 00000100  00001c4c  00001c4c  00001d20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.RTC_get_current_time 00000140  00001796  00001796  0000186a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.RTC_set_current_time 00000068  00002dc8  00002dc8  00002e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000005d0  000005d0  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
121 .text.bytes_2_uint 0000001a  00003e72  00003e72  00003f46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.init_measurement 00000038  000038c8  000038c8  0000399c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.validate_data 00000032  00003a40  00003a40  00003b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.read_value 000000a2  000025d8  000025d8  000026ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.SCD30_sensor_on 00000022  00003d02  00003d02  00003dd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.SCD30_get_reading 0000001a  00003e8c  00003e8c  00003f60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .progmemx.data.READ_DATA_CMD 00000002  000005ce  000005ce  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
128 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000005c4  000005c4  00000698  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
129 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000005c9  000005c9  0000069d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
130 .text.parse_cmd 00000028  00003c6a  00003c6a  00003d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.validate_cmd 00000056  00002f96  00002f96  0000306a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .progmemx.data 000000a4  00000427  00000427  000004fb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.CONF_enter 0000012e  000018d6  000018d6  000019aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .progmemx.data 00000077  000004cb  000004cb  0000059f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
135 .text.CON_RN2483_parse 00000052  00003040  00003040  00003114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.CON_RN2483 00000152  00001644  00001644  00001718  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.CONNECT 00000054  00002fec  00002fec  000030c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000188  000001f4  000001f4  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.read_cols 000000bc  000021ac  000021ac  00002280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.read_time 00000092  000027a6  000027a6  0000287a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.write_deveui 00000078  000029b8  000029b8  00002a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.write_appeui 00000078  00002a30  00002a30  00002b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.write_appkey 00000078  00002aa8  00002aa8  00002b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.write_PPM_factor 0000004c  0000326a  0000326a  0000333e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.write_RRL 0000004c  000032b6  000032b6  0000338a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.write_VCC 0000004c  00003302  00003302  000033d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.get_time_par 00000034  000039da  000039da  00003aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.write_cols 0000012e  00001a04  00001a04  00001ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.write_heat_up 0000004c  0000334e  0000334e  00003422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.write_air_pump 00000050  000030e4  000030e4  000031b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.write_sp_interval 0000004c  0000339a  0000339a  0000346e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.write_reset 000000e2  00001e4a  00001e4a  00001f1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.write_time 000000fe  00001d4c  00001d4c  00001e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.handle_read 000002a2  00000ff2  00000ff2  000010c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.handle_write 00000200  00001294  00001294  00001368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .bss.arg      00000050  00800616  00800616  000042f4  2**0
                  ALLOC
157 .progmemx.data 000000ab  0000037c  0000037c  00000450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
158 .text.handle_methane 0000011a  00001b32  00001b32  00001c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.handle_co2 000000a4  00002490  00002490  00002564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.handle_pump 000000a4  00002534  00002534  00002608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.handle_sample 000000b8  00002324  00002324  000023f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.init_methane_SCD30 00000028  00003c92  00003c92  00003d66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.par      00000014  00800666  00800666  000042f4  2**0
                  ALLOC
164 .text.count_parameters 00000052  00003092  00003092  00003166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.par_index 00000070  00002c80  00002c80  00002d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.get_parameter 00000096  00002710  00002710  000027e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.calc_crc8 00000036  00003938  00003938  00003a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.get_decimal 000000b4  000023dc  000023dc  000024b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.str2flaot 0000004e  000031d0  000031d0  000032a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.is_float 00000058  00002ee8  00002ee8  00002fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.avrlibc.fplib 0000000e  000040cc  000040cc  000041a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.avrlibc.fplib 000000ce  000020de  000020de  000021b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.avrlibc.fplib 00000008  000041da  000041da  000042ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.avrlibc.fplib 000000de  00001f2c  00001f2c  00002000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.avrlibc.fplib 0000005e  00002e30  00002e30  00002f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc.fplib 0000007a  0000293e  0000293e  00002a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc.fplib 0000000c  00004176  00004176  0000424a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc.fplib 00000006  00004204  00004204  000042d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc.fplib 0000000e  000040da  000040da  000041ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc.fplib 0000000e  000040e8  000040e8  000041bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc.fplib 00000022  00003d24  00003d24  00003df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.avrlibc.fplib 00000044  000035de  000035de  000036b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.avrlibc.fplib 0000000e  000040f6  000040f6  000041ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.avrlibc.fplib 00000008  000041e2  000041e2  000042b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.avrlibc.fplib 000000d4  0000200a  0000200a  000020de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000008  000005b5  000005b5  00000689  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.avrlibc 00000744  000005d2  000005d2  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.libgcc  0000000c  00004182  00004182  00004256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.libgcc.mul 0000001e  00003e00  00003e00  00003ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.libgcc.prologue 00000038  00003900  00003900  000039d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.libgcc.prologue 00000036  0000396e  0000396e  00003a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc 00000008  000041ea  000041ea  000042be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc 0000000e  00004104  00004104  000041d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc 000002dc  00000d16  00000d16  00000dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc 000001b0  00001494  00001494  00001568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc 00000012  00003fe0  00003fe0  000040b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 00000032  00003a72  00003a72  00003b46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 0000002e  00003bc0  00003bc0  00003c94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc 00000042  000036ec  000036ec  000037c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 0000006a  00002d5e  00002d5e  00002e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 0000002c  00003bee  00003bee  00003cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 0000001e  00003e1e  00003e1e  00003ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 00000036  000039a4  000039a4  00003a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc 00000078  00002b20  00002b20  00002bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc 00000046  00003598  00003598  0000366c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc 000000bc  00002268  00002268  0000233c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc 00000006  0000420a  0000420a  000042de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc 00000024  00003cba  00003cba  00003d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.avrlibc 00000012  00003ff2  00003ff2  000040c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.avrlibc 0000000e  00004112  00004112  000041e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.avrlibc 0000000e  00004120  00004120  000041f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc 00000044  00003622  00003622  000036f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.avrlibc 00000024  00003cde  00003cde  00003db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.avrlibc 00000018  00003ebe  00003ebe  00003f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.avrlibc 0000000c  0000418e  0000418e  00004262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc.mul 00000020  00003d86  00003d86  00003e5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc.div 00000044  00003666  00003666  0000373a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.libgcc.mul 00000016  00003f18  00003f18  00003fec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.libgcc  0000000a  000041b8  000041b8  0000428c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
   8:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
   c:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__vector_3>
  10:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  14:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  18:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  1c:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  20:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  24:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__vector_9>
  28:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  2c:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  30:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  34:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__vector_13>
  38:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  3c:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  40:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__vector_16>
  44:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  48:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  4c:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  50:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__vector_20>
  54:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  58:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__vector_22>
  5c:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  60:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  64:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  68:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  6c:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  70:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__vector_28>
  74:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__bad_interrupt>
  78:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__vector_30>
  7c:	86 0c       	add	r8, r6
  7e:	9b 0c       	add	r9, r11
  80:	f7 0c       	add	r15, r7
  82:	a4 0c       	add	r10, r4
  84:	00 0d       	add	r16, r0
  86:	e9 0c       	add	r14, r9
  88:	f0 0c       	add	r15, r0
  8a:	b4 0c       	add	r11, r4
  8c:	c0 0c       	add	r12, r0
  8e:	cc 0c       	add	r12, r12
  90:	d6 0c       	add	r13, r6
  92:	e2 0c       	add	r14, r2

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	06 84       	ldd	r0, Z+14	; 0x0e
  98:	80 06       	cpc	r8, r16
  9a:	84 06       	cpc	r8, r20
  9c:	90 00       	.word	0x0090	; ????
  9e:	42 14       	cp	r4, r2
  a0:	06 90       	elpm	r0, Z
  a2:	06 9d       	mul	r16, r6
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x11a>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

00004210 <__bad_interrupt>:
    4210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00004024 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    4024:	81 b1       	in	r24, 0x01	; 1
    4026:	88 60       	ori	r24, 0x08	; 8
    4028:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    402a:	82 b1       	in	r24, 0x02	; 2
    402c:	87 7f       	andi	r24, 0xF7	; 247
    402e:	82 b9       	out	0x02, r24	; 2
    4030:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003f2e <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3f2e:	88 23       	and	r24, r24
    3f30:	21 f0       	breq	.+8      	; 0x3f3a <PM_HAL_adc_power+0xc>
    3f32:	82 b1       	in	r24, 0x02	; 2
    3f34:	88 60       	ori	r24, 0x08	; 8
    3f36:	82 b9       	out	0x02, r24	; 2
    3f38:	08 95       	ret
    3f3a:	82 b1       	in	r24, 0x02	; 2
    3f3c:	87 7f       	andi	r24, 0xF7	; 247
    3f3e:	82 b9       	out	0x02, r24	; 2
    3f40:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00004032 <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    4032:	81 b1       	in	r24, 0x01	; 1
    4034:	80 62       	ori	r24, 0x20	; 32
    4036:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    4038:	82 b1       	in	r24, 0x02	; 2
    403a:	8f 7d       	andi	r24, 0xDF	; 223
    403c:	82 b9       	out	0x02, r24	; 2
    403e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003f42 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3f42:	88 23       	and	r24, r24
    3f44:	21 f0       	breq	.+8      	; 0x3f4e <PM_HAL_meth_power+0xc>
    3f46:	82 b1       	in	r24, 0x02	; 2
    3f48:	80 62       	ori	r24, 0x20	; 32
    3f4a:	82 b9       	out	0x02, r24	; 2
    3f4c:	08 95       	ret
    3f4e:	82 b1       	in	r24, 0x02	; 2
    3f50:	8f 7d       	andi	r24, 0xDF	; 223
    3f52:	82 b9       	out	0x02, r24	; 2
    3f54:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00004040 <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    4040:	81 b1       	in	r24, 0x01	; 1
    4042:	80 61       	ori	r24, 0x10	; 16
    4044:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    4046:	82 b1       	in	r24, 0x02	; 2
    4048:	8f 7e       	andi	r24, 0xEF	; 239
    404a:	82 b9       	out	0x02, r24	; 2
    404c:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003f56 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3f56:	88 23       	and	r24, r24
    3f58:	21 f0       	breq	.+8      	; 0x3f62 <PM_HAL_SCD30_power+0xc>
    3f5a:	82 b1       	in	r24, 0x02	; 2
    3f5c:	80 61       	ori	r24, 0x10	; 16
    3f5e:	82 b9       	out	0x02, r24	; 2
    3f60:	08 95       	ret
    3f62:	82 b1       	in	r24, 0x02	; 2
    3f64:	8f 7e       	andi	r24, 0xEF	; 239
    3f66:	82 b9       	out	0x02, r24	; 2
    3f68:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

0000404e <PM_HAL_BC_power_init>:
		clear_bit(PORTA, 4);
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    404e:	8a b1       	in	r24, 0x0a	; 10
    4050:	80 61       	ori	r24, 0x10	; 16
    4052:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    4054:	8b b1       	in	r24, 0x0b	; 11
    4056:	8f 7e       	andi	r24, 0xEF	; 239
    4058:	8b b9       	out	0x0b, r24	; 11
    405a:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00003f6a <PM_HAL_BC_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3f6a:	88 23       	and	r24, r24
    3f6c:	21 f0       	breq	.+8      	; 0x3f76 <PM_HAL_BC_power+0xc>
    3f6e:	8b b1       	in	r24, 0x0b	; 11
    3f70:	80 61       	ori	r24, 0x10	; 16
    3f72:	8b b9       	out	0x0b, r24	; 11
    3f74:	08 95       	ret
    3f76:	8b b1       	in	r24, 0x0b	; 11
    3f78:	8f 7e       	andi	r24, 0xEF	; 239
    3f7a:	8b b9       	out	0x0b, r24	; 11
    3f7c:	08 95       	ret

Disassembly of section .text.__vector_3:

00003f7e <__vector_3>:
}

ISR(INT2_vect){
    3f7e:	1f 92       	push	r1
    3f80:	0f 92       	push	r0
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	0f 92       	push	r0
    3f86:	11 24       	eor	r1, r1
	
}
    3f88:	0f 90       	pop	r0
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	0f 90       	pop	r0
    3f8e:	1f 90       	pop	r1
    3f90:	18 95       	reti

Disassembly of section .text.rn2483_init:

000041c2 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    41c2:	84 b1       	in	r24, 0x04	; 4
    41c4:	80 61       	ori	r24, 0x10	; 16
    41c6:	84 b9       	out	0x04, r24	; 4
    41c8:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

000041ca <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    41ca:	85 b1       	in	r24, 0x05	; 5
    41cc:	8f 7e       	andi	r24, 0xEF	; 239
    41ce:	85 b9       	out	0x05, r24	; 5
    41d0:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000041d2 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    41d2:	85 b1       	in	r24, 0x05	; 5
    41d4:	80 61       	ori	r24, 0x10	; 16
    41d6:	85 b9       	out	0x05, r24	; 5
    41d8:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

0000405c <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    405c:	87 b1       	in	r24, 0x07	; 7
    405e:	8f 7b       	andi	r24, 0xBF	; 191
    4060:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    4062:	88 b1       	in	r24, 0x08	; 8
    4064:	8f 7b       	andi	r24, 0xBF	; 191
    4066:	88 b9       	out	0x08, r24	; 8
    4068:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000419a <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    419a:	86 b1       	in	r24, 0x06	; 6
    419c:	86 fb       	bst	r24, 6
    419e:	88 27       	eor	r24, r24
    41a0:	80 f9       	bld	r24, 0
    41a2:	08 95       	ret

Disassembly of section .text.__vector_16:

00003134 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    3134:	1f 92       	push	r1
    3136:	0f 92       	push	r0
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	0f 92       	push	r0
    313c:	11 24       	eor	r1, r1
    313e:	2f 93       	push	r18
    3140:	3f 93       	push	r19
    3142:	4f 93       	push	r20
    3144:	5f 93       	push	r21
    3146:	6f 93       	push	r22
    3148:	7f 93       	push	r23
    314a:	8f 93       	push	r24
    314c:	9f 93       	push	r25
    314e:	af 93       	push	r26
    3150:	bf 93       	push	r27
    3152:	ef 93       	push	r30
    3154:	ff 93       	push	r31
	_cb();
    3156:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <_cb>
    315a:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <_cb+0x1>
    315e:	09 95       	icall
}
    3160:	ff 91       	pop	r31
    3162:	ef 91       	pop	r30
    3164:	bf 91       	pop	r27
    3166:	af 91       	pop	r26
    3168:	9f 91       	pop	r25
    316a:	8f 91       	pop	r24
    316c:	7f 91       	pop	r23
    316e:	6f 91       	pop	r22
    3170:	5f 91       	pop	r21
    3172:	4f 91       	pop	r20
    3174:	3f 91       	pop	r19
    3176:	2f 91       	pop	r18
    3178:	0f 90       	pop	r0
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	0f 90       	pop	r0
    317e:	1f 90       	pop	r1
    3180:	18 95       	reti

Disassembly of section .text.__vector_13:

00003182 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    3182:	1f 92       	push	r1
    3184:	0f 92       	push	r0
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	0f 92       	push	r0
    318a:	11 24       	eor	r1, r1
    318c:	2f 93       	push	r18
    318e:	3f 93       	push	r19
    3190:	4f 93       	push	r20
    3192:	5f 93       	push	r21
    3194:	6f 93       	push	r22
    3196:	7f 93       	push	r23
    3198:	8f 93       	push	r24
    319a:	9f 93       	push	r25
    319c:	af 93       	push	r26
    319e:	bf 93       	push	r27
    31a0:	ef 93       	push	r30
    31a2:	ff 93       	push	r31
	_cb();
    31a4:	e0 91 92 06 	lds	r30, 0x0692	; 0x800692 <_cb>
    31a8:	f0 91 93 06 	lds	r31, 0x0693	; 0x800693 <_cb+0x1>
    31ac:	09 95       	icall
    31ae:	ff 91       	pop	r31
    31b0:	ef 91       	pop	r30
    31b2:	bf 91       	pop	r27
    31b4:	af 91       	pop	r26
    31b6:	9f 91       	pop	r25
    31b8:	8f 91       	pop	r24
    31ba:	7f 91       	pop	r23
    31bc:	6f 91       	pop	r22
    31be:	5f 91       	pop	r21
    31c0:	4f 91       	pop	r20
    31c2:	3f 91       	pop	r19
    31c4:	2f 91       	pop	r18
    31c6:	0f 90       	pop	r0
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	0f 90       	pop	r0
    31cc:	1f 90       	pop	r1
    31ce:	18 95       	reti

Disassembly of section .text.__vector_9:

000028c2 <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    28c2:	1f 92       	push	r1
    28c4:	0f 92       	push	r0
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	0f 92       	push	r0
    28ca:	11 24       	eor	r1, r1
    28cc:	2f 93       	push	r18
    28ce:	3f 93       	push	r19
    28d0:	4f 93       	push	r20
    28d2:	5f 93       	push	r21
    28d4:	6f 93       	push	r22
    28d6:	7f 93       	push	r23
    28d8:	8f 93       	push	r24
    28da:	9f 93       	push	r25
    28dc:	af 93       	push	r26
    28de:	bf 93       	push	r27
    28e0:	cf 93       	push	r28
    28e2:	ef 93       	push	r30
    28e4:	ff 93       	push	r31
	cnt++;
    28e6:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <cnt>
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    28f0:	80 32       	cpi	r24, 0x20	; 32
    28f2:	99 f4       	brne	.+38     	; 0x291a <__vector_9+0x58>
		cnt=0;
    28f4:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    28f8:	c0 e0       	ldi	r28, 0x00	; 0
    28fa:	0d c0       	rjmp	.+26     	; 0x2916 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    28fc:	ec 2f       	mov	r30, r28
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	e6 58       	subi	r30, 0x86	; 134
    2906:	f9 4f       	sbci	r31, 0xF9	; 249
    2908:	01 90       	ld	r0, Z+
    290a:	f0 81       	ld	r31, Z
    290c:	e0 2d       	mov	r30, r0
    290e:	30 97       	sbiw	r30, 0x00	; 0
    2910:	09 f0       	breq	.+2      	; 0x2914 <__vector_9+0x52>
				callbacks[i]();
    2912:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    2914:	cf 5f       	subi	r28, 0xFF	; 255
    2916:	c5 30       	cpi	r28, 0x05	; 5
    2918:	88 f3       	brcs	.-30     	; 0x28fc <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    291a:	ff 91       	pop	r31
    291c:	ef 91       	pop	r30
    291e:	cf 91       	pop	r28
    2920:	bf 91       	pop	r27
    2922:	af 91       	pop	r26
    2924:	9f 91       	pop	r25
    2926:	8f 91       	pop	r24
    2928:	7f 91       	pop	r23
    292a:	6f 91       	pop	r22
    292c:	5f 91       	pop	r21
    292e:	4f 91       	pop	r20
    2930:	3f 91       	pop	r19
    2932:	2f 91       	pop	r18
    2934:	0f 90       	pop	r0
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	0f 90       	pop	r0
    293a:	1f 90       	pop	r1
    293c:	18 95       	reti

Disassembly of section .text.start_and_write_data:

0000321e <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    321e:	cf 92       	push	r12
    3220:	df 92       	push	r13
    3222:	ef 92       	push	r14
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	6a 01       	movw	r12, r20
    322a:	e6 2e       	mov	r14, r22
    322c:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3234:	81 11       	cpse	r24, r1
    3236:	13 c0       	rjmp	.+38     	; 0x325e <start_and_write_data+0x40>
    3238:	c0 e0       	ldi	r28, 0x00	; 0
    323a:	0e c0       	rjmp	.+28     	; 0x3258 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    323c:	ae 2d       	mov	r26, r14
    323e:	c6 01       	movw	r24, r12
    3240:	8c 0f       	add	r24, r28
    3242:	91 1d       	adc	r25, r1
    3244:	a1 1d       	adc	r26, r1
    3246:	fc 01       	movw	r30, r24
    3248:	84 91       	lpm	r24, Z
    324a:	a7 fd       	sbrc	r26, 7
    324c:	80 81       	ld	r24, Z
    324e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    3252:	81 11       	cpse	r24, r1
    3254:	04 c0       	rjmp	.+8      	; 0x325e <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    3256:	cf 5f       	subi	r28, 0xFF	; 255
    3258:	cd 17       	cp	r28, r29
    325a:	80 f3       	brcs	.-32     	; 0x323c <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    325c:	80 e0       	ldi	r24, 0x00	; 0
}
    325e:	df 91       	pop	r29
    3260:	cf 91       	pop	r28
    3262:	ef 90       	pop	r14
    3264:	df 90       	pop	r13
    3266:	cf 90       	pop	r12
    3268:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002e8e <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	8c 01       	movw	r16, r24
    2e9c:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2e9e:	c0 e0       	ldi	r28, 0x00	; 0
    2ea0:	08 c0       	rjmp	.+16     	; 0x2eb2 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2ea2:	78 01       	movw	r14, r16
    2ea4:	ec 0e       	add	r14, r28
    2ea6:	f1 1c       	adc	r15, r1
    2ea8:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <TWI_HAL_read_byte_ack>
    2eac:	f7 01       	movw	r30, r14
    2eae:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2eb0:	cf 5f       	subi	r28, 0xFF	; 255
    2eb2:	2c 2f       	mov	r18, r28
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	8d 2f       	mov	r24, r29
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	28 17       	cp	r18, r24
    2ebe:	39 07       	cpc	r19, r25
    2ec0:	84 f3       	brlt	.-32     	; 0x2ea2 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2ec2:	8d 2f       	mov	r24, r29
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	e8 01       	movw	r28, r16
    2eca:	c8 0f       	add	r28, r24
    2ecc:	d9 1f       	adc	r29, r25
    2ece:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <TWI_HAL_read_byte_nack>
    2ed2:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2ed4:	0e 94 02 20 	call	0x4004	; 0x4004 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003f92 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3f92:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3f94:	0e 94 0f 19 	call	0x321e	; 0x321e <start_and_write_data>
    3f98:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3f9a:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    3f9c:	0e 94 02 20 	call	0x4004	; 0x4004 <TWI_HAL_stop>
	}
	return status;
}
    3fa0:	8c 2f       	mov	r24, r28
    3fa2:	cf 91       	pop	r28
    3fa4:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003e58 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3e58:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3e5a:	0e 94 0f 19 	call	0x321e	; 0x321e <start_and_write_data>
    3e5e:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    3e60:	0e 94 02 20 	call	0x4004	; 0x4004 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    3e64:	c1 11       	cpse	r28, r1
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	01 c0       	rjmp	.+2      	; 0x3e6e <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    3e6c:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    3e6e:	cf 91       	pop	r28
    3e70:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003a0e <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	8b 01       	movw	r16, r22
    3a18:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <TWI_HAL_start>
    3a20:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3a22:	88 23       	and	r24, r24
    3a24:	21 f0       	breq	.+8      	; 0x3a2e <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    3a26:	0e 94 02 20 	call	0x4004	; 0x4004 <TWI_HAL_stop>
		return status;	
    3a2a:	8c 2f       	mov	r24, r28
    3a2c:	04 c0       	rjmp	.+8      	; 0x3a36 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    3a2e:	6d 2f       	mov	r22, r29
    3a30:	c8 01       	movw	r24, r16
    3a32:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <read_and_stop>
	
}
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003aa4 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	8b 01       	movw	r16, r22
    3aae:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3ab0:	0e 94 55 1b 	call	0x36aa	; 0x36aa <TWI_HAL_repeated_start>
    3ab4:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3ab6:	88 23       	and	r24, r24
    3ab8:	21 f0       	breq	.+8      	; 0x3ac2 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    3aba:	0e 94 02 20 	call	0x4004	; 0x4004 <TWI_HAL_stop>
		return status;
    3abe:	8c 2f       	mov	r24, r28
    3ac0:	04 c0       	rjmp	.+8      	; 0x3aca <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    3ac2:	6d 2f       	mov	r22, r29
    3ac4:	c8 01       	movw	r24, r16
    3ac6:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <read_and_stop>
	
}
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	1f 91       	pop	r17
    3ad0:	0f 91       	pop	r16
    3ad2:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003fce <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3fce:	80 e2       	ldi	r24, 0x20	; 32
    3fd0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    3fd4:	e9 eb       	ldi	r30, 0xB9	; 185
    3fd6:	f0 e0       	ldi	r31, 0x00	; 0
    3fd8:	80 81       	ld	r24, Z
    3fda:	8c 7f       	andi	r24, 0xFC	; 252
    3fdc:	80 83       	st	Z, r24
    3fde:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000034c4 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    34cc:	84 ea       	ldi	r24, 0xA4	; 164
    34ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    34d2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    34d6:	99 23       	and	r25, r25
    34d8:	e4 f7       	brge	.-8      	; 0x34d2 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    34da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    34de:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    34e0:	88 30       	cpi	r24, 0x08	; 8
    34e2:	99 f4       	brne	.+38     	; 0x350a <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    34e4:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    34e8:	84 e8       	ldi	r24, 0x84	; 132
    34ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    34ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    34f2:	88 23       	and	r24, r24
    34f4:	e4 f7       	brge	.-8      	; 0x34ee <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    34f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    34fa:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    34fc:	88 31       	cpi	r24, 0x18	; 24
    34fe:	21 f0       	breq	.+8      	; 0x3508 <TWI_HAL_start+0x44>
    3500:	80 34       	cpi	r24, 0x40	; 64
    3502:	19 f4       	brne	.+6      	; 0x350a <TWI_HAL_start+0x46>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	08 95       	ret
    3508:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    350a:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

000036aa <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	28 2f       	mov	r18, r24
    36b2:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    36b4:	84 ea       	ldi	r24, 0xA4	; 164
    36b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    36ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    36be:	99 23       	and	r25, r25
    36c0:	e4 f7       	brge	.-8      	; 0x36ba <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    36c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    36c6:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    36c8:	80 31       	cpi	r24, 0x10	; 16
    36ca:	79 f4       	brne	.+30     	; 0x36ea <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    36cc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    36d0:	84 e8       	ldi	r24, 0x84	; 132
    36d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    36d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    36da:	88 23       	and	r24, r24
    36dc:	e4 f7       	brge	.-8      	; 0x36d6 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    36de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    36e2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    36e4:	80 34       	cpi	r24, 0x40	; 64
    36e6:	09 f4       	brne	.+2      	; 0x36ea <TWI_HAL_repeated_start+0x40>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    36ea:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003d46 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3d46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3d4a:	84 e8       	ldi	r24, 0x84	; 132
    3d4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3d50:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3d54:	88 23       	and	r24, r24
    3d56:	e4 f7       	brge	.-8      	; 0x3d50 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3d58:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3d5c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3d5e:	88 32       	cpi	r24, 0x28	; 40
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <TWI_HAL_write_byte+0x1e>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3d64:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003fa6 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3fa6:	84 ec       	ldi	r24, 0xC4	; 196
    3fa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3fac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3fb0:	88 23       	and	r24, r24
    3fb2:	e4 f7       	brge	.-8      	; 0x3fac <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3fb4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3fb8:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003fba <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3fba:	84 e8       	ldi	r24, 0x84	; 132
    3fbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3fc0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3fc4:	88 23       	and	r24, r24
    3fc6:	e4 f7       	brge	.-8      	; 0x3fc0 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3fc8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3fcc:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00004004 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    4004:	84 e9       	ldi	r24, 0x94	; 148
    4006:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    400a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    400e:	84 fd       	sbrc	r24, 4
    4010:	fc cf       	rjmp	.-8      	; 0x400a <TWI_HAL_stop+0x6>
}
    4012:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003b64 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3b64:	bc 01       	movw	r22, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	09 c0       	rjmp	.+18     	; 0x3b7c <copy_buffer+0x18>
    3b6a:	fb 01       	movw	r30, r22
    3b6c:	e9 0f       	add	r30, r25
    3b6e:	f1 1d       	adc	r31, r1
    3b70:	da 01       	movw	r26, r20
    3b72:	a0 50       	subi	r26, 0x00	; 0
    3b74:	bf 4f       	sbci	r27, 0xFF	; 255
    3b76:	2c 91       	ld	r18, X
    3b78:	20 83       	st	Z, r18
    3b7a:	9f 5f       	subi	r25, 0xFF	; 255
    3b7c:	49 2f       	mov	r20, r25
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <rx_buffer_data_len>
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	22 50       	subi	r18, 0x02	; 2
    3b88:	31 09       	sbc	r19, r1
    3b8a:	42 17       	cp	r20, r18
    3b8c:	53 07       	cpc	r21, r19
    3b8e:	6c f3       	brlt	.-38     	; 0x3b6a <copy_buffer+0x6>
    3b90:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000372e <uart0_hal_init>:
    372e:	e1 ec       	ldi	r30, 0xC1	; 193
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	80 61       	ori	r24, 0x10	; 16
    3736:	80 83       	st	Z, r24
    3738:	80 81       	ld	r24, Z
    373a:	88 60       	ori	r24, 0x08	; 8
    373c:	80 83       	st	Z, r24
    373e:	80 81       	ld	r24, Z
    3740:	80 68       	ori	r24, 0x80	; 128
    3742:	80 83       	st	Z, r24
    3744:	80 81       	ld	r24, Z
    3746:	80 64       	ori	r24, 0x40	; 64
    3748:	80 83       	st	Z, r24
    374a:	e0 ec       	ldi	r30, 0xC0	; 192
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	82 60       	ori	r24, 0x02	; 2
    3752:	80 83       	st	Z, r24
    3754:	86 e0       	ldi	r24, 0x06	; 6
    3756:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    375a:	80 e1       	ldi	r24, 0x10	; 16
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    3762:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3766:	78 94       	sei
    3768:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000376a <uart0_hal_send_message>:
    376a:	dc 01       	movw	r26, r24
    376c:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    3770:	81 11       	cpse	r24, r1
    3772:	fc cf       	rjmp	.-8      	; 0x376c <uart0_hal_send_message+0x2>
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	0b c0       	rjmp	.+22     	; 0x378e <uart0_hal_send_message+0x24>
    3778:	29 2f       	mov	r18, r25
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	fd 01       	movw	r30, r26
    377e:	e2 0f       	add	r30, r18
    3780:	f3 1f       	adc	r31, r19
    3782:	40 81       	ld	r20, Z
    3784:	f9 01       	movw	r30, r18
    3786:	ea 56       	subi	r30, 0x6A	; 106
    3788:	fe 4f       	sbci	r31, 0xFE	; 254
    378a:	40 83       	st	Z, r20
    378c:	9f 5f       	subi	r25, 0xFF	; 255
    378e:	96 17       	cp	r25, r22
    3790:	98 f3       	brcs	.-26     	; 0x3778 <uart0_hal_send_message+0xe>
    3792:	60 93 98 06 	sts	0x0698, r22	; 0x800698 <tx_buffer_data_len>
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    379c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    37a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    37a4:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002cf0 <uart0_hal_send_string>:
    2cf0:	6f 92       	push	r6
    2cf2:	7f 92       	push	r7
    2cf4:	8f 92       	push	r8
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ef 92       	push	r14
    2cfc:	3b 01       	movw	r6, r22
    2cfe:	88 2e       	mov	r8, r24
    2d00:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    2d04:	81 11       	cpse	r24, r1
    2d06:	fc cf       	rjmp	.-8      	; 0x2d00 <uart0_hal_send_string+0x10>
    2d08:	88 2d       	mov	r24, r8
    2d0a:	b3 01       	movw	r22, r6
    2d0c:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2d10:	68 2f       	mov	r22, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	12 c0       	rjmp	.+36     	; 0x2d3a <uart0_hal_send_string+0x4a>
    2d16:	29 2f       	mov	r18, r25
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	e8 2c       	mov	r14, r8
    2d1c:	63 01       	movw	r12, r6
    2d1e:	c2 0e       	add	r12, r18
    2d20:	d3 1e       	adc	r13, r19
    2d22:	e1 1c       	adc	r14, r1
    2d24:	37 fd       	sbrc	r19, 7
    2d26:	ea 94       	dec	r14
    2d28:	f6 01       	movw	r30, r12
    2d2a:	44 91       	lpm	r20, Z
    2d2c:	e7 fc       	sbrc	r14, 7
    2d2e:	40 81       	ld	r20, Z
    2d30:	f9 01       	movw	r30, r18
    2d32:	ea 56       	subi	r30, 0x6A	; 106
    2d34:	fe 4f       	sbci	r31, 0xFE	; 254
    2d36:	40 83       	st	Z, r20
    2d38:	9f 5f       	subi	r25, 0xFF	; 255
    2d3a:	96 17       	cp	r25, r22
    2d3c:	60 f3       	brcs	.-40     	; 0x2d16 <uart0_hal_send_string+0x26>
    2d3e:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tx_buffer_data_len>
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    2d48:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    2d4c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2d50:	ef 90       	pop	r14
    2d52:	df 90       	pop	r13
    2d54:	cf 90       	pop	r12
    2d56:	8f 90       	pop	r8
    2d58:	7f 90       	pop	r7
    2d5a:	6f 90       	pop	r6
    2d5c:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000406a <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    406a:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <rx_buffer_has_message>
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	91 11       	cpse	r25, r1
    4072:	01 c0       	rjmp	.+2      	; 0x4076 <uart0_hal_message_ready+0xc>
    4074:	80 e0       	ldi	r24, 0x00	; 0
}
    4076:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000041a4 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    41a4:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    41a8:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <rx_buffer_data_len>
    41ac:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003c1a <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
    3c1e:	cf 93       	push	r28
    3c20:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3c22:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3c26:	c0 91 96 06 	lds	r28, 0x0696	; 0x800696 <rx_buffer_data_len>
    3c2a:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	ec 0f       	add	r30, r28
    3c30:	f1 1d       	adc	r31, r1
    3c32:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3c34:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <uart0_hal_clear_rx_buffer>
	return len;
}
    3c38:	8c 2f       	mov	r24, r28
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

0000350c <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	1f 92       	push	r1
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	9a b1       	in	r25, 0x0a	; 10
    3518:	92 60       	ori	r25, 0x02	; 2
    351a:	9a b9       	out	0x0a, r25	; 10
    351c:	e1 ec       	ldi	r30, 0xC1	; 193
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	90 81       	ld	r25, Z
    3522:	97 7f       	andi	r25, 0xF7	; 247
    3524:	90 83       	st	Z, r25
    3526:	9b b1       	in	r25, 0x0b	; 11
    3528:	9d 7f       	andi	r25, 0xFD	; 253
    352a:	9b b9       	out	0x0b, r25	; 11
    352c:	af e9       	ldi	r26, 0x9F	; 159
    352e:	bf e0       	ldi	r27, 0x0F	; 15
    3530:	11 97       	sbiw	r26, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <uart0_hal_send_break+0x24>
    3534:	00 c0       	rjmp	.+0      	; 0x3536 <uart0_hal_send_break+0x2a>
    3536:	00 00       	nop
    3538:	90 81       	ld	r25, Z
    353a:	98 60       	ori	r25, 0x08	; 8
    353c:	90 83       	st	Z, r25
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	ce 01       	movw	r24, r28
    3544:	01 96       	adiw	r24, 0x01	; 1
    3546:	0e 94 b5 1b 	call	0x376a	; 0x376a <uart0_hal_send_message>
    354a:	0f 90       	pop	r0
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	08 95       	ret

Disassembly of section .text.__vector_22:

000033e6 <__vector_22>:
    33e6:	1f 92       	push	r1
    33e8:	0f 92       	push	r0
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	0f 92       	push	r0
    33ee:	11 24       	eor	r1, r1
    33f0:	8f 93       	push	r24
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
    33f6:	e0 91 97 06 	lds	r30, 0x0697	; 0x800697 <tx_buffer_cursor>
    33fa:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    33fe:	e8 17       	cp	r30, r24
    3400:	58 f4       	brcc	.+22     	; 0x3418 <__vector_22+0x32>
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	8e 0f       	add	r24, r30
    3406:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	ea 56       	subi	r30, 0x6A	; 106
    340e:	fe 4f       	sbci	r31, 0xFE	; 254
    3410:	80 81       	ld	r24, Z
    3412:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3416:	04 c0       	rjmp	.+8      	; 0x3420 <__vector_22+0x3a>
    3418:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <tx_buffer_cursor>
    341c:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <tx_buffer_data_len>
    3420:	ff 91       	pop	r31
    3422:	ef 91       	pop	r30
    3424:	8f 91       	pop	r24
    3426:	0f 90       	pop	r0
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	0f 90       	pop	r0
    342c:	1f 90       	pop	r1
    342e:	18 95       	reti

Disassembly of section .text.__vector_20:

00002b98 <__vector_20>:
    2b98:	1f 92       	push	r1
    2b9a:	0f 92       	push	r0
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	0f 92       	push	r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	2f 93       	push	r18
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	ef 93       	push	r30
    2baa:	ff 93       	push	r31
    2bac:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <rx_buffer_has_message>
    2bb0:	81 11       	cpse	r24, r1
    2bb2:	0e c0       	rjmp	.+28     	; 0x2bd0 <__vector_20+0x38>
    2bb4:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <rx_buffer_data_len>
    2bb8:	e6 39       	cpi	r30, 0x96	; 150
    2bba:	50 f4       	brcc	.+20     	; 0x2bd0 <__vector_20+0x38>
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	8e 0f       	add	r24, r30
    2bc0:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <rx_buffer_data_len>
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2bca:	e0 50       	subi	r30, 0x00	; 0
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 83       	st	Z, r24
    2bd0:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <rx_buffer_data_len>
    2bd4:	83 30       	cpi	r24, 0x03	; 3
    2bd6:	80 f0       	brcs	.+32     	; 0x2bf8 <__vector_20+0x60>
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e1 50       	subi	r30, 0x01	; 1
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	20 81       	ld	r18, Z
    2be2:	2a 30       	cpi	r18, 0x0A	; 10
    2be4:	49 f4       	brne	.+18     	; 0x2bf8 <__vector_20+0x60>
    2be6:	fc 01       	movw	r30, r24
    2be8:	e2 50       	subi	r30, 0x02	; 2
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	8d 30       	cpi	r24, 0x0D	; 13
    2bf0:	19 f4       	brne	.+6      	; 0x2bf8 <__vector_20+0x60>
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <rx_buffer_has_message>
    2bf8:	ff 91       	pop	r31
    2bfa:	ef 91       	pop	r30
    2bfc:	9f 91       	pop	r25
    2bfe:	8f 91       	pop	r24
    2c00:	2f 91       	pop	r18
    2c02:	0f 90       	pop	r0
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	0f 90       	pop	r0
    2c08:	1f 90       	pop	r1
    2c0a:	18 95       	reti

Disassembly of section .text.copy_buffer:

00003b92 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3b92:	bc 01       	movw	r22, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	09 c0       	rjmp	.+18     	; 0x3baa <copy_buffer+0x18>
    3b98:	fb 01       	movw	r30, r22
    3b9a:	e9 0f       	add	r30, r25
    3b9c:	f1 1d       	adc	r31, r1
    3b9e:	da 01       	movw	r26, r20
    3ba0:	a0 58       	subi	r26, 0x80	; 128
    3ba2:	ba 4f       	sbci	r27, 0xFA	; 250
    3ba4:	2c 91       	ld	r18, X
    3ba6:	20 83       	st	Z, r18
    3ba8:	9f 5f       	subi	r25, 0xFF	; 255
    3baa:	49 2f       	mov	r20, r25
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <rx_buffer_data_len>
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	22 50       	subi	r18, 0x02	; 2
    3bb6:	31 09       	sbc	r19, r1
    3bb8:	42 17       	cp	r20, r18
    3bba:	53 07       	cpc	r21, r19
    3bbc:	6c f3       	brlt	.-38     	; 0x3b98 <copy_buffer+0x6>
    3bbe:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000037a6 <uart1_hal_init>:
    37a6:	e9 ec       	ldi	r30, 0xC9	; 201
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	80 61       	ori	r24, 0x10	; 16
    37ae:	80 83       	st	Z, r24
    37b0:	80 81       	ld	r24, Z
    37b2:	88 60       	ori	r24, 0x08	; 8
    37b4:	80 83       	st	Z, r24
    37b6:	80 81       	ld	r24, Z
    37b8:	80 68       	ori	r24, 0x80	; 128
    37ba:	80 83       	st	Z, r24
    37bc:	80 81       	ld	r24, Z
    37be:	80 64       	ori	r24, 0x40	; 64
    37c0:	80 83       	st	Z, r24
    37c2:	e8 ec       	ldi	r30, 0xC8	; 200
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	82 60       	ori	r24, 0x02	; 2
    37ca:	80 83       	st	Z, r24
    37cc:	86 e0       	ldi	r24, 0x06	; 6
    37ce:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    37d2:	80 e1       	ldi	r24, 0x10	; 16
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    37da:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    37de:	78 94       	sei
    37e0:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002838 <uart1_hal_send_string>:
    2838:	6f 92       	push	r6
    283a:	7f 92       	push	r7
    283c:	8f 92       	push	r8
    283e:	cf 92       	push	r12
    2840:	df 92       	push	r13
    2842:	ef 92       	push	r14
    2844:	3b 01       	movw	r6, r22
    2846:	88 2e       	mov	r8, r24
    2848:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tx_buffer_data_len>
    284c:	81 11       	cpse	r24, r1
    284e:	fc cf       	rjmp	.-8      	; 0x2848 <uart1_hal_send_string+0x10>
    2850:	88 2d       	mov	r24, r8
    2852:	b3 01       	movw	r22, r6
    2854:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2858:	bc 01       	movw	r22, r24
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	12 c0       	rjmp	.+36     	; 0x2882 <uart1_hal_send_string+0x4a>
    285e:	29 2f       	mov	r18, r25
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	e8 2c       	mov	r14, r8
    2864:	63 01       	movw	r12, r6
    2866:	c4 0e       	add	r12, r20
    2868:	d5 1e       	adc	r13, r21
    286a:	e1 1c       	adc	r14, r1
    286c:	57 fd       	sbrc	r21, 7
    286e:	ea 94       	dec	r14
    2870:	f6 01       	movw	r30, r12
    2872:	44 91       	lpm	r20, Z
    2874:	e7 fc       	sbrc	r14, 7
    2876:	40 81       	ld	r20, Z
    2878:	f9 01       	movw	r30, r18
    287a:	e8 54       	subi	r30, 0x48	; 72
    287c:	fb 4f       	sbci	r31, 0xFB	; 251
    287e:	40 83       	st	Z, r20
    2880:	9f 5f       	subi	r25, 0xFF	; 255
    2882:	49 2f       	mov	r20, r25
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	46 17       	cp	r20, r22
    2888:	57 07       	cpc	r21, r23
    288a:	48 f3       	brcs	.-46     	; 0x285e <uart1_hal_send_string+0x26>
    288c:	fb 01       	movw	r30, r22
    288e:	e8 54       	subi	r30, 0x48	; 72
    2890:	fb 4f       	sbci	r31, 0xFB	; 251
    2892:	8d e0       	ldi	r24, 0x0D	; 13
    2894:	80 83       	st	Z, r24
    2896:	fb 01       	movw	r30, r22
    2898:	e7 54       	subi	r30, 0x47	; 71
    289a:	fb 4f       	sbci	r31, 0xFB	; 251
    289c:	8a e0       	ldi	r24, 0x0A	; 10
    289e:	80 83       	st	Z, r24
    28a0:	6e 5f       	subi	r22, 0xFE	; 254
    28a2:	60 93 9c 06 	sts	0x069C, r22	; 0x80069c <tx_buffer_data_len>
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <tx_buffer_cursor>
    28ac:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_end>
    28b0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    28b4:	ef 90       	pop	r14
    28b6:	df 90       	pop	r13
    28b8:	cf 90       	pop	r12
    28ba:	8f 90       	pop	r8
    28bc:	7f 90       	pop	r7
    28be:	6f 90       	pop	r6
    28c0:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00004078 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    4078:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <rx_buffer_has_message>
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	91 11       	cpse	r25, r1
    4080:	01 c0       	rjmp	.+2      	; 0x4084 <uart1_hal_message_ready+0xc>
    4082:	80 e0       	ldi	r24, 0x00	; 0
}
    4084:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00004086 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    4086:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <rx_buffer_data_len>
    408a:	81 e0       	ldi	r24, 0x01	; 1
    408c:	95 39       	cpi	r25, 0x95	; 149
    408e:	08 f4       	brcc	.+2      	; 0x4092 <uart1_hal_rx_full+0xc>
    4090:	80 e0       	ldi	r24, 0x00	; 0
}
    4092:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

000041ae <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    41ae:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    41b2:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <rx_buffer_data_len>
    41b6:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00003c42 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	8c 01       	movw	r16, r24
    3c4a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <copy_buffer>
    3c4e:	c0 91 9a 06 	lds	r28, 0x069A	; 0x80069a <rx_buffer_data_len>
    3c52:	c2 50       	subi	r28, 0x02	; 2
    3c54:	f8 01       	movw	r30, r16
    3c56:	ec 0f       	add	r30, r28
    3c58:	f1 1d       	adc	r31, r1
    3c5a:	10 82       	st	Z, r1
    3c5c:	0e 94 d7 20 	call	0x41ae	; 0x41ae <uart1_hal_clear_rx_buffer>
    3c60:	8c 2f       	mov	r24, r28
    3c62:	cf 91       	pop	r28
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	08 95       	ret

Disassembly of section .text.__vector_30:

00003430 <__vector_30>:
    3430:	1f 92       	push	r1
    3432:	0f 92       	push	r0
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	0f 92       	push	r0
    3438:	11 24       	eor	r1, r1
    343a:	8f 93       	push	r24
    343c:	ef 93       	push	r30
    343e:	ff 93       	push	r31
    3440:	e0 91 9b 06 	lds	r30, 0x069B	; 0x80069b <tx_buffer_cursor>
    3444:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tx_buffer_data_len>
    3448:	e8 17       	cp	r30, r24
    344a:	58 f4       	brcc	.+22     	; 0x3462 <__vector_30+0x32>
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	8e 0f       	add	r24, r30
    3450:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <tx_buffer_cursor>
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	e8 54       	subi	r30, 0x48	; 72
    3458:	fb 4f       	sbci	r31, 0xFB	; 251
    345a:	80 81       	ld	r24, Z
    345c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3460:	04 c0       	rjmp	.+8      	; 0x346a <__vector_30+0x3a>
    3462:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <tx_buffer_cursor>
    3466:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <tx_buffer_data_len>
    346a:	ff 91       	pop	r31
    346c:	ef 91       	pop	r30
    346e:	8f 91       	pop	r24
    3470:	0f 90       	pop	r0
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	0f 90       	pop	r0
    3476:	1f 90       	pop	r1
    3478:	18 95       	reti

Disassembly of section .text.__vector_28:

00002c0c <__vector_28>:
    2c0c:	1f 92       	push	r1
    2c0e:	0f 92       	push	r0
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	0f 92       	push	r0
    2c14:	11 24       	eor	r1, r1
    2c16:	2f 93       	push	r18
    2c18:	8f 93       	push	r24
    2c1a:	9f 93       	push	r25
    2c1c:	ef 93       	push	r30
    2c1e:	ff 93       	push	r31
    2c20:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <rx_buffer_has_message>
    2c24:	81 11       	cpse	r24, r1
    2c26:	0e c0       	rjmp	.+28     	; 0x2c44 <__vector_28+0x38>
    2c28:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <rx_buffer_data_len>
    2c2c:	e6 39       	cpi	r30, 0x96	; 150
    2c2e:	50 f4       	brcc	.+20     	; 0x2c44 <__vector_28+0x38>
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	8e 0f       	add	r24, r30
    2c34:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <rx_buffer_data_len>
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2c3e:	e0 58       	subi	r30, 0x80	; 128
    2c40:	fa 4f       	sbci	r31, 0xFA	; 250
    2c42:	80 83       	st	Z, r24
    2c44:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <rx_buffer_data_len>
    2c48:	83 30       	cpi	r24, 0x03	; 3
    2c4a:	80 f0       	brcs	.+32     	; 0x2c6c <__vector_28+0x60>
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e1 58       	subi	r30, 0x81	; 129
    2c52:	fa 4f       	sbci	r31, 0xFA	; 250
    2c54:	20 81       	ld	r18, Z
    2c56:	2a 30       	cpi	r18, 0x0A	; 10
    2c58:	49 f4       	brne	.+18     	; 0x2c6c <__vector_28+0x60>
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	e2 58       	subi	r30, 0x82	; 130
    2c5e:	fa 4f       	sbci	r31, 0xFA	; 250
    2c60:	80 81       	ld	r24, Z
    2c62:	8d 30       	cpi	r24, 0x0D	; 13
    2c64:	19 f4       	brne	.+6      	; 0x2c6c <__vector_28+0x60>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <rx_buffer_has_message>
    2c6c:	ff 91       	pop	r31
    2c6e:	ef 91       	pop	r30
    2c70:	9f 91       	pop	r25
    2c72:	8f 91       	pop	r24
    2c74:	2f 91       	pop	r18
    2c76:	0f 90       	pop	r0
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	0f 90       	pop	r0
    2c7c:	1f 90       	pop	r1
    2c7e:	18 95       	reti

Disassembly of section .text.main:

00003ea6 <main>:
	//test_runner();
	
	while(1)
	{
		if(1){
			CONF_enter();
    3ea6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3eaa:	2f ef       	ldi	r18, 0xFF	; 255
    3eac:	81 e1       	ldi	r24, 0x11	; 17
    3eae:	9a e7       	ldi	r25, 0x7A	; 122
    3eb0:	21 50       	subi	r18, 0x01	; 1
    3eb2:	80 40       	sbci	r24, 0x00	; 0
    3eb4:	90 40       	sbci	r25, 0x00	; 0
    3eb6:	e1 f7       	brne	.-8      	; 0x3eb0 <main+0xa>
    3eb8:	00 c0       	rjmp	.+0      	; 0x3eba <main+0x14>
    3eba:	00 00       	nop
    3ebc:	f4 cf       	rjmp	.-24     	; 0x3ea6 <main>

Disassembly of section .text.calc_ppm_methane:

0000267a <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    267a:	8f 92       	push	r8
    267c:	9f 92       	push	r9
    267e:	af 92       	push	r10
    2680:	bf 92       	push	r11
    2682:	cf 92       	push	r12
    2684:	df 92       	push	r13
    2686:	ef 92       	push	r14
    2688:	ff 92       	push	r15
    268a:	bc 01       	movw	r22, r24
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	59 e3       	ldi	r21, 0x39	; 57
    269c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__mulsf3>
    26a0:	80 90 8c 06 	lds	r8, 0x068C	; 0x80068c <Vc>
    26a4:	90 90 8d 06 	lds	r9, 0x068D	; 0x80068d <Vc+0x1>
    26a8:	a0 90 8e 06 	lds	r10, 0x068E	; 0x80068e <Vc+0x2>
    26ac:	b0 90 8f 06 	lds	r11, 0x068F	; 0x80068f <Vc+0x3>
    26b0:	a5 01       	movw	r20, r10
    26b2:	94 01       	movw	r18, r8
    26b4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__mulsf3>
    26b8:	6b 01       	movw	r12, r22
    26ba:	7c 01       	movw	r14, r24
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	c5 01       	movw	r24, r10
    26c2:	b4 01       	movw	r22, r8
    26c4:	0e 94 66 20 	call	0x40cc	; 0x40cc <__subsf3>
    26c8:	a7 01       	movw	r20, r14
    26ca:	96 01       	movw	r18, r12
    26cc:	0e 94 ed 20 	call	0x41da	; 0x41da <__divsf3>
    26d0:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <RRL>
    26d4:	30 91 89 06 	lds	r19, 0x0689	; 0x800689 <RRL+0x1>
    26d8:	40 91 8a 06 	lds	r20, 0x068A	; 0x80068a <RRL+0x2>
    26dc:	50 91 8b 06 	lds	r21, 0x068B	; 0x80068b <RRL+0x3>
    26e0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__mulsf3>
    26e4:	20 91 84 06 	lds	r18, 0x0684	; 0x800684 <PPM_factor>
    26e8:	30 91 85 06 	lds	r19, 0x0685	; 0x800685 <PPM_factor+0x1>
    26ec:	40 91 86 06 	lds	r20, 0x0686	; 0x800686 <PPM_factor+0x2>
    26f0:	50 91 87 06 	lds	r21, 0x0687	; 0x800687 <PPM_factor+0x3>
    26f4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__mulsf3>
    26f8:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
    26fc:	cb 01       	movw	r24, r22
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	df 90       	pop	r13
    2704:	cf 90       	pop	r12
    2706:	bf 90       	pop	r11
    2708:	af 90       	pop	r10
    270a:	9f 90       	pop	r9
    270c:	8f 90       	pop	r8
    270e:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002f40 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <ADC_get_value+0xa>
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2f50:	8f ef       	ldi	r24, 0xFF	; 255
    2f52:	9f ef       	ldi	r25, 0xFF	; 255
    2f54:	f8 01       	movw	r30, r16
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2f5a:	42 e0       	ldi	r20, 0x02	; 2
    2f5c:	be 01       	movw	r22, r28
    2f5e:	6f 5f       	subi	r22, 0xFF	; 255
    2f60:	7f 4f       	sbci	r23, 0xFF	; 255
    2f62:	8d e4       	ldi	r24, 0x4D	; 77
    2f64:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2f68:	81 11       	cpse	r24, r1
    2f6a:	0d c0       	rjmp	.+26     	; 0x2f86 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	98 2f       	mov	r25, r24
    2f72:	88 27       	eor	r24, r24
    2f74:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    2f76:	82 2b       	or	r24, r18
    2f78:	0e 94 3d 13 	call	0x267a	; 0x267a <calc_ppm_methane>
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003ed6 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3ed6:	60 e4       	ldi	r22, 0x40	; 64
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	80 e8       	ldi	r24, 0x80	; 128
    3edc:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    3ee0:	91 e0       	ldi	r25, 0x01	; 1
    3ee2:	81 11       	cpse	r24, r1
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <EM_has_deveui+0x12>
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
}
    3ee8:	89 2f       	mov	r24, r25
    3eea:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003eec <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3eec:	61 e4       	ldi	r22, 0x41	; 65
    3eee:	70 e0       	ldi	r23, 0x00	; 0
    3ef0:	80 e8       	ldi	r24, 0x80	; 128
    3ef2:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    3ef6:	91 e0       	ldi	r25, 0x01	; 1
    3ef8:	81 11       	cpse	r24, r1
    3efa:	01 c0       	rjmp	.+2      	; 0x3efe <EM_has_appeui+0x12>
    3efc:	90 e0       	ldi	r25, 0x00	; 0
}
    3efe:	89 2f       	mov	r24, r25
    3f00:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003f02 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3f02:	62 e4       	ldi	r22, 0x42	; 66
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	80 e8       	ldi	r24, 0x80	; 128
    3f08:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    3f0c:	91 e0       	ldi	r25, 0x01	; 1
    3f0e:	81 11       	cpse	r24, r1
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14 <EM_has_appkey+0x12>
    3f12:	90 e0       	ldi	r25, 0x00	; 0
}
    3f14:	89 2f       	mov	r24, r25
    3f16:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000037e2 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    37e2:	cf 92       	push	r12
    37e4:	df 92       	push	r13
    37e6:	ef 92       	push	r14
    37e8:	6b 01       	movw	r12, r22
    37ea:	e8 2e       	mov	r14, r24
    37ec:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    37f0:	40 97       	sbiw	r24, 0x10	; 16
    37f2:	79 f4       	brne	.+30     	; 0x3812 <EM_set_deveui+0x30>
    37f4:	20 e1       	ldi	r18, 0x10	; 16
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	8e 2d       	mov	r24, r14
    37fe:	b6 01       	movw	r22, r12
    3800:	0e 94 11 1b 	call	0x3622	; 0x3622 <eeprom_update_block>
    3804:	61 e0       	ldi	r22, 0x01	; 1
    3806:	80 e4       	ldi	r24, 0x40	; 64
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <eeprom_update_byte>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	01 c0       	rjmp	.+2      	; 0x3814 <EM_set_deveui+0x32>
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	ef 90       	pop	r14
    3816:	df 90       	pop	r13
    3818:	cf 90       	pop	r12
    381a:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003ad4 <EM_get_deveui>:
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	8c 01       	movw	r16, r24
    3adc:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <EM_has_deveui>
    3ae0:	c8 2f       	mov	r28, r24
    3ae2:	88 23       	and	r24, r24
    3ae4:	51 f0       	breq	.+20     	; 0x3afa <EM_get_deveui+0x26>
    3ae6:	20 e1       	ldi	r18, 0x10	; 16
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	c8 01       	movw	r24, r16
    3af2:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <eeprom_read_block>
    3af6:	f8 01       	movw	r30, r16
    3af8:	10 8a       	std	Z+16, r1	; 0x10
    3afa:	8c 2f       	mov	r24, r28
    3afc:	cf 91       	pop	r28
    3afe:	1f 91       	pop	r17
    3b00:	0f 91       	pop	r16
    3b02:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

0000381c <EM_set_appeui>:
    381c:	cf 92       	push	r12
    381e:	df 92       	push	r13
    3820:	ef 92       	push	r14
    3822:	6b 01       	movw	r12, r22
    3824:	e8 2e       	mov	r14, r24
    3826:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    382a:	40 97       	sbiw	r24, 0x10	; 16
    382c:	79 f4       	brne	.+30     	; 0x384c <EM_set_appeui+0x30>
    382e:	20 e1       	ldi	r18, 0x10	; 16
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e1       	ldi	r20, 0x10	; 16
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	8e 2d       	mov	r24, r14
    3838:	b6 01       	movw	r22, r12
    383a:	0e 94 11 1b 	call	0x3622	; 0x3622 <eeprom_update_block>
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	81 e4       	ldi	r24, 0x41	; 65
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <eeprom_update_byte>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	01 c0       	rjmp	.+2      	; 0x384e <EM_set_appeui+0x32>
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	ef 90       	pop	r14
    3850:	df 90       	pop	r13
    3852:	cf 90       	pop	r12
    3854:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003b04 <EM_get_appeui>:
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	8c 01       	movw	r16, r24
    3b0c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <EM_has_appeui>
    3b10:	c8 2f       	mov	r28, r24
    3b12:	88 23       	and	r24, r24
    3b14:	51 f0       	breq	.+20     	; 0x3b2a <EM_get_appeui+0x26>
    3b16:	20 e1       	ldi	r18, 0x10	; 16
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e1       	ldi	r20, 0x10	; 16
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	c8 01       	movw	r24, r16
    3b22:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <eeprom_read_block>
    3b26:	f8 01       	movw	r30, r16
    3b28:	10 8a       	std	Z+16, r1	; 0x10
    3b2a:	8c 2f       	mov	r24, r28
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00003856 <EM_set_appkey>:
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	6b 01       	movw	r12, r22
    385e:	e8 2e       	mov	r14, r24
    3860:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    3864:	80 97       	sbiw	r24, 0x20	; 32
    3866:	79 f4       	brne	.+30     	; 0x3886 <EM_set_appkey+0x30>
    3868:	20 e2       	ldi	r18, 0x20	; 32
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e2       	ldi	r20, 0x20	; 32
    386e:	50 e0       	ldi	r21, 0x00	; 0
    3870:	8e 2d       	mov	r24, r14
    3872:	b6 01       	movw	r22, r12
    3874:	0e 94 11 1b 	call	0x3622	; 0x3622 <eeprom_update_block>
    3878:	61 e0       	ldi	r22, 0x01	; 1
    387a:	82 e4       	ldi	r24, 0x42	; 66
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <eeprom_update_byte>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <EM_set_appkey+0x32>
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	ef 90       	pop	r14
    388a:	df 90       	pop	r13
    388c:	cf 90       	pop	r12
    388e:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003b34 <EM_get_appkey>:
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	8c 01       	movw	r16, r24
    3b3c:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <EM_has_appkey>
    3b40:	c8 2f       	mov	r28, r24
    3b42:	88 23       	and	r24, r24
    3b44:	51 f0       	breq	.+20     	; 0x3b5a <EM_get_appkey+0x26>
    3b46:	20 e2       	ldi	r18, 0x20	; 32
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e2       	ldi	r20, 0x20	; 32
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	c8 01       	movw	r24, r16
    3b52:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <eeprom_read_block>
    3b56:	f8 01       	movw	r30, r16
    3b58:	10 a2       	std	Z+32, r1	; 0x20
    3b5a:	8c 2f       	mov	r24, r28
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00004094 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    4094:	ab 01       	movw	r20, r22
    4096:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    4098:	83 e4       	ldi	r24, 0x43	; 67
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <eeprom_update_dword>
    40a0:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003da6 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	ec 01       	movw	r28, r24
    3dac:	63 e4       	ldi	r22, 0x43	; 67
    3dae:	70 e0       	ldi	r23, 0x00	; 0
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	0e 94 89 20 	call	0x4112	; 0x4112 <eeprom_read_dword>
    3db6:	68 83       	st	Y, r22
    3db8:	79 83       	std	Y+1, r23	; 0x01
    3dba:	8a 83       	std	Y+2, r24	; 0x02
    3dbc:	9b 83       	std	Y+3, r25	; 0x03
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000040a2 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    40a2:	ab 01       	movw	r20, r22
    40a4:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    40a6:	87 e4       	ldi	r24, 0x47	; 71
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <eeprom_update_dword>
    40ae:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003dc4 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	ec 01       	movw	r28, r24
    3dca:	67 e4       	ldi	r22, 0x47	; 71
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	0e 94 89 20 	call	0x4112	; 0x4112 <eeprom_read_dword>
    3dd4:	68 83       	st	Y, r22
    3dd6:	79 83       	std	Y+1, r23	; 0x01
    3dd8:	8a 83       	std	Y+2, r24	; 0x02
    3dda:	9b 83       	std	Y+3, r25	; 0x03
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000040b0 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    40b0:	ab 01       	movw	r20, r22
    40b2:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    40b4:	8b e4       	ldi	r24, 0x4B	; 75
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <eeprom_update_dword>
    40bc:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003de2 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3de2:	cf 93       	push	r28
    3de4:	df 93       	push	r29
    3de6:	ec 01       	movw	r28, r24
    3de8:	6b e4       	ldi	r22, 0x4B	; 75
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	0e 94 89 20 	call	0x4112	; 0x4112 <eeprom_read_dword>
    3df2:	68 83       	st	Y, r22
    3df4:	79 83       	std	Y+1, r23	; 0x01
    3df6:	8a 83       	std	Y+2, r24	; 0x02
    3df8:	9b 83       	std	Y+3, r25	; 0x03
    3dfa:	df 91       	pop	r29
    3dfc:	cf 91       	pop	r28
    3dfe:	08 95       	ret

Disassembly of section .text.EM_set_collections:

000040be <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    40be:	24 2f       	mov	r18, r20
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	44 e6       	ldi	r20, 0x64	; 100
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	0e 94 11 1b 	call	0x3622	; 0x3622 <eeprom_update_block>
    40ca:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00004014 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    4014:	26 2f       	mov	r18, r22
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	44 e6       	ldi	r20, 0x64	; 100
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <eeprom_read_block>
    4022:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

0000412e <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    412e:	68 2f       	mov	r22, r24
    4130:	8f e4       	ldi	r24, 0x4F	; 79
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <eeprom_update_byte>
    4138:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

0000413a <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    413a:	6f e4       	ldi	r22, 0x4F	; 79
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
}
    4144:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00004146 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    4146:	bc 01       	movw	r22, r24
    4148:	80 e5       	ldi	r24, 0x50	; 80
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 c7 20 	call	0x418e	; 0x418e <eeprom_update_word>
    4150:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00004152 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    4152:	60 e5       	ldi	r22, 0x50	; 80
    4154:	70 e0       	ldi	r23, 0x00	; 0
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	0e 94 90 20 	call	0x4120	; 0x4120 <eeprom_read_word>
}
    415c:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

0000415e <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    415e:	68 2f       	mov	r22, r24
    4160:	82 e5       	ldi	r24, 0x52	; 82
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <eeprom_update_byte>
    4168:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

0000416a <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    416a:	62 e5       	ldi	r22, 0x52	; 82
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    4174:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000041f2 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    41f2:	0e 94 a9 1a 	call	0x3552	; 0x3552 <util_reset_module>
}
    41f6:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000041f8 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    41f8:	0e 94 48 1c 	call	0x3890	; 0x3890 <util_lora_forward_msg>
    41fc:	08 95       	ret

Disassembly of section .text.LM_send_break:

000041fe <LM_send_break>:
}

void LM_send_break(char res[]){
	util_send_break(res);
    41fe:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <util_send_break>
    4202:	08 95       	ret

Disassembly of section .text.attach_ending:

00003e3c <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	01 90       	ld	r0, Z+
    3e40:	00 20       	and	r0, r0
    3e42:	e9 f7       	brne	.-6      	; 0x3e3e <attach_ending+0x2>
    3e44:	cf 01       	movw	r24, r30
    3e46:	23 e0       	ldi	r18, 0x03	; 3
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	47 e4       	ldi	r20, 0x47	; 71
    3e4c:	55 e0       	ldi	r21, 0x05	; 5
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	01 97       	sbiw	r24, 0x01	; 1
    3e52:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
    3e56:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

0000347a <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    347a:	6f 92       	push	r6
    347c:	7f 92       	push	r7
    347e:	8f 92       	push	r8
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	3b 01       	movw	r6, r22
    348c:	88 2e       	mov	r8, r24
    348e:	69 01       	movw	r12, r18
    3490:	e4 2e       	mov	r14, r20
    3492:	84 2f       	mov	r24, r20
    3494:	b9 01       	movw	r22, r18
    3496:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    349a:	8c 01       	movw	r16, r24
    349c:	4e 2d       	mov	r20, r14
    349e:	96 01       	movw	r18, r12
    34a0:	88 2d       	mov	r24, r8
    34a2:	b3 01       	movw	r22, r6
    34a4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <strncmp>
    34a8:	21 e0       	ldi	r18, 0x01	; 1
    34aa:	89 2b       	or	r24, r25
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <util_strbeginswith+0x36>
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	82 2f       	mov	r24, r18
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	ef 90       	pop	r14
    34b8:	df 90       	pop	r13
    34ba:	cf 90       	pop	r12
    34bc:	8f 90       	pop	r8
    34be:	7f 90       	pop	r7
    34c0:	6f 90       	pop	r6
    34c2:	08 95       	ret

Disassembly of section .text.util_reset_module:

00003552 <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    3552:	0e 94 e5 20 	call	0x41ca	; 0x41ca <rn2483_reset_active>
    3556:	2f ef       	ldi	r18, 0xFF	; 255
    3558:	89 e6       	ldi	r24, 0x69	; 105
    355a:	98 e1       	ldi	r25, 0x18	; 24
    355c:	21 50       	subi	r18, 0x01	; 1
    355e:	80 40       	sbci	r24, 0x00	; 0
    3560:	90 40       	sbci	r25, 0x00	; 0
    3562:	e1 f7       	brne	.-8      	; 0x355c <util_reset_module+0xa>
    3564:	00 c0       	rjmp	.+0      	; 0x3566 <util_reset_module+0x14>
    3566:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    3568:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    356c:	0e 94 35 20 	call	0x406a	; 0x406a <uart0_hal_message_ready>
    3570:	88 23       	and	r24, r24
    3572:	e1 f3       	breq	.-8      	; 0x356c <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    3574:	8e e5       	ldi	r24, 0x5E	; 94
    3576:	92 e0       	ldi	r25, 0x02	; 2
    3578:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    357c:	6e e5       	ldi	r22, 0x5E	; 94
    357e:	72 e0       	ldi	r23, 0x02	; 2
    3580:	80 e8       	ldi	r24, 0x80	; 128
    3582:	2d eb       	ldi	r18, 0xBD	; 189
    3584:	35 e0       	ldi	r19, 0x05	; 5
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	0e 94 3d 1a 	call	0x347a	; 0x347a <util_strbeginswith>
    358c:	88 23       	and	r24, r24
    358e:	11 f0       	breq	.+4      	; 0x3594 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    3594:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    3596:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00003890 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    3896:	ab 01       	movw	r20, r22
    3898:	68 2f       	mov	r22, r24
    389a:	8e e5       	ldi	r24, 0x5E	; 94
    389c:	92 e0       	ldi	r25, 0x02	; 2
    389e:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <strcpy>
	attach_ending(lm_msg);
    38a2:	8e e5       	ldi	r24, 0x5E	; 94
    38a4:	92 e0       	ldi	r25, 0x02	; 2
    38a6:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <attach_ending>
	uart0_hal_send_string(lm_msg);
    38aa:	6e e5       	ldi	r22, 0x5E	; 94
    38ac:	72 e0       	ldi	r23, 0x02	; 2
    38ae:	80 e8       	ldi	r24, 0x80	; 128
    38b0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    38b4:	0e 94 35 20 	call	0x406a	; 0x406a <uart0_hal_message_ready>
    38b8:	88 23       	and	r24, r24
    38ba:	e1 f3       	breq	.-8      	; 0x38b4 <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    38bc:	ce 01       	movw	r24, r28
    38be:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <uart0_hal_read_message_as_str>
}
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret

Disassembly of section .text.util_send_break:

00003d66 <util_send_break>:

void util_send_break(char res[]){
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	ec 01       	movw	r28, r24
	uart0_hal_send_break(0x55);
    3d6c:	85 e5       	ldi	r24, 0x55	; 85
    3d6e:	0e 94 86 1a 	call	0x350c	; 0x350c <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3d72:	0e 94 35 20 	call	0x406a	; 0x406a <uart0_hal_message_ready>
    3d76:	88 23       	and	r24, r24
    3d78:	e1 f3       	breq	.-8      	; 0x3d72 <util_send_break+0xc>
	
	uart0_hal_read_message_as_str(res);
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <uart0_hal_read_message_as_str>
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001c4c <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <datetime_to_BCD+0x8>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <datetime_to_BCD+0xa>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <datetime_to_BCD+0xc>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	f9 01       	movw	r30, r18
    1c5e:	3d ec       	ldi	r19, 0xCD	; 205
    1c60:	43 9f       	mul	r20, r19
    1c62:	21 2d       	mov	r18, r1
    1c64:	11 24       	eor	r1, r1
    1c66:	26 95       	lsr	r18
    1c68:	26 95       	lsr	r18
    1c6a:	26 95       	lsr	r18
    1c6c:	10 e1       	ldi	r17, 0x10	; 16
    1c6e:	21 9f       	mul	r18, r17
    1c70:	d0 01       	movw	r26, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	22 0f       	add	r18, r18
    1c76:	b2 2f       	mov	r27, r18
    1c78:	bb 0f       	add	r27, r27
    1c7a:	bb 0f       	add	r27, r27
    1c7c:	2b 0f       	add	r18, r27
    1c7e:	42 1b       	sub	r20, r18
    1c80:	4a 2b       	or	r20, r26
    1c82:	40 83       	st	Z, r20
    1c84:	53 9f       	mul	r21, r19
    1c86:	21 2d       	mov	r18, r1
    1c88:	11 24       	eor	r1, r1
    1c8a:	26 95       	lsr	r18
    1c8c:	26 95       	lsr	r18
    1c8e:	26 95       	lsr	r18
    1c90:	40 e1       	ldi	r20, 0x10	; 16
    1c92:	24 9f       	mul	r18, r20
    1c94:	d0 01       	movw	r26, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	22 0f       	add	r18, r18
    1c9a:	42 2f       	mov	r20, r18
    1c9c:	44 0f       	add	r20, r20
    1c9e:	44 0f       	add	r20, r20
    1ca0:	24 0f       	add	r18, r20
    1ca2:	52 1b       	sub	r21, r18
    1ca4:	5a 2b       	or	r21, r26
    1ca6:	51 83       	std	Z+1, r21	; 0x01
    1ca8:	63 9f       	mul	r22, r19
    1caa:	41 2d       	mov	r20, r1
    1cac:	11 24       	eor	r1, r1
    1cae:	46 95       	lsr	r20
    1cb0:	46 95       	lsr	r20
    1cb2:	46 95       	lsr	r20
    1cb4:	10 e1       	ldi	r17, 0x10	; 16
    1cb6:	41 9f       	mul	r20, r17
    1cb8:	d0 01       	movw	r26, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	44 0f       	add	r20, r20
    1cbe:	24 2f       	mov	r18, r20
    1cc0:	22 0f       	add	r18, r18
    1cc2:	22 0f       	add	r18, r18
    1cc4:	42 0f       	add	r20, r18
    1cc6:	64 1b       	sub	r22, r20
    1cc8:	6a 2b       	or	r22, r26
    1cca:	62 83       	std	Z+2, r22	; 0x02
    1ccc:	73 9f       	mul	r23, r19
    1cce:	41 2d       	mov	r20, r1
    1cd0:	11 24       	eor	r1, r1
    1cd2:	46 95       	lsr	r20
    1cd4:	46 95       	lsr	r20
    1cd6:	46 95       	lsr	r20
    1cd8:	20 e1       	ldi	r18, 0x10	; 16
    1cda:	42 9f       	mul	r20, r18
    1cdc:	d0 01       	movw	r26, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	44 0f       	add	r20, r20
    1ce2:	24 2f       	mov	r18, r20
    1ce4:	22 0f       	add	r18, r18
    1ce6:	22 0f       	add	r18, r18
    1ce8:	42 0f       	add	r20, r18
    1cea:	74 1b       	sub	r23, r20
    1cec:	7a 2b       	or	r23, r26
    1cee:	73 83       	std	Z+3, r23	; 0x03
    1cf0:	83 9f       	mul	r24, r19
    1cf2:	41 2d       	mov	r20, r1
    1cf4:	11 24       	eor	r1, r1
    1cf6:	46 95       	lsr	r20
    1cf8:	46 95       	lsr	r20
    1cfa:	46 95       	lsr	r20
    1cfc:	10 e1       	ldi	r17, 0x10	; 16
    1cfe:	41 9f       	mul	r20, r17
    1d00:	b0 01       	movw	r22, r0
    1d02:	11 24       	eor	r1, r1
    1d04:	44 0f       	add	r20, r20
    1d06:	24 2f       	mov	r18, r20
    1d08:	22 0f       	add	r18, r18
    1d0a:	22 0f       	add	r18, r18
    1d0c:	42 0f       	add	r20, r18
    1d0e:	84 1b       	sub	r24, r20
    1d10:	86 2b       	or	r24, r22
    1d12:	84 83       	std	Z+4, r24	; 0x04
    1d14:	93 9f       	mul	r25, r19
    1d16:	31 2d       	mov	r19, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	36 95       	lsr	r19
    1d1c:	36 95       	lsr	r19
    1d1e:	36 95       	lsr	r19
    1d20:	20 e1       	ldi	r18, 0x10	; 16
    1d22:	32 9f       	mul	r19, r18
    1d24:	a0 01       	movw	r20, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	33 0f       	add	r19, r19
    1d2a:	83 2f       	mov	r24, r19
    1d2c:	88 0f       	add	r24, r24
    1d2e:	88 0f       	add	r24, r24
    1d30:	38 0f       	add	r19, r24
    1d32:	93 1b       	sub	r25, r19
    1d34:	94 2b       	or	r25, r20
    1d36:	95 83       	std	Z+5, r25	; 0x05
    1d38:	26 96       	adiw	r28, 0x06	; 6
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001796 <RTC_get_current_time>:
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	27 97       	sbiw	r28, 0x07	; 7
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	8c 01       	movw	r16, r24
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	40 ed       	ldi	r20, 0xD0	; 208
    17b4:	55 e0       	ldi	r21, 0x05	; 5
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	81 e5       	ldi	r24, 0x51	; 81
    17ba:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <TWI_API_write_data>
    17be:	81 11       	cpse	r24, r1
    17c0:	7c c0       	rjmp	.+248    	; 0x18ba <RTC_get_current_time+0x124>
    17c2:	47 e0       	ldi	r20, 0x07	; 7
    17c4:	be 01       	movw	r22, r28
    17c6:	6f 5f       	subi	r22, 0xFF	; 255
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	81 e5       	ldi	r24, 0x51	; 81
    17cc:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <TWI_API_repeat_read_data_stop>
    17d0:	81 11       	cpse	r24, r1
    17d2:	75 c0       	rjmp	.+234    	; 0x18be <RTC_get_current_time+0x128>
    17d4:	29 81       	ldd	r18, Y+1	; 0x01
    17d6:	82 2f       	mov	r24, r18
    17d8:	8f 77       	andi	r24, 0x7F	; 127
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	95 95       	asr	r25
    17de:	87 95       	ror	r24
    17e0:	95 95       	asr	r25
    17e2:	87 95       	ror	r24
    17e4:	95 95       	asr	r25
    17e6:	87 95       	ror	r24
    17e8:	95 95       	asr	r25
    17ea:	87 95       	ror	r24
    17ec:	88 0f       	add	r24, r24
    17ee:	98 2f       	mov	r25, r24
    17f0:	99 0f       	add	r25, r25
    17f2:	99 0f       	add	r25, r25
    17f4:	89 0f       	add	r24, r25
    17f6:	2f 70       	andi	r18, 0x0F	; 15
    17f8:	82 0f       	add	r24, r18
    17fa:	f8 01       	movw	r30, r16
    17fc:	80 83       	st	Z, r24
    17fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1800:	82 2f       	mov	r24, r18
    1802:	8f 77       	andi	r24, 0x7F	; 127
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	95 95       	asr	r25
    1810:	87 95       	ror	r24
    1812:	95 95       	asr	r25
    1814:	87 95       	ror	r24
    1816:	88 0f       	add	r24, r24
    1818:	98 2f       	mov	r25, r24
    181a:	99 0f       	add	r25, r25
    181c:	99 0f       	add	r25, r25
    181e:	89 0f       	add	r24, r25
    1820:	2f 70       	andi	r18, 0x0F	; 15
    1822:	82 0f       	add	r24, r18
    1824:	81 83       	std	Z+1, r24	; 0x01
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	82 2f       	mov	r24, r18
    182a:	8f 73       	andi	r24, 0x3F	; 63
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	95 95       	asr	r25
    1830:	87 95       	ror	r24
    1832:	95 95       	asr	r25
    1834:	87 95       	ror	r24
    1836:	95 95       	asr	r25
    1838:	87 95       	ror	r24
    183a:	95 95       	asr	r25
    183c:	87 95       	ror	r24
    183e:	88 0f       	add	r24, r24
    1840:	98 2f       	mov	r25, r24
    1842:	99 0f       	add	r25, r25
    1844:	99 0f       	add	r25, r25
    1846:	89 0f       	add	r24, r25
    1848:	2f 70       	andi	r18, 0x0F	; 15
    184a:	82 0f       	add	r24, r18
    184c:	82 83       	std	Z+2, r24	; 0x02
    184e:	2c 81       	ldd	r18, Y+4	; 0x04
    1850:	82 2f       	mov	r24, r18
    1852:	8f 73       	andi	r24, 0x3F	; 63
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	95 95       	asr	r25
    1858:	87 95       	ror	r24
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	95 95       	asr	r25
    1860:	87 95       	ror	r24
    1862:	95 95       	asr	r25
    1864:	87 95       	ror	r24
    1866:	88 0f       	add	r24, r24
    1868:	98 2f       	mov	r25, r24
    186a:	99 0f       	add	r25, r25
    186c:	99 0f       	add	r25, r25
    186e:	89 0f       	add	r24, r25
    1870:	2f 70       	andi	r18, 0x0F	; 15
    1872:	82 0f       	add	r24, r18
    1874:	83 83       	std	Z+3, r24	; 0x03
    1876:	2e 81       	ldd	r18, Y+6	; 0x06
    1878:	82 2f       	mov	r24, r18
    187a:	8f 71       	andi	r24, 0x1F	; 31
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	95 95       	asr	r25
    1880:	87 95       	ror	r24
    1882:	95 95       	asr	r25
    1884:	87 95       	ror	r24
    1886:	95 95       	asr	r25
    1888:	87 95       	ror	r24
    188a:	95 95       	asr	r25
    188c:	87 95       	ror	r24
    188e:	88 0f       	add	r24, r24
    1890:	98 2f       	mov	r25, r24
    1892:	99 0f       	add	r25, r25
    1894:	99 0f       	add	r25, r25
    1896:	89 0f       	add	r24, r25
    1898:	2f 70       	andi	r18, 0x0F	; 15
    189a:	82 0f       	add	r24, r18
    189c:	84 83       	std	Z+4, r24	; 0x04
    189e:	8f 81       	ldd	r24, Y+7	; 0x07
    18a0:	98 2f       	mov	r25, r24
    18a2:	92 95       	swap	r25
    18a4:	9f 70       	andi	r25, 0x0F	; 15
    18a6:	99 0f       	add	r25, r25
    18a8:	29 2f       	mov	r18, r25
    18aa:	22 0f       	add	r18, r18
    18ac:	22 0f       	add	r18, r18
    18ae:	92 0f       	add	r25, r18
    18b0:	8f 70       	andi	r24, 0x0F	; 15
    18b2:	89 0f       	add	r24, r25
    18b4:	85 83       	std	Z+5, r24	; 0x05
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <RTC_get_current_time+0x12a>
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <RTC_get_current_time+0x12a>
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	27 96       	adiw	r28, 0x07	; 7
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00002dc8 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	64 97       	sbiw	r28, 0x14	; 20
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    2ddc:	9e 01       	movw	r18, r28
    2dde:	27 5f       	subi	r18, 0xF7	; 247
    2de0:	3f 4f       	sbci	r19, 0xFF	; 255
    2de2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <datetime_to_BCD>
	
	data[0]=0x02;
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    2dee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df0:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    2df2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df4:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    2df6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2df8:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    2dfa:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    2dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfe:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    2e00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e02:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    2e04:	ae 01       	movw	r20, r28
    2e06:	4f 5f       	subi	r20, 0xFF	; 255
    2e08:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0a:	60 e8       	ldi	r22, 0x80	; 128
    2e0c:	28 e0       	ldi	r18, 0x08	; 8
    2e0e:	81 e5       	ldi	r24, 0x51	; 81
    2e10:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2e14:	88 23       	and	r24, r24
    2e16:	11 f0       	breq	.+4      	; 0x2e1c <RTC_set_current_time+0x54>
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
}
    2e1e:	64 96       	adiw	r28, 0x14	; 20
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003e72 <bytes_2_uint>:
	TC1_HAL_start();
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    3e72:	fc 01       	movw	r30, r24
    3e74:	54 81       	ldd	r21, Z+4	; 0x04
    3e76:	43 81       	ldd	r20, Z+3	; 0x03
    3e78:	31 81       	ldd	r19, Z+1	; 0x01
    3e7a:	20 81       	ld	r18, Z
    3e7c:	65 2f       	mov	r22, r21
    3e7e:	74 2f       	mov	r23, r20
    3e80:	83 2f       	mov	r24, r19
    3e82:	92 2f       	mov	r25, r18
    3e84:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fixunssfsi>
    3e88:	cb 01       	movw	r24, r22
    3e8a:	08 95       	ret

Disassembly of section .text.init_measurement:

000038c8 <init_measurement>:
    38c8:	25 e0       	ldi	r18, 0x05	; 5
    38ca:	44 ec       	ldi	r20, 0xC4	; 196
    38cc:	55 e0       	ldi	r21, 0x05	; 5
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	81 e6       	ldi	r24, 0x61	; 97
    38d2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <TWI_API_write_data_stop>
    38d6:	81 11       	cpse	r24, r1
    38d8:	0f c0       	rjmp	.+30     	; 0x38f8 <init_measurement+0x30>
    38da:	25 e0       	ldi	r18, 0x05	; 5
    38dc:	49 ec       	ldi	r20, 0xC9	; 201
    38de:	55 e0       	ldi	r21, 0x05	; 5
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	81 e6       	ldi	r24, 0x61	; 97
    38e4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <TWI_API_write_data_stop>
    38e8:	81 11       	cpse	r24, r1
    38ea:	08 c0       	rjmp	.+16     	; 0x38fc <init_measurement+0x34>
    38ec:	0e 94 cd 20 	call	0x419a	; 0x419a <SCD30_HAL_data_ready>
    38f0:	88 23       	and	r24, r24
    38f2:	e1 f3       	breq	.-8      	; 0x38ec <init_measurement+0x24>
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	08 95       	ret
    38f8:	82 e0       	ldi	r24, 0x02	; 2
    38fa:	08 95       	ret
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	08 95       	ret

Disassembly of section .text.validate_data:

00003a40 <validate_data>:
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	ec 01       	movw	r28, r24
    3a46:	62 e0       	ldi	r22, 0x02	; 2
    3a48:	0e 94 9c 1c 	call	0x3938	; 0x3938 <calc_crc8>
    3a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4e:	89 13       	cpse	r24, r25
    3a50:	0a c0       	rjmp	.+20     	; 0x3a66 <validate_data+0x26>
    3a52:	62 e0       	ldi	r22, 0x02	; 2
    3a54:	ce 01       	movw	r24, r28
    3a56:	03 96       	adiw	r24, 0x03	; 3
    3a58:	0e 94 9c 1c 	call	0x3938	; 0x3938 <calc_crc8>
    3a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5e:	89 17       	cp	r24, r25
    3a60:	21 f0       	breq	.+8      	; 0x3a6a <validate_data+0x2a>
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	03 c0       	rjmp	.+6      	; 0x3a6c <validate_data+0x2c>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	01 c0       	rjmp	.+2      	; 0x3a6c <validate_data+0x2c>
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	df 91       	pop	r29
    3a6e:	cf 91       	pop	r28
    3a70:	08 95       	ret

Disassembly of section .text.read_value:

000025d8 <read_value>:
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <read_value+0xa>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <read_value+0xc>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <read_value+0xe>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	8c 01       	movw	r16, r24
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	9f ef       	ldi	r25, 0xFF	; 255
    25f0:	f8 01       	movw	r30, r16
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    25f6:	0e 94 cd 20 	call	0x419a	; 0x419a <SCD30_HAL_data_ready>
    25fa:	81 11       	cpse	r24, r1
    25fc:	07 c0       	rjmp	.+14     	; 0x260c <read_value+0x34>
    25fe:	8e ef       	ldi	r24, 0xFE	; 254
    2600:	9f ef       	ldi	r25, 0xFF	; 255
    2602:	f8 01       	movw	r30, r16
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	2c c0       	rjmp	.+88     	; 0x2664 <read_value+0x8c>
    260c:	22 e0       	ldi	r18, 0x02	; 2
    260e:	4e ec       	ldi	r20, 0xCE	; 206
    2610:	55 e0       	ldi	r21, 0x05	; 5
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	81 e6       	ldi	r24, 0x61	; 97
    2616:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <TWI_API_write_data_stop>
    261a:	81 11       	cpse	r24, r1
    261c:	1e c0       	rjmp	.+60     	; 0x265a <read_value+0x82>
    261e:	8f e3       	ldi	r24, 0x3F	; 63
    2620:	9f e1       	ldi	r25, 0x1F	; 31
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <read_value+0x4a>
    2626:	00 c0       	rjmp	.+0      	; 0x2628 <read_value+0x50>
    2628:	00 00       	nop
    262a:	46 e0       	ldi	r20, 0x06	; 6
    262c:	be 01       	movw	r22, r28
    262e:	6f 5f       	subi	r22, 0xFF	; 255
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	81 e6       	ldi	r24, 0x61	; 97
    2634:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <TWI_API_read_data_ack_end_nack_stop>
    2638:	81 11       	cpse	r24, r1
    263a:	11 c0       	rjmp	.+34     	; 0x265e <read_value+0x86>
    263c:	ce 01       	movw	r24, r28
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <validate_data>
    2644:	88 23       	and	r24, r24
    2646:	69 f0       	breq	.+26     	; 0x2662 <read_value+0x8a>
    2648:	ce 01       	movw	r24, r28
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <bytes_2_uint>
    2650:	f8 01       	movw	r30, r16
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <read_value+0x8c>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <read_value+0x8c>
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <read_value+0x8c>
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	26 96       	adiw	r28, 0x06	; 6
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003d02 <SCD30_sensor_on>:
    3d02:	0e 94 2e 20 	call	0x405c	; 0x405c <SCD30_HAL_init>
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <PM_HAL_SCD30_power>
    3d0c:	2f ef       	ldi	r18, 0xFF	; 255
    3d0e:	83 ed       	ldi	r24, 0xD3	; 211
    3d10:	90 e3       	ldi	r25, 0x30	; 48
    3d12:	21 50       	subi	r18, 0x01	; 1
    3d14:	80 40       	sbci	r24, 0x00	; 0
    3d16:	90 40       	sbci	r25, 0x00	; 0
    3d18:	e1 f7       	brne	.-8      	; 0x3d12 <SCD30_sensor_on+0x10>
    3d1a:	00 c0       	rjmp	.+0      	; 0x3d1c <SCD30_sensor_on+0x1a>
    3d1c:	00 00       	nop
    3d1e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <init_measurement>
    3d22:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003e8c <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3e92:	0e 94 cd 20 	call	0x419a	; 0x419a <SCD30_HAL_data_ready>
    3e96:	88 23       	and	r24, r24
    3e98:	e1 f3       	breq	.-8      	; 0x3e92 <SCD30_get_reading+0x6>
	
	return read_value(value);
    3e9a:	ce 01       	movw	r24, r28
    3e9c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <read_value>
}
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	08 95       	ret

Disassembly of section .text.parse_cmd:

00003c6a <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	80 81       	ld	r24, Z
    3c6e:	82 37       	cpi	r24, 0x72	; 114
    3c70:	41 f0       	breq	.+16     	; 0x3c82 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    3c72:	87 37       	cpi	r24, 0x77	; 119
    3c74:	41 f0       	breq	.+16     	; 0x3c86 <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    3c76:	83 36       	cpi	r24, 0x63	; 99
    3c78:	41 f0       	breq	.+16     	; 0x3c8a <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    3c7a:	83 37       	cpi	r24, 0x73	; 115
    3c7c:	41 f4       	brne	.+16     	; 0x3c8e <parse_cmd+0x24>
    3c7e:	8a e0       	ldi	r24, 0x0A	; 10
    3c80:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3c82:	87 e0       	ldi	r24, 0x07	; 7
    3c84:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    3c86:	88 e0       	ldi	r24, 0x08	; 8
    3c88:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    3c8a:	89 e0       	ldi	r24, 0x09	; 9
    3c8c:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    3c8e:	85 e0       	ldi	r24, 0x05	; 5
}
    3c90:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002f96 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	80 e8       	ldi	r24, 0x80	; 128
    2fa0:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2fa4:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	31 97       	sbiw	r30, 0x01	; 1
    2faa:	ec 0f       	add	r30, r28
    2fac:	fd 1f       	adc	r31, r29
    2fae:	80 81       	ld	r24, Z
    2fb0:	80 32       	cpi	r24, 0x20	; 32
    2fb2:	b1 f0       	breq	.+44     	; 0x2fe0 <validate_cmd+0x4a>
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	0d c0       	rjmp	.+26     	; 0x2fd6 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	90 81       	ld	r25, Z
    2fc4:	90 32       	cpi	r25, 0x20	; 32
    2fc6:	21 f4       	brne	.+8      	; 0x2fd0 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2fc8:	41 11       	cpse	r20, r1
    2fca:	0c c0       	rjmp	.+24     	; 0x2fe4 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2fd2:	2f 5f       	subi	r18, 0xFF	; 255
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	26 17       	cp	r18, r22
    2fd8:	37 07       	cpc	r19, r23
    2fda:	80 f3       	brcs	.-32     	; 0x2fbc <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	03 c0       	rjmp	.+6      	; 0x2fe6 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

Disassembly of section .text.CONF_enter:

000018d6 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    18d6:	cf 93       	push	r28
	uart1_hal_init();
    18d8:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    18dc:	c0 e0       	ldi	r28, 0x00	; 0
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <CONF_enter+0x24>
				
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    18e0:	c2 e0       	ldi	r28, 0x02	; 2
    18e2:	0b c0       	rjmp	.+22     	; 0x18fa <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    18e4:	c5 e0       	ldi	r28, 0x05	; 5
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    18e8:	c6 e0       	ldi	r28, 0x06	; 6
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    18ec:	c5 e0       	ldi	r28, 0x05	; 5
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    18f0:	c5 e0       	ldi	r28, 0x05	; 5
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    18f4:	c5 e0       	ldi	r28, 0x05	; 5
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    18f8:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    18fa:	ec 2f       	mov	r30, r28
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	ec 30       	cpi	r30, 0x0C	; 12
    1900:	f1 05       	cpc	r31, r1
    1902:	d8 f7       	brcc	.-10     	; 0x18fa <CONF_enter+0x24>
    1904:	e2 5c       	subi	r30, 0xC2	; 194
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	0c 94 c1 20 	jmp	0x4182	; 0x4182 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    190c:	67 e2       	ldi	r22, 0x27	; 39
    190e:	74 e0       	ldi	r23, 0x04	; 4
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1916:	6d e4       	ldi	r22, 0x4D	; 77
    1918:	74 e0       	ldi	r23, 0x04	; 4
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				
				if(!init_methane_SCD30()){
    1920:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <init_methane_SCD30>
    1924:	81 11       	cpse	r24, r1
    1926:	dc cf       	rjmp	.-72     	; 0x18e0 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    1928:	6f e6       	ldi	r22, 0x6F	; 111
    192a:	74 e0       	ldi	r23, 0x04	; 4
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
					state=CONF_EXIT;
    1932:	c4 e0       	ldi	r28, 0x04	; 4
    1934:	e2 cf       	rjmp	.-60     	; 0x18fa <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1936:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_message_ready>
    193a:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    193c:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    193e:	0e 94 43 20 	call	0x4086	; 0x4086 <uart1_hal_rx_full>
    1942:	81 11       	cpse	r24, r1
    1944:	cf cf       	rjmp	.-98     	; 0x18e4 <CONF_enter+0xe>
    1946:	d9 cf       	rjmp	.-78     	; 0x18fa <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1948:	8e ee       	ldi	r24, 0xEE	; 238
    194a:	93 e0       	ldi	r25, 0x03	; 3
    194c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    1950:	8e ee       	ldi	r24, 0xEE	; 238
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <validate_cmd>
    1958:	88 23       	and	r24, r24
    195a:	31 f2       	breq	.-116    	; 0x18e8 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    195c:	8e ee       	ldi	r24, 0xEE	; 238
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <parse_cmd>
    1964:	c8 2f       	mov	r28, r24
    1966:	c9 cf       	rjmp	.-110    	; 0x18fa <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    1968:	6e ee       	ldi	r22, 0xEE	; 238
    196a:	73 e0       	ldi	r23, 0x03	; 3
    196c:	80 e8       	ldi	r24, 0x80	; 128
    196e:	46 e2       	ldi	r20, 0x26	; 38
    1970:	53 e0       	ldi	r21, 0x03	; 3
    1972:	0e 94 f9 07 	call	0xff2	; 0xff2 <handle_read>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <CONF_enter+0xa6>
    197a:	b8 cf       	rjmp	.-144    	; 0x18ec <CONF_enter+0x16>
					state=CONF_REPLY;
    197c:	cb e0       	ldi	r28, 0x0B	; 11
    197e:	bd cf       	rjmp	.-134    	; 0x18fa <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    1980:	6e ee       	ldi	r22, 0xEE	; 238
    1982:	73 e0       	ldi	r23, 0x03	; 3
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	46 e2       	ldi	r20, 0x26	; 38
    1988:	53 e0       	ldi	r21, 0x03	; 3
    198a:	0e 94 4a 09 	call	0x1294	; 0x1294 <handle_write>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <CONF_enter+0xbe>
    1992:	ae cf       	rjmp	.-164    	; 0x18f0 <CONF_enter+0x1a>
					state=CONF_REPLY;
    1994:	cb e0       	ldi	r28, 0x0B	; 11
    1996:	b1 cf       	rjmp	.-158    	; 0x18fa <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1998:	6e ee       	ldi	r22, 0xEE	; 238
    199a:	73 e0       	ldi	r23, 0x03	; 3
    199c:	80 e8       	ldi	r24, 0x80	; 128
    199e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <CONNECT>
    19a2:	88 23       	and	r24, r24
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <CONF_enter+0xd2>
    19a6:	a6 cf       	rjmp	.-180    	; 0x18f4 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    19a8:	c2 e0       	ldi	r28, 0x02	; 2
    19aa:	a7 cf       	rjmp	.-178    	; 0x18fa <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    19ac:	6e ee       	ldi	r22, 0xEE	; 238
    19ae:	73 e0       	ldi	r23, 0x03	; 3
    19b0:	80 e8       	ldi	r24, 0x80	; 128
    19b2:	46 e2       	ldi	r20, 0x26	; 38
    19b4:	53 e0       	ldi	r21, 0x03	; 3
    19b6:	0e 94 92 11 	call	0x2324	; 0x2324 <handle_sample>
    19ba:	88 23       	and	r24, r24
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <CONF_enter+0xea>
    19be:	9c cf       	rjmp	.-200    	; 0x18f8 <CONF_enter+0x22>
					state=CONF_REPLY;
    19c0:	cb e0       	ldi	r28, 0x0B	; 11
    19c2:	9b cf       	rjmp	.-202    	; 0x18fa <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    19c4:	66 e2       	ldi	r22, 0x26	; 38
    19c6:	73 e0       	ldi	r23, 0x03	; 3
    19c8:	80 e8       	ldi	r24, 0x80	; 128
    19ca:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    19ce:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    19d0:	94 cf       	rjmp	.-216    	; 0x18fa <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    19d2:	6e e8       	ldi	r22, 0x8E	; 142
    19d4:	74 e0       	ldi	r23, 0x04	; 4
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    19dc:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    19de:	8d cf       	rjmp	.-230    	; 0x18fa <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    19e0:	68 e9       	ldi	r22, 0x98	; 152
    19e2:	74 e0       	ldi	r23, 0x04	; 4
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    19ea:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    19ec:	86 cf       	rjmp	.-244    	; 0x18fa <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    19ee:	0e 94 d7 20 	call	0x41ae	; 0x41ae <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    19f2:	65 ea       	ldi	r22, 0xA5	; 165
    19f4:	74 e0       	ldi	r23, 0x04	; 4
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    19fc:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    19fe:	7d cf       	rjmp	.-262    	; 0x18fa <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00003040 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    3040:	cf 92       	push	r12
    3042:	df 92       	push	r13
    3044:	ef 92       	push	r14
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    304a:	6c 01       	movw	r12, r24
    304c:	20 e8       	ldi	r18, 0x80	; 128
    304e:	e2 2e       	mov	r14, r18
    3050:	04 e0       	ldi	r16, 0x04	; 4
    3052:	10 e0       	ldi	r17, 0x00	; 0
    3054:	2b ec       	ldi	r18, 0xCB	; 203
    3056:	34 e0       	ldi	r19, 0x04	; 4
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	8e 2d       	mov	r24, r14
    305c:	b6 01       	movw	r22, r12
    305e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <strncmp>
    3062:	89 2b       	or	r24, r25
    3064:	69 f0       	breq	.+26     	; 0x3080 <CON_RN2483_parse+0x40>
		return CL_EXIT;
	}else if (strncmp(msg, "break", strlen("break"))==0)
    3066:	05 e0       	ldi	r16, 0x05	; 5
    3068:	10 e0       	ldi	r17, 0x00	; 0
    306a:	20 ed       	ldi	r18, 0xD0	; 208
    306c:	34 e0       	ldi	r19, 0x04	; 4
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	8e 2d       	mov	r24, r14
    3072:	b6 01       	movw	r22, r12
    3074:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <strncmp>
    3078:	89 2b       	or	r24, r25
    307a:	21 f4       	brne	.+8      	; 0x3084 <CON_RN2483_parse+0x44>
	{
		return CL_SEND_BREAK;
    307c:	84 e0       	ldi	r24, 0x04	; 4
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <CON_RN2483_parse+0x46>
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0){
		return CL_EXIT;
    3080:	85 e0       	ldi	r24, 0x05	; 5
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <CON_RN2483_parse+0x46>
	}else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
	}
	return CL_FORWARD;
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ef 90       	pop	r14
    308c:	df 90       	pop	r13
    308e:	cf 90       	pop	r12
    3090:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001644 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1644:	6f 92       	push	r6
    1646:	7f 92       	push	r7
    1648:	8f 92       	push	r8
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1654:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1656:	c2 30       	cpi	r28, 0x02	; 2
    1658:	29 f1       	breq	.+74     	; 0x16a4 <CON_RN2483+0x60>
    165a:	28 f4       	brcc	.+10     	; 0x1666 <CON_RN2483+0x22>
    165c:	cc 23       	and	r28, r28
    165e:	59 f0       	breq	.+22     	; 0x1676 <CON_RN2483+0x32>
    1660:	c1 30       	cpi	r28, 0x01	; 1
    1662:	b1 f0       	breq	.+44     	; 0x1690 <CON_RN2483+0x4c>
    1664:	f8 cf       	rjmp	.-16     	; 0x1656 <CON_RN2483+0x12>
    1666:	c4 30       	cpi	r28, 0x04	; 4
    1668:	09 f4       	brne	.+2      	; 0x166c <CON_RN2483+0x28>
    166a:	51 c0       	rjmp	.+162    	; 0x170e <CON_RN2483+0xca>
    166c:	08 f1       	brcs	.+66     	; 0x16b0 <CON_RN2483+0x6c>
    166e:	c5 30       	cpi	r28, 0x05	; 5
    1670:	09 f4       	brne	.+2      	; 0x1674 <CON_RN2483+0x30>
    1672:	80 c0       	rjmp	.+256    	; 0x1774 <CON_RN2483+0x130>
    1674:	f0 cf       	rjmp	.-32     	; 0x1656 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1676:	0e 94 97 1b 	call	0x372e	; 0x372e <uart0_hal_init>
				rn2483_init();
    167a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <rn2483_init>
				LM_reset_module();
    167e:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1682:	66 ed       	ldi	r22, 0xD6	; 214
    1684:	74 e0       	ldi	r23, 0x04	; 4
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CL_READ_MSG;
    168c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    168e:	e3 cf       	rjmp	.-58     	; 0x1656 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1690:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_message_ready>
    1694:	88 23       	and	r24, r24
    1696:	f9 f2       	breq	.-66     	; 0x1656 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1698:	8e ee       	ldi	r24, 0xEE	; 238
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    16a0:	c2 e0       	ldi	r28, 0x02	; 2
    16a2:	d9 cf       	rjmp	.-78     	; 0x1656 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    16a4:	8e ee       	ldi	r24, 0xEE	; 238
    16a6:	93 e0       	ldi	r25, 0x03	; 3
    16a8:	0e 94 20 18 	call	0x3040	; 0x3040 <CON_RN2483_parse>
    16ac:	c8 2f       	mov	r28, r24
			break;
    16ae:	d3 cf       	rjmp	.-90     	; 0x1656 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    16b0:	8e ee       	ldi	r24, 0xEE	; 238
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	6c 01       	movw	r12, r24
    16b6:	20 e8       	ldi	r18, 0x80	; 128
    16b8:	e2 2e       	mov	r14, r18
    16ba:	2f 93       	push	r18
    16bc:	df 92       	push	r13
    16be:	8f 93       	push	r24
    16c0:	8c e0       	ldi	r24, 0x0C	; 12
    16c2:	95 e0       	ldi	r25, 0x05	; 5
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	af 93       	push	r26
    16c8:	9f 93       	push	r25
    16ca:	8f 93       	push	r24
    16cc:	c6 e2       	ldi	r28, 0x26	; 38
    16ce:	d3 e0       	ldi	r29, 0x03	; 3
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
				uart1_hal_send_string(cnf_reply);
    16d8:	3e 01       	movw	r6, r28
    16da:	20 e8       	ldi	r18, 0x80	; 128
    16dc:	82 2e       	mov	r8, r18
    16de:	88 2d       	mov	r24, r8
    16e0:	b3 01       	movw	r22, r6
    16e2:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    16e6:	ae 01       	movw	r20, r28
    16e8:	6c 2d       	mov	r22, r12
    16ea:	7d 2d       	mov	r23, r13
    16ec:	8e 2d       	mov	r24, r14
    16ee:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    16f2:	88 2d       	mov	r24, r8
    16f4:	b3 01       	movw	r22, r6
    16f6:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    16fa:	8d b7       	in	r24, 0x3d	; 61
    16fc:	9e b7       	in	r25, 0x3e	; 62
    16fe:	08 96       	adiw	r24, 0x08	; 8
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	9e bf       	out	0x3e, r25	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    170a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    170c:	a4 cf       	rjmp	.-184    	; 0x1656 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    170e:	82 e1       	ldi	r24, 0x12	; 18
    1710:	95 e0       	ldi	r25, 0x05	; 5
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	af 93       	push	r26
    1716:	9f 93       	push	r25
    1718:	8f 93       	push	r24
    171a:	8c e0       	ldi	r24, 0x0C	; 12
    171c:	95 e0       	ldi	r25, 0x05	; 5
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	af 93       	push	r26
    1722:	9f 93       	push	r25
    1724:	8f 93       	push	r24
    1726:	c6 e2       	ldi	r28, 0x26	; 38
    1728:	d3 e0       	ldi	r29, 0x03	; 3
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1732:	6e 01       	movw	r12, r28
    1734:	80 e8       	ldi	r24, 0x80	; 128
    1736:	e8 2e       	mov	r14, r24
    1738:	8e 2d       	mov	r24, r14
    173a:	b6 01       	movw	r22, r12
    173c:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
    1740:	9f e7       	ldi	r25, 0x7F	; 127
    1742:	28 e3       	ldi	r18, 0x38	; 56
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	91 50       	subi	r25, 0x01	; 1
    1748:	20 40       	sbci	r18, 0x00	; 0
    174a:	80 40       	sbci	r24, 0x00	; 0
    174c:	e1 f7       	brne	.-8      	; 0x1746 <CON_RN2483+0x102>
    174e:	00 c0       	rjmp	.+0      	; 0x1750 <CON_RN2483+0x10c>
    1750:	00 00       	nop
				_delay_ms(50);
				LM_send_break(cnf_reply);
    1752:	ce 01       	movw	r24, r28
    1754:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LM_send_break>
				uart1_hal_send_string(cnf_reply);
    1758:	8e 2d       	mov	r24, r14
    175a:	b6 01       	movw	r22, r12
    175c:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1760:	8d b7       	in	r24, 0x3d	; 61
    1762:	9e b7       	in	r25, 0x3e	; 62
    1764:	08 96       	adiw	r24, 0x08	; 8
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	9e bf       	out	0x3e, r25	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	8d bf       	out	0x3d, r24	; 61
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break(cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1770:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1772:	71 cf       	rjmp	.-286    	; 0x1656 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1774:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1778:	6d e1       	ldi	r22, 0x1D	; 29
    177a:	75 e0       	ldi	r23, 0x05	; 5
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 1c 14 	call	0x2838	; 0x2838 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	8f 90       	pop	r8
    1790:	7f 90       	pop	r7
    1792:	6f 90       	pop	r6
    1794:	08 95       	ret

Disassembly of section .text.CONNECT:

00002fec <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	64 97       	sbiw	r28, 0x14	; 20
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    3000:	21 e0       	ldi	r18, 0x01	; 1
    3002:	ae 01       	movw	r20, r28
    3004:	4f 5f       	subi	r20, 0xFF	; 255
    3006:	5f 4f       	sbci	r21, 0xFF	; 255
    3008:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    300c:	88 23       	and	r24, r24
    300e:	79 f0       	breq	.+30     	; 0x302e <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    3010:	be 01       	movw	r22, r28
    3012:	6f 5f       	subi	r22, 0xFF	; 255
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	80 e8       	ldi	r24, 0x80	; 128
    3018:	2d e3       	ldi	r18, 0x3D	; 61
    301a:	35 e0       	ldi	r19, 0x05	; 5
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    3022:	89 2b       	or	r24, r25
    3024:	19 f4       	brne	.+6      	; 0x302c <CONNECT+0x40>
		return CON_RN2483();
    3026:	0e 94 22 0b 	call	0x1644	; 0x1644 <CON_RN2483>
    302a:	01 c0       	rjmp	.+2      	; 0x302e <CONNECT+0x42>
	}else{
		return false;
    302c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    302e:	64 96       	adiw	r28, 0x14	; 20
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	08 95       	ret

Disassembly of section .text.read_cols:

000021ac <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	a3 97       	sbiw	r28, 0x23	; 35
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    21cc:	63 e2       	ldi	r22, 0x23	; 35
    21ce:	ce 01       	movw	r24, r28
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	0e 94 0a 20 	call	0x4014	; 0x4014 <EM_get_collections>
	res[0]='\0';
    21d6:	f7 01       	movw	r30, r14
    21d8:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    21da:	10 e0       	ldi	r17, 0x00	; 0
    21dc:	35 c0       	rjmp	.+106    	; 0x2248 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    21de:	81 2f       	mov	r24, r17
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	ee 0f       	add	r30, r30
    21ea:	ff 1f       	adc	r31, r31
    21ec:	e8 0f       	add	r30, r24
    21ee:	f9 1f       	adc	r31, r25
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	2c 0f       	add	r18, r28
    21f6:	3d 1f       	adc	r19, r29
    21f8:	e2 0f       	add	r30, r18
    21fa:	f3 1f       	adc	r31, r19
    21fc:	23 81       	ldd	r18, Z+3	; 0x03
    21fe:	2f 93       	push	r18
    2200:	22 81       	ldd	r18, Z+2	; 0x02
    2202:	2f 93       	push	r18
    2204:	21 81       	ldd	r18, Z+1	; 0x01
    2206:	2f 93       	push	r18
    2208:	20 81       	ld	r18, Z
    220a:	2f 93       	push	r18
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	9f 93       	push	r25
    2210:	8f 93       	push	r24
    2212:	84 ef       	ldi	r24, 0xF4	; 244
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	af 93       	push	r26
    221a:	9f 93       	push	r25
    221c:	8f 93       	push	r24
    221e:	0f 2e       	mov	r0, r31
    2220:	f6 e1       	ldi	r31, 0x16	; 22
    2222:	cf 2e       	mov	r12, r31
    2224:	f6 e0       	ldi	r31, 0x06	; 6
    2226:	df 2e       	mov	r13, r31
    2228:	f0 2d       	mov	r31, r0
    222a:	df 92       	push	r13
    222c:	cf 92       	push	r12
    222e:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
		strcat(res, arg);
    2232:	a6 01       	movw	r20, r12
    2234:	60 e8       	ldi	r22, 0x80	; 128
    2236:	c7 01       	movw	r24, r14
    2238:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    223c:	1f 5f       	subi	r17, 0xFF	; 255
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	17 30       	cpi	r17, 0x07	; 7
    224a:	48 f2       	brcs	.-110    	; 0x21de <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    224c:	a3 96       	adiw	r28, 0x23	; 35
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	df 90       	pop	r13
    2264:	cf 90       	pop	r12
    2266:	08 95       	ret

Disassembly of section .text.read_time:

000027a6 <read_time>:

static void read_time(char res[]){
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <read_time+0xa>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <read_time+0xc>
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <read_time+0xe>
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	18 2f       	mov	r17, r24
    27ba:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    27bc:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    27c0:	ce 01       	movw	r24, r28
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	0e 94 cb 0b 	call	0x1796	; 0x1796 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    27c8:	88 23       	and	r24, r24
    27ca:	51 f0       	breq	.+20     	; 0x27e0 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    27cc:	24 e1       	ldi	r18, 0x14	; 20
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a e0       	ldi	r20, 0x0A	; 10
    27d2:	52 e0       	ldi	r21, 0x02	; 2
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	81 2f       	mov	r24, r17
    27d8:	90 2f       	mov	r25, r16
    27da:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
    27de:	21 c0       	rjmp	.+66     	; 0x2822 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    27e0:	59 81       	ldd	r21, Y+1	; 0x01
    27e2:	4a 81       	ldd	r20, Y+2	; 0x02
    27e4:	3b 81       	ldd	r19, Y+3	; 0x03
    27e6:	2c 81       	ldd	r18, Y+4	; 0x04
    27e8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	1f 92       	push	r1
    27ee:	5f 93       	push	r21
    27f0:	1f 92       	push	r1
    27f2:	4f 93       	push	r20
    27f4:	1f 92       	push	r1
    27f6:	3f 93       	push	r19
    27f8:	1f 92       	push	r1
    27fa:	2f 93       	push	r18
    27fc:	1f 92       	push	r1
    27fe:	9f 93       	push	r25
    2800:	1f 92       	push	r1
    2802:	8f 93       	push	r24
    2804:	8e e1       	ldi	r24, 0x1E	; 30
    2806:	92 e0       	ldi	r25, 0x02	; 2
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	af 93       	push	r26
    280c:	9f 93       	push	r25
    280e:	8f 93       	push	r24
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
	}
}
    2822:	26 96       	adiw	r28, 0x06	; 6
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	08 95       	ret

Disassembly of section .text.write_deveui:

000029b8 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    29c6:	22 e0       	ldi	r18, 0x02	; 2
    29c8:	46 e1       	ldi	r20, 0x16	; 22
    29ca:	56 e0       	ldi	r21, 0x06	; 6
    29cc:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    29d0:	c8 2f       	mov	r28, r24
    29d2:	88 23       	and	r24, r24
    29d4:	29 f1       	breq	.+74     	; 0x2a20 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    29d6:	86 e1       	ldi	r24, 0x16	; 22
    29d8:	96 e0       	ldi	r25, 0x06	; 6
    29da:	6c 01       	movw	r12, r24
    29dc:	20 e8       	ldi	r18, 0x80	; 128
    29de:	e2 2e       	mov	r14, r18
    29e0:	8e 2d       	mov	r24, r14
    29e2:	b6 01       	movw	r22, r12
    29e4:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    29e8:	40 97       	sbiw	r24, 0x10	; 16
    29ea:	c9 f4       	brne	.+50     	; 0x2a1e <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    29ec:	8e 2d       	mov	r24, r14
    29ee:	b6 01       	movw	r22, r12
    29f0:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <EM_set_deveui>
    29f4:	c8 2f       	mov	r28, r24
    29f6:	81 11       	cpse	r24, r1
    29f8:	09 c0       	rjmp	.+18     	; 0x2a0c <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    29fa:	27 e0       	ldi	r18, 0x07	; 7
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4c e3       	ldi	r20, 0x3C	; 60
    2a00:	52 e0       	ldi	r21, 0x02	; 2
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	c8 01       	movw	r24, r16
    2a06:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return false;
    2a0a:	0a c0       	rjmp	.+20     	; 0x2a20 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2a0c:	28 e0       	ldi	r18, 0x08	; 8
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	43 e4       	ldi	r20, 0x43	; 67
    2a12:	52 e0       	ldi	r21, 0x02	; 2
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	c8 01       	movw	r24, r16
    2a18:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2a1e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2a20:	8c 2f       	mov	r24, r28
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ef 90       	pop	r14
    2a2a:	df 90       	pop	r13
    2a2c:	cf 90       	pop	r12
    2a2e:	08 95       	ret

Disassembly of section .text.write_appeui:

00002a30 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    2a30:	cf 92       	push	r12
    2a32:	df 92       	push	r13
    2a34:	ef 92       	push	r14
    2a36:	0f 93       	push	r16
    2a38:	1f 93       	push	r17
    2a3a:	cf 93       	push	r28
    2a3c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2a3e:	22 e0       	ldi	r18, 0x02	; 2
    2a40:	46 e1       	ldi	r20, 0x16	; 22
    2a42:	56 e0       	ldi	r21, 0x06	; 6
    2a44:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    2a48:	c8 2f       	mov	r28, r24
    2a4a:	88 23       	and	r24, r24
    2a4c:	29 f1       	breq	.+74     	; 0x2a98 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    2a4e:	86 e1       	ldi	r24, 0x16	; 22
    2a50:	96 e0       	ldi	r25, 0x06	; 6
    2a52:	6c 01       	movw	r12, r24
    2a54:	20 e8       	ldi	r18, 0x80	; 128
    2a56:	e2 2e       	mov	r14, r18
    2a58:	8e 2d       	mov	r24, r14
    2a5a:	b6 01       	movw	r22, r12
    2a5c:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2a60:	40 97       	sbiw	r24, 0x10	; 16
    2a62:	c9 f4       	brne	.+50     	; 0x2a96 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    2a64:	8e 2d       	mov	r24, r14
    2a66:	b6 01       	movw	r22, r12
    2a68:	0e 94 0e 1c 	call	0x381c	; 0x381c <EM_set_appeui>
    2a6c:	c8 2f       	mov	r28, r24
    2a6e:	81 11       	cpse	r24, r1
    2a70:	09 c0       	rjmp	.+18     	; 0x2a84 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    2a72:	27 e0       	ldi	r18, 0x07	; 7
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4c e3       	ldi	r20, 0x3C	; 60
    2a78:	52 e0       	ldi	r21, 0x02	; 2
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return false;
    2a82:	0a c0       	rjmp	.+20     	; 0x2a98 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2a84:	28 e0       	ldi	r18, 0x08	; 8
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	43 e4       	ldi	r20, 0x43	; 67
    2a8a:	52 e0       	ldi	r21, 0x02	; 2
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	c8 01       	movw	r24, r16
    2a90:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2a96:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2a98:	8c 2f       	mov	r24, r28
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ef 90       	pop	r14
    2aa2:	df 90       	pop	r13
    2aa4:	cf 90       	pop	r12
    2aa6:	08 95       	ret

Disassembly of section .text.write_appkey:

00002aa8 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    2aa8:	cf 92       	push	r12
    2aaa:	df 92       	push	r13
    2aac:	ef 92       	push	r14
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2ab6:	22 e0       	ldi	r18, 0x02	; 2
    2ab8:	46 e1       	ldi	r20, 0x16	; 22
    2aba:	56 e0       	ldi	r21, 0x06	; 6
    2abc:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    2ac0:	c8 2f       	mov	r28, r24
    2ac2:	88 23       	and	r24, r24
    2ac4:	29 f1       	breq	.+74     	; 0x2b10 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    2ac6:	86 e1       	ldi	r24, 0x16	; 22
    2ac8:	96 e0       	ldi	r25, 0x06	; 6
    2aca:	6c 01       	movw	r12, r24
    2acc:	20 e8       	ldi	r18, 0x80	; 128
    2ace:	e2 2e       	mov	r14, r18
    2ad0:	8e 2d       	mov	r24, r14
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2ad8:	80 97       	sbiw	r24, 0x20	; 32
    2ada:	c9 f4       	brne	.+50     	; 0x2b0e <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2adc:	8e 2d       	mov	r24, r14
    2ade:	b6 01       	movw	r22, r12
    2ae0:	0e 94 2b 1c 	call	0x3856	; 0x3856 <EM_set_appkey>
    2ae4:	c8 2f       	mov	r28, r24
    2ae6:	81 11       	cpse	r24, r1
    2ae8:	09 c0       	rjmp	.+18     	; 0x2afc <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2aea:	27 e0       	ldi	r18, 0x07	; 7
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4c e3       	ldi	r20, 0x3C	; 60
    2af0:	52 e0       	ldi	r21, 0x02	; 2
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	c8 01       	movw	r24, r16
    2af6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return false;
    2afa:	0a c0       	rjmp	.+20     	; 0x2b10 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2afc:	28 e0       	ldi	r18, 0x08	; 8
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	43 e4       	ldi	r20, 0x43	; 67
    2b02:	52 e0       	ldi	r21, 0x02	; 2
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	c8 01       	movw	r24, r16
    2b08:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    2b0c:	01 c0       	rjmp	.+2      	; 0x2b10 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    2b0e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2b10:	8c 2f       	mov	r24, r28
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ef 90       	pop	r14
    2b1a:	df 90       	pop	r13
    2b1c:	cf 90       	pop	r12
    2b1e:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

0000326a <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3272:	22 e0       	ldi	r18, 0x02	; 2
    3274:	46 e1       	ldi	r20, 0x16	; 22
    3276:	56 e0       	ldi	r21, 0x06	; 6
    3278:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    327c:	c8 2f       	mov	r28, r24
    327e:	88 23       	and	r24, r24
    3280:	a9 f0       	breq	.+42     	; 0x32ac <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    3282:	86 e1       	ldi	r24, 0x16	; 22
    3284:	96 e0       	ldi	r25, 0x06	; 6
    3286:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <is_float>
    328a:	c8 2f       	mov	r28, r24
    328c:	88 23       	and	r24, r24
    328e:	71 f0       	breq	.+28     	; 0x32ac <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    3290:	86 e1       	ldi	r24, 0x16	; 22
    3292:	96 e0       	ldi	r25, 0x06	; 6
    3294:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <str2flaot>
	EM_set_ppmfactor(val);
    3298:	0e 94 4a 20 	call	0x4094	; 0x4094 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    329c:	28 e0       	ldi	r18, 0x08	; 8
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	43 e4       	ldi	r20, 0x43	; 67
    32a2:	52 e0       	ldi	r21, 0x02	; 2
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	c8 01       	movw	r24, r16
    32a8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
}
    32ac:	8c 2f       	mov	r24, r28
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	08 95       	ret

Disassembly of section .text.write_RRL:

000032b6 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    32b6:	0f 93       	push	r16
    32b8:	1f 93       	push	r17
    32ba:	cf 93       	push	r28
    32bc:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    32be:	22 e0       	ldi	r18, 0x02	; 2
    32c0:	46 e1       	ldi	r20, 0x16	; 22
    32c2:	56 e0       	ldi	r21, 0x06	; 6
    32c4:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    32c8:	c8 2f       	mov	r28, r24
    32ca:	88 23       	and	r24, r24
    32cc:	a9 f0       	breq	.+42     	; 0x32f8 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    32ce:	86 e1       	ldi	r24, 0x16	; 22
    32d0:	96 e0       	ldi	r25, 0x06	; 6
    32d2:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <is_float>
    32d6:	c8 2f       	mov	r28, r24
    32d8:	88 23       	and	r24, r24
    32da:	71 f0       	breq	.+28     	; 0x32f8 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    32dc:	86 e1       	ldi	r24, 0x16	; 22
    32de:	96 e0       	ldi	r25, 0x06	; 6
    32e0:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <str2flaot>
	EM_set_RRL(val);
    32e4:	0e 94 51 20 	call	0x40a2	; 0x40a2 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    32e8:	28 e0       	ldi	r18, 0x08	; 8
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	43 e4       	ldi	r20, 0x43	; 67
    32ee:	52 e0       	ldi	r21, 0x02	; 2
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	c8 01       	movw	r24, r16
    32f4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
}
    32f8:	8c 2f       	mov	r24, r28
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	08 95       	ret

Disassembly of section .text.write_VCC:

00003302 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    330a:	22 e0       	ldi	r18, 0x02	; 2
    330c:	46 e1       	ldi	r20, 0x16	; 22
    330e:	56 e0       	ldi	r21, 0x06	; 6
    3310:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    3314:	c8 2f       	mov	r28, r24
    3316:	88 23       	and	r24, r24
    3318:	a9 f0       	breq	.+42     	; 0x3344 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    331a:	86 e1       	ldi	r24, 0x16	; 22
    331c:	96 e0       	ldi	r25, 0x06	; 6
    331e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <is_float>
    3322:	c8 2f       	mov	r28, r24
    3324:	88 23       	and	r24, r24
    3326:	71 f0       	breq	.+28     	; 0x3344 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    3328:	86 e1       	ldi	r24, 0x16	; 22
    332a:	96 e0       	ldi	r25, 0x06	; 6
    332c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <str2flaot>
	EM_set_Vcc(val);
    3330:	0e 94 58 20 	call	0x40b0	; 0x40b0 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    3334:	28 e0       	ldi	r18, 0x08	; 8
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	43 e4       	ldi	r20, 0x43	; 67
    333a:	52 e0       	ldi	r21, 0x02	; 2
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	c8 01       	movw	r24, r16
    3340:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
}
    3344:	8c 2f       	mov	r24, r28
    3346:	cf 91       	pop	r28
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	08 95       	ret

Disassembly of section .text.get_time_par:

000039da <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	00 d0       	rcall	.+0      	; 0x39e0 <get_time_par+0x6>
    39e0:	1f 92       	push	r1
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    39e6:	fc 01       	movw	r30, r24
    39e8:	e6 0f       	add	r30, r22
    39ea:	f1 1d       	adc	r31, r1
    39ec:	80 81       	ld	r24, Z
    39ee:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    39f0:	81 81       	ldd	r24, Z+1	; 0x01
    39f2:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    39f4:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    39f6:	be 01       	movw	r22, r28
    39f8:	6f 5f       	subi	r22, 0xFF	; 255
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	80 e8       	ldi	r24, 0x80	; 128
    39fe:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
}
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	08 95       	ret

Disassembly of section .text.write_cols:

00001a04 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1a04:	4f 92       	push	r4
    1a06:	5f 92       	push	r5
    1a08:	6f 92       	push	r6
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	af 92       	push	r10
    1a10:	bf 92       	push	r11
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	a3 97       	sbiw	r28, 0x23	; 35
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	3b 01       	movw	r6, r22
    1a34:	88 2e       	mov	r8, r24
    1a36:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    1a38:	22 e0       	ldi	r18, 0x02	; 2
    1a3a:	46 e1       	ldi	r20, 0x16	; 22
    1a3c:	56 e0       	ldi	r21, 0x06	; 6
    1a3e:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    1a42:	18 2f       	mov	r17, r24
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <write_cols+0x46>
    1a48:	5d c0       	rjmp	.+186    	; 0x1b04 <write_cols+0x100>
	index=atoi(arg);
    1a4a:	86 e1       	ldi	r24, 0x16	; 22
    1a4c:	96 e0       	ldi	r25, 0x06	; 6
    1a4e:	6c 01       	movw	r12, r24
    1a50:	20 e8       	ldi	r18, 0x80	; 128
    1a52:	e2 2e       	mov	r14, r18
    1a54:	8e 2d       	mov	r24, r14
    1a56:	b6 01       	movw	r22, r12
    1a58:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
	if(index<1 || index>7) return false;
    1a5c:	0f ef       	ldi	r16, 0xFF	; 255
    1a5e:	08 0f       	add	r16, r24
    1a60:	07 30       	cpi	r16, 0x07	; 7
    1a62:	08 f0       	brcs	.+2      	; 0x1a66 <write_cols+0x62>
    1a64:	4a c0       	rjmp	.+148    	; 0x1afa <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    1a66:	23 e0       	ldi	r18, 0x03	; 3
    1a68:	46 e1       	ldi	r20, 0x16	; 22
    1a6a:	56 e0       	ldi	r21, 0x06	; 6
    1a6c:	88 2d       	mov	r24, r8
    1a6e:	b3 01       	movw	r22, r6
    1a70:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    1a74:	18 2f       	mov	r17, r24
    1a76:	88 23       	and	r24, r24
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <write_cols+0x78>
    1a7a:	44 c0       	rjmp	.+136    	; 0x1b04 <write_cols+0x100>
	samplings=atoi(arg);
    1a7c:	8e 2d       	mov	r24, r14
    1a7e:	b6 01       	movw	r22, r12
    1a80:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
    1a84:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1a86:	02 97       	sbiw	r24, 0x02	; 2
    1a88:	8b 32       	cpi	r24, 0x2B	; 43
    1a8a:	91 40       	sbci	r25, 0x01	; 1
    1a8c:	c0 f5       	brcc	.+112    	; 0x1afe <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1a8e:	24 e0       	ldi	r18, 0x04	; 4
    1a90:	46 e1       	ldi	r20, 0x16	; 22
    1a92:	56 e0       	ldi	r21, 0x06	; 6
    1a94:	88 2d       	mov	r24, r8
    1a96:	b3 01       	movw	r22, r6
    1a98:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    1a9c:	18 2f       	mov	r17, r24
    1a9e:	88 23       	and	r24, r24
    1aa0:	89 f1       	breq	.+98     	; 0x1b04 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1aa2:	8e 2d       	mov	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
    1aaa:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1aac:	02 97       	sbiw	r24, 0x02	; 2
    1aae:	87 35       	cpi	r24, 0x57	; 87
    1ab0:	92 40       	sbci	r25, 0x02	; 2
    1ab2:	38 f5       	brcc	.+78     	; 0x1b02 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1ab4:	63 e2       	ldi	r22, 0x23	; 35
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	7c 01       	movw	r14, r24
    1abc:	0e 94 0a 20 	call	0x4014	; 0x4014 <EM_get_collections>
	
	cols[index].samplings=samplings;
    1ac0:	80 2f       	mov	r24, r16
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ee 0f       	add	r30, r30
    1ac8:	ff 1f       	adc	r31, r31
    1aca:	ee 0f       	add	r30, r30
    1acc:	ff 1f       	adc	r31, r31
    1ace:	e8 0f       	add	r30, r24
    1ad0:	f9 1f       	adc	r31, r25
    1ad2:	ee 0d       	add	r30, r14
    1ad4:	ff 1d       	adc	r31, r15
    1ad6:	51 82       	std	Z+1, r5	; 0x01
    1ad8:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1ada:	d3 82       	std	Z+3, r13	; 0x03
    1adc:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1ade:	b7 01       	movw	r22, r14
    1ae0:	80 e8       	ldi	r24, 0x80	; 128
    1ae2:	43 e2       	ldi	r20, 0x23	; 35
    1ae4:	0e 94 5f 20 	call	0x40be	; 0x40be <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1ae8:	28 e0       	ldi	r18, 0x08	; 8
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	43 e4       	ldi	r20, 0x43	; 67
    1aee:	52 e0       	ldi	r21, 0x02	; 2
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	c5 01       	movw	r24, r10
    1af4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;	
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    1afa:	10 e0       	ldi	r17, 0x00	; 0
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1b02:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1b04:	81 2f       	mov	r24, r17
    1b06:	a3 96       	adiw	r28, 0x23	; 35
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	cf 90       	pop	r12
    1b22:	bf 90       	pop	r11
    1b24:	af 90       	pop	r10
    1b26:	8f 90       	pop	r8
    1b28:	7f 90       	pop	r7
    1b2a:	6f 90       	pop	r6
    1b2c:	5f 90       	pop	r5
    1b2e:	4f 90       	pop	r4
    1b30:	08 95       	ret

Disassembly of section .text.write_heat_up:

0000334e <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3356:	22 e0       	ldi	r18, 0x02	; 2
    3358:	46 e1       	ldi	r20, 0x16	; 22
    335a:	56 e0       	ldi	r21, 0x06	; 6
    335c:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    3360:	c8 2f       	mov	r28, r24
    3362:	88 23       	and	r24, r24
    3364:	a9 f0       	breq	.+42     	; 0x3390 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    3366:	66 e1       	ldi	r22, 0x16	; 22
    3368:	76 e0       	ldi	r23, 0x06	; 6
    336a:	80 e8       	ldi	r24, 0x80	; 128
    336c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
	
	if(val<1 || val>200) return false;
    3370:	9f ef       	ldi	r25, 0xFF	; 255
    3372:	98 0f       	add	r25, r24
    3374:	98 3c       	cpi	r25, 0xC8	; 200
    3376:	58 f4       	brcc	.+22     	; 0x338e <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    3378:	0e 94 97 20 	call	0x412e	; 0x412e <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    337c:	28 e0       	ldi	r18, 0x08	; 8
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	43 e4       	ldi	r20, 0x43	; 67
    3382:	52 e0       	ldi	r21, 0x02	; 2
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	c8 01       	movw	r24, r16
    3388:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
    338c:	01 c0       	rjmp	.+2      	; 0x3390 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    338e:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3390:	8c 2f       	mov	r24, r28
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

Disassembly of section .text.write_air_pump:

000030e4 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	cf 93       	push	r28
    30ea:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    30ec:	22 e0       	ldi	r18, 0x02	; 2
    30ee:	46 e1       	ldi	r20, 0x16	; 22
    30f0:	56 e0       	ldi	r21, 0x06	; 6
    30f2:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    30f6:	c8 2f       	mov	r28, r24
    30f8:	88 23       	and	r24, r24
    30fa:	b9 f0       	breq	.+46     	; 0x312a <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    30fc:	66 e1       	ldi	r22, 0x16	; 22
    30fe:	76 e0       	ldi	r23, 0x06	; 6
    3100:	80 e8       	ldi	r24, 0x80	; 128
    3102:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
	
	if(val<5 || val>1000) return false;
    3106:	9c 01       	movw	r18, r24
    3108:	25 50       	subi	r18, 0x05	; 5
    310a:	31 09       	sbc	r19, r1
    310c:	24 3e       	cpi	r18, 0xE4	; 228
    310e:	33 40       	sbci	r19, 0x03	; 3
    3110:	58 f4       	brcc	.+22     	; 0x3128 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    3112:	0e 94 a3 20 	call	0x4146	; 0x4146 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    3116:	28 e0       	ldi	r18, 0x08	; 8
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	43 e4       	ldi	r20, 0x43	; 67
    311c:	52 e0       	ldi	r21, 0x02	; 2
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	c8 01       	movw	r24, r16
    3122:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
    3126:	01 c0       	rjmp	.+2      	; 0x312a <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    3128:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    312a:	8c 2f       	mov	r24, r28
    312c:	cf 91       	pop	r28
    312e:	1f 91       	pop	r17
    3130:	0f 91       	pop	r16
    3132:	08 95       	ret

Disassembly of section .text.write_sp_interval:

0000339a <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    33a2:	22 e0       	ldi	r18, 0x02	; 2
    33a4:	46 e1       	ldi	r20, 0x16	; 22
    33a6:	56 e0       	ldi	r21, 0x06	; 6
    33a8:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    33ac:	c8 2f       	mov	r28, r24
    33ae:	88 23       	and	r24, r24
    33b0:	a9 f0       	breq	.+42     	; 0x33dc <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    33b2:	66 e1       	ldi	r22, 0x16	; 22
    33b4:	76 e0       	ldi	r23, 0x06	; 6
    33b6:	80 e8       	ldi	r24, 0x80	; 128
    33b8:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
	
	if(val<6 || val>24) return false;
    33bc:	9a ef       	ldi	r25, 0xFA	; 250
    33be:	98 0f       	add	r25, r24
    33c0:	93 31       	cpi	r25, 0x13	; 19
    33c2:	58 f4       	brcc	.+22     	; 0x33da <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    33c4:	0e 94 af 20 	call	0x415e	; 0x415e <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    33c8:	28 e0       	ldi	r18, 0x08	; 8
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	43 e4       	ldi	r20, 0x43	; 67
    33ce:	52 e0       	ldi	r21, 0x02	; 2
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	c8 01       	movw	r24, r16
    33d4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    33da:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    33dc:	8c 2f       	mov	r24, r28
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	08 95       	ret

Disassembly of section .text.write_reset:

00001e4a <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	a3 97       	sbiw	r28, 0x23	; 35
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    1e64:	6b e4       	ldi	r22, 0x4B	; 75
    1e66:	72 e0       	ldi	r23, 0x02	; 2
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    1e6e:	6b e4       	ldi	r22, 0x4B	; 75
    1e70:	72 e0       	ldi	r23, 0x02	; 2
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0e 94 0e 1c 	call	0x381c	; 0x381c <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1e78:	6c e5       	ldi	r22, 0x5C	; 92
    1e7a:	72 e0       	ldi	r23, 0x02	; 2
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	0e 94 2b 1c 	call	0x3856	; 0x3856 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	80 e8       	ldi	r24, 0x80	; 128
    1e88:	9f e3       	ldi	r25, 0x3F	; 63
    1e8a:	0e 94 4a 20 	call	0x4094	; 0x4094 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	70 e4       	ldi	r23, 0x40	; 64
    1e92:	8c e1       	ldi	r24, 0x1C	; 28
    1e94:	95 e4       	ldi	r25, 0x45	; 69
    1e96:	0e 94 51 20 	call	0x40a2	; 0x40a2 <EM_set_RRL>
	EM_set_Vcc(5.00);
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	80 ea       	ldi	r24, 0xA0	; 160
    1ea0:	90 e4       	ldi	r25, 0x40	; 64
    1ea2:	0e 94 58 20 	call	0x40b0	; 0x40b0 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	0e 94 97 20 	call	0x412e	; 0x412e <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    1eac:	85 e0       	ldi	r24, 0x05	; 5
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 a3 20 	call	0x4146	; 0x4146 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1eb4:	86 e0       	ldi	r24, 0x06	; 6
    1eb6:	0e 94 af 20 	call	0x415e	; 0x415e <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	1a c0       	rjmp	.+52     	; 0x1ef2 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1ebe:	e8 2f       	mov	r30, r24
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	9f 01       	movw	r18, r30
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	22 0f       	add	r18, r18
    1eca:	33 1f       	adc	r19, r19
    1ecc:	e2 0f       	add	r30, r18
    1ece:	f3 1f       	adc	r31, r19
    1ed0:	21 e0       	ldi	r18, 0x01	; 1
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	2c 0f       	add	r18, r28
    1ed6:	3d 1f       	adc	r19, r29
    1ed8:	e2 0f       	add	r30, r18
    1eda:	f3 1f       	adc	r31, r19
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1ee0:	22 e0       	ldi	r18, 0x02	; 2
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	31 83       	std	Z+1, r19	; 0x01
    1ee6:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    1ee8:	23 e0       	ldi	r18, 0x03	; 3
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	33 83       	std	Z+3, r19	; 0x03
    1eee:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	87 30       	cpi	r24, 0x07	; 7
    1ef4:	20 f3       	brcs	.-56     	; 0x1ebe <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1ef6:	be 01       	movw	r22, r28
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	80 e8       	ldi	r24, 0x80	; 128
    1efe:	43 e2       	ldi	r20, 0x23	; 35
    1f00:	0e 94 5f 20 	call	0x40be	; 0x40be <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1f04:	23 e1       	ldi	r18, 0x13	; 19
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4d e7       	ldi	r20, 0x7D	; 125
    1f0a:	52 e0       	ldi	r21, 0x02	; 2
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	c8 01       	movw	r24, r16
    1f10:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
}
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	a3 96       	adiw	r28, 0x23	; 35
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret

Disassembly of section .text.write_time:

00001d4c <write_time>:

static bool write_time(const char cmd[], char res[]){
    1d4c:	6f 92       	push	r6
    1d4e:	7f 92       	push	r7
    1d50:	8f 92       	push	r8
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <write_time+0x16>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <write_time+0x18>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <write_time+0x1a>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	3b 01       	movw	r6, r22
    1d6c:	88 2e       	mov	r8, r24
    1d6e:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    1d70:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    1d74:	22 e0       	ldi	r18, 0x02	; 2
    1d76:	46 e1       	ldi	r20, 0x16	; 22
    1d78:	56 e0       	ldi	r21, 0x06	; 6
    1d7a:	88 2d       	mov	r24, r8
    1d7c:	b3 01       	movw	r22, r6
    1d7e:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    1d82:	18 2f       	mov	r17, r24
    1d84:	88 23       	and	r24, r24
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <write_time+0x3e>
    1d88:	4e c0       	rjmp	.+156    	; 0x1e26 <write_time+0xda>
	if(strlen(arg)!=17){
    1d8a:	66 e1       	ldi	r22, 0x16	; 22
    1d8c:	76 e0       	ldi	r23, 0x06	; 6
    1d8e:	80 e8       	ldi	r24, 0x80	; 128
    1d90:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    1d94:	41 97       	sbiw	r24, 0x11	; 17
    1d96:	49 f0       	breq	.+18     	; 0x1daa <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    1d98:	25 e2       	ldi	r18, 0x25	; 37
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e9       	ldi	r20, 0x90	; 144
    1d9e:	52 e0       	ldi	r21, 0x02	; 2
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	c7 01       	movw	r24, r14
    1da4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    1da8:	3e c0       	rjmp	.+124    	; 0x1e26 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	86 e1       	ldi	r24, 0x16	; 22
    1dae:	96 e0       	ldi	r25, 0x06	; 6
    1db0:	0e 94 ed 1c 	call	0x39da	; 0x39da <get_time_par>
    1db4:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    1db6:	63 e0       	ldi	r22, 0x03	; 3
    1db8:	86 e1       	ldi	r24, 0x16	; 22
    1dba:	96 e0       	ldi	r25, 0x06	; 6
    1dbc:	0e 94 ed 1c 	call	0x39da	; 0x39da <get_time_par>
    1dc0:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    1dc2:	66 e0       	ldi	r22, 0x06	; 6
    1dc4:	86 e1       	ldi	r24, 0x16	; 22
    1dc6:	96 e0       	ldi	r25, 0x06	; 6
    1dc8:	0e 94 ed 1c 	call	0x39da	; 0x39da <get_time_par>
    1dcc:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    1dce:	69 e0       	ldi	r22, 0x09	; 9
    1dd0:	86 e1       	ldi	r24, 0x16	; 22
    1dd2:	96 e0       	ldi	r25, 0x06	; 6
    1dd4:	0e 94 ed 1c 	call	0x39da	; 0x39da <get_time_par>
    1dd8:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    1dda:	6c e0       	ldi	r22, 0x0C	; 12
    1ddc:	86 e1       	ldi	r24, 0x16	; 22
    1dde:	96 e0       	ldi	r25, 0x06	; 6
    1de0:	0e 94 ed 1c 	call	0x39da	; 0x39da <get_time_par>
    1de4:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    1de6:	6f e0       	ldi	r22, 0x0F	; 15
    1de8:	86 e1       	ldi	r24, 0x16	; 22
    1dea:	96 e0       	ldi	r25, 0x06	; 6
    1dec:	0e 94 ed 1c 	call	0x39da	; 0x39da <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    1df0:	48 2f       	mov	r20, r24
    1df2:	5d 2d       	mov	r21, r13
    1df4:	60 2f       	mov	r22, r16
    1df6:	76 2d       	mov	r23, r6
    1df8:	87 2d       	mov	r24, r7
    1dfa:	98 2d       	mov	r25, r8
    1dfc:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    1e00:	88 23       	and	r24, r24
    1e02:	49 f0       	breq	.+18     	; 0x1e16 <write_time+0xca>
		strcpy(res, "Failed to set time");
    1e04:	23 e1       	ldi	r18, 0x13	; 19
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	45 eb       	ldi	r20, 0xB5	; 181
    1e0a:	52 e0       	ldi	r21, 0x02	; 2
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	c7 01       	movw	r24, r14
    1e10:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    1e16:	28 e0       	ldi	r18, 0x08	; 8
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	43 e4       	ldi	r20, 0x43	; 67
    1e1c:	52 e0       	ldi	r21, 0x02	; 2
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	c7 01       	movw	r24, r14
    1e22:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
	return true;
}
    1e26:	81 2f       	mov	r24, r17
    1e28:	26 96       	adiw	r28, 0x06	; 6
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	df 90       	pop	r13
    1e42:	8f 90       	pop	r8
    1e44:	7f 90       	pop	r7
    1e46:	6f 90       	pop	r6
    1e48:	08 95       	ret

Disassembly of section .text.handle_read:

00000ff2 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	68 97       	sbiw	r28, 0x18	; 24
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	6b 01       	movw	r12, r22
    1014:	e8 2e       	mov	r14, r24
    1016:	f4 2e       	mov	r15, r20
    1018:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	ae 01       	movw	r20, r28
    101e:	4f 5f       	subi	r20, 0xFF	; 255
    1020:	5f 4f       	sbci	r21, 0xFF	; 255
    1022:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    1026:	18 2f       	mov	r17, r24
    1028:	88 23       	and	r24, r24
    102a:	09 f4       	brne	.+2      	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    102c:	23 c1       	rjmp	.+582    	; 0x1274 <__stack+0x175>
    102e:	8e 2d       	mov	r24, r14
    1030:	b6 01       	movw	r22, r12
    1032:	0e 94 49 18 	call	0x3092	; 0x3092 <count_parameters>
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	09 f4       	brne	.+2      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    103a:	1b c1       	rjmp	.+566    	; 0x1272 <__stack+0x173>
	
	if (strcmp(par, RW_DEVEUI)==0)
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	6c 01       	movw	r12, r24
    1042:	20 e8       	ldi	r18, 0x80	; 128
    1044:	e2 2e       	mov	r14, r18
    1046:	28 ec       	ldi	r18, 0xC8	; 200
    1048:	32 e0       	ldi	r19, 0x02	; 2
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	8e 2d       	mov	r24, r14
    104e:	b6 01       	movw	r22, r12
    1050:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1054:	89 2b       	or	r24, r25
    1056:	29 f4       	brne	.+10     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
	{
		EM_get_deveui(res);
    1058:	8f 2d       	mov	r24, r15
    105a:	90 2f       	mov	r25, r16
    105c:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <EM_get_deveui>
    1060:	09 c1       	rjmp	.+530    	; 0x1274 <__stack+0x175>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1062:	2f ec       	ldi	r18, 0xCF	; 207
    1064:	32 e0       	ldi	r19, 0x02	; 2
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	8e 2d       	mov	r24, r14
    106a:	b6 01       	movw	r22, r12
    106c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1070:	89 2b       	or	r24, r25
    1072:	29 f4       	brne	.+10     	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
	{
		EM_get_appeui(res);
    1074:	8f 2d       	mov	r24, r15
    1076:	90 2f       	mov	r25, r16
    1078:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <EM_get_appeui>
    107c:	fb c0       	rjmp	.+502    	; 0x1274 <__stack+0x175>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    107e:	26 ed       	ldi	r18, 0xD6	; 214
    1080:	32 e0       	ldi	r19, 0x02	; 2
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	8e 2d       	mov	r24, r14
    1086:	b6 01       	movw	r22, r12
    1088:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    108c:	89 2b       	or	r24, r25
    108e:	29 f4       	brne	.+10     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
	{
		EM_get_appkey(res);
    1090:	8f 2d       	mov	r24, r15
    1092:	90 2f       	mov	r25, r16
    1094:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <EM_get_appkey>
    1098:	ed c0       	rjmp	.+474    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    109a:	2d ed       	ldi	r18, 0xDD	; 221
    109c:	32 e0       	ldi	r19, 0x02	; 2
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	8e 2d       	mov	r24, r14
    10a2:	b6 01       	movw	r22, r12
    10a4:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    10a8:	89 2b       	or	r24, r25
    10aa:	e1 f4       	brne	.+56     	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
	{
		EM_get_ppmfactor(&val);
    10ac:	ce 01       	movw	r24, r28
    10ae:	45 96       	adiw	r24, 0x15	; 21
    10b0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    10b4:	88 8d       	ldd	r24, Y+24	; 0x18
    10b6:	8f 93       	push	r24
    10b8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ba:	8f 93       	push	r24
    10bc:	8e 89       	ldd	r24, Y+22	; 0x16
    10be:	8f 93       	push	r24
    10c0:	8d 89       	ldd	r24, Y+21	; 0x15
    10c2:	8f 93       	push	r24
    10c4:	82 ee       	ldi	r24, 0xE2	; 226
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	af 93       	push	r26
    10cc:	9f 93       	push	r25
    10ce:	8f 93       	push	r24
    10d0:	0f 93       	push	r16
    10d2:	ff 92       	push	r15
    10d4:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	c8 c0       	rjmp	.+400    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_RRL)==0)
    10e4:	27 ee       	ldi	r18, 0xE7	; 231
    10e6:	32 e0       	ldi	r19, 0x02	; 2
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	8e 2d       	mov	r24, r14
    10ec:	b6 01       	movw	r22, r12
    10ee:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    10f2:	89 2b       	or	r24, r25
    10f4:	e1 f4       	brne	.+56     	; 0x112e <__stack+0x2f>
	{
		EM_get_RRL(&val);
    10f6:	ce 01       	movw	r24, r28
    10f8:	45 96       	adiw	r24, 0x15	; 21
    10fa:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    10fe:	88 8d       	ldd	r24, Y+24	; 0x18
    1100:	8f 93       	push	r24
    1102:	8f 89       	ldd	r24, Y+23	; 0x17
    1104:	8f 93       	push	r24
    1106:	8e 89       	ldd	r24, Y+22	; 0x16
    1108:	8f 93       	push	r24
    110a:	8d 89       	ldd	r24, Y+21	; 0x15
    110c:	8f 93       	push	r24
    110e:	82 ee       	ldi	r24, 0xE2	; 226
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	af 93       	push	r26
    1116:	9f 93       	push	r25
    1118:	8f 93       	push	r24
    111a:	0f 93       	push	r16
    111c:	ff 92       	push	r15
    111e:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	a3 c0       	rjmp	.+326    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_VCC)==0)
    112e:	2c ee       	ldi	r18, 0xEC	; 236
    1130:	32 e0       	ldi	r19, 0x02	; 2
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	8e 2d       	mov	r24, r14
    1136:	b6 01       	movw	r22, r12
    1138:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    113c:	89 2b       	or	r24, r25
    113e:	e1 f4       	brne	.+56     	; 0x1178 <__stack+0x79>
	{
		EM_get_Vcc(&val);
    1140:	ce 01       	movw	r24, r28
    1142:	45 96       	adiw	r24, 0x15	; 21
    1144:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1148:	88 8d       	ldd	r24, Y+24	; 0x18
    114a:	8f 93       	push	r24
    114c:	8f 89       	ldd	r24, Y+23	; 0x17
    114e:	8f 93       	push	r24
    1150:	8e 89       	ldd	r24, Y+22	; 0x16
    1152:	8f 93       	push	r24
    1154:	8d 89       	ldd	r24, Y+21	; 0x15
    1156:	8f 93       	push	r24
    1158:	82 ee       	ldi	r24, 0xE2	; 226
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	af 93       	push	r26
    1160:	9f 93       	push	r25
    1162:	8f 93       	push	r24
    1164:	0f 93       	push	r16
    1166:	ff 92       	push	r15
    1168:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	7e c0       	rjmp	.+252    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_COLS)==0)
    1178:	21 ef       	ldi	r18, 0xF1	; 241
    117a:	32 e0       	ldi	r19, 0x02	; 2
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	8e 2d       	mov	r24, r14
    1180:	b6 01       	movw	r22, r12
    1182:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1186:	89 2b       	or	r24, r25
    1188:	29 f4       	brne	.+10     	; 0x1194 <__stack+0x95>
	{
		read_cols(res);
    118a:	8f 2d       	mov	r24, r15
    118c:	90 2f       	mov	r25, r16
    118e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <read_cols>
    1192:	70 c0       	rjmp	.+224    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1194:	26 ef       	ldi	r18, 0xF6	; 246
    1196:	32 e0       	ldi	r19, 0x02	; 2
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	8e 2d       	mov	r24, r14
    119c:	b6 01       	movw	r22, r12
    119e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    11a2:	89 2b       	or	r24, r25
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <__stack+0xcf>
	{
		uint8_t val=EM_get_heat_up_time();
    11a6:	0e 94 9d 20 	call	0x413a	; 0x413a <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    11aa:	1f 92       	push	r1
    11ac:	8f 93       	push	r24
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	af 93       	push	r26
    11b6:	9f 93       	push	r25
    11b8:	8f 93       	push	r24
    11ba:	0f 93       	push	r16
    11bc:	ff 92       	push	r15
    11be:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	53 c0       	rjmp	.+166    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    11ce:	22 e1       	ldi	r18, 0x12	; 18
    11d0:	33 e0       	ldi	r19, 0x03	; 3
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	8e 2d       	mov	r24, r14
    11d6:	b6 01       	movw	r22, r12
    11d8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    11dc:	89 2b       	or	r24, r25
    11de:	a1 f4       	brne	.+40     	; 0x1208 <__stack+0x109>
	{
		uint16_t val=EM_get_air_pump_time();
    11e0:	0e 94 a9 20 	call	0x4152	; 0x4152 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    11e4:	9f 93       	push	r25
    11e6:	8f 93       	push	r24
    11e8:	8d e1       	ldi	r24, 0x1D	; 29
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	af 93       	push	r26
    11f0:	9f 93       	push	r25
    11f2:	8f 93       	push	r24
    11f4:	0f 93       	push	r16
    11f6:	ff 92       	push	r15
    11f8:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	36 c0       	rjmp	.+108    	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1208:	20 e3       	ldi	r18, 0x30	; 48
    120a:	33 e0       	ldi	r19, 0x03	; 3
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	8e 2d       	mov	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1216:	89 2b       	or	r24, r25
    1218:	a1 f4       	brne	.+40     	; 0x1242 <__stack+0x143>
	{
		uint8_t val=EM_get_sp_interval();
    121a:	0e 94 b5 20 	call	0x416a	; 0x416a <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    121e:	1f 92       	push	r1
    1220:	8f 93       	push	r24
    1222:	8c e3       	ldi	r24, 0x3C	; 60
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	af 93       	push	r26
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	0f 93       	push	r16
    1230:	ff 92       	push	r15
    1232:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	19 c0       	rjmp	.+50     	; 0x1274 <__stack+0x175>
	}
	else if(strcmp(par, RW_TIME)==0)
    1242:	2b e5       	ldi	r18, 0x5B	; 91
    1244:	33 e0       	ldi	r19, 0x03	; 3
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	8e 2d       	mov	r24, r14
    124a:	b6 01       	movw	r22, r12
    124c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1250:	89 2b       	or	r24, r25
    1252:	29 f4       	brne	.+10     	; 0x125e <__stack+0x15f>
	{
		read_time(res);
    1254:	8f 2d       	mov	r24, r15
    1256:	90 2f       	mov	r25, r16
    1258:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <read_time>
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <__stack+0x175>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    125e:	26 e1       	ldi	r18, 0x16	; 22
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e6       	ldi	r20, 0x60	; 96
    1264:	53 e0       	ldi	r21, 0x03	; 3
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	8f 2d       	mov	r24, r15
    126a:	90 2f       	mov	r25, r16
    126c:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <__stack+0x175>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1272:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1274:	81 2f       	mov	r24, r17
    1276:	68 96       	adiw	r28, 0x18	; 24
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	08 95       	ret

Disassembly of section .text.handle_write:

00001294 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1294:	6f 92       	push	r6
    1296:	7f 92       	push	r7
    1298:	8f 92       	push	r8
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	64 97       	sbiw	r28, 0x14	; 20
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	3b 01       	movw	r6, r22
    12bc:	88 2e       	mov	r8, r24
    12be:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	ae 01       	movw	r20, r28
    12c4:	4f 5f       	subi	r20, 0xFF	; 255
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    12cc:	18 2f       	mov	r17, r24
    12ce:	88 23       	and	r24, r24
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <handle_write+0x40>
    12d2:	cd c0       	rjmp	.+410    	; 0x146e <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    12d4:	ce 01       	movw	r24, r28
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	6c 01       	movw	r12, r24
    12da:	20 e8       	ldi	r18, 0x80	; 128
    12dc:	e2 2e       	mov	r14, r18
    12de:	28 ec       	ldi	r18, 0xC8	; 200
    12e0:	32 e0       	ldi	r19, 0x02	; 2
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	8e 2d       	mov	r24, r14
    12e6:	b6 01       	movw	r22, r12
    12e8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    12ec:	89 2b       	or	r24, r25
    12ee:	39 f4       	brne	.+14     	; 0x12fe <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    12f0:	a5 01       	movw	r20, r10
    12f2:	88 2d       	mov	r24, r8
    12f4:	b3 01       	movw	r22, r6
    12f6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <write_deveui>
    12fa:	18 2f       	mov	r17, r24
    12fc:	b8 c0       	rjmp	.+368    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    12fe:	2f ec       	ldi	r18, 0xCF	; 207
    1300:	32 e0       	ldi	r19, 0x02	; 2
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	8e 2d       	mov	r24, r14
    1306:	b6 01       	movw	r22, r12
    1308:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    130c:	89 2b       	or	r24, r25
    130e:	39 f4       	brne	.+14     	; 0x131e <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1310:	a5 01       	movw	r20, r10
    1312:	88 2d       	mov	r24, r8
    1314:	b3 01       	movw	r22, r6
    1316:	0e 94 18 15 	call	0x2a30	; 0x2a30 <write_appeui>
    131a:	18 2f       	mov	r17, r24
    131c:	a8 c0       	rjmp	.+336    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    131e:	26 ed       	ldi	r18, 0xD6	; 214
    1320:	32 e0       	ldi	r19, 0x02	; 2
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	8e 2d       	mov	r24, r14
    1326:	b6 01       	movw	r22, r12
    1328:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    132c:	89 2b       	or	r24, r25
    132e:	39 f4       	brne	.+14     	; 0x133e <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1330:	a5 01       	movw	r20, r10
    1332:	88 2d       	mov	r24, r8
    1334:	b3 01       	movw	r22, r6
    1336:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <write_appkey>
    133a:	18 2f       	mov	r17, r24
    133c:	98 c0       	rjmp	.+304    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    133e:	2d ed       	ldi	r18, 0xDD	; 221
    1340:	32 e0       	ldi	r19, 0x02	; 2
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	8e 2d       	mov	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    134c:	89 2b       	or	r24, r25
    134e:	39 f4       	brne	.+14     	; 0x135e <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1350:	a5 01       	movw	r20, r10
    1352:	88 2d       	mov	r24, r8
    1354:	b3 01       	movw	r22, r6
    1356:	0e 94 35 19 	call	0x326a	; 0x326a <write_PPM_factor>
    135a:	18 2f       	mov	r17, r24
    135c:	88 c0       	rjmp	.+272    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    135e:	27 ee       	ldi	r18, 0xE7	; 231
    1360:	32 e0       	ldi	r19, 0x02	; 2
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	8e 2d       	mov	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    136c:	89 2b       	or	r24, r25
    136e:	39 f4       	brne	.+14     	; 0x137e <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1370:	a5 01       	movw	r20, r10
    1372:	88 2d       	mov	r24, r8
    1374:	b3 01       	movw	r22, r6
    1376:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <write_RRL>
    137a:	18 2f       	mov	r17, r24
    137c:	78 c0       	rjmp	.+240    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    137e:	2c ee       	ldi	r18, 0xEC	; 236
    1380:	32 e0       	ldi	r19, 0x02	; 2
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	8e 2d       	mov	r24, r14
    1386:	b6 01       	movw	r22, r12
    1388:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    138c:	89 2b       	or	r24, r25
    138e:	39 f4       	brne	.+14     	; 0x139e <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1390:	a5 01       	movw	r20, r10
    1392:	88 2d       	mov	r24, r8
    1394:	b3 01       	movw	r22, r6
    1396:	0e 94 81 19 	call	0x3302	; 0x3302 <write_VCC>
    139a:	18 2f       	mov	r17, r24
    139c:	68 c0       	rjmp	.+208    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    139e:	21 ef       	ldi	r18, 0xF1	; 241
    13a0:	32 e0       	ldi	r19, 0x02	; 2
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	8e 2d       	mov	r24, r14
    13a6:	b6 01       	movw	r22, r12
    13a8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    13ac:	89 2b       	or	r24, r25
    13ae:	39 f4       	brne	.+14     	; 0x13be <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    13b0:	a5 01       	movw	r20, r10
    13b2:	88 2d       	mov	r24, r8
    13b4:	b3 01       	movw	r22, r6
    13b6:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <write_cols>
    13ba:	18 2f       	mov	r17, r24
    13bc:	58 c0       	rjmp	.+176    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    13be:	26 ef       	ldi	r18, 0xF6	; 246
    13c0:	32 e0       	ldi	r19, 0x02	; 2
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	8e 2d       	mov	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    13cc:	89 2b       	or	r24, r25
    13ce:	39 f4       	brne	.+14     	; 0x13de <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    13d0:	a5 01       	movw	r20, r10
    13d2:	88 2d       	mov	r24, r8
    13d4:	b3 01       	movw	r22, r6
    13d6:	0e 94 a7 19 	call	0x334e	; 0x334e <write_heat_up>
    13da:	18 2f       	mov	r17, r24
    13dc:	48 c0       	rjmp	.+144    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    13de:	22 e1       	ldi	r18, 0x12	; 18
    13e0:	33 e0       	ldi	r19, 0x03	; 3
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	8e 2d       	mov	r24, r14
    13e6:	b6 01       	movw	r22, r12
    13e8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    13ec:	89 2b       	or	r24, r25
    13ee:	39 f4       	brne	.+14     	; 0x13fe <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    13f0:	a5 01       	movw	r20, r10
    13f2:	88 2d       	mov	r24, r8
    13f4:	b3 01       	movw	r22, r6
    13f6:	0e 94 72 18 	call	0x30e4	; 0x30e4 <write_air_pump>
    13fa:	18 2f       	mov	r17, r24
    13fc:	38 c0       	rjmp	.+112    	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    13fe:	20 e3       	ldi	r18, 0x30	; 48
    1400:	33 e0       	ldi	r19, 0x03	; 3
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	8e 2d       	mov	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    140c:	89 2b       	or	r24, r25
    140e:	39 f4       	brne	.+14     	; 0x141e <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1410:	a5 01       	movw	r20, r10
    1412:	88 2d       	mov	r24, r8
    1414:	b3 01       	movw	r22, r6
    1416:	0e 94 cd 19 	call	0x339a	; 0x339a <write_sp_interval>
    141a:	18 2f       	mov	r17, r24
    141c:	28 c0       	rjmp	.+80     	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    141e:	26 e7       	ldi	r18, 0x76	; 118
    1420:	33 e0       	ldi	r19, 0x03	; 3
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	8e 2d       	mov	r24, r14
    1426:	b6 01       	movw	r22, r12
    1428:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    142c:	89 2b       	or	r24, r25
    142e:	39 f4       	brne	.+14     	; 0x143e <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1430:	a5 01       	movw	r20, r10
    1432:	88 2d       	mov	r24, r8
    1434:	b3 01       	movw	r22, r6
    1436:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <write_reset>
    143a:	18 2f       	mov	r17, r24
    143c:	18 c0       	rjmp	.+48     	; 0x146e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    143e:	2b e5       	ldi	r18, 0x5B	; 91
    1440:	33 e0       	ldi	r19, 0x03	; 3
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	8e 2d       	mov	r24, r14
    1446:	b6 01       	movw	r22, r12
    1448:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    144c:	89 2b       	or	r24, r25
    144e:	39 f4       	brne	.+14     	; 0x145e <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1450:	a5 01       	movw	r20, r10
    1452:	88 2d       	mov	r24, r8
    1454:	b3 01       	movw	r22, r6
    1456:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <write_time>
    145a:	18 2f       	mov	r17, r24
    145c:	08 c0       	rjmp	.+16     	; 0x146e <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    145e:	26 e1       	ldi	r18, 0x16	; 22
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e6       	ldi	r20, 0x60	; 96
    1464:	53 e0       	ldi	r21, 0x03	; 3
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	c5 01       	movw	r24, r10
    146a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
	}
	
}
    146e:	81 2f       	mov	r24, r17
    1470:	64 96       	adiw	r28, 0x14	; 20
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	bf 90       	pop	r11
    148a:	af 90       	pop	r10
    148c:	8f 90       	pop	r8
    148e:	7f 90       	pop	r7
    1490:	6f 90       	pop	r6
    1492:	08 95       	ret

Disassembly of section .text.handle_methane:

00001b32 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <handle_methane+0x12>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	f4 2e       	mov	r15, r20
    1b4a:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1b4c:	22 e0       	ldi	r18, 0x02	; 2
    1b4e:	46 e6       	ldi	r20, 0x66	; 102
    1b50:	56 e0       	ldi	r21, 0x06	; 6
    1b52:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    1b56:	18 2f       	mov	r17, r24
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <handle_methane+0x2c>
    1b5c:	6b c0       	rjmp	.+214    	; 0x1c34 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    1b5e:	86 e6       	ldi	r24, 0x66	; 102
    1b60:	96 e0       	ldi	r25, 0x06	; 6
    1b62:	6c 01       	movw	r12, r24
    1b64:	20 e8       	ldi	r18, 0x80	; 128
    1b66:	e2 2e       	mov	r14, r18
    1b68:	2c e7       	ldi	r18, 0x7C	; 124
    1b6a:	33 e0       	ldi	r19, 0x03	; 3
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	8e 2d       	mov	r24, r14
    1b70:	b6 01       	movw	r22, r12
    1b72:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1b76:	89 2b       	or	r24, r25
    1b78:	79 f4       	brne	.+30     	; 0x1b98 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    1b7a:	0e 94 19 20 	call	0x4032	; 0x4032 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1b84:	28 e1       	ldi	r18, 0x18	; 24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	53 e0       	ldi	r21, 0x03	; 3
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	8f 2d       	mov	r24, r15
    1b90:	90 2f       	mov	r25, r16
    1b92:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    1b96:	4e c0       	rjmp	.+156    	; 0x1c34 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1b98:	27 e9       	ldi	r18, 0x97	; 151
    1b9a:	33 e0       	ldi	r19, 0x03	; 3
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	8e 2d       	mov	r24, r14
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1ba6:	89 2b       	or	r24, r25
    1ba8:	79 f4       	brne	.+30     	; 0x1bc8 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    1baa:	0e 94 19 20 	call	0x4032	; 0x4032 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1bb4:	29 e1       	ldi	r18, 0x19	; 25
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4b e9       	ldi	r20, 0x9B	; 155
    1bba:	53 e0       	ldi	r21, 0x03	; 3
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	8f 2d       	mov	r24, r15
    1bc0:	90 2f       	mov	r25, r16
    1bc2:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    1bc6:	36 c0       	rjmp	.+108    	; 0x1c34 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1bc8:	24 eb       	ldi	r18, 0xB4	; 180
    1bca:	33 e0       	ldi	r19, 0x03	; 3
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	8e 2d       	mov	r24, r14
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    1bd6:	89 2b       	or	r24, r25
    1bd8:	21 f5       	brne	.+72     	; 0x1c22 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    1bda:	ce 01       	movw	r24, r28
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <ADC_get_value>
    1be2:	88 23       	and	r24, r24
    1be4:	51 f0       	breq	.+20     	; 0x1bfa <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1be6:	28 e1       	ldi	r18, 0x18	; 24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	49 eb       	ldi	r20, 0xB9	; 185
    1bec:	53 e0       	ldi	r21, 0x03	; 3
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	8f 2d       	mov	r24, r15
    1bf2:	90 2f       	mov	r25, r16
    1bf4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
    1bf8:	1d c0       	rjmp	.+58     	; 0x1c34 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	8f 93       	push	r24
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	8f 93       	push	r24
    1c02:	81 ed       	ldi	r24, 0xD1	; 209
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	af 93       	push	r26
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	0f 93       	push	r16
    1c10:	ff 92       	push	r15
    1c12:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1c22:	26 e1       	ldi	r18, 0x16	; 22
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	48 ed       	ldi	r20, 0xD8	; 216
    1c28:	53 e0       	ldi	r21, 0x03	; 3
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	8f 2d       	mov	r24, r15
    1c2e:	90 2f       	mov	r25, r16
    1c30:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
	}
	return false;
}
    1c34:	81 2f       	mov	r24, r17
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	cf 90       	pop	r12
    1c4a:	08 95       	ret

Disassembly of section .text.handle_co2:

00002490 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	00 d0       	rcall	.+0      	; 0x249c <handle_co2+0xc>
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	f4 2e       	mov	r15, r20
    24a2:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    24a4:	22 e0       	ldi	r18, 0x02	; 2
    24a6:	46 e6       	ldi	r20, 0x66	; 102
    24a8:	56 e0       	ldi	r21, 0x06	; 6
    24aa:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    24ae:	18 2f       	mov	r17, r24
    24b0:	88 23       	and	r24, r24
    24b2:	b9 f1       	breq	.+110    	; 0x2522 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    24b4:	66 e6       	ldi	r22, 0x66	; 102
    24b6:	76 e0       	ldi	r23, 0x06	; 6
    24b8:	80 e8       	ldi	r24, 0x80	; 128
    24ba:	24 eb       	ldi	r18, 0xB4	; 180
    24bc:	33 e0       	ldi	r19, 0x03	; 3
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    24c4:	89 2b       	or	r24, r25
    24c6:	21 f5       	brne	.+72     	; 0x2510 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SCD30_get_reading>
    24d0:	88 23       	and	r24, r24
    24d2:	51 f0       	breq	.+20     	; 0x24e8 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    24d4:	28 e1       	ldi	r18, 0x18	; 24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	49 eb       	ldi	r20, 0xB9	; 185
    24da:	53 e0       	ldi	r21, 0x03	; 3
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	8f 2d       	mov	r24, r15
    24e0:	90 2f       	mov	r25, r16
    24e2:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
    24e6:	1d c0       	rjmp	.+58     	; 0x2522 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	8f 93       	push	r24
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	8f 93       	push	r24
    24f0:	81 ed       	ldi	r24, 0xD1	; 209
    24f2:	93 e0       	ldi	r25, 0x03	; 3
    24f4:	a0 e0       	ldi	r26, 0x00	; 0
    24f6:	af 93       	push	r26
    24f8:	9f 93       	push	r25
    24fa:	8f 93       	push	r24
    24fc:	0f 93       	push	r16
    24fe:	ff 92       	push	r15
    2500:	0e 94 cc 1a 	call	0x3598	; 0x3598 <sprintf>
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	09 c0       	rjmp	.+18     	; 0x2522 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2510:	26 e1       	ldi	r18, 0x16	; 22
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	48 ed       	ldi	r20, 0xD8	; 216
    2516:	53 e0       	ldi	r21, 0x03	; 3
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	8f 2d       	mov	r24, r15
    251c:	90 2f       	mov	r25, r16
    251e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
	}
}
    2522:	81 2f       	mov	r24, r17
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	08 95       	ret

Disassembly of section .text.handle_pump:

00002534 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    2542:	22 e0       	ldi	r18, 0x02	; 2
    2544:	46 e6       	ldi	r20, 0x66	; 102
    2546:	56 e0       	ldi	r21, 0x06	; 6
    2548:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    254c:	c8 2f       	mov	r28, r24
    254e:	88 23       	and	r24, r24
    2550:	d9 f1       	breq	.+118    	; 0x25c8 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    2552:	86 e6       	ldi	r24, 0x66	; 102
    2554:	96 e0       	ldi	r25, 0x06	; 6
    2556:	6c 01       	movw	r12, r24
    2558:	20 e8       	ldi	r18, 0x80	; 128
    255a:	e2 2e       	mov	r14, r18
    255c:	2c e7       	ldi	r18, 0x7C	; 124
    255e:	33 e0       	ldi	r19, 0x03	; 3
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	8e 2d       	mov	r24, r14
    2564:	b6 01       	movw	r22, r12
    2566:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    256a:	89 2b       	or	r24, r25
    256c:	71 f4       	brne	.+28     	; 0x258a <handle_pump+0x56>
		PM_HAL_BC_power_init();
    256e:	0e 94 27 20 	call	0x404e	; 0x404e <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    2578:	25 e1       	ldi	r18, 0x15	; 21
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4e ee       	ldi	r20, 0xEE	; 238
    257e:	53 e0       	ldi	r21, 0x03	; 3
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	c8 01       	movw	r24, r16
    2584:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    2588:	1f c0       	rjmp	.+62     	; 0x25c8 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    258a:	27 e9       	ldi	r18, 0x97	; 151
    258c:	33 e0       	ldi	r19, 0x03	; 3
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	8e 2d       	mov	r24, r14
    2592:	b6 01       	movw	r22, r12
    2594:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    2598:	89 2b       	or	r24, r25
    259a:	71 f4       	brne	.+28     	; 0x25b8 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    259c:	0e 94 27 20 	call	0x404e	; 0x404e <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    25a6:	26 e1       	ldi	r18, 0x16	; 22
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	43 e0       	ldi	r20, 0x03	; 3
    25ac:	54 e0       	ldi	r21, 0x04	; 4
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	c8 01       	movw	r24, r16
    25b2:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
    25b6:	08 c0       	rjmp	.+16     	; 0x25c8 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    25b8:	26 e1       	ldi	r18, 0x16	; 22
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	48 ed       	ldi	r20, 0xD8	; 216
    25be:	53 e0       	ldi	r21, 0x03	; 3
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	c8 01       	movw	r24, r16
    25c4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
	}
}
    25c8:	8c 2f       	mov	r24, r28
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	08 95       	ret

Disassembly of section .text.handle_sample:

00002324 <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	cf 92       	push	r12
    232c:	df 92       	push	r13
    232e:	ef 92       	push	r14
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	3b 01       	movw	r6, r22
    2338:	88 2e       	mov	r8, r24
    233a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    233c:	21 e0       	ldi	r18, 0x01	; 1
    233e:	46 e6       	ldi	r20, 0x66	; 102
    2340:	56 e0       	ldi	r21, 0x06	; 6
    2342:	0e 94 88 13 	call	0x2710	; 0x2710 <get_parameter>
    2346:	c8 2f       	mov	r28, r24
    2348:	88 23       	and	r24, r24
    234a:	e9 f1       	breq	.+122    	; 0x23c6 <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    234c:	86 e6       	ldi	r24, 0x66	; 102
    234e:	96 e0       	ldi	r25, 0x06	; 6
    2350:	6c 01       	movw	r12, r24
    2352:	20 e8       	ldi	r18, 0x80	; 128
    2354:	e2 2e       	mov	r14, r18
    2356:	29 e1       	ldi	r18, 0x19	; 25
    2358:	34 e0       	ldi	r19, 0x04	; 4
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	8e 2d       	mov	r24, r14
    235e:	b6 01       	movw	r22, r12
    2360:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    2364:	89 2b       	or	r24, r25
    2366:	39 f4       	brne	.+14     	; 0x2376 <handle_sample+0x52>
		return handle_methane(cmd, res);
    2368:	a8 01       	movw	r20, r16
    236a:	88 2d       	mov	r24, r8
    236c:	b3 01       	movw	r22, r6
    236e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <handle_methane>
    2372:	c8 2f       	mov	r28, r24
    2374:	28 c0       	rjmp	.+80     	; 0x23c6 <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    2376:	2e e1       	ldi	r18, 0x1E	; 30
    2378:	34 e0       	ldi	r19, 0x04	; 4
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	8e 2d       	mov	r24, r14
    237e:	b6 01       	movw	r22, r12
    2380:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    2384:	89 2b       	or	r24, r25
    2386:	39 f4       	brne	.+14     	; 0x2396 <handle_sample+0x72>
		return handle_co2(cmd, res);
    2388:	a8 01       	movw	r20, r16
    238a:	88 2d       	mov	r24, r8
    238c:	b3 01       	movw	r22, r6
    238e:	0e 94 48 12 	call	0x2490	; 0x2490 <handle_co2>
    2392:	c8 2f       	mov	r28, r24
    2394:	18 c0       	rjmp	.+48     	; 0x23c6 <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    2396:	22 e2       	ldi	r18, 0x22	; 34
    2398:	34 e0       	ldi	r19, 0x04	; 4
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	8e 2d       	mov	r24, r14
    239e:	b6 01       	movw	r22, r12
    23a0:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strcmp>
    23a4:	89 2b       	or	r24, r25
    23a6:	39 f4       	brne	.+14     	; 0x23b6 <handle_sample+0x92>
		return handle_pump(cmd, res);
    23a8:	a8 01       	movw	r20, r16
    23aa:	88 2d       	mov	r24, r8
    23ac:	b3 01       	movw	r22, r6
    23ae:	0e 94 9a 12 	call	0x2534	; 0x2534 <handle_pump>
    23b2:	c8 2f       	mov	r28, r24
    23b4:	08 c0       	rjmp	.+16     	; 0x23c6 <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    23b6:	26 e1       	ldi	r18, 0x16	; 22
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	48 ed       	ldi	r20, 0xD8	; 216
    23bc:	53 e0       	ldi	r21, 0x03	; 3
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	c8 01       	movw	r24, r16
    23c2:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <memcpy>
		return true;
	}
}
    23c6:	8c 2f       	mov	r24, r28
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	8f 90       	pop	r8
    23d6:	7f 90       	pop	r7
    23d8:	6f 90       	pop	r6
    23da:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00003c92 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    3c92:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3c96:	0e 94 12 20 	call	0x4024	; 0x4024 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    3ca0:	0e 94 20 20 	call	0x4040	; 0x4040 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    3caa:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3cae:	88 23       	and	r24, r24
    3cb0:	11 f0       	breq	.+4      	; 0x3cb6 <init_methane_SCD30+0x24>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	08 95       	ret
	return true;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3cb8:	08 95       	ret

Disassembly of section .text.count_parameters:

00003092 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    3092:	6f 92       	push	r6
    3094:	7f 92       	push	r7
    3096:	8f 92       	push	r8
    3098:	cf 92       	push	r12
    309a:	df 92       	push	r13
    309c:	ef 92       	push	r14
    309e:	3b 01       	movw	r6, r22
    30a0:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    30a2:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    30a6:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    30ac:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    30ae:	10 c0       	rjmp	.+32     	; 0x30d0 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    30b0:	e8 2c       	mov	r14, r8
    30b2:	63 01       	movw	r12, r6
    30b4:	c2 0e       	add	r12, r18
    30b6:	d3 1e       	adc	r13, r19
    30b8:	e1 1c       	adc	r14, r1
    30ba:	37 fd       	sbrc	r19, 7
    30bc:	ea 94       	dec	r14
    30be:	f6 01       	movw	r30, r12
    30c0:	94 91       	lpm	r25, Z
    30c2:	e7 fc       	sbrc	r14, 7
    30c4:	90 81       	ld	r25, Z
    30c6:	90 32       	cpi	r25, 0x20	; 32
    30c8:	09 f4       	brne	.+2      	; 0x30cc <count_parameters+0x3a>
			cnt++;
    30ca:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    30cc:	2f 5f       	subi	r18, 0xFF	; 255
    30ce:	3f 4f       	sbci	r19, 0xFF	; 255
    30d0:	26 17       	cp	r18, r22
    30d2:	37 07       	cpc	r19, r23
    30d4:	68 f3       	brcs	.-38     	; 0x30b0 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    30d6:	ef 90       	pop	r14
    30d8:	df 90       	pop	r13
    30da:	cf 90       	pop	r12
    30dc:	8f 90       	pop	r8
    30de:	7f 90       	pop	r7
    30e0:	6f 90       	pop	r6
    30e2:	08 95       	ret

Disassembly of section .text.par_index:

00002c80 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2c80:	cf 92       	push	r12
    2c82:	df 92       	push	r13
    2c84:	ef 92       	push	r14
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2c8e:	44 23       	and	r20, r20
    2c90:	29 f1       	breq	.+74     	; 0x2cdc <par_index+0x5c>
    2c92:	04 2f       	mov	r16, r20
    2c94:	6b 01       	movw	r12, r22
    2c96:	e8 2e       	mov	r14, r24
    2c98:	c0 e0       	ldi	r28, 0x00	; 0
    2c9a:	d0 e0       	ldi	r29, 0x00	; 0
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2ca0:	ae 2d       	mov	r26, r14
    2ca2:	c6 01       	movw	r24, r12
    2ca4:	8c 0f       	add	r24, r28
    2ca6:	9d 1f       	adc	r25, r29
    2ca8:	a1 1d       	adc	r26, r1
    2caa:	d7 fd       	sbrc	r29, 7
    2cac:	aa 95       	dec	r26
    2cae:	fc 01       	movw	r30, r24
    2cb0:	84 91       	lpm	r24, Z
    2cb2:	a7 fd       	sbrc	r26, 7
    2cb4:	80 81       	ld	r24, Z
    2cb6:	80 32       	cpi	r24, 0x20	; 32
    2cb8:	31 f4       	brne	.+12     	; 0x2cc6 <par_index+0x46>
			cnt++;
    2cba:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2cbc:	01 13       	cpse	r16, r17
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <par_index+0x46>
				return i+1;
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	0d c0       	rjmp	.+26     	; 0x2ce0 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2cc6:	21 96       	adiw	r28, 0x01	; 1
    2cc8:	8e 2d       	mov	r24, r14
    2cca:	b6 01       	movw	r22, r12
    2ccc:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2cd0:	c8 17       	cp	r28, r24
    2cd2:	d9 07       	cpc	r29, r25
    2cd4:	28 f3       	brcs	.-54     	; 0x2ca0 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ef 90       	pop	r14
    2cea:	df 90       	pop	r13
    2cec:	cf 90       	pop	r12
    2cee:	08 95       	ret

Disassembly of section .text.get_parameter:

00002710 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    2710:	8f 92       	push	r8
    2712:	9f 92       	push	r9
    2714:	af 92       	push	r10
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	6b 01       	movw	r12, r22
    2728:	e8 2e       	mov	r14, r24
    272a:	ea 01       	movw	r28, r20
    272c:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    272e:	0e 94 49 18 	call	0x3092	; 0x3092 <count_parameters>
	if(pars<parNo) return false;
    2732:	8f 15       	cp	r24, r15
    2734:	58 f1       	brcs	.+86     	; 0x278c <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    2736:	8e 2d       	mov	r24, r14
    2738:	b6 01       	movw	r22, r12
    273a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    273e:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    2740:	4f 2d       	mov	r20, r15
    2742:	8e 2d       	mov	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	0e 94 40 16 	call	0x2c80	; 0x2c80 <par_index>
	uint8_t parLen=0;
    274a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    274c:	15 c0       	rjmp	.+42     	; 0x2778 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    274e:	46 01       	movw	r8, r12
    2750:	ae 2c       	mov	r10, r14
    2752:	82 0e       	add	r8, r18
    2754:	93 1e       	adc	r9, r19
    2756:	a1 1c       	adc	r10, r1
    2758:	37 fd       	sbrc	r19, 7
    275a:	aa 94       	dec	r10
    275c:	4a 2d       	mov	r20, r10
    275e:	94 01       	movw	r18, r8
    2760:	f4 01       	movw	r30, r8
    2762:	24 91       	lpm	r18, Z
    2764:	47 fd       	sbrc	r20, 7
    2766:	20 81       	ld	r18, Z
    2768:	20 32       	cpi	r18, 0x20	; 32
    276a:	59 f0       	breq	.+22     	; 0x2782 <get_parameter+0x72>
		par[parLen++]=src[i];
    276c:	fe 01       	movw	r30, r28
    276e:	e9 0f       	add	r30, r25
    2770:	f1 1d       	adc	r31, r1
    2772:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2774:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    2776:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	20 17       	cp	r18, r16
    277e:	31 07       	cpc	r19, r17
    2780:	30 f3       	brcs	.-52     	; 0x274e <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    2782:	c9 0f       	add	r28, r25
    2784:	d1 1d       	adc	r29, r1
    2786:	18 82       	st	Y, r1
	
	return true;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	01 c0       	rjmp	.+2      	; 0x278e <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    278c:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	ff 90       	pop	r15
    2798:	ef 90       	pop	r14
    279a:	df 90       	pop	r13
    279c:	cf 90       	pop	r12
    279e:	af 90       	pop	r10
    27a0:	9f 90       	pop	r9
    27a2:	8f 90       	pop	r8
    27a4:	08 95       	ret

Disassembly of section .text.calc_crc8:

00003938 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    3938:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    393a:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    393c:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    393e:	14 c0       	rjmp	.+40     	; 0x3968 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    3940:	fa 01       	movw	r30, r20
    3942:	e3 0f       	add	r30, r19
    3944:	f1 1d       	adc	r31, r1
    3946:	90 81       	ld	r25, Z
    3948:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    394a:	28 e0       	ldi	r18, 0x08	; 8
    394c:	0a c0       	rjmp	.+20     	; 0x3962 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    394e:	88 23       	and	r24, r24
    3950:	34 f4       	brge	.+12     	; 0x395e <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	91 e3       	ldi	r25, 0x31	; 49
    395a:	89 27       	eor	r24, r25
    395c:	01 c0       	rjmp	.+2      	; 0x3960 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    395e:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    3960:	21 50       	subi	r18, 0x01	; 1
    3962:	21 11       	cpse	r18, r1
    3964:	f4 cf       	rjmp	.-24     	; 0x394e <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3966:	3f 5f       	subi	r19, 0xFF	; 255
    3968:	36 17       	cp	r19, r22
    396a:	50 f3       	brcs	.-44     	; 0x3940 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    396c:	08 95       	ret

Disassembly of section .text.get_decimal:

000023dc <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    23f0:	08 c0       	rjmp	.+16     	; 0x2402 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    23f2:	cc 0d       	add	r28, r12
    23f4:	dd 1d       	adc	r29, r13
    23f6:	88 81       	ld	r24, Y
    23f8:	8e 32       	cpi	r24, 0x2E	; 46
    23fa:	11 f4       	brne	.+4      	; 0x2400 <get_decimal+0x24>
			index=i+1;
    23fc:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    23fe:	0c c0       	rjmp	.+24     	; 0x2418 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2400:	1f 5f       	subi	r17, 0xFF	; 255
    2402:	c1 2f       	mov	r28, r17
    2404:	d0 e0       	ldi	r29, 0x00	; 0
    2406:	b6 01       	movw	r22, r12
    2408:	80 e8       	ldi	r24, 0x80	; 128
    240a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	c8 17       	cp	r28, r24
    2412:	d9 07       	cpc	r29, r25
    2414:	70 f3       	brcs	.-36     	; 0x23f2 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    2416:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2418:	11 23       	and	r17, r17
    241a:	71 f1       	breq	.+92     	; 0x2478 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    241c:	c1 0e       	add	r12, r17
    241e:	d1 1c       	adc	r13, r1
    2420:	80 e8       	ldi	r24, 0x80	; 128
    2422:	e8 2e       	mov	r14, r24
    2424:	8e 2d       	mov	r24, r14
    2426:	b6 01       	movw	r22, r12
    2428:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    242c:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    242e:	8e 2d       	mov	r24, r14
    2430:	b6 01       	movw	r22, r12
    2432:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
    2436:	8c 01       	movw	r16, r24
	float divisor=1;
    2438:	0f 2e       	mov	r0, r31
    243a:	c1 2c       	mov	r12, r1
    243c:	d1 2c       	mov	r13, r1
    243e:	f0 e8       	ldi	r31, 0x80	; 128
    2440:	ef 2e       	mov	r14, r31
    2442:	ff e3       	ldi	r31, 0x3F	; 63
    2444:	ff 2e       	mov	r15, r31
    2446:	f0 2d       	mov	r31, r0
	
	while(len>0){
    2448:	0b c0       	rjmp	.+22     	; 0x2460 <get_decimal+0x84>
		divisor*=10;
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	c7 01       	movw	r24, r14
    2454:	b6 01       	movw	r22, r12
    2456:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__mulsf3>
    245a:	6b 01       	movw	r12, r22
    245c:	7c 01       	movw	r14, r24
		len--;
    245e:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    2460:	c1 11       	cpse	r28, r1
    2462:	f3 cf       	rjmp	.-26     	; 0x244a <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    2464:	b8 01       	movw	r22, r16
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
    246e:	a7 01       	movw	r20, r14
    2470:	96 01       	movw	r18, r12
    2472:	0e 94 ed 20 	call	0x41da	; 0x41da <__divsf3>
    2476:	03 c0       	rjmp	.+6      	; 0x247e <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	08 95       	ret

Disassembly of section .text.str2flaot:

000031d0 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    31d0:	cf 92       	push	r12
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    31e2:	bc 01       	movw	r22, r24
    31e4:	80 e8       	ldi	r24, 0x80	; 128
    31e6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <atoi>
    31ea:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    31ec:	c8 01       	movw	r24, r16
    31ee:	0e 94 ee 11 	call	0x23dc	; 0x23dc <get_decimal>
    31f2:	6b 01       	movw	r12, r22
    31f4:	7c 01       	movw	r14, r24
	return intVal+deci;
    31f6:	be 01       	movw	r22, r28
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatunsisf>
    3200:	9b 01       	movw	r18, r22
    3202:	ac 01       	movw	r20, r24
    3204:	c7 01       	movw	r24, r14
    3206:	b6 01       	movw	r22, r12
    3208:	0e 94 67 20 	call	0x40ce	; 0x40ce <__addsf3>
	
	
}
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	08 95       	ret

Disassembly of section .text.is_float:

00002ee8 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2ef6:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    2ef8:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    2efa:	0d c0       	rjmp	.+26     	; 0x2f16 <is_float+0x2e>
	{
		if(str[i]=='.'){
    2efc:	ce 0d       	add	r28, r14
    2efe:	df 1d       	adc	r29, r15
    2f00:	88 81       	ld	r24, Y
    2f02:	8e 32       	cpi	r24, 0x2E	; 46
    2f04:	21 f4       	brne	.+8      	; 0x2f0e <is_float+0x26>
			if (got_dot)
    2f06:	01 11       	cpse	r16, r1
    2f08:	11 c0       	rjmp	.+34     	; 0x2f2c <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    2f0a:	01 e0       	ldi	r16, 0x01	; 1
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2f0e:	80 53       	subi	r24, 0x30	; 48
    2f10:	8a 30       	cpi	r24, 0x0A	; 10
    2f12:	70 f4       	brcc	.+28     	; 0x2f30 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2f14:	1f 5f       	subi	r17, 0xFF	; 255
    2f16:	c1 2f       	mov	r28, r17
    2f18:	d0 e0       	ldi	r29, 0x00	; 0
    2f1a:	b7 01       	movw	r22, r14
    2f1c:	80 e8       	ldi	r24, 0x80	; 128
    2f1e:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strlen>
    2f22:	c8 17       	cp	r28, r24
    2f24:	d9 07       	cpc	r29, r25
    2f26:	50 f3       	brcs	.-44     	; 0x2efc <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2f30:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040cc <__subsf3>:
    40cc:	50 58       	subi	r21, 0x80	; 128

000040ce <__addsf3>:
    40ce:	bb 27       	eor	r27, r27
    40d0:	aa 27       	eor	r26, r26
    40d2:	0e 94 6f 10 	call	0x20de	; 0x20de <__addsf3x>
    40d6:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000020de <__addsf3x>:
    20de:	11 c0       	rjmp	.+34     	; 0x2102 <__addsf3x+0x24>
    20e0:	0e 94 6d 20 	call	0x40da	; 0x40da <__fp_pscA>
    20e4:	38 f0       	brcs	.+14     	; 0x20f4 <__addsf3x+0x16>
    20e6:	0e 94 74 20 	call	0x40e8	; 0x40e8 <__fp_pscB>
    20ea:	20 f0       	brcs	.+8      	; 0x20f4 <__addsf3x+0x16>
    20ec:	39 f4       	brne	.+14     	; 0x20fc <__addsf3x+0x1e>
    20ee:	9f 3f       	cpi	r25, 0xFF	; 255
    20f0:	19 f4       	brne	.+6      	; 0x20f8 <__addsf3x+0x1a>
    20f2:	26 f4       	brtc	.+8      	; 0x20fc <__addsf3x+0x1e>
    20f4:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_nan>
    20f8:	0e f4       	brtc	.+2      	; 0x20fc <__addsf3x+0x1e>
    20fa:	e0 95       	com	r30
    20fc:	e7 fb       	bst	r30, 7
    20fe:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__fp_inf>
    2102:	e9 2f       	mov	r30, r25
    2104:	0e 94 ef 1a 	call	0x35de	; 0x35de <__fp_split3>
    2108:	58 f3       	brcs	.-42     	; 0x20e0 <__addsf3x+0x2>
    210a:	ba 17       	cp	r27, r26
    210c:	62 07       	cpc	r22, r18
    210e:	73 07       	cpc	r23, r19
    2110:	84 07       	cpc	r24, r20
    2112:	95 07       	cpc	r25, r21
    2114:	20 f0       	brcs	.+8      	; 0x211e <__addsf3x+0x40>
    2116:	79 f4       	brne	.+30     	; 0x2136 <__addsf3x+0x58>
    2118:	a6 f5       	brtc	.+104    	; 0x2182 <__addsf3x+0xa4>
    211a:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__fp_zero>
    211e:	0e f4       	brtc	.+2      	; 0x2122 <__addsf3x+0x44>
    2120:	e0 95       	com	r30
    2122:	0b 2e       	mov	r0, r27
    2124:	ba 2f       	mov	r27, r26
    2126:	a0 2d       	mov	r26, r0
    2128:	0b 01       	movw	r0, r22
    212a:	b9 01       	movw	r22, r18
    212c:	90 01       	movw	r18, r0
    212e:	0c 01       	movw	r0, r24
    2130:	ca 01       	movw	r24, r20
    2132:	a0 01       	movw	r20, r0
    2134:	11 24       	eor	r1, r1
    2136:	ff 27       	eor	r31, r31
    2138:	59 1b       	sub	r21, r25
    213a:	99 f0       	breq	.+38     	; 0x2162 <__addsf3x+0x84>
    213c:	59 3f       	cpi	r21, 0xF9	; 249
    213e:	50 f4       	brcc	.+20     	; 0x2154 <__addsf3x+0x76>
    2140:	50 3e       	cpi	r21, 0xE0	; 224
    2142:	68 f1       	brcs	.+90     	; 0x219e <__addsf3x+0xc0>
    2144:	1a 16       	cp	r1, r26
    2146:	f0 40       	sbci	r31, 0x00	; 0
    2148:	a2 2f       	mov	r26, r18
    214a:	23 2f       	mov	r18, r19
    214c:	34 2f       	mov	r19, r20
    214e:	44 27       	eor	r20, r20
    2150:	58 5f       	subi	r21, 0xF8	; 248
    2152:	f3 cf       	rjmp	.-26     	; 0x213a <__addsf3x+0x5c>
    2154:	46 95       	lsr	r20
    2156:	37 95       	ror	r19
    2158:	27 95       	ror	r18
    215a:	a7 95       	ror	r26
    215c:	f0 40       	sbci	r31, 0x00	; 0
    215e:	53 95       	inc	r21
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__addsf3x+0x76>
    2162:	7e f4       	brtc	.+30     	; 0x2182 <__addsf3x+0xa4>
    2164:	1f 16       	cp	r1, r31
    2166:	ba 0b       	sbc	r27, r26
    2168:	62 0b       	sbc	r22, r18
    216a:	73 0b       	sbc	r23, r19
    216c:	84 0b       	sbc	r24, r20
    216e:	ba f0       	brmi	.+46     	; 0x219e <__addsf3x+0xc0>
    2170:	91 50       	subi	r25, 0x01	; 1
    2172:	a1 f0       	breq	.+40     	; 0x219c <__addsf3x+0xbe>
    2174:	ff 0f       	add	r31, r31
    2176:	bb 1f       	adc	r27, r27
    2178:	66 1f       	adc	r22, r22
    217a:	77 1f       	adc	r23, r23
    217c:	88 1f       	adc	r24, r24
    217e:	c2 f7       	brpl	.-16     	; 0x2170 <__addsf3x+0x92>
    2180:	0e c0       	rjmp	.+28     	; 0x219e <__addsf3x+0xc0>
    2182:	ba 0f       	add	r27, r26
    2184:	62 1f       	adc	r22, r18
    2186:	73 1f       	adc	r23, r19
    2188:	84 1f       	adc	r24, r20
    218a:	48 f4       	brcc	.+18     	; 0x219e <__addsf3x+0xc0>
    218c:	87 95       	ror	r24
    218e:	77 95       	ror	r23
    2190:	67 95       	ror	r22
    2192:	b7 95       	ror	r27
    2194:	f7 95       	ror	r31
    2196:	9e 3f       	cpi	r25, 0xFE	; 254
    2198:	08 f0       	brcs	.+2      	; 0x219c <__addsf3x+0xbe>
    219a:	b0 cf       	rjmp	.-160    	; 0x20fc <__addsf3x+0x1e>
    219c:	93 95       	inc	r25
    219e:	88 0f       	add	r24, r24
    21a0:	08 f0       	brcs	.+2      	; 0x21a4 <__addsf3x+0xc6>
    21a2:	99 27       	eor	r25, r25
    21a4:	ee 0f       	add	r30, r30
    21a6:	97 95       	ror	r25
    21a8:	87 95       	ror	r24
    21aa:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000041da <__divsf3>:
    41da:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__divsf3x>
    41de:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f2c <__divsf3x>:
    1f2c:	10 c0       	rjmp	.+32     	; 0x1f4e <__divsf3x+0x22>
    1f2e:	0e 94 74 20 	call	0x40e8	; 0x40e8 <__fp_pscB>
    1f32:	58 f0       	brcs	.+22     	; 0x1f4a <__divsf3x+0x1e>
    1f34:	0e 94 6d 20 	call	0x40da	; 0x40da <__fp_pscA>
    1f38:	40 f0       	brcs	.+16     	; 0x1f4a <__divsf3x+0x1e>
    1f3a:	29 f4       	brne	.+10     	; 0x1f46 <__divsf3x+0x1a>
    1f3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__divsf3x+0x1e>
    1f40:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__fp_inf>
    1f44:	51 11       	cpse	r21, r1
    1f46:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_szero>
    1f4a:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_nan>
    1f4e:	0e 94 ef 1a 	call	0x35de	; 0x35de <__fp_split3>
    1f52:	68 f3       	brcs	.-38     	; 0x1f2e <__divsf3x+0x2>

00001f54 <__divsf3_pse>:
    1f54:	99 23       	and	r25, r25
    1f56:	b1 f3       	breq	.-20     	; 0x1f44 <__divsf3x+0x18>
    1f58:	55 23       	and	r21, r21
    1f5a:	91 f3       	breq	.-28     	; 0x1f40 <__divsf3x+0x14>
    1f5c:	95 1b       	sub	r25, r21
    1f5e:	55 0b       	sbc	r21, r21
    1f60:	bb 27       	eor	r27, r27
    1f62:	aa 27       	eor	r26, r26
    1f64:	62 17       	cp	r22, r18
    1f66:	73 07       	cpc	r23, r19
    1f68:	84 07       	cpc	r24, r20
    1f6a:	38 f0       	brcs	.+14     	; 0x1f7a <__divsf3_pse+0x26>
    1f6c:	9f 5f       	subi	r25, 0xFF	; 255
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	22 0f       	add	r18, r18
    1f72:	33 1f       	adc	r19, r19
    1f74:	44 1f       	adc	r20, r20
    1f76:	aa 1f       	adc	r26, r26
    1f78:	a9 f3       	breq	.-22     	; 0x1f64 <__divsf3_pse+0x10>
    1f7a:	35 d0       	rcall	.+106    	; 0x1fe6 <__divsf3_pse+0x92>
    1f7c:	0e 2e       	mov	r0, r30
    1f7e:	3a f0       	brmi	.+14     	; 0x1f8e <__divsf3_pse+0x3a>
    1f80:	e0 e8       	ldi	r30, 0x80	; 128
    1f82:	32 d0       	rcall	.+100    	; 0x1fe8 <__divsf3_pse+0x94>
    1f84:	91 50       	subi	r25, 0x01	; 1
    1f86:	50 40       	sbci	r21, 0x00	; 0
    1f88:	e6 95       	lsr	r30
    1f8a:	00 1c       	adc	r0, r0
    1f8c:	ca f7       	brpl	.-14     	; 0x1f80 <__divsf3_pse+0x2c>
    1f8e:	2b d0       	rcall	.+86     	; 0x1fe6 <__divsf3_pse+0x92>
    1f90:	fe 2f       	mov	r31, r30
    1f92:	29 d0       	rcall	.+82     	; 0x1fe6 <__divsf3_pse+0x92>
    1f94:	66 0f       	add	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	26 17       	cp	r18, r22
    1f9e:	37 07       	cpc	r19, r23
    1fa0:	48 07       	cpc	r20, r24
    1fa2:	ab 07       	cpc	r26, r27
    1fa4:	b0 e8       	ldi	r27, 0x80	; 128
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <__divsf3_pse+0x56>
    1fa8:	bb 0b       	sbc	r27, r27
    1faa:	80 2d       	mov	r24, r0
    1fac:	bf 01       	movw	r22, r30
    1fae:	ff 27       	eor	r31, r31
    1fb0:	93 58       	subi	r25, 0x83	; 131
    1fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb4:	3a f0       	brmi	.+14     	; 0x1fc4 <__divsf3_pse+0x70>
    1fb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb8:	51 05       	cpc	r21, r1
    1fba:	78 f0       	brcs	.+30     	; 0x1fda <__divsf3_pse+0x86>
    1fbc:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__fp_inf>
    1fc0:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_szero>
    1fc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc6:	e4 f3       	brlt	.-8      	; 0x1fc0 <__divsf3_pse+0x6c>
    1fc8:	98 3e       	cpi	r25, 0xE8	; 232
    1fca:	d4 f3       	brlt	.-12     	; 0x1fc0 <__divsf3_pse+0x6c>
    1fcc:	86 95       	lsr	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	b7 95       	ror	r27
    1fd4:	f7 95       	ror	r31
    1fd6:	9f 5f       	subi	r25, 0xFF	; 255
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <__divsf3_pse+0x78>
    1fda:	88 0f       	add	r24, r24
    1fdc:	91 1d       	adc	r25, r1
    1fde:	96 95       	lsr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	97 f9       	bld	r25, 7
    1fe4:	08 95       	ret
    1fe6:	e1 e0       	ldi	r30, 0x01	; 1
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	62 17       	cp	r22, r18
    1ff2:	73 07       	cpc	r23, r19
    1ff4:	84 07       	cpc	r24, r20
    1ff6:	ba 07       	cpc	r27, r26
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <__divsf3_pse+0xae>
    1ffa:	62 1b       	sub	r22, r18
    1ffc:	73 0b       	sbc	r23, r19
    1ffe:	84 0b       	sbc	r24, r20
    2000:	ba 0b       	sbc	r27, r26
    2002:	ee 1f       	adc	r30, r30
    2004:	88 f7       	brcc	.-30     	; 0x1fe8 <__divsf3_pse+0x94>
    2006:	e0 95       	com	r30
    2008:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002e30 <__fixunssfsi>:
    2e30:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__fp_splitA>
    2e34:	88 f0       	brcs	.+34     	; 0x2e58 <__fixunssfsi+0x28>
    2e36:	9f 57       	subi	r25, 0x7F	; 127
    2e38:	98 f0       	brcs	.+38     	; 0x2e60 <__fixunssfsi+0x30>
    2e3a:	b9 2f       	mov	r27, r25
    2e3c:	99 27       	eor	r25, r25
    2e3e:	b7 51       	subi	r27, 0x17	; 23
    2e40:	b0 f0       	brcs	.+44     	; 0x2e6e <__fixunssfsi+0x3e>
    2e42:	e1 f0       	breq	.+56     	; 0x2e7c <__fixunssfsi+0x4c>
    2e44:	66 0f       	add	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	88 1f       	adc	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	1a f0       	brmi	.+6      	; 0x2e54 <__fixunssfsi+0x24>
    2e4e:	ba 95       	dec	r27
    2e50:	c9 f7       	brne	.-14     	; 0x2e44 <__fixunssfsi+0x14>
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <__fixunssfsi+0x4c>
    2e54:	b1 30       	cpi	r27, 0x01	; 1
    2e56:	91 f0       	breq	.+36     	; 0x2e7c <__fixunssfsi+0x4c>
    2e58:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__fp_zero>
    2e5c:	b1 e0       	ldi	r27, 0x01	; 1
    2e5e:	08 95       	ret
    2e60:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__fp_zero>
    2e64:	67 2f       	mov	r22, r23
    2e66:	78 2f       	mov	r23, r24
    2e68:	88 27       	eor	r24, r24
    2e6a:	b8 5f       	subi	r27, 0xF8	; 248
    2e6c:	39 f0       	breq	.+14     	; 0x2e7c <__fixunssfsi+0x4c>
    2e6e:	b9 3f       	cpi	r27, 0xF9	; 249
    2e70:	cc f3       	brlt	.-14     	; 0x2e64 <__fixunssfsi+0x34>
    2e72:	86 95       	lsr	r24
    2e74:	77 95       	ror	r23
    2e76:	67 95       	ror	r22
    2e78:	b3 95       	inc	r27
    2e7a:	d9 f7       	brne	.-10     	; 0x2e72 <__fixunssfsi+0x42>
    2e7c:	3e f4       	brtc	.+14     	; 0x2e8c <__fixunssfsi+0x5c>
    2e7e:	90 95       	com	r25
    2e80:	80 95       	com	r24
    2e82:	70 95       	com	r23
    2e84:	61 95       	neg	r22
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000293e <__floatunsisf>:
    293e:	e8 94       	clt
    2940:	09 c0       	rjmp	.+18     	; 0x2954 <__floatsisf+0x12>

00002942 <__floatsisf>:
    2942:	97 fb       	bst	r25, 7
    2944:	3e f4       	brtc	.+14     	; 0x2954 <__floatsisf+0x12>
    2946:	90 95       	com	r25
    2948:	80 95       	com	r24
    294a:	70 95       	com	r23
    294c:	61 95       	neg	r22
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	8f 4f       	sbci	r24, 0xFF	; 255
    2952:	9f 4f       	sbci	r25, 0xFF	; 255
    2954:	99 23       	and	r25, r25
    2956:	a9 f0       	breq	.+42     	; 0x2982 <__floatsisf+0x40>
    2958:	f9 2f       	mov	r31, r25
    295a:	96 e9       	ldi	r25, 0x96	; 150
    295c:	bb 27       	eor	r27, r27
    295e:	93 95       	inc	r25
    2960:	f6 95       	lsr	r31
    2962:	87 95       	ror	r24
    2964:	77 95       	ror	r23
    2966:	67 95       	ror	r22
    2968:	b7 95       	ror	r27
    296a:	f1 11       	cpse	r31, r1
    296c:	f8 cf       	rjmp	.-16     	; 0x295e <__floatsisf+0x1c>
    296e:	fa f4       	brpl	.+62     	; 0x29ae <__floatsisf+0x6c>
    2970:	bb 0f       	add	r27, r27
    2972:	11 f4       	brne	.+4      	; 0x2978 <__floatsisf+0x36>
    2974:	60 ff       	sbrs	r22, 0
    2976:	1b c0       	rjmp	.+54     	; 0x29ae <__floatsisf+0x6c>
    2978:	6f 5f       	subi	r22, 0xFF	; 255
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	8f 4f       	sbci	r24, 0xFF	; 255
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	16 c0       	rjmp	.+44     	; 0x29ae <__floatsisf+0x6c>
    2982:	88 23       	and	r24, r24
    2984:	11 f0       	breq	.+4      	; 0x298a <__floatsisf+0x48>
    2986:	96 e9       	ldi	r25, 0x96	; 150
    2988:	11 c0       	rjmp	.+34     	; 0x29ac <__floatsisf+0x6a>
    298a:	77 23       	and	r23, r23
    298c:	21 f0       	breq	.+8      	; 0x2996 <__floatsisf+0x54>
    298e:	9e e8       	ldi	r25, 0x8E	; 142
    2990:	87 2f       	mov	r24, r23
    2992:	76 2f       	mov	r23, r22
    2994:	05 c0       	rjmp	.+10     	; 0x29a0 <__floatsisf+0x5e>
    2996:	66 23       	and	r22, r22
    2998:	71 f0       	breq	.+28     	; 0x29b6 <__floatsisf+0x74>
    299a:	96 e8       	ldi	r25, 0x86	; 134
    299c:	86 2f       	mov	r24, r22
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	2a f0       	brmi	.+10     	; 0x29ae <__floatsisf+0x6c>
    29a4:	9a 95       	dec	r25
    29a6:	66 0f       	add	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	da f7       	brpl	.-10     	; 0x29a4 <__floatsisf+0x62>
    29ae:	88 0f       	add	r24, r24
    29b0:	96 95       	lsr	r25
    29b2:	87 95       	ror	r24
    29b4:	97 f9       	bld	r25, 7
    29b6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004176 <__fp_inf>:
    4176:	97 f9       	bld	r25, 7
    4178:	9f 67       	ori	r25, 0x7F	; 127
    417a:	80 e8       	ldi	r24, 0x80	; 128
    417c:	70 e0       	ldi	r23, 0x00	; 0
    417e:	60 e0       	ldi	r22, 0x00	; 0
    4180:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004204 <__fp_nan>:
    4204:	9f ef       	ldi	r25, 0xFF	; 255
    4206:	80 ec       	ldi	r24, 0xC0	; 192
    4208:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040da <__fp_pscA>:
    40da:	00 24       	eor	r0, r0
    40dc:	0a 94       	dec	r0
    40de:	16 16       	cp	r1, r22
    40e0:	17 06       	cpc	r1, r23
    40e2:	18 06       	cpc	r1, r24
    40e4:	09 06       	cpc	r0, r25
    40e6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040e8 <__fp_pscB>:
    40e8:	00 24       	eor	r0, r0
    40ea:	0a 94       	dec	r0
    40ec:	12 16       	cp	r1, r18
    40ee:	13 06       	cpc	r1, r19
    40f0:	14 06       	cpc	r1, r20
    40f2:	05 06       	cpc	r0, r21
    40f4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003d24 <__fp_round>:
    3d24:	09 2e       	mov	r0, r25
    3d26:	03 94       	inc	r0
    3d28:	00 0c       	add	r0, r0
    3d2a:	11 f4       	brne	.+4      	; 0x3d30 <__fp_round+0xc>
    3d2c:	88 23       	and	r24, r24
    3d2e:	52 f0       	brmi	.+20     	; 0x3d44 <__fp_round+0x20>
    3d30:	bb 0f       	add	r27, r27
    3d32:	40 f4       	brcc	.+16     	; 0x3d44 <__fp_round+0x20>
    3d34:	bf 2b       	or	r27, r31
    3d36:	11 f4       	brne	.+4      	; 0x3d3c <__fp_round+0x18>
    3d38:	60 ff       	sbrs	r22, 0
    3d3a:	04 c0       	rjmp	.+8      	; 0x3d44 <__fp_round+0x20>
    3d3c:	6f 5f       	subi	r22, 0xFF	; 255
    3d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d40:	8f 4f       	sbci	r24, 0xFF	; 255
    3d42:	9f 4f       	sbci	r25, 0xFF	; 255
    3d44:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000035de <__fp_split3>:
    35de:	57 fd       	sbrc	r21, 7
    35e0:	90 58       	subi	r25, 0x80	; 128
    35e2:	44 0f       	add	r20, r20
    35e4:	55 1f       	adc	r21, r21
    35e6:	59 f0       	breq	.+22     	; 0x35fe <__fp_splitA+0x10>
    35e8:	5f 3f       	cpi	r21, 0xFF	; 255
    35ea:	71 f0       	breq	.+28     	; 0x3608 <__fp_splitA+0x1a>
    35ec:	47 95       	ror	r20

000035ee <__fp_splitA>:
    35ee:	88 0f       	add	r24, r24
    35f0:	97 fb       	bst	r25, 7
    35f2:	99 1f       	adc	r25, r25
    35f4:	61 f0       	breq	.+24     	; 0x360e <__fp_splitA+0x20>
    35f6:	9f 3f       	cpi	r25, 0xFF	; 255
    35f8:	79 f0       	breq	.+30     	; 0x3618 <__fp_splitA+0x2a>
    35fa:	87 95       	ror	r24
    35fc:	08 95       	ret
    35fe:	12 16       	cp	r1, r18
    3600:	13 06       	cpc	r1, r19
    3602:	14 06       	cpc	r1, r20
    3604:	55 1f       	adc	r21, r21
    3606:	f2 cf       	rjmp	.-28     	; 0x35ec <__fp_split3+0xe>
    3608:	46 95       	lsr	r20
    360a:	f1 df       	rcall	.-30     	; 0x35ee <__fp_splitA>
    360c:	08 c0       	rjmp	.+16     	; 0x361e <__fp_splitA+0x30>
    360e:	16 16       	cp	r1, r22
    3610:	17 06       	cpc	r1, r23
    3612:	18 06       	cpc	r1, r24
    3614:	99 1f       	adc	r25, r25
    3616:	f1 cf       	rjmp	.-30     	; 0x35fa <__fp_splitA+0xc>
    3618:	86 95       	lsr	r24
    361a:	71 05       	cpc	r23, r1
    361c:	61 05       	cpc	r22, r1
    361e:	08 94       	sec
    3620:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040f6 <__fp_zero>:
    40f6:	e8 94       	clt

000040f8 <__fp_szero>:
    40f8:	bb 27       	eor	r27, r27
    40fa:	66 27       	eor	r22, r22
    40fc:	77 27       	eor	r23, r23
    40fe:	cb 01       	movw	r24, r22
    4100:	97 f9       	bld	r25, 7
    4102:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000041e2 <__mulsf3>:
    41e2:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3x>
    41e6:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000200a <__mulsf3x>:
    200a:	0f c0       	rjmp	.+30     	; 0x202a <__mulsf3x+0x20>
    200c:	0e 94 6d 20 	call	0x40da	; 0x40da <__fp_pscA>
    2010:	38 f0       	brcs	.+14     	; 0x2020 <__mulsf3x+0x16>
    2012:	0e 94 74 20 	call	0x40e8	; 0x40e8 <__fp_pscB>
    2016:	20 f0       	brcs	.+8      	; 0x2020 <__mulsf3x+0x16>
    2018:	95 23       	and	r25, r21
    201a:	11 f0       	breq	.+4      	; 0x2020 <__mulsf3x+0x16>
    201c:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__fp_inf>
    2020:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_nan>
    2024:	11 24       	eor	r1, r1
    2026:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_szero>
    202a:	0e 94 ef 1a 	call	0x35de	; 0x35de <__fp_split3>
    202e:	70 f3       	brcs	.-36     	; 0x200c <__mulsf3x+0x2>

00002030 <__mulsf3_pse>:
    2030:	95 9f       	mul	r25, r21
    2032:	c1 f3       	breq	.-16     	; 0x2024 <__mulsf3x+0x1a>
    2034:	95 0f       	add	r25, r21
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	55 1f       	adc	r21, r21
    203a:	62 9f       	mul	r22, r18
    203c:	f0 01       	movw	r30, r0
    203e:	72 9f       	mul	r23, r18
    2040:	bb 27       	eor	r27, r27
    2042:	f0 0d       	add	r31, r0
    2044:	b1 1d       	adc	r27, r1
    2046:	63 9f       	mul	r22, r19
    2048:	aa 27       	eor	r26, r26
    204a:	f0 0d       	add	r31, r0
    204c:	b1 1d       	adc	r27, r1
    204e:	aa 1f       	adc	r26, r26
    2050:	64 9f       	mul	r22, r20
    2052:	66 27       	eor	r22, r22
    2054:	b0 0d       	add	r27, r0
    2056:	a1 1d       	adc	r26, r1
    2058:	66 1f       	adc	r22, r22
    205a:	82 9f       	mul	r24, r18
    205c:	22 27       	eor	r18, r18
    205e:	b0 0d       	add	r27, r0
    2060:	a1 1d       	adc	r26, r1
    2062:	62 1f       	adc	r22, r18
    2064:	73 9f       	mul	r23, r19
    2066:	b0 0d       	add	r27, r0
    2068:	a1 1d       	adc	r26, r1
    206a:	62 1f       	adc	r22, r18
    206c:	83 9f       	mul	r24, r19
    206e:	a0 0d       	add	r26, r0
    2070:	61 1d       	adc	r22, r1
    2072:	22 1f       	adc	r18, r18
    2074:	74 9f       	mul	r23, r20
    2076:	33 27       	eor	r19, r19
    2078:	a0 0d       	add	r26, r0
    207a:	61 1d       	adc	r22, r1
    207c:	23 1f       	adc	r18, r19
    207e:	84 9f       	mul	r24, r20
    2080:	60 0d       	add	r22, r0
    2082:	21 1d       	adc	r18, r1
    2084:	82 2f       	mov	r24, r18
    2086:	76 2f       	mov	r23, r22
    2088:	6a 2f       	mov	r22, r26
    208a:	11 24       	eor	r1, r1
    208c:	9f 57       	subi	r25, 0x7F	; 127
    208e:	50 40       	sbci	r21, 0x00	; 0
    2090:	9a f0       	brmi	.+38     	; 0x20b8 <__mulsf3_pse+0x88>
    2092:	f1 f0       	breq	.+60     	; 0x20d0 <__mulsf3_pse+0xa0>
    2094:	88 23       	and	r24, r24
    2096:	4a f0       	brmi	.+18     	; 0x20aa <__mulsf3_pse+0x7a>
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	bb 1f       	adc	r27, r27
    209e:	66 1f       	adc	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	91 50       	subi	r25, 0x01	; 1
    20a6:	50 40       	sbci	r21, 0x00	; 0
    20a8:	a9 f7       	brne	.-22     	; 0x2094 <__mulsf3_pse+0x64>
    20aa:	9e 3f       	cpi	r25, 0xFE	; 254
    20ac:	51 05       	cpc	r21, r1
    20ae:	80 f0       	brcs	.+32     	; 0x20d0 <__mulsf3_pse+0xa0>
    20b0:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__fp_inf>
    20b4:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_szero>
    20b8:	5f 3f       	cpi	r21, 0xFF	; 255
    20ba:	e4 f3       	brlt	.-8      	; 0x20b4 <__mulsf3_pse+0x84>
    20bc:	98 3e       	cpi	r25, 0xE8	; 232
    20be:	d4 f3       	brlt	.-12     	; 0x20b4 <__mulsf3_pse+0x84>
    20c0:	86 95       	lsr	r24
    20c2:	77 95       	ror	r23
    20c4:	67 95       	ror	r22
    20c6:	b7 95       	ror	r27
    20c8:	f7 95       	ror	r31
    20ca:	e7 95       	ror	r30
    20cc:	9f 5f       	subi	r25, 0xFF	; 255
    20ce:	c1 f7       	brne	.-16     	; 0x20c0 <__mulsf3_pse+0x90>
    20d0:	fe 2b       	or	r31, r30
    20d2:	88 0f       	add	r24, r24
    20d4:	91 1d       	adc	r25, r1
    20d6:	96 95       	lsr	r25
    20d8:	87 95       	ror	r24
    20da:	97 f9       	bld	r25, 7
    20dc:	08 95       	ret

Disassembly of section .text.avrlibc:

000005d2 <vfprintf>:
 5d2:	a4 e1       	ldi	r26, 0x14	; 20
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	ef ee       	ldi	r30, 0xEF	; 239
 5d8:	f2 e0       	ldi	r31, 0x02	; 2
 5da:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__prologue_saves__>
 5de:	6c 01       	movw	r12, r24
 5e0:	1a 01       	movw	r2, r20
 5e2:	46 2e       	mov	r4, r22
 5e4:	59 01       	movw	r10, r18
 5e6:	fc 01       	movw	r30, r24
 5e8:	10 86       	std	Z+8, r1	; 0x08
 5ea:	17 82       	std	Z+7, r1	; 0x07
 5ec:	84 81       	ldd	r24, Z+4	; 0x04
 5ee:	81 ff       	sbrs	r24, 1
 5f0:	62 c3       	rjmp	.+1732   	; 0xcb6 <__EEPROM_REGION_LENGTH__+0x4b6>
 5f2:	ce 01       	movw	r24, r28
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	9d 87       	std	Y+13, r25	; 0x0d
 5f8:	8c 87       	std	Y+12, r24	; 0x0c
 5fa:	a0 e8       	ldi	r26, 0x80	; 128
 5fc:	8a 8b       	std	Y+18, r24	; 0x12
 5fe:	9b 8b       	std	Y+19, r25	; 0x13
 600:	ac 8b       	std	Y+20, r26	; 0x14
 602:	f1 01       	movw	r30, r2
 604:	84 91       	lpm	r24, Z
 606:	47 fc       	sbrc	r4, 7
 608:	80 81       	ld	r24, Z
 60a:	88 23       	and	r24, r24
 60c:	09 f4       	brne	.+2      	; 0x610 <vfprintf+0x3e>
 60e:	4f c3       	rjmp	.+1694   	; 0xcae <__EEPROM_REGION_LENGTH__+0x4ae>
 610:	44 2d       	mov	r20, r4
 612:	91 01       	movw	r18, r2
 614:	2f 5f       	subi	r18, 0xFF	; 255
 616:	3f 4f       	sbci	r19, 0xFF	; 255
 618:	4f 4f       	sbci	r20, 0xFF	; 255
 61a:	85 32       	cpi	r24, 0x25	; 37
 61c:	19 f0       	breq	.+6      	; 0x624 <vfprintf+0x52>
 61e:	19 01       	movw	r2, r18
 620:	44 2e       	mov	r4, r20
 622:	0a c0       	rjmp	.+20     	; 0x638 <vfprintf+0x66>
 624:	f9 01       	movw	r30, r18
 626:	84 91       	lpm	r24, Z
 628:	47 fd       	sbrc	r20, 7
 62a:	80 81       	ld	r24, Z
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	29 0e       	add	r2, r25
 630:	31 1c       	adc	r3, r1
 632:	41 1c       	adc	r4, r1
 634:	85 32       	cpi	r24, 0x25	; 37
 636:	49 f4       	brne	.+18     	; 0x64a <vfprintf+0x78>
 638:	b6 01       	movw	r22, r12
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 640:	bf 86       	std	Y+15, r11	; 0x0f
 642:	ae 86       	std	Y+14, r10	; 0x0e
 644:	ae 84       	ldd	r10, Y+14	; 0x0e
 646:	bf 84       	ldd	r11, Y+15	; 0x0f
 648:	dc cf       	rjmp	.-72     	; 0x602 <vfprintf+0x30>
 64a:	10 e0       	ldi	r17, 0x00	; 0
 64c:	f1 2c       	mov	r15, r1
 64e:	00 e0       	ldi	r16, 0x00	; 0
 650:	00 32       	cpi	r16, 0x20	; 32
 652:	a0 f4       	brcc	.+40     	; 0x67c <vfprintf+0xaa>
 654:	8b 32       	cpi	r24, 0x2B	; 43
 656:	69 f0       	breq	.+26     	; 0x672 <vfprintf+0xa0>
 658:	30 f4       	brcc	.+12     	; 0x666 <vfprintf+0x94>
 65a:	80 32       	cpi	r24, 0x20	; 32
 65c:	59 f0       	breq	.+22     	; 0x674 <vfprintf+0xa2>
 65e:	83 32       	cpi	r24, 0x23	; 35
 660:	69 f4       	brne	.+26     	; 0x67c <vfprintf+0xaa>
 662:	00 61       	ori	r16, 0x10	; 16
 664:	2c c0       	rjmp	.+88     	; 0x6be <vfprintf+0xec>
 666:	8d 32       	cpi	r24, 0x2D	; 45
 668:	39 f0       	breq	.+14     	; 0x678 <vfprintf+0xa6>
 66a:	80 33       	cpi	r24, 0x30	; 48
 66c:	39 f4       	brne	.+14     	; 0x67c <vfprintf+0xaa>
 66e:	01 60       	ori	r16, 0x01	; 1
 670:	26 c0       	rjmp	.+76     	; 0x6be <vfprintf+0xec>
 672:	02 60       	ori	r16, 0x02	; 2
 674:	04 60       	ori	r16, 0x04	; 4
 676:	23 c0       	rjmp	.+70     	; 0x6be <vfprintf+0xec>
 678:	08 60       	ori	r16, 0x08	; 8
 67a:	21 c0       	rjmp	.+66     	; 0x6be <vfprintf+0xec>
 67c:	07 fd       	sbrc	r16, 7
 67e:	29 c0       	rjmp	.+82     	; 0x6d2 <vfprintf+0x100>
 680:	90 ed       	ldi	r25, 0xD0	; 208
 682:	98 0f       	add	r25, r24
 684:	9a 30       	cpi	r25, 0x0A	; 10
 686:	78 f4       	brcc	.+30     	; 0x6a6 <vfprintf+0xd4>
 688:	06 ff       	sbrs	r16, 6
 68a:	06 c0       	rjmp	.+12     	; 0x698 <vfprintf+0xc6>
 68c:	aa e0       	ldi	r26, 0x0A	; 10
 68e:	1a 9f       	mul	r17, r26
 690:	90 0d       	add	r25, r0
 692:	11 24       	eor	r1, r1
 694:	19 2f       	mov	r17, r25
 696:	13 c0       	rjmp	.+38     	; 0x6be <vfprintf+0xec>
 698:	ea e0       	ldi	r30, 0x0A	; 10
 69a:	fe 9e       	mul	r15, r30
 69c:	90 0d       	add	r25, r0
 69e:	11 24       	eor	r1, r1
 6a0:	f9 2e       	mov	r15, r25
 6a2:	00 62       	ori	r16, 0x20	; 32
 6a4:	0c c0       	rjmp	.+24     	; 0x6be <vfprintf+0xec>
 6a6:	8e 32       	cpi	r24, 0x2E	; 46
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <vfprintf+0xe0>
 6aa:	06 fd       	sbrc	r16, 6
 6ac:	00 c3       	rjmp	.+1536   	; 0xcae <__EEPROM_REGION_LENGTH__+0x4ae>
 6ae:	00 64       	ori	r16, 0x40	; 64
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <vfprintf+0xec>
 6b2:	8c 36       	cpi	r24, 0x6C	; 108
 6b4:	11 f4       	brne	.+4      	; 0x6ba <vfprintf+0xe8>
 6b6:	00 68       	ori	r16, 0x80	; 128
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <vfprintf+0xec>
 6ba:	88 36       	cpi	r24, 0x68	; 104
 6bc:	51 f4       	brne	.+20     	; 0x6d2 <vfprintf+0x100>
 6be:	f1 01       	movw	r30, r2
 6c0:	84 91       	lpm	r24, Z
 6c2:	47 fc       	sbrc	r4, 7
 6c4:	80 81       	ld	r24, Z
 6c6:	ff ef       	ldi	r31, 0xFF	; 255
 6c8:	2f 1a       	sub	r2, r31
 6ca:	3f 0a       	sbc	r3, r31
 6cc:	4f 0a       	sbc	r4, r31
 6ce:	81 11       	cpse	r24, r1
 6d0:	bf cf       	rjmp	.-130    	; 0x650 <vfprintf+0x7e>
 6d2:	9b eb       	ldi	r25, 0xBB	; 187
 6d4:	98 0f       	add	r25, r24
 6d6:	93 30       	cpi	r25, 0x03	; 3
 6d8:	18 f4       	brcc	.+6      	; 0x6e0 <vfprintf+0x10e>
 6da:	00 61       	ori	r16, 0x10	; 16
 6dc:	80 5e       	subi	r24, 0xE0	; 224
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <vfprintf+0x11a>
 6e0:	9b e9       	ldi	r25, 0x9B	; 155
 6e2:	98 0f       	add	r25, r24
 6e4:	93 30       	cpi	r25, 0x03	; 3
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <vfprintf+0x118>
 6e8:	66 c1       	rjmp	.+716    	; 0x9b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 6ea:	0f 7e       	andi	r16, 0xEF	; 239
 6ec:	06 ff       	sbrs	r16, 6
 6ee:	16 e0       	ldi	r17, 0x06	; 6
 6f0:	0f 73       	andi	r16, 0x3F	; 63
 6f2:	70 2e       	mov	r7, r16
 6f4:	85 36       	cpi	r24, 0x65	; 101
 6f6:	21 f4       	brne	.+8      	; 0x700 <vfprintf+0x12e>
 6f8:	20 2f       	mov	r18, r16
 6fa:	20 64       	ori	r18, 0x40	; 64
 6fc:	72 2e       	mov	r7, r18
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <vfprintf+0x13e>
 700:	86 36       	cpi	r24, 0x66	; 102
 702:	21 f4       	brne	.+8      	; 0x70c <vfprintf+0x13a>
 704:	80 2f       	mov	r24, r16
 706:	80 68       	ori	r24, 0x80	; 128
 708:	78 2e       	mov	r7, r24
 70a:	02 c0       	rjmp	.+4      	; 0x710 <vfprintf+0x13e>
 70c:	11 11       	cpse	r17, r1
 70e:	11 50       	subi	r17, 0x01	; 1
 710:	77 fe       	sbrs	r7, 7
 712:	07 c0       	rjmp	.+14     	; 0x722 <vfprintf+0x150>
 714:	1c 33       	cpi	r17, 0x3C	; 60
 716:	50 f4       	brcc	.+20     	; 0x72c <vfprintf+0x15a>
 718:	ee 24       	eor	r14, r14
 71a:	e3 94       	inc	r14
 71c:	e1 0e       	add	r14, r17
 71e:	27 e0       	ldi	r18, 0x07	; 7
 720:	0b c0       	rjmp	.+22     	; 0x738 <vfprintf+0x166>
 722:	18 30       	cpi	r17, 0x08	; 8
 724:	38 f0       	brcs	.+14     	; 0x734 <vfprintf+0x162>
 726:	27 e0       	ldi	r18, 0x07	; 7
 728:	17 e0       	ldi	r17, 0x07	; 7
 72a:	05 c0       	rjmp	.+10     	; 0x736 <vfprintf+0x164>
 72c:	27 e0       	ldi	r18, 0x07	; 7
 72e:	6c e3       	ldi	r22, 0x3C	; 60
 730:	e6 2e       	mov	r14, r22
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x166>
 734:	21 2f       	mov	r18, r17
 736:	e1 2c       	mov	r14, r1
 738:	f5 01       	movw	r30, r10
 73a:	34 96       	adiw	r30, 0x04	; 4
 73c:	ff 87       	std	Y+15, r31	; 0x0f
 73e:	ee 87       	std	Y+14, r30	; 0x0e
 740:	f5 01       	movw	r30, r10
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	82 81       	ldd	r24, Z+2	; 0x02
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	0e 2d       	mov	r16, r14
 74c:	ae 01       	movw	r20, r28
 74e:	4f 5f       	subi	r20, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255
 752:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__ftoa_engine>
 756:	5c 01       	movw	r10, r24
 758:	59 80       	ldd	r5, Y+1	; 0x01
 75a:	50 fe       	sbrs	r5, 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <vfprintf+0x190>
 75e:	53 fe       	sbrs	r5, 3
 760:	06 c0       	rjmp	.+12     	; 0x76e <vfprintf+0x19c>
 762:	71 fc       	sbrc	r7, 1
 764:	06 c0       	rjmp	.+12     	; 0x772 <vfprintf+0x1a0>
 766:	72 fe       	sbrs	r7, 2
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0x1a4>
 76a:	00 e2       	ldi	r16, 0x20	; 32
 76c:	05 c0       	rjmp	.+10     	; 0x778 <vfprintf+0x1a6>
 76e:	0d e2       	ldi	r16, 0x2D	; 45
 770:	03 c0       	rjmp	.+6      	; 0x778 <vfprintf+0x1a6>
 772:	0b e2       	ldi	r16, 0x2B	; 43
 774:	01 c0       	rjmp	.+2      	; 0x778 <vfprintf+0x1a6>
 776:	00 e0       	ldi	r16, 0x00	; 0
 778:	85 2d       	mov	r24, r5
 77a:	8c 70       	andi	r24, 0x0C	; 12
 77c:	19 f0       	breq	.+6      	; 0x784 <vfprintf+0x1b2>
 77e:	01 11       	cpse	r16, r1
 780:	73 c2       	rjmp	.+1254   	; 0xc68 <__EEPROM_REGION_LENGTH__+0x468>
 782:	be c2       	rjmp	.+1404   	; 0xd00 <__EEPROM_REGION_LENGTH__+0x500>
 784:	77 fe       	sbrs	r7, 7
 786:	0f c0       	rjmp	.+30     	; 0x7a6 <vfprintf+0x1d4>
 788:	ea 0c       	add	r14, r10
 78a:	54 fe       	sbrs	r5, 4
 78c:	04 c0       	rjmp	.+8      	; 0x796 <vfprintf+0x1c4>
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	81 33       	cpi	r24, 0x31	; 49
 792:	09 f4       	brne	.+2      	; 0x796 <vfprintf+0x1c4>
 794:	ea 94       	dec	r14
 796:	1e 14       	cp	r1, r14
 798:	74 f5       	brge	.+92     	; 0x7f6 <vfprintf+0x224>
 79a:	28 e0       	ldi	r18, 0x08	; 8
 79c:	2e 15       	cp	r18, r14
 79e:	78 f5       	brcc	.+94     	; 0x7fe <vfprintf+0x22c>
 7a0:	38 e0       	ldi	r19, 0x08	; 8
 7a2:	e3 2e       	mov	r14, r19
 7a4:	2c c0       	rjmp	.+88     	; 0x7fe <vfprintf+0x22c>
 7a6:	76 fc       	sbrc	r7, 6
 7a8:	2a c0       	rjmp	.+84     	; 0x7fe <vfprintf+0x22c>
 7aa:	81 2f       	mov	r24, r17
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	8a 15       	cp	r24, r10
 7b0:	9b 05       	cpc	r25, r11
 7b2:	9c f0       	brlt	.+38     	; 0x7da <vfprintf+0x208>
 7b4:	8c ef       	ldi	r24, 0xFC	; 252
 7b6:	a8 16       	cp	r10, r24
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	b8 06       	cpc	r11, r24
 7bc:	74 f0       	brlt	.+28     	; 0x7da <vfprintf+0x208>
 7be:	97 2d       	mov	r25, r7
 7c0:	90 68       	ori	r25, 0x80	; 128
 7c2:	79 2e       	mov	r7, r25
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <vfprintf+0x208>
 7c6:	e2 e0       	ldi	r30, 0x02	; 2
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	ec 0f       	add	r30, r28
 7cc:	fd 1f       	adc	r31, r29
 7ce:	e1 0f       	add	r30, r17
 7d0:	f1 1d       	adc	r31, r1
 7d2:	80 81       	ld	r24, Z
 7d4:	80 33       	cpi	r24, 0x30	; 48
 7d6:	19 f4       	brne	.+6      	; 0x7de <vfprintf+0x20c>
 7d8:	11 50       	subi	r17, 0x01	; 1
 7da:	11 11       	cpse	r17, r1
 7dc:	f4 cf       	rjmp	.-24     	; 0x7c6 <vfprintf+0x1f4>
 7de:	77 fe       	sbrs	r7, 7
 7e0:	0e c0       	rjmp	.+28     	; 0x7fe <vfprintf+0x22c>
 7e2:	ee 24       	eor	r14, r14
 7e4:	e3 94       	inc	r14
 7e6:	e1 0e       	add	r14, r17
 7e8:	81 2f       	mov	r24, r17
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	a8 16       	cp	r10, r24
 7ee:	b9 06       	cpc	r11, r25
 7f0:	2c f4       	brge	.+10     	; 0x7fc <vfprintf+0x22a>
 7f2:	1a 19       	sub	r17, r10
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <vfprintf+0x22c>
 7f6:	ee 24       	eor	r14, r14
 7f8:	e3 94       	inc	r14
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <vfprintf+0x22c>
 7fc:	10 e0       	ldi	r17, 0x00	; 0
 7fe:	77 fe       	sbrs	r7, 7
 800:	06 c0       	rjmp	.+12     	; 0x80e <__EEPROM_REGION_LENGTH__+0xe>
 802:	1a 14       	cp	r1, r10
 804:	1b 04       	cpc	r1, r11
 806:	34 f4       	brge	.+12     	; 0x814 <__EEPROM_REGION_LENGTH__+0x14>
 808:	c5 01       	movw	r24, r10
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	05 c0       	rjmp	.+10     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 80e:	85 e0       	ldi	r24, 0x05	; 5
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	01 11       	cpse	r16, r1
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	11 23       	and	r17, r17
 81e:	31 f0       	breq	.+12     	; 0x82c <__EEPROM_REGION_LENGTH__+0x2c>
 820:	21 2f       	mov	r18, r17
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	2f 5f       	subi	r18, 0xFF	; 255
 826:	3f 4f       	sbci	r19, 0xFF	; 255
 828:	82 0f       	add	r24, r18
 82a:	93 1f       	adc	r25, r19
 82c:	2f 2d       	mov	r18, r15
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	82 17       	cp	r24, r18
 832:	93 07       	cpc	r25, r19
 834:	14 f4       	brge	.+4      	; 0x83a <__EEPROM_REGION_LENGTH__+0x3a>
 836:	f8 1a       	sub	r15, r24
 838:	01 c0       	rjmp	.+2      	; 0x83c <__EEPROM_REGION_LENGTH__+0x3c>
 83a:	f1 2c       	mov	r15, r1
 83c:	87 2d       	mov	r24, r7
 83e:	89 70       	andi	r24, 0x09	; 9
 840:	49 f4       	brne	.+18     	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 842:	ff 20       	and	r15, r15
 844:	39 f0       	breq	.+14     	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 846:	b6 01       	movw	r22, r12
 848:	80 e2       	ldi	r24, 0x20	; 32
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 850:	fa 94       	dec	r15
 852:	f7 cf       	rjmp	.-18     	; 0x842 <__EEPROM_REGION_LENGTH__+0x42>
 854:	00 23       	and	r16, r16
 856:	29 f0       	breq	.+10     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 858:	b6 01       	movw	r22, r12
 85a:	80 2f       	mov	r24, r16
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 862:	73 fc       	sbrc	r7, 3
 864:	09 c0       	rjmp	.+18     	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
 866:	ff 20       	and	r15, r15
 868:	39 f0       	breq	.+14     	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
 86a:	b6 01       	movw	r22, r12
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 874:	fa 94       	dec	r15
 876:	f7 cf       	rjmp	.-18     	; 0x866 <__EEPROM_REGION_LENGTH__+0x66>
 878:	77 fe       	sbrs	r7, 7
 87a:	49 c0       	rjmp	.+146    	; 0x90e <__EEPROM_REGION_LENGTH__+0x10e>
 87c:	35 01       	movw	r6, r10
 87e:	b7 fe       	sbrs	r11, 7
 880:	02 c0       	rjmp	.+4      	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 882:	61 2c       	mov	r6, r1
 884:	71 2c       	mov	r7, r1
 886:	c5 01       	movw	r24, r10
 888:	86 19       	sub	r24, r6
 88a:	97 09       	sbc	r25, r7
 88c:	88 24       	eor	r8, r8
 88e:	83 94       	inc	r8
 890:	91 2c       	mov	r9, r1
 892:	8c 0e       	add	r8, r28
 894:	9d 1e       	adc	r9, r29
 896:	88 0e       	add	r8, r24
 898:	99 1e       	adc	r9, r25
 89a:	f5 01       	movw	r30, r10
 89c:	ee 19       	sub	r30, r14
 89e:	f1 09       	sbc	r31, r1
 8a0:	f9 8b       	std	Y+17, r31	; 0x11
 8a2:	e8 8b       	std	Y+16, r30	; 0x10
 8a4:	01 2f       	mov	r16, r17
 8a6:	10 e0       	ldi	r17, 0x00	; 0
 8a8:	11 95       	neg	r17
 8aa:	01 95       	neg	r16
 8ac:	11 09       	sbc	r17, r1
 8ae:	ff ef       	ldi	r31, 0xFF	; 255
 8b0:	6f 16       	cp	r6, r31
 8b2:	7f 06       	cpc	r7, r31
 8b4:	29 f4       	brne	.+10     	; 0x8c0 <__EEPROM_REGION_LENGTH__+0xc0>
 8b6:	b6 01       	movw	r22, r12
 8b8:	8e e2       	ldi	r24, 0x2E	; 46
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 8c0:	a6 14       	cp	r10, r6
 8c2:	b7 04       	cpc	r11, r7
 8c4:	44 f0       	brlt	.+16     	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
 8c6:	88 89       	ldd	r24, Y+16	; 0x10
 8c8:	99 89       	ldd	r25, Y+17	; 0x11
 8ca:	86 15       	cp	r24, r6
 8cc:	97 05       	cpc	r25, r7
 8ce:	1c f4       	brge	.+6      	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
 8d0:	f4 01       	movw	r30, r8
 8d2:	81 81       	ldd	r24, Z+1	; 0x01
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8d6:	80 e3       	ldi	r24, 0x30	; 48
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
 8da:	6f 1a       	sub	r6, r31
 8dc:	71 08       	sbc	r7, r1
 8de:	2f ef       	ldi	r18, 0xFF	; 255
 8e0:	82 1a       	sub	r8, r18
 8e2:	92 0a       	sbc	r9, r18
 8e4:	60 16       	cp	r6, r16
 8e6:	71 06       	cpc	r7, r17
 8e8:	2c f0       	brlt	.+10     	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 8ea:	b6 01       	movw	r22, r12
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 8f2:	dd cf       	rjmp	.-70     	; 0x8ae <__EEPROM_REGION_LENGTH__+0xae>
 8f4:	a6 14       	cp	r10, r6
 8f6:	b7 04       	cpc	r11, r7
 8f8:	39 f4       	brne	.+14     	; 0x908 <__EEPROM_REGION_LENGTH__+0x108>
 8fa:	9a 81       	ldd	r25, Y+2	; 0x02
 8fc:	96 33       	cpi	r25, 0x36	; 54
 8fe:	18 f4       	brcc	.+6      	; 0x906 <__EEPROM_REGION_LENGTH__+0x106>
 900:	95 33       	cpi	r25, 0x35	; 53
 902:	11 f4       	brne	.+4      	; 0x908 <__EEPROM_REGION_LENGTH__+0x108>
 904:	54 fe       	sbrs	r5, 4
 906:	81 e3       	ldi	r24, 0x31	; 49
 908:	b6 01       	movw	r22, r12
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	51 c0       	rjmp	.+162    	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 90e:	8a 81       	ldd	r24, Y+2	; 0x02
 910:	81 33       	cpi	r24, 0x31	; 49
 912:	19 f0       	breq	.+6      	; 0x91a <__EEPROM_REGION_LENGTH__+0x11a>
 914:	95 2d       	mov	r25, r5
 916:	9f 7e       	andi	r25, 0xEF	; 239
 918:	59 2e       	mov	r5, r25
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 922:	11 11       	cpse	r17, r1
 924:	05 c0       	rjmp	.+10     	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
 926:	74 fc       	sbrc	r7, 4
 928:	1c c0       	rjmp	.+56     	; 0x962 <__EEPROM_REGION_LENGTH__+0x162>
 92a:	85 e6       	ldi	r24, 0x65	; 101
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	1b c0       	rjmp	.+54     	; 0x966 <__EEPROM_REGION_LENGTH__+0x166>
 930:	b6 01       	movw	r22, r12
 932:	8e e2       	ldi	r24, 0x2E	; 46
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 93a:	02 e0       	ldi	r16, 0x02	; 2
 93c:	01 0f       	add	r16, r17
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	11 e0       	ldi	r17, 0x01	; 1
 942:	18 0f       	add	r17, r24
 944:	e1 e0       	ldi	r30, 0x01	; 1
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	ec 0f       	add	r30, r28
 94a:	fd 1f       	adc	r31, r29
 94c:	e8 0f       	add	r30, r24
 94e:	f1 1d       	adc	r31, r1
 950:	80 81       	ld	r24, Z
 952:	b6 01       	movw	r22, r12
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 95a:	81 2f       	mov	r24, r17
 95c:	10 13       	cpse	r17, r16
 95e:	f0 cf       	rjmp	.-32     	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 960:	e2 cf       	rjmp	.-60     	; 0x926 <__EEPROM_REGION_LENGTH__+0x126>
 962:	85 e4       	ldi	r24, 0x45	; 69
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	b6 01       	movw	r22, r12
 968:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 96c:	b7 fc       	sbrc	r11, 7
 96e:	05 c0       	rjmp	.+10     	; 0x97a <__EEPROM_REGION_LENGTH__+0x17a>
 970:	a1 14       	cp	r10, r1
 972:	b1 04       	cpc	r11, r1
 974:	39 f4       	brne	.+14     	; 0x984 <__EEPROM_REGION_LENGTH__+0x184>
 976:	54 fe       	sbrs	r5, 4
 978:	05 c0       	rjmp	.+10     	; 0x984 <__EEPROM_REGION_LENGTH__+0x184>
 97a:	b1 94       	neg	r11
 97c:	a1 94       	neg	r10
 97e:	b1 08       	sbc	r11, r1
 980:	8d e2       	ldi	r24, 0x2D	; 45
 982:	01 c0       	rjmp	.+2      	; 0x986 <__EEPROM_REGION_LENGTH__+0x186>
 984:	8b e2       	ldi	r24, 0x2B	; 43
 986:	b6 01       	movw	r22, r12
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	ea e0       	ldi	r30, 0x0A	; 10
 992:	ae 16       	cp	r10, r30
 994:	b1 04       	cpc	r11, r1
 996:	2c f0       	brlt	.+10     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 998:	8f 5f       	subi	r24, 0xFF	; 255
 99a:	aa e0       	ldi	r26, 0x0A	; 10
 99c:	aa 1a       	sub	r10, r26
 99e:	b1 08       	sbc	r11, r1
 9a0:	f7 cf       	rjmp	.-18     	; 0x990 <__EEPROM_REGION_LENGTH__+0x190>
 9a2:	b6 01       	movw	r22, r12
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 9aa:	b6 01       	movw	r22, r12
 9ac:	c5 01       	movw	r24, r10
 9ae:	c0 96       	adiw	r24, 0x30	; 48
 9b0:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 9b4:	72 c1       	rjmp	.+740    	; 0xc9a <__EEPROM_REGION_LENGTH__+0x49a>
 9b6:	83 36       	cpi	r24, 0x63	; 99
 9b8:	31 f0       	breq	.+12     	; 0x9c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 9ba:	83 37       	cpi	r24, 0x73	; 115
 9bc:	91 f0       	breq	.+36     	; 0x9e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 9be:	83 35       	cpi	r24, 0x53	; 83
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 9c2:	5d c0       	rjmp	.+186    	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 9c4:	24 c0       	rjmp	.+72     	; 0xa0e <__EEPROM_REGION_LENGTH__+0x20e>
 9c6:	c5 01       	movw	r24, r10
 9c8:	02 96       	adiw	r24, 0x02	; 2
 9ca:	9f 87       	std	Y+15, r25	; 0x0f
 9cc:	8e 87       	std	Y+14, r24	; 0x0e
 9ce:	f5 01       	movw	r30, r10
 9d0:	80 81       	ld	r24, Z
 9d2:	89 83       	std	Y+1, r24	; 0x01
 9d4:	6a 88       	ldd	r6, Y+18	; 0x12
 9d6:	7b 88       	ldd	r7, Y+19	; 0x13
 9d8:	8c 88       	ldd	r8, Y+20	; 0x14
 9da:	aa 24       	eor	r10, r10
 9dc:	a3 94       	inc	r10
 9de:	b1 2c       	mov	r11, r1
 9e0:	14 c0       	rjmp	.+40     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 9e2:	c5 01       	movw	r24, r10
 9e4:	03 96       	adiw	r24, 0x03	; 3
 9e6:	9f 87       	std	Y+15, r25	; 0x0f
 9e8:	8e 87       	std	Y+14, r24	; 0x0e
 9ea:	f5 01       	movw	r30, r10
 9ec:	60 80       	ld	r6, Z
 9ee:	71 80       	ldd	r7, Z+1	; 0x01
 9f0:	82 80       	ldd	r8, Z+2	; 0x02
 9f2:	06 ff       	sbrs	r16, 6
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__EEPROM_REGION_LENGTH__+0x1fc>
 9f6:	41 2f       	mov	r20, r17
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
 9fc:	4f ef       	ldi	r20, 0xFF	; 255
 9fe:	5f ef       	ldi	r21, 0xFF	; 255
 a00:	88 2d       	mov	r24, r8
 a02:	b3 01       	movw	r22, r6
 a04:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <strnlen>
 a08:	5c 01       	movw	r10, r24
 a0a:	0f 77       	andi	r16, 0x7F	; 127
 a0c:	15 c0       	rjmp	.+42     	; 0xa38 <__EEPROM_REGION_LENGTH__+0x238>
 a0e:	c5 01       	movw	r24, r10
 a10:	03 96       	adiw	r24, 0x03	; 3
 a12:	9f 87       	std	Y+15, r25	; 0x0f
 a14:	8e 87       	std	Y+14, r24	; 0x0e
 a16:	f5 01       	movw	r30, r10
 a18:	60 80       	ld	r6, Z
 a1a:	71 80       	ldd	r7, Z+1	; 0x01
 a1c:	82 80       	ldd	r8, Z+2	; 0x02
 a1e:	06 ff       	sbrs	r16, 6
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <__EEPROM_REGION_LENGTH__+0x228>
 a22:	41 2f       	mov	r20, r17
 a24:	50 e0       	ldi	r21, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <__EEPROM_REGION_LENGTH__+0x22c>
 a28:	4f ef       	ldi	r20, 0xFF	; 255
 a2a:	5f ef       	ldi	r21, 0xFF	; 255
 a2c:	88 2d       	mov	r24, r8
 a2e:	b3 01       	movw	r22, r6
 a30:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <strnlen>
 a34:	5c 01       	movw	r10, r24
 a36:	00 68       	ori	r16, 0x80	; 128
 a38:	03 fd       	sbrc	r16, 3
 a3a:	1d c0       	rjmp	.+58     	; 0xa76 <__EEPROM_REGION_LENGTH__+0x276>
 a3c:	8f 2d       	mov	r24, r15
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	a8 16       	cp	r10, r24
 a42:	b9 06       	cpc	r11, r25
 a44:	c0 f4       	brcc	.+48     	; 0xa76 <__EEPROM_REGION_LENGTH__+0x276>
 a46:	b6 01       	movw	r22, r12
 a48:	80 e2       	ldi	r24, 0x20	; 32
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 a50:	fa 94       	dec	r15
 a52:	f4 cf       	rjmp	.-24     	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 a54:	f3 01       	movw	r30, r6
 a56:	84 91       	lpm	r24, Z
 a58:	87 fc       	sbrc	r8, 7
 a5a:	80 81       	ld	r24, Z
 a5c:	ff ef       	ldi	r31, 0xFF	; 255
 a5e:	6f 1a       	sub	r6, r31
 a60:	7f 0a       	sbc	r7, r31
 a62:	8f 0a       	sbc	r8, r31
 a64:	b6 01       	movw	r22, r12
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 a6c:	f1 10       	cpse	r15, r1
 a6e:	fa 94       	dec	r15
 a70:	21 e0       	ldi	r18, 0x01	; 1
 a72:	a2 1a       	sub	r10, r18
 a74:	b1 08       	sbc	r11, r1
 a76:	a1 14       	cp	r10, r1
 a78:	b1 04       	cpc	r11, r1
 a7a:	61 f7       	brne	.-40     	; 0xa54 <__EEPROM_REGION_LENGTH__+0x254>
 a7c:	0e c1       	rjmp	.+540    	; 0xc9a <__EEPROM_REGION_LENGTH__+0x49a>
 a7e:	84 36       	cpi	r24, 0x64	; 100
 a80:	11 f0       	breq	.+4      	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 a82:	89 36       	cpi	r24, 0x69	; 105
 a84:	79 f5       	brne	.+94     	; 0xae4 <__EEPROM_REGION_LENGTH__+0x2e4>
 a86:	c5 01       	movw	r24, r10
 a88:	07 ff       	sbrs	r16, 7
 a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__EEPROM_REGION_LENGTH__+0x29e>
 a8c:	04 96       	adiw	r24, 0x04	; 4
 a8e:	9f 87       	std	Y+15, r25	; 0x0f
 a90:	8e 87       	std	Y+14, r24	; 0x0e
 a92:	f5 01       	movw	r30, r10
 a94:	60 81       	ld	r22, Z
 a96:	71 81       	ldd	r23, Z+1	; 0x01
 a98:	82 81       	ldd	r24, Z+2	; 0x02
 a9a:	93 81       	ldd	r25, Z+3	; 0x03
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <__EEPROM_REGION_LENGTH__+0x2b2>
 a9e:	02 96       	adiw	r24, 0x02	; 2
 aa0:	9f 87       	std	Y+15, r25	; 0x0f
 aa2:	8e 87       	std	Y+14, r24	; 0x0e
 aa4:	f5 01       	movw	r30, r10
 aa6:	60 81       	ld	r22, Z
 aa8:	71 81       	ldd	r23, Z+1	; 0x01
 aaa:	07 2e       	mov	r0, r23
 aac:	00 0c       	add	r0, r0
 aae:	88 0b       	sbc	r24, r24
 ab0:	99 0b       	sbc	r25, r25
 ab2:	0f 76       	andi	r16, 0x6F	; 111
 ab4:	e0 2e       	mov	r14, r16
 ab6:	97 ff       	sbrs	r25, 7
 ab8:	0a c0       	rjmp	.+20     	; 0xace <__EEPROM_REGION_LENGTH__+0x2ce>
 aba:	90 95       	com	r25
 abc:	80 95       	com	r24
 abe:	70 95       	com	r23
 ac0:	61 95       	neg	r22
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	f0 2f       	mov	r31, r16
 aca:	f0 68       	ori	r31, 0x80	; 128
 acc:	ef 2e       	mov	r14, r31
 ace:	2a e0       	ldi	r18, 0x0A	; 10
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	ae 01       	movw	r20, r28
 ad4:	4f 5f       	subi	r20, 0xFF	; 255
 ad6:	5f 4f       	sbci	r21, 0xFF	; 255
 ad8:	0e 94 34 11 	call	0x2268	; 0x2268 <__ultoa_invert>
 adc:	a8 2e       	mov	r10, r24
 ade:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae0:	a2 1a       	sub	r10, r18
 ae2:	4b c0       	rjmp	.+150    	; 0xb7a <__EEPROM_REGION_LENGTH__+0x37a>
 ae4:	85 37       	cpi	r24, 0x75	; 117
 ae6:	29 f4       	brne	.+10     	; 0xaf2 <__EEPROM_REGION_LENGTH__+0x2f2>
 ae8:	0f 7e       	andi	r16, 0xEF	; 239
 aea:	e0 2e       	mov	r14, r16
 aec:	2a e0       	ldi	r18, 0x0A	; 10
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	25 c0       	rjmp	.+74     	; 0xb3c <__EEPROM_REGION_LENGTH__+0x33c>
 af2:	90 2f       	mov	r25, r16
 af4:	99 7f       	andi	r25, 0xF9	; 249
 af6:	e9 2e       	mov	r14, r25
 af8:	8f 36       	cpi	r24, 0x6F	; 111
 afa:	c1 f0       	breq	.+48     	; 0xb2c <__EEPROM_REGION_LENGTH__+0x32c>
 afc:	18 f4       	brcc	.+6      	; 0xb04 <__EEPROM_REGION_LENGTH__+0x304>
 afe:	88 35       	cpi	r24, 0x58	; 88
 b00:	79 f0       	breq	.+30     	; 0xb20 <__EEPROM_REGION_LENGTH__+0x320>
 b02:	d5 c0       	rjmp	.+426    	; 0xcae <__EEPROM_REGION_LENGTH__+0x4ae>
 b04:	80 37       	cpi	r24, 0x70	; 112
 b06:	19 f0       	breq	.+6      	; 0xb0e <__EEPROM_REGION_LENGTH__+0x30e>
 b08:	88 37       	cpi	r24, 0x78	; 120
 b0a:	21 f0       	breq	.+8      	; 0xb14 <__EEPROM_REGION_LENGTH__+0x314>
 b0c:	d0 c0       	rjmp	.+416    	; 0xcae <__EEPROM_REGION_LENGTH__+0x4ae>
 b0e:	a9 2f       	mov	r26, r25
 b10:	a0 61       	ori	r26, 0x10	; 16
 b12:	ea 2e       	mov	r14, r26
 b14:	e4 fe       	sbrs	r14, 4
 b16:	0d c0       	rjmp	.+26     	; 0xb32 <__EEPROM_REGION_LENGTH__+0x332>
 b18:	ee 2d       	mov	r30, r14
 b1a:	e4 60       	ori	r30, 0x04	; 4
 b1c:	ee 2e       	mov	r14, r30
 b1e:	09 c0       	rjmp	.+18     	; 0xb32 <__EEPROM_REGION_LENGTH__+0x332>
 b20:	04 ff       	sbrs	r16, 4
 b22:	0a c0       	rjmp	.+20     	; 0xb38 <__EEPROM_REGION_LENGTH__+0x338>
 b24:	f9 2f       	mov	r31, r25
 b26:	f6 60       	ori	r31, 0x06	; 6
 b28:	ef 2e       	mov	r14, r31
 b2a:	06 c0       	rjmp	.+12     	; 0xb38 <__EEPROM_REGION_LENGTH__+0x338>
 b2c:	28 e0       	ldi	r18, 0x08	; 8
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	05 c0       	rjmp	.+10     	; 0xb3c <__EEPROM_REGION_LENGTH__+0x33c>
 b32:	20 e1       	ldi	r18, 0x10	; 16
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <__EEPROM_REGION_LENGTH__+0x33c>
 b38:	20 e1       	ldi	r18, 0x10	; 16
 b3a:	32 e0       	ldi	r19, 0x02	; 2
 b3c:	c5 01       	movw	r24, r10
 b3e:	e7 fe       	sbrs	r14, 7
 b40:	09 c0       	rjmp	.+18     	; 0xb54 <__EEPROM_REGION_LENGTH__+0x354>
 b42:	04 96       	adiw	r24, 0x04	; 4
 b44:	9f 87       	std	Y+15, r25	; 0x0f
 b46:	8e 87       	std	Y+14, r24	; 0x0e
 b48:	f5 01       	movw	r30, r10
 b4a:	60 81       	ld	r22, Z
 b4c:	71 81       	ldd	r23, Z+1	; 0x01
 b4e:	82 81       	ldd	r24, Z+2	; 0x02
 b50:	93 81       	ldd	r25, Z+3	; 0x03
 b52:	08 c0       	rjmp	.+16     	; 0xb64 <__EEPROM_REGION_LENGTH__+0x364>
 b54:	02 96       	adiw	r24, 0x02	; 2
 b56:	9f 87       	std	Y+15, r25	; 0x0f
 b58:	8e 87       	std	Y+14, r24	; 0x0e
 b5a:	f5 01       	movw	r30, r10
 b5c:	60 81       	ld	r22, Z
 b5e:	71 81       	ldd	r23, Z+1	; 0x01
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	ae 01       	movw	r20, r28
 b66:	4f 5f       	subi	r20, 0xFF	; 255
 b68:	5f 4f       	sbci	r21, 0xFF	; 255
 b6a:	0e 94 34 11 	call	0x2268	; 0x2268 <__ultoa_invert>
 b6e:	a8 2e       	mov	r10, r24
 b70:	fc 85       	ldd	r31, Y+12	; 0x0c
 b72:	af 1a       	sub	r10, r31
 b74:	2e 2d       	mov	r18, r14
 b76:	2f 77       	andi	r18, 0x7F	; 127
 b78:	e2 2e       	mov	r14, r18
 b7a:	e6 fe       	sbrs	r14, 6
 b7c:	0b c0       	rjmp	.+22     	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 b7e:	0e 2d       	mov	r16, r14
 b80:	0e 7f       	andi	r16, 0xFE	; 254
 b82:	a1 16       	cp	r10, r17
 b84:	50 f4       	brcc	.+20     	; 0xb9a <__EEPROM_REGION_LENGTH__+0x39a>
 b86:	e4 fe       	sbrs	r14, 4
 b88:	0a c0       	rjmp	.+20     	; 0xb9e <__EEPROM_REGION_LENGTH__+0x39e>
 b8a:	e2 fc       	sbrc	r14, 2
 b8c:	08 c0       	rjmp	.+16     	; 0xb9e <__EEPROM_REGION_LENGTH__+0x39e>
 b8e:	0e 2d       	mov	r16, r14
 b90:	0e 7e       	andi	r16, 0xEE	; 238
 b92:	05 c0       	rjmp	.+10     	; 0xb9e <__EEPROM_REGION_LENGTH__+0x39e>
 b94:	ba 2c       	mov	r11, r10
 b96:	0e 2d       	mov	r16, r14
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <__EEPROM_REGION_LENGTH__+0x3a0>
 b9a:	ba 2c       	mov	r11, r10
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <__EEPROM_REGION_LENGTH__+0x3a0>
 b9e:	b1 2e       	mov	r11, r17
 ba0:	04 ff       	sbrs	r16, 4
 ba2:	0d c0       	rjmp	.+26     	; 0xbbe <__EEPROM_REGION_LENGTH__+0x3be>
 ba4:	fe 01       	movw	r30, r28
 ba6:	ea 0d       	add	r30, r10
 ba8:	f1 1d       	adc	r31, r1
 baa:	80 81       	ld	r24, Z
 bac:	80 33       	cpi	r24, 0x30	; 48
 bae:	11 f4       	brne	.+4      	; 0xbb4 <__EEPROM_REGION_LENGTH__+0x3b4>
 bb0:	09 7e       	andi	r16, 0xE9	; 233
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 bb4:	02 ff       	sbrs	r16, 2
 bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 bb8:	b3 94       	inc	r11
 bba:	b3 94       	inc	r11
 bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 bbe:	80 2f       	mov	r24, r16
 bc0:	86 78       	andi	r24, 0x86	; 134
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 bc4:	b3 94       	inc	r11
 bc6:	03 fd       	sbrc	r16, 3
 bc8:	11 c0       	rjmp	.+34     	; 0xbec <__EEPROM_REGION_LENGTH__+0x3ec>
 bca:	00 ff       	sbrs	r16, 0
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <__EEPROM_REGION_LENGTH__+0x3da>
 bce:	bf 14       	cp	r11, r15
 bd0:	88 f4       	brcc	.+34     	; 0xbf4 <__EEPROM_REGION_LENGTH__+0x3f4>
 bd2:	fa 0c       	add	r15, r10
 bd4:	1f 2d       	mov	r17, r15
 bd6:	1b 19       	sub	r17, r11
 bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <__EEPROM_REGION_LENGTH__+0x3f6>
 bda:	bf 14       	cp	r11, r15
 bdc:	60 f4       	brcc	.+24     	; 0xbf6 <__EEPROM_REGION_LENGTH__+0x3f6>
 bde:	b6 01       	movw	r22, r12
 be0:	80 e2       	ldi	r24, 0x20	; 32
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 be8:	b3 94       	inc	r11
 bea:	f7 cf       	rjmp	.-18     	; 0xbda <__EEPROM_REGION_LENGTH__+0x3da>
 bec:	bf 14       	cp	r11, r15
 bee:	18 f4       	brcc	.+6      	; 0xbf6 <__EEPROM_REGION_LENGTH__+0x3f6>
 bf0:	fb 18       	sub	r15, r11
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <__EEPROM_REGION_LENGTH__+0x3f8>
 bf4:	1a 2d       	mov	r17, r10
 bf6:	f1 2c       	mov	r15, r1
 bf8:	04 ff       	sbrs	r16, 4
 bfa:	10 c0       	rjmp	.+32     	; 0xc1c <__EEPROM_REGION_LENGTH__+0x41c>
 bfc:	b6 01       	movw	r22, r12
 bfe:	80 e3       	ldi	r24, 0x30	; 48
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 c06:	02 ff       	sbrs	r16, 2
 c08:	17 c0       	rjmp	.+46     	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 c0a:	01 fd       	sbrc	r16, 1
 c0c:	03 c0       	rjmp	.+6      	; 0xc14 <__EEPROM_REGION_LENGTH__+0x414>
 c0e:	88 e7       	ldi	r24, 0x78	; 120
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <__EEPROM_REGION_LENGTH__+0x418>
 c14:	88 e5       	ldi	r24, 0x58	; 88
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	b6 01       	movw	r22, r12
 c1a:	0c c0       	rjmp	.+24     	; 0xc34 <__EEPROM_REGION_LENGTH__+0x434>
 c1c:	80 2f       	mov	r24, r16
 c1e:	86 78       	andi	r24, 0x86	; 134
 c20:	59 f0       	breq	.+22     	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 c22:	01 ff       	sbrs	r16, 1
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <__EEPROM_REGION_LENGTH__+0x42a>
 c26:	8b e2       	ldi	r24, 0x2B	; 43
 c28:	01 c0       	rjmp	.+2      	; 0xc2c <__EEPROM_REGION_LENGTH__+0x42c>
 c2a:	80 e2       	ldi	r24, 0x20	; 32
 c2c:	07 fd       	sbrc	r16, 7
 c2e:	8d e2       	ldi	r24, 0x2D	; 45
 c30:	b6 01       	movw	r22, r12
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 c38:	a1 16       	cp	r10, r17
 c3a:	38 f4       	brcc	.+14     	; 0xc4a <__EEPROM_REGION_LENGTH__+0x44a>
 c3c:	b6 01       	movw	r22, r12
 c3e:	80 e3       	ldi	r24, 0x30	; 48
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 c46:	11 50       	subi	r17, 0x01	; 1
 c48:	f7 cf       	rjmp	.-18     	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 c4a:	aa 94       	dec	r10
 c4c:	e1 e0       	ldi	r30, 0x01	; 1
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	ec 0f       	add	r30, r28
 c52:	fd 1f       	adc	r31, r29
 c54:	ea 0d       	add	r30, r10
 c56:	f1 1d       	adc	r31, r1
 c58:	80 81       	ld	r24, Z
 c5a:	b6 01       	movw	r22, r12
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 c62:	a1 10       	cpse	r10, r1
 c64:	f2 cf       	rjmp	.-28     	; 0xc4a <__EEPROM_REGION_LENGTH__+0x44a>
 c66:	19 c0       	rjmp	.+50     	; 0xc9a <__EEPROM_REGION_LENGTH__+0x49a>
 c68:	f4 e0       	ldi	r31, 0x04	; 4
 c6a:	ff 15       	cp	r31, r15
 c6c:	80 f5       	brcc	.+96     	; 0xcce <__EEPROM_REGION_LENGTH__+0x4ce>
 c6e:	84 e0       	ldi	r24, 0x04	; 4
 c70:	f8 1a       	sub	r15, r24
 c72:	73 fe       	sbrs	r7, 3
 c74:	23 c0       	rjmp	.+70     	; 0xcbc <__EEPROM_REGION_LENGTH__+0x4bc>
 c76:	01 11       	cpse	r16, r1
 c78:	2b c0       	rjmp	.+86     	; 0xcd0 <__EEPROM_REGION_LENGTH__+0x4d0>
 c7a:	53 fe       	sbrs	r5, 3
 c7c:	2f c0       	rjmp	.+94     	; 0xcdc <__EEPROM_REGION_LENGTH__+0x4dc>
 c7e:	59 eb       	ldi	r21, 0xB9	; 185
 c80:	85 2e       	mov	r8, r21
 c82:	55 e0       	ldi	r21, 0x05	; 5
 c84:	95 2e       	mov	r9, r21
 c86:	50 e0       	ldi	r21, 0x00	; 0
 c88:	a5 2e       	mov	r10, r21
 c8a:	07 2d       	mov	r16, r7
 c8c:	00 71       	andi	r16, 0x10	; 16
 c8e:	f4 01       	movw	r30, r8
 c90:	84 91       	lpm	r24, Z
 c92:	a7 fc       	sbrc	r10, 7
 c94:	80 81       	ld	r24, Z
 c96:	81 11       	cpse	r24, r1
 c98:	28 c0       	rjmp	.+80     	; 0xcea <__EEPROM_REGION_LENGTH__+0x4ea>
 c9a:	ff 20       	and	r15, r15
 c9c:	09 f4       	brne	.+2      	; 0xca0 <__EEPROM_REGION_LENGTH__+0x4a0>
 c9e:	d2 cc       	rjmp	.-1628   	; 0x644 <vfprintf+0x72>
 ca0:	b6 01       	movw	r22, r12
 ca2:	80 e2       	ldi	r24, 0x20	; 32
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 caa:	fa 94       	dec	r15
 cac:	f6 cf       	rjmp	.-20     	; 0xc9a <__EEPROM_REGION_LENGTH__+0x49a>
 cae:	f6 01       	movw	r30, r12
 cb0:	87 81       	ldd	r24, Z+7	; 0x07
 cb2:	90 85       	ldd	r25, Z+8	; 0x08
 cb4:	2c c0       	rjmp	.+88     	; 0xd0e <__EEPROM_REGION_LENGTH__+0x50e>
 cb6:	8f ef       	ldi	r24, 0xFF	; 255
 cb8:	9f ef       	ldi	r25, 0xFF	; 255
 cba:	29 c0       	rjmp	.+82     	; 0xd0e <__EEPROM_REGION_LENGTH__+0x50e>
 cbc:	b6 01       	movw	r22, r12
 cbe:	80 e2       	ldi	r24, 0x20	; 32
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 cc6:	fa 94       	dec	r15
 cc8:	f1 10       	cpse	r15, r1
 cca:	f8 cf       	rjmp	.-16     	; 0xcbc <__EEPROM_REGION_LENGTH__+0x4bc>
 ccc:	d4 cf       	rjmp	.-88     	; 0xc76 <__EEPROM_REGION_LENGTH__+0x476>
 cce:	f1 2c       	mov	r15, r1
 cd0:	b6 01       	movw	r22, r12
 cd2:	80 2f       	mov	r24, r16
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 cda:	cf cf       	rjmp	.-98     	; 0xc7a <__EEPROM_REGION_LENGTH__+0x47a>
 cdc:	45 eb       	ldi	r20, 0xB5	; 181
 cde:	84 2e       	mov	r8, r20
 ce0:	45 e0       	ldi	r20, 0x05	; 5
 ce2:	94 2e       	mov	r9, r20
 ce4:	40 e0       	ldi	r20, 0x00	; 0
 ce6:	a4 2e       	mov	r10, r20
 ce8:	d0 cf       	rjmp	.-96     	; 0xc8a <__EEPROM_REGION_LENGTH__+0x48a>
 cea:	01 11       	cpse	r16, r1
 cec:	80 52       	subi	r24, 0x20	; 32
 cee:	b6 01       	movw	r22, r12
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <fputc>
 cf6:	ff ef       	ldi	r31, 0xFF	; 255
 cf8:	8f 1a       	sub	r8, r31
 cfa:	9f 0a       	sbc	r9, r31
 cfc:	af 0a       	sbc	r10, r31
 cfe:	c7 cf       	rjmp	.-114    	; 0xc8e <__EEPROM_REGION_LENGTH__+0x48e>
 d00:	23 e0       	ldi	r18, 0x03	; 3
 d02:	2f 15       	cp	r18, r15
 d04:	10 f4       	brcc	.+4      	; 0xd0a <__EEPROM_REGION_LENGTH__+0x50a>
 d06:	83 e0       	ldi	r24, 0x03	; 3
 d08:	b3 cf       	rjmp	.-154    	; 0xc70 <__EEPROM_REGION_LENGTH__+0x470>
 d0a:	f1 2c       	mov	r15, r1
 d0c:	b6 cf       	rjmp	.-148    	; 0xc7a <__EEPROM_REGION_LENGTH__+0x47a>
 d0e:	64 96       	adiw	r28, 0x14	; 20
 d10:	e2 e1       	ldi	r30, 0x12	; 18
 d12:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__epilogue_restores__>

Disassembly of section .text.libgcc:

00004182 <__tablejump2__>:
    4182:	ee 0f       	add	r30, r30
    4184:	ff 1f       	adc	r31, r31
    4186:	05 90       	lpm	r0, Z+
    4188:	f4 91       	lpm	r31, Z
    418a:	e0 2d       	mov	r30, r0
    418c:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003e00 <__umulhisi3>:
    3e00:	a2 9f       	mul	r26, r18
    3e02:	b0 01       	movw	r22, r0
    3e04:	b3 9f       	mul	r27, r19
    3e06:	c0 01       	movw	r24, r0
    3e08:	a3 9f       	mul	r26, r19
    3e0a:	70 0d       	add	r23, r0
    3e0c:	81 1d       	adc	r24, r1
    3e0e:	11 24       	eor	r1, r1
    3e10:	91 1d       	adc	r25, r1
    3e12:	b2 9f       	mul	r27, r18
    3e14:	70 0d       	add	r23, r0
    3e16:	81 1d       	adc	r24, r1
    3e18:	11 24       	eor	r1, r1
    3e1a:	91 1d       	adc	r25, r1
    3e1c:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003900 <__prologue_saves__>:
    3900:	2f 92       	push	r2
    3902:	3f 92       	push	r3
    3904:	4f 92       	push	r4
    3906:	5f 92       	push	r5
    3908:	6f 92       	push	r6
    390a:	7f 92       	push	r7
    390c:	8f 92       	push	r8
    390e:	9f 92       	push	r9
    3910:	af 92       	push	r10
    3912:	bf 92       	push	r11
    3914:	cf 92       	push	r12
    3916:	df 92       	push	r13
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	ca 1b       	sub	r28, r26
    392a:	db 0b       	sbc	r29, r27
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000396e <__epilogue_restores__>:
    396e:	2a 88       	ldd	r2, Y+18	; 0x12
    3970:	39 88       	ldd	r3, Y+17	; 0x11
    3972:	48 88       	ldd	r4, Y+16	; 0x10
    3974:	5f 84       	ldd	r5, Y+15	; 0x0f
    3976:	6e 84       	ldd	r6, Y+14	; 0x0e
    3978:	7d 84       	ldd	r7, Y+13	; 0x0d
    397a:	8c 84       	ldd	r8, Y+12	; 0x0c
    397c:	9b 84       	ldd	r9, Y+11	; 0x0b
    397e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3980:	b9 84       	ldd	r11, Y+9	; 0x09
    3982:	c8 84       	ldd	r12, Y+8	; 0x08
    3984:	df 80       	ldd	r13, Y+7	; 0x07
    3986:	ee 80       	ldd	r14, Y+6	; 0x06
    3988:	fd 80       	ldd	r15, Y+5	; 0x05
    398a:	0c 81       	ldd	r16, Y+4	; 0x04
    398c:	1b 81       	ldd	r17, Y+3	; 0x03
    398e:	aa 81       	ldd	r26, Y+2	; 0x02
    3990:	b9 81       	ldd	r27, Y+1	; 0x01
    3992:	ce 0f       	add	r28, r30
    3994:	d1 1d       	adc	r29, r1
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	ed 01       	movw	r28, r26
    39a2:	08 95       	ret

Disassembly of section .text.avrlibc:

000041ea <atoi>:
    41ea:	0e 94 82 20 	call	0x4104	; 0x4104 <atol>
    41ee:	cb 01       	movw	r24, r22
    41f0:	08 95       	ret

Disassembly of section .text.avrlibc:

00004104 <atol>:
    4104:	2a e0       	ldi	r18, 0x0A	; 10
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	50 e0       	ldi	r21, 0x00	; 0
    410c:	0e 94 8b 06 	call	0xd16	; 0xd16 <strtol>
    4110:	08 95       	ret

Disassembly of section .text.avrlibc:

00000d16 <strtol>:
 d16:	2f 92       	push	r2
 d18:	3f 92       	push	r3
 d1a:	4f 92       	push	r4
 d1c:	5f 92       	push	r5
 d1e:	6f 92       	push	r6
 d20:	7f 92       	push	r7
 d22:	8f 92       	push	r8
 d24:	af 92       	push	r10
 d26:	bf 92       	push	r11
 d28:	cf 92       	push	r12
 d2a:	df 92       	push	r13
 d2c:	ef 92       	push	r14
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	df 93       	push	r29
 d36:	00 d0       	rcall	.+0      	; 0xd38 <strtol+0x22>
 d38:	00 d0       	rcall	.+0      	; 0xd3a <strtol+0x24>
 d3a:	00 d0       	rcall	.+0      	; 0xd3c <strtol+0x26>
 d3c:	cd b7       	in	r28, 0x3d	; 61
 d3e:	de b7       	in	r29, 0x3e	; 62
 d40:	3b 01       	movw	r6, r22
 d42:	88 2e       	mov	r8, r24
 d44:	5a 01       	movw	r10, r20
 d46:	19 01       	movw	r2, r18
 d48:	41 15       	cp	r20, r1
 d4a:	51 05       	cpc	r21, r1
 d4c:	21 f0       	breq	.+8      	; 0xd56 <strtol+0x40>
 d4e:	fa 01       	movw	r30, r20
 d50:	60 83       	st	Z, r22
 d52:	71 83       	std	Z+1, r23	; 0x01
 d54:	82 83       	std	Z+2, r24	; 0x02
 d56:	21 14       	cp	r2, r1
 d58:	31 04       	cpc	r3, r1
 d5a:	29 f0       	breq	.+10     	; 0xd66 <strtol+0x50>
 d5c:	c1 01       	movw	r24, r2
 d5e:	02 97       	sbiw	r24, 0x02	; 2
 d60:	83 97       	sbiw	r24, 0x23	; 35
 d62:	08 f0       	brcs	.+2      	; 0xd66 <strtol+0x50>
 d64:	1a c1       	rjmp	.+564    	; 0xf9a <strtol+0x284>
 d66:	e8 2c       	mov	r14, r8
 d68:	63 01       	movw	r12, r6
 d6a:	ff ef       	ldi	r31, 0xFF	; 255
 d6c:	cf 1a       	sub	r12, r31
 d6e:	df 0a       	sbc	r13, r31
 d70:	ef 0a       	sbc	r14, r31
 d72:	f3 01       	movw	r30, r6
 d74:	14 91       	lpm	r17, Z
 d76:	87 fc       	sbrc	r8, 7
 d78:	10 81       	ld	r17, Z
 d7a:	81 2f       	mov	r24, r17
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <isspace>
 d82:	4c 2d       	mov	r20, r12
 d84:	3d 2d       	mov	r19, r13
 d86:	2e 2d       	mov	r18, r14
 d88:	89 2b       	or	r24, r25
 d8a:	19 f0       	breq	.+6      	; 0xd92 <strtol+0x7c>
 d8c:	36 01       	movw	r6, r12
 d8e:	8e 2c       	mov	r8, r14
 d90:	ea cf       	rjmp	.-44     	; 0xd66 <strtol+0x50>
 d92:	1d 32       	cpi	r17, 0x2D	; 45
 d94:	69 f4       	brne	.+26     	; 0xdb0 <strtol+0x9a>
 d96:	e8 2c       	mov	r14, r8
 d98:	63 01       	movw	r12, r6
 d9a:	52 e0       	ldi	r21, 0x02	; 2
 d9c:	c5 0e       	add	r12, r21
 d9e:	d1 1c       	adc	r13, r1
 da0:	e1 1c       	adc	r14, r1
 da2:	e4 2f       	mov	r30, r20
 da4:	f3 2f       	mov	r31, r19
 da6:	14 91       	lpm	r17, Z
 da8:	27 fd       	sbrc	r18, 7
 daa:	10 81       	ld	r17, Z
 dac:	01 e0       	ldi	r16, 0x01	; 1
 dae:	0e c0       	rjmp	.+28     	; 0xdcc <strtol+0xb6>
 db0:	1b 32       	cpi	r17, 0x2B	; 43
 db2:	59 f4       	brne	.+22     	; 0xdca <strtol+0xb4>
 db4:	e8 2c       	mov	r14, r8
 db6:	63 01       	movw	r12, r6
 db8:	82 e0       	ldi	r24, 0x02	; 2
 dba:	c8 0e       	add	r12, r24
 dbc:	d1 1c       	adc	r13, r1
 dbe:	e1 1c       	adc	r14, r1
 dc0:	e4 2f       	mov	r30, r20
 dc2:	f3 2f       	mov	r31, r19
 dc4:	14 91       	lpm	r17, Z
 dc6:	27 fd       	sbrc	r18, 7
 dc8:	10 81       	ld	r17, Z
 dca:	00 e0       	ldi	r16, 0x00	; 0
 dcc:	21 14       	cp	r2, r1
 dce:	31 04       	cpc	r3, r1
 dd0:	09 f1       	breq	.+66     	; 0xe14 <strtol+0xfe>
 dd2:	90 e1       	ldi	r25, 0x10	; 16
 dd4:	29 16       	cp	r2, r25
 dd6:	31 04       	cpc	r3, r1
 dd8:	29 f4       	brne	.+10     	; 0xde4 <strtol+0xce>
 dda:	3f c0       	rjmp	.+126    	; 0xe5a <strtol+0x144>
 ddc:	10 e3       	ldi	r17, 0x30	; 48
 dde:	21 14       	cp	r2, r1
 de0:	31 04       	cpc	r3, r1
 de2:	21 f1       	breq	.+72     	; 0xe2c <strtol+0x116>
 de4:	f8 e0       	ldi	r31, 0x08	; 8
 de6:	2f 16       	cp	r2, r31
 de8:	31 04       	cpc	r3, r1
 dea:	01 f1       	breq	.+64     	; 0xe2c <strtol+0x116>
 dec:	54 f4       	brge	.+20     	; 0xe02 <strtol+0xec>
 dee:	32 e0       	ldi	r19, 0x02	; 2
 df0:	23 16       	cp	r2, r19
 df2:	31 04       	cpc	r3, r1
 df4:	21 f5       	brne	.+72     	; 0xe3e <strtol+0x128>
 df6:	41 2c       	mov	r4, r1
 df8:	51 2c       	mov	r5, r1
 dfa:	61 2c       	mov	r6, r1
 dfc:	50 e4       	ldi	r21, 0x40	; 64
 dfe:	75 2e       	mov	r7, r21
 e00:	4b c0       	rjmp	.+150    	; 0xe98 <strtol+0x182>
 e02:	4a e0       	ldi	r20, 0x0A	; 10
 e04:	24 16       	cp	r2, r20
 e06:	31 04       	cpc	r3, r1
 e08:	39 f0       	breq	.+14     	; 0xe18 <strtol+0x102>
 e0a:	50 e1       	ldi	r21, 0x10	; 16
 e0c:	25 16       	cp	r2, r21
 e0e:	31 04       	cpc	r3, r1
 e10:	b1 f4       	brne	.+44     	; 0xe3e <strtol+0x128>
 e12:	3d c0       	rjmp	.+122    	; 0xe8e <strtol+0x178>
 e14:	10 33       	cpi	r17, 0x30	; 48
 e16:	19 f1       	breq	.+70     	; 0xe5e <strtol+0x148>
 e18:	3a e0       	ldi	r19, 0x0A	; 10
 e1a:	23 2e       	mov	r2, r19
 e1c:	31 2c       	mov	r3, r1
 e1e:	4c ec       	ldi	r20, 0xCC	; 204
 e20:	44 2e       	mov	r4, r20
 e22:	54 2c       	mov	r5, r4
 e24:	64 2c       	mov	r6, r4
 e26:	4c e0       	ldi	r20, 0x0C	; 12
 e28:	74 2e       	mov	r7, r20
 e2a:	36 c0       	rjmp	.+108    	; 0xe98 <strtol+0x182>
 e2c:	98 e0       	ldi	r25, 0x08	; 8
 e2e:	29 2e       	mov	r2, r25
 e30:	31 2c       	mov	r3, r1
 e32:	41 2c       	mov	r4, r1
 e34:	51 2c       	mov	r5, r1
 e36:	61 2c       	mov	r6, r1
 e38:	20 e1       	ldi	r18, 0x10	; 16
 e3a:	72 2e       	mov	r7, r18
 e3c:	2d c0       	rjmp	.+90     	; 0xe98 <strtol+0x182>
 e3e:	60 e0       	ldi	r22, 0x00	; 0
 e40:	70 e0       	ldi	r23, 0x00	; 0
 e42:	80 e0       	ldi	r24, 0x00	; 0
 e44:	90 e8       	ldi	r25, 0x80	; 128
 e46:	91 01       	movw	r18, r2
 e48:	03 2c       	mov	r0, r3
 e4a:	00 0c       	add	r0, r0
 e4c:	44 0b       	sbc	r20, r20
 e4e:	55 0b       	sbc	r21, r21
 e50:	0e 94 33 1b 	call	0x3666	; 0x3666 <__udivmodsi4>
 e54:	29 01       	movw	r4, r18
 e56:	3a 01       	movw	r6, r20
 e58:	1f c0       	rjmp	.+62     	; 0xe98 <strtol+0x182>
 e5a:	10 33       	cpi	r17, 0x30	; 48
 e5c:	c1 f4       	brne	.+48     	; 0xe8e <strtol+0x178>
 e5e:	f6 01       	movw	r30, r12
 e60:	84 91       	lpm	r24, Z
 e62:	e7 fc       	sbrc	r14, 7
 e64:	80 81       	ld	r24, Z
 e66:	8f 7d       	andi	r24, 0xDF	; 223
 e68:	88 35       	cpi	r24, 0x58	; 88
 e6a:	09 f0       	breq	.+2      	; 0xe6e <strtol+0x158>
 e6c:	b7 cf       	rjmp	.-146    	; 0xddc <strtol+0xc6>
 e6e:	ae 2d       	mov	r26, r14
 e70:	c6 01       	movw	r24, r12
 e72:	01 96       	adiw	r24, 0x01	; 1
 e74:	a1 1d       	adc	r26, r1
 e76:	fc 01       	movw	r30, r24
 e78:	14 91       	lpm	r17, Z
 e7a:	a7 fd       	sbrc	r26, 7
 e7c:	10 81       	ld	r17, Z
 e7e:	e2 e0       	ldi	r30, 0x02	; 2
 e80:	ce 0e       	add	r12, r30
 e82:	d1 1c       	adc	r13, r1
 e84:	e1 1c       	adc	r14, r1
 e86:	02 60       	ori	r16, 0x02	; 2
 e88:	60 e1       	ldi	r22, 0x10	; 16
 e8a:	26 2e       	mov	r2, r22
 e8c:	31 2c       	mov	r3, r1
 e8e:	41 2c       	mov	r4, r1
 e90:	51 2c       	mov	r5, r1
 e92:	61 2c       	mov	r6, r1
 e94:	88 e0       	ldi	r24, 0x08	; 8
 e96:	78 2e       	mov	r7, r24
 e98:	a0 e0       	ldi	r26, 0x00	; 0
 e9a:	60 e0       	ldi	r22, 0x00	; 0
 e9c:	70 e0       	ldi	r23, 0x00	; 0
 e9e:	cb 01       	movw	r24, r22
 ea0:	91 01       	movw	r18, r2
 ea2:	03 2c       	mov	r0, r3
 ea4:	00 0c       	add	r0, r0
 ea6:	44 0b       	sbc	r20, r20
 ea8:	55 0b       	sbc	r21, r21
 eaa:	29 83       	std	Y+1, r18	; 0x01
 eac:	3a 83       	std	Y+2, r19	; 0x02
 eae:	4b 83       	std	Y+3, r20	; 0x03
 eb0:	5c 83       	std	Y+4, r21	; 0x04
 eb2:	e0 ed       	ldi	r30, 0xD0	; 208
 eb4:	e1 0f       	add	r30, r17
 eb6:	ea 30       	cpi	r30, 0x0A	; 10
 eb8:	60 f0       	brcs	.+24     	; 0xed2 <strtol+0x1bc>
 eba:	2f eb       	ldi	r18, 0xBF	; 191
 ebc:	21 0f       	add	r18, r17
 ebe:	2a 31       	cpi	r18, 0x1A	; 26
 ec0:	10 f4       	brcc	.+4      	; 0xec6 <strtol+0x1b0>
 ec2:	e9 ec       	ldi	r30, 0xC9	; 201
 ec4:	05 c0       	rjmp	.+10     	; 0xed0 <strtol+0x1ba>
 ec6:	2f e9       	ldi	r18, 0x9F	; 159
 ec8:	21 0f       	add	r18, r17
 eca:	2a 31       	cpi	r18, 0x1A	; 26
 ecc:	50 f5       	brcc	.+84     	; 0xf22 <strtol+0x20c>
 ece:	e9 ea       	ldi	r30, 0xA9	; 169
 ed0:	e1 0f       	add	r30, r17
 ed2:	2e 2f       	mov	r18, r30
 ed4:	30 e0       	ldi	r19, 0x00	; 0
 ed6:	22 15       	cp	r18, r2
 ed8:	33 05       	cpc	r19, r3
 eda:	1c f5       	brge	.+70     	; 0xf22 <strtol+0x20c>
 edc:	a7 fd       	sbrc	r26, 7
 ede:	18 c0       	rjmp	.+48     	; 0xf10 <strtol+0x1fa>
 ee0:	46 16       	cp	r4, r22
 ee2:	57 06       	cpc	r5, r23
 ee4:	68 06       	cpc	r6, r24
 ee6:	79 06       	cpc	r7, r25
 ee8:	80 f0       	brcs	.+32     	; 0xf0a <strtol+0x1f4>
 eea:	29 81       	ldd	r18, Y+1	; 0x01
 eec:	3a 81       	ldd	r19, Y+2	; 0x02
 eee:	4b 81       	ldd	r20, Y+3	; 0x03
 ef0:	5c 81       	ldd	r21, Y+4	; 0x04
 ef2:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__mulsi3>
 ef6:	6e 0f       	add	r22, r30
 ef8:	71 1d       	adc	r23, r1
 efa:	81 1d       	adc	r24, r1
 efc:	91 1d       	adc	r25, r1
 efe:	61 30       	cpi	r22, 0x01	; 1
 f00:	71 05       	cpc	r23, r1
 f02:	81 05       	cpc	r24, r1
 f04:	30 e8       	ldi	r19, 0x80	; 128
 f06:	93 07       	cpc	r25, r19
 f08:	10 f0       	brcs	.+4      	; 0xf0e <strtol+0x1f8>
 f0a:	af ef       	ldi	r26, 0xFF	; 255
 f0c:	01 c0       	rjmp	.+2      	; 0xf10 <strtol+0x1fa>
 f0e:	a1 e0       	ldi	r26, 0x01	; 1
 f10:	f6 01       	movw	r30, r12
 f12:	14 91       	lpm	r17, Z
 f14:	e7 fc       	sbrc	r14, 7
 f16:	10 81       	ld	r17, Z
 f18:	4f ef       	ldi	r20, 0xFF	; 255
 f1a:	c4 1a       	sub	r12, r20
 f1c:	d4 0a       	sbc	r13, r20
 f1e:	e4 0a       	sbc	r14, r20
 f20:	c8 cf       	rjmp	.-112    	; 0xeb2 <strtol+0x19c>
 f22:	20 2f       	mov	r18, r16
 f24:	21 70       	andi	r18, 0x01	; 1
 f26:	a1 14       	cp	r10, r1
 f28:	b1 04       	cpc	r11, r1
 f2a:	b1 f0       	breq	.+44     	; 0xf58 <strtol+0x242>
 f2c:	aa 23       	and	r26, r26
 f2e:	49 f0       	breq	.+18     	; 0xf42 <strtol+0x22c>
 f30:	51 e0       	ldi	r21, 0x01	; 1
 f32:	c5 1a       	sub	r12, r21
 f34:	d1 08       	sbc	r13, r1
 f36:	e1 08       	sbc	r14, r1
 f38:	f5 01       	movw	r30, r10
 f3a:	c0 82       	st	Z, r12
 f3c:	d1 82       	std	Z+1, r13	; 0x01
 f3e:	e2 82       	std	Z+2, r14	; 0x02
 f40:	0b c0       	rjmp	.+22     	; 0xf58 <strtol+0x242>
 f42:	01 ff       	sbrs	r16, 1
 f44:	1d c0       	rjmp	.+58     	; 0xf80 <strtol+0x26a>
 f46:	f2 e0       	ldi	r31, 0x02	; 2
 f48:	cf 1a       	sub	r12, r31
 f4a:	d1 08       	sbc	r13, r1
 f4c:	e1 08       	sbc	r14, r1
 f4e:	f5 01       	movw	r30, r10
 f50:	c0 82       	st	Z, r12
 f52:	d1 82       	std	Z+1, r13	; 0x01
 f54:	e2 82       	std	Z+2, r14	; 0x02
 f56:	14 c0       	rjmp	.+40     	; 0xf80 <strtol+0x26a>
 f58:	a7 ff       	sbrs	r26, 7
 f5a:	12 c0       	rjmp	.+36     	; 0xf80 <strtol+0x26a>
 f5c:	22 23       	and	r18, r18
 f5e:	29 f0       	breq	.+10     	; 0xf6a <strtol+0x254>
 f60:	60 e0       	ldi	r22, 0x00	; 0
 f62:	70 e0       	ldi	r23, 0x00	; 0
 f64:	80 e0       	ldi	r24, 0x00	; 0
 f66:	90 e8       	ldi	r25, 0x80	; 128
 f68:	04 c0       	rjmp	.+8      	; 0xf72 <strtol+0x25c>
 f6a:	6f ef       	ldi	r22, 0xFF	; 255
 f6c:	7f ef       	ldi	r23, 0xFF	; 255
 f6e:	8f ef       	ldi	r24, 0xFF	; 255
 f70:	9f e7       	ldi	r25, 0x7F	; 127
 f72:	22 e2       	ldi	r18, 0x22	; 34
 f74:	30 e0       	ldi	r19, 0x00	; 0
 f76:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <errno+0x1>
 f7a:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <errno>
 f7e:	09 c0       	rjmp	.+18     	; 0xf92 <strtol+0x27c>
 f80:	22 23       	and	r18, r18
 f82:	81 f0       	breq	.+32     	; 0xfa4 <strtol+0x28e>
 f84:	90 95       	com	r25
 f86:	80 95       	com	r24
 f88:	70 95       	com	r23
 f8a:	61 95       	neg	r22
 f8c:	7f 4f       	sbci	r23, 0xFF	; 255
 f8e:	8f 4f       	sbci	r24, 0xFF	; 255
 f90:	9f 4f       	sbci	r25, 0xFF	; 255
 f92:	46 2f       	mov	r20, r22
 f94:	37 2f       	mov	r19, r23
 f96:	28 2f       	mov	r18, r24
 f98:	12 c0       	rjmp	.+36     	; 0xfbe <strtol+0x2a8>
 f9a:	40 e0       	ldi	r20, 0x00	; 0
 f9c:	30 e0       	ldi	r19, 0x00	; 0
 f9e:	20 e0       	ldi	r18, 0x00	; 0
 fa0:	90 e0       	ldi	r25, 0x00	; 0
 fa2:	0d c0       	rjmp	.+26     	; 0xfbe <strtol+0x2a8>
 fa4:	97 ff       	sbrs	r25, 7
 fa6:	f5 cf       	rjmp	.-22     	; 0xf92 <strtol+0x27c>
 fa8:	82 e2       	ldi	r24, 0x22	; 34
 faa:	90 e0       	ldi	r25, 0x00	; 0
 fac:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <errno+0x1>
 fb0:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <errno>
 fb4:	6f ef       	ldi	r22, 0xFF	; 255
 fb6:	7f ef       	ldi	r23, 0xFF	; 255
 fb8:	8f ef       	ldi	r24, 0xFF	; 255
 fba:	9f e7       	ldi	r25, 0x7F	; 127
 fbc:	ea cf       	rjmp	.-44     	; 0xf92 <strtol+0x27c>
 fbe:	64 2f       	mov	r22, r20
 fc0:	73 2f       	mov	r23, r19
 fc2:	82 2f       	mov	r24, r18
 fc4:	26 96       	adiw	r28, 0x06	; 6
 fc6:	0f b6       	in	r0, 0x3f	; 63
 fc8:	f8 94       	cli
 fca:	de bf       	out	0x3e, r29	; 62
 fcc:	0f be       	out	0x3f, r0	; 63
 fce:	cd bf       	out	0x3d, r28	; 61
 fd0:	df 91       	pop	r29
 fd2:	cf 91       	pop	r28
 fd4:	1f 91       	pop	r17
 fd6:	0f 91       	pop	r16
 fd8:	ef 90       	pop	r14
 fda:	df 90       	pop	r13
 fdc:	cf 90       	pop	r12
 fde:	bf 90       	pop	r11
 fe0:	af 90       	pop	r10
 fe2:	8f 90       	pop	r8
 fe4:	7f 90       	pop	r7
 fe6:	6f 90       	pop	r6
 fe8:	5f 90       	pop	r5
 fea:	4f 90       	pop	r4
 fec:	3f 90       	pop	r3
 fee:	2f 90       	pop	r2
 ff0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001494 <__ftoa_engine>:
    1494:	28 30       	cpi	r18, 0x08	; 8
    1496:	08 f0       	brcs	.+2      	; 0x149a <__ftoa_engine+0x6>
    1498:	27 e0       	ldi	r18, 0x07	; 7
    149a:	33 27       	eor	r19, r19
    149c:	da 01       	movw	r26, r20
    149e:	99 0f       	add	r25, r25
    14a0:	31 1d       	adc	r19, r1
    14a2:	87 fd       	sbrc	r24, 7
    14a4:	91 60       	ori	r25, 0x01	; 1
    14a6:	00 96       	adiw	r24, 0x00	; 0
    14a8:	61 05       	cpc	r22, r1
    14aa:	71 05       	cpc	r23, r1
    14ac:	39 f4       	brne	.+14     	; 0x14bc <__ftoa_engine+0x28>
    14ae:	32 60       	ori	r19, 0x02	; 2
    14b0:	2e 5f       	subi	r18, 0xFE	; 254
    14b2:	3d 93       	st	X+, r19
    14b4:	30 e3       	ldi	r19, 0x30	; 48
    14b6:	2a 95       	dec	r18
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <__ftoa_engine+0x1e>
    14ba:	08 95       	ret
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	30 f0       	brcs	.+12     	; 0x14cc <__ftoa_engine+0x38>
    14c0:	80 38       	cpi	r24, 0x80	; 128
    14c2:	71 05       	cpc	r23, r1
    14c4:	61 05       	cpc	r22, r1
    14c6:	09 f0       	breq	.+2      	; 0x14ca <__ftoa_engine+0x36>
    14c8:	3c 5f       	subi	r19, 0xFC	; 252
    14ca:	3c 5f       	subi	r19, 0xFC	; 252
    14cc:	3d 93       	st	X+, r19
    14ce:	91 30       	cpi	r25, 0x01	; 1
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <__ftoa_engine+0x40>
    14d2:	80 68       	ori	r24, 0x80	; 128
    14d4:	91 1d       	adc	r25, r1
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	1f 93       	push	r17
    14dc:	0f 93       	push	r16
    14de:	ff 92       	push	r15
    14e0:	ef 92       	push	r14
    14e2:	19 2f       	mov	r17, r25
    14e4:	98 7f       	andi	r25, 0xF8	; 248
    14e6:	96 95       	lsr	r25
    14e8:	e9 2f       	mov	r30, r25
    14ea:	96 95       	lsr	r25
    14ec:	96 95       	lsr	r25
    14ee:	e9 0f       	add	r30, r25
    14f0:	ff 27       	eor	r31, r31
    14f2:	e0 50       	subi	r30, 0x00	; 0
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	99 27       	eor	r25, r25
    14f8:	33 27       	eor	r19, r19
    14fa:	ee 24       	eor	r14, r14
    14fc:	ff 24       	eor	r15, r15
    14fe:	a7 01       	movw	r20, r14
    1500:	e7 01       	movw	r28, r14
    1502:	05 90       	lpm	r0, Z+
    1504:	08 94       	sec
    1506:	07 94       	ror	r0
    1508:	28 f4       	brcc	.+10     	; 0x1514 <__ftoa_engine+0x80>
    150a:	36 0f       	add	r19, r22
    150c:	e7 1e       	adc	r14, r23
    150e:	f8 1e       	adc	r15, r24
    1510:	49 1f       	adc	r20, r25
    1512:	51 1d       	adc	r21, r1
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	06 94       	lsr	r0
    151e:	a1 f7       	brne	.-24     	; 0x1508 <__ftoa_engine+0x74>
    1520:	05 90       	lpm	r0, Z+
    1522:	07 94       	ror	r0
    1524:	28 f4       	brcc	.+10     	; 0x1530 <__ftoa_engine+0x9c>
    1526:	e7 0e       	add	r14, r23
    1528:	f8 1e       	adc	r15, r24
    152a:	49 1f       	adc	r20, r25
    152c:	56 1f       	adc	r21, r22
    152e:	c1 1d       	adc	r28, r1
    1530:	77 0f       	add	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	66 1f       	adc	r22, r22
    1538:	06 94       	lsr	r0
    153a:	a1 f7       	brne	.-24     	; 0x1524 <__ftoa_engine+0x90>
    153c:	05 90       	lpm	r0, Z+
    153e:	07 94       	ror	r0
    1540:	28 f4       	brcc	.+10     	; 0x154c <__ftoa_engine+0xb8>
    1542:	f8 0e       	add	r15, r24
    1544:	49 1f       	adc	r20, r25
    1546:	56 1f       	adc	r21, r22
    1548:	c7 1f       	adc	r28, r23
    154a:	d1 1d       	adc	r29, r1
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	66 1f       	adc	r22, r22
    1552:	77 1f       	adc	r23, r23
    1554:	06 94       	lsr	r0
    1556:	a1 f7       	brne	.-24     	; 0x1540 <__ftoa_engine+0xac>
    1558:	05 90       	lpm	r0, Z+
    155a:	07 94       	ror	r0
    155c:	20 f4       	brcc	.+8      	; 0x1566 <__ftoa_engine+0xd2>
    155e:	49 0f       	add	r20, r25
    1560:	56 1f       	adc	r21, r22
    1562:	c7 1f       	adc	r28, r23
    1564:	d8 1f       	adc	r29, r24
    1566:	99 0f       	add	r25, r25
    1568:	66 1f       	adc	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	06 94       	lsr	r0
    1570:	a9 f7       	brne	.-22     	; 0x155c <__ftoa_engine+0xc8>
    1572:	84 91       	lpm	r24, Z
    1574:	10 95       	com	r17
    1576:	17 70       	andi	r17, 0x07	; 7
    1578:	41 f0       	breq	.+16     	; 0x158a <__ftoa_engine+0xf6>
    157a:	d6 95       	lsr	r29
    157c:	c7 95       	ror	r28
    157e:	57 95       	ror	r21
    1580:	47 95       	ror	r20
    1582:	f7 94       	ror	r15
    1584:	e7 94       	ror	r14
    1586:	1a 95       	dec	r17
    1588:	c1 f7       	brne	.-16     	; 0x157a <__ftoa_engine+0xe6>
    158a:	e6 ea       	ldi	r30, 0xA6	; 166
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	68 94       	set
    1590:	15 90       	lpm	r1, Z+
    1592:	15 91       	lpm	r17, Z+
    1594:	35 91       	lpm	r19, Z+
    1596:	65 91       	lpm	r22, Z+
    1598:	95 91       	lpm	r25, Z+
    159a:	05 90       	lpm	r0, Z+
    159c:	7f e2       	ldi	r23, 0x2F	; 47
    159e:	73 95       	inc	r23
    15a0:	e1 18       	sub	r14, r1
    15a2:	f1 0a       	sbc	r15, r17
    15a4:	43 0b       	sbc	r20, r19
    15a6:	56 0b       	sbc	r21, r22
    15a8:	c9 0b       	sbc	r28, r25
    15aa:	d0 09       	sbc	r29, r0
    15ac:	c0 f7       	brcc	.-16     	; 0x159e <__ftoa_engine+0x10a>
    15ae:	e1 0c       	add	r14, r1
    15b0:	f1 1e       	adc	r15, r17
    15b2:	43 1f       	adc	r20, r19
    15b4:	56 1f       	adc	r21, r22
    15b6:	c9 1f       	adc	r28, r25
    15b8:	d0 1d       	adc	r29, r0
    15ba:	7e f4       	brtc	.+30     	; 0x15da <__ftoa_engine+0x146>
    15bc:	70 33       	cpi	r23, 0x30	; 48
    15be:	11 f4       	brne	.+4      	; 0x15c4 <__ftoa_engine+0x130>
    15c0:	8a 95       	dec	r24
    15c2:	e6 cf       	rjmp	.-52     	; 0x1590 <__ftoa_engine+0xfc>
    15c4:	e8 94       	clt
    15c6:	01 50       	subi	r16, 0x01	; 1
    15c8:	30 f0       	brcs	.+12     	; 0x15d6 <__ftoa_engine+0x142>
    15ca:	08 0f       	add	r16, r24
    15cc:	0a f4       	brpl	.+2      	; 0x15d0 <__ftoa_engine+0x13c>
    15ce:	00 27       	eor	r16, r16
    15d0:	02 17       	cp	r16, r18
    15d2:	08 f4       	brcc	.+2      	; 0x15d6 <__ftoa_engine+0x142>
    15d4:	20 2f       	mov	r18, r16
    15d6:	23 95       	inc	r18
    15d8:	02 2f       	mov	r16, r18
    15da:	7a 33       	cpi	r23, 0x3A	; 58
    15dc:	28 f0       	brcs	.+10     	; 0x15e8 <__ftoa_engine+0x154>
    15de:	79 e3       	ldi	r23, 0x39	; 57
    15e0:	7d 93       	st	X+, r23
    15e2:	2a 95       	dec	r18
    15e4:	e9 f7       	brne	.-6      	; 0x15e0 <__ftoa_engine+0x14c>
    15e6:	10 c0       	rjmp	.+32     	; 0x1608 <__ftoa_engine+0x174>
    15e8:	7d 93       	st	X+, r23
    15ea:	2a 95       	dec	r18
    15ec:	89 f6       	brne	.-94     	; 0x1590 <__ftoa_engine+0xfc>
    15ee:	06 94       	lsr	r0
    15f0:	97 95       	ror	r25
    15f2:	67 95       	ror	r22
    15f4:	37 95       	ror	r19
    15f6:	17 95       	ror	r17
    15f8:	17 94       	ror	r1
    15fa:	e1 18       	sub	r14, r1
    15fc:	f1 0a       	sbc	r15, r17
    15fe:	43 0b       	sbc	r20, r19
    1600:	56 0b       	sbc	r21, r22
    1602:	c9 0b       	sbc	r28, r25
    1604:	d0 09       	sbc	r29, r0
    1606:	98 f0       	brcs	.+38     	; 0x162e <__ftoa_engine+0x19a>
    1608:	23 95       	inc	r18
    160a:	7e 91       	ld	r23, -X
    160c:	73 95       	inc	r23
    160e:	7a 33       	cpi	r23, 0x3A	; 58
    1610:	08 f0       	brcs	.+2      	; 0x1614 <__ftoa_engine+0x180>
    1612:	70 e3       	ldi	r23, 0x30	; 48
    1614:	7c 93       	st	X, r23
    1616:	20 13       	cpse	r18, r16
    1618:	b8 f7       	brcc	.-18     	; 0x1608 <__ftoa_engine+0x174>
    161a:	7e 91       	ld	r23, -X
    161c:	70 61       	ori	r23, 0x10	; 16
    161e:	7d 93       	st	X+, r23
    1620:	30 f0       	brcs	.+12     	; 0x162e <__ftoa_engine+0x19a>
    1622:	83 95       	inc	r24
    1624:	71 e3       	ldi	r23, 0x31	; 49
    1626:	7d 93       	st	X+, r23
    1628:	70 e3       	ldi	r23, 0x30	; 48
    162a:	2a 95       	dec	r18
    162c:	e1 f7       	brne	.-8      	; 0x1626 <__ftoa_engine+0x192>
    162e:	11 24       	eor	r1, r1
    1630:	ef 90       	pop	r14
    1632:	ff 90       	pop	r15
    1634:	0f 91       	pop	r16
    1636:	1f 91       	pop	r17
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	99 27       	eor	r25, r25
    163e:	87 fd       	sbrc	r24, 7
    1640:	90 95       	com	r25
    1642:	08 95       	ret

Disassembly of section .text.avrlibc:

00003fe0 <isspace>:
    3fe0:	91 11       	cpse	r25, r1
    3fe2:	0c 94 05 21 	jmp	0x420a	; 0x420a <__ctype_isfalse>
    3fe6:	80 32       	cpi	r24, 0x20	; 32
    3fe8:	19 f0       	breq	.+6      	; 0x3ff0 <isspace+0x10>
    3fea:	89 50       	subi	r24, 0x09	; 9
    3fec:	85 50       	subi	r24, 0x05	; 5
    3fee:	c8 f7       	brcc	.-14     	; 0x3fe2 <isspace+0x2>
    3ff0:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a72 <memcpy>:
    3a72:	cf 92       	push	r12
    3a74:	df 92       	push	r13
    3a76:	ef 92       	push	r14
    3a78:	dc 01       	movw	r26, r24
    3a7a:	6a 01       	movw	r12, r20
    3a7c:	e6 2e       	mov	r14, r22
    3a7e:	28 0f       	add	r18, r24
    3a80:	39 1f       	adc	r19, r25
    3a82:	a2 17       	cp	r26, r18
    3a84:	b3 07       	cpc	r27, r19
    3a86:	51 f0       	breq	.+20     	; 0x3a9c <memcpy+0x2a>
    3a88:	f6 01       	movw	r30, r12
    3a8a:	44 91       	lpm	r20, Z
    3a8c:	e7 fc       	sbrc	r14, 7
    3a8e:	40 81       	ld	r20, Z
    3a90:	4d 93       	st	X+, r20
    3a92:	4f ef       	ldi	r20, 0xFF	; 255
    3a94:	c4 1a       	sub	r12, r20
    3a96:	d4 0a       	sbc	r13, r20
    3a98:	e4 0a       	sbc	r14, r20
    3a9a:	f3 cf       	rjmp	.-26     	; 0x3a82 <memcpy+0x10>
    3a9c:	ef 90       	pop	r14
    3a9e:	df 90       	pop	r13
    3aa0:	cf 90       	pop	r12
    3aa2:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bc0 <strcat>:
    3bc0:	9a 01       	movw	r18, r20
    3bc2:	46 2f       	mov	r20, r22
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	bd 01       	movw	r22, r26
    3bc8:	6f 5f       	subi	r22, 0xFF	; 255
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	5c 91       	ld	r21, X
    3bce:	55 23       	and	r21, r21
    3bd0:	11 f0       	breq	.+4      	; 0x3bd6 <strcat+0x16>
    3bd2:	db 01       	movw	r26, r22
    3bd4:	f8 cf       	rjmp	.-16     	; 0x3bc6 <strcat+0x6>
    3bd6:	f9 01       	movw	r30, r18
    3bd8:	54 91       	lpm	r21, Z
    3bda:	47 fd       	sbrc	r20, 7
    3bdc:	50 81       	ld	r21, Z
    3bde:	5d 93       	st	X+, r21
    3be0:	55 23       	and	r21, r21
    3be2:	21 f0       	breq	.+8      	; 0x3bec <strcat+0x2c>
    3be4:	2f 5f       	subi	r18, 0xFF	; 255
    3be6:	3f 4f       	sbci	r19, 0xFF	; 255
    3be8:	4f 4f       	sbci	r20, 0xFF	; 255
    3bea:	f5 cf       	rjmp	.-22     	; 0x3bd6 <strcat+0x16>
    3bec:	08 95       	ret

Disassembly of section .text.avrlibc:

000036ec <strcmp>:
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	6b 01       	movw	r12, r22
    36f4:	e8 2e       	mov	r14, r24
    36f6:	f6 01       	movw	r30, r12
    36f8:	84 91       	lpm	r24, Z
    36fa:	e7 fc       	sbrc	r14, 7
    36fc:	80 81       	ld	r24, Z
    36fe:	f9 01       	movw	r30, r18
    3700:	54 91       	lpm	r21, Z
    3702:	47 fd       	sbrc	r20, 7
    3704:	50 81       	ld	r21, Z
    3706:	85 13       	cpse	r24, r21
    3708:	0b c0       	rjmp	.+22     	; 0x3720 <strcmp+0x34>
    370a:	88 23       	and	r24, r24
    370c:	41 f0       	breq	.+16     	; 0x371e <strcmp+0x32>
    370e:	8f ef       	ldi	r24, 0xFF	; 255
    3710:	c8 1a       	sub	r12, r24
    3712:	d8 0a       	sbc	r13, r24
    3714:	e8 0a       	sbc	r14, r24
    3716:	2f 5f       	subi	r18, 0xFF	; 255
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	4f 4f       	sbci	r20, 0xFF	; 255
    371c:	ec cf       	rjmp	.-40     	; 0x36f6 <strcmp+0xa>
    371e:	58 2f       	mov	r21, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	85 1b       	sub	r24, r21
    3724:	91 09       	sbc	r25, r1
    3726:	ef 90       	pop	r14
    3728:	df 90       	pop	r13
    372a:	cf 90       	pop	r12
    372c:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d5e <strncmp>:
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	6b 01       	movw	r12, r22
    2d6a:	e8 2e       	mov	r14, r24
    2d6c:	01 15       	cp	r16, r1
    2d6e:	11 05       	cpc	r17, r1
    2d70:	19 f1       	breq	.+70     	; 0x2db8 <strncmp+0x5a>
    2d72:	01 50       	subi	r16, 0x01	; 1
    2d74:	11 09       	sbc	r17, r1
    2d76:	f6 01       	movw	r30, r12
    2d78:	84 91       	lpm	r24, Z
    2d7a:	e7 fc       	sbrc	r14, 7
    2d7c:	80 81       	ld	r24, Z
    2d7e:	88 23       	and	r24, r24
    2d80:	99 f0       	breq	.+38     	; 0x2da8 <strncmp+0x4a>
    2d82:	f9 01       	movw	r30, r18
    2d84:	94 91       	lpm	r25, Z
    2d86:	47 fd       	sbrc	r20, 7
    2d88:	90 81       	ld	r25, Z
    2d8a:	99 23       	and	r25, r25
    2d8c:	69 f0       	breq	.+26     	; 0x2da8 <strncmp+0x4a>
    2d8e:	01 15       	cp	r16, r1
    2d90:	11 05       	cpc	r17, r1
    2d92:	51 f0       	breq	.+20     	; 0x2da8 <strncmp+0x4a>
    2d94:	89 13       	cpse	r24, r25
    2d96:	08 c0       	rjmp	.+16     	; 0x2da8 <strncmp+0x4a>
    2d98:	8f ef       	ldi	r24, 0xFF	; 255
    2d9a:	c8 1a       	sub	r12, r24
    2d9c:	d8 0a       	sbc	r13, r24
    2d9e:	e8 0a       	sbc	r14, r24
    2da0:	2f 5f       	subi	r18, 0xFF	; 255
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    2da4:	4f 4f       	sbci	r20, 0xFF	; 255
    2da6:	e5 cf       	rjmp	.-54     	; 0x2d72 <strncmp+0x14>
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	f9 01       	movw	r30, r18
    2dac:	24 91       	lpm	r18, Z
    2dae:	47 fd       	sbrc	r20, 7
    2db0:	20 81       	ld	r18, Z
    2db2:	82 1b       	sub	r24, r18
    2db4:	91 09       	sbc	r25, r1
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <strncmp+0x5e>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ef 90       	pop	r14
    2dc2:	df 90       	pop	r13
    2dc4:	cf 90       	pop	r12
    2dc6:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bee <strlen>:
    3bee:	cf 92       	push	r12
    3bf0:	df 92       	push	r13
    3bf2:	ef 92       	push	r14
    3bf4:	6b 01       	movw	r12, r22
    3bf6:	e8 2e       	mov	r14, r24
    3bf8:	a8 2f       	mov	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	24 91       	lpm	r18, Z
    3c00:	a7 fd       	sbrc	r26, 7
    3c02:	20 81       	ld	r18, Z
    3c04:	22 23       	and	r18, r18
    3c06:	19 f0       	breq	.+6      	; 0x3c0e <strlen+0x20>
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	a1 1d       	adc	r26, r1
    3c0c:	f7 cf       	rjmp	.-18     	; 0x3bfc <strlen+0xe>
    3c0e:	8c 19       	sub	r24, r12
    3c10:	9d 09       	sbc	r25, r13
    3c12:	ef 90       	pop	r14
    3c14:	df 90       	pop	r13
    3c16:	cf 90       	pop	r12
    3c18:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e1e <strcpy>:
    3e1e:	9a 01       	movw	r18, r20
    3e20:	46 2f       	mov	r20, r22
    3e22:	dc 01       	movw	r26, r24
    3e24:	f9 01       	movw	r30, r18
    3e26:	54 91       	lpm	r21, Z
    3e28:	47 fd       	sbrc	r20, 7
    3e2a:	50 81       	ld	r21, Z
    3e2c:	5d 93       	st	X+, r21
    3e2e:	55 23       	and	r21, r21
    3e30:	21 f0       	breq	.+8      	; 0x3e3a <strcpy+0x1c>
    3e32:	2f 5f       	subi	r18, 0xFF	; 255
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	4f 4f       	sbci	r20, 0xFF	; 255
    3e38:	f5 cf       	rjmp	.-22     	; 0x3e24 <strcpy+0x6>
    3e3a:	08 95       	ret

Disassembly of section .text.avrlibc:

000039a4 <strnlen>:
    39a4:	cf 92       	push	r12
    39a6:	df 92       	push	r13
    39a8:	ef 92       	push	r14
    39aa:	6b 01       	movw	r12, r22
    39ac:	e8 2e       	mov	r14, r24
    39ae:	a8 2f       	mov	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	41 15       	cp	r20, r1
    39b4:	51 05       	cpc	r21, r1
    39b6:	31 f4       	brne	.+12     	; 0x39c4 <strnlen+0x20>
    39b8:	8c 19       	sub	r24, r12
    39ba:	9d 09       	sbc	r25, r13
    39bc:	ef 90       	pop	r14
    39be:	df 90       	pop	r13
    39c0:	cf 90       	pop	r12
    39c2:	08 95       	ret
    39c4:	fc 01       	movw	r30, r24
    39c6:	24 91       	lpm	r18, Z
    39c8:	a7 fd       	sbrc	r26, 7
    39ca:	20 81       	ld	r18, Z
    39cc:	22 23       	and	r18, r18
    39ce:	a1 f3       	breq	.-24     	; 0x39b8 <strnlen+0x14>
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	a1 1d       	adc	r26, r1
    39d4:	41 50       	subi	r20, 0x01	; 1
    39d6:	51 09       	sbc	r21, r1
    39d8:	ec cf       	rjmp	.-40     	; 0x39b2 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002b20 <fputc>:
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	fb 01       	movw	r30, r22
    2b2a:	24 81       	ldd	r18, Z+4	; 0x04
    2b2c:	21 fd       	sbrc	r18, 1
    2b2e:	03 c0       	rjmp	.+6      	; 0x2b36 <fputc+0x16>
    2b30:	8f ef       	ldi	r24, 0xFF	; 255
    2b32:	9f ef       	ldi	r25, 0xFF	; 255
    2b34:	2c c0       	rjmp	.+88     	; 0x2b8e <fputc+0x6e>
    2b36:	22 ff       	sbrs	r18, 2
    2b38:	16 c0       	rjmp	.+44     	; 0x2b66 <fputc+0x46>
    2b3a:	47 81       	ldd	r20, Z+7	; 0x07
    2b3c:	50 85       	ldd	r21, Z+8	; 0x08
    2b3e:	25 81       	ldd	r18, Z+5	; 0x05
    2b40:	36 81       	ldd	r19, Z+6	; 0x06
    2b42:	42 17       	cp	r20, r18
    2b44:	53 07       	cpc	r21, r19
    2b46:	44 f4       	brge	.+16     	; 0x2b58 <fputc+0x38>
    2b48:	a0 81       	ld	r26, Z
    2b4a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b4c:	9d 01       	movw	r18, r26
    2b4e:	2f 5f       	subi	r18, 0xFF	; 255
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	31 83       	std	Z+1, r19	; 0x01
    2b54:	20 83       	st	Z, r18
    2b56:	8c 93       	st	X, r24
    2b58:	27 81       	ldd	r18, Z+7	; 0x07
    2b5a:	30 85       	ldd	r19, Z+8	; 0x08
    2b5c:	2f 5f       	subi	r18, 0xFF	; 255
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	30 87       	std	Z+8, r19	; 0x08
    2b62:	27 83       	std	Z+7, r18	; 0x07
    2b64:	14 c0       	rjmp	.+40     	; 0x2b8e <fputc+0x6e>
    2b66:	8b 01       	movw	r16, r22
    2b68:	ec 01       	movw	r28, r24
    2b6a:	fb 01       	movw	r30, r22
    2b6c:	01 84       	ldd	r0, Z+9	; 0x09
    2b6e:	f2 85       	ldd	r31, Z+10	; 0x0a
    2b70:	e0 2d       	mov	r30, r0
    2b72:	09 95       	icall
    2b74:	89 2b       	or	r24, r25
    2b76:	e1 f6       	brne	.-72     	; 0x2b30 <fputc+0x10>
    2b78:	d8 01       	movw	r26, r16
    2b7a:	17 96       	adiw	r26, 0x07	; 7
    2b7c:	8d 91       	ld	r24, X+
    2b7e:	9c 91       	ld	r25, X
    2b80:	18 97       	sbiw	r26, 0x08	; 8
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	18 96       	adiw	r26, 0x08	; 8
    2b86:	9c 93       	st	X, r25
    2b88:	8e 93       	st	-X, r24
    2b8a:	17 97       	sbiw	r26, 0x07	; 7
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	08 95       	ret

Disassembly of section .text.avrlibc:

00003598 <sprintf>:
    3598:	af e0       	ldi	r26, 0x0F	; 15
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e2 ed       	ldi	r30, 0xD2	; 210
    359e:	fa e1       	ldi	r31, 0x1A	; 26
    35a0:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__prologue_saves__+0x1c>
    35a4:	0e 89       	ldd	r16, Y+22	; 0x16
    35a6:	1f 89       	ldd	r17, Y+23	; 0x17
    35a8:	86 e0       	ldi	r24, 0x06	; 6
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	1a 83       	std	Y+2, r17	; 0x02
    35ae:	09 83       	std	Y+1, r16	; 0x01
    35b0:	8f ef       	ldi	r24, 0xFF	; 255
    35b2:	9f e7       	ldi	r25, 0x7F	; 127
    35b4:	9f 83       	std	Y+7, r25	; 0x07
    35b6:	8e 83       	std	Y+6, r24	; 0x06
    35b8:	9e 01       	movw	r18, r28
    35ba:	25 5e       	subi	r18, 0xE5	; 229
    35bc:	3f 4f       	sbci	r19, 0xFF	; 255
    35be:	48 8d       	ldd	r20, Y+24	; 0x18
    35c0:	59 8d       	ldd	r21, Y+25	; 0x19
    35c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    35c4:	ce 01       	movw	r24, r28
    35c6:	01 96       	adiw	r24, 0x01	; 1
    35c8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vfprintf>
    35cc:	e8 85       	ldd	r30, Y+8	; 0x08
    35ce:	f9 85       	ldd	r31, Y+9	; 0x09
    35d0:	e0 0f       	add	r30, r16
    35d2:	f1 1f       	adc	r31, r17
    35d4:	10 82       	st	Z, r1
    35d6:	2f 96       	adiw	r28, 0x0f	; 15
    35d8:	e4 e0       	ldi	r30, 0x04	; 4
    35da:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00002268 <__ultoa_invert>:
    2268:	fa 01       	movw	r30, r20
    226a:	aa 27       	eor	r26, r26
    226c:	28 30       	cpi	r18, 0x08	; 8
    226e:	51 f1       	breq	.+84     	; 0x22c4 <__ultoa_invert+0x5c>
    2270:	20 31       	cpi	r18, 0x10	; 16
    2272:	81 f1       	breq	.+96     	; 0x22d4 <__ultoa_invert+0x6c>
    2274:	e8 94       	clt
    2276:	6f 93       	push	r22
    2278:	6e 7f       	andi	r22, 0xFE	; 254
    227a:	6e 5f       	subi	r22, 0xFE	; 254
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	8f 4f       	sbci	r24, 0xFF	; 255
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	af 4f       	sbci	r26, 0xFF	; 255
    2284:	b1 e0       	ldi	r27, 0x01	; 1
    2286:	3e d0       	rcall	.+124    	; 0x2304 <__ultoa_invert+0x9c>
    2288:	b4 e0       	ldi	r27, 0x04	; 4
    228a:	3c d0       	rcall	.+120    	; 0x2304 <__ultoa_invert+0x9c>
    228c:	67 0f       	add	r22, r23
    228e:	78 1f       	adc	r23, r24
    2290:	89 1f       	adc	r24, r25
    2292:	9a 1f       	adc	r25, r26
    2294:	a1 1d       	adc	r26, r1
    2296:	68 0f       	add	r22, r24
    2298:	79 1f       	adc	r23, r25
    229a:	8a 1f       	adc	r24, r26
    229c:	91 1d       	adc	r25, r1
    229e:	a1 1d       	adc	r26, r1
    22a0:	6a 0f       	add	r22, r26
    22a2:	71 1d       	adc	r23, r1
    22a4:	81 1d       	adc	r24, r1
    22a6:	91 1d       	adc	r25, r1
    22a8:	a1 1d       	adc	r26, r1
    22aa:	20 d0       	rcall	.+64     	; 0x22ec <__ultoa_invert+0x84>
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <__ultoa_invert+0x48>
    22ae:	68 94       	set
    22b0:	3f 91       	pop	r19
    22b2:	2a e0       	ldi	r18, 0x0A	; 10
    22b4:	26 9f       	mul	r18, r22
    22b6:	11 24       	eor	r1, r1
    22b8:	30 19       	sub	r19, r0
    22ba:	30 5d       	subi	r19, 0xD0	; 208
    22bc:	31 93       	st	Z+, r19
    22be:	de f6       	brtc	.-74     	; 0x2276 <__ultoa_invert+0xe>
    22c0:	cf 01       	movw	r24, r30
    22c2:	08 95       	ret
    22c4:	46 2f       	mov	r20, r22
    22c6:	47 70       	andi	r20, 0x07	; 7
    22c8:	40 5d       	subi	r20, 0xD0	; 208
    22ca:	41 93       	st	Z+, r20
    22cc:	b3 e0       	ldi	r27, 0x03	; 3
    22ce:	0f d0       	rcall	.+30     	; 0x22ee <__ultoa_invert+0x86>
    22d0:	c9 f7       	brne	.-14     	; 0x22c4 <__ultoa_invert+0x5c>
    22d2:	f6 cf       	rjmp	.-20     	; 0x22c0 <__ultoa_invert+0x58>
    22d4:	46 2f       	mov	r20, r22
    22d6:	4f 70       	andi	r20, 0x0F	; 15
    22d8:	40 5d       	subi	r20, 0xD0	; 208
    22da:	4a 33       	cpi	r20, 0x3A	; 58
    22dc:	18 f0       	brcs	.+6      	; 0x22e4 <__ultoa_invert+0x7c>
    22de:	49 5d       	subi	r20, 0xD9	; 217
    22e0:	31 fd       	sbrc	r19, 1
    22e2:	40 52       	subi	r20, 0x20	; 32
    22e4:	41 93       	st	Z+, r20
    22e6:	02 d0       	rcall	.+4      	; 0x22ec <__ultoa_invert+0x84>
    22e8:	a9 f7       	brne	.-22     	; 0x22d4 <__ultoa_invert+0x6c>
    22ea:	ea cf       	rjmp	.-44     	; 0x22c0 <__ultoa_invert+0x58>
    22ec:	b4 e0       	ldi	r27, 0x04	; 4
    22ee:	a6 95       	lsr	r26
    22f0:	97 95       	ror	r25
    22f2:	87 95       	ror	r24
    22f4:	77 95       	ror	r23
    22f6:	67 95       	ror	r22
    22f8:	ba 95       	dec	r27
    22fa:	c9 f7       	brne	.-14     	; 0x22ee <__ultoa_invert+0x86>
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	61 05       	cpc	r22, r1
    2300:	71 05       	cpc	r23, r1
    2302:	08 95       	ret
    2304:	9b 01       	movw	r18, r22
    2306:	ac 01       	movw	r20, r24
    2308:	0a 2e       	mov	r0, r26
    230a:	06 94       	lsr	r0
    230c:	57 95       	ror	r21
    230e:	47 95       	ror	r20
    2310:	37 95       	ror	r19
    2312:	27 95       	ror	r18
    2314:	ba 95       	dec	r27
    2316:	c9 f7       	brne	.-14     	; 0x230a <__ultoa_invert+0xa2>
    2318:	62 0f       	add	r22, r18
    231a:	73 1f       	adc	r23, r19
    231c:	84 1f       	adc	r24, r20
    231e:	95 1f       	adc	r25, r21
    2320:	a0 1d       	adc	r26, r0
    2322:	08 95       	ret

Disassembly of section .text.avrlibc:

0000420a <__ctype_isfalse>:
    420a:	99 27       	eor	r25, r25
    420c:	88 27       	eor	r24, r24

0000420e <__ctype_istrue>:
    420e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003cba <eeprom_read_block>:
    3cba:	ba 01       	movw	r22, r20
    3cbc:	a9 01       	movw	r20, r18
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22

00003cc2 <eeprom_read_blraw>:
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	f9 99       	sbic	0x1f, 1	; 31
    3cc6:	fe cf       	rjmp	.-4      	; 0x3cc4 <eeprom_read_blraw+0x2>
    3cc8:	06 c0       	rjmp	.+12     	; 0x3cd6 <eeprom_read_blraw+0x14>
    3cca:	f2 bd       	out	0x22, r31	; 34
    3ccc:	e1 bd       	out	0x21, r30	; 33
    3cce:	f8 9a       	sbi	0x1f, 0	; 31
    3cd0:	31 96       	adiw	r30, 0x01	; 1
    3cd2:	00 b4       	in	r0, 0x20	; 32
    3cd4:	0d 92       	st	X+, r0
    3cd6:	41 50       	subi	r20, 0x01	; 1
    3cd8:	50 40       	sbci	r21, 0x00	; 0
    3cda:	b8 f7       	brcc	.-18     	; 0x3cca <eeprom_read_blraw+0x8>
    3cdc:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ff2 <eeprom_read_byte>:
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	f9 99       	sbic	0x1f, 1	; 31
    3ff6:	fe cf       	rjmp	.-4      	; 0x3ff4 <eeprom_read_byte+0x2>
    3ff8:	92 bd       	out	0x22, r25	; 34
    3ffa:	81 bd       	out	0x21, r24	; 33
    3ffc:	f8 9a       	sbi	0x1f, 0	; 31
    3ffe:	99 27       	eor	r25, r25
    4000:	80 b5       	in	r24, 0x20	; 32
    4002:	08 95       	ret

Disassembly of section .text.avrlibc:

00004112 <eeprom_read_dword>:
    4112:	cb 01       	movw	r24, r22
    4114:	a6 e1       	ldi	r26, 0x16	; 22
    4116:	b0 e0       	ldi	r27, 0x00	; 0
    4118:	44 e0       	ldi	r20, 0x04	; 4
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00004120 <eeprom_read_word>:
    4120:	cb 01       	movw	r24, r22
    4122:	a8 e1       	ldi	r26, 0x18	; 24
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	42 e0       	ldi	r20, 0x02	; 2
    4128:	50 e0       	ldi	r21, 0x00	; 0
    412a:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003622 <eeprom_update_block>:
    3622:	cf 92       	push	r12
    3624:	df 92       	push	r13
    3626:	ef 92       	push	r14
    3628:	21 50       	subi	r18, 0x01	; 1
    362a:	31 09       	sbc	r19, r1
    362c:	c0 f0       	brcs	.+48     	; 0x365e <eeprom_update_block+0x3c>
    362e:	6b 01       	movw	r12, r22
    3630:	e8 2e       	mov	r14, r24
    3632:	c2 0e       	add	r12, r18
    3634:	d3 1e       	adc	r13, r19
    3636:	e1 1c       	adc	r14, r1
    3638:	ca 01       	movw	r24, r20
    363a:	82 0f       	add	r24, r18
    363c:	93 1f       	adc	r25, r19
    363e:	42 2f       	mov	r20, r18
    3640:	73 2f       	mov	r23, r19
    3642:	f6 01       	movw	r30, r12
    3644:	5e 2d       	mov	r21, r14
    3646:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__xload_1>
    364a:	26 2f       	mov	r18, r22
    364c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <eeprom_update_r18>
    3650:	31 e0       	ldi	r19, 0x01	; 1
    3652:	c3 1a       	sub	r12, r19
    3654:	d1 08       	sbc	r13, r1
    3656:	e1 08       	sbc	r14, r1
    3658:	41 50       	subi	r20, 0x01	; 1
    365a:	70 40       	sbci	r23, 0x00	; 0
    365c:	90 f7       	brcc	.-28     	; 0x3642 <eeprom_update_block+0x20>
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	08 95       	ret

Disassembly of section .text.avrlibc:

00003cde <eeprom_update_byte>:
    3cde:	26 2f       	mov	r18, r22

00003ce0 <eeprom_update_r18>:
    3ce0:	f9 99       	sbic	0x1f, 1	; 31
    3ce2:	fe cf       	rjmp	.-4      	; 0x3ce0 <eeprom_update_r18>
    3ce4:	92 bd       	out	0x22, r25	; 34
    3ce6:	81 bd       	out	0x21, r24	; 33
    3ce8:	f8 9a       	sbi	0x1f, 0	; 31
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	00 b4       	in	r0, 0x20	; 32
    3cee:	02 16       	cp	r0, r18
    3cf0:	39 f0       	breq	.+14     	; 0x3d00 <eeprom_update_r18+0x20>
    3cf2:	1f ba       	out	0x1f, r1	; 31
    3cf4:	20 bd       	out	0x20, r18	; 32
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	fa 9a       	sbi	0x1f, 2	; 31
    3cfc:	f9 9a       	sbi	0x1f, 1	; 31
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ebe <eeprom_update_dword>:
    3ebe:	03 96       	adiw	r24, 0x03	; 3
    3ec0:	27 2f       	mov	r18, r23
    3ec2:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <eeprom_update_r18>
    3ec6:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <eeprom_update_byte>
    3eca:	25 2f       	mov	r18, r21
    3ecc:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <eeprom_update_r18>
    3ed0:	24 2f       	mov	r18, r20
    3ed2:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

0000418e <eeprom_update_word>:
    418e:	01 96       	adiw	r24, 0x01	; 1
    4190:	27 2f       	mov	r18, r23
    4192:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <eeprom_update_r18>
    4196:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00003d86 <__mulsi3>:
    3d86:	db 01       	movw	r26, r22
    3d88:	8f 93       	push	r24
    3d8a:	9f 93       	push	r25
    3d8c:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__muluhisi3>
    3d90:	bf 91       	pop	r27
    3d92:	af 91       	pop	r26
    3d94:	a2 9f       	mul	r26, r18
    3d96:	80 0d       	add	r24, r0
    3d98:	91 1d       	adc	r25, r1
    3d9a:	a3 9f       	mul	r26, r19
    3d9c:	90 0d       	add	r25, r0
    3d9e:	b2 9f       	mul	r27, r18
    3da0:	90 0d       	add	r25, r0
    3da2:	11 24       	eor	r1, r1
    3da4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003666 <__udivmodsi4>:
    3666:	a1 e2       	ldi	r26, 0x21	; 33
    3668:	1a 2e       	mov	r1, r26
    366a:	aa 1b       	sub	r26, r26
    366c:	bb 1b       	sub	r27, r27
    366e:	fd 01       	movw	r30, r26
    3670:	0d c0       	rjmp	.+26     	; 0x368c <__udivmodsi4_ep>

00003672 <__udivmodsi4_loop>:
    3672:	aa 1f       	adc	r26, r26
    3674:	bb 1f       	adc	r27, r27
    3676:	ee 1f       	adc	r30, r30
    3678:	ff 1f       	adc	r31, r31
    367a:	a2 17       	cp	r26, r18
    367c:	b3 07       	cpc	r27, r19
    367e:	e4 07       	cpc	r30, r20
    3680:	f5 07       	cpc	r31, r21
    3682:	20 f0       	brcs	.+8      	; 0x368c <__udivmodsi4_ep>
    3684:	a2 1b       	sub	r26, r18
    3686:	b3 0b       	sbc	r27, r19
    3688:	e4 0b       	sbc	r30, r20
    368a:	f5 0b       	sbc	r31, r21

0000368c <__udivmodsi4_ep>:
    368c:	66 1f       	adc	r22, r22
    368e:	77 1f       	adc	r23, r23
    3690:	88 1f       	adc	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	1a 94       	dec	r1
    3696:	69 f7       	brne	.-38     	; 0x3672 <__udivmodsi4_loop>
    3698:	60 95       	com	r22
    369a:	70 95       	com	r23
    369c:	80 95       	com	r24
    369e:	90 95       	com	r25
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	bd 01       	movw	r22, r26
    36a6:	cf 01       	movw	r24, r30
    36a8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003f18 <__muluhisi3>:
    3f18:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <__umulhisi3>
    3f1c:	a5 9f       	mul	r26, r21
    3f1e:	90 0d       	add	r25, r0
    3f20:	b4 9f       	mul	r27, r20
    3f22:	90 0d       	add	r25, r0
    3f24:	a4 9f       	mul	r26, r20
    3f26:	80 0d       	add	r24, r0
    3f28:	91 1d       	adc	r25, r1
    3f2a:	11 24       	eor	r1, r1
    3f2c:	08 95       	ret

Disassembly of section .text.libgcc:

000041b8 <__xload_1>:
    41b8:	57 fd       	sbrc	r21, 7
    41ba:	60 81       	ld	r22, Z
    41bc:	57 ff       	sbrs	r21, 7
    41be:	64 91       	lpm	r22, Z
    41c0:	08 95       	ret
