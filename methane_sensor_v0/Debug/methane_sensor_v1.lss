
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00006b45  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000772  00800100  00800100  00006b45  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00006b45  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00006ba0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c18  00000000  00000000  00006c10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001277f  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003470  00000000  00000000  00019fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ba9  00000000  00000000  0001d417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f88  00000000  00000000  00023fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001542  00000000  00000000  00025f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000074ba  00000000  00000000  0002748a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0002e944  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000069d4  000069d4  00006b28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002f344  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  000066ac  000066ac  00006800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00006534  00006534  00006688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  000066ba  000066ba  0000680e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00006548  00006548  0000669c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000066c8  000066c8  0000681c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  0000655c  0000655c  000066b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  000066d6  000066d6  0000682a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00006570  00006570  000066c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  000066e4  000066e4  00006838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00006584  00006584  000066d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00006928  00006928  00006a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  00005802  00005802  00005956  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00006598  00006598  000066ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00006930  00006930  00006a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00006938  00006938  00006a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  00006940  00006940  00006a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  000066f2  000066f2  00006846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  000068ba  000068ba  00006a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  000061c6  000061c6  0000631a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00006998  00006998  00006aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  000069d8  000069d8  00006b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00004ecc  00004ecc  00005020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800f7b  00800f7b  00006b45  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  00005bcc  00005bcc  00005d20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  000067ee  000067ee  00006942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  000067fa  000067fa  0000694e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00004f1a  00004f1a  0000506e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800f7d  00800f7d  00006b45  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  000061e6  000061e6  0000633a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  00006948  00006948  00006a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  0000699e  0000699e  00006af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006206  00006206  0000635a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  000068c4  000068c4  00006a18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  00004d32  00004d32  00004e86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  000058f2  000058f2  00005a46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  0000420c  0000420c  00004360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800f95  00800f95  00006b45  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800f96  00800f96  00006b45  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800f4a  00800f4a  00006b45  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  00005004  00005004  00005158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  00004b22  00004b22  00004c76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  000065ac  000065ac  00006700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006400  00006400  00006554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00005c68  00005c68  00005dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  00005d30  00005d30  00005e84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006610  00006610  00006764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  000052f6  000052f6  0000544a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  00005640  00005640  00005794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006226  00006226  0000637a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  000065c0  000065c0  00006714  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  000065d4  000065d4  00006728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  0000667c  0000667c  000067d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00005ee0  00005ee0  00006034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  0000583e  0000583e  00005992  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000003c  0000587a  0000587a  000059ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000006e  00004722  00004722  00004876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  00006700  00006700  00006854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  000068ce  000068ce  00006a22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00005fee  00005fee  00006142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  00005416  00005416  0000556a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000004a  00005218  00005218  0000536c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  0000455a  0000455a  000046ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800f97  00800f97  00006b45  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800f98  00800f98  00006b45  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000001  00800f99  00800f99  00006b45  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000001  00800f9a  00800f9a  00006b45  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  00005f0e  00005f0e  00006062  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  000058b6  000058b6  00005a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 0000008a  00004078  00004078  000041cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  0000670e  0000670e  00006862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  0000671c  0000671c  00006870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  000068d8  000068d8  00006a2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  00006016  00006016  0000616a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000004a  00005262  00005262  000053b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  000045ce  000045ce  00004722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800f9b  00800f9b  00006b45  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800f9c  00800f9c  00006b45  2**0
                  ALLOC
 92 .bss.rx_buffer 00000096  00800dea  00800dea  00006b45  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000001  00800f9d  00800f9d  00006b45  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000001  00800f9e  00800f9e  00006b45  2**0
                  ALLOC
 95 .bss.tx_buffer 000000c8  00800d22  00800d22  00006b45  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  0000672a  0000672a  0000687e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  000068e2  000068e2  00006a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  0000592c  0000592c  00005a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00003d92  00003d92  00003ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  0000644e  0000644e  000065a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  000049a4  000049a4  00004af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  000065e8  000065e8  0000673c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  00006358  00006358  000064ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  00004c86  00004c86  00004dda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  0000545c  0000545c  000055b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  000068ec  000068ec  00006a40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  00006286  00006286  000063da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  00006950  00006950  00006aa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006622  00006622  00006776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  00005682  00005682  000057d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800f9f  00800f9f  00006b45  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800fa0  00800fa0  00006b45  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800f7f  00800f7f  00006b45  2**0
                  ALLOC
114 .bss._data    00000002  00800f81  00800f81  00006b45  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800f83  00800f83  00006b45  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800f5f  000069e1  00006b35  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800f63  000069e5  00006b39  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800f67  000069e9  00006b3d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  000064c6  000064c6  0000661a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  000064dc  000064dc  00006630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  000064f2  000064f2  00006646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  00005966  00005966  00005aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  00005d60  00005d60  00005eb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  000059a0  000059a0  00005af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00005d90  00005d90  00005ee4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  000059da  000059da  00005b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00005dc0  00005dc0  00005f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  00006738  00006738  0000688c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  000062a4  000062a4  000063f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  00006746  00006746  0000689a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  000062c2  000062c2  00006416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  00006754  00006754  000068a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  000062e0  000062e0  00006434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  00006762  00006762  000068b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  0000668c  0000668c  000067e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  00006806  00006806  0000695a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  00006812  00006812  00006966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  0000681e  0000681e  00006972  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  0000682a  0000682a  0000697e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  00006836  00006836  0000698a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  00006842  00006842  00006996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  0000684e  0000684e  000069a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  0000685a  0000685a  000069ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  000069a4  000069a4  00006af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  00005050  00005050  000051a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  00005a14  00005a14  00005b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  00006770  00006770  000068c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  0000669c  0000669c  000067f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  00005706  00005706  0000585a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  00006958  00006958  00006aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  00006960  00006960  00006ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  00006968  00006968  00006abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800fa1  00800fa1  00006b45  2**0
                  ALLOC
154 .progmemx.data 00000058  00000814  00000814  00000968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  00004bd6  00004bd6  00004d2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  0000166c  0000166c  000017c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  00006466  00006466  000065ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  00006374  00006374  000064c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  000069aa  000069aa  00006afe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002e  00005f3c  00005f3c  00006090  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  00006634  00006634  00006788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  000069b0  000069b0  00006b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  000068f6  000068f6  00006a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  000069b6  000069b6  00006b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  000069bc  000069bc  00006b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  000069c2  000069c2  00006b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800fa2  00800fa2  00006b45  2**0
                  ALLOC
168 .bss.busy     00000001  00800fa3  00800fa3  00006b45  2**0
                  ALLOC
169 .bss.cnt      00000001  00800fa4  00800fa4  00006b45  2**0
                  ALLOC
170 .progmemx.data 00000073  000007a1  000007a1  000008f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   00000084  00004188  00004188  000042dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  00006390  00006390  000064e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  00005c9a  00005c9a  00005dee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  00004a0a  00004a0a  00004b5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  00004f68  00004f68  000050bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  0000533e  0000533e  00005492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  00005386  00005386  000054da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  000053ce  000053ce  00005522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  00005df0  00005df0  00005f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000ac  000039b6  000039b6  00003b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  0000086c  0000086c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  000048d4  000048d4  00004a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  00003008  00003008  0000315c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  000065fc  000065fc  00006750  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  00005a4c  00005a4c  00005ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  000008c9  000008c9  00000a1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  00004790  00004790  000048e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800fa5  00800fa5  00006b45  2**0
                  ALLOC
189 .bss.cnt      00000002  00800f85  00800f85  00006b45  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  00006866  00006866  000069ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_setPendingStates 0000000c  00006872  00006872  000069c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_setMatchCase 0000000c  0000687e  0000687e  000069d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_strbeginswith 0000004a  000052ac  000052ac  00005400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_matchMessage 0000005c  00004ac6  00004ac6  00004c1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000008a4  000008a4  000009f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  000054a2  000054a2  000055f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  00004302  00004302  00004456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  00006970  00006970  00006ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800fa6  00800fa6  00006b45  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800fa7  00800fa7  00006b45  2**0
                  ALLOC
201 .text.MRPP_init_group 00000018  0000647e  0000647e  000065d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  00004642  00004642  00004796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  000060fa  000060fa  0000624e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00003e28  00003e28  00003f7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  0000688a  0000688a  000069de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  0000611c  0000611c  00006270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  0000613e  0000613e  00006292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  00006900  00006900  00006a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.mrpp_data_add_int16 00000092  00003f54  00003f54  000040a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.mrpp_data_get 00000030  00005e20  00005e20  00005f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.add_data_types 000000d8  000032c0  000032c0  00003414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.update_bodies 00000162  00002286  00002286  000023da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.mrpp_state_init 000001be  00001db2  00001db2  00001f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.mrpp_state_get_header 000000a2  00003c4e  00003c4e  00003da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_get_tail 000000a4  00003a62  00003a62  00003bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_set_collection 00000086  00004102  00004102  00004256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_is_body_ready 00000030  00005e50  00005e50  00005fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_all_bodies_sent 0000002a  00005fc4  00005fc4  00006118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_get_ready_body 0000011a  000028b4  000028b4  00002a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_set_body_sent 00000020  00006246  00006246  0000639a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_get_collection_address 00000036  00005af4  00005af4  00005c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.cb_cnt_time 00000030  00005e80  00005e80  00005fd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.PUMP_start 00000024  0000608e  0000608e  000061e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.PUMP_is_done 0000001c  000063ac  000063ac  00006500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .bss.eventPointer 00000001  00800fa8  00800fa8  00006b45  2**0
                  ALLOC
226 .bss.cnt      00000002  00800f87  00800f87  00006b45  2**0
                  ALLOC
227 .bss._seconds 00000002  00800f89  00800f89  00006b45  2**0
                  ALLOC
228 .text.datetime_to_BCD 00000100  00002d0a  00002d0a  00002e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.RTC_set_clock_out 00000050  00004e2c  00004e2c  00004f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.RTC_clear_wake_up_interrupt 00000034  00005c00  00005c00  00005d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_get_current_time 00000140  000023e8  000023e8  0000253c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .rodata       00000005  00800f5a  000069dc  00006b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
233 .text.RTC_set_wake_up_interrupt_minutes 000000c4  0000360e  0000360e  00003762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.RTC_set_current_time 00000068  0000493c  0000493c  00004a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.RTC_datetime_to_ts 00000122  00002792  00002792  000028e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000008ce  000008ce  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.bytes_2_uint 0000001a  0000641a  0000641a  0000656e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.init_measurement 00000038  00005a84  00005a84  00005bd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.validate_data 00000032  00005ccc  00005ccc  00005e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.read_value 000000a2  00003cf0  00003cf0  00003e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.vect_SCD_do_sample 00000046  000054e8  000054e8  0000563c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.SCD30_sensor_on 00000022  00006160  00006160  000062b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_off 00000008  00006978  00006978  00006acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_init_sampling 00000022  00006182  00006182  000062d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_deinit_sampling 0000000e  0000677e  0000677e  000068d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_start_sampling 0000000a  0000690a  0000690a  00006a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_is_sampling_done 0000001c  000063c8  000063c8  0000651c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_get_reading 0000001a  00006434  00006434  00006588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .bss.cntSamples 00000002  00800f8b  00800f8b  00006b45  2**0
                  ALLOC
250 .bss._data    00000002  00800f8d  00800f8d  00006b45  2**0
                  ALLOC
251 .bss._nSamples 00000002  00800f8f  00800f8f  00006b45  2**0
                  ALLOC
252 .progmemx.data.READ_DATA_CMD 00000002  000008cc  000008cc  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
253 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000008bf  000008bf  00000a13  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
254 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000008c4  000008c4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
255 .text.parse_cmd 00000030  00005eb0  00005eb0  00006004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.validate_cmd 00000056  00004cdc  00004cdc  00004e30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .progmemx.data 000000ac  000005c9  000005c9  0000071d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
258 .text.CONF_enter 0000013c  00002528  00002528  0000267c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .progmemx.data 00000081  00000720  00000720  00000874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
260 .text.CON_RN2483_parse 0000006c  000047fe  000047fe  00004952  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.CON_RN2483 00000166  00002120  00002120  00002274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.CONNECT 00000054  00004d86  00004d86  00004eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .progmemx.data 00000188  00000441  00000441  00000595  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
264 .text.read_cols 000000bc  000036d2  000036d2  00003826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.read_time 00000092  00003fe6  00003fe6  0000413a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.write_deveui 00000078  0000437a  0000437a  000044ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.write_appeui 00000078  000043f2  000043f2  00004546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.write_appkey 00000078  0000446a  0000446a  000045be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.write_PPM_factor 0000004c  0000509c  0000509c  000051f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.write_RRL 0000004c  000050e8  000050e8  0000523c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.write_VCC 0000004c  00005134  00005134  00005288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.get_time_par 00000034  00005c34  00005c34  00005d88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.write_cols 0000012e  00002664  00002664  000027b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.write_heat_up 0000004c  00005180  00005180  000052d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.write_air_pump 00000050  00004e7c  00004e7c  00004fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_sp_interval 0000004c  000051cc  000051cc  00005320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_reset 000000e2  00003100  00003100  00003254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_time 000000fe  00002f0a  00002f0a  0000305e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.handle_read 000002a2  00001910  00001910  00001a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.handle_write 00000200  00001bb2  00001bb2  00001d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .bss.arg      00000050  00800e80  00800e80  00006b45  2**0
                  ALLOC
282 .progmemx.data 000000ab  00000675  00000675  000007c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
283 .text.handle_methane 0000011a  000029ce  000029ce  00002b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.handle_co2 000000a4  00003b06  00003b06  00003c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.handle_pump 000000a4  00003baa  00003baa  00003cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.handle_sample 000000b8  0000384a  0000384a  0000399e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.init_methane_SCD30 00000028  0000603e  0000603e  00006192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .bss.par      00000014  00800f14  00800f14  00006b45  2**0
                  ALLOC
289 .text.count_parameters 00000052  00004dda  00004dda  00004f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.par_index 00000070  000046b2  000046b2  00004806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.get_parameter 00000096  00003ebe  00003ebe  00004012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.decode_stage_response 00000016  00006508  00006508  0000665c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.decode_join_response 0000001c  000063e4  000063e4  00006538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.decode_header_tail_response 0000001e  000062fe  000062fe  00006452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.read_eeprom 0000005a  00004b7c  00004b7c  00004cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.join_lora 00000012  00006646  00006646  0000679a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.set_wakeup 0000000a  00006914  00006914  00006a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.send_header 0000003e  00005786  00005786  000058da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.send_body 00000040  00005746  00005746  0000589a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.decode_body_response 00000028  00006066  00006066  000061ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.send_tail 0000003e  000057c4  000057c4  00005918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.send_msg 00000018  00006496  00006496  000065ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .progmemx.data 000001dd  00000264  00000264  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
304 .text.stage_0 000000d4  00003398  00003398  000034ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.stage_1 00000100  00002e0a  00002e0a  00002f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.stage_2 0000011a  00002ae8  00002ae8  00002c3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.stage_3 00000108  00002c02  00002c02  00002d56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.MAINPG_start 0000037c  00001014  00001014  00001168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .bss.fromSleep 00000001  00800fa9  00800fa9  00006b45  2**0
                  ALLOC
310 .bss.samplingProcessInterval 00000001  00800faa  00800faa  00006b45  2**0
                  ALLOC
311 .data.methHeatUpTime 00000001  00800fab  000008cf  00000a23  2**0
                  CONTENTS, ALLOC, LOAD, DATA
312 .data.airPumpTime 00000002  00800f91  000069ed  00006b41  2**0
                  CONTENTS, ALLOC, LOAD, DATA
313 .bss.ppmx     00000004  00800f6b  00800f6b  00006b45  2**0
                  ALLOC
314 .bss.rrlx     00000004  00800f6f  00800f6f  00006b45  2**0
                  ALLOC
315 .bss.vccx     00000004  00800f73  00800f73  00006b45  2**0
                  ALLOC
316 .bss.cols     00000023  00800ed0  00800ed0  00006b45  2**0
                  ALLOC
317 .bss.appkey   00000021  00800ef3  00800ef3  00006b45  2**0
                  ALLOC
318 .bss.appeui   00000011  00800f28  00800f28  00006b45  2**0
                  ALLOC
319 .bss.deveui   00000011  00800f39  00800f39  00006b45  2**0
                  ALLOC
320 .bss.dt       00000006  00800f54  00800f54  00006b45  2**0
                  ALLOC
321 .bss.ts       00000004  00800f77  00800f77  00006b45  2**0
                  ALLOC
322 .bss.meth_data 00000258  00800872  00800872  00006b45  2**0
                  ALLOC
323 .bss.co2_data 00000258  00800aca  00800aca  00006b45  2**0
                  ALLOC
324 .data.bodyIndex 00000002  00800f93  000069ef  00006b43  2**0
                  CONTENTS, ALLOC, LOAD, DATA
325 .bss.state_s3 00000001  00800fac  00800fac  00006b45  2**0
                  ALLOC
326 .bss.state_s2 00000001  00800fad  00800fad  00006b45  2**0
                  ALLOC
327 .bss.state_s1 00000001  00800fae  00800fae  00006b45  2**0
                  ALLOC
328 .bss.state_s0 00000001  00800faf  00800faf  00006b45  2**0
                  ALLOC
329 .text.calc_crc8 00000036  00005b2a  00005b2a  00005c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 .text.get_decimal 000000b4  00003902  00003902  00003a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text.str2flaot 0000004e  00004fb6  00004fb6  0000510a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text.is_float 00000058  00004c2e  00004c2e  00004d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.avrlibc.fplib 0000000e  0000678c  0000678c  000068e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.avrlibc.fplib 000000ce  00003540  00003540  00003694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.avrlibc.fplib 00000008  00006980  00006980  00006ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc.fplib 000000de  000031e2  000031e2  00003336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc.fplib 0000005e  00004a68  00004a68  00004bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc.fplib 0000007a  00004288  00004288  000043dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc.fplib 0000000c  00006896  00006896  000069ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .text.avrlibc.fplib 00000006  000069c8  000069c8  00006b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text.avrlibc.fplib 0000000e  0000679a  0000679a  000068ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.avrlibc.fplib 0000000e  000067a8  000067a8  000068fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.avrlibc.fplib 00000022  000061a4  000061a4  000062f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.avrlibc.fplib 00000044  00005574  00005574  000056c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 0000000e  000067b6  000067b6  0000690a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 00000008  00006988  00006988  00006adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 000000d4  0000346c  0000346c  000035c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .progmemx.data 00000008  000008b7  000008b7  00000a0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
349 .text.avrlibc 00000744  000008d0  000008d0  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.libgcc  0000000c  000068a2  000068a2  000069f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.libgcc.mul 0000001e  0000631c  0000631c  00006470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.libgcc.prologue 00000038  00005abc  00005abc  00005c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.libgcc.prologue 00000036  00005b60  00005b60  00005cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc 00000008  00006990  00006990  00006ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc 0000000e  000067c4  000067c4  00006918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc 000002dc  00001390  00001390  000014e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc 000001b0  00001f70  00001f70  000020c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc 00000012  00006658  00006658  000067ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc 00000032  00005cfe  00005cfe  00005e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc 0000002e  00005f6a  00005f6a  000060be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc 00000042  000056c4  000056c4  00005818  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc 0000006a  0000486a  0000486a  000049be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc 0000002c  00005f98  00005f98  000060ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.avrlibc 0000001e  0000633a  0000633a  0000648e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.avrlibc 00000036  00005b96  00005b96  00005cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.avrlibc 00000078  000044e2  000044e2  00004636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.avrlibc 00000046  0000552e  0000552e  00005682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.avrlibc 000000bc  0000378e  0000378e  000038e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 00000006  000069ce  000069ce  00006b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 00000024  000060b2  000060b2  00006206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 00000012  0000666a  0000666a  000067be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 0000000e  000067d2  000067d2  00006926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 0000000e  000067e0  000067e0  00006934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 00000044  000055b8  000055b8  0000570c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000024  000060d6  000060d6  0000622a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 00000018  000064ae  000064ae  00006602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 0000000c  000068ae  000068ae  00006a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.libgcc.mul 00000020  00006266  00006266  000063ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.libgcc.div 00000044  000055fc  000055fc  00005750  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.libgcc.mul 00000016  0000651e  0000651e  00006672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.libgcc  0000000a  0000691e  0000691e  00006a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
   8:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
   c:	0c 94 cc 32 	jmp	0x6598	; 0x6598 <__vector_3>
  10:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  14:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  18:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  1c:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  20:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  24:	0c 94 06 21 	jmp	0x420c	; 0x420c <__vector_9>
  28:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  2c:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  30:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  34:	0c 94 8d 27 	jmp	0x4f1a	; 0x4f1a <__vector_13>
  38:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  3c:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  40:	0c 94 66 27 	jmp	0x4ecc	; 0x4ecc <__vector_16>
  44:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  48:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  4c:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  50:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__vector_20>
  54:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  58:	0c 94 0c 29 	jmp	0x5218	; 0x5218 <__vector_22>
  5c:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  60:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  64:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  68:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  6c:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  70:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <__vector_28>
  74:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__bad_interrupt>
  78:	0c 94 31 29 	jmp	0x5262	; 0x5262 <__vector_30>
  7c:	54 0b       	sbc	r21, r20
  7e:	64 0c       	add	r6, r4
  80:	73 0b       	sbc	r23, r19
  82:	91 0b       	sbc	r25, r17
  84:	b1 0b       	sbc	r27, r17
  86:	d1 0b       	sbc	r29, r17
  88:	f1 0b       	sbc	r31, r17
  8a:	11 0c       	add	r1, r1
  8c:	2f 0c       	add	r2, r15
  8e:	4d 0c       	add	r4, r13
  90:	5f 0c       	add	r5, r15
  92:	75 0c       	add	r7, r5
  94:	77 0c       	add	r7, r7
  96:	af 12       	cpse	r10, r31
  98:	c6 12       	cpse	r12, r22
  9a:	22 13       	cpse	r18, r18
  9c:	cf 12       	cpse	r12, r31
  9e:	2b 13       	cpse	r18, r27
  a0:	14 13       	cpse	r17, r20
  a2:	1b 13       	cpse	r17, r27
  a4:	df 12       	cpse	r13, r31
  a6:	eb 12       	cpse	r14, r27
  a8:	f7 12       	cpse	r15, r23
  aa:	01 13       	cpse	r16, r17
  ac:	0d 13       	cpse	r16, r29
  ae:	a2 10       	cpse	r10, r2
  b0:	af 10       	cpse	r10, r15
  b2:	b9 10       	cpse	r11, r9
  b4:	bf 10       	cpse	r11, r15
  b6:	ee 10       	cpse	r14, r14
  b8:	19 11       	cpse	r17, r9
  ba:	32 11       	cpse	r19, r2
  bc:	35 08       	sbc	r3, r5
  be:	64 08       	sbc	r6, r4
  c0:	7f 08       	sbc	r7, r15
  c2:	90 08       	sbc	r9, r0
  c4:	a4 08       	sbc	r10, r4
  c6:	a3 09       	sbc	r26, r3
  c8:	99 08       	sbc	r9, r9
  ca:	dc 08       	sbc	r13, r12
  cc:	f3 08       	sbc	r15, r3
  ce:	e8 08       	sbc	r14, r8
  d0:	b7 08       	sbc	r11, r7
  d2:	fe 08       	sbc	r15, r14
  d4:	0f 09       	sbc	r16, r15
  d6:	21 09       	sbc	r18, r1
  d8:	29 09       	sbc	r18, r9
  da:	31 09       	sbc	r19, r1
  dc:	39 09       	sbc	r19, r9
  de:	41 09       	sbc	r20, r1
  e0:	5d 09       	sbc	r21, r13
  e2:	64 09       	sbc	r22, r4
  e4:	76 09       	sbc	r23, r6
  e6:	95 09       	sbc	r25, r5
  e8:	b1 09       	sbc	r27, r1
  ea:	bc 09       	sbc	r27, r12

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0f 5a       	subi	r16, 0xAF	; 175
  f0:	80 0f       	add	r24, r16
  f2:	5a 0f       	add	r21, r26
  f4:	6b 00       	.word	0x006b	; ????
  f6:	69 dc       	rcall	.-1838   	; 0xfffff9ca <__eeprom_end+0xff7ef9ca>
  f8:	0f 6b       	ori	r16, 0xBF	; 191
  fa:	0f 91       	pop	r16
  fc:	80 0f       	add	r24, r16
  fe:	91 0f       	add	r25, r17
 100:	95 00       	.word	0x0095	; ????
 102:	69 ed       	ldi	r22, 0xD9	; 217
 104:	0f 95 0f ab 	call	0x43561e	; 0x43561e <__TEXT_REGION_LENGTH__+0x42561e>
 108:	80 0f       	add	r24, r16
 10a:	ab 0f       	add	r26, r27
 10c:	ac 00       	.word	0x00ac	; ????
 10e:	08 cf       	rjmp	.-496    	; 0xffffff20 <__eeprom_end+0xff7eff20>
 110:	0f ac       	ldd	r0, Y+63	; 0x3f
 112:	0f b0       	in	r0, 0x0f	; 15
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <vfprintf+0x1a0>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 96 2c 	call	0x592c	; 0x592c <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

000069d4 <__bad_interrupt>:
    69d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

000066ac <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    66ac:	81 b1       	in	r24, 0x01	; 1
    66ae:	88 60       	ori	r24, 0x08	; 8
    66b0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    66b2:	82 b1       	in	r24, 0x02	; 2
    66b4:	87 7f       	andi	r24, 0xF7	; 247
    66b6:	82 b9       	out	0x02, r24	; 2
    66b8:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00006534 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    6534:	88 23       	and	r24, r24
    6536:	21 f0       	breq	.+8      	; 0x6540 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    6538:	82 b1       	in	r24, 0x02	; 2
    653a:	88 60       	ori	r24, 0x08	; 8
    653c:	82 b9       	out	0x02, r24	; 2
    653e:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    6540:	82 b1       	in	r24, 0x02	; 2
    6542:	87 7f       	andi	r24, 0xF7	; 247
    6544:	82 b9       	out	0x02, r24	; 2
    6546:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000066ba <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    66ba:	81 b1       	in	r24, 0x01	; 1
    66bc:	80 62       	ori	r24, 0x20	; 32
    66be:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    66c0:	82 b1       	in	r24, 0x02	; 2
    66c2:	8f 7d       	andi	r24, 0xDF	; 223
    66c4:	82 b9       	out	0x02, r24	; 2
    66c6:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00006548 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    6548:	88 23       	and	r24, r24
    654a:	21 f0       	breq	.+8      	; 0x6554 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    654c:	82 b1       	in	r24, 0x02	; 2
    654e:	80 62       	ori	r24, 0x20	; 32
    6550:	82 b9       	out	0x02, r24	; 2
    6552:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    6554:	82 b1       	in	r24, 0x02	; 2
    6556:	8f 7d       	andi	r24, 0xDF	; 223
    6558:	82 b9       	out	0x02, r24	; 2
    655a:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000066c8 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    66c8:	81 b1       	in	r24, 0x01	; 1
    66ca:	80 61       	ori	r24, 0x10	; 16
    66cc:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    66ce:	82 b1       	in	r24, 0x02	; 2
    66d0:	8f 7e       	andi	r24, 0xEF	; 239
    66d2:	82 b9       	out	0x02, r24	; 2
    66d4:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

0000655c <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    655c:	88 23       	and	r24, r24
    655e:	21 f0       	breq	.+8      	; 0x6568 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    6560:	82 b1       	in	r24, 0x02	; 2
    6562:	80 61       	ori	r24, 0x10	; 16
    6564:	82 b9       	out	0x02, r24	; 2
    6566:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    6568:	82 b1       	in	r24, 0x02	; 2
    656a:	8f 7e       	andi	r24, 0xEF	; 239
    656c:	82 b9       	out	0x02, r24	; 2
    656e:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

000066d6 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    66d6:	8a b1       	in	r24, 0x0a	; 10
    66d8:	80 61       	ori	r24, 0x10	; 16
    66da:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    66dc:	8b b1       	in	r24, 0x0b	; 11
    66de:	8f 7e       	andi	r24, 0xEF	; 239
    66e0:	8b b9       	out	0x0b, r24	; 11
    66e2:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00006570 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    6570:	88 23       	and	r24, r24
    6572:	21 f0       	breq	.+8      	; 0x657c <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    6574:	8b b1       	in	r24, 0x0b	; 11
    6576:	80 61       	ori	r24, 0x10	; 16
    6578:	8b b9       	out	0x0b, r24	; 11
    657a:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    657c:	8b b1       	in	r24, 0x0b	; 11
    657e:	8f 7e       	andi	r24, 0xEF	; 239
    6580:	8b b9       	out	0x0b, r24	; 11
    6582:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

000066e4 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    66e4:	81 b1       	in	r24, 0x01	; 1
    66e6:	80 68       	ori	r24, 0x80	; 128
    66e8:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    66ea:	82 b1       	in	r24, 0x02	; 2
    66ec:	8f 77       	andi	r24, 0x7F	; 127
    66ee:	82 b9       	out	0x02, r24	; 2
    66f0:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00006584 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    6584:	88 23       	and	r24, r24
    6586:	21 f0       	breq	.+8      	; 0x6590 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    6588:	82 b1       	in	r24, 0x02	; 2
    658a:	80 68       	ori	r24, 0x80	; 128
    658c:	82 b9       	out	0x02, r24	; 2
    658e:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6590:	82 b1       	in	r24, 0x02	; 2
    6592:	8f 77       	andi	r24, 0x7F	; 127
    6594:	82 b9       	out	0x02, r24	; 2
    6596:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00006928 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    6928:	82 b1       	in	r24, 0x02	; 2
    692a:	80 58       	subi	r24, 0x80	; 128
    692c:	82 b9       	out	0x02, r24	; 2
    692e:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00005802 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    5802:	84 b1       	in	r24, 0x04	; 4
    5804:	8b 7f       	andi	r24, 0xFB	; 251
    5806:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    5808:	e9 e6       	ldi	r30, 0x69	; 105
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	80 81       	ld	r24, Z
    580e:	8f 7e       	andi	r24, 0xEF	; 239
    5810:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    5812:	80 81       	ld	r24, Z
    5814:	80 62       	ori	r24, 0x20	; 32
    5816:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    5818:	8d b3       	in	r24, 0x1d	; 29
    581a:	84 60       	ori	r24, 0x04	; 4
    581c:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    581e:	83 b7       	in	r24, 0x33	; 51
    5820:	81 7f       	andi	r24, 0xF1	; 241
    5822:	84 60       	ori	r24, 0x04	; 4
    5824:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    5826:	83 b7       	in	r24, 0x33	; 51
    5828:	81 60       	ori	r24, 0x01	; 1
    582a:	83 bf       	out	0x33, r24	; 51
	sei();
    582c:	78 94       	sei
	sleep_cpu();
    582e:	88 95       	sleep
	sleep_disable();
    5830:	83 b7       	in	r24, 0x33	; 51
    5832:	8e 7f       	andi	r24, 0xFE	; 254
    5834:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    5836:	8d b3       	in	r24, 0x1d	; 29
    5838:	8b 7f       	andi	r24, 0xFB	; 251
    583a:	8d bb       	out	0x1d, r24	; 29
    583c:	08 95       	ret

Disassembly of section .text.__vector_3:

00006598 <__vector_3>:
}

ISR(INT2_vect){
    6598:	1f 92       	push	r1
    659a:	0f 92       	push	r0
    659c:	0f b6       	in	r0, 0x3f	; 63
    659e:	0f 92       	push	r0
    65a0:	11 24       	eor	r1, r1
	
}
    65a2:	0f 90       	pop	r0
    65a4:	0f be       	out	0x3f, r0	; 63
    65a6:	0f 90       	pop	r0
    65a8:	1f 90       	pop	r1
    65aa:	18 95       	reti

Disassembly of section .text.rn2483_init:

00006930 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    6930:	84 b1       	in	r24, 0x04	; 4
    6932:	80 61       	ori	r24, 0x10	; 16
    6934:	84 b9       	out	0x04, r24	; 4
    6936:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00006938 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    6938:	85 b1       	in	r24, 0x05	; 5
    693a:	8f 7e       	andi	r24, 0xEF	; 239
    693c:	85 b9       	out	0x05, r24	; 5
    693e:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00006940 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    6940:	85 b1       	in	r24, 0x05	; 5
    6942:	80 61       	ori	r24, 0x10	; 16
    6944:	85 b9       	out	0x05, r24	; 5
    6946:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

000066f2 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    66f2:	87 b1       	in	r24, 0x07	; 7
    66f4:	8f 7b       	andi	r24, 0xBF	; 191
    66f6:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    66f8:	88 b1       	in	r24, 0x08	; 8
    66fa:	8f 7b       	andi	r24, 0xBF	; 191
    66fc:	88 b9       	out	0x08, r24	; 8
    66fe:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

000068ba <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    68ba:	86 b1       	in	r24, 0x06	; 6
    68bc:	86 fb       	bst	r24, 6
    68be:	88 27       	eor	r24, r24
    68c0:	80 f9       	bld	r24, 0
    68c2:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

000061c6 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    61c6:	92 e0       	ldi	r25, 0x02	; 2
    61c8:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    61ca:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    61cc:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    61ce:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    61d0:	ee e6       	ldi	r30, 0x6E	; 110
    61d2:	f0 e0       	ldi	r31, 0x00	; 0
    61d4:	80 81       	ld	r24, Z
    61d6:	82 60       	ori	r24, 0x02	; 2
    61d8:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    61da:	78 94       	sei
	
	//Set callback
	_cb=cb;
    61dc:	70 93 7c 0f 	sts	0x0F7C, r23	; 0x800f7c <_cb+0x1>
    61e0:	60 93 7b 0f 	sts	0x0F7B, r22	; 0x800f7b <_cb>
    61e4:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00006998 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    6998:	86 e0       	ldi	r24, 0x06	; 6
    699a:	85 bd       	out	0x25, r24	; 37
    699c:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

000069d8 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    69d8:	15 bc       	out	0x25, r1	; 37
    69da:	08 95       	ret

Disassembly of section .text.__vector_16:

00004ecc <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    4ecc:	1f 92       	push	r1
    4ece:	0f 92       	push	r0
    4ed0:	0f b6       	in	r0, 0x3f	; 63
    4ed2:	0f 92       	push	r0
    4ed4:	11 24       	eor	r1, r1
    4ed6:	2f 93       	push	r18
    4ed8:	3f 93       	push	r19
    4eda:	4f 93       	push	r20
    4edc:	5f 93       	push	r21
    4ede:	6f 93       	push	r22
    4ee0:	7f 93       	push	r23
    4ee2:	8f 93       	push	r24
    4ee4:	9f 93       	push	r25
    4ee6:	af 93       	push	r26
    4ee8:	bf 93       	push	r27
    4eea:	ef 93       	push	r30
    4eec:	ff 93       	push	r31
	_cb();
    4eee:	e0 91 7b 0f 	lds	r30, 0x0F7B	; 0x800f7b <_cb>
    4ef2:	f0 91 7c 0f 	lds	r31, 0x0F7C	; 0x800f7c <_cb+0x1>
    4ef6:	09 95       	icall
}
    4ef8:	ff 91       	pop	r31
    4efa:	ef 91       	pop	r30
    4efc:	bf 91       	pop	r27
    4efe:	af 91       	pop	r26
    4f00:	9f 91       	pop	r25
    4f02:	8f 91       	pop	r24
    4f04:	7f 91       	pop	r23
    4f06:	6f 91       	pop	r22
    4f08:	5f 91       	pop	r21
    4f0a:	4f 91       	pop	r20
    4f0c:	3f 91       	pop	r19
    4f0e:	2f 91       	pop	r18
    4f10:	0f 90       	pop	r0
    4f12:	0f be       	out	0x3f, r0	; 63
    4f14:	0f 90       	pop	r0
    4f16:	1f 90       	pop	r1
    4f18:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005bcc <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5bcc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    5bd0:	28 e0       	ldi	r18, 0x08	; 8
    5bd2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5bd6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    5bda:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    5bde:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    5be2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5be6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5bea:	ef e6       	ldi	r30, 0x6F	; 111
    5bec:	f0 e0       	ldi	r31, 0x00	; 0
    5bee:	80 81       	ld	r24, Z
    5bf0:	82 60       	ori	r24, 0x02	; 2
    5bf2:	80 83       	st	Z, r24
	sei();
    5bf4:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5bf6:	70 93 7e 0f 	sts	0x0F7E, r23	; 0x800f7e <_cb+0x1>
    5bfa:	60 93 7d 0f 	sts	0x0F7D, r22	; 0x800f7d <_cb>
    5bfe:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000067ee <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    67ee:	e1 e8       	ldi	r30, 0x81	; 129
    67f0:	f0 e0       	ldi	r31, 0x00	; 0
    67f2:	80 81       	ld	r24, Z
    67f4:	86 60       	ori	r24, 0x06	; 6
    67f6:	80 83       	st	Z, r24
    67f8:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000067fa <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    67fa:	e1 e8       	ldi	r30, 0x81	; 129
    67fc:	f0 e0       	ldi	r31, 0x00	; 0
    67fe:	80 81       	ld	r24, Z
    6800:	88 7f       	andi	r24, 0xF8	; 248
    6802:	80 83       	st	Z, r24
    6804:	08 95       	ret

Disassembly of section .text.__vector_13:

00004f1a <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    4f1a:	1f 92       	push	r1
    4f1c:	0f 92       	push	r0
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	0f 92       	push	r0
    4f22:	11 24       	eor	r1, r1
    4f24:	2f 93       	push	r18
    4f26:	3f 93       	push	r19
    4f28:	4f 93       	push	r20
    4f2a:	5f 93       	push	r21
    4f2c:	6f 93       	push	r22
    4f2e:	7f 93       	push	r23
    4f30:	8f 93       	push	r24
    4f32:	9f 93       	push	r25
    4f34:	af 93       	push	r26
    4f36:	bf 93       	push	r27
    4f38:	ef 93       	push	r30
    4f3a:	ff 93       	push	r31
	_cb();
    4f3c:	e0 91 7d 0f 	lds	r30, 0x0F7D	; 0x800f7d <_cb>
    4f40:	f0 91 7e 0f 	lds	r31, 0x0F7E	; 0x800f7e <_cb+0x1>
    4f44:	09 95       	icall
    4f46:	ff 91       	pop	r31
    4f48:	ef 91       	pop	r30
    4f4a:	bf 91       	pop	r27
    4f4c:	af 91       	pop	r26
    4f4e:	9f 91       	pop	r25
    4f50:	8f 91       	pop	r24
    4f52:	7f 91       	pop	r23
    4f54:	6f 91       	pop	r22
    4f56:	5f 91       	pop	r21
    4f58:	4f 91       	pop	r20
    4f5a:	3f 91       	pop	r19
    4f5c:	2f 91       	pop	r18
    4f5e:	0f 90       	pop	r0
    4f60:	0f be       	out	0x3f, r0	; 63
    4f62:	0f 90       	pop	r0
    4f64:	1f 90       	pop	r1
    4f66:	18 95       	reti

Disassembly of section .text.clear_callbacks:

000061e6 <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    61e6:	80 e0       	ldi	r24, 0x00	; 0
    61e8:	09 c0       	rjmp	.+18     	; 0x61fc <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    61ea:	e8 2f       	mov	r30, r24
    61ec:	f0 e0       	ldi	r31, 0x00	; 0
    61ee:	ee 0f       	add	r30, r30
    61f0:	ff 1f       	adc	r31, r31
    61f2:	e6 5b       	subi	r30, 0xB6	; 182
    61f4:	f0 4f       	sbci	r31, 0xF0	; 240
    61f6:	11 82       	std	Z+1, r1	; 0x01
    61f8:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    61fa:	8f 5f       	subi	r24, 0xFF	; 255
    61fc:	85 30       	cpi	r24, 0x05	; 5
    61fe:	a8 f3       	brcs	.-22     	; 0x61ea <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6200:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <cbCounter>
    6204:	08 95       	ret

Disassembly of section .text.start_timer:

00006948 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    6948:	87 e0       	ldi	r24, 0x07	; 7
    694a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    694e:	08 95       	ret

Disassembly of section .text.stop_timer:

0000699e <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    699e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    69a2:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006206 <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6206:	82 e0       	ldi	r24, 0x02	; 2
    6208:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    620c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6210:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6214:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6218:	93 ef       	ldi	r25, 0xF3	; 243
    621a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    621e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    6222:	78 94       	sei
    6224:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

000068c4 <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    68c4:	0e 94 cf 34 	call	0x699e	; 0x699e <stop_timer>
	clear_callbacks();
    68c8:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <clear_callbacks>
    68cc:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00004d32 <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    4d32:	cf 93       	push	r28
    4d34:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4d36:	60 91 96 0f 	lds	r22, 0x0F96	; 0x800f96 <cbCounter>
    4d3a:	65 30       	cpi	r22, 0x05	; 5
    4d3c:	00 f5       	brcc	.+64     	; 0x4d7e <TC2_HAL_subscribe+0x4c>
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	15 c0       	rjmp	.+42     	; 0x4d6c <TC2_HAL_subscribe+0x3a>
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    4d42:	29 2f       	mov	r18, r25
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	f9 01       	movw	r30, r18
    4d48:	ee 0f       	add	r30, r30
    4d4a:	ff 1f       	adc	r31, r31
    4d4c:	e6 5b       	subi	r30, 0xB6	; 182
    4d4e:	f0 4f       	sbci	r31, 0xF0	; 240
    4d50:	40 81       	ld	r20, Z
    4d52:	51 81       	ldd	r21, Z+1	; 0x01
    4d54:	45 2b       	or	r20, r21
    4d56:	49 f4       	brne	.+18     	; 0x4d6a <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    4d58:	22 0f       	add	r18, r18
    4d5a:	33 1f       	adc	r19, r19
    4d5c:	f9 01       	movw	r30, r18
    4d5e:	e6 5b       	subi	r30, 0xB6	; 182
    4d60:	f0 4f       	sbci	r31, 0xF0	; 240
    4d62:	b1 83       	std	Z+1, r27	; 0x01
    4d64:	a0 83       	st	Z, r26
			pointer=i;
    4d66:	c9 2f       	mov	r28, r25
			break;
    4d68:	04 c0       	rjmp	.+8      	; 0x4d72 <TC2_HAL_subscribe+0x40>
int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4d6a:	9f 5f       	subi	r25, 0xFF	; 255
    4d6c:	95 30       	cpi	r25, 0x05	; 5
    4d6e:	48 f3       	brcs	.-46     	; 0x4d42 <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    4d70:	cf ef       	ldi	r28, 0xFF	; 255
			callbacks[i]=cb;
			pointer=i;
			break;
		}
	}
	cbCounter++;
    4d72:	6f 5f       	subi	r22, 0xFF	; 255
    4d74:	60 93 96 0f 	sts	0x0F96, r22	; 0x800f96 <cbCounter>
	start_timer();
    4d78:	0e 94 a4 34 	call	0x6948	; 0x6948 <start_timer>
	return pointer;
    4d7c:	01 c0       	rjmp	.+2      	; 0x4d80 <TC2_HAL_subscribe+0x4e>
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4d7e:	cf ef       	ldi	r28, 0xFF	; 255
		}
	}
	cbCounter++;
	start_timer();
	return pointer;
}
    4d80:	8c 2f       	mov	r24, r28
    4d82:	cf 91       	pop	r28
    4d84:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000058f2 <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	if(callbacks[pointer]==NULL) return;
    58f2:	08 2e       	mov	r0, r24
    58f4:	00 0c       	add	r0, r0
    58f6:	99 0b       	sbc	r25, r25
    58f8:	fc 01       	movw	r30, r24
    58fa:	ee 0f       	add	r30, r30
    58fc:	ff 1f       	adc	r31, r31
    58fe:	e6 5b       	subi	r30, 0xB6	; 182
    5900:	f0 4f       	sbci	r31, 0xF0	; 240
    5902:	20 81       	ld	r18, Z
    5904:	31 81       	ldd	r19, Z+1	; 0x01
    5906:	23 2b       	or	r18, r19
    5908:	81 f0       	breq	.+32     	; 0x592a <TC2_HAL_cancel+0x38>
	callbacks[pointer]=NULL;
    590a:	88 0f       	add	r24, r24
    590c:	99 1f       	adc	r25, r25
    590e:	fc 01       	movw	r30, r24
    5910:	e6 5b       	subi	r30, 0xB6	; 182
    5912:	f0 4f       	sbci	r31, 0xF0	; 240
    5914:	11 82       	std	Z+1, r1	; 0x01
    5916:	10 82       	st	Z, r1
	cbCounter--;
    5918:	80 91 96 0f 	lds	r24, 0x0F96	; 0x800f96 <cbCounter>
    591c:	81 50       	subi	r24, 0x01	; 1
    591e:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <cbCounter>
	if(cbCounter==0){
    5922:	81 11       	cpse	r24, r1
    5924:	02 c0       	rjmp	.+4      	; 0x592a <TC2_HAL_cancel+0x38>
		stop_timer();		
    5926:	0e 94 cf 34 	call	0x699e	; 0x699e <stop_timer>
    592a:	08 95       	ret

Disassembly of section .text.__vector_9:

0000420c <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    420c:	1f 92       	push	r1
    420e:	0f 92       	push	r0
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	0f 92       	push	r0
    4214:	11 24       	eor	r1, r1
    4216:	2f 93       	push	r18
    4218:	3f 93       	push	r19
    421a:	4f 93       	push	r20
    421c:	5f 93       	push	r21
    421e:	6f 93       	push	r22
    4220:	7f 93       	push	r23
    4222:	8f 93       	push	r24
    4224:	9f 93       	push	r25
    4226:	af 93       	push	r26
    4228:	bf 93       	push	r27
    422a:	cf 93       	push	r28
    422c:	ef 93       	push	r30
    422e:	ff 93       	push	r31
	cnt++;
    4230:	80 91 95 0f 	lds	r24, 0x0F95	; 0x800f95 <cnt>
    4234:	8f 5f       	subi	r24, 0xFF	; 255
    4236:	80 93 95 0f 	sts	0x0F95, r24	; 0x800f95 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    423a:	80 32       	cpi	r24, 0x20	; 32
    423c:	99 f4       	brne	.+38     	; 0x4264 <__vector_9+0x58>
		cnt=0;
    423e:	10 92 95 0f 	sts	0x0F95, r1	; 0x800f95 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4242:	c0 e0       	ldi	r28, 0x00	; 0
    4244:	0d c0       	rjmp	.+26     	; 0x4260 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    4246:	ec 2f       	mov	r30, r28
    4248:	f0 e0       	ldi	r31, 0x00	; 0
    424a:	ee 0f       	add	r30, r30
    424c:	ff 1f       	adc	r31, r31
    424e:	e6 5b       	subi	r30, 0xB6	; 182
    4250:	f0 4f       	sbci	r31, 0xF0	; 240
    4252:	01 90       	ld	r0, Z+
    4254:	f0 81       	ld	r31, Z
    4256:	e0 2d       	mov	r30, r0
    4258:	30 97       	sbiw	r30, 0x00	; 0
    425a:	09 f0       	breq	.+2      	; 0x425e <__vector_9+0x52>
				callbacks[i]();
    425c:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    425e:	cf 5f       	subi	r28, 0xFF	; 255
    4260:	c5 30       	cpi	r28, 0x05	; 5
    4262:	88 f3       	brcs	.-30     	; 0x4246 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    4264:	ff 91       	pop	r31
    4266:	ef 91       	pop	r30
    4268:	cf 91       	pop	r28
    426a:	bf 91       	pop	r27
    426c:	af 91       	pop	r26
    426e:	9f 91       	pop	r25
    4270:	8f 91       	pop	r24
    4272:	7f 91       	pop	r23
    4274:	6f 91       	pop	r22
    4276:	5f 91       	pop	r21
    4278:	4f 91       	pop	r20
    427a:	3f 91       	pop	r19
    427c:	2f 91       	pop	r18
    427e:	0f 90       	pop	r0
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	0f 90       	pop	r0
    4284:	1f 90       	pop	r1
    4286:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00005004 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    5004:	cf 92       	push	r12
    5006:	df 92       	push	r13
    5008:	ef 92       	push	r14
    500a:	cf 93       	push	r28
    500c:	df 93       	push	r29
    500e:	6a 01       	movw	r12, r20
    5010:	e6 2e       	mov	r14, r22
    5012:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    5014:	60 e0       	ldi	r22, 0x00	; 0
    5016:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    501a:	81 11       	cpse	r24, r1
    501c:	13 c0       	rjmp	.+38     	; 0x5044 <start_and_write_data+0x40>
    501e:	c0 e0       	ldi	r28, 0x00	; 0
    5020:	0e c0       	rjmp	.+28     	; 0x503e <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    5022:	ae 2d       	mov	r26, r14
    5024:	c6 01       	movw	r24, r12
    5026:	8c 0f       	add	r24, r28
    5028:	91 1d       	adc	r25, r1
    502a:	a1 1d       	adc	r26, r1
    502c:	fc 01       	movw	r30, r24
    502e:	84 91       	lpm	r24, Z
    5030:	a7 fd       	sbrc	r26, 7
    5032:	80 81       	ld	r24, Z
    5034:	0e 94 13 31 	call	0x6226	; 0x6226 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    5038:	81 11       	cpse	r24, r1
    503a:	04 c0       	rjmp	.+8      	; 0x5044 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    503c:	cf 5f       	subi	r28, 0xFF	; 255
    503e:	cd 17       	cp	r28, r29
    5040:	80 f3       	brcs	.-32     	; 0x5022 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    5042:	80 e0       	ldi	r24, 0x00	; 0
}
    5044:	df 91       	pop	r29
    5046:	cf 91       	pop	r28
    5048:	ef 90       	pop	r14
    504a:	df 90       	pop	r13
    504c:	cf 90       	pop	r12
    504e:	08 95       	ret

Disassembly of section .text.read_and_stop:

00004b22 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    4b22:	ef 92       	push	r14
    4b24:	ff 92       	push	r15
    4b26:	0f 93       	push	r16
    4b28:	1f 93       	push	r17
    4b2a:	cf 93       	push	r28
    4b2c:	df 93       	push	r29
    4b2e:	8c 01       	movw	r16, r24
    4b30:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    4b32:	c0 e0       	ldi	r28, 0x00	; 0
    4b34:	08 c0       	rjmp	.+16     	; 0x4b46 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    4b36:	78 01       	movw	r14, r16
    4b38:	ec 0e       	add	r14, r28
    4b3a:	f1 1c       	adc	r15, r1
    4b3c:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <TWI_HAL_read_byte_ack>
    4b40:	f7 01       	movw	r30, r14
    4b42:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    4b44:	cf 5f       	subi	r28, 0xFF	; 255
    4b46:	2c 2f       	mov	r18, r28
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	8d 2f       	mov	r24, r29
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	01 97       	sbiw	r24, 0x01	; 1
    4b50:	28 17       	cp	r18, r24
    4b52:	39 07       	cpc	r19, r25
    4b54:	84 f3       	brlt	.-32     	; 0x4b36 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    4b56:	8d 2f       	mov	r24, r29
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	01 97       	sbiw	r24, 0x01	; 1
    4b5c:	e8 01       	movw	r28, r16
    4b5e:	c8 0f       	add	r28, r24
    4b60:	d9 1f       	adc	r29, r25
    4b62:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <TWI_HAL_read_byte_nack>
    4b66:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    4b68:	0e 94 3e 33 	call	0x667c	; 0x667c <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	ff 90       	pop	r15
    4b78:	ef 90       	pop	r14
    4b7a:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

000065ac <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    65ac:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    65ae:	0e 94 02 28 	call	0x5004	; 0x5004 <start_and_write_data>
    65b2:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    65b4:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    65b6:	0e 94 3e 33 	call	0x667c	; 0x667c <TWI_HAL_stop>
	}
	return status;
}
    65ba:	8c 2f       	mov	r24, r28
    65bc:	cf 91       	pop	r28
    65be:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006400 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6400:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6402:	0e 94 02 28 	call	0x5004	; 0x5004 <start_and_write_data>
    6406:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6408:	0e 94 3e 33 	call	0x667c	; 0x667c <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    640c:	c1 11       	cpse	r28, r1
    640e:	02 c0       	rjmp	.+4      	; 0x6414 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6410:	80 e0       	ldi	r24, 0x00	; 0
    6412:	01 c0       	rjmp	.+2      	; 0x6416 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6414:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6416:	cf 91       	pop	r28
    6418:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00005c68 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5c68:	0f 93       	push	r16
    5c6a:	1f 93       	push	r17
    5c6c:	cf 93       	push	r28
    5c6e:	df 93       	push	r29
    5c70:	8b 01       	movw	r16, r22
    5c72:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    5c74:	61 e0       	ldi	r22, 0x01	; 1
    5c76:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <TWI_HAL_start>
    5c7a:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5c7c:	88 23       	and	r24, r24
    5c7e:	21 f0       	breq	.+8      	; 0x5c88 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    5c80:	0e 94 3e 33 	call	0x667c	; 0x667c <TWI_HAL_stop>
		return status;	
    5c84:	8c 2f       	mov	r24, r28
    5c86:	04 c0       	rjmp	.+8      	; 0x5c90 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    5c88:	6d 2f       	mov	r22, r29
    5c8a:	c8 01       	movw	r24, r16
    5c8c:	0e 94 91 25 	call	0x4b22	; 0x4b22 <read_and_stop>
	
}
    5c90:	df 91       	pop	r29
    5c92:	cf 91       	pop	r28
    5c94:	1f 91       	pop	r17
    5c96:	0f 91       	pop	r16
    5c98:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00005d30 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5d30:	0f 93       	push	r16
    5d32:	1f 93       	push	r17
    5d34:	cf 93       	push	r28
    5d36:	df 93       	push	r29
    5d38:	8b 01       	movw	r16, r22
    5d3a:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    5d3c:	0e 94 20 2b 	call	0x5640	; 0x5640 <TWI_HAL_repeated_start>
    5d40:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5d42:	88 23       	and	r24, r24
    5d44:	21 f0       	breq	.+8      	; 0x5d4e <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    5d46:	0e 94 3e 33 	call	0x667c	; 0x667c <TWI_HAL_stop>
		return status;
    5d4a:	8c 2f       	mov	r24, r28
    5d4c:	04 c0       	rjmp	.+8      	; 0x5d56 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    5d4e:	6d 2f       	mov	r22, r29
    5d50:	c8 01       	movw	r24, r16
    5d52:	0e 94 91 25 	call	0x4b22	; 0x4b22 <read_and_stop>
	
}
    5d56:	df 91       	pop	r29
    5d58:	cf 91       	pop	r28
    5d5a:	1f 91       	pop	r17
    5d5c:	0f 91       	pop	r16
    5d5e:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006610 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6610:	80 e2       	ldi	r24, 0x20	; 32
    6612:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    6616:	e9 eb       	ldi	r30, 0xB9	; 185
    6618:	f0 e0       	ldi	r31, 0x00	; 0
    661a:	80 81       	ld	r24, Z
    661c:	8c 7f       	andi	r24, 0xFC	; 252
    661e:	80 83       	st	Z, r24
    6620:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000052f6 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	88 0f       	add	r24, r24
    52fa:	99 1f       	adc	r25, r25
    52fc:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    52fe:	84 ea       	ldi	r24, 0xA4	; 164
    5300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5304:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5308:	99 23       	and	r25, r25
    530a:	e4 f7       	brge	.-8      	; 0x5304 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    530c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5310:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    5312:	88 30       	cpi	r24, 0x08	; 8
    5314:	99 f4       	brne	.+38     	; 0x533c <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5316:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    531a:	84 e8       	ldi	r24, 0x84	; 132
    531c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5320:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5324:	88 23       	and	r24, r24
    5326:	e4 f7       	brge	.-8      	; 0x5320 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5328:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    532c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    532e:	88 31       	cpi	r24, 0x18	; 24
    5330:	21 f0       	breq	.+8      	; 0x533a <TWI_HAL_start+0x44>
    5332:	80 34       	cpi	r24, 0x40	; 64
    5334:	19 f4       	brne	.+6      	; 0x533c <TWI_HAL_start+0x46>
    5336:	80 e0       	ldi	r24, 0x00	; 0
    5338:	08 95       	ret
    533a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    533c:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00005640 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	88 0f       	add	r24, r24
    5644:	99 1f       	adc	r25, r25
    5646:	28 2f       	mov	r18, r24
    5648:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    564a:	84 ea       	ldi	r24, 0xA4	; 164
    564c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5650:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5654:	99 23       	and	r25, r25
    5656:	e4 f7       	brge	.-8      	; 0x5650 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    5658:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    565c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    565e:	80 31       	cpi	r24, 0x10	; 16
    5660:	79 f4       	brne	.+30     	; 0x5680 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    5662:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5666:	84 e8       	ldi	r24, 0x84	; 132
    5668:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    566c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5670:	88 23       	and	r24, r24
    5672:	e4 f7       	brge	.-8      	; 0x566c <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    5674:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5678:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    567a:	80 34       	cpi	r24, 0x40	; 64
    567c:	09 f4       	brne	.+2      	; 0x5680 <TWI_HAL_repeated_start+0x40>
    567e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5680:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006226 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6226:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    622a:	84 e8       	ldi	r24, 0x84	; 132
    622c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6230:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6234:	88 23       	and	r24, r24
    6236:	e4 f7       	brge	.-8      	; 0x6230 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    6238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    623c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    623e:	88 32       	cpi	r24, 0x28	; 40
    6240:	09 f4       	brne	.+2      	; 0x6244 <TWI_HAL_write_byte+0x1e>
    6242:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    6244:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000065c0 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    65c0:	84 ec       	ldi	r24, 0xC4	; 196
    65c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    65c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    65ca:	88 23       	and	r24, r24
    65cc:	e4 f7       	brge	.-8      	; 0x65c6 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    65ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    65d2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000065d4 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    65d4:	84 e8       	ldi	r24, 0x84	; 132
    65d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    65da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    65de:	88 23       	and	r24, r24
    65e0:	e4 f7       	brge	.-8      	; 0x65da <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    65e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    65e6:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

0000667c <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    667c:	84 e9       	ldi	r24, 0x94	; 148
    667e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    6682:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6686:	84 fd       	sbrc	r24, 4
    6688:	fc cf       	rjmp	.-8      	; 0x6682 <TWI_HAL_stop+0x6>
}
    668a:	08 95       	ret

Disassembly of section .text.copy_buffer:

00005ee0 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5ee0:	bc 01       	movw	r22, r24
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	09 c0       	rjmp	.+18     	; 0x5ef8 <copy_buffer+0x18>
    5ee6:	fb 01       	movw	r30, r22
    5ee8:	e9 0f       	add	r30, r25
    5eea:	f1 1d       	adc	r31, r1
    5eec:	da 01       	movw	r26, r20
    5eee:	a0 50       	subi	r26, 0x00	; 0
    5ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ef2:	2c 91       	ld	r18, X
    5ef4:	20 83       	st	Z, r18
    5ef6:	9f 5f       	subi	r25, 0xFF	; 255
    5ef8:	49 2f       	mov	r20, r25
    5efa:	50 e0       	ldi	r21, 0x00	; 0
    5efc:	20 91 98 0f 	lds	r18, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	22 50       	subi	r18, 0x02	; 2
    5f04:	31 09       	sbc	r19, r1
    5f06:	42 17       	cp	r20, r18
    5f08:	53 07       	cpc	r21, r19
    5f0a:	6c f3       	brlt	.-38     	; 0x5ee6 <copy_buffer+0x6>
    5f0c:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000583e <uart0_hal_init>:
    583e:	e1 ec       	ldi	r30, 0xC1	; 193
    5840:	f0 e0       	ldi	r31, 0x00	; 0
    5842:	80 81       	ld	r24, Z
    5844:	80 61       	ori	r24, 0x10	; 16
    5846:	80 83       	st	Z, r24
    5848:	80 81       	ld	r24, Z
    584a:	88 60       	ori	r24, 0x08	; 8
    584c:	80 83       	st	Z, r24
    584e:	80 81       	ld	r24, Z
    5850:	80 68       	ori	r24, 0x80	; 128
    5852:	80 83       	st	Z, r24
    5854:	80 81       	ld	r24, Z
    5856:	80 64       	ori	r24, 0x40	; 64
    5858:	80 83       	st	Z, r24
    585a:	e0 ec       	ldi	r30, 0xC0	; 192
    585c:	f0 e0       	ldi	r31, 0x00	; 0
    585e:	80 81       	ld	r24, Z
    5860:	82 60       	ori	r24, 0x02	; 2
    5862:	80 83       	st	Z, r24
    5864:	86 e0       	ldi	r24, 0x06	; 6
    5866:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    586a:	80 e1       	ldi	r24, 0x10	; 16
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    5872:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    5876:	78 94       	sei
    5878:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000587a <uart0_hal_send_message>:
    587a:	dc 01       	movw	r26, r24
    587c:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    5880:	81 11       	cpse	r24, r1
    5882:	fc cf       	rjmp	.-8      	; 0x587c <uart0_hal_send_message+0x2>
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	0b c0       	rjmp	.+22     	; 0x589e <uart0_hal_send_message+0x24>
    5888:	29 2f       	mov	r18, r25
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	fd 01       	movw	r30, r26
    588e:	e2 0f       	add	r30, r18
    5890:	f3 1f       	adc	r31, r19
    5892:	40 81       	ld	r20, Z
    5894:	f9 01       	movw	r30, r18
    5896:	ea 56       	subi	r30, 0x6A	; 106
    5898:	fe 4f       	sbci	r31, 0xFE	; 254
    589a:	40 83       	st	Z, r20
    589c:	9f 5f       	subi	r25, 0xFF	; 255
    589e:	96 17       	cp	r25, r22
    58a0:	98 f3       	brcs	.-26     	; 0x5888 <uart0_hal_send_message+0xe>
    58a2:	60 93 9a 0f 	sts	0x0F9A, r22	; 0x800f9a <tx_buffer_data_len>
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    58ac:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    58b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    58b4:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00004722 <uart0_hal_send_string>:
    4722:	6f 92       	push	r6
    4724:	7f 92       	push	r7
    4726:	8f 92       	push	r8
    4728:	cf 92       	push	r12
    472a:	df 92       	push	r13
    472c:	ef 92       	push	r14
    472e:	3b 01       	movw	r6, r22
    4730:	88 2e       	mov	r8, r24
    4732:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    4736:	81 11       	cpse	r24, r1
    4738:	fc cf       	rjmp	.-8      	; 0x4732 <uart0_hal_send_string+0x10>
    473a:	88 2d       	mov	r24, r8
    473c:	b3 01       	movw	r22, r6
    473e:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4742:	68 2f       	mov	r22, r24
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	12 c0       	rjmp	.+36     	; 0x476c <uart0_hal_send_string+0x4a>
    4748:	29 2f       	mov	r18, r25
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	e8 2c       	mov	r14, r8
    474e:	63 01       	movw	r12, r6
    4750:	c2 0e       	add	r12, r18
    4752:	d3 1e       	adc	r13, r19
    4754:	e1 1c       	adc	r14, r1
    4756:	37 fd       	sbrc	r19, 7
    4758:	ea 94       	dec	r14
    475a:	f6 01       	movw	r30, r12
    475c:	44 91       	lpm	r20, Z
    475e:	e7 fc       	sbrc	r14, 7
    4760:	40 81       	ld	r20, Z
    4762:	f9 01       	movw	r30, r18
    4764:	ea 56       	subi	r30, 0x6A	; 106
    4766:	fe 4f       	sbci	r31, 0xFE	; 254
    4768:	40 83       	st	Z, r20
    476a:	9f 5f       	subi	r25, 0xFF	; 255
    476c:	96 17       	cp	r25, r22
    476e:	60 f3       	brcs	.-40     	; 0x4748 <uart0_hal_send_string+0x26>
    4770:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <tx_buffer_data_len>
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    477a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    477e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4782:	ef 90       	pop	r14
    4784:	df 90       	pop	r13
    4786:	cf 90       	pop	r12
    4788:	8f 90       	pop	r8
    478a:	7f 90       	pop	r7
    478c:	6f 90       	pop	r6
    478e:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00006700 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    6700:	90 91 97 0f 	lds	r25, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    6704:	81 e0       	ldi	r24, 0x01	; 1
    6706:	91 11       	cpse	r25, r1
    6708:	01 c0       	rjmp	.+2      	; 0x670c <uart0_hal_message_ready+0xc>
    670a:	80 e0       	ldi	r24, 0x00	; 0
}
    670c:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000068ce <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    68ce:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    68d2:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <rx_buffer_data_len>
    68d6:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00005fee <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    5fee:	0f 93       	push	r16
    5ff0:	1f 93       	push	r17
    5ff2:	cf 93       	push	r28
    5ff4:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    5ff6:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    5ffa:	c0 91 98 0f 	lds	r28, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5ffe:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    6000:	f8 01       	movw	r30, r16
    6002:	ec 0f       	add	r30, r28
    6004:	f1 1d       	adc	r31, r1
    6006:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    6008:	0e 94 67 34 	call	0x68ce	; 0x68ce <uart0_hal_clear_rx_buffer>
	return len;
}
    600c:	8c 2f       	mov	r24, r28
    600e:	cf 91       	pop	r28
    6010:	1f 91       	pop	r17
    6012:	0f 91       	pop	r16
    6014:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005416 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5416:	cf 93       	push	r28
    5418:	df 93       	push	r29
    541a:	1f 92       	push	r1
    541c:	cd b7       	in	r28, 0x3d	; 61
    541e:	de b7       	in	r29, 0x3e	; 62
    5420:	9a b1       	in	r25, 0x0a	; 10
    5422:	92 60       	ori	r25, 0x02	; 2
    5424:	9a b9       	out	0x0a, r25	; 10
    5426:	e1 ec       	ldi	r30, 0xC1	; 193
    5428:	f0 e0       	ldi	r31, 0x00	; 0
    542a:	90 81       	ld	r25, Z
    542c:	97 7f       	andi	r25, 0xF7	; 247
    542e:	90 83       	st	Z, r25
    5430:	9b b1       	in	r25, 0x0b	; 11
    5432:	9d 7f       	andi	r25, 0xFD	; 253
    5434:	9b b9       	out	0x0b, r25	; 11
    5436:	af e9       	ldi	r26, 0x9F	; 159
    5438:	bf e0       	ldi	r27, 0x0F	; 15
    543a:	11 97       	sbiw	r26, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <uart0_hal_send_break+0x24>
    543e:	00 c0       	rjmp	.+0      	; 0x5440 <uart0_hal_send_break+0x2a>
    5440:	00 00       	nop
    5442:	90 81       	ld	r25, Z
    5444:	98 60       	ori	r25, 0x08	; 8
    5446:	90 83       	st	Z, r25
    5448:	89 83       	std	Y+1, r24	; 0x01
    544a:	61 e0       	ldi	r22, 0x01	; 1
    544c:	ce 01       	movw	r24, r28
    544e:	01 96       	adiw	r24, 0x01	; 1
    5450:	0e 94 3d 2c 	call	0x587a	; 0x587a <uart0_hal_send_message>
    5454:	0f 90       	pop	r0
    5456:	df 91       	pop	r29
    5458:	cf 91       	pop	r28
    545a:	08 95       	ret

Disassembly of section .text.__vector_22:

00005218 <__vector_22>:
    5218:	1f 92       	push	r1
    521a:	0f 92       	push	r0
    521c:	0f b6       	in	r0, 0x3f	; 63
    521e:	0f 92       	push	r0
    5220:	11 24       	eor	r1, r1
    5222:	8f 93       	push	r24
    5224:	ef 93       	push	r30
    5226:	ff 93       	push	r31
    5228:	e0 91 99 0f 	lds	r30, 0x0F99	; 0x800f99 <tx_buffer_cursor>
    522c:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    5230:	e8 17       	cp	r30, r24
    5232:	58 f4       	brcc	.+22     	; 0x524a <__vector_22+0x32>
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	8e 0f       	add	r24, r30
    5238:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    523c:	f0 e0       	ldi	r31, 0x00	; 0
    523e:	ea 56       	subi	r30, 0x6A	; 106
    5240:	fe 4f       	sbci	r31, 0xFE	; 254
    5242:	80 81       	ld	r24, Z
    5244:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    5248:	04 c0       	rjmp	.+8      	; 0x5252 <__vector_22+0x3a>
    524a:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <tx_buffer_cursor>
    524e:	10 92 9a 0f 	sts	0x0F9A, r1	; 0x800f9a <tx_buffer_data_len>
    5252:	ff 91       	pop	r31
    5254:	ef 91       	pop	r30
    5256:	8f 91       	pop	r24
    5258:	0f 90       	pop	r0
    525a:	0f be       	out	0x3f, r0	; 63
    525c:	0f 90       	pop	r0
    525e:	1f 90       	pop	r1
    5260:	18 95       	reti

Disassembly of section .text.__vector_20:

0000455a <__vector_20>:
    455a:	1f 92       	push	r1
    455c:	0f 92       	push	r0
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	0f 92       	push	r0
    4562:	11 24       	eor	r1, r1
    4564:	2f 93       	push	r18
    4566:	8f 93       	push	r24
    4568:	9f 93       	push	r25
    456a:	ef 93       	push	r30
    456c:	ff 93       	push	r31
    456e:	80 91 97 0f 	lds	r24, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    4572:	81 11       	cpse	r24, r1
    4574:	0e c0       	rjmp	.+28     	; 0x4592 <__vector_20+0x38>
    4576:	e0 91 98 0f 	lds	r30, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    457a:	e6 39       	cpi	r30, 0x96	; 150
    457c:	50 f4       	brcc	.+20     	; 0x4592 <__vector_20+0x38>
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	8e 0f       	add	r24, r30
    4582:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <rx_buffer_data_len>
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    458c:	e0 50       	subi	r30, 0x00	; 0
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	80 83       	st	Z, r24
    4592:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    4596:	83 30       	cpi	r24, 0x03	; 3
    4598:	80 f0       	brcs	.+32     	; 0x45ba <__vector_20+0x60>
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	fc 01       	movw	r30, r24
    459e:	e1 50       	subi	r30, 0x01	; 1
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	20 81       	ld	r18, Z
    45a4:	2a 30       	cpi	r18, 0x0A	; 10
    45a6:	49 f4       	brne	.+18     	; 0x45ba <__vector_20+0x60>
    45a8:	fc 01       	movw	r30, r24
    45aa:	e2 50       	subi	r30, 0x02	; 2
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	80 81       	ld	r24, Z
    45b0:	8d 30       	cpi	r24, 0x0D	; 13
    45b2:	19 f4       	brne	.+6      	; 0x45ba <__vector_20+0x60>
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <rx_buffer_has_message>
    45ba:	ff 91       	pop	r31
    45bc:	ef 91       	pop	r30
    45be:	9f 91       	pop	r25
    45c0:	8f 91       	pop	r24
    45c2:	2f 91       	pop	r18
    45c4:	0f 90       	pop	r0
    45c6:	0f be       	out	0x3f, r0	; 63
    45c8:	0f 90       	pop	r0
    45ca:	1f 90       	pop	r1
    45cc:	18 95       	reti

Disassembly of section .text.copy_buffer:

00005f0e <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5f0e:	bc 01       	movw	r22, r24
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	09 c0       	rjmp	.+18     	; 0x5f26 <copy_buffer+0x18>
    5f14:	fb 01       	movw	r30, r22
    5f16:	e9 0f       	add	r30, r25
    5f18:	f1 1d       	adc	r31, r1
    5f1a:	da 01       	movw	r26, r20
    5f1c:	a6 51       	subi	r26, 0x16	; 22
    5f1e:	b2 4f       	sbci	r27, 0xF2	; 242
    5f20:	2c 91       	ld	r18, X
    5f22:	20 83       	st	Z, r18
    5f24:	9f 5f       	subi	r25, 0xFF	; 255
    5f26:	49 2f       	mov	r20, r25
    5f28:	50 e0       	ldi	r21, 0x00	; 0
    5f2a:	20 91 9c 0f 	lds	r18, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    5f2e:	30 e0       	ldi	r19, 0x00	; 0
    5f30:	22 50       	subi	r18, 0x02	; 2
    5f32:	31 09       	sbc	r19, r1
    5f34:	42 17       	cp	r20, r18
    5f36:	53 07       	cpc	r21, r19
    5f38:	6c f3       	brlt	.-38     	; 0x5f14 <copy_buffer+0x6>
    5f3a:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000058b6 <uart1_hal_init>:
    58b6:	e9 ec       	ldi	r30, 0xC9	; 201
    58b8:	f0 e0       	ldi	r31, 0x00	; 0
    58ba:	80 81       	ld	r24, Z
    58bc:	80 61       	ori	r24, 0x10	; 16
    58be:	80 83       	st	Z, r24
    58c0:	80 81       	ld	r24, Z
    58c2:	88 60       	ori	r24, 0x08	; 8
    58c4:	80 83       	st	Z, r24
    58c6:	80 81       	ld	r24, Z
    58c8:	80 68       	ori	r24, 0x80	; 128
    58ca:	80 83       	st	Z, r24
    58cc:	80 81       	ld	r24, Z
    58ce:	80 64       	ori	r24, 0x40	; 64
    58d0:	80 83       	st	Z, r24
    58d2:	e8 ec       	ldi	r30, 0xC8	; 200
    58d4:	f0 e0       	ldi	r31, 0x00	; 0
    58d6:	80 81       	ld	r24, Z
    58d8:	82 60       	ori	r24, 0x02	; 2
    58da:	80 83       	st	Z, r24
    58dc:	86 e0       	ldi	r24, 0x06	; 6
    58de:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    58e2:	80 e1       	ldi	r24, 0x10	; 16
    58e4:	90 e0       	ldi	r25, 0x00	; 0
    58e6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    58ea:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    58ee:	78 94       	sei
    58f0:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00004078 <uart1_hal_send_string>:
    4078:	6f 92       	push	r6
    407a:	7f 92       	push	r7
    407c:	8f 92       	push	r8
    407e:	cf 92       	push	r12
    4080:	df 92       	push	r13
    4082:	ef 92       	push	r14
    4084:	3b 01       	movw	r6, r22
    4086:	88 2e       	mov	r8, r24
    4088:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    408c:	81 11       	cpse	r24, r1
    408e:	fc cf       	rjmp	.-8      	; 0x4088 <uart1_hal_send_string+0x10>
    4090:	88 2d       	mov	r24, r8
    4092:	b3 01       	movw	r22, r6
    4094:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4098:	bc 01       	movw	r22, r24
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	12 c0       	rjmp	.+36     	; 0x40c2 <uart1_hal_send_string+0x4a>
    409e:	29 2f       	mov	r18, r25
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	e8 2c       	mov	r14, r8
    40a4:	63 01       	movw	r12, r6
    40a6:	c4 0e       	add	r12, r20
    40a8:	d5 1e       	adc	r13, r21
    40aa:	e1 1c       	adc	r14, r1
    40ac:	57 fd       	sbrc	r21, 7
    40ae:	ea 94       	dec	r14
    40b0:	f6 01       	movw	r30, r12
    40b2:	44 91       	lpm	r20, Z
    40b4:	e7 fc       	sbrc	r14, 7
    40b6:	40 81       	ld	r20, Z
    40b8:	f9 01       	movw	r30, r18
    40ba:	ee 5d       	subi	r30, 0xDE	; 222
    40bc:	f2 4f       	sbci	r31, 0xF2	; 242
    40be:	40 83       	st	Z, r20
    40c0:	9f 5f       	subi	r25, 0xFF	; 255
    40c2:	49 2f       	mov	r20, r25
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	46 17       	cp	r20, r22
    40c8:	57 07       	cpc	r21, r23
    40ca:	48 f3       	brcs	.-46     	; 0x409e <uart1_hal_send_string+0x26>
    40cc:	fb 01       	movw	r30, r22
    40ce:	ee 5d       	subi	r30, 0xDE	; 222
    40d0:	f2 4f       	sbci	r31, 0xF2	; 242
    40d2:	8d e0       	ldi	r24, 0x0D	; 13
    40d4:	80 83       	st	Z, r24
    40d6:	fb 01       	movw	r30, r22
    40d8:	ed 5d       	subi	r30, 0xDD	; 221
    40da:	f2 4f       	sbci	r31, 0xF2	; 242
    40dc:	8a e0       	ldi	r24, 0x0A	; 10
    40de:	80 83       	st	Z, r24
    40e0:	6e 5f       	subi	r22, 0xFE	; 254
    40e2:	60 93 9e 0f 	sts	0x0F9E, r22	; 0x800f9e <tx_buffer_data_len>
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    40ec:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <tx_buffer>
    40f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    40f4:	ef 90       	pop	r14
    40f6:	df 90       	pop	r13
    40f8:	cf 90       	pop	r12
    40fa:	8f 90       	pop	r8
    40fc:	7f 90       	pop	r7
    40fe:	6f 90       	pop	r6
    4100:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

0000670e <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    670e:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    6712:	81 e0       	ldi	r24, 0x01	; 1
    6714:	91 11       	cpse	r25, r1
    6716:	01 c0       	rjmp	.+2      	; 0x671a <uart1_hal_message_ready+0xc>
    6718:	80 e0       	ldi	r24, 0x00	; 0
}
    671a:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

0000671c <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    671c:	90 91 9c 0f 	lds	r25, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    6720:	81 e0       	ldi	r24, 0x01	; 1
    6722:	95 39       	cpi	r25, 0x95	; 149
    6724:	08 f4       	brcc	.+2      	; 0x6728 <uart1_hal_rx_full+0xc>
    6726:	80 e0       	ldi	r24, 0x00	; 0
}
    6728:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

000068d8 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    68d8:	10 92 9b 0f 	sts	0x0F9B, r1	; 0x800f9b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    68dc:	10 92 9c 0f 	sts	0x0F9C, r1	; 0x800f9c <rx_buffer_data_len>
    68e0:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00006016 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    6016:	0f 93       	push	r16
    6018:	1f 93       	push	r17
    601a:	cf 93       	push	r28
    601c:	8c 01       	movw	r16, r24
    601e:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <copy_buffer>
    6022:	c0 91 9c 0f 	lds	r28, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    6026:	c2 50       	subi	r28, 0x02	; 2
    6028:	f8 01       	movw	r30, r16
    602a:	ec 0f       	add	r30, r28
    602c:	f1 1d       	adc	r31, r1
    602e:	10 82       	st	Z, r1
    6030:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <uart1_hal_clear_rx_buffer>
    6034:	8c 2f       	mov	r24, r28
    6036:	cf 91       	pop	r28
    6038:	1f 91       	pop	r17
    603a:	0f 91       	pop	r16
    603c:	08 95       	ret

Disassembly of section .text.__vector_30:

00005262 <__vector_30>:
    5262:	1f 92       	push	r1
    5264:	0f 92       	push	r0
    5266:	0f b6       	in	r0, 0x3f	; 63
    5268:	0f 92       	push	r0
    526a:	11 24       	eor	r1, r1
    526c:	8f 93       	push	r24
    526e:	ef 93       	push	r30
    5270:	ff 93       	push	r31
    5272:	e0 91 9d 0f 	lds	r30, 0x0F9D	; 0x800f9d <tx_buffer_cursor>
    5276:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    527a:	e8 17       	cp	r30, r24
    527c:	58 f4       	brcc	.+22     	; 0x5294 <__vector_30+0x32>
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	8e 0f       	add	r24, r30
    5282:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    5286:	f0 e0       	ldi	r31, 0x00	; 0
    5288:	ee 5d       	subi	r30, 0xDE	; 222
    528a:	f2 4f       	sbci	r31, 0xF2	; 242
    528c:	80 81       	ld	r24, Z
    528e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    5292:	04 c0       	rjmp	.+8      	; 0x529c <__vector_30+0x3a>
    5294:	10 92 9d 0f 	sts	0x0F9D, r1	; 0x800f9d <tx_buffer_cursor>
    5298:	10 92 9e 0f 	sts	0x0F9E, r1	; 0x800f9e <tx_buffer_data_len>
    529c:	ff 91       	pop	r31
    529e:	ef 91       	pop	r30
    52a0:	8f 91       	pop	r24
    52a2:	0f 90       	pop	r0
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	0f 90       	pop	r0
    52a8:	1f 90       	pop	r1
    52aa:	18 95       	reti

Disassembly of section .text.__vector_28:

000045ce <__vector_28>:
    45ce:	1f 92       	push	r1
    45d0:	0f 92       	push	r0
    45d2:	0f b6       	in	r0, 0x3f	; 63
    45d4:	0f 92       	push	r0
    45d6:	11 24       	eor	r1, r1
    45d8:	2f 93       	push	r18
    45da:	8f 93       	push	r24
    45dc:	9f 93       	push	r25
    45de:	ef 93       	push	r30
    45e0:	ff 93       	push	r31
    45e2:	80 91 9b 0f 	lds	r24, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    45e6:	81 11       	cpse	r24, r1
    45e8:	0e c0       	rjmp	.+28     	; 0x4606 <__vector_28+0x38>
    45ea:	e0 91 9c 0f 	lds	r30, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    45ee:	e6 39       	cpi	r30, 0x96	; 150
    45f0:	50 f4       	brcc	.+20     	; 0x4606 <__vector_28+0x38>
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	8e 0f       	add	r24, r30
    45f6:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <rx_buffer_data_len>
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4600:	e6 51       	subi	r30, 0x16	; 22
    4602:	f2 4f       	sbci	r31, 0xF2	; 242
    4604:	80 83       	st	Z, r24
    4606:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    460a:	83 30       	cpi	r24, 0x03	; 3
    460c:	80 f0       	brcs	.+32     	; 0x462e <__vector_28+0x60>
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	fc 01       	movw	r30, r24
    4612:	e7 51       	subi	r30, 0x17	; 23
    4614:	f2 4f       	sbci	r31, 0xF2	; 242
    4616:	20 81       	ld	r18, Z
    4618:	2a 30       	cpi	r18, 0x0A	; 10
    461a:	49 f4       	brne	.+18     	; 0x462e <__vector_28+0x60>
    461c:	fc 01       	movw	r30, r24
    461e:	e8 51       	subi	r30, 0x18	; 24
    4620:	f2 4f       	sbci	r31, 0xF2	; 242
    4622:	80 81       	ld	r24, Z
    4624:	8d 30       	cpi	r24, 0x0D	; 13
    4626:	19 f4       	brne	.+6      	; 0x462e <__vector_28+0x60>
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <rx_buffer_has_message>
    462e:	ff 91       	pop	r31
    4630:	ef 91       	pop	r30
    4632:	9f 91       	pop	r25
    4634:	8f 91       	pop	r24
    4636:	2f 91       	pop	r18
    4638:	0f 90       	pop	r0
    463a:	0f be       	out	0x3f, r0	; 63
    463c:	0f 90       	pop	r0
    463e:	1f 90       	pop	r1
    4640:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

0000672a <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    672a:	81 b1       	in	r24, 0x01	; 1
    672c:	8f 7b       	andi	r24, 0xBF	; 191
    672e:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    6730:	82 b1       	in	r24, 0x02	; 2
    6732:	80 64       	ori	r24, 0x40	; 64
    6734:	82 b9       	out	0x02, r24	; 2
    6736:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

000068e2 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    68e2:	80 b1       	in	r24, 0x00	; 0
}
    68e4:	86 fb       	bst	r24, 6
    68e6:	88 27       	eor	r24, r24
    68e8:	80 f9       	bld	r24, 0
    68ea:	08 95       	ret

Disassembly of section .text.main:

0000592c <main>:
#include "HAL/PM/PM_HAL.h"
#include "HAL/UI/UI_HAL.h"

int main(void)
{
	PM_HAL_LED_power_init();
    592c:	0e 94 72 33 	call	0x66e4	; 0x66e4 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    5930:	0e 94 95 33 	call	0x672a	; 0x672a <UI_HAL_jumper_init>
	//test_runner();
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    5934:	0e 94 71 34 	call	0x68e2	; 0x68e2 <UI_HAL_is_config_mode>
    5938:	88 23       	and	r24, r24
    593a:	49 f0       	breq	.+18     	; 0x594e <main+0x22>
			PM_HAL_LED_power(true);
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
			CONF_enter();
    5942:	0e 94 94 12 	call	0x2528	; 0x2528 <CONF_enter>
			PM_HAL_LED_power(false);
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <main+0x26>
		}else{
			MAINPG_start();
    594e:	0e 94 0a 08 	call	0x1014	; 0x1014 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5952:	2f ef       	ldi	r18, 0xFF	; 255
    5954:	81 e1       	ldi	r24, 0x11	; 17
    5956:	9a e7       	ldi	r25, 0x7A	; 122
    5958:	21 50       	subi	r18, 0x01	; 1
    595a:	80 40       	sbci	r24, 0x00	; 0
    595c:	90 40       	sbci	r25, 0x00	; 0
    595e:	e1 f7       	brne	.-8      	; 0x5958 <main+0x2c>
    5960:	00 c0       	rjmp	.+0      	; 0x5962 <main+0x36>
    5962:	00 00       	nop
    5964:	e7 cf       	rjmp	.-50     	; 0x5934 <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00003d92 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    3d92:	8f 92       	push	r8
    3d94:	9f 92       	push	r9
    3d96:	af 92       	push	r10
    3d98:	bf 92       	push	r11
    3d9a:	cf 92       	push	r12
    3d9c:	df 92       	push	r13
    3d9e:	ef 92       	push	r14
    3da0:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    3da2:	bc 01       	movw	r22, r24
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	0e 94 44 21 	call	0x4288	; 0x4288 <__floatunsisf>
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e8       	ldi	r20, 0x80	; 128
    3db2:	59 e3       	ldi	r21, 0x39	; 57
    3db4:	0e 94 c4 34 	call	0x6988	; 0x6988 <__mulsf3>
    3db8:	80 90 67 0f 	lds	r8, 0x0F67	; 0x800f67 <Vc>
    3dbc:	90 90 68 0f 	lds	r9, 0x0F68	; 0x800f68 <Vc+0x1>
    3dc0:	a0 90 69 0f 	lds	r10, 0x0F69	; 0x800f69 <Vc+0x2>
    3dc4:	b0 90 6a 0f 	lds	r11, 0x0F6A	; 0x800f6a <Vc+0x3>
    3dc8:	a5 01       	movw	r20, r10
    3dca:	94 01       	movw	r18, r8
    3dcc:	0e 94 c4 34 	call	0x6988	; 0x6988 <__mulsf3>
    3dd0:	6b 01       	movw	r12, r22
    3dd2:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    3dd4:	9b 01       	movw	r18, r22
    3dd6:	ac 01       	movw	r20, r24
    3dd8:	c5 01       	movw	r24, r10
    3dda:	b4 01       	movw	r22, r8
    3ddc:	0e 94 c6 33 	call	0x678c	; 0x678c <__subsf3>
    3de0:	a7 01       	movw	r20, r14
    3de2:	96 01       	movw	r18, r12
    3de4:	0e 94 c0 34 	call	0x6980	; 0x6980 <__divsf3>
    3de8:	20 91 63 0f 	lds	r18, 0x0F63	; 0x800f63 <RRL>
    3dec:	30 91 64 0f 	lds	r19, 0x0F64	; 0x800f64 <RRL+0x1>
    3df0:	40 91 65 0f 	lds	r20, 0x0F65	; 0x800f65 <RRL+0x2>
    3df4:	50 91 66 0f 	lds	r21, 0x0F66	; 0x800f66 <RRL+0x3>
    3df8:	0e 94 c4 34 	call	0x6988	; 0x6988 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    3dfc:	20 91 5f 0f 	lds	r18, 0x0F5F	; 0x800f5f <PPM_factor>
    3e00:	30 91 60 0f 	lds	r19, 0x0F60	; 0x800f60 <PPM_factor+0x1>
    3e04:	40 91 61 0f 	lds	r20, 0x0F61	; 0x800f61 <PPM_factor+0x2>
    3e08:	50 91 62 0f 	lds	r21, 0x0F62	; 0x800f62 <PPM_factor+0x3>
    3e0c:	0e 94 c4 34 	call	0x6988	; 0x6988 <__mulsf3>
    3e10:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__fixunssfsi>
	return PPM;
}
    3e14:	cb 01       	movw	r24, r22
    3e16:	ff 90       	pop	r15
    3e18:	ef 90       	pop	r14
    3e1a:	df 90       	pop	r13
    3e1c:	cf 90       	pop	r12
    3e1e:	bf 90       	pop	r11
    3e20:	af 90       	pop	r10
    3e22:	9f 90       	pop	r9
    3e24:	8f 90       	pop	r8
    3e26:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

0000644e <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    644e:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    6452:	8f 5f       	subi	r24, 0xFF	; 255
    6454:	80 93 9f 0f 	sts	0x0F9F, r24	; 0x800f9f <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    6458:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    645c:	89 17       	cp	r24, r25
    645e:	10 f0       	brcs	.+4      	; 0x6464 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    6460:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <TC0_HAL_stop>
    6464:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

000049a4 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    49a4:	cf 93       	push	r28
	_data=data;
    49a6:	50 93 82 0f 	sts	0x0F82, r21	; 0x800f82 <_data+0x1>
    49aa:	40 93 81 0f 	sts	0x0F81, r20	; 0x800f81 <_data>
	_nSamples=nSamples;
    49ae:	70 93 84 0f 	sts	0x0F84, r23	; 0x800f84 <_nSamples+0x1>
    49b2:	60 93 83 0f 	sts	0x0F83, r22	; 0x800f83 <_nSamples>
	cntSamples=0;
    49b6:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <cntSamples+0x1>
    49ba:	10 92 7f 0f 	sts	0x0F7F, r1	; 0x800f7f <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    49be:	6e e2       	ldi	r22, 0x2E	; 46
    49c0:	7a e2       	ldi	r23, 0x2A	; 42
    49c2:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	0e 94 9a 32 	call	0x6534	; 0x6534 <PM_HAL_adc_power>
    49cc:	2f ef       	ldi	r18, 0xFF	; 255
    49ce:	83 ec       	ldi	r24, 0xC3	; 195
    49d0:	99 e0       	ldi	r25, 0x09	; 9
    49d2:	21 50       	subi	r18, 0x01	; 1
    49d4:	80 40       	sbci	r24, 0x00	; 0
    49d6:	90 40       	sbci	r25, 0x00	; 0
    49d8:	e1 f7       	brne	.-8      	; 0x49d2 <ADC_init_sampling+0x2e>
    49da:	00 c0       	rjmp	.+0      	; 0x49dc <ADC_init_sampling+0x38>
    49dc:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    49de:	60 e0       	ldi	r22, 0x00	; 0
    49e0:	8d e4       	ldi	r24, 0x4D	; 77
    49e2:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <TWI_HAL_start>
    49e6:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    49e8:	0e 94 3e 33 	call	0x667c	; 0x667c <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    49ec:	cc 23       	and	r28, r28
    49ee:	51 f0       	breq	.+20     	; 0x4a04 <ADC_init_sampling+0x60>
		_data=NULL;
    49f0:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    49f4:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
		_nSamples=0;
    49f8:	10 92 84 0f 	sts	0x0F84, r1	; 0x800f84 <_nSamples+0x1>
    49fc:	10 92 83 0f 	sts	0x0F83, r1	; 0x800f83 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    4a00:	82 e0       	ldi	r24, 0x02	; 2
    4a02:	01 c0       	rjmp	.+2      	; 0x4a06 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    4a04:	80 e0       	ldi	r24, 0x00	; 0
}
    4a06:	cf 91       	pop	r28
    4a08:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

000065e8 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    65e8:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    65ec:	80 e0       	ldi	r24, 0x00	; 0
    65ee:	0e 94 9a 32 	call	0x6534	; 0x6534 <PM_HAL_adc_power>
	_data=NULL;
    65f2:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    65f6:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
    65fa:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006358 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6358:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <cntSamples>
    635c:	50 91 80 0f 	lds	r21, 0x0F80	; 0x800f80 <cntSamples+0x1>
    6360:	20 91 83 0f 	lds	r18, 0x0F83	; 0x800f83 <_nSamples>
    6364:	30 91 84 0f 	lds	r19, 0x0F84	; 0x800f84 <_nSamples+0x1>
    6368:	81 e0       	ldi	r24, 0x01	; 1
    636a:	42 17       	cp	r20, r18
    636c:	53 07       	cpc	r21, r19
    636e:	08 f4       	brcc	.+2      	; 0x6372 <ADC_is_sampling_done+0x1a>
    6370:	80 e0       	ldi	r24, 0x00	; 0
}
    6372:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00004c86 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    4c86:	0f 93       	push	r16
    4c88:	1f 93       	push	r17
    4c8a:	cf 93       	push	r28
    4c8c:	df 93       	push	r29
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <ADC_get_value+0xa>
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    4c96:	8f ef       	ldi	r24, 0xFF	; 255
    4c98:	9f ef       	ldi	r25, 0xFF	; 255
    4c9a:	f8 01       	movw	r30, r16
    4c9c:	91 83       	std	Z+1, r25	; 0x01
    4c9e:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    4ca0:	42 e0       	ldi	r20, 0x02	; 2
    4ca2:	be 01       	movw	r22, r28
    4ca4:	6f 5f       	subi	r22, 0xFF	; 255
    4ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca8:	8d e4       	ldi	r24, 0x4D	; 77
    4caa:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4cae:	81 11       	cpse	r24, r1
    4cb0:	0d c0       	rjmp	.+26     	; 0x4ccc <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    4cb2:	89 81       	ldd	r24, Y+1	; 0x01
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	98 2f       	mov	r25, r24
    4cb8:	88 27       	eor	r24, r24
    4cba:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    4cbc:	82 2b       	or	r24, r18
    4cbe:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <calc_ppm_methane>
    4cc2:	f8 01       	movw	r30, r16
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    4cc8:	80 e0       	ldi	r24, 0x00	; 0
    4cca:	01 c0       	rjmp	.+2      	; 0x4cce <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4ccc:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

0000545c <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    545c:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <_data>
    5460:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <_data+0x1>
    5464:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    5468:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    546c:	a9 01       	movw	r20, r18
    546e:	4f 5f       	subi	r20, 0xFF	; 255
    5470:	5f 4f       	sbci	r21, 0xFF	; 255
    5472:	50 93 80 0f 	sts	0x0F80, r21	; 0x800f80 <cntSamples+0x1>
    5476:	40 93 7f 0f 	sts	0x0F7F, r20	; 0x800f7f <cntSamples>
    547a:	22 0f       	add	r18, r18
    547c:	33 1f       	adc	r19, r19
    547e:	82 0f       	add	r24, r18
    5480:	93 1f       	adc	r25, r19
    5482:	0e 94 43 26 	call	0x4c86	; 0x4c86 <ADC_get_value>
	if(cntSamples>=_nSamples){
    5486:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    548a:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    548e:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <_nSamples>
    5492:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <_nSamples+0x1>
    5496:	28 17       	cp	r18, r24
    5498:	39 07       	cpc	r19, r25
    549a:	10 f0       	brcs	.+4      	; 0x54a0 <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    549c:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <TC0_HAL_stop>
    54a0:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

000068ec <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    68ec:	0e 94 cc 34 	call	0x6998	; 0x6998 <TC0_HAL_start>
	vect_ADC_do_sample();
    68f0:	0e 94 2e 2a 	call	0x545c	; 0x545c <vect_ADC_do_sample>
    68f4:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00006286 <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    6286:	80 93 a0 0f 	sts	0x0FA0, r24	; 0x800fa0 <_powerUpTime>
	cntPowerUpTime=0;
    628a:	10 92 9f 0f 	sts	0x0F9F, r1	; 0x800f9f <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    628e:	81 e0       	ldi	r24, 0x01	; 1
    6290:	0e 94 a4 32 	call	0x6548	; 0x6548 <PM_HAL_meth_power>
	
	//Setup timer
	//TC0_HAL_init(60, &vect_ADC_heat_timeout);
	TC0_HAL_init(1, &vect_ADC_heat_timeout);
    6294:	67 e2       	ldi	r22, 0x27	; 39
    6296:	72 e3       	ldi	r23, 0x32	; 50
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <TC0_HAL_init>
	TC0_HAL_start();
    629e:	0e 94 cc 34 	call	0x6998	; 0x6998 <TC0_HAL_start>
    62a2:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

00006950 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    6950:	80 e0       	ldi	r24, 0x00	; 0
    6952:	0e 94 a4 32 	call	0x6548	; 0x6548 <PM_HAL_meth_power>
    6956:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006622 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6622:	20 91 9f 0f 	lds	r18, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    6626:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    662a:	81 e0       	ldi	r24, 0x01	; 1
    662c:	29 17       	cp	r18, r25
    662e:	08 f4       	brcc	.+2      	; 0x6632 <ADC_meth_sens_ready+0x10>
    6630:	80 e0       	ldi	r24, 0x00	; 0
}
    6632:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

00005682 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    5682:	ef 92       	push	r14
    5684:	ff 92       	push	r15
    5686:	0f 93       	push	r16
    5688:	1f 93       	push	r17
	Vc=Vcc;
    568a:	60 93 67 0f 	sts	0x0F67, r22	; 0x800f67 <Vc>
    568e:	70 93 68 0f 	sts	0x0F68, r23	; 0x800f68 <Vc+0x1>
    5692:	80 93 69 0f 	sts	0x0F69, r24	; 0x800f69 <Vc+0x2>
    5696:	90 93 6a 0f 	sts	0x0F6A, r25	; 0x800f6a <Vc+0x3>
	RRL=Rrl;
    569a:	20 93 63 0f 	sts	0x0F63, r18	; 0x800f63 <RRL>
    569e:	30 93 64 0f 	sts	0x0F64, r19	; 0x800f64 <RRL+0x1>
    56a2:	40 93 65 0f 	sts	0x0F65, r20	; 0x800f65 <RRL+0x2>
    56a6:	50 93 66 0f 	sts	0x0F66, r21	; 0x800f66 <RRL+0x3>
	PPM_factor=PPMfactor;
    56aa:	e0 92 5f 0f 	sts	0x0F5F, r14	; 0x800f5f <PPM_factor>
    56ae:	f0 92 60 0f 	sts	0x0F60, r15	; 0x800f60 <PPM_factor+0x1>
    56b2:	00 93 61 0f 	sts	0x0F61, r16	; 0x800f61 <PPM_factor+0x2>
    56b6:	10 93 62 0f 	sts	0x0F62, r17	; 0x800f62 <PPM_factor+0x3>
}
    56ba:	1f 91       	pop	r17
    56bc:	0f 91       	pop	r16
    56be:	ff 90       	pop	r15
    56c0:	ef 90       	pop	r14
    56c2:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

000064c6 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    64c6:	60 e4       	ldi	r22, 0x40	; 64
    64c8:	70 e0       	ldi	r23, 0x00	; 0
    64ca:	80 e8       	ldi	r24, 0x80	; 128
    64cc:	0e 94 35 33 	call	0x666a	; 0x666a <eeprom_read_byte>
    64d0:	91 e0       	ldi	r25, 0x01	; 1
    64d2:	81 11       	cpse	r24, r1
    64d4:	01 c0       	rjmp	.+2      	; 0x64d8 <EM_has_deveui+0x12>
    64d6:	90 e0       	ldi	r25, 0x00	; 0
}
    64d8:	89 2f       	mov	r24, r25
    64da:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

000064dc <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    64dc:	61 e4       	ldi	r22, 0x41	; 65
    64de:	70 e0       	ldi	r23, 0x00	; 0
    64e0:	80 e8       	ldi	r24, 0x80	; 128
    64e2:	0e 94 35 33 	call	0x666a	; 0x666a <eeprom_read_byte>
    64e6:	91 e0       	ldi	r25, 0x01	; 1
    64e8:	81 11       	cpse	r24, r1
    64ea:	01 c0       	rjmp	.+2      	; 0x64ee <EM_has_appeui+0x12>
    64ec:	90 e0       	ldi	r25, 0x00	; 0
}
    64ee:	89 2f       	mov	r24, r25
    64f0:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

000064f2 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    64f2:	62 e4       	ldi	r22, 0x42	; 66
    64f4:	70 e0       	ldi	r23, 0x00	; 0
    64f6:	80 e8       	ldi	r24, 0x80	; 128
    64f8:	0e 94 35 33 	call	0x666a	; 0x666a <eeprom_read_byte>
    64fc:	91 e0       	ldi	r25, 0x01	; 1
    64fe:	81 11       	cpse	r24, r1
    6500:	01 c0       	rjmp	.+2      	; 0x6504 <EM_has_appkey+0x12>
    6502:	90 e0       	ldi	r25, 0x00	; 0
}
    6504:	89 2f       	mov	r24, r25
    6506:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00005966 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    5966:	cf 92       	push	r12
    5968:	df 92       	push	r13
    596a:	ef 92       	push	r14
    596c:	6b 01       	movw	r12, r22
    596e:	e8 2e       	mov	r14, r24
    5970:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    5974:	40 97       	sbiw	r24, 0x10	; 16
    5976:	79 f4       	brne	.+30     	; 0x5996 <EM_set_deveui+0x30>
    5978:	20 e1       	ldi	r18, 0x10	; 16
    597a:	30 e0       	ldi	r19, 0x00	; 0
    597c:	40 e0       	ldi	r20, 0x00	; 0
    597e:	50 e0       	ldi	r21, 0x00	; 0
    5980:	8e 2d       	mov	r24, r14
    5982:	b6 01       	movw	r22, r12
    5984:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <eeprom_update_block>
    5988:	61 e0       	ldi	r22, 0x01	; 1
    598a:	80 e4       	ldi	r24, 0x40	; 64
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	01 c0       	rjmp	.+2      	; 0x5998 <EM_set_deveui+0x32>
    5996:	80 e0       	ldi	r24, 0x00	; 0
    5998:	ef 90       	pop	r14
    599a:	df 90       	pop	r13
    599c:	cf 90       	pop	r12
    599e:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00005d60 <EM_get_deveui>:
    5d60:	0f 93       	push	r16
    5d62:	1f 93       	push	r17
    5d64:	cf 93       	push	r28
    5d66:	8c 01       	movw	r16, r24
    5d68:	0e 94 63 32 	call	0x64c6	; 0x64c6 <EM_has_deveui>
    5d6c:	c8 2f       	mov	r28, r24
    5d6e:	88 23       	and	r24, r24
    5d70:	51 f0       	breq	.+20     	; 0x5d86 <EM_get_deveui+0x26>
    5d72:	20 e1       	ldi	r18, 0x10	; 16
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	40 e0       	ldi	r20, 0x00	; 0
    5d78:	50 e0       	ldi	r21, 0x00	; 0
    5d7a:	60 e0       	ldi	r22, 0x00	; 0
    5d7c:	c8 01       	movw	r24, r16
    5d7e:	0e 94 59 30 	call	0x60b2	; 0x60b2 <eeprom_read_block>
    5d82:	f8 01       	movw	r30, r16
    5d84:	10 8a       	std	Z+16, r1	; 0x10
    5d86:	8c 2f       	mov	r24, r28
    5d88:	cf 91       	pop	r28
    5d8a:	1f 91       	pop	r17
    5d8c:	0f 91       	pop	r16
    5d8e:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000059a0 <EM_set_appeui>:
    59a0:	cf 92       	push	r12
    59a2:	df 92       	push	r13
    59a4:	ef 92       	push	r14
    59a6:	6b 01       	movw	r12, r22
    59a8:	e8 2e       	mov	r14, r24
    59aa:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    59ae:	40 97       	sbiw	r24, 0x10	; 16
    59b0:	79 f4       	brne	.+30     	; 0x59d0 <EM_set_appeui+0x30>
    59b2:	20 e1       	ldi	r18, 0x10	; 16
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	40 e1       	ldi	r20, 0x10	; 16
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	8e 2d       	mov	r24, r14
    59bc:	b6 01       	movw	r22, r12
    59be:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <eeprom_update_block>
    59c2:	61 e0       	ldi	r22, 0x01	; 1
    59c4:	81 e4       	ldi	r24, 0x41	; 65
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    59cc:	81 e0       	ldi	r24, 0x01	; 1
    59ce:	01 c0       	rjmp	.+2      	; 0x59d2 <EM_set_appeui+0x32>
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	ef 90       	pop	r14
    59d4:	df 90       	pop	r13
    59d6:	cf 90       	pop	r12
    59d8:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00005d90 <EM_get_appeui>:
    5d90:	0f 93       	push	r16
    5d92:	1f 93       	push	r17
    5d94:	cf 93       	push	r28
    5d96:	8c 01       	movw	r16, r24
    5d98:	0e 94 6e 32 	call	0x64dc	; 0x64dc <EM_has_appeui>
    5d9c:	c8 2f       	mov	r28, r24
    5d9e:	88 23       	and	r24, r24
    5da0:	51 f0       	breq	.+20     	; 0x5db6 <EM_get_appeui+0x26>
    5da2:	20 e1       	ldi	r18, 0x10	; 16
    5da4:	30 e0       	ldi	r19, 0x00	; 0
    5da6:	40 e1       	ldi	r20, 0x10	; 16
    5da8:	50 e0       	ldi	r21, 0x00	; 0
    5daa:	60 e0       	ldi	r22, 0x00	; 0
    5dac:	c8 01       	movw	r24, r16
    5dae:	0e 94 59 30 	call	0x60b2	; 0x60b2 <eeprom_read_block>
    5db2:	f8 01       	movw	r30, r16
    5db4:	10 8a       	std	Z+16, r1	; 0x10
    5db6:	8c 2f       	mov	r24, r28
    5db8:	cf 91       	pop	r28
    5dba:	1f 91       	pop	r17
    5dbc:	0f 91       	pop	r16
    5dbe:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

000059da <EM_set_appkey>:
    59da:	cf 92       	push	r12
    59dc:	df 92       	push	r13
    59de:	ef 92       	push	r14
    59e0:	6b 01       	movw	r12, r22
    59e2:	e8 2e       	mov	r14, r24
    59e4:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    59e8:	80 97       	sbiw	r24, 0x20	; 32
    59ea:	79 f4       	brne	.+30     	; 0x5a0a <EM_set_appkey+0x30>
    59ec:	20 e2       	ldi	r18, 0x20	; 32
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	40 e2       	ldi	r20, 0x20	; 32
    59f2:	50 e0       	ldi	r21, 0x00	; 0
    59f4:	8e 2d       	mov	r24, r14
    59f6:	b6 01       	movw	r22, r12
    59f8:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <eeprom_update_block>
    59fc:	61 e0       	ldi	r22, 0x01	; 1
    59fe:	82 e4       	ldi	r24, 0x42	; 66
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	01 c0       	rjmp	.+2      	; 0x5a0c <EM_set_appkey+0x32>
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	ef 90       	pop	r14
    5a0e:	df 90       	pop	r13
    5a10:	cf 90       	pop	r12
    5a12:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00005dc0 <EM_get_appkey>:
    5dc0:	0f 93       	push	r16
    5dc2:	1f 93       	push	r17
    5dc4:	cf 93       	push	r28
    5dc6:	8c 01       	movw	r16, r24
    5dc8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <EM_has_appkey>
    5dcc:	c8 2f       	mov	r28, r24
    5dce:	88 23       	and	r24, r24
    5dd0:	51 f0       	breq	.+20     	; 0x5de6 <EM_get_appkey+0x26>
    5dd2:	20 e2       	ldi	r18, 0x20	; 32
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	40 e2       	ldi	r20, 0x20	; 32
    5dd8:	50 e0       	ldi	r21, 0x00	; 0
    5dda:	60 e0       	ldi	r22, 0x00	; 0
    5ddc:	c8 01       	movw	r24, r16
    5dde:	0e 94 59 30 	call	0x60b2	; 0x60b2 <eeprom_read_block>
    5de2:	f8 01       	movw	r30, r16
    5de4:	10 a2       	std	Z+32, r1	; 0x20
    5de6:	8c 2f       	mov	r24, r28
    5de8:	cf 91       	pop	r28
    5dea:	1f 91       	pop	r17
    5dec:	0f 91       	pop	r16
    5dee:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00006738 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    6738:	ab 01       	movw	r20, r22
    673a:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    673c:	83 e4       	ldi	r24, 0x43	; 67
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	0e 94 57 32 	call	0x64ae	; 0x64ae <eeprom_update_dword>
    6744:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

000062a4 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62a4:	cf 93       	push	r28
    62a6:	df 93       	push	r29
    62a8:	ec 01       	movw	r28, r24
    62aa:	63 e4       	ldi	r22, 0x43	; 67
    62ac:	70 e0       	ldi	r23, 0x00	; 0
    62ae:	80 e0       	ldi	r24, 0x00	; 0
    62b0:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <eeprom_read_dword>
    62b4:	68 83       	st	Y, r22
    62b6:	79 83       	std	Y+1, r23	; 0x01
    62b8:	8a 83       	std	Y+2, r24	; 0x02
    62ba:	9b 83       	std	Y+3, r25	; 0x03
    62bc:	df 91       	pop	r29
    62be:	cf 91       	pop	r28
    62c0:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00006746 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    6746:	ab 01       	movw	r20, r22
    6748:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    674a:	87 e4       	ldi	r24, 0x47	; 71
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	0e 94 57 32 	call	0x64ae	; 0x64ae <eeprom_update_dword>
    6752:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

000062c2 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62c2:	cf 93       	push	r28
    62c4:	df 93       	push	r29
    62c6:	ec 01       	movw	r28, r24
    62c8:	67 e4       	ldi	r22, 0x47	; 71
    62ca:	70 e0       	ldi	r23, 0x00	; 0
    62cc:	80 e0       	ldi	r24, 0x00	; 0
    62ce:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <eeprom_read_dword>
    62d2:	68 83       	st	Y, r22
    62d4:	79 83       	std	Y+1, r23	; 0x01
    62d6:	8a 83       	std	Y+2, r24	; 0x02
    62d8:	9b 83       	std	Y+3, r25	; 0x03
    62da:	df 91       	pop	r29
    62dc:	cf 91       	pop	r28
    62de:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00006754 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    6754:	ab 01       	movw	r20, r22
    6756:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    6758:	8b e4       	ldi	r24, 0x4B	; 75
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	0e 94 57 32 	call	0x64ae	; 0x64ae <eeprom_update_dword>
    6760:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

000062e0 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62e0:	cf 93       	push	r28
    62e2:	df 93       	push	r29
    62e4:	ec 01       	movw	r28, r24
    62e6:	6b e4       	ldi	r22, 0x4B	; 75
    62e8:	70 e0       	ldi	r23, 0x00	; 0
    62ea:	80 e0       	ldi	r24, 0x00	; 0
    62ec:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <eeprom_read_dword>
    62f0:	68 83       	st	Y, r22
    62f2:	79 83       	std	Y+1, r23	; 0x01
    62f4:	8a 83       	std	Y+2, r24	; 0x02
    62f6:	9b 83       	std	Y+3, r25	; 0x03
    62f8:	df 91       	pop	r29
    62fa:	cf 91       	pop	r28
    62fc:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00006762 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    6762:	24 2f       	mov	r18, r20
    6764:	30 e0       	ldi	r19, 0x00	; 0
    6766:	44 e6       	ldi	r20, 0x64	; 100
    6768:	50 e0       	ldi	r21, 0x00	; 0
    676a:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <eeprom_update_block>
    676e:	08 95       	ret

Disassembly of section .text.EM_get_collections:

0000668c <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    668c:	26 2f       	mov	r18, r22
    668e:	30 e0       	ldi	r19, 0x00	; 0
    6690:	44 e6       	ldi	r20, 0x64	; 100
    6692:	50 e0       	ldi	r21, 0x00	; 0
    6694:	60 e0       	ldi	r22, 0x00	; 0
    6696:	0e 94 59 30 	call	0x60b2	; 0x60b2 <eeprom_read_block>
    669a:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00006806 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    6806:	68 2f       	mov	r22, r24
    6808:	8f e4       	ldi	r24, 0x4F	; 79
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    6810:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00006812 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    6812:	6f e4       	ldi	r22, 0x4F	; 79
    6814:	70 e0       	ldi	r23, 0x00	; 0
    6816:	80 e0       	ldi	r24, 0x00	; 0
    6818:	0e 94 35 33 	call	0x666a	; 0x666a <eeprom_read_byte>
}
    681c:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

0000681e <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    681e:	bc 01       	movw	r22, r24
    6820:	80 e5       	ldi	r24, 0x50	; 80
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	0e 94 57 34 	call	0x68ae	; 0x68ae <eeprom_update_word>
    6828:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000682a <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    682a:	60 e5       	ldi	r22, 0x50	; 80
    682c:	70 e0       	ldi	r23, 0x00	; 0
    682e:	80 e0       	ldi	r24, 0x00	; 0
    6830:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <eeprom_read_word>
}
    6834:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

00006836 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    6836:	68 2f       	mov	r22, r24
    6838:	82 e5       	ldi	r24, 0x52	; 82
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    6840:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00006842 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    6842:	62 e5       	ldi	r22, 0x52	; 82
    6844:	70 e0       	ldi	r23, 0x00	; 0
    6846:	80 e0       	ldi	r24, 0x00	; 0
    6848:	0e 94 35 33 	call	0x666a	; 0x666a <eeprom_read_byte>
}
    684c:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

0000684e <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    684e:	68 2f       	mov	r22, r24
    6850:	83 e6       	ldi	r24, 0x63	; 99
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    6858:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

0000685a <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    685a:	63 e6       	ldi	r22, 0x63	; 99
    685c:	70 e0       	ldi	r23, 0x00	; 0
    685e:	80 e0       	ldi	r24, 0x00	; 0
    6860:	0e 94 35 33 	call	0x666a	; 0x666a <eeprom_read_byte>
    6864:	08 95       	ret

Disassembly of section .text.cb_blink:

000069a4 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    69a4:	0e 94 94 34 	call	0x6928	; 0x6928 <PM_HAL_LED_toggle>
    69a8:	08 95       	ret

Disassembly of section .text.blink:

00005050 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    5056:	c0 e0       	ldi	r28, 0x00	; 0
    5058:	19 c0       	rjmp	.+50     	; 0x508c <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    5060:	2f ef       	ldi	r18, 0xFF	; 255
    5062:	82 e5       	ldi	r24, 0x52	; 82
    5064:	97 e0       	ldi	r25, 0x07	; 7
    5066:	21 50       	subi	r18, 0x01	; 1
    5068:	80 40       	sbci	r24, 0x00	; 0
    506a:	90 40       	sbci	r25, 0x00	; 0
    506c:	e1 f7       	brne	.-8      	; 0x5066 <blink+0x16>
    506e:	00 c0       	rjmp	.+0      	; 0x5070 <blink+0x20>
    5070:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    5072:	81 e0       	ldi	r24, 0x01	; 1
    5074:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    5078:	2f ef       	ldi	r18, 0xFF	; 255
    507a:	82 e5       	ldi	r24, 0x52	; 82
    507c:	97 e0       	ldi	r25, 0x07	; 7
    507e:	21 50       	subi	r18, 0x01	; 1
    5080:	80 40       	sbci	r24, 0x00	; 0
    5082:	90 40       	sbci	r25, 0x00	; 0
    5084:	e1 f7       	brne	.-8      	; 0x507e <blink+0x2e>
    5086:	00 c0       	rjmp	.+0      	; 0x5088 <blink+0x38>
    5088:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    508a:	cf 5f       	subi	r28, 0xFF	; 255
    508c:	cd 17       	cp	r28, r29
    508e:	28 f3       	brcs	.-54     	; 0x505a <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
}
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

Disassembly of section .text.err_code:

00005a14 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    5a14:	cf 93       	push	r28
    5a16:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    5a18:	81 e0       	ldi	r24, 0x01	; 1
    5a1a:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    5a1e:	2f ef       	ldi	r18, 0xFF	; 255
    5a20:	83 ed       	ldi	r24, 0xD3	; 211
    5a22:	90 e3       	ldi	r25, 0x30	; 48
    5a24:	21 50       	subi	r18, 0x01	; 1
    5a26:	80 40       	sbci	r24, 0x00	; 0
    5a28:	90 40       	sbci	r25, 0x00	; 0
    5a2a:	e1 f7       	brne	.-8      	; 0x5a24 <err_code+0x10>
    5a2c:	00 c0       	rjmp	.+0      	; 0x5a2e <err_code+0x1a>
    5a2e:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    5a30:	8c 2f       	mov	r24, r28
    5a32:	0e 94 28 28 	call	0x5050	; 0x5050 <blink>
    5a36:	2f ef       	ldi	r18, 0xFF	; 255
    5a38:	89 e6       	ldi	r24, 0x69	; 105
    5a3a:	98 e1       	ldi	r25, 0x18	; 24
    5a3c:	21 50       	subi	r18, 0x01	; 1
    5a3e:	80 40       	sbci	r24, 0x00	; 0
    5a40:	90 40       	sbci	r25, 0x00	; 0
    5a42:	e1 f7       	brne	.-8      	; 0x5a3c <err_code+0x28>
    5a44:	00 c0       	rjmp	.+0      	; 0x5a46 <err_code+0x32>
    5a46:	00 00       	nop
	_delay_ms(1000);
}
    5a48:	cf 91       	pop	r28
    5a4a:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00006770 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    6770:	82 ed       	ldi	r24, 0xD2	; 210
    6772:	94 e3       	ldi	r25, 0x34	; 52
    6774:	0e 94 99 26 	call	0x4d32	; 0x4d32 <TC2_HAL_subscribe>
    6778:	80 93 a1 0f 	sts	0x0FA1, r24	; 0x800fa1 <cbPointer>
    677c:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

0000669c <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    669c:	80 91 a1 0f 	lds	r24, 0x0FA1	; 0x800fa1 <cbPointer>
    66a0:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    66a4:	80 e0       	ldi	r24, 0x00	; 0
    66a6:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    66aa:	08 95       	ret

Disassembly of section .text.LED_join_success:

00005706 <LED_join_success>:
}

void LED_join_success(){
    5706:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    5708:	c0 e0       	ldi	r28, 0x00	; 0
    570a:	19 c0       	rjmp	.+50     	; 0x573e <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    5712:	2f ef       	ldi	r18, 0xFF	; 255
    5714:	80 e7       	ldi	r24, 0x70	; 112
    5716:	92 e0       	ldi	r25, 0x02	; 2
    5718:	21 50       	subi	r18, 0x01	; 1
    571a:	80 40       	sbci	r24, 0x00	; 0
    571c:	90 40       	sbci	r25, 0x00	; 0
    571e:	e1 f7       	brne	.-8      	; 0x5718 <LED_join_success+0x12>
    5720:	00 c0       	rjmp	.+0      	; 0x5722 <LED_join_success+0x1c>
    5722:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
    572a:	2f ef       	ldi	r18, 0xFF	; 255
    572c:	80 e7       	ldi	r24, 0x70	; 112
    572e:	92 e0       	ldi	r25, 0x02	; 2
    5730:	21 50       	subi	r18, 0x01	; 1
    5732:	80 40       	sbci	r24, 0x00	; 0
    5734:	90 40       	sbci	r25, 0x00	; 0
    5736:	e1 f7       	brne	.-8      	; 0x5730 <LED_join_success+0x2a>
    5738:	00 c0       	rjmp	.+0      	; 0x573a <LED_join_success+0x34>
    573a:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    573c:	cf 5f       	subi	r28, 0xFF	; 255
    573e:	ca 30       	cpi	r28, 0x0A	; 10
    5740:	28 f3       	brcs	.-54     	; 0x570c <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    5742:	cf 91       	pop	r28
    5744:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00006958 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    6958:	83 e0       	ldi	r24, 0x03	; 3
    695a:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <err_code>
    695e:	08 95       	ret

Disassembly of section .text.LED_conf_err:

00006960 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    6960:	85 e0       	ldi	r24, 0x05	; 5
    6962:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <err_code>
    6966:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

00006968 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    6968:	87 e0       	ldi	r24, 0x07	; 7
    696a:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <err_code>
    696e:	08 95       	ret

Disassembly of section .text.parse_err:

00004bd6 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    4bd6:	cf 92       	push	r12
    4bd8:	df 92       	push	r13
    4bda:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    4bdc:	6c 01       	movw	r12, r24
    4bde:	20 e8       	ldi	r18, 0x80	; 128
    4be0:	e2 2e       	mov	r14, r18
    4be2:	24 e1       	ldi	r18, 0x14	; 20
    4be4:	38 e0       	ldi	r19, 0x08	; 8
    4be6:	40 e0       	ldi	r20, 0x00	; 0
    4be8:	8e 2d       	mov	r24, r14
    4bea:	b6 01       	movw	r22, r12
    4bec:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    4bf0:	89 2b       	or	r24, r25
    4bf2:	a1 f0       	breq	.+40     	; 0x4c1c <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    4bf4:	2f e1       	ldi	r18, 0x1F	; 31
    4bf6:	38 e0       	ldi	r19, 0x08	; 8
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	8e 2d       	mov	r24, r14
    4bfc:	b6 01       	movw	r22, r12
    4bfe:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    4c02:	89 2b       	or	r24, r25
    4c04:	69 f0       	breq	.+26     	; 0x4c20 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    4c06:	26 e2       	ldi	r18, 0x26	; 38
    4c08:	38 e0       	ldi	r19, 0x08	; 8
    4c0a:	40 e0       	ldi	r20, 0x00	; 0
    4c0c:	8e 2d       	mov	r24, r14
    4c0e:	b6 01       	movw	r22, r12
    4c10:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    4c14:	89 2b       	or	r24, r25
    4c16:	31 f4       	brne	.+12     	; 0x4c24 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    4c18:	83 e0       	ldi	r24, 0x03	; 3
    4c1a:	05 c0       	rjmp	.+10     	; 0x4c26 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    4c1c:	82 e0       	ldi	r24, 0x02	; 2
    4c1e:	03 c0       	rjmp	.+6      	; 0x4c26 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    4c20:	82 e0       	ldi	r24, 0x02	; 2
    4c22:	01 c0       	rjmp	.+2      	; 0x4c26 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
}
    4c26:	ef 90       	pop	r14
    4c28:	df 90       	pop	r13
    4c2a:	cf 90       	pop	r12
    4c2c:	08 95       	ret

Disassembly of section .text.JN_join_network:

0000166c <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	28 97       	sbiw	r28, 0x08	; 8
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	5c 01       	movw	r10, r24
    1690:	6b 01       	movw	r12, r22
    1692:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    1694:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1696:	e1 2f       	mov	r30, r17
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	ed 30       	cpi	r30, 0x0D	; 13
    169c:	f1 05       	cpc	r31, r1
    169e:	d8 f7       	brcc	.-10     	; 0x1696 <JN_join_network+0x2a>
    16a0:	e2 5c       	subi	r30, 0xC2	; 194
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    16a8:	0e 94 9c 34 	call	0x6938	; 0x6938 <rn2483_reset_active>
    16ac:	2f ef       	ldi	r18, 0xFF	; 255
    16ae:	89 e6       	ldi	r24, 0x69	; 105
    16b0:	98 e1       	ldi	r25, 0x18	; 24
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	80 40       	sbci	r24, 0x00	; 0
    16b6:	90 40       	sbci	r25, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <JN_join_network+0x46>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <JN_join_network+0x50>
    16bc:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    16be:	0e 94 a0 34 	call	0x6940	; 0x6940 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    16c2:	4c e0       	ldi	r20, 0x0C	; 12
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
    16d2:	24 e3       	ldi	r18, 0x34	; 52
    16d4:	38 e0       	ldi	r19, 0x08	; 8
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	ce 01       	movw	r24, r28
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
    16e2:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16e4:	d8 cf       	rjmp	.-80     	; 0x1696 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    16e6:	4b e3       	ldi	r20, 0x3B	; 59
    16e8:	58 e0       	ldi	r21, 0x08	; 8
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	8e e5       	ldi	r24, 0x5E	; 94
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    16f4:	6e e5       	ldi	r22, 0x5E	; 94
    16f6:	72 e0       	ldi	r23, 0x02	; 2
    16f8:	80 e8       	ldi	r24, 0x80	; 128
    16fa:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    16fe:	4c e0       	ldi	r20, 0x0C	; 12
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	63 e0       	ldi	r22, 0x03	; 3
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	ce 01       	movw	r24, r28
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    170e:	29 e4       	ldi	r18, 0x49	; 73
    1710:	38 e0       	ldi	r19, 0x08	; 8
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    171e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1720:	ba cf       	rjmp	.-140    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1722:	b5 01       	movw	r22, r10
    1724:	8e e5       	ldi	r24, 0x5E	; 94
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 9f 29 	call	0x533e	; 0x533e <mac_set_deveui>
				attach_ending(lm_msg);
    172c:	8e e5       	ldi	r24, 0x5E	; 94
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1734:	6e e5       	ldi	r22, 0x5E	; 94
    1736:	72 e0       	ldi	r23, 0x02	; 2
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    173e:	4c e0       	ldi	r20, 0x0C	; 12
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	64 e0       	ldi	r22, 0x04	; 4
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    174e:	29 e4       	ldi	r18, 0x49	; 73
    1750:	38 e0       	ldi	r19, 0x08	; 8
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    175e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1760:	9a cf       	rjmp	.-204    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1762:	b7 01       	movw	r22, r14
    1764:	8e e5       	ldi	r24, 0x5E	; 94
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 e7 29 	call	0x53ce	; 0x53ce <mac_set_appkey>
				attach_ending(lm_msg);
    176c:	8e e5       	ldi	r24, 0x5E	; 94
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1774:	6e e5       	ldi	r22, 0x5E	; 94
    1776:	72 e0       	ldi	r23, 0x02	; 2
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    177e:	4c e0       	ldi	r20, 0x0C	; 12
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    178e:	29 e4       	ldi	r18, 0x49	; 73
    1790:	38 e0       	ldi	r19, 0x08	; 8
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    179e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17a0:	7a cf       	rjmp	.-268    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    17a2:	b6 01       	movw	r22, r12
    17a4:	8e e5       	ldi	r24, 0x5E	; 94
    17a6:	92 e0       	ldi	r25, 0x02	; 2
    17a8:	0e 94 c3 29 	call	0x5386	; 0x5386 <mac_set_appeui>
				attach_ending(lm_msg);
    17ac:	8e e5       	ldi	r24, 0x5E	; 94
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17b4:	6e e5       	ldi	r22, 0x5E	; 94
    17b6:	72 e0       	ldi	r23, 0x02	; 2
    17b8:	80 e8       	ldi	r24, 0x80	; 128
    17ba:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    17be:	4c e0       	ldi	r20, 0x0C	; 12
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	66 e0       	ldi	r22, 0x06	; 6
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    17ce:	29 e4       	ldi	r18, 0x49	; 73
    17d0:	38 e0       	ldi	r19, 0x08	; 8
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    17de:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17e0:	5a cf       	rjmp	.-332    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	8e e5       	ldi	r24, 0x5E	; 94
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <mac_set_ADR>
				attach_ending(lm_msg);
    17ec:	8e e5       	ldi	r24, 0x5E	; 94
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17f4:	6e e5       	ldi	r22, 0x5E	; 94
    17f6:	72 e0       	ldi	r23, 0x02	; 2
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    17fe:	4c e0       	ldi	r20, 0x0C	; 12
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    180e:	29 e4       	ldi	r18, 0x49	; 73
    1810:	38 e0       	ldi	r19, 0x08	; 8
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    181e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1820:	3a cf       	rjmp	.-396    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1822:	4c e4       	ldi	r20, 0x4C	; 76
    1824:	58 e0       	ldi	r21, 0x08	; 8
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	8e e5       	ldi	r24, 0x5E	; 94
    182a:	92 e0       	ldi	r25, 0x02	; 2
    182c:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1830:	6e e5       	ldi	r22, 0x5E	; 94
    1832:	72 e0       	ldi	r23, 0x02	; 2
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    183a:	4c e0       	ldi	r20, 0x0C	; 12
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	68 e0       	ldi	r22, 0x08	; 8
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    184a:	29 e4       	ldi	r18, 0x49	; 73
    184c:	38 e0       	ldi	r19, 0x08	; 8
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    185a:	11 e0       	ldi	r17, 0x01	; 1
			break;
    185c:	1c cf       	rjmp	.-456    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    185e:	45 e5       	ldi	r20, 0x55	; 85
    1860:	58 e0       	ldi	r21, 0x08	; 8
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	8e e5       	ldi	r24, 0x5E	; 94
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    186c:	6e e5       	ldi	r22, 0x5E	; 94
    186e:	72 e0       	ldi	r23, 0x02	; 2
    1870:	80 e8       	ldi	r24, 0x80	; 128
    1872:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1876:	4a e0       	ldi	r20, 0x0A	; 10
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	69 e0       	ldi	r22, 0x09	; 9
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1886:	29 e4       	ldi	r18, 0x49	; 73
    1888:	38 e0       	ldi	r19, 0x08	; 8
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1896:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1898:	fe ce       	rjmp	.-516    	; 0x1696 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    189a:	4a e0       	ldi	r20, 0x0A	; 10
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	6b e0       	ldi	r22, 0x0B	; 11
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    18aa:	23 e6       	ldi	r18, 0x63	; 99
    18ac:	38 e0       	ldi	r19, 0x08	; 8
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    18ba:	11 e0       	ldi	r17, 0x01	; 1
			break;
    18bc:	ec ce       	rjmp	.-552    	; 0x1696 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    18be:	8e e5       	ldi	r24, 0x5E	; 94
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <parse_err>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    18c8:	0e 94 80 33 	call	0x6700	; 0x6700 <uart0_hal_message_ready>
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <JN_join_network+0x266>
    18d0:	e2 ce       	rjmp	.-572    	; 0x1696 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    18d2:	8e e5       	ldi	r24, 0x5E	; 94
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    18da:	6e e5       	ldi	r22, 0x5E	; 94
    18dc:	72 e0       	ldi	r23, 0x02	; 2
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <util_matchMessage>
    18e6:	18 2f       	mov	r17, r24
    18e8:	d6 ce       	rjmp	.-596    	; 0x1696 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    18f0:	28 96       	adiw	r28, 0x08	; 8
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00006466 <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    6466:	8a eb       	ldi	r24, 0xBA	; 186
    6468:	91 e3       	ldi	r25, 0x31	; 49
    646a:	0e 94 99 26 	call	0x4d32	; 0x4d32 <TC2_HAL_subscribe>
    646e:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <subPointer>
	busy=true;
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <busy>
	cnt=0;
    6478:	10 92 a4 0f 	sts	0x0FA4, r1	; 0x800fa4 <cnt>
    647c:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006374 <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    6374:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <cnt>
    6378:	8f 5f       	subi	r24, 0xFF	; 255
    637a:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    637e:	8f 31       	cpi	r24, 0x1F	; 31
    6380:	30 f0       	brcs	.+12     	; 0x638e <cb_block_uplink+0x1a>
		busy=false;
    6382:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
		TC2_HAL_cancel(subPointer);
    6386:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    638a:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <TC2_HAL_cancel>
    638e:	08 95       	ret

Disassembly of section .text.LM_join_network:

000069aa <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    69aa:	0e 94 36 0b 	call	0x166c	; 0x166c <JN_join_network>
}
    69ae:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00005f3c <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    5f3c:	1f 93       	push	r17
    5f3e:	cf 93       	push	r28
    5f40:	df 93       	push	r29
    5f42:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    5f44:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
    5f48:	91 11       	cpse	r25, r1
    5f4a:	0a c0       	rjmp	.+20     	; 0x5f60 <LM_send_uplink+0x24>
    5f4c:	16 2f       	mov	r17, r22
    5f4e:	e9 01       	movw	r28, r18
	set_block_uplink();
    5f50:	0e 94 33 32 	call	0x6466	; 0x6466 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    5f54:	41 2f       	mov	r20, r17
    5f56:	be 01       	movw	r22, r28
    5f58:	84 e6       	ldi	r24, 0x64	; 100
    5f5a:	0e 94 04 18 	call	0x3008	; 0x3008 <SU_send_uplink>
    5f5e:	01 c0       	rjmp	.+2      	; 0x5f62 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    5f60:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    5f62:	df 91       	pop	r29
    5f64:	cf 91       	pop	r28
    5f66:	1f 91       	pop	r17
    5f68:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00006634 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    6634:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
	TC2_HAL_cancel(subPointer);
    6638:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    663c:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <TC2_HAL_cancel>
	return SC_put_to_sleep();
    6640:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <SC_put_to_sleep>
}
    6644:	08 95       	ret

Disassembly of section .text.LM_wake_up:

000069b0 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    69b0:	0e 94 c8 23 	call	0x4790	; 0x4790 <SC_wake_up>
}
    69b4:	08 95       	ret

Disassembly of section .text.LM_is_free:

000068f6 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    68f6:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
}
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	89 27       	eor	r24, r25
    68fe:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000069b6 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    69b6:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <util_reset_module>
}
    69ba:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000069bc <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    69bc:	0e 94 81 21 	call	0x4302	; 0x4302 <util_lora_forward_msg>
    69c0:	08 95       	ret

Disassembly of section .text.LM_send_break:

000069c2 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    69c2:	0e 94 b8 34 	call	0x6970	; 0x6970 <util_send_break>
    69c6:	08 95       	ret

Disassembly of section .text.tohex:

00004188 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    4188:	6f 92       	push	r6
    418a:	7f 92       	push	r7
    418c:	8f 92       	push	r8
    418e:	ef 92       	push	r14
    4190:	ff 92       	push	r15
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	7c 01       	movw	r14, r24
    419c:	3a 01       	movw	r6, r20
    419e:	86 2e       	mov	r8, r22
    41a0:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    41a2:	c0 e0       	ldi	r28, 0x00	; 0
    41a4:	d0 e0       	ldi	r29, 0x00	; 0
    41a6:	25 c0       	rjmp	.+74     	; 0x41f2 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    41a8:	a8 2d       	mov	r26, r8
    41aa:	c3 01       	movw	r24, r6
    41ac:	8c 0f       	add	r24, r28
    41ae:	9d 1f       	adc	r25, r29
    41b0:	a1 1d       	adc	r26, r1
    41b2:	d7 fd       	sbrc	r29, 7
    41b4:	aa 95       	dec	r26
    41b6:	fc 01       	movw	r30, r24
    41b8:	24 91       	lpm	r18, Z
    41ba:	a7 fd       	sbrc	r26, 7
    41bc:	20 81       	ld	r18, Z
    41be:	ce 01       	movw	r24, r28
    41c0:	88 0f       	add	r24, r24
    41c2:	99 1f       	adc	r25, r25
    41c4:	1f 92       	push	r1
    41c6:	2f 93       	push	r18
    41c8:	21 ea       	ldi	r18, 0xA1	; 161
    41ca:	37 e0       	ldi	r19, 0x07	; 7
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	4f 93       	push	r20
    41d0:	3f 93       	push	r19
    41d2:	2f 93       	push	r18
    41d4:	8e 0d       	add	r24, r14
    41d6:	9f 1d       	adc	r25, r15
    41d8:	9f 93       	push	r25
    41da:	8f 93       	push	r24
    41dc:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    41e0:	21 96       	adiw	r28, 0x01	; 1
    41e2:	8d b7       	in	r24, 0x3d	; 61
    41e4:	9e b7       	in	r25, 0x3e	; 62
    41e6:	07 96       	adiw	r24, 0x07	; 7
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	9e bf       	out	0x3e, r25	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	8d bf       	out	0x3d, r24	; 61
    41f2:	c0 17       	cp	r28, r16
    41f4:	d1 07       	cpc	r29, r17
    41f6:	c4 f2       	brlt	.-80     	; 0x41a8 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	ff 90       	pop	r15
    4202:	ef 90       	pop	r14
    4204:	8f 90       	pop	r8
    4206:	7f 90       	pop	r7
    4208:	6f 90       	pop	r6
    420a:	08 95       	ret

Disassembly of section .text.attach_ending:

00006390 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    6390:	fc 01       	movw	r30, r24
    6392:	01 90       	ld	r0, Z+
    6394:	00 20       	and	r0, r0
    6396:	e9 f7       	brne	.-6      	; 0x6392 <attach_ending+0x2>
    6398:	cf 01       	movw	r24, r30
    639a:	23 e0       	ldi	r18, 0x03	; 3
    639c:	30 e0       	ldi	r19, 0x00	; 0
    639e:	46 ea       	ldi	r20, 0xA6	; 166
    63a0:	57 e0       	ldi	r21, 0x07	; 7
    63a2:	60 e0       	ldi	r22, 0x00	; 0
    63a4:	01 97       	sbiw	r24, 0x01	; 1
    63a6:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
    63aa:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00005c9a <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    5c9a:	cf 93       	push	r28
    5c9c:	df 93       	push	r29
    5c9e:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    5ca0:	0e 94 9d 31 	call	0x633a	; 0x633a <strcpy>
	strcat(buffer, CMD_END_CHARS);
    5ca4:	fe 01       	movw	r30, r28
    5ca6:	01 90       	ld	r0, Z+
    5ca8:	00 20       	and	r0, r0
    5caa:	e9 f7       	brne	.-6      	; 0x5ca6 <cmd_with_ending+0xc>
    5cac:	cf 01       	movw	r24, r30
    5cae:	23 e0       	ldi	r18, 0x03	; 3
    5cb0:	30 e0       	ldi	r19, 0x00	; 0
    5cb2:	46 ea       	ldi	r20, 0xA6	; 166
    5cb4:	57 e0       	ldi	r21, 0x07	; 7
    5cb6:	60 e0       	ldi	r22, 0x00	; 0
    5cb8:	01 97       	sbiw	r24, 0x01	; 1
    5cba:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return strlen(buffer);
    5cbe:	be 01       	movw	r22, r28
    5cc0:	80 e8       	ldi	r24, 0x80	; 128
    5cc2:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
}
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00004a0a <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    4a0a:	cf 93       	push	r28
    4a0c:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    4a0e:	44 36       	cpi	r20, 0x64	; 100
    4a10:	51 05       	cpc	r21, r1
    4a12:	61 05       	cpc	r22, r1
    4a14:	71 05       	cpc	r23, r1
    4a16:	18 f1       	brcs	.+70     	; 0x4a5e <sys_sleep_cmd+0x54>
    4a18:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    4a1a:	7f 93       	push	r23
    4a1c:	6f 93       	push	r22
    4a1e:	5f 93       	push	r21
    4a20:	4f 93       	push	r20
    4a22:	89 ea       	ldi	r24, 0xA9	; 169
    4a24:	97 e0       	ldi	r25, 0x07	; 7
    4a26:	a0 e0       	ldi	r26, 0x00	; 0
    4a28:	af 93       	push	r26
    4a2a:	9f 93       	push	r25
    4a2c:	8f 93       	push	r24
    4a2e:	83 eb       	ldi	r24, 0xB3	; 179
    4a30:	97 e0       	ldi	r25, 0x07	; 7
    4a32:	a0 e0       	ldi	r26, 0x00	; 0
    4a34:	af 93       	push	r26
    4a36:	9f 93       	push	r25
    4a38:	8f 93       	push	r24
    4a3a:	df 93       	push	r29
    4a3c:	cf 93       	push	r28
    4a3e:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    return strlen(buffer);
    4a42:	be 01       	movw	r22, r28
    4a44:	80 e8       	ldi	r24, 0x80	; 128
    4a46:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4a4a:	2d b7       	in	r18, 0x3d	; 61
    4a4c:	3e b7       	in	r19, 0x3e	; 62
    4a4e:	24 5f       	subi	r18, 0xF4	; 244
    4a50:	3f 4f       	sbci	r19, 0xFF	; 255
    4a52:	0f b6       	in	r0, 0x3f	; 63
    4a54:	f8 94       	cli
    4a56:	3e bf       	out	0x3e, r19	; 62
    4a58:	0f be       	out	0x3f, r0	; 63
    4a5a:	2d bf       	out	0x3d, r18	; 61
    4a5c:	02 c0       	rjmp	.+4      	; 0x4a62 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    4a5e:	8f ef       	ldi	r24, 0xFF	; 255
    4a60:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00004f68 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    4f68:	0f 93       	push	r16
    4f6a:	1f 93       	push	r17
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
    4f70:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    4f72:	2f 93       	push	r18
    4f74:	1f 93       	push	r17
    4f76:	0f 93       	push	r16
    4f78:	6f 93       	push	r22
    4f7a:	5f 93       	push	r21
    4f7c:	4f 93       	push	r20
    4f7e:	8a eb       	ldi	r24, 0xBA	; 186
    4f80:	97 e0       	ldi	r25, 0x07	; 7
    4f82:	a0 e0       	ldi	r26, 0x00	; 0
    4f84:	af 93       	push	r26
    4f86:	9f 93       	push	r25
    4f88:	8f 93       	push	r24
    4f8a:	df 93       	push	r29
    4f8c:	cf 93       	push	r28
    4f8e:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    return strlen(buffer);
    4f92:	be 01       	movw	r22, r28
    4f94:	80 e8       	ldi	r24, 0x80	; 128
    4f96:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4f9a:	2d b7       	in	r18, 0x3d	; 61
    4f9c:	3e b7       	in	r19, 0x3e	; 62
    4f9e:	25 5f       	subi	r18, 0xF5	; 245
    4fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	3e bf       	out	0x3e, r19	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	2d bf       	out	0x3d, r18	; 61
}
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

0000533e <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    533e:	cf 92       	push	r12
    5340:	df 92       	push	r13
    5342:	ef 92       	push	r14
    5344:	0f 93       	push	r16
    5346:	1f 93       	push	r17
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    534e:	6b 01       	movw	r12, r22
    5350:	80 e8       	ldi	r24, 0x80	; 128
    5352:	e8 2e       	mov	r14, r24
    5354:	8e 2d       	mov	r24, r14
    5356:	b6 01       	movw	r22, r12
    5358:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    535c:	40 97       	sbiw	r24, 0x10	; 16
    535e:	49 f4       	brne	.+18     	; 0x5372 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    5360:	2e 2d       	mov	r18, r14
    5362:	86 01       	movw	r16, r12
    5364:	40 ec       	ldi	r20, 0xC0	; 192
    5366:	57 e0       	ldi	r21, 0x07	; 7
    5368:	60 e0       	ldi	r22, 0x00	; 0
    536a:	ce 01       	movw	r24, r28
    536c:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <mac_set_parameter>
    5370:	02 c0       	rjmp	.+4      	; 0x5376 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    5372:	8f ef       	ldi	r24, 0xFF	; 255
    5374:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    5376:	df 91       	pop	r29
    5378:	cf 91       	pop	r28
    537a:	1f 91       	pop	r17
    537c:	0f 91       	pop	r16
    537e:	ef 90       	pop	r14
    5380:	df 90       	pop	r13
    5382:	cf 90       	pop	r12
    5384:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00005386 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    5386:	cf 92       	push	r12
    5388:	df 92       	push	r13
    538a:	ef 92       	push	r14
    538c:	0f 93       	push	r16
    538e:	1f 93       	push	r17
    5390:	cf 93       	push	r28
    5392:	df 93       	push	r29
    5394:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    5396:	6b 01       	movw	r12, r22
    5398:	80 e8       	ldi	r24, 0x80	; 128
    539a:	e8 2e       	mov	r14, r24
    539c:	8e 2d       	mov	r24, r14
    539e:	b6 01       	movw	r22, r12
    53a0:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    53a4:	40 97       	sbiw	r24, 0x10	; 16
    53a6:	49 f4       	brne	.+18     	; 0x53ba <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    53a8:	2e 2d       	mov	r18, r14
    53aa:	86 01       	movw	r16, r12
    53ac:	4f ec       	ldi	r20, 0xCF	; 207
    53ae:	57 e0       	ldi	r21, 0x07	; 7
    53b0:	60 e0       	ldi	r22, 0x00	; 0
    53b2:	ce 01       	movw	r24, r28
    53b4:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <mac_set_parameter>
    53b8:	02 c0       	rjmp	.+4      	; 0x53be <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    53ba:	8f ef       	ldi	r24, 0xFF	; 255
    53bc:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    53be:	df 91       	pop	r29
    53c0:	cf 91       	pop	r28
    53c2:	1f 91       	pop	r17
    53c4:	0f 91       	pop	r16
    53c6:	ef 90       	pop	r14
    53c8:	df 90       	pop	r13
    53ca:	cf 90       	pop	r12
    53cc:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

000053ce <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    53ce:	cf 92       	push	r12
    53d0:	df 92       	push	r13
    53d2:	ef 92       	push	r14
    53d4:	0f 93       	push	r16
    53d6:	1f 93       	push	r17
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
    53dc:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    53de:	6b 01       	movw	r12, r22
    53e0:	80 e8       	ldi	r24, 0x80	; 128
    53e2:	e8 2e       	mov	r14, r24
    53e4:	8e 2d       	mov	r24, r14
    53e6:	b6 01       	movw	r22, r12
    53e8:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    53ec:	80 97       	sbiw	r24, 0x20	; 32
    53ee:	49 f4       	brne	.+18     	; 0x5402 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    53f0:	2e 2d       	mov	r18, r14
    53f2:	86 01       	movw	r16, r12
    53f4:	4e ed       	ldi	r20, 0xDE	; 222
    53f6:	57 e0       	ldi	r21, 0x07	; 7
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	ce 01       	movw	r24, r28
    53fc:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <mac_set_parameter>
    5400:	02 c0       	rjmp	.+4      	; 0x5406 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    5402:	8f ef       	ldi	r24, 0xFF	; 255
    5404:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5406:	df 91       	pop	r29
    5408:	cf 91       	pop	r28
    540a:	1f 91       	pop	r17
    540c:	0f 91       	pop	r16
    540e:	ef 90       	pop	r14
    5410:	df 90       	pop	r13
    5412:	cf 90       	pop	r12
    5414:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00005df0 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    5df0:	0f 93       	push	r16
    5df2:	1f 93       	push	r17
	if(state==0){
    5df4:	61 11       	cpse	r22, r1
    5df6:	09 c0       	rjmp	.+18     	; 0x5e0a <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5df8:	0d ee       	ldi	r16, 0xED	; 237
    5dfa:	17 e0       	ldi	r17, 0x07	; 7
    5dfc:	20 e0       	ldi	r18, 0x00	; 0
    5dfe:	41 ef       	ldi	r20, 0xF1	; 241
    5e00:	57 e0       	ldi	r21, 0x07	; 7
    5e02:	60 e0       	ldi	r22, 0x00	; 0
    5e04:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <mac_set_parameter>
    5e08:	08 c0       	rjmp	.+16     	; 0x5e1a <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5e0a:	0d ef       	ldi	r16, 0xFD	; 253
    5e0c:	17 e0       	ldi	r17, 0x07	; 7
    5e0e:	20 e0       	ldi	r18, 0x00	; 0
    5e10:	41 ef       	ldi	r20, 0xF1	; 241
    5e12:	57 e0       	ldi	r21, 0x07	; 7
    5e14:	60 e0       	ldi	r22, 0x00	; 0
    5e16:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <mac_set_parameter>
	}
}
    5e1a:	1f 91       	pop	r17
    5e1c:	0f 91       	pop	r16
    5e1e:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

000039b6 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    39b6:	df 92       	push	r13
    39b8:	ef 92       	push	r14
    39ba:	ff 92       	push	r15
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	cf 93       	push	r28
    39c2:	df 93       	push	r29
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	c7 56       	subi	r28, 0x67	; 103
    39ca:	d1 09       	sbc	r29, r1
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    39d8:	9f ef       	ldi	r25, 0xFF	; 255
    39da:	96 0f       	add	r25, r22
    39dc:	9f 3d       	cpi	r25, 0xDF	; 223
    39de:	68 f5       	brcc	.+90     	; 0x3a3a <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    39e0:	9f ef       	ldi	r25, 0xFF	; 255
    39e2:	92 0f       	add	r25, r18
    39e4:	93 33       	cpi	r25, 0x33	; 51
    39e6:	60 f5       	brcc	.+88     	; 0x3a40 <mac_tx_confirmed+0x8a>
    39e8:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	60 e8       	ldi	r22, 0x80	; 128
    39ee:	ce 01       	movw	r24, r28
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	7c 01       	movw	r14, r24
    39f4:	0e 94 c4 20 	call	0x4188	; 0x4188 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    39f8:	c7 01       	movw	r24, r14
    39fa:	a0 e8       	ldi	r26, 0x80	; 128
    39fc:	af 93       	push	r26
    39fe:	9f 93       	push	r25
    3a00:	ef 92       	push	r14
    3a02:	1f 92       	push	r1
    3a04:	df 92       	push	r13
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	98 e0       	ldi	r25, 0x08	; 8
    3a0a:	a0 e0       	ldi	r26, 0x00	; 0
    3a0c:	af 93       	push	r26
    3a0e:	9f 93       	push	r25
    3a10:	8f 93       	push	r24
    3a12:	8b e0       	ldi	r24, 0x0B	; 11
    3a14:	98 e0       	ldi	r25, 0x08	; 8
    3a16:	a0 e0       	ldi	r26, 0x00	; 0
    3a18:	af 93       	push	r26
    3a1a:	9f 93       	push	r25
    3a1c:	8f 93       	push	r24
    3a1e:	1f 93       	push	r17
    3a20:	0f 93       	push	r16
    3a22:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    
	
    return strlen(buffer);
    3a26:	b8 01       	movw	r22, r16
    3a28:	80 e8       	ldi	r24, 0x80	; 128
    3a2a:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	05 c0       	rjmp	.+10     	; 0x3a44 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    3a3a:	8f ef       	ldi	r24, 0xFF	; 255
    3a3c:	9f ef       	ldi	r25, 0xFF	; 255
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    3a40:	8f ef       	ldi	r24, 0xFF	; 255
    3a42:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    3a44:	c9 59       	subi	r28, 0x99	; 153
    3a46:	df 4f       	sbci	r29, 0xFF	; 255
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	ff 90       	pop	r15
    3a5c:	ef 90       	pop	r14
    3a5e:	df 90       	pop	r13
    3a60:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000048d4 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    48d4:	cf 92       	push	r12
    48d6:	df 92       	push	r13
    48d8:	ef 92       	push	r14
    48da:	6b 01       	movw	r12, r22
    48dc:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    48de:	2c e6       	ldi	r18, 0x6C	; 108
    48e0:	38 e0       	ldi	r19, 0x08	; 8
    48e2:	40 e0       	ldi	r20, 0x00	; 0
    48e4:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    48e8:	89 2b       	or	r24, r25
    48ea:	e9 f0       	breq	.+58     	; 0x4926 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    48ec:	27 e7       	ldi	r18, 0x77	; 119
    48ee:	38 e0       	ldi	r19, 0x08	; 8
    48f0:	40 e0       	ldi	r20, 0x00	; 0
    48f2:	8e 2d       	mov	r24, r14
    48f4:	b6 01       	movw	r22, r12
    48f6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    48fa:	89 2b       	or	r24, r25
    48fc:	b1 f0       	breq	.+44     	; 0x492a <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    48fe:	2f e7       	ldi	r18, 0x7F	; 127
    4900:	38 e0       	ldi	r19, 0x08	; 8
    4902:	40 e0       	ldi	r20, 0x00	; 0
    4904:	8e 2d       	mov	r24, r14
    4906:	b6 01       	movw	r22, r12
    4908:	0e 94 56 29 	call	0x52ac	; 0x52ac <util_strbeginswith>
    490c:	81 11       	cpse	r24, r1
    490e:	0f c0       	rjmp	.+30     	; 0x492e <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    4910:	26 e8       	ldi	r18, 0x86	; 134
    4912:	38 e0       	ldi	r19, 0x08	; 8
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	8e 2d       	mov	r24, r14
    4918:	b6 01       	movw	r22, r12
    491a:	0e 94 56 29 	call	0x52ac	; 0x52ac <util_strbeginswith>
    491e:	88 23       	and	r24, r24
    4920:	41 f0       	breq	.+16     	; 0x4932 <decode_tx_response+0x5e>
    4922:	85 e0       	ldi	r24, 0x05	; 5
    4924:	07 c0       	rjmp	.+14     	; 0x4934 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4926:	82 e0       	ldi	r24, 0x02	; 2
    4928:	05 c0       	rjmp	.+10     	; 0x4934 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    492a:	84 e0       	ldi	r24, 0x04	; 4
    492c:	03 c0       	rjmp	.+6      	; 0x4934 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	01 c0       	rjmp	.+2      	; 0x4934 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    4932:	81 e0       	ldi	r24, 0x01	; 1
}
    4934:	ef 90       	pop	r14
    4936:	df 90       	pop	r13
    4938:	cf 90       	pop	r12
    493a:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00003008 <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    3008:	df 92       	push	r13
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	28 97       	sbiw	r28, 0x08	; 8
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	d8 2e       	mov	r13, r24
    3028:	7b 01       	movw	r14, r22
    302a:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    302c:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    302e:	12 30       	cpi	r17, 0x02	; 2
    3030:	09 f4       	brne	.+2      	; 0x3034 <SU_send_uplink+0x2c>
    3032:	40 c0       	rjmp	.+128    	; 0x30b4 <SU_send_uplink+0xac>
    3034:	28 f4       	brcc	.+10     	; 0x3040 <SU_send_uplink+0x38>
    3036:	11 23       	and	r17, r17
    3038:	49 f0       	breq	.+18     	; 0x304c <SU_send_uplink+0x44>
    303a:	11 30       	cpi	r17, 0x01	; 1
    303c:	49 f1       	breq	.+82     	; 0x3090 <SU_send_uplink+0x88>
    303e:	f7 cf       	rjmp	.-18     	; 0x302e <SU_send_uplink+0x26>
    3040:	13 30       	cpi	r17, 0x03	; 3
    3042:	09 f4       	brne	.+2      	; 0x3046 <SU_send_uplink+0x3e>
    3044:	4e c0       	rjmp	.+156    	; 0x30e2 <SU_send_uplink+0xda>
    3046:	14 30       	cpi	r17, 0x04	; 4
    3048:	d9 f1       	breq	.+118    	; 0x30c0 <SU_send_uplink+0xb8>
    304a:	f1 cf       	rjmp	.-30     	; 0x302e <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    304c:	20 2f       	mov	r18, r16
    304e:	a7 01       	movw	r20, r14
    3050:	6d 2d       	mov	r22, r13
    3052:	8e e5       	ldi	r24, 0x5E	; 94
    3054:	92 e0       	ldi	r25, 0x02	; 2
    3056:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <mac_tx_confirmed>
				attach_ending(lm_msg);
    305a:	8e e5       	ldi	r24, 0x5E	; 94
    305c:	92 e0       	ldi	r25, 0x02	; 2
    305e:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
				uart0_hal_send_string(lm_msg);
    3062:	6e e5       	ldi	r22, 0x5E	; 94
    3064:	72 e0       	ldi	r23, 0x02	; 2
    3066:	80 e8       	ldi	r24, 0x80	; 128
    3068:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    306c:	42 e0       	ldi	r20, 0x02	; 2
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	61 e0       	ldi	r22, 0x01	; 1
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	ce 01       	movw	r24, r28
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    307c:	27 e9       	ldi	r18, 0x97	; 151
    307e:	38 e0       	ldi	r19, 0x08	; 8
    3080:	40 e0       	ldi	r20, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	ce 01       	movw	r24, r28
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    308c:	14 e0       	ldi	r17, 0x04	; 4
			break;
    308e:	cf cf       	rjmp	.-98     	; 0x302e <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    3090:	42 e0       	ldi	r20, 0x02	; 2
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	63 e0       	ldi	r22, 0x03	; 3
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	0e 94 39 34 	call	0x6872	; 0x6872 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    30a0:	2a e9       	ldi	r18, 0x9A	; 154
    30a2:	38 e0       	ldi	r19, 0x08	; 8
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	60 e0       	ldi	r22, 0x00	; 0
    30a8:	ce 01       	movw	r24, r28
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	0e 94 3f 34 	call	0x687e	; 0x687e <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    30b0:	14 e0       	ldi	r17, 0x04	; 4
			break;
    30b2:	bd cf       	rjmp	.-134    	; 0x302e <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    30b4:	6e e5       	ldi	r22, 0x5E	; 94
    30b6:	72 e0       	ldi	r23, 0x02	; 2
    30b8:	80 e8       	ldi	r24, 0x80	; 128
    30ba:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <decode_tx_response>
    30be:	12 c0       	rjmp	.+36     	; 0x30e4 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    30c0:	0e 94 80 33 	call	0x6700	; 0x6700 <uart0_hal_message_ready>
    30c4:	88 23       	and	r24, r24
    30c6:	09 f4       	brne	.+2      	; 0x30ca <SU_send_uplink+0xc2>
    30c8:	b2 cf       	rjmp	.-156    	; 0x302e <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    30ca:	8e e5       	ldi	r24, 0x5E	; 94
    30cc:	92 e0       	ldi	r25, 0x02	; 2
    30ce:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    30d2:	6e e5       	ldi	r22, 0x5E	; 94
    30d4:	72 e0       	ldi	r23, 0x02	; 2
    30d6:	ce 01       	movw	r24, r28
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <util_matchMessage>
    30de:	18 2f       	mov	r17, r24
    30e0:	a6 cf       	rjmp	.-180    	; 0x302e <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    30e2:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    30e4:	28 96       	adiw	r28, 0x08	; 8
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	ff 90       	pop	r15
    30fa:	ef 90       	pop	r14
    30fc:	df 90       	pop	r13
    30fe:	08 95       	ret

Disassembly of section .text.cb_counter:

000065fc <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    65fc:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    6600:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    6604:	01 96       	adiw	r24, 0x01	; 1
    6606:	90 93 86 0f 	sts	0x0F86, r25	; 0x800f86 <cnt+0x1>
    660a:	80 93 85 0f 	sts	0x0F85, r24	; 0x800f85 <cnt>
    660e:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00005a4c <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    5a4c:	40 e0       	ldi	r20, 0x00	; 0
    5a4e:	5c e5       	ldi	r21, 0x5C	; 92
    5a50:	66 e2       	ldi	r22, 0x26	; 38
    5a52:	75 e0       	ldi	r23, 0x05	; 5
    5a54:	8e e5       	ldi	r24, 0x5E	; 94
    5a56:	92 e0       	ldi	r25, 0x02	; 2
    5a58:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <sys_sleep_cmd>
	attach_ending(lm_msg);
    5a5c:	8e e5       	ldi	r24, 0x5E	; 94
    5a5e:	92 e0       	ldi	r25, 0x02	; 2
    5a60:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
	uart0_hal_send_string(lm_msg);
    5a64:	6e e5       	ldi	r22, 0x5E	; 94
    5a66:	72 e0       	ldi	r23, 0x02	; 2
    5a68:	80 e8       	ldi	r24, 0x80	; 128
    5a6a:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
    5a6e:	2f ef       	ldi	r18, 0xFF	; 255
    5a70:	81 ee       	ldi	r24, 0xE1	; 225
    5a72:	94 e0       	ldi	r25, 0x04	; 4
    5a74:	21 50       	subi	r18, 0x01	; 1
    5a76:	80 40       	sbci	r24, 0x00	; 0
    5a78:	90 40       	sbci	r25, 0x00	; 0
    5a7a:	e1 f7       	brne	.-8      	; 0x5a74 <SC_put_to_sleep+0x28>
    5a7c:	00 c0       	rjmp	.+0      	; 0x5a7e <SC_put_to_sleep+0x32>
    5a7e:	00 00       	nop
	//
	//uart0_hal_read_message_as_str(lm_msg);
	//
	//if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
	//return LM_STATUS_FATAL_ERROR;
}
    5a80:	80 e0       	ldi	r24, 0x00	; 0
    5a82:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00004790 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    4790:	85 e5       	ldi	r24, 0x55	; 85
    4792:	0e 94 0b 2a 	call	0x5416	; 0x5416 <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    4796:	10 92 86 0f 	sts	0x0F86, r1	; 0x800f86 <cnt+0x1>
    479a:	10 92 85 0f 	sts	0x0F85, r1	; 0x800f85 <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    479e:	8e ef       	ldi	r24, 0xFE	; 254
    47a0:	92 e3       	ldi	r25, 0x32	; 50
    47a2:	0e 94 99 26 	call	0x4d32	; 0x4d32 <TC2_HAL_subscribe>
    47a6:	80 93 a5 0f 	sts	0x0FA5, r24	; 0x800fa5 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    47aa:	0e 94 80 33 	call	0x6700	; 0x6700 <uart0_hal_message_ready>
    47ae:	81 11       	cpse	r24, r1
    47b0:	06 c0       	rjmp	.+12     	; 0x47be <SC_wake_up+0x2e>
    47b2:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    47b6:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    47ba:	0a 97       	sbiw	r24, 0x0a	; 10
    47bc:	b0 f3       	brcs	.-20     	; 0x47aa <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    47be:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <eventPointer>
    47c2:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    47c6:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    47ca:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    47ce:	0a 97       	sbiw	r24, 0x0a	; 10
    47d0:	20 f0       	brcs	.+8      	; 0x47da <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    47d2:	0e 94 67 34 	call	0x68ce	; 0x68ce <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    47da:	8e e5       	ldi	r24, 0x5E	; 94
    47dc:	92 e0       	ldi	r25, 0x02	; 2
    47de:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    47e2:	6e e5       	ldi	r22, 0x5E	; 94
    47e4:	72 e0       	ldi	r23, 0x02	; 2
    47e6:	80 e8       	ldi	r24, 0x80	; 128
    47e8:	29 ec       	ldi	r18, 0xC9	; 201
    47ea:	38 e0       	ldi	r19, 0x08	; 8
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    47f2:	89 2b       	or	r24, r25
    47f4:	11 f4       	brne	.+4      	; 0x47fa <SC_wake_up+0x6a>
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    47fa:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    47fc:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

00006866 <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    6866:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    686a:	8f 5f       	subi	r24, 0xFF	; 255
    686c:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <wd_cnt>
    6870:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00006872 <util_setPendingStates>:
char lm_msg[200];

static void cb_watchdog_counter();

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    6872:	fc 01       	movw	r30, r24
    6874:	71 83       	std	Z+1, r23	; 0x01
    6876:	60 83       	st	Z, r22
	sd->failure_state=failed;
    6878:	53 83       	std	Z+3, r21	; 0x03
    687a:	42 83       	std	Z+2, r20	; 0x02
    687c:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

0000687e <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    687e:	fc 01       	movw	r30, r24
    6880:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    6882:	25 83       	std	Z+5, r18	; 0x05
    6884:	36 83       	std	Z+6, r19	; 0x06
    6886:	47 83       	std	Z+7, r20	; 0x07
    6888:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

000052ac <util_strbeginswith>:
		return sd->failure_state;
	}
}


bool util_strbeginswith(const char *s1, const char *s2){
    52ac:	6f 92       	push	r6
    52ae:	7f 92       	push	r7
    52b0:	8f 92       	push	r8
    52b2:	cf 92       	push	r12
    52b4:	df 92       	push	r13
    52b6:	ef 92       	push	r14
    52b8:	0f 93       	push	r16
    52ba:	1f 93       	push	r17
    52bc:	3b 01       	movw	r6, r22
    52be:	88 2e       	mov	r8, r24
    52c0:	69 01       	movw	r12, r18
    52c2:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    52c4:	84 2f       	mov	r24, r20
    52c6:	b9 01       	movw	r22, r18
    52c8:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    52cc:	8c 01       	movw	r16, r24
    52ce:	4e 2d       	mov	r20, r14
    52d0:	96 01       	movw	r18, r12
    52d2:	88 2d       	mov	r24, r8
    52d4:	b3 01       	movw	r22, r6
    52d6:	0e 94 35 24 	call	0x486a	; 0x486a <strncmp>
    52da:	21 e0       	ldi	r18, 0x01	; 1
    52dc:	89 2b       	or	r24, r25
    52de:	09 f0       	breq	.+2      	; 0x52e2 <util_strbeginswith+0x36>
    52e0:	20 e0       	ldi	r18, 0x00	; 0
}
    52e2:	82 2f       	mov	r24, r18
    52e4:	1f 91       	pop	r17
    52e6:	0f 91       	pop	r16
    52e8:	ef 90       	pop	r14
    52ea:	df 90       	pop	r13
    52ec:	cf 90       	pop	r12
    52ee:	8f 90       	pop	r8
    52f0:	7f 90       	pop	r7
    52f2:	6f 90       	pop	r6
    52f4:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00004ac6 <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    4acc:	8c 81       	ldd	r24, Y+4	; 0x04
    4ace:	81 30       	cpi	r24, 0x01	; 1
    4ad0:	91 f0       	breq	.+36     	; 0x4af6 <util_matchMessage+0x30>
    4ad2:	18 f0       	brcs	.+6      	; 0x4ada <util_matchMessage+0x14>
    4ad4:	82 30       	cpi	r24, 0x02	; 2
    4ad6:	e9 f0       	breq	.+58     	; 0x4b12 <util_matchMessage+0x4c>
    4ad8:	1f c0       	rjmp	.+62     	; 0x4b18 <util_matchMessage+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    4ada:	2d 81       	ldd	r18, Y+5	; 0x05
    4adc:	3e 81       	ldd	r19, Y+6	; 0x06
    4ade:	4f 81       	ldd	r20, Y+7	; 0x07
    4ae0:	80 e8       	ldi	r24, 0x80	; 128
    4ae2:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    4ae6:	89 2b       	or	r24, r25
    4ae8:	19 f4       	brne	.+6      	; 0x4af0 <util_matchMessage+0x2a>
    4aea:	88 81       	ld	r24, Y
    4aec:	99 81       	ldd	r25, Y+1	; 0x01
    4aee:	16 c0       	rjmp	.+44     	; 0x4b1c <util_matchMessage+0x56>
    4af0:	8a 81       	ldd	r24, Y+2	; 0x02
    4af2:	9b 81       	ldd	r25, Y+3	; 0x03
    4af4:	13 c0       	rjmp	.+38     	; 0x4b1c <util_matchMessage+0x56>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    4af6:	2d 81       	ldd	r18, Y+5	; 0x05
    4af8:	3e 81       	ldd	r19, Y+6	; 0x06
    4afa:	4f 81       	ldd	r20, Y+7	; 0x07
    4afc:	80 e8       	ldi	r24, 0x80	; 128
    4afe:	0e 94 56 29 	call	0x52ac	; 0x52ac <util_strbeginswith>
    4b02:	88 23       	and	r24, r24
    4b04:	19 f0       	breq	.+6      	; 0x4b0c <util_matchMessage+0x46>
    4b06:	88 81       	ld	r24, Y
    4b08:	99 81       	ldd	r25, Y+1	; 0x01
    4b0a:	08 c0       	rjmp	.+16     	; 0x4b1c <util_matchMessage+0x56>
    4b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b10:	05 c0       	rjmp	.+10     	; 0x4b1c <util_matchMessage+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    4b12:	88 81       	ld	r24, Y
    4b14:	99 81       	ldd	r25, Y+1	; 0x01
    4b16:	02 c0       	rjmp	.+4      	; 0x4b1c <util_matchMessage+0x56>
		default:
		return sd->failure_state;
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    4b1c:	df 91       	pop	r29
    4b1e:	cf 91       	pop	r28
    4b20:	08 95       	ret

Disassembly of section .text.util_reset_module:

000054a2 <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    54a2:	0e 94 9c 34 	call	0x6938	; 0x6938 <rn2483_reset_active>
    54a6:	2f ef       	ldi	r18, 0xFF	; 255
    54a8:	89 e6       	ldi	r24, 0x69	; 105
    54aa:	98 e1       	ldi	r25, 0x18	; 24
    54ac:	21 50       	subi	r18, 0x01	; 1
    54ae:	80 40       	sbci	r24, 0x00	; 0
    54b0:	90 40       	sbci	r25, 0x00	; 0
    54b2:	e1 f7       	brne	.-8      	; 0x54ac <util_reset_module+0xa>
    54b4:	00 c0       	rjmp	.+0      	; 0x54b6 <util_reset_module+0x14>
    54b6:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    54b8:	0e 94 a0 34 	call	0x6940	; 0x6940 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    54bc:	0e 94 80 33 	call	0x6700	; 0x6700 <uart0_hal_message_ready>
    54c0:	88 23       	and	r24, r24
    54c2:	e1 f3       	breq	.-8      	; 0x54bc <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    54c4:	8e e5       	ldi	r24, 0x5E	; 94
    54c6:	92 e0       	ldi	r25, 0x02	; 2
    54c8:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    54cc:	6e e5       	ldi	r22, 0x5E	; 94
    54ce:	72 e0       	ldi	r23, 0x02	; 2
    54d0:	80 e8       	ldi	r24, 0x80	; 128
    54d2:	24 ea       	ldi	r18, 0xA4	; 164
    54d4:	38 e0       	ldi	r19, 0x08	; 8
    54d6:	40 e0       	ldi	r20, 0x00	; 0
    54d8:	0e 94 56 29 	call	0x52ac	; 0x52ac <util_strbeginswith>
    54dc:	88 23       	and	r24, r24
    54de:	11 f0       	breq	.+4      	; 0x54e4 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    54e0:	80 e0       	ldi	r24, 0x00	; 0
    54e2:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    54e4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    54e6:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004302 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    4308:	ab 01       	movw	r20, r22
    430a:	68 2f       	mov	r22, r24
    430c:	8e e5       	ldi	r24, 0x5E	; 94
    430e:	92 e0       	ldi	r25, 0x02	; 2
    4310:	0e 94 9d 31 	call	0x633a	; 0x633a <strcpy>
	attach_ending(lm_msg);
    4314:	8e e5       	ldi	r24, 0x5E	; 94
    4316:	92 e0       	ldi	r25, 0x02	; 2
    4318:	0e 94 c8 31 	call	0x6390	; 0x6390 <attach_ending>
	uart0_hal_send_string(lm_msg);
    431c:	6e e5       	ldi	r22, 0x5E	; 94
    431e:	72 e0       	ldi	r23, 0x02	; 2
    4320:	80 e8       	ldi	r24, 0x80	; 128
    4322:	0e 94 91 23 	call	0x4722	; 0x4722 <uart0_hal_send_string>
	
	wd_cnt=0;
    4326:	10 92 a7 0f 	sts	0x0FA7, r1	; 0x800fa7 <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    432a:	83 e3       	ldi	r24, 0x33	; 51
    432c:	94 e3       	ldi	r25, 0x34	; 52
    432e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <TC2_HAL_subscribe>
    4332:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    4336:	0e 94 80 33 	call	0x6700	; 0x6700 <uart0_hal_message_ready>
    433a:	81 11       	cpse	r24, r1
    433c:	04 c0       	rjmp	.+8      	; 0x4346 <util_lora_forward_msg+0x44>
    433e:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    4342:	8f 30       	cpi	r24, 0x0F	; 15
    4344:	c0 f3       	brcs	.-16     	; 0x4336 <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    4346:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <wd_cb_pointer>
    434a:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <TC2_HAL_cancel>
	if(wd_cnt>=15){
    434e:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    4352:	8f 30       	cpi	r24, 0x0F	; 15
    4354:	60 f0       	brcs	.+24     	; 0x436e <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    4356:	2c e0       	ldi	r18, 0x0C	; 12
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	4b ea       	ldi	r20, 0xAB	; 171
    435c:	58 e0       	ldi	r21, 0x08	; 8
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	ce 01       	movw	r24, r28
    4362:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		uart0_hal_read_message_as_str(res);
    4366:	ce 01       	movw	r24, r28
    4368:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
    436c:	03 c0       	rjmp	.+6      	; 0x4374 <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    436e:	ce 01       	movw	r24, r28
    4370:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
	}
}
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	08 95       	ret

Disassembly of section .text.util_send_break:

00006970 <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    6970:	85 e5       	ldi	r24, 0x55	; 85
    6972:	0e 94 0b 2a 	call	0x5416	; 0x5416 <uart0_hal_send_break>
    6976:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

0000647e <MRPP_init_group>:
//uint8_t _groupId=0;

//uint8_t get_group_id();
//void set_group_id(uint8_t groupId);

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    647e:	cf 93       	push	r28
    6480:	26 2f       	mov	r18, r22
    6482:	c4 2f       	mov	r28, r20
    //uint8_t groupId=get_group_id();

    mrpp_state_init(&state, groupId, collections, nCollections);
    6484:	ac 01       	movw	r20, r24
    6486:	6c 2f       	mov	r22, r28
    6488:	86 e2       	ldi	r24, 0x26	; 38
    648a:	93 e0       	ldi	r25, 0x03	; 3
    648c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <mrpp_state_init>

    return groupId++;
    //set_group_id(groupId);
}
    6490:	8c 2f       	mov	r24, r28
    6492:	cf 91       	pop	r28
    6494:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00004642 <MRPP_add_collection_data_INT16>:
//
//void set_group_id(uint8_t groupId){
    //_groupId=groupId;
//}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    4642:	ef 92       	push	r14
    4644:	ff 92       	push	r15
    4646:	1f 93       	push	r17
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
    4650:	2a 97       	sbiw	r28, 0x0a	; 10
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	f8 94       	cli
    4656:	de bf       	out	0x3e, r29	; 62
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	cd bf       	out	0x3d, r28	; 61
    465c:	18 2f       	mov	r17, r24
    465e:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    4660:	9e 01       	movw	r18, r28
    4662:	2f 5f       	subi	r18, 0xFF	; 255
    4664:	3f 4f       	sbci	r19, 0xFF	; 255
    4666:	ab 01       	movw	r20, r22
    4668:	68 2f       	mov	r22, r24
    466a:	86 e2       	ldi	r24, 0x26	; 38
    466c:	93 e0       	ldi	r25, 0x03	; 3
    466e:	0e 94 81 20 	call	0x4102	; 0x4102 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    4672:	9e 01       	movw	r18, r28
    4674:	27 5f       	subi	r18, 0xF7	; 247
    4676:	3f 4f       	sbci	r19, 0xFF	; 255
    4678:	ae 01       	movw	r20, r28
    467a:	49 5f       	subi	r20, 0xF9	; 249
    467c:	5f 4f       	sbci	r21, 0xFF	; 255
    467e:	61 2f       	mov	r22, r17
    4680:	86 e2       	ldi	r24, 0x26	; 38
    4682:	93 e0       	ldi	r25, 0x03	; 3
    4684:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    4688:	29 85       	ldd	r18, Y+9	; 0x09
    468a:	3a 85       	ldd	r19, Y+10	; 0x0a
    468c:	4f 81       	ldd	r20, Y+7	; 0x07
    468e:	58 85       	ldd	r21, Y+8	; 0x08
    4690:	b7 01       	movw	r22, r14
    4692:	ce 01       	movw	r24, r28
    4694:	01 96       	adiw	r24, 0x01	; 1
    4696:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <mrpp_data_add_int16>
}
    469a:	2a 96       	adiw	r28, 0x0a	; 10
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	cd bf       	out	0x3d, r28	; 61
    46a6:	df 91       	pop	r29
    46a8:	cf 91       	pop	r28
    46aa:	1f 91       	pop	r17
    46ac:	ff 90       	pop	r15
    46ae:	ef 90       	pop	r14
    46b0:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

000060fa <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    6100:	86 e2       	ldi	r24, 0x26	; 38
    6102:	93 e0       	ldi	r25, 0x03	; 3
    6104:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <mrpp_state_is_body_ready>
    6108:	88 83       	st	Y, r24
    610a:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    610c:	89 2f       	mov	r24, r25
    610e:	80 95       	com	r24
    
}
    6110:	88 1f       	adc	r24, r24
    6112:	88 27       	eor	r24, r24
    6114:	88 1f       	adc	r24, r24
    6116:	df 91       	pop	r29
    6118:	cf 91       	pop	r28
    611a:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003e28 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3e28:	af 92       	push	r10
    3e2a:	bf 92       	push	r11
    3e2c:	cf 92       	push	r12
    3e2e:	df 92       	push	r13
    3e30:	ef 92       	push	r14
    3e32:	ff 92       	push	r15
    3e34:	0f 93       	push	r16
    3e36:	1f 93       	push	r17
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <MRPP_get_ready_body_package+0x16>
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <MRPP_get_ready_body_package+0x18>
    3e40:	1f 92       	push	r1
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	6b 01       	movw	r12, r22
    3e48:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    3e4a:	9e 01       	movw	r18, r28
    3e4c:	2b 5f       	subi	r18, 0xFB	; 251
    3e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e50:	79 01       	movw	r14, r18
    3e52:	8e 01       	movw	r16, r28
    3e54:	0d 5f       	subi	r16, 0xFD	; 253
    3e56:	1f 4f       	sbci	r17, 0xFF	; 255
    3e58:	23 50       	subi	r18, 0x03	; 3
    3e5a:	31 09       	sbc	r19, r1
    3e5c:	ae 01       	movw	r20, r28
    3e5e:	4f 5f       	subi	r20, 0xFF	; 255
    3e60:	5f 4f       	sbci	r21, 0xFF	; 255
    3e62:	bc 01       	movw	r22, r24
    3e64:	86 e2       	ldi	r24, 0x26	; 38
    3e66:	93 e0       	ldi	r25, 0x03	; 3
    3e68:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    3e6c:	88 23       	and	r24, r24
    3e6e:	b1 f0       	breq	.+44     	; 0x3e9c <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    3e70:	4d 81       	ldd	r20, Y+5	; 0x05
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	84 0f       	add	r24, r20
    3e76:	f5 01       	movw	r30, r10
    3e78:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    3e7a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <state>
    3e7e:	f6 01       	movw	r30, r12
    3e80:	80 83       	st	Z, r24
    package[1]=subId;
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    3e86:	8a 81       	ldd	r24, Y+2	; 0x02
    3e88:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    3e8a:	50 e0       	ldi	r21, 0x00	; 0
    3e8c:	6b 81       	ldd	r22, Y+3	; 0x03
    3e8e:	7c 81       	ldd	r23, Y+4	; 0x04
    3e90:	c6 01       	movw	r24, r12
    3e92:	03 96       	adiw	r24, 0x03	; 3
    3e94:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <mrpp_data_get>

    return true;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	01 c0       	rjmp	.+2      	; 0x3e9e <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    3e9c:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	1f 91       	pop	r17
    3eae:	0f 91       	pop	r16
    3eb0:	ff 90       	pop	r15
    3eb2:	ef 90       	pop	r14
    3eb4:	df 90       	pop	r13
    3eb6:	cf 90       	pop	r12
    3eb8:	bf 90       	pop	r11
    3eba:	af 90       	pop	r10
    3ebc:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

0000688a <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    688a:	bc 01       	movw	r22, r24
    688c:	86 e2       	ldi	r24, 0x26	; 38
    688e:	93 e0       	ldi	r25, 0x03	; 3
    6890:	0e 94 23 31 	call	0x6246	; 0x6246 <mrpp_state_set_body_sent>
    6894:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

0000611c <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    611c:	cf 93       	push	r28
    611e:	df 93       	push	r29
    6120:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6122:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    6126:	fc 01       	movw	r30, r24
    6128:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    612a:	bf 01       	movw	r22, r30
    612c:	86 e2       	ldi	r24, 0x26	; 38
    612e:	93 e0       	ldi	r25, 0x03	; 3
    6130:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <mrpp_state_get_header>
    *package_length+=1;
    6134:	8f 5f       	subi	r24, 0xFF	; 255
    6136:	88 83       	st	Y, r24
}
    6138:	df 91       	pop	r29
    613a:	cf 91       	pop	r28
    613c:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

0000613e <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    613e:	cf 93       	push	r28
    6140:	df 93       	push	r29
    6142:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6144:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    6148:	fc 01       	movw	r30, r24
    614a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    614c:	bf 01       	movw	r22, r30
    614e:	86 e2       	ldi	r24, 0x26	; 38
    6150:	93 e0       	ldi	r25, 0x03	; 3
    6152:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <mrpp_state_get_tail>
    *package_length+=1;
    6156:	8f 5f       	subi	r24, 0xFF	; 255
    6158:	88 83       	st	Y, r24
}
    615a:	df 91       	pop	r29
    615c:	cf 91       	pop	r28
    615e:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00006900 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    6900:	86 e2       	ldi	r24, 0x26	; 38
    6902:	93 e0       	ldi	r25, 0x03	; 3
    6904:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <mrpp_state_all_bodies_sent>
}
    6908:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00003f54 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    3f54:	cf 92       	push	r12
    3f56:	df 92       	push	r13
    3f58:	ff 92       	push	r15
    3f5a:	0f 93       	push	r16
    3f5c:	1f 93       	push	r17
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29
    3f62:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3f64:	94 2f       	mov	r25, r20
    3f66:	0c c0       	rjmp	.+24     	; 0x3f80 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    3f68:	c9 2f       	mov	r28, r25
    3f6a:	d0 e0       	ldi	r29, 0x00	; 0
    3f6c:	e4 1b       	sub	r30, r20
    3f6e:	f5 0b       	sbc	r31, r21
    3f70:	ea 0f       	add	r30, r26
    3f72:	fb 1f       	adc	r31, r27
    3f74:	80 81       	ld	r24, Z
    3f76:	fe 01       	movw	r30, r28
    3f78:	e0 54       	subi	r30, 0x40	; 64
    3f7a:	fc 4f       	sbci	r31, 0xFC	; 252
    3f7c:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3f7e:	9f 5f       	subi	r25, 0xFF	; 255
    3f80:	e9 2f       	mov	r30, r25
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	6a 01       	movw	r12, r20
    3f86:	86 e0       	ldi	r24, 0x06	; 6
    3f88:	c8 0e       	add	r12, r24
    3f8a:	d1 1c       	adc	r13, r1
    3f8c:	ec 15       	cp	r30, r12
    3f8e:	fd 05       	cpc	r31, r13
    3f90:	58 f3       	brcs	.-42     	; 0x3f68 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    3f92:	26 50       	subi	r18, 0x06	; 6
    3f94:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    3f96:	36 95       	lsr	r19
    3f98:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    3f9a:	49 5f       	subi	r20, 0xF9	; 249
    3f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    3f9e:	a0 e0       	ldi	r26, 0x00	; 0
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	16 c0       	rjmp	.+44     	; 0x3fd0 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	88 0f       	add	r24, r24
    3fa8:	99 1f       	adc	r25, r25
    3faa:	f6 01       	movw	r30, r12
    3fac:	e8 0f       	add	r30, r24
    3fae:	f9 1f       	adc	r31, r25
    3fb0:	8b 01       	movw	r16, r22
    3fb2:	08 0f       	add	r16, r24
    3fb4:	19 1f       	adc	r17, r25
    3fb6:	e8 01       	movw	r28, r16
    3fb8:	f9 80       	ldd	r15, Y+1	; 0x01
    3fba:	e0 54       	subi	r30, 0x40	; 64
    3fbc:	fc 4f       	sbci	r31, 0xFC	; 252
    3fbe:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    3fc0:	84 0f       	add	r24, r20
    3fc2:	95 1f       	adc	r25, r21
    3fc4:	18 81       	ld	r17, Y
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e0 54       	subi	r30, 0x40	; 64
    3fca:	fc 4f       	sbci	r31, 0xFC	; 252
    3fcc:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    3fce:	11 96       	adiw	r26, 0x01	; 1
    3fd0:	a2 17       	cp	r26, r18
    3fd2:	b3 07       	cpc	r27, r19
    3fd4:	38 f3       	brcs	.-50     	; 0x3fa4 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	df 90       	pop	r13
    3fe2:	cf 90       	pop	r12
    3fe4:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00005e20 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    5e20:	cf 93       	push	r28
    5e22:	df 93       	push	r29
    5e24:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    5e26:	20 e0       	ldi	r18, 0x00	; 0
    5e28:	30 e0       	ldi	r19, 0x00	; 0
    5e2a:	0c c0       	rjmp	.+24     	; 0x5e44 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    5e2c:	de 01       	movw	r26, r28
    5e2e:	a2 0f       	add	r26, r18
    5e30:	b3 1f       	adc	r27, r19
    5e32:	f9 01       	movw	r30, r18
    5e34:	e6 0f       	add	r30, r22
    5e36:	f7 1f       	adc	r31, r23
    5e38:	e0 54       	subi	r30, 0x40	; 64
    5e3a:	fc 4f       	sbci	r31, 0xFC	; 252
    5e3c:	90 81       	ld	r25, Z
    5e3e:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    5e40:	2f 5f       	subi	r18, 0xFF	; 255
    5e42:	3f 4f       	sbci	r19, 0xFF	; 255
    5e44:	24 17       	cp	r18, r20
    5e46:	35 07       	cpc	r19, r21
    5e48:	88 f3       	brcs	.-30     	; 0x5e2c <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    5e4a:	df 91       	pop	r29
    5e4c:	cf 91       	pop	r28
    5e4e:	08 95       	ret

Disassembly of section .text.add_data_types:

000032c0 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    32c0:	cf 92       	push	r12
    32c2:	df 92       	push	r13
    32c4:	ef 92       	push	r14
    32c6:	ff 92       	push	r15
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	dc 01       	movw	r26, r24
    32d2:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    32d8:	c1 2c       	mov	r12, r1
    32da:	d1 2c       	mov	r13, r1
    32dc:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    32de:	4a c0       	rjmp	.+148    	; 0x3374 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    32e0:	29 2f       	mov	r18, r25
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	f9 01       	movw	r30, r18
    32e6:	ee 0f       	add	r30, r30
    32e8:	ff 1f       	adc	r31, r31
    32ea:	22 0f       	add	r18, r18
    32ec:	33 1f       	adc	r19, r19
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	22 0f       	add	r18, r18
    32f4:	33 1f       	adc	r19, r19
    32f6:	e2 0f       	add	r30, r18
    32f8:	f3 1f       	adc	r31, r19
    32fa:	ea 0f       	add	r30, r26
    32fc:	fb 1f       	adc	r31, r27
    32fe:	27 81       	ldd	r18, Z+7	; 0x07
    3300:	22 30       	cpi	r18, 0x02	; 2
    3302:	a9 f0       	breq	.+42     	; 0x332e <add_data_types+0x6e>
    3304:	24 30       	cpi	r18, 0x04	; 4
    3306:	21 f1       	breq	.+72     	; 0x3350 <add_data_types+0x90>
    3308:	21 30       	cpi	r18, 0x01	; 1
    330a:	91 f5       	brne	.+100    	; 0x3370 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    330c:	01 e0       	ldi	r16, 0x01	; 1
    330e:	10 e0       	ldi	r17, 0x00	; 0
    3310:	04 2e       	mov	r0, r20
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <add_data_types+0x58>
    3314:	00 0f       	add	r16, r16
    3316:	11 1f       	adc	r17, r17
    3318:	0a 94       	dec	r0
    331a:	e2 f7       	brpl	.-8      	; 0x3314 <add_data_types+0x54>
    331c:	01 2e       	mov	r0, r17
    331e:	00 0c       	add	r0, r0
    3320:	22 0b       	sbc	r18, r18
    3322:	33 0b       	sbc	r19, r19
    3324:	c0 2a       	or	r12, r16
    3326:	d1 2a       	or	r13, r17
    3328:	e2 2a       	or	r14, r18
    332a:	f3 2a       	or	r15, r19
                break;
    332c:	21 c0       	rjmp	.+66     	; 0x3370 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    332e:	02 e0       	ldi	r16, 0x02	; 2
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	04 2e       	mov	r0, r20
    3334:	02 c0       	rjmp	.+4      	; 0x333a <add_data_types+0x7a>
    3336:	00 0f       	add	r16, r16
    3338:	11 1f       	adc	r17, r17
    333a:	0a 94       	dec	r0
    333c:	e2 f7       	brpl	.-8      	; 0x3336 <add_data_types+0x76>
    333e:	01 2e       	mov	r0, r17
    3340:	00 0c       	add	r0, r0
    3342:	22 0b       	sbc	r18, r18
    3344:	33 0b       	sbc	r19, r19
    3346:	c0 2a       	or	r12, r16
    3348:	d1 2a       	or	r13, r17
    334a:	e2 2a       	or	r14, r18
    334c:	f3 2a       	or	r15, r19
                break;
    334e:	10 c0       	rjmp	.+32     	; 0x3370 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    3350:	03 e0       	ldi	r16, 0x03	; 3
    3352:	10 e0       	ldi	r17, 0x00	; 0
    3354:	04 2e       	mov	r0, r20
    3356:	02 c0       	rjmp	.+4      	; 0x335c <add_data_types+0x9c>
    3358:	00 0f       	add	r16, r16
    335a:	11 1f       	adc	r17, r17
    335c:	0a 94       	dec	r0
    335e:	e2 f7       	brpl	.-8      	; 0x3358 <add_data_types+0x98>
    3360:	01 2e       	mov	r0, r17
    3362:	00 0c       	add	r0, r0
    3364:	22 0b       	sbc	r18, r18
    3366:	33 0b       	sbc	r19, r19
    3368:	c0 2a       	or	r12, r16
    336a:	d1 2a       	or	r13, r17
    336c:	e2 2a       	or	r14, r18
    336e:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    3370:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    3372:	9f 5f       	subi	r25, 0xFF	; 255
    3374:	12 96       	adiw	r26, 0x02	; 2
    3376:	8c 91       	ld	r24, X
    3378:	12 97       	sbiw	r26, 0x02	; 2
    337a:	98 17       	cp	r25, r24
    337c:	08 f4       	brcc	.+2      	; 0x3380 <add_data_types+0xc0>
    337e:	b0 cf       	rjmp	.-160    	; 0x32e0 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    3380:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    3382:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    3384:	cd 82       	std	Y+5, r12	; 0x05
} 
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	df 90       	pop	r13
    3394:	cf 90       	pop	r12
    3396:	08 95       	ret

Disassembly of section .text.update_bodies:

00002286 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    2286:	cf 93       	push	r28
    2288:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    228a:	26 2f       	mov	r18, r22
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	c9 01       	movw	r24, r18
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f9 01       	movw	r30, r18
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	22 0f       	add	r18, r18
    229a:	33 1f       	adc	r19, r19
    229c:	22 0f       	add	r18, r18
    229e:	33 1f       	adc	r19, r19
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	ea 0f       	add	r30, r26
    22aa:	fb 1f       	adc	r31, r27
    22ac:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    22ae:	c0 e0       	ldi	r28, 0x00	; 0
    22b0:	25 c0       	rjmp	.+74     	; 0x22fc <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    22b2:	82 17       	cp	r24, r18
    22b4:	93 07       	cpc	r25, r19
    22b6:	09 f1       	breq	.+66     	; 0x22fa <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    22b8:	a9 01       	movw	r20, r18
    22ba:	44 0f       	add	r20, r20
    22bc:	55 1f       	adc	r21, r21
    22be:	44 0f       	add	r20, r20
    22c0:	55 1f       	adc	r21, r21
    22c2:	44 0f       	add	r20, r20
    22c4:	55 1f       	adc	r21, r21
    22c6:	f9 01       	movw	r30, r18
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	e4 0f       	add	r30, r20
    22ce:	f5 1f       	adc	r31, r21
    22d0:	ea 0f       	add	r30, r26
    22d2:	fb 1f       	adc	r31, r27
    22d4:	43 85       	ldd	r20, Z+11	; 0x0b
    22d6:	74 13       	cpse	r23, r20
    22d8:	10 c0       	rjmp	.+32     	; 0x22fa <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    22da:	f9 01       	movw	r30, r18
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	22 0f       	add	r18, r18
    22ea:	33 1f       	adc	r19, r19
    22ec:	e2 0f       	add	r30, r18
    22ee:	f3 1f       	adc	r31, r19
    22f0:	ea 0f       	add	r30, r26
    22f2:	fb 1f       	adc	r31, r27
    22f4:	24 85       	ldd	r18, Z+12	; 0x0c
    22f6:	23 30       	cpi	r18, 0x03	; 3
    22f8:	41 f4       	brne	.+16     	; 0x230a <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    22fa:	cf 5f       	subi	r28, 0xFF	; 255
    22fc:	2c 2f       	mov	r18, r28
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	28 17       	cp	r18, r24
    2302:	39 07       	cpc	r19, r25
    2304:	b4 f2       	brlt	.-84     	; 0x22b2 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    2306:	21 e0       	ldi	r18, 0x01	; 1
    2308:	01 c0       	rjmp	.+2      	; 0x230c <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    230a:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    230c:	22 23       	and	r18, r18
    230e:	39 f0       	breq	.+14     	; 0x231e <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    2310:	fd 01       	movw	r30, r26
    2312:	e7 0f       	add	r30, r23
    2314:	f1 1d       	adc	r31, r1
    2316:	e4 58       	subi	r30, 0x84	; 132
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    231e:	9c 01       	movw	r18, r24
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	fc 01       	movw	r30, r24
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	ea 0f       	add	r30, r26
    2338:	fb 1f       	adc	r31, r27
    233a:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    233c:	29 c0       	rjmp	.+82     	; 0x2390 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    233e:	46 2f       	mov	r20, r22
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	84 17       	cp	r24, r20
    2344:	95 07       	cpc	r25, r21
    2346:	19 f1       	breq	.+70     	; 0x238e <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    2348:	9a 01       	movw	r18, r20
    234a:	2f 5f       	subi	r18, 0xFF	; 255
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	f9 01       	movw	r30, r18
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	ea 0f       	add	r30, r26
    2366:	fb 1f       	adc	r31, r27
    2368:	20 81       	ld	r18, Z
    236a:	c2 13       	cpse	r28, r18
    236c:	10 c0       	rjmp	.+32     	; 0x238e <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    236e:	fa 01       	movw	r30, r20
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	44 0f       	add	r20, r20
    2376:	55 1f       	adc	r21, r21
    2378:	44 0f       	add	r20, r20
    237a:	55 1f       	adc	r21, r21
    237c:	44 0f       	add	r20, r20
    237e:	55 1f       	adc	r21, r21
    2380:	e4 0f       	add	r30, r20
    2382:	f5 1f       	adc	r31, r21
    2384:	ea 0f       	add	r30, r26
    2386:	fb 1f       	adc	r31, r27
    2388:	24 85       	ldd	r18, Z+12	; 0x0c
    238a:	23 30       	cpi	r18, 0x03	; 3
    238c:	41 f4       	brne	.+16     	; 0x239e <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    238e:	6f 5f       	subi	r22, 0xFF	; 255
    2390:	12 96       	adiw	r26, 0x02	; 2
    2392:	2c 91       	ld	r18, X
    2394:	12 97       	sbiw	r26, 0x02	; 2
    2396:	62 17       	cp	r22, r18
    2398:	90 f2       	brcs	.-92     	; 0x233e <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    239e:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    23a0:	88 23       	and	r24, r24
    23a2:	41 f0       	breq	.+16     	; 0x23b4 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    23a4:	fd 01       	movw	r30, r26
    23a6:	ec 0f       	add	r30, r28
    23a8:	f1 1d       	adc	r31, r1
    23aa:	e4 58       	subi	r30, 0x84	; 132
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	80 83       	st	Z, r24
    23b2:	06 c0       	rjmp	.+12     	; 0x23c0 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    23b4:	fd 01       	movw	r30, r26
    23b6:	ec 0f       	add	r30, r28
    23b8:	f1 1d       	adc	r31, r1
    23ba:	e4 58       	subi	r30, 0x84	; 132
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    23c0:	8c 2f       	mov	r24, r28
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	87 1b       	sub	r24, r23
    23c6:	91 09       	sbc	r25, r1
    23c8:	02 97       	sbiw	r24, 0x02	; 2
    23ca:	64 f0       	brlt	.+24     	; 0x23e4 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    23cc:	7f 5f       	subi	r23, 0xFF	; 255
    23ce:	08 c0       	rjmp	.+16     	; 0x23e0 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    23d0:	fd 01       	movw	r30, r26
    23d2:	e7 0f       	add	r30, r23
    23d4:	f1 1d       	adc	r31, r1
    23d6:	e4 58       	subi	r30, 0x84	; 132
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    23de:	7f 5f       	subi	r23, 0xFF	; 255
    23e0:	7c 17       	cp	r23, r28
    23e2:	b0 f3       	brcs	.-20     	; 0x23d0 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00001db2 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	ec 01       	movw	r28, r24
    1dc8:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    1dca:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    1dcc:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1dce:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    1dd0:	00 e0       	ldi	r16, 0x00	; 0
    1dd2:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    1dd4:	8f c0       	rjmp	.+286    	; 0x1ef4 <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    1dd6:	ed 2d       	mov	r30, r13
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	cf 01       	movw	r24, r30
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	8e 0f       	add	r24, r30
    1de6:	9f 1f       	adc	r25, r31
    1de8:	84 0f       	add	r24, r20
    1dea:	95 1f       	adc	r25, r21
    1dec:	dc 01       	movw	r26, r24
    1dee:	12 96       	adiw	r26, 0x02	; 2
    1df0:	6d 91       	ld	r22, X+
    1df2:	7c 91       	ld	r23, X
    1df4:	13 97       	sbiw	r26, 0x03	; 3
    1df6:	df 01       	movw	r26, r30
    1df8:	aa 0f       	add	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	9f 01       	movw	r18, r30
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	a2 0f       	add	r26, r18
    1e0c:	b3 1f       	adc	r27, r19
    1e0e:	5d 01       	movw	r10, r26
    1e10:	ac 0e       	add	r10, r28
    1e12:	bd 1e       	adc	r11, r29
    1e14:	d5 01       	movw	r26, r10
    1e16:	19 96       	adiw	r26, 0x09	; 9
    1e18:	7c 93       	st	X, r23
    1e1a:	6e 93       	st	-X, r22
    1e1c:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    1e1e:	dc 01       	movw	r26, r24
    1e20:	14 96       	adiw	r26, 0x04	; 4
    1e22:	2c 91       	ld	r18, X
    1e24:	d5 01       	movw	r26, r10
    1e26:	17 96       	adiw	r26, 0x07	; 7
    1e28:	2c 93       	st	X, r18
    1e2a:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1e2c:	14 96       	adiw	r26, 0x04	; 4
    1e2e:	1c 93       	st	X, r17
    1e30:	0e 93       	st	-X, r16
    1e32:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    1e34:	dc 01       	movw	r26, r24
    1e36:	2d 91       	ld	r18, X+
    1e38:	3c 91       	ld	r19, X
    1e3a:	11 97       	sbiw	r26, 0x01	; 1
    1e3c:	14 96       	adiw	r26, 0x04	; 4
    1e3e:	8c 91       	ld	r24, X
    1e40:	82 9f       	mul	r24, r18
    1e42:	70 01       	movw	r14, r0
    1e44:	83 9f       	mul	r24, r19
    1e46:	f0 0c       	add	r15, r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	b6 e0       	ldi	r27, 0x06	; 6
    1e4c:	eb 0e       	add	r14, r27
    1e4e:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    1e50:	d5 01       	movw	r26, r10
    1e52:	16 96       	adiw	r26, 0x06	; 6
    1e54:	fc 92       	st	X, r15
    1e56:	ee 92       	st	-X, r14
    1e58:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    1e5a:	98 01       	movw	r18, r16
    1e5c:	ab ea       	ldi	r26, 0xAB	; 171
    1e5e:	ba ea       	ldi	r27, 0xAA	; 170
    1e60:	0e 94 8e 31 	call	0x631c	; 0x631c <__umulhisi3>
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	92 95       	swap	r25
    1e6a:	82 95       	swap	r24
    1e6c:	8f 70       	andi	r24, 0x0F	; 15
    1e6e:	89 27       	eor	r24, r25
    1e70:	9f 70       	andi	r25, 0x0F	; 15
    1e72:	89 27       	eor	r24, r25
    1e74:	9f 01       	movw	r18, r30
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	d9 01       	movw	r26, r18
    1e7c:	aa 0f       	add	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	22 0f       	add	r18, r18
    1e86:	33 1f       	adc	r19, r19
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	a2 0f       	add	r26, r18
    1e8e:	b3 1f       	adc	r27, r19
    1e90:	ac 0f       	add	r26, r28
    1e92:	bd 1f       	adc	r27, r29
    1e94:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    1e96:	0e 0d       	add	r16, r14
    1e98:	1f 1d       	adc	r17, r15
    1e9a:	98 01       	movw	r18, r16
    1e9c:	ab ea       	ldi	r26, 0xAB	; 171
    1e9e:	ba ea       	ldi	r27, 0xAA	; 170
    1ea0:	0e 94 8e 31 	call	0x631c	; 0x631c <__umulhisi3>
    1ea4:	7c 01       	movw	r14, r24
    1ea6:	f6 94       	lsr	r15
    1ea8:	e7 94       	ror	r14
    1eaa:	f6 94       	lsr	r15
    1eac:	e7 94       	ror	r14
    1eae:	f6 94       	lsr	r15
    1eb0:	e7 94       	ror	r14
    1eb2:	f6 94       	lsr	r15
    1eb4:	e7 94       	ror	r14
    1eb6:	f6 94       	lsr	r15
    1eb8:	e7 94       	ror	r14
    1eba:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    1ebc:	20 e3       	ldi	r18, 0x30	; 48
    1ebe:	2e 9d       	mul	r18, r14
    1ec0:	c0 01       	movw	r24, r0
    1ec2:	2f 9d       	mul	r18, r15
    1ec4:	90 0d       	add	r25, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	08 17       	cp	r16, r24
    1eca:	19 07       	cpc	r17, r25
    1ecc:	19 f4       	brne	.+6      	; 0x1ed4 <mrpp_state_init+0x122>
    1ece:	bb 24       	eor	r11, r11
    1ed0:	ba 94       	dec	r11
    1ed2:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	e8 0f       	add	r30, r24
    1ee8:	f9 1f       	adc	r31, r25
    1eea:	ec 0f       	add	r30, r28
    1eec:	fd 1f       	adc	r31, r29
    1eee:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    1ef0:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1ef2:	d3 94       	inc	r13
    1ef4:	dc 14       	cp	r13, r12
    1ef6:	08 f4       	brcc	.+2      	; 0x1efa <mrpp_state_init+0x148>
    1ef8:	6e cf       	rjmp	.-292    	; 0x1dd6 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    1efa:	98 01       	movw	r18, r16
    1efc:	ab ea       	ldi	r26, 0xAB	; 171
    1efe:	ba ea       	ldi	r27, 0xAA	; 170
    1f00:	0e 94 8e 31 	call	0x631c	; 0x631c <__umulhisi3>
    1f04:	fc 01       	movw	r30, r24
    1f06:	f6 95       	lsr	r31
    1f08:	e7 95       	ror	r30
    1f0a:	f2 95       	swap	r31
    1f0c:	e2 95       	swap	r30
    1f0e:	ef 70       	andi	r30, 0x0F	; 15
    1f10:	ef 27       	eor	r30, r31
    1f12:	ff 70       	andi	r31, 0x0F	; 15
    1f14:	ef 27       	eor	r30, r31
    1f16:	4e 2f       	mov	r20, r30
    1f18:	52 e0       	ldi	r21, 0x02	; 2
    1f1a:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    1f1c:	20 e3       	ldi	r18, 0x30	; 48
    1f1e:	2e 9f       	mul	r18, r30
    1f20:	c0 01       	movw	r24, r0
    1f22:	2f 9f       	mul	r18, r31
    1f24:	90 0d       	add	r25, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	08 1b       	sub	r16, r24
    1f2a:	19 0b       	sbc	r17, r25
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <mrpp_state_init+0x180>
    1f2e:	51 e0       	ldi	r21, 0x01	; 1
    1f30:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    1f32:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    1f34:	01 2b       	or	r16, r17
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <mrpp_state_init+0x18a>
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e5 58       	subi	r30, 0x85	; 133
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e8 0f       	add	r30, r24
    1f4c:	f1 1d       	adc	r31, r1
    1f4e:	e4 58       	subi	r30, 0x84	; 132
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	84 17       	cp	r24, r20
    1f58:	b8 f3       	brcs	.-18     	; 0x1f48 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003c4e <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3c4e:	0f 93       	push	r16
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	8c 01       	movw	r16, r24
    3c58:	eb 01       	movw	r28, r22
    package[0]=0;
    3c5a:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	81 81       	ldd	r24, Z+1	; 0x01
    3c60:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3c62:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 60 19 	call	0x32c0	; 0x32c0 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	35 c0       	rjmp	.+106    	; 0x3cd8 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3c6e:	82 2f       	mov	r24, r18
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	dc 01       	movw	r26, r24
    3c74:	aa 0f       	add	r26, r26
    3c76:	bb 1f       	adc	r27, r27
    3c78:	aa 0f       	add	r26, r26
    3c7a:	bb 1f       	adc	r27, r27
    3c7c:	ad 01       	movw	r20, r26
    3c7e:	4a 5f       	subi	r20, 0xFA	; 250
    3c80:	5f 4f       	sbci	r21, 0xFF	; 255
    3c82:	4c 0f       	add	r20, r28
    3c84:	5d 1f       	adc	r21, r29
    3c86:	fc 01       	movw	r30, r24
    3c88:	ee 0f       	add	r30, r30
    3c8a:	ff 1f       	adc	r31, r31
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	88 0f       	add	r24, r24
    3c96:	99 1f       	adc	r25, r25
    3c98:	e8 0f       	add	r30, r24
    3c9a:	f9 1f       	adc	r31, r25
    3c9c:	bf 01       	movw	r22, r30
    3c9e:	60 0f       	add	r22, r16
    3ca0:	71 1f       	adc	r23, r17
    3ca2:	fb 01       	movw	r30, r22
    3ca4:	84 81       	ldd	r24, Z+4	; 0x04
    3ca6:	fa 01       	movw	r30, r20
    3ca8:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3caa:	cd 01       	movw	r24, r26
    3cac:	07 96       	adiw	r24, 0x07	; 7
    3cae:	8c 0f       	add	r24, r28
    3cb0:	9d 1f       	adc	r25, r29
    3cb2:	fb 01       	movw	r30, r22
    3cb4:	33 81       	ldd	r19, Z+3	; 0x03
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3cba:	cd 01       	movw	r24, r26
    3cbc:	08 96       	adiw	r24, 0x08	; 8
    3cbe:	8c 0f       	add	r24, r28
    3cc0:	9d 1f       	adc	r25, r29
    3cc2:	fb 01       	movw	r30, r22
    3cc4:	36 81       	ldd	r19, Z+6	; 0x06
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3cca:	19 96       	adiw	r26, 0x09	; 9
    3ccc:	ac 0f       	add	r26, r28
    3cce:	bd 1f       	adc	r27, r29
    3cd0:	fb 01       	movw	r30, r22
    3cd2:	85 81       	ldd	r24, Z+5	; 0x05
    3cd4:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3cd6:	2f 5f       	subi	r18, 0xFF	; 255
    3cd8:	f8 01       	movw	r30, r16
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	28 17       	cp	r18, r24
    3cde:	38 f2       	brcs	.-114    	; 0x3c6e <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3ce0:	88 0f       	add	r24, r24
    3ce2:	88 0f       	add	r24, r24
}
    3ce4:	8a 5f       	subi	r24, 0xFA	; 250
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00003a62 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    3a62:	0f 93       	push	r16
    3a64:	1f 93       	push	r17
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	8c 01       	movw	r16, r24
    3a6c:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    3a6e:	fc 01       	movw	r30, r24
    3a70:	81 81       	ldd	r24, Z+1	; 0x01
    3a72:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    3a74:	81 81       	ldd	r24, Z+1	; 0x01
    3a76:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3a78:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	35 c0       	rjmp	.+106    	; 0x3aee <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3a84:	82 2f       	mov	r24, r18
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	dc 01       	movw	r26, r24
    3a8a:	aa 0f       	add	r26, r26
    3a8c:	bb 1f       	adc	r27, r27
    3a8e:	aa 0f       	add	r26, r26
    3a90:	bb 1f       	adc	r27, r27
    3a92:	ad 01       	movw	r20, r26
    3a94:	4a 5f       	subi	r20, 0xFA	; 250
    3a96:	5f 4f       	sbci	r21, 0xFF	; 255
    3a98:	4c 0f       	add	r20, r28
    3a9a:	5d 1f       	adc	r21, r29
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	ee 0f       	add	r30, r30
    3aa0:	ff 1f       	adc	r31, r31
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	88 0f       	add	r24, r24
    3aac:	99 1f       	adc	r25, r25
    3aae:	e8 0f       	add	r30, r24
    3ab0:	f9 1f       	adc	r31, r25
    3ab2:	bf 01       	movw	r22, r30
    3ab4:	60 0f       	add	r22, r16
    3ab6:	71 1f       	adc	r23, r17
    3ab8:	fb 01       	movw	r30, r22
    3aba:	84 81       	ldd	r24, Z+4	; 0x04
    3abc:	fa 01       	movw	r30, r20
    3abe:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3ac0:	cd 01       	movw	r24, r26
    3ac2:	07 96       	adiw	r24, 0x07	; 7
    3ac4:	8c 0f       	add	r24, r28
    3ac6:	9d 1f       	adc	r25, r29
    3ac8:	fb 01       	movw	r30, r22
    3aca:	33 81       	ldd	r19, Z+3	; 0x03
    3acc:	fc 01       	movw	r30, r24
    3ace:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	08 96       	adiw	r24, 0x08	; 8
    3ad4:	8c 0f       	add	r24, r28
    3ad6:	9d 1f       	adc	r25, r29
    3ad8:	fb 01       	movw	r30, r22
    3ada:	36 81       	ldd	r19, Z+6	; 0x06
    3adc:	fc 01       	movw	r30, r24
    3ade:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3ae0:	19 96       	adiw	r26, 0x09	; 9
    3ae2:	ac 0f       	add	r26, r28
    3ae4:	bd 1f       	adc	r27, r29
    3ae6:	fb 01       	movw	r30, r22
    3ae8:	85 81       	ldd	r24, Z+5	; 0x05
    3aea:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3aec:	2f 5f       	subi	r18, 0xFF	; 255
    3aee:	f8 01       	movw	r30, r16
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	28 17       	cp	r18, r24
    3af4:	38 f2       	brcs	.-114    	; 0x3a84 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3af6:	88 0f       	add	r24, r24
    3af8:	88 0f       	add	r24, r24
}
    3afa:	8a 5f       	subi	r24, 0xFA	; 250
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00004102 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    410c:	a6 2f       	mov	r26, r22
    410e:	b0 e0       	ldi	r27, 0x00	; 0
    4110:	11 97       	sbiw	r26, 0x01	; 1
    4112:	fd 01       	movw	r30, r26
    4114:	ee 0f       	add	r30, r30
    4116:	ff 1f       	adc	r31, r31
    4118:	cd 01       	movw	r24, r26
    411a:	88 0f       	add	r24, r24
    411c:	99 1f       	adc	r25, r25
    411e:	88 0f       	add	r24, r24
    4120:	99 1f       	adc	r25, r25
    4122:	88 0f       	add	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	e8 0f       	add	r30, r24
    4128:	f9 1f       	adc	r31, r25
    412a:	e0 0f       	add	r30, r16
    412c:	f1 1f       	adc	r31, r17
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0a c0       	rjmp	.+20     	; 0x414a <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    4136:	e9 2f       	mov	r30, r25
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	e9 01       	movw	r28, r18
    413c:	ce 0f       	add	r28, r30
    413e:	df 1f       	adc	r29, r31
    4140:	e4 0f       	add	r30, r20
    4142:	f5 1f       	adc	r31, r21
    4144:	80 81       	ld	r24, Z
    4146:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4148:	9f 5f       	subi	r25, 0xFF	; 255
    414a:	94 30       	cpi	r25, 0x04	; 4
    414c:	a0 f3       	brcs	.-24     	; 0x4136 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    414e:	cd 01       	movw	r24, r26
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	aa 0f       	add	r26, r26
    4156:	bb 1f       	adc	r27, r27
    4158:	aa 0f       	add	r26, r26
    415a:	bb 1f       	adc	r27, r27
    415c:	aa 0f       	add	r26, r26
    415e:	bb 1f       	adc	r27, r27
    4160:	a8 0f       	add	r26, r24
    4162:	b9 1f       	adc	r27, r25
    4164:	a0 0f       	add	r26, r16
    4166:	b1 1f       	adc	r27, r17
    4168:	19 96       	adiw	r26, 0x09	; 9
    416a:	8c 91       	ld	r24, X
    416c:	19 97       	sbiw	r26, 0x09	; 9
    416e:	f9 01       	movw	r30, r18
    4170:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    4172:	18 96       	adiw	r26, 0x08	; 8
    4174:	8c 91       	ld	r24, X
    4176:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    4178:	c8 01       	movw	r24, r16
    417a:	0e 94 43 11 	call	0x2286	; 0x2286 <update_bodies>
}
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00005e50 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    5e50:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	0b c0       	rjmp	.+22     	; 0x5e6c <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    5e56:	29 2f       	mov	r18, r25
    5e58:	30 e0       	ldi	r19, 0x00	; 0
    5e5a:	fa 01       	movw	r30, r20
    5e5c:	e2 0f       	add	r30, r18
    5e5e:	f3 1f       	adc	r31, r19
    5e60:	e4 58       	subi	r30, 0x84	; 132
    5e62:	ff 4f       	sbci	r31, 0xFF	; 255
    5e64:	80 81       	ld	r24, Z
    5e66:	81 30       	cpi	r24, 0x01	; 1
    5e68:	49 f0       	breq	.+18     	; 0x5e7c <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5e6a:	9f 5f       	subi	r25, 0xFF	; 255
    5e6c:	fa 01       	movw	r30, r20
    5e6e:	e5 58       	subi	r30, 0x85	; 133
    5e70:	ff 4f       	sbci	r31, 0xFF	; 255
    5e72:	80 81       	ld	r24, Z
    5e74:	98 17       	cp	r25, r24
    5e76:	78 f3       	brcs	.-34     	; 0x5e56 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5e78:	2f ef       	ldi	r18, 0xFF	; 255
    5e7a:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    5e7c:	c9 01       	movw	r24, r18
    5e7e:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00005fc4 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    5fc4:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    5fc8:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    5fca:	0a c0       	rjmp	.+20     	; 0x5fe0 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    5fcc:	f9 01       	movw	r30, r18
    5fce:	e9 0f       	add	r30, r25
    5fd0:	f1 1d       	adc	r31, r1
    5fd2:	e4 58       	subi	r30, 0x84	; 132
    5fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd6:	40 81       	ld	r20, Z
    5fd8:	42 30       	cpi	r20, 0x02	; 2
    5fda:	09 f0       	breq	.+2      	; 0x5fde <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    5fdc:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5fde:	9f 5f       	subi	r25, 0xFF	; 255
    5fe0:	f9 01       	movw	r30, r18
    5fe2:	e5 58       	subi	r30, 0x85	; 133
    5fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe6:	40 81       	ld	r20, Z
    5fe8:	94 17       	cp	r25, r20
    5fea:	80 f3       	brcs	.-32     	; 0x5fcc <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    5fec:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000028b4 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    28b4:	8f 92       	push	r8
    28b6:	9f 92       	push	r9
    28b8:	af 92       	push	r10
    28ba:	bf 92       	push	r11
    28bc:	cf 92       	push	r12
    28be:	df 92       	push	r13
    28c0:	ef 92       	push	r14
    28c2:	ff 92       	push	r15
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	ec 01       	movw	r28, r24
    28ce:	6b 01       	movw	r12, r22
    28d0:	4a 01       	movw	r8, r20
    28d2:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    28d4:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    28d8:	8f 3f       	cpi	r24, 0xFF	; 255
    28da:	2f ef       	ldi	r18, 0xFF	; 255
    28dc:	92 07       	cpc	r25, r18
    28de:	09 f4       	brne	.+2      	; 0x28e2 <mrpp_state_get_ready_body+0x2e>
    28e0:	66 c0       	rjmp	.+204    	; 0x29ae <mrpp_state_get_ready_body+0xfa>
    28e2:	8c 15       	cp	r24, r12
    28e4:	9d 05       	cpc	r25, r13
    28e6:	09 f0       	breq	.+2      	; 0x28ea <mrpp_state_get_ready_body+0x36>
    28e8:	64 c0       	rjmp	.+200    	; 0x29b2 <mrpp_state_get_ready_body+0xfe>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	09 c0       	rjmp	.+18     	; 0x2900 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    28ee:	fe 01       	movw	r30, r28
    28f0:	e8 0f       	add	r30, r24
    28f2:	f1 1d       	adc	r31, r1
    28f4:	e4 58       	subi	r30, 0x84	; 132
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	90 81       	ld	r25, Z
    28fa:	91 30       	cpi	r25, 0x01	; 1
    28fc:	41 f0       	breq	.+16     	; 0x290e <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e5 58       	subi	r30, 0x85	; 133
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	90 81       	ld	r25, Z
    2908:	89 17       	cp	r24, r25
    290a:	88 f3       	brcs	.-30     	; 0x28ee <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    290c:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	98 0f       	add	r25, r24
    2912:	f4 01       	movw	r30, r8
    2914:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    2916:	99 81       	ldd	r25, Y+1	; 0x01
    2918:	f5 01       	movw	r30, r10
    291a:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	40 e3       	ldi	r20, 0x30	; 48
    2920:	48 9f       	mul	r20, r24
    2922:	90 01       	movw	r18, r0
    2924:	49 9f       	mul	r20, r25
    2926:	30 0d       	add	r19, r0
    2928:	11 24       	eor	r1, r1
    292a:	f8 01       	movw	r30, r16
    292c:	31 83       	std	Z+1, r19	; 0x01
    292e:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    2930:	fe 01       	movw	r30, r28
    2932:	e5 58       	subi	r30, 0x85	; 133
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	20 81       	ld	r18, Z
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	21 50       	subi	r18, 0x01	; 1
    293c:	31 09       	sbc	r19, r1
    293e:	82 17       	cp	r24, r18
    2940:	93 07       	cpc	r25, r19
    2942:	2c f4       	brge	.+10     	; 0x294e <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    2944:	80 e3       	ldi	r24, 0x30	; 48
    2946:	f7 01       	movw	r30, r14
    2948:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	33 c0       	rjmp	.+102    	; 0x29b4 <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	9c 01       	movw	r18, r24
    2956:	22 0f       	add	r18, r18
    2958:	33 1f       	adc	r19, r19
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	82 0f       	add	r24, r18
    2968:	93 1f       	adc	r25, r19
    296a:	c8 0f       	add	r28, r24
    296c:	d9 1f       	adc	r29, r25
    296e:	4b 81       	ldd	r20, Y+3	; 0x03
    2970:	5c 81       	ldd	r21, Y+4	; 0x04
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	48 0f       	add	r20, r24
    2978:	59 1f       	adc	r21, r25
    297a:	9a 01       	movw	r18, r20
    297c:	ab ea       	ldi	r26, 0xAB	; 171
    297e:	ba ea       	ldi	r27, 0xAA	; 170
    2980:	0e 94 8e 31 	call	0x631c	; 0x631c <__umulhisi3>
    2984:	96 95       	lsr	r25
    2986:	87 95       	ror	r24
    2988:	92 95       	swap	r25
    298a:	82 95       	swap	r24
    298c:	8f 70       	andi	r24, 0x0F	; 15
    298e:	89 27       	eor	r24, r25
    2990:	9f 70       	andi	r25, 0x0F	; 15
    2992:	89 27       	eor	r24, r25
    2994:	60 e3       	ldi	r22, 0x30	; 48
    2996:	68 9f       	mul	r22, r24
    2998:	90 01       	movw	r18, r0
    299a:	69 9f       	mul	r22, r25
    299c:	30 0d       	add	r19, r0
    299e:	11 24       	eor	r1, r1
    29a0:	ca 01       	movw	r24, r20
    29a2:	82 1b       	sub	r24, r18
    29a4:	93 0b       	sbc	r25, r19
    29a6:	f7 01       	movw	r30, r14
    29a8:	80 83       	st	Z, r24
    } 
    return true; 
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	03 c0       	rjmp	.+6      	; 0x29b4 <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	01 c0       	rjmp	.+2      	; 0x29b4 <mrpp_state_get_ready_body+0x100>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	bf 90       	pop	r11
    29c6:	af 90       	pop	r10
    29c8:	9f 90       	pop	r9
    29ca:	8f 90       	pop	r8
    29cc:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006246 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6246:	fc 01       	movw	r30, r24
    6248:	e5 58       	subi	r30, 0x85	; 133
    624a:	ff 4f       	sbci	r31, 0xFF	; 255
    624c:	20 81       	ld	r18, Z
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	62 17       	cp	r22, r18
    6252:	73 07       	cpc	r23, r19
    6254:	3c f4       	brge	.+14     	; 0x6264 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6256:	68 0f       	add	r22, r24
    6258:	79 1f       	adc	r23, r25
    625a:	fb 01       	movw	r30, r22
    625c:	e4 58       	subi	r30, 0x84	; 132
    625e:	ff 4f       	sbci	r31, 0xFF	; 255
    6260:	82 e0       	ldi	r24, 0x02	; 2
    6262:	80 83       	st	Z, r24
    6264:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00005af4 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    5af4:	70 e0       	ldi	r23, 0x00	; 0
    5af6:	61 50       	subi	r22, 0x01	; 1
    5af8:	71 09       	sbc	r23, r1
    5afa:	fb 01       	movw	r30, r22
    5afc:	ee 0f       	add	r30, r30
    5afe:	ff 1f       	adc	r31, r31
    5b00:	66 0f       	add	r22, r22
    5b02:	77 1f       	adc	r23, r23
    5b04:	66 0f       	add	r22, r22
    5b06:	77 1f       	adc	r23, r23
    5b08:	66 0f       	add	r22, r22
    5b0a:	77 1f       	adc	r23, r23
    5b0c:	e6 0f       	add	r30, r22
    5b0e:	f7 1f       	adc	r31, r23
    5b10:	e8 0f       	add	r30, r24
    5b12:	f9 1f       	adc	r31, r25
    5b14:	83 81       	ldd	r24, Z+3	; 0x03
    5b16:	94 81       	ldd	r25, Z+4	; 0x04
    5b18:	da 01       	movw	r26, r20
    5b1a:	8d 93       	st	X+, r24
    5b1c:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    5b1e:	85 81       	ldd	r24, Z+5	; 0x05
    5b20:	96 81       	ldd	r25, Z+6	; 0x06
    5b22:	f9 01       	movw	r30, r18
    5b24:	91 83       	std	Z+1, r25	; 0x01
    5b26:	80 83       	st	Z, r24
    5b28:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00005e80 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    5e80:	80 91 87 0f 	lds	r24, 0x0F87	; 0x800f87 <cnt>
    5e84:	90 91 88 0f 	lds	r25, 0x0F88	; 0x800f88 <cnt+0x1>
    5e88:	01 96       	adiw	r24, 0x01	; 1
    5e8a:	90 93 88 0f 	sts	0x0F88, r25	; 0x800f88 <cnt+0x1>
    5e8e:	80 93 87 0f 	sts	0x0F87, r24	; 0x800f87 <cnt>
	if(cnt>=_seconds){
    5e92:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    5e96:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    5e9a:	82 17       	cp	r24, r18
    5e9c:	93 07       	cpc	r25, r19
    5e9e:	38 f0       	brcs	.+14     	; 0x5eae <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    5ea0:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <eventPointer>
    5ea4:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5ea8:	80 e0       	ldi	r24, 0x00	; 0
    5eaa:	0e 94 b8 32 	call	0x6570	; 0x6570 <PM_HAL_BC_power>
    5eae:	08 95       	ret

Disassembly of section .text.PUMP_start:

0000608e <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    608e:	10 92 88 0f 	sts	0x0F88, r1	; 0x800f88 <cnt+0x1>
    6092:	10 92 87 0f 	sts	0x0F87, r1	; 0x800f87 <cnt>
	_seconds=seconds;
    6096:	90 93 8a 0f 	sts	0x0F8A, r25	; 0x800f8a <_seconds+0x1>
    609a:	80 93 89 0f 	sts	0x0F89, r24	; 0x800f89 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    609e:	80 e4       	ldi	r24, 0x40	; 64
    60a0:	9f e2       	ldi	r25, 0x2F	; 47
    60a2:	0e 94 99 26 	call	0x4d32	; 0x4d32 <TC2_HAL_subscribe>
    60a6:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <eventPointer>
	PM_HAL_BC_power(true);
    60aa:	81 e0       	ldi	r24, 0x01	; 1
    60ac:	0e 94 b8 32 	call	0x6570	; 0x6570 <PM_HAL_BC_power>
    60b0:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

000063ac <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    63ac:	40 91 87 0f 	lds	r20, 0x0F87	; 0x800f87 <cnt>
    63b0:	50 91 88 0f 	lds	r21, 0x0F88	; 0x800f88 <cnt+0x1>
    63b4:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    63b8:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	42 17       	cp	r20, r18
    63c0:	53 07       	cpc	r21, r19
    63c2:	08 f4       	brcc	.+2      	; 0x63c6 <PUMP_is_done+0x1a>
    63c4:	80 e0       	ldi	r24, 0x00	; 0
}
    63c6:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00002d0a <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <datetime_to_BCD+0x8>
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <datetime_to_BCD+0xa>
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <datetime_to_BCD+0xc>
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	3d ec       	ldi	r19, 0xCD	; 205
    2d1e:	43 9f       	mul	r20, r19
    2d20:	21 2d       	mov	r18, r1
    2d22:	11 24       	eor	r1, r1
    2d24:	26 95       	lsr	r18
    2d26:	26 95       	lsr	r18
    2d28:	26 95       	lsr	r18
    2d2a:	10 e1       	ldi	r17, 0x10	; 16
    2d2c:	21 9f       	mul	r18, r17
    2d2e:	d0 01       	movw	r26, r0
    2d30:	11 24       	eor	r1, r1
    2d32:	22 0f       	add	r18, r18
    2d34:	b2 2f       	mov	r27, r18
    2d36:	bb 0f       	add	r27, r27
    2d38:	bb 0f       	add	r27, r27
    2d3a:	2b 0f       	add	r18, r27
    2d3c:	42 1b       	sub	r20, r18
    2d3e:	4a 2b       	or	r20, r26
    2d40:	40 83       	st	Z, r20
    2d42:	53 9f       	mul	r21, r19
    2d44:	21 2d       	mov	r18, r1
    2d46:	11 24       	eor	r1, r1
    2d48:	26 95       	lsr	r18
    2d4a:	26 95       	lsr	r18
    2d4c:	26 95       	lsr	r18
    2d4e:	40 e1       	ldi	r20, 0x10	; 16
    2d50:	24 9f       	mul	r18, r20
    2d52:	d0 01       	movw	r26, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	22 0f       	add	r18, r18
    2d58:	42 2f       	mov	r20, r18
    2d5a:	44 0f       	add	r20, r20
    2d5c:	44 0f       	add	r20, r20
    2d5e:	24 0f       	add	r18, r20
    2d60:	52 1b       	sub	r21, r18
    2d62:	5a 2b       	or	r21, r26
    2d64:	51 83       	std	Z+1, r21	; 0x01
    2d66:	63 9f       	mul	r22, r19
    2d68:	41 2d       	mov	r20, r1
    2d6a:	11 24       	eor	r1, r1
    2d6c:	46 95       	lsr	r20
    2d6e:	46 95       	lsr	r20
    2d70:	46 95       	lsr	r20
    2d72:	10 e1       	ldi	r17, 0x10	; 16
    2d74:	41 9f       	mul	r20, r17
    2d76:	d0 01       	movw	r26, r0
    2d78:	11 24       	eor	r1, r1
    2d7a:	44 0f       	add	r20, r20
    2d7c:	24 2f       	mov	r18, r20
    2d7e:	22 0f       	add	r18, r18
    2d80:	22 0f       	add	r18, r18
    2d82:	42 0f       	add	r20, r18
    2d84:	64 1b       	sub	r22, r20
    2d86:	6a 2b       	or	r22, r26
    2d88:	62 83       	std	Z+2, r22	; 0x02
    2d8a:	73 9f       	mul	r23, r19
    2d8c:	41 2d       	mov	r20, r1
    2d8e:	11 24       	eor	r1, r1
    2d90:	46 95       	lsr	r20
    2d92:	46 95       	lsr	r20
    2d94:	46 95       	lsr	r20
    2d96:	20 e1       	ldi	r18, 0x10	; 16
    2d98:	42 9f       	mul	r20, r18
    2d9a:	d0 01       	movw	r26, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	44 0f       	add	r20, r20
    2da0:	24 2f       	mov	r18, r20
    2da2:	22 0f       	add	r18, r18
    2da4:	22 0f       	add	r18, r18
    2da6:	42 0f       	add	r20, r18
    2da8:	74 1b       	sub	r23, r20
    2daa:	7a 2b       	or	r23, r26
    2dac:	73 83       	std	Z+3, r23	; 0x03
    2dae:	83 9f       	mul	r24, r19
    2db0:	41 2d       	mov	r20, r1
    2db2:	11 24       	eor	r1, r1
    2db4:	46 95       	lsr	r20
    2db6:	46 95       	lsr	r20
    2db8:	46 95       	lsr	r20
    2dba:	10 e1       	ldi	r17, 0x10	; 16
    2dbc:	41 9f       	mul	r20, r17
    2dbe:	b0 01       	movw	r22, r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	44 0f       	add	r20, r20
    2dc4:	24 2f       	mov	r18, r20
    2dc6:	22 0f       	add	r18, r18
    2dc8:	22 0f       	add	r18, r18
    2dca:	42 0f       	add	r20, r18
    2dcc:	84 1b       	sub	r24, r20
    2dce:	86 2b       	or	r24, r22
    2dd0:	84 83       	std	Z+4, r24	; 0x04
    2dd2:	93 9f       	mul	r25, r19
    2dd4:	31 2d       	mov	r19, r1
    2dd6:	11 24       	eor	r1, r1
    2dd8:	36 95       	lsr	r19
    2dda:	36 95       	lsr	r19
    2ddc:	36 95       	lsr	r19
    2dde:	20 e1       	ldi	r18, 0x10	; 16
    2de0:	32 9f       	mul	r19, r18
    2de2:	a0 01       	movw	r20, r0
    2de4:	11 24       	eor	r1, r1
    2de6:	33 0f       	add	r19, r19
    2de8:	83 2f       	mov	r24, r19
    2dea:	88 0f       	add	r24, r24
    2dec:	88 0f       	add	r24, r24
    2dee:	38 0f       	add	r19, r24
    2df0:	93 1b       	sub	r25, r19
    2df2:	94 2b       	or	r25, r20
    2df4:	95 83       	std	Z+5, r25	; 0x05
    2df6:	26 96       	adiw	r28, 0x06	; 6
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004e2c <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    4e2c:	cf 93       	push	r28
    4e2e:	df 93       	push	r29
    4e30:	00 d0       	rcall	.+0      	; 0x4e32 <RTC_set_clock_out+0x6>
    4e32:	cd b7       	in	r28, 0x3d	; 61
    4e34:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    4e36:	9d e0       	ldi	r25, 0x0D	; 13
    4e38:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    4e3a:	81 30       	cpi	r24, 0x01	; 1
    4e3c:	31 f0       	breq	.+12     	; 0x4e4a <RTC_set_clock_out+0x1e>
    4e3e:	18 f0       	brcs	.+6      	; 0x4e46 <RTC_set_clock_out+0x1a>
    4e40:	80 32       	cpi	r24, 0x20	; 32
    4e42:	31 f0       	breq	.+12     	; 0x4e50 <RTC_set_clock_out+0x24>
    4e44:	13 c0       	rjmp	.+38     	; 0x4e6c <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    4e46:	1a 82       	std	Y+2, r1	; 0x02
			break;
    4e48:	05 c0       	rjmp	.+10     	; 0x4e54 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    4e4a:	83 e8       	ldi	r24, 0x83	; 131
    4e4c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    4e50:	82 e8       	ldi	r24, 0x82	; 130
    4e52:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    4e54:	ae 01       	movw	r20, r28
    4e56:	4f 5f       	subi	r20, 0xFF	; 255
    4e58:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5a:	60 e8       	ldi	r22, 0x80	; 128
    4e5c:	22 e0       	ldi	r18, 0x02	; 2
    4e5e:	81 e5       	ldi	r24, 0x51	; 81
    4e60:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4e64:	88 23       	and	r24, r24
    4e66:	21 f0       	breq	.+8      	; 0x4e70 <RTC_set_clock_out+0x44>
    4e68:	82 e0       	ldi	r24, 0x02	; 2
    4e6a:	03 c0       	rjmp	.+6      	; 0x4e72 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    4e6c:	81 e0       	ldi	r24, 0x01	; 1
    4e6e:	01 c0       	rjmp	.+2      	; 0x4e72 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    4e70:	80 e0       	ldi	r24, 0x00	; 0
}
    4e72:	0f 90       	pop	r0
    4e74:	0f 90       	pop	r0
    4e76:	df 91       	pop	r29
    4e78:	cf 91       	pop	r28
    4e7a:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00005c00 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	00 d0       	rcall	.+0      	; 0x5c06 <RTC_clear_wake_up_interrupt+0x6>
    5c06:	cd b7       	in	r28, 0x3d	; 61
    5c08:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	89 83       	std	Y+1, r24	; 0x01
    5c0e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    5c10:	ae 01       	movw	r20, r28
    5c12:	4f 5f       	subi	r20, 0xFF	; 255
    5c14:	5f 4f       	sbci	r21, 0xFF	; 255
    5c16:	60 e8       	ldi	r22, 0x80	; 128
    5c18:	22 e0       	ldi	r18, 0x02	; 2
    5c1a:	81 e5       	ldi	r24, 0x51	; 81
    5c1c:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    5c20:	88 23       	and	r24, r24
    5c22:	11 f0       	breq	.+4      	; 0x5c28 <RTC_clear_wake_up_interrupt+0x28>
    5c24:	82 e0       	ldi	r24, 0x02	; 2
    5c26:	01 c0       	rjmp	.+2      	; 0x5c2a <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    5c28:	80 e0       	ldi	r24, 0x00	; 0
}
    5c2a:	0f 90       	pop	r0
    5c2c:	0f 90       	pop	r0
    5c2e:	df 91       	pop	r29
    5c30:	cf 91       	pop	r28
    5c32:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

000023e8 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	27 97       	sbiw	r28, 0x07	; 7
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	8c 01       	movw	r16, r24
    2402:	21 e0       	ldi	r18, 0x01	; 1
    2404:	4e ec       	ldi	r20, 0xCE	; 206
    2406:	58 e0       	ldi	r21, 0x08	; 8
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	81 e5       	ldi	r24, 0x51	; 81
    240c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <TWI_API_write_data>
    2410:	81 11       	cpse	r24, r1
    2412:	7c c0       	rjmp	.+248    	; 0x250c <RTC_get_current_time+0x124>
    2414:	47 e0       	ldi	r20, 0x07	; 7
    2416:	be 01       	movw	r22, r28
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	81 e5       	ldi	r24, 0x51	; 81
    241e:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <TWI_API_repeat_read_data_stop>
    2422:	81 11       	cpse	r24, r1
    2424:	75 c0       	rjmp	.+234    	; 0x2510 <RTC_get_current_time+0x128>
    2426:	29 81       	ldd	r18, Y+1	; 0x01
    2428:	82 2f       	mov	r24, r18
    242a:	8f 77       	andi	r24, 0x7F	; 127
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	95 95       	asr	r25
    2430:	87 95       	ror	r24
    2432:	95 95       	asr	r25
    2434:	87 95       	ror	r24
    2436:	95 95       	asr	r25
    2438:	87 95       	ror	r24
    243a:	95 95       	asr	r25
    243c:	87 95       	ror	r24
    243e:	88 0f       	add	r24, r24
    2440:	98 2f       	mov	r25, r24
    2442:	99 0f       	add	r25, r25
    2444:	99 0f       	add	r25, r25
    2446:	89 0f       	add	r24, r25
    2448:	2f 70       	andi	r18, 0x0F	; 15
    244a:	82 0f       	add	r24, r18
    244c:	f8 01       	movw	r30, r16
    244e:	80 83       	st	Z, r24
    2450:	2a 81       	ldd	r18, Y+2	; 0x02
    2452:	82 2f       	mov	r24, r18
    2454:	8f 77       	andi	r24, 0x7F	; 127
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	95 95       	asr	r25
    245a:	87 95       	ror	r24
    245c:	95 95       	asr	r25
    245e:	87 95       	ror	r24
    2460:	95 95       	asr	r25
    2462:	87 95       	ror	r24
    2464:	95 95       	asr	r25
    2466:	87 95       	ror	r24
    2468:	88 0f       	add	r24, r24
    246a:	98 2f       	mov	r25, r24
    246c:	99 0f       	add	r25, r25
    246e:	99 0f       	add	r25, r25
    2470:	89 0f       	add	r24, r25
    2472:	2f 70       	andi	r18, 0x0F	; 15
    2474:	82 0f       	add	r24, r18
    2476:	81 83       	std	Z+1, r24	; 0x01
    2478:	2b 81       	ldd	r18, Y+3	; 0x03
    247a:	82 2f       	mov	r24, r18
    247c:	8f 73       	andi	r24, 0x3F	; 63
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	95 95       	asr	r25
    2482:	87 95       	ror	r24
    2484:	95 95       	asr	r25
    2486:	87 95       	ror	r24
    2488:	95 95       	asr	r25
    248a:	87 95       	ror	r24
    248c:	95 95       	asr	r25
    248e:	87 95       	ror	r24
    2490:	88 0f       	add	r24, r24
    2492:	98 2f       	mov	r25, r24
    2494:	99 0f       	add	r25, r25
    2496:	99 0f       	add	r25, r25
    2498:	89 0f       	add	r24, r25
    249a:	2f 70       	andi	r18, 0x0F	; 15
    249c:	82 0f       	add	r24, r18
    249e:	82 83       	std	Z+2, r24	; 0x02
    24a0:	2c 81       	ldd	r18, Y+4	; 0x04
    24a2:	82 2f       	mov	r24, r18
    24a4:	8f 73       	andi	r24, 0x3F	; 63
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	95 95       	asr	r25
    24aa:	87 95       	ror	r24
    24ac:	95 95       	asr	r25
    24ae:	87 95       	ror	r24
    24b0:	95 95       	asr	r25
    24b2:	87 95       	ror	r24
    24b4:	95 95       	asr	r25
    24b6:	87 95       	ror	r24
    24b8:	88 0f       	add	r24, r24
    24ba:	98 2f       	mov	r25, r24
    24bc:	99 0f       	add	r25, r25
    24be:	99 0f       	add	r25, r25
    24c0:	89 0f       	add	r24, r25
    24c2:	2f 70       	andi	r18, 0x0F	; 15
    24c4:	82 0f       	add	r24, r18
    24c6:	83 83       	std	Z+3, r24	; 0x03
    24c8:	2e 81       	ldd	r18, Y+6	; 0x06
    24ca:	82 2f       	mov	r24, r18
    24cc:	8f 71       	andi	r24, 0x1F	; 31
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	95 95       	asr	r25
    24d2:	87 95       	ror	r24
    24d4:	95 95       	asr	r25
    24d6:	87 95       	ror	r24
    24d8:	95 95       	asr	r25
    24da:	87 95       	ror	r24
    24dc:	95 95       	asr	r25
    24de:	87 95       	ror	r24
    24e0:	88 0f       	add	r24, r24
    24e2:	98 2f       	mov	r25, r24
    24e4:	99 0f       	add	r25, r25
    24e6:	99 0f       	add	r25, r25
    24e8:	89 0f       	add	r24, r25
    24ea:	2f 70       	andi	r18, 0x0F	; 15
    24ec:	82 0f       	add	r24, r18
    24ee:	84 83       	std	Z+4, r24	; 0x04
    24f0:	8f 81       	ldd	r24, Y+7	; 0x07
    24f2:	98 2f       	mov	r25, r24
    24f4:	92 95       	swap	r25
    24f6:	9f 70       	andi	r25, 0x0F	; 15
    24f8:	99 0f       	add	r25, r25
    24fa:	29 2f       	mov	r18, r25
    24fc:	22 0f       	add	r18, r18
    24fe:	22 0f       	add	r18, r18
    2500:	92 0f       	add	r25, r18
    2502:	8f 70       	andi	r24, 0x0F	; 15
    2504:	89 0f       	add	r24, r25
    2506:	85 83       	std	Z+5, r24	; 0x05
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <RTC_get_current_time+0x12a>
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	01 c0       	rjmp	.+2      	; 0x2512 <RTC_get_current_time+0x12a>
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	27 96       	adiw	r28, 0x07	; 7
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

0000360e <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	2d 97       	sbiw	r28, 0x0d	; 13
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    362e:	85 e0       	ldi	r24, 0x05	; 5
    3630:	ea e5       	ldi	r30, 0x5A	; 90
    3632:	ff e0       	ldi	r31, 0x0F	; 15
    3634:	de 01       	movw	r26, r28
    3636:	13 96       	adiw	r26, 0x03	; 3
    3638:	01 90       	ld	r0, Z+
    363a:	0d 92       	st	X+, r0
    363c:	8a 95       	dec	r24
    363e:	e1 f7       	brne	.-8      	; 0x3638 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    3640:	ce 01       	movw	r24, r28
    3642:	08 96       	adiw	r24, 0x08	; 8
    3644:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	81 0f       	add	r24, r17
	dt.minute %= 60;
    364c:	99 e8       	ldi	r25, 0x89	; 137
    364e:	89 9f       	mul	r24, r25
    3650:	91 2d       	mov	r25, r1
    3652:	11 24       	eor	r1, r1
    3654:	92 95       	swap	r25
    3656:	96 95       	lsr	r25
    3658:	97 70       	andi	r25, 0x07	; 7
    365a:	2c e3       	ldi	r18, 0x3C	; 60
    365c:	92 9f       	mul	r25, r18
    365e:	80 19       	sub	r24, r0
    3660:	11 24       	eor	r1, r1
    3662:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    3664:	ae 01       	movw	r20, r28
    3666:	4f 5f       	subi	r20, 0xFF	; 255
    3668:	5f 4f       	sbci	r21, 0xFF	; 255
    366a:	60 e8       	ldi	r22, 0x80	; 128
    366c:	22 e0       	ldi	r18, 0x02	; 2
    366e:	81 e5       	ldi	r24, 0x51	; 81
    3670:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3674:	81 11       	cpse	r24, r1
    3676:	20 c0       	rjmp	.+64     	; 0x36b8 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    3678:	99 85       	ldd	r25, Y+9	; 0x09
    367a:	8d ec       	ldi	r24, 0xCD	; 205
    367c:	98 9f       	mul	r25, r24
    367e:	81 2d       	mov	r24, r1
    3680:	11 24       	eor	r1, r1
    3682:	86 95       	lsr	r24
    3684:	86 95       	lsr	r24
    3686:	86 95       	lsr	r24
    3688:	40 e1       	ldi	r20, 0x10	; 16
    368a:	84 9f       	mul	r24, r20
    368c:	90 01       	movw	r18, r0
    368e:	11 24       	eor	r1, r1
    3690:	88 0f       	add	r24, r24
    3692:	38 2f       	mov	r19, r24
    3694:	33 0f       	add	r19, r19
    3696:	33 0f       	add	r19, r19
    3698:	83 0f       	add	r24, r19
    369a:	98 1b       	sub	r25, r24
    369c:	92 2b       	or	r25, r18
    369e:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    36a0:	ae 01       	movw	r20, r28
    36a2:	4d 5f       	subi	r20, 0xFD	; 253
    36a4:	5f 4f       	sbci	r21, 0xFF	; 255
    36a6:	60 e8       	ldi	r22, 0x80	; 128
    36a8:	25 e0       	ldi	r18, 0x05	; 5
    36aa:	81 e5       	ldi	r24, 0x51	; 81
    36ac:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    36b0:	88 23       	and	r24, r24
    36b2:	21 f0       	breq	.+8      	; 0x36bc <RTC_set_wake_up_interrupt_minutes+0xae>
    36b4:	82 e0       	ldi	r24, 0x02	; 2
    36b6:	03 c0       	rjmp	.+6      	; 0x36be <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    36b8:	82 e0       	ldi	r24, 0x02	; 2
    36ba:	01 c0       	rjmp	.+2      	; 0x36be <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    36bc:	80 e0       	ldi	r24, 0x00	; 0
}
    36be:	2d 96       	adiw	r28, 0x0d	; 13
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	1f 91       	pop	r17
    36d0:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

0000493c <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    493c:	cf 93       	push	r28
    493e:	df 93       	push	r29
    4940:	cd b7       	in	r28, 0x3d	; 61
    4942:	de b7       	in	r29, 0x3e	; 62
    4944:	64 97       	sbiw	r28, 0x14	; 20
    4946:	0f b6       	in	r0, 0x3f	; 63
    4948:	f8 94       	cli
    494a:	de bf       	out	0x3e, r29	; 62
    494c:	0f be       	out	0x3f, r0	; 63
    494e:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    4950:	9e 01       	movw	r18, r28
    4952:	27 5f       	subi	r18, 0xF7	; 247
    4954:	3f 4f       	sbci	r19, 0xFF	; 255
    4956:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <datetime_to_BCD>
	
	data[0]=0x02;
    495a:	82 e0       	ldi	r24, 0x02	; 2
    495c:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    495e:	89 85       	ldd	r24, Y+9	; 0x09
    4960:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    4962:	8a 85       	ldd	r24, Y+10	; 0x0a
    4964:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    4966:	8b 85       	ldd	r24, Y+11	; 0x0b
    4968:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    496a:	8c 85       	ldd	r24, Y+12	; 0x0c
    496c:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    496e:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    4970:	8d 85       	ldd	r24, Y+13	; 0x0d
    4972:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    4974:	8e 85       	ldd	r24, Y+14	; 0x0e
    4976:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    4978:	ae 01       	movw	r20, r28
    497a:	4f 5f       	subi	r20, 0xFF	; 255
    497c:	5f 4f       	sbci	r21, 0xFF	; 255
    497e:	60 e8       	ldi	r22, 0x80	; 128
    4980:	28 e0       	ldi	r18, 0x08	; 8
    4982:	81 e5       	ldi	r24, 0x51	; 81
    4984:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4988:	88 23       	and	r24, r24
    498a:	11 f0       	breq	.+4      	; 0x4990 <RTC_set_current_time+0x54>
    498c:	82 e0       	ldi	r24, 0x02	; 2
    498e:	01 c0       	rjmp	.+2      	; 0x4992 <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    4990:	80 e0       	ldi	r24, 0x00	; 0
}
    4992:	64 96       	adiw	r28, 0x14	; 20
    4994:	0f b6       	in	r0, 0x3f	; 63
    4996:	f8 94       	cli
    4998:	de bf       	out	0x3e, r29	; 62
    499a:	0f be       	out	0x3f, r0	; 63
    499c:	cd bf       	out	0x3d, r28	; 61
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00002792 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2792:	4f 92       	push	r4
    2794:	5f 92       	push	r5
    2796:	6f 92       	push	r6
    2798:	7f 92       	push	r7
    279a:	8f 92       	push	r8
    279c:	9f 92       	push	r9
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <RTC_datetime_to_ts+0x22>
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <RTC_datetime_to_ts+0x24>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <RTC_datetime_to_ts+0x26>
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	f9 01       	movw	r30, r18
    27be:	49 2e       	mov	r4, r25
    27c0:	51 2c       	mov	r5, r1
    27c2:	61 2c       	mov	r6, r1
    27c4:	71 2c       	mov	r7, r1
    27c6:	03 2e       	mov	r0, r19
    27c8:	3a e1       	ldi	r19, 0x1A	; 26
    27ca:	44 0c       	add	r4, r4
    27cc:	55 1c       	adc	r5, r5
    27ce:	66 1c       	adc	r6, r6
    27d0:	77 1c       	adc	r7, r7
    27d2:	3a 95       	dec	r19
    27d4:	d1 f7       	brne	.-12     	; 0x27ca <RTC_datetime_to_ts+0x38>
    27d6:	30 2d       	mov	r19, r0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a0 e0       	ldi	r26, 0x00	; 0
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	07 2e       	mov	r0, r23
    27e0:	76 e1       	ldi	r23, 0x16	; 22
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	aa 1f       	adc	r26, r26
    27e8:	bb 1f       	adc	r27, r27
    27ea:	7a 95       	dec	r23
    27ec:	d1 f7       	brne	.-12     	; 0x27e2 <RTC_datetime_to_ts+0x50>
    27ee:	70 2d       	mov	r23, r0
    27f0:	84 29       	or	r24, r4
    27f2:	95 29       	or	r25, r5
    27f4:	a6 29       	or	r26, r6
    27f6:	b7 29       	or	r27, r7
    27f8:	87 2e       	mov	r8, r23
    27fa:	91 2c       	mov	r9, r1
    27fc:	a1 2c       	mov	r10, r1
    27fe:	b1 2c       	mov	r11, r1
    2800:	07 2e       	mov	r0, r23
    2802:	71 e1       	ldi	r23, 0x11	; 17
    2804:	88 0c       	add	r8, r8
    2806:	99 1c       	adc	r9, r9
    2808:	aa 1c       	adc	r10, r10
    280a:	bb 1c       	adc	r11, r11
    280c:	7a 95       	dec	r23
    280e:	d1 f7       	brne	.-12     	; 0x2804 <RTC_datetime_to_ts+0x72>
    2810:	70 2d       	mov	r23, r0
    2812:	88 29       	or	r24, r8
    2814:	99 29       	or	r25, r9
    2816:	aa 29       	or	r26, r10
    2818:	bb 29       	or	r27, r11
    281a:	c6 2e       	mov	r12, r22
    281c:	d1 2c       	mov	r13, r1
    281e:	e1 2c       	mov	r14, r1
    2820:	f1 2c       	mov	r15, r1
    2822:	0b 2e       	mov	r0, r27
    2824:	bc e0       	ldi	r27, 0x0C	; 12
    2826:	cc 0c       	add	r12, r12
    2828:	dd 1c       	adc	r13, r13
    282a:	ee 1c       	adc	r14, r14
    282c:	ff 1c       	adc	r15, r15
    282e:	ba 95       	dec	r27
    2830:	d1 f7       	brne	.-12     	; 0x2826 <RTC_datetime_to_ts+0x94>
    2832:	b0 2d       	mov	r27, r0
    2834:	8c 29       	or	r24, r12
    2836:	9d 29       	or	r25, r13
    2838:	ae 29       	or	r26, r14
    283a:	bf 29       	or	r27, r15
    283c:	05 2f       	mov	r16, r21
    283e:	10 e0       	ldi	r17, 0x00	; 0
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	00 0f       	add	r16, r16
    2846:	11 1f       	adc	r17, r17
    2848:	22 1f       	adc	r18, r18
    284a:	33 1f       	adc	r19, r19
    284c:	00 0f       	add	r16, r16
    284e:	11 1f       	adc	r17, r17
    2850:	22 1f       	adc	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	00 0f       	add	r16, r16
    2856:	11 1f       	adc	r17, r17
    2858:	22 1f       	adc	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	00 0f       	add	r16, r16
    285e:	11 1f       	adc	r17, r17
    2860:	22 1f       	adc	r18, r18
    2862:	33 1f       	adc	r19, r19
    2864:	00 0f       	add	r16, r16
    2866:	11 1f       	adc	r17, r17
    2868:	22 1f       	adc	r18, r18
    286a:	33 1f       	adc	r19, r19
    286c:	00 0f       	add	r16, r16
    286e:	11 1f       	adc	r17, r17
    2870:	22 1f       	adc	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	80 2b       	or	r24, r16
    2876:	91 2b       	or	r25, r17
    2878:	a2 2b       	or	r26, r18
    287a:	b3 2b       	or	r27, r19
    287c:	84 2b       	or	r24, r20
    287e:	b0 83       	st	Z, r27
    2880:	a1 83       	std	Z+1, r26	; 0x01
    2882:	92 83       	std	Z+2, r25	; 0x02
    2884:	83 83       	std	Z+3, r24	; 0x03
    2886:	26 96       	adiw	r28, 0x06	; 6
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	bf 90       	pop	r11
    28a4:	af 90       	pop	r10
    28a6:	9f 90       	pop	r9
    28a8:	8f 90       	pop	r8
    28aa:	7f 90       	pop	r7
    28ac:	6f 90       	pop	r6
    28ae:	5f 90       	pop	r5
    28b0:	4f 90       	pop	r4
    28b2:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000641a <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    641a:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    641c:	54 81       	ldd	r21, Z+4	; 0x04
    641e:	43 81       	ldd	r20, Z+3	; 0x03
    6420:	31 81       	ldd	r19, Z+1	; 0x01
    6422:	20 81       	ld	r18, Z
    6424:	65 2f       	mov	r22, r21
    6426:	74 2f       	mov	r23, r20
    6428:	83 2f       	mov	r24, r19
    642a:	92 2f       	mov	r25, r18
    642c:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__fixunssfsi>
}
    6430:	cb 01       	movw	r24, r22
    6432:	08 95       	ret

Disassembly of section .text.init_measurement:

00005a84 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    5a84:	25 e0       	ldi	r18, 0x05	; 5
    5a86:	4f eb       	ldi	r20, 0xBF	; 191
    5a88:	58 e0       	ldi	r21, 0x08	; 8
    5a8a:	60 e0       	ldi	r22, 0x00	; 0
    5a8c:	81 e6       	ldi	r24, 0x61	; 97
    5a8e:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a92:	81 11       	cpse	r24, r1
    5a94:	0f c0       	rjmp	.+30     	; 0x5ab4 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    5a96:	25 e0       	ldi	r18, 0x05	; 5
    5a98:	44 ec       	ldi	r20, 0xC4	; 196
    5a9a:	58 e0       	ldi	r21, 0x08	; 8
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	81 e6       	ldi	r24, 0x61	; 97
    5aa0:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5aa4:	81 11       	cpse	r24, r1
    5aa6:	08 c0       	rjmp	.+16     	; 0x5ab8 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    5aa8:	0e 94 5d 34 	call	0x68ba	; 0x68ba <SCD30_HAL_data_ready>
    5aac:	88 23       	and	r24, r24
    5aae:	e1 f3       	breq	.-8      	; 0x5aa8 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    5ab0:	80 e0       	ldi	r24, 0x00	; 0
    5ab2:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5ab4:	82 e0       	ldi	r24, 0x02	; 2
    5ab6:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5ab8:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    5aba:	08 95       	ret

Disassembly of section .text.validate_data:

00005ccc <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    5ccc:	cf 93       	push	r28
    5cce:	df 93       	push	r29
    5cd0:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    5cd2:	62 e0       	ldi	r22, 0x02	; 2
    5cd4:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <calc_crc8>
	if(data[2]!=crc) return false;
    5cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cda:	89 13       	cpse	r24, r25
    5cdc:	0a c0       	rjmp	.+20     	; 0x5cf2 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    5cde:	62 e0       	ldi	r22, 0x02	; 2
    5ce0:	ce 01       	movw	r24, r28
    5ce2:	03 96       	adiw	r24, 0x03	; 3
    5ce4:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <calc_crc8>
	if(data[5]!=crc) return false;
    5ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    5cea:	89 17       	cp	r24, r25
    5cec:	21 f0       	breq	.+8      	; 0x5cf6 <validate_data+0x2a>
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	03 c0       	rjmp	.+6      	; 0x5cf8 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    5cf2:	80 e0       	ldi	r24, 0x00	; 0
    5cf4:	01 c0       	rjmp	.+2      	; 0x5cf8 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    5cf6:	81 e0       	ldi	r24, 0x01	; 1
}
    5cf8:	df 91       	pop	r29
    5cfa:	cf 91       	pop	r28
    5cfc:	08 95       	ret

Disassembly of section .text.read_value:

00003cf0 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <read_value+0xa>
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <read_value+0xc>
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <read_value+0xe>
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	9f ef       	ldi	r25, 0xFF	; 255
    3d08:	f8 01       	movw	r30, r16
    3d0a:	91 83       	std	Z+1, r25	; 0x01
    3d0c:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    3d0e:	0e 94 5d 34 	call	0x68ba	; 0x68ba <SCD30_HAL_data_ready>
    3d12:	81 11       	cpse	r24, r1
    3d14:	07 c0       	rjmp	.+14     	; 0x3d24 <read_value+0x34>
		*value=0xfffe;
    3d16:	8e ef       	ldi	r24, 0xFE	; 254
    3d18:	9f ef       	ldi	r25, 0xFF	; 255
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3d20:	83 e0       	ldi	r24, 0x03	; 3
    3d22:	2c c0       	rjmp	.+88     	; 0x3d7c <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3d24:	22 e0       	ldi	r18, 0x02	; 2
    3d26:	4c ec       	ldi	r20, 0xCC	; 204
    3d28:	58 e0       	ldi	r21, 0x08	; 8
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	81 e6       	ldi	r24, 0x61	; 97
    3d2e:	0e 94 00 32 	call	0x6400	; 0x6400 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d32:	81 11       	cpse	r24, r1
    3d34:	1e c0       	rjmp	.+60     	; 0x3d72 <read_value+0x82>
    3d36:	8f e3       	ldi	r24, 0x3F	; 63
    3d38:	9f e1       	ldi	r25, 0x1F	; 31
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <read_value+0x4a>
    3d3e:	00 c0       	rjmp	.+0      	; 0x3d40 <read_value+0x50>
    3d40:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    3d42:	46 e0       	ldi	r20, 0x06	; 6
    3d44:	be 01       	movw	r22, r28
    3d46:	6f 5f       	subi	r22, 0xFF	; 255
    3d48:	7f 4f       	sbci	r23, 0xFF	; 255
    3d4a:	81 e6       	ldi	r24, 0x61	; 97
    3d4c:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d50:	81 11       	cpse	r24, r1
    3d52:	11 c0       	rjmp	.+34     	; 0x3d76 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3d54:	ce 01       	movw	r24, r28
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <validate_data>
    3d5c:	88 23       	and	r24, r24
    3d5e:	69 f0       	breq	.+26     	; 0x3d7a <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    3d60:	ce 01       	movw	r24, r28
    3d62:	01 96       	adiw	r24, 0x01	; 1
    3d64:	0e 94 0d 32 	call	0x641a	; 0x641a <bytes_2_uint>
    3d68:	f8 01       	movw	r30, r16
    3d6a:	91 83       	std	Z+1, r25	; 0x01
    3d6c:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	03 c0       	rjmp	.+6      	; 0x3d7c <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	01 c0       	rjmp	.+2      	; 0x3d7c <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    3d7c:	26 96       	adiw	r28, 0x06	; 6
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

000054e8 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    54e8:	80 91 8d 0f 	lds	r24, 0x0F8D	; 0x800f8d <_data>
    54ec:	90 91 8e 0f 	lds	r25, 0x0F8E	; 0x800f8e <_data+0x1>
    54f0:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    54f4:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    54f8:	a9 01       	movw	r20, r18
    54fa:	4f 5f       	subi	r20, 0xFF	; 255
    54fc:	5f 4f       	sbci	r21, 0xFF	; 255
    54fe:	50 93 8c 0f 	sts	0x0F8C, r21	; 0x800f8c <cntSamples+0x1>
    5502:	40 93 8b 0f 	sts	0x0F8B, r20	; 0x800f8b <cntSamples>
    5506:	22 0f       	add	r18, r18
    5508:	33 1f       	adc	r19, r19
    550a:	82 0f       	add	r24, r18
    550c:	93 1f       	adc	r25, r19
    550e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <read_value>
	if(cntSamples>=_nSamples){
    5512:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    5516:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    551a:	80 91 8f 0f 	lds	r24, 0x0F8F	; 0x800f8f <_nSamples>
    551e:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <_nSamples+0x1>
    5522:	28 17       	cp	r18, r24
    5524:	39 07       	cpc	r19, r25
    5526:	10 f0       	brcs	.+4      	; 0x552c <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    5528:	0e 94 fd 33 	call	0x67fa	; 0x67fa <TC1_HAL_stop>
    552c:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00006160 <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    6160:	0e 94 79 33 	call	0x66f2	; 0x66f2 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    6164:	81 e0       	ldi	r24, 0x01	; 1
    6166:	0e 94 ae 32 	call	0x655c	; 0x655c <PM_HAL_SCD30_power>
    616a:	2f ef       	ldi	r18, 0xFF	; 255
    616c:	83 ed       	ldi	r24, 0xD3	; 211
    616e:	90 e3       	ldi	r25, 0x30	; 48
    6170:	21 50       	subi	r18, 0x01	; 1
    6172:	80 40       	sbci	r24, 0x00	; 0
    6174:	90 40       	sbci	r25, 0x00	; 0
    6176:	e1 f7       	brne	.-8      	; 0x6170 <SCD30_sensor_on+0x10>
    6178:	00 c0       	rjmp	.+0      	; 0x617a <SCD30_sensor_on+0x1a>
    617a:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    617c:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <init_measurement>
}
    6180:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

00006978 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    6978:	80 e0       	ldi	r24, 0x00	; 0
    697a:	0e 94 ae 32 	call	0x655c	; 0x655c <PM_HAL_SCD30_power>
    697e:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00006182 <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    6182:	70 93 90 0f 	sts	0x0F90, r23	; 0x800f90 <_nSamples+0x1>
    6186:	60 93 8f 0f 	sts	0x0F8F, r22	; 0x800f8f <_nSamples>
	cntSamples=0;
    618a:	10 92 8c 0f 	sts	0x0F8C, r1	; 0x800f8c <cntSamples+0x1>
    618e:	10 92 8b 0f 	sts	0x0F8B, r1	; 0x800f8b <cntSamples>
	_data=data;
    6192:	50 93 8e 0f 	sts	0x0F8E, r21	; 0x800f8e <_data+0x1>
    6196:	40 93 8d 0f 	sts	0x0F8D, r20	; 0x800f8d <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    619a:	64 e7       	ldi	r22, 0x74	; 116
    619c:	7a e2       	ldi	r23, 0x2A	; 42
    619e:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <TC1_HAL_init>
    61a2:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

0000677e <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    677e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <TC1_HAL_stop>
	_data=NULL;
    6782:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <_data+0x1>
    6786:	10 92 8d 0f 	sts	0x0F8D, r1	; 0x800f8d <_data>
    678a:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000690a <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    690a:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <vect_SCD_do_sample>
	TC1_HAL_start();
    690e:	0e 94 f7 33 	call	0x67ee	; 0x67ee <TC1_HAL_start>
    6912:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

000063c8 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    63c8:	40 91 8b 0f 	lds	r20, 0x0F8B	; 0x800f8b <cntSamples>
    63cc:	50 91 8c 0f 	lds	r21, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    63d0:	20 91 8f 0f 	lds	r18, 0x0F8F	; 0x800f8f <_nSamples>
    63d4:	30 91 90 0f 	lds	r19, 0x0F90	; 0x800f90 <_nSamples+0x1>
    63d8:	81 e0       	ldi	r24, 0x01	; 1
    63da:	42 17       	cp	r20, r18
    63dc:	53 07       	cpc	r21, r19
    63de:	08 f4       	brcc	.+2      	; 0x63e2 <SCD30_is_sampling_done+0x1a>
    63e0:	80 e0       	ldi	r24, 0x00	; 0
}
    63e2:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00006434 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    6434:	cf 93       	push	r28
    6436:	df 93       	push	r29
    6438:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    643a:	0e 94 5d 34 	call	0x68ba	; 0x68ba <SCD30_HAL_data_ready>
    643e:	88 23       	and	r24, r24
    6440:	e1 f3       	breq	.-8      	; 0x643a <SCD30_get_reading+0x6>
	
	return read_value(value);
    6442:	ce 01       	movw	r24, r28
    6444:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <read_value>
}
    6448:	df 91       	pop	r29
    644a:	cf 91       	pop	r28
    644c:	08 95       	ret

Disassembly of section .text.parse_cmd:

00005eb0 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5eb0:	fc 01       	movw	r30, r24
    5eb2:	80 81       	ld	r24, Z
    5eb4:	82 37       	cpi	r24, 0x72	; 114
    5eb6:	51 f0       	breq	.+20     	; 0x5ecc <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    5eb8:	87 37       	cpi	r24, 0x77	; 119
    5eba:	51 f0       	breq	.+20     	; 0x5ed0 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    5ebc:	83 36       	cpi	r24, 0x63	; 99
    5ebe:	51 f0       	breq	.+20     	; 0x5ed4 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    5ec0:	83 37       	cpi	r24, 0x73	; 115
    5ec2:	51 f0       	breq	.+20     	; 0x5ed8 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    5ec4:	81 37       	cpi	r24, 0x71	; 113
    5ec6:	51 f4       	brne	.+20     	; 0x5edc <parse_cmd+0x2c>
    5ec8:	84 e0       	ldi	r24, 0x04	; 4
    5eca:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5ecc:	87 e0       	ldi	r24, 0x07	; 7
    5ece:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    5ed0:	88 e0       	ldi	r24, 0x08	; 8
    5ed2:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    5ed4:	89 e0       	ldi	r24, 0x09	; 9
    5ed6:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    5ed8:	8a e0       	ldi	r24, 0x0A	; 10
    5eda:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    5edc:	85 e0       	ldi	r24, 0x05	; 5
}
    5ede:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004cdc <validate_cmd>:

static bool validate_cmd(char msg[]){
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    4ce2:	bc 01       	movw	r22, r24
    4ce4:	80 e8       	ldi	r24, 0x80	; 128
    4ce6:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4cea:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4cec:	fc 01       	movw	r30, r24
    4cee:	31 97       	sbiw	r30, 0x01	; 1
    4cf0:	ec 0f       	add	r30, r28
    4cf2:	fd 1f       	adc	r31, r29
    4cf4:	80 81       	ld	r24, Z
    4cf6:	80 32       	cpi	r24, 0x20	; 32
    4cf8:	b1 f0       	breq	.+44     	; 0x4d26 <validate_cmd+0x4a>
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	0d c0       	rjmp	.+26     	; 0x4d1c <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    4d02:	fe 01       	movw	r30, r28
    4d04:	e2 0f       	add	r30, r18
    4d06:	f3 1f       	adc	r31, r19
    4d08:	90 81       	ld	r25, Z
    4d0a:	90 32       	cpi	r25, 0x20	; 32
    4d0c:	21 f4       	brne	.+8      	; 0x4d16 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    4d0e:	41 11       	cpse	r20, r1
    4d10:	0c c0       	rjmp	.+24     	; 0x4d2a <validate_cmd+0x4e>
			lastCharWasSpace=true;
    4d12:	41 e0       	ldi	r20, 0x01	; 1
    4d14:	01 c0       	rjmp	.+2      	; 0x4d18 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    4d16:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    4d18:	2f 5f       	subi	r18, 0xFF	; 255
    4d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1c:	26 17       	cp	r18, r22
    4d1e:	37 07       	cpc	r19, r23
    4d20:	80 f3       	brcs	.-32     	; 0x4d02 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	03 c0       	rjmp	.+6      	; 0x4d2c <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	01 c0       	rjmp	.+2      	; 0x4d2c <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	08 95       	ret

Disassembly of section .text.CONF_enter:

00002528 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    2528:	cf 93       	push	r28
	uart1_hal_init();
    252a:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    252e:	c0 e0       	ldi	r28, 0x00	; 0
    2530:	0d c0       	rjmp	.+26     	; 0x254c <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    2532:	c2 e0       	ldi	r28, 0x02	; 2
    2534:	0b c0       	rjmp	.+22     	; 0x254c <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    2536:	c5 e0       	ldi	r28, 0x05	; 5
    2538:	09 c0       	rjmp	.+18     	; 0x254c <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    253a:	c6 e0       	ldi	r28, 0x06	; 6
    253c:	07 c0       	rjmp	.+14     	; 0x254c <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    253e:	c5 e0       	ldi	r28, 0x05	; 5
    2540:	05 c0       	rjmp	.+10     	; 0x254c <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2542:	c5 e0       	ldi	r28, 0x05	; 5
    2544:	03 c0       	rjmp	.+6      	; 0x254c <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    2546:	c5 e0       	ldi	r28, 0x05	; 5
    2548:	01 c0       	rjmp	.+2      	; 0x254c <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    254a:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    254c:	ec 2f       	mov	r30, r28
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	ec 30       	cpi	r30, 0x0C	; 12
    2552:	f1 05       	cpc	r31, r1
    2554:	d8 f7       	brcc	.-10     	; 0x254c <CONF_enter+0x24>
    2556:	e5 5b       	subi	r30, 0xB5	; 181
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    255e:	69 ec       	ldi	r22, 0xC9	; 201
    2560:	75 e0       	ldi	r23, 0x05	; 5
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    2568:	6f ee       	ldi	r22, 0xEF	; 239
    256a:	75 e0       	ldi	r23, 0x05	; 5
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				TC2_HAL_init();
    2572:	0e 94 03 31 	call	0x6206	; 0x6206 <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2576:	0e 94 1f 30 	call	0x603e	; 0x603e <init_methane_SCD30>
    257a:	81 11       	cpse	r24, r1
    257c:	da cf       	rjmp	.-76     	; 0x2532 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    257e:	61 e1       	ldi	r22, 0x11	; 17
    2580:	76 e0       	ldi	r23, 0x06	; 6
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
					state=CONF_EXIT;
    2588:	c4 e0       	ldi	r28, 0x04	; 4
    258a:	e0 cf       	rjmp	.-64     	; 0x254c <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    258c:	0e 94 87 33 	call	0x670e	; 0x670e <uart1_hal_message_ready>
    2590:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    2592:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2594:	0e 94 8e 33 	call	0x671c	; 0x671c <uart1_hal_rx_full>
    2598:	81 11       	cpse	r24, r1
    259a:	cd cf       	rjmp	.-102    	; 0x2536 <CONF_enter+0xe>
    259c:	d7 cf       	rjmp	.-82     	; 0x254c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    259e:	88 ea       	ldi	r24, 0xA8	; 168
    25a0:	97 e0       	ldi	r25, 0x07	; 7
    25a2:	0e 94 0b 30 	call	0x6016	; 0x6016 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    25a6:	88 ea       	ldi	r24, 0xA8	; 168
    25a8:	97 e0       	ldi	r25, 0x07	; 7
    25aa:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <validate_cmd>
    25ae:	88 23       	and	r24, r24
    25b0:	21 f2       	breq	.-120    	; 0x253a <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    25b2:	88 ea       	ldi	r24, 0xA8	; 168
    25b4:	97 e0       	ldi	r25, 0x07	; 7
    25b6:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <parse_cmd>
    25ba:	c8 2f       	mov	r28, r24
    25bc:	c7 cf       	rjmp	.-114    	; 0x254c <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    25be:	68 ea       	ldi	r22, 0xA8	; 168
    25c0:	77 e0       	ldi	r23, 0x07	; 7
    25c2:	80 e8       	ldi	r24, 0x80	; 128
    25c4:	40 ee       	ldi	r20, 0xE0	; 224
    25c6:	56 e0       	ldi	r21, 0x06	; 6
    25c8:	0e 94 88 0c 	call	0x1910	; 0x1910 <handle_read>
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <CONF_enter+0xaa>
    25d0:	b6 cf       	rjmp	.-148    	; 0x253e <CONF_enter+0x16>
					state=CONF_REPLY;
    25d2:	cb e0       	ldi	r28, 0x0B	; 11
    25d4:	bb cf       	rjmp	.-138    	; 0x254c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    25d6:	68 ea       	ldi	r22, 0xA8	; 168
    25d8:	77 e0       	ldi	r23, 0x07	; 7
    25da:	80 e8       	ldi	r24, 0x80	; 128
    25dc:	40 ee       	ldi	r20, 0xE0	; 224
    25de:	56 e0       	ldi	r21, 0x06	; 6
    25e0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <handle_write>
    25e4:	88 23       	and	r24, r24
    25e6:	09 f4       	brne	.+2      	; 0x25ea <CONF_enter+0xc2>
    25e8:	ac cf       	rjmp	.-168    	; 0x2542 <CONF_enter+0x1a>
					state=CONF_REPLY;
    25ea:	cb e0       	ldi	r28, 0x0B	; 11
    25ec:	af cf       	rjmp	.-162    	; 0x254c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    25ee:	68 ea       	ldi	r22, 0xA8	; 168
    25f0:	77 e0       	ldi	r23, 0x07	; 7
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <CONNECT>
    25f8:	88 23       	and	r24, r24
    25fa:	09 f4       	brne	.+2      	; 0x25fe <CONF_enter+0xd6>
    25fc:	a4 cf       	rjmp	.-184    	; 0x2546 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    25fe:	c2 e0       	ldi	r28, 0x02	; 2
    2600:	a5 cf       	rjmp	.-182    	; 0x254c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    2602:	68 ea       	ldi	r22, 0xA8	; 168
    2604:	77 e0       	ldi	r23, 0x07	; 7
    2606:	80 e8       	ldi	r24, 0x80	; 128
    2608:	40 ee       	ldi	r20, 0xE0	; 224
    260a:	56 e0       	ldi	r21, 0x06	; 6
    260c:	0e 94 25 1c 	call	0x384a	; 0x384a <handle_sample>
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <CONF_enter+0xee>
    2614:	9a cf       	rjmp	.-204    	; 0x254a <CONF_enter+0x22>
					state=CONF_REPLY;
    2616:	cb e0       	ldi	r28, 0x0B	; 11
    2618:	99 cf       	rjmp	.-206    	; 0x254c <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    261a:	60 ee       	ldi	r22, 0xE0	; 224
    261c:	76 e0       	ldi	r23, 0x06	; 6
    261e:	80 e8       	ldi	r24, 0x80	; 128
    2620:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2624:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2626:	92 cf       	rjmp	.-220    	; 0x254c <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    2628:	60 e3       	ldi	r22, 0x30	; 48
    262a:	76 e0       	ldi	r23, 0x06	; 6
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2632:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2634:	8b cf       	rjmp	.-234    	; 0x254c <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    2636:	6a e3       	ldi	r22, 0x3A	; 58
    2638:	76 e0       	ldi	r23, 0x06	; 6
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2640:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2642:	84 cf       	rjmp	.-248    	; 0x254c <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    2644:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    2648:	67 e4       	ldi	r22, 0x47	; 71
    264a:	76 e0       	ldi	r23, 0x06	; 6
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    2652:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2654:	7b cf       	rjmp	.-266    	; 0x254c <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    2656:	6d e6       	ldi	r22, 0x6D	; 109
    2658:	76 e0       	ldi	r23, 0x06	; 6
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				return;
		}
	}
}
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

000047fe <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    47fe:	cf 92       	push	r12
    4800:	df 92       	push	r13
    4802:	ef 92       	push	r14
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    4808:	6c 01       	movw	r12, r24
    480a:	20 e8       	ldi	r18, 0x80	; 128
    480c:	e2 2e       	mov	r14, r18
    480e:	04 e0       	ldi	r16, 0x04	; 4
    4810:	10 e0       	ldi	r17, 0x00	; 0
    4812:	20 e2       	ldi	r18, 0x20	; 32
    4814:	37 e0       	ldi	r19, 0x07	; 7
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	8e 2d       	mov	r24, r14
    481a:	b6 01       	movw	r22, r12
    481c:	0e 94 35 24 	call	0x486a	; 0x486a <strncmp>
    4820:	89 2b       	or	r24, r25
    4822:	c1 f0       	breq	.+48     	; 0x4854 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    4824:	05 e0       	ldi	r16, 0x05	; 5
    4826:	10 e0       	ldi	r17, 0x00	; 0
    4828:	25 e2       	ldi	r18, 0x25	; 37
    482a:	37 e0       	ldi	r19, 0x07	; 7
    482c:	40 e0       	ldi	r20, 0x00	; 0
    482e:	8e 2d       	mov	r24, r14
    4830:	b6 01       	movw	r22, r12
    4832:	0e 94 35 24 	call	0x486a	; 0x486a <strncmp>
    4836:	89 2b       	or	r24, r25
    4838:	79 f0       	breq	.+30     	; 0x4858 <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    483a:	04 e0       	ldi	r16, 0x04	; 4
    483c:	10 e0       	ldi	r17, 0x00	; 0
    483e:	2b e2       	ldi	r18, 0x2B	; 43
    4840:	37 e0       	ldi	r19, 0x07	; 7
    4842:	40 e0       	ldi	r20, 0x00	; 0
    4844:	8e 2d       	mov	r24, r14
    4846:	b6 01       	movw	r22, r12
    4848:	0e 94 35 24 	call	0x486a	; 0x486a <strncmp>
    484c:	89 2b       	or	r24, r25
    484e:	31 f4       	brne	.+12     	; 0x485c <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    4850:	85 e0       	ldi	r24, 0x05	; 5
    4852:	05 c0       	rjmp	.+10     	; 0x485e <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    4854:	86 e0       	ldi	r24, 0x06	; 6
    4856:	03 c0       	rjmp	.+6      	; 0x485e <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    4858:	84 e0       	ldi	r24, 0x04	; 4
    485a:	01 c0       	rjmp	.+2      	; 0x485e <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    485c:	83 e0       	ldi	r24, 0x03	; 3
    485e:	1f 91       	pop	r17
    4860:	0f 91       	pop	r16
    4862:	ef 90       	pop	r14
    4864:	df 90       	pop	r13
    4866:	cf 90       	pop	r12
    4868:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00002120 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    2120:	6f 92       	push	r6
    2122:	7f 92       	push	r7
    2124:	8f 92       	push	r8
    2126:	cf 92       	push	r12
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    2130:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    2132:	ec 2f       	mov	r30, r28
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	e7 30       	cpi	r30, 0x07	; 7
    2138:	f1 05       	cpc	r31, r1
    213a:	d8 f7       	brcc	.-10     	; 0x2132 <CON_RN2483+0x12>
    213c:	e9 5a       	subi	r30, 0xA9	; 169
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    2144:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart0_hal_init>
				rn2483_init();
    2148:	0e 94 98 34 	call	0x6930	; 0x6930 <rn2483_init>
				LM_reset_module();
    214c:	0e 94 db 34 	call	0x69b6	; 0x69b6 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    2150:	60 e3       	ldi	r22, 0x30	; 48
    2152:	77 e0       	ldi	r23, 0x07	; 7
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CL_READ_MSG;
    215a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    215c:	ea cf       	rjmp	.-44     	; 0x2132 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    215e:	0e 94 87 33 	call	0x670e	; 0x670e <uart1_hal_message_ready>
    2162:	88 23       	and	r24, r24
    2164:	31 f3       	breq	.-52     	; 0x2132 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    2166:	88 ea       	ldi	r24, 0xA8	; 168
    2168:	97 e0       	ldi	r25, 0x07	; 7
    216a:	0e 94 0b 30 	call	0x6016	; 0x6016 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    216e:	c2 e0       	ldi	r28, 0x02	; 2
    2170:	e0 cf       	rjmp	.-64     	; 0x2132 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    2172:	88 ea       	ldi	r24, 0xA8	; 168
    2174:	97 e0       	ldi	r25, 0x07	; 7
    2176:	0e 94 ff 23 	call	0x47fe	; 0x47fe <CON_RN2483_parse>
    217a:	c8 2f       	mov	r28, r24
			break;
    217c:	da cf       	rjmp	.-76     	; 0x2132 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    217e:	88 ea       	ldi	r24, 0xA8	; 168
    2180:	97 e0       	ldi	r25, 0x07	; 7
    2182:	6c 01       	movw	r12, r24
    2184:	20 e8       	ldi	r18, 0x80	; 128
    2186:	e2 2e       	mov	r14, r18
    2188:	2f 93       	push	r18
    218a:	df 92       	push	r13
    218c:	8f 93       	push	r24
    218e:	86 e6       	ldi	r24, 0x66	; 102
    2190:	97 e0       	ldi	r25, 0x07	; 7
    2192:	a0 e0       	ldi	r26, 0x00	; 0
    2194:	af 93       	push	r26
    2196:	9f 93       	push	r25
    2198:	8f 93       	push	r24
    219a:	c0 ee       	ldi	r28, 0xE0	; 224
    219c:	d6 e0       	ldi	r29, 0x06	; 6
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
				uart1_hal_send_string(cnf_reply);
    21a6:	3e 01       	movw	r6, r28
    21a8:	20 e8       	ldi	r18, 0x80	; 128
    21aa:	82 2e       	mov	r8, r18
    21ac:	88 2d       	mov	r24, r8
    21ae:	b3 01       	movw	r22, r6
    21b0:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    21b4:	ae 01       	movw	r20, r28
    21b6:	6c 2d       	mov	r22, r12
    21b8:	7d 2d       	mov	r23, r13
    21ba:	8e 2d       	mov	r24, r14
    21bc:	0e 94 de 34 	call	0x69bc	; 0x69bc <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    21c0:	88 2d       	mov	r24, r8
    21c2:	b3 01       	movw	r22, r6
    21c4:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    21c8:	8d b7       	in	r24, 0x3d	; 61
    21ca:	9e b7       	in	r25, 0x3e	; 62
    21cc:	08 96       	adiw	r24, 0x08	; 8
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	9e bf       	out	0x3e, r25	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    21d8:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    21da:	ab cf       	rjmp	.-170    	; 0x2132 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    21dc:	8c e6       	ldi	r24, 0x6C	; 108
    21de:	97 e0       	ldi	r25, 0x07	; 7
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	af 93       	push	r26
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	86 e6       	ldi	r24, 0x66	; 102
    21ea:	97 e0       	ldi	r25, 0x07	; 7
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	af 93       	push	r26
    21f0:	9f 93       	push	r25
    21f2:	8f 93       	push	r24
    21f4:	c0 ee       	ldi	r28, 0xE0	; 224
    21f6:	d6 e0       	ldi	r29, 0x06	; 6
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
				uart1_hal_send_string(cnf_reply);
    2200:	be 01       	movw	r22, r28
    2202:	80 e8       	ldi	r24, 0x80	; 128
    2204:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
    2208:	8f e7       	ldi	r24, 0x7F	; 127
    220a:	98 e3       	ldi	r25, 0x38	; 56
    220c:	21 e0       	ldi	r18, 0x01	; 1
    220e:	81 50       	subi	r24, 0x01	; 1
    2210:	90 40       	sbci	r25, 0x00	; 0
    2212:	20 40       	sbci	r18, 0x00	; 0
    2214:	e1 f7       	brne	.-8      	; 0x220e <CON_RN2483+0xee>
    2216:	00 c0       	rjmp	.+0      	; 0x2218 <CON_RN2483+0xf8>
    2218:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    221a:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <LM_send_break>
				state=CL_READ_MSG;
			break;
    221e:	8d b7       	in	r24, 0x3d	; 61
    2220:	9e b7       	in	r25, 0x3e	; 62
    2222:	08 96       	adiw	r24, 0x08	; 8
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	9e bf       	out	0x3e, r25	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    222e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2230:	80 cf       	rjmp	.-256    	; 0x2132 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    2232:	0e 94 80 33 	call	0x6700	; 0x6700 <uart0_hal_message_ready>
    2236:	88 23       	and	r24, r24
    2238:	29 f0       	breq	.+10     	; 0x2244 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    223a:	80 ee       	ldi	r24, 0xE0	; 224
    223c:	96 e0       	ldi	r25, 0x06	; 6
    223e:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <uart0_hal_read_message_as_str>
    2242:	09 c0       	rjmp	.+18     	; 0x2256 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    2244:	25 e0       	ldi	r18, 0x05	; 5
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	47 e7       	ldi	r20, 0x77	; 119
    224a:	57 e0       	ldi	r21, 0x07	; 7
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	80 ee       	ldi	r24, 0xE0	; 224
    2250:	96 e0       	ldi	r25, 0x06	; 6
    2252:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    2256:	60 ee       	ldi	r22, 0xE0	; 224
    2258:	76 e0       	ldi	r23, 0x06	; 6
    225a:	80 e8       	ldi	r24, 0x80	; 128
    225c:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				state=CL_READ_MSG;
    2260:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2262:	67 cf       	rjmp	.-306    	; 0x2132 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    2264:	0e 94 67 34 	call	0x68ce	; 0x68ce <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    2268:	6c e7       	ldi	r22, 0x7C	; 124
    226a:	77 e0       	ldi	r23, 0x07	; 7
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	ef 90       	pop	r14
    227a:	df 90       	pop	r13
    227c:	cf 90       	pop	r12
    227e:	8f 90       	pop	r8
    2280:	7f 90       	pop	r7
    2282:	6f 90       	pop	r6
    2284:	08 95       	ret

Disassembly of section .text.CONNECT:

00004d86 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	cd b7       	in	r28, 0x3d	; 61
    4d8c:	de b7       	in	r29, 0x3e	; 62
    4d8e:	64 97       	sbiw	r28, 0x14	; 20
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	f8 94       	cli
    4d94:	de bf       	out	0x3e, r29	; 62
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    4d9a:	21 e0       	ldi	r18, 0x01	; 1
    4d9c:	ae 01       	movw	r20, r28
    4d9e:	4f 5f       	subi	r20, 0xFF	; 255
    4da0:	5f 4f       	sbci	r21, 0xFF	; 255
    4da2:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    4da6:	88 23       	and	r24, r24
    4da8:	79 f0       	breq	.+30     	; 0x4dc8 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    4daa:	be 01       	movw	r22, r28
    4dac:	6f 5f       	subi	r22, 0xFF	; 255
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	80 e8       	ldi	r24, 0x80	; 128
    4db2:	2c e9       	ldi	r18, 0x9C	; 156
    4db4:	37 e0       	ldi	r19, 0x07	; 7
    4db6:	40 e0       	ldi	r20, 0x00	; 0
    4db8:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    4dbc:	89 2b       	or	r24, r25
    4dbe:	19 f4       	brne	.+6      	; 0x4dc6 <CONNECT+0x40>
		return CON_RN2483();
    4dc0:	0e 94 90 10 	call	0x2120	; 0x2120 <CON_RN2483>
    4dc4:	01 c0       	rjmp	.+2      	; 0x4dc8 <CONNECT+0x42>
	}else{
		return false;
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4dc8:	64 96       	adiw	r28, 0x14	; 20
    4dca:	0f b6       	in	r0, 0x3f	; 63
    4dcc:	f8 94       	cli
    4dce:	de bf       	out	0x3e, r29	; 62
    4dd0:	0f be       	out	0x3f, r0	; 63
    4dd2:	cd bf       	out	0x3d, r28	; 61
    4dd4:	df 91       	pop	r29
    4dd6:	cf 91       	pop	r28
    4dd8:	08 95       	ret

Disassembly of section .text.read_cols:

000036d2 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    36d2:	cf 92       	push	r12
    36d4:	df 92       	push	r13
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	a3 97       	sbiw	r28, 0x23	; 35
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    36f2:	63 e2       	ldi	r22, 0x23	; 35
    36f4:	ce 01       	movw	r24, r28
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	0e 94 46 33 	call	0x668c	; 0x668c <EM_get_collections>
	res[0]='\0';
    36fc:	f7 01       	movw	r30, r14
    36fe:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    3700:	10 e0       	ldi	r17, 0x00	; 0
    3702:	35 c0       	rjmp	.+106    	; 0x376e <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    3704:	81 2f       	mov	r24, r17
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	fc 01       	movw	r30, r24
    370a:	ee 0f       	add	r30, r30
    370c:	ff 1f       	adc	r31, r31
    370e:	ee 0f       	add	r30, r30
    3710:	ff 1f       	adc	r31, r31
    3712:	e8 0f       	add	r30, r24
    3714:	f9 1f       	adc	r31, r25
    3716:	21 e0       	ldi	r18, 0x01	; 1
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	2c 0f       	add	r18, r28
    371c:	3d 1f       	adc	r19, r29
    371e:	e2 0f       	add	r30, r18
    3720:	f3 1f       	adc	r31, r19
    3722:	23 81       	ldd	r18, Z+3	; 0x03
    3724:	2f 93       	push	r18
    3726:	22 81       	ldd	r18, Z+2	; 0x02
    3728:	2f 93       	push	r18
    372a:	21 81       	ldd	r18, Z+1	; 0x01
    372c:	2f 93       	push	r18
    372e:	20 81       	ld	r18, Z
    3730:	2f 93       	push	r18
    3732:	01 96       	adiw	r24, 0x01	; 1
    3734:	9f 93       	push	r25
    3736:	8f 93       	push	r24
    3738:	81 e4       	ldi	r24, 0x41	; 65
    373a:	94 e0       	ldi	r25, 0x04	; 4
    373c:	a0 e0       	ldi	r26, 0x00	; 0
    373e:	af 93       	push	r26
    3740:	9f 93       	push	r25
    3742:	8f 93       	push	r24
    3744:	0f 2e       	mov	r0, r31
    3746:	f0 e8       	ldi	r31, 0x80	; 128
    3748:	cf 2e       	mov	r12, r31
    374a:	fe e0       	ldi	r31, 0x0E	; 14
    374c:	df 2e       	mov	r13, r31
    374e:	f0 2d       	mov	r31, r0
    3750:	df 92       	push	r13
    3752:	cf 92       	push	r12
    3754:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
		strcat(res, arg);
    3758:	a6 01       	movw	r20, r12
    375a:	60 e8       	ldi	r22, 0x80	; 128
    375c:	c7 01       	movw	r24, r14
    375e:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    3762:	1f 5f       	subi	r17, 0xFF	; 255
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	17 30       	cpi	r17, 0x07	; 7
    3770:	48 f2       	brcs	.-110    	; 0x3704 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    3772:	a3 96       	adiw	r28, 0x23	; 35
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	ff 90       	pop	r15
    3786:	ef 90       	pop	r14
    3788:	df 90       	pop	r13
    378a:	cf 90       	pop	r12
    378c:	08 95       	ret

Disassembly of section .text.read_time:

00003fe6 <read_time>:

static void read_time(char res[]){
    3fe6:	0f 93       	push	r16
    3fe8:	1f 93       	push	r17
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	00 d0       	rcall	.+0      	; 0x3ff0 <read_time+0xa>
    3ff0:	00 d0       	rcall	.+0      	; 0x3ff2 <read_time+0xc>
    3ff2:	00 d0       	rcall	.+0      	; 0x3ff4 <read_time+0xe>
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	18 2f       	mov	r17, r24
    3ffa:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    3ffc:	0e 94 08 33 	call	0x6610	; 0x6610 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    4000:	ce 01       	movw	r24, r28
    4002:	01 96       	adiw	r24, 0x01	; 1
    4004:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    4008:	88 23       	and	r24, r24
    400a:	51 f0       	breq	.+20     	; 0x4020 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    400c:	24 e1       	ldi	r18, 0x14	; 20
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	47 e5       	ldi	r20, 0x57	; 87
    4012:	54 e0       	ldi	r21, 0x04	; 4
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	81 2f       	mov	r24, r17
    4018:	90 2f       	mov	r25, r16
    401a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
    401e:	21 c0       	rjmp	.+66     	; 0x4062 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    4020:	59 81       	ldd	r21, Y+1	; 0x01
    4022:	4a 81       	ldd	r20, Y+2	; 0x02
    4024:	3b 81       	ldd	r19, Y+3	; 0x03
    4026:	2c 81       	ldd	r18, Y+4	; 0x04
    4028:	9d 81       	ldd	r25, Y+5	; 0x05
    402a:	8e 81       	ldd	r24, Y+6	; 0x06
    402c:	1f 92       	push	r1
    402e:	5f 93       	push	r21
    4030:	1f 92       	push	r1
    4032:	4f 93       	push	r20
    4034:	1f 92       	push	r1
    4036:	3f 93       	push	r19
    4038:	1f 92       	push	r1
    403a:	2f 93       	push	r18
    403c:	1f 92       	push	r1
    403e:	9f 93       	push	r25
    4040:	1f 92       	push	r1
    4042:	8f 93       	push	r24
    4044:	8b e6       	ldi	r24, 0x6B	; 107
    4046:	94 e0       	ldi	r25, 0x04	; 4
    4048:	a0 e0       	ldi	r26, 0x00	; 0
    404a:	af 93       	push	r26
    404c:	9f 93       	push	r25
    404e:	8f 93       	push	r24
    4050:	0f 93       	push	r16
    4052:	1f 93       	push	r17
    4054:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
	}
}
    4062:	26 96       	adiw	r28, 0x06	; 6
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	08 95       	ret

Disassembly of section .text.write_deveui:

0000437a <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    437a:	cf 92       	push	r12
    437c:	df 92       	push	r13
    437e:	ef 92       	push	r14
    4380:	0f 93       	push	r16
    4382:	1f 93       	push	r17
    4384:	cf 93       	push	r28
    4386:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4388:	22 e0       	ldi	r18, 0x02	; 2
    438a:	40 e8       	ldi	r20, 0x80	; 128
    438c:	5e e0       	ldi	r21, 0x0E	; 14
    438e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    4392:	c8 2f       	mov	r28, r24
    4394:	88 23       	and	r24, r24
    4396:	29 f1       	breq	.+74     	; 0x43e2 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4398:	80 e8       	ldi	r24, 0x80	; 128
    439a:	9e e0       	ldi	r25, 0x0E	; 14
    439c:	6c 01       	movw	r12, r24
    439e:	20 e8       	ldi	r18, 0x80	; 128
    43a0:	e2 2e       	mov	r14, r18
    43a2:	8e 2d       	mov	r24, r14
    43a4:	b6 01       	movw	r22, r12
    43a6:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    43aa:	40 97       	sbiw	r24, 0x10	; 16
    43ac:	c9 f4       	brne	.+50     	; 0x43e0 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    43ae:	8e 2d       	mov	r24, r14
    43b0:	b6 01       	movw	r22, r12
    43b2:	0e 94 b3 2c 	call	0x5966	; 0x5966 <EM_set_deveui>
    43b6:	c8 2f       	mov	r28, r24
    43b8:	81 11       	cpse	r24, r1
    43ba:	09 c0       	rjmp	.+18     	; 0x43ce <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    43bc:	27 e0       	ldi	r18, 0x07	; 7
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	49 e8       	ldi	r20, 0x89	; 137
    43c2:	54 e0       	ldi	r21, 0x04	; 4
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	c8 01       	movw	r24, r16
    43c8:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return false;
    43cc:	0a c0       	rjmp	.+20     	; 0x43e2 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    43ce:	28 e0       	ldi	r18, 0x08	; 8
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e9       	ldi	r20, 0x90	; 144
    43d4:	54 e0       	ldi	r21, 0x04	; 4
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	c8 01       	movw	r24, r16
    43da:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    43de:	01 c0       	rjmp	.+2      	; 0x43e2 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    43e0:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    43e2:	8c 2f       	mov	r24, r28
    43e4:	cf 91       	pop	r28
    43e6:	1f 91       	pop	r17
    43e8:	0f 91       	pop	r16
    43ea:	ef 90       	pop	r14
    43ec:	df 90       	pop	r13
    43ee:	cf 90       	pop	r12
    43f0:	08 95       	ret

Disassembly of section .text.write_appeui:

000043f2 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    43f2:	cf 92       	push	r12
    43f4:	df 92       	push	r13
    43f6:	ef 92       	push	r14
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	cf 93       	push	r28
    43fe:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4400:	22 e0       	ldi	r18, 0x02	; 2
    4402:	40 e8       	ldi	r20, 0x80	; 128
    4404:	5e e0       	ldi	r21, 0x0E	; 14
    4406:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    440a:	c8 2f       	mov	r28, r24
    440c:	88 23       	and	r24, r24
    440e:	29 f1       	breq	.+74     	; 0x445a <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4410:	80 e8       	ldi	r24, 0x80	; 128
    4412:	9e e0       	ldi	r25, 0x0E	; 14
    4414:	6c 01       	movw	r12, r24
    4416:	20 e8       	ldi	r18, 0x80	; 128
    4418:	e2 2e       	mov	r14, r18
    441a:	8e 2d       	mov	r24, r14
    441c:	b6 01       	movw	r22, r12
    441e:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4422:	40 97       	sbiw	r24, 0x10	; 16
    4424:	c9 f4       	brne	.+50     	; 0x4458 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    4426:	8e 2d       	mov	r24, r14
    4428:	b6 01       	movw	r22, r12
    442a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <EM_set_appeui>
    442e:	c8 2f       	mov	r28, r24
    4430:	81 11       	cpse	r24, r1
    4432:	09 c0       	rjmp	.+18     	; 0x4446 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    4434:	27 e0       	ldi	r18, 0x07	; 7
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	49 e8       	ldi	r20, 0x89	; 137
    443a:	54 e0       	ldi	r21, 0x04	; 4
    443c:	60 e0       	ldi	r22, 0x00	; 0
    443e:	c8 01       	movw	r24, r16
    4440:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return false;
    4444:	0a c0       	rjmp	.+20     	; 0x445a <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4446:	28 e0       	ldi	r18, 0x08	; 8
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e9       	ldi	r20, 0x90	; 144
    444c:	54 e0       	ldi	r21, 0x04	; 4
    444e:	60 e0       	ldi	r22, 0x00	; 0
    4450:	c8 01       	movw	r24, r16
    4452:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    4456:	01 c0       	rjmp	.+2      	; 0x445a <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4458:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    445a:	8c 2f       	mov	r24, r28
    445c:	cf 91       	pop	r28
    445e:	1f 91       	pop	r17
    4460:	0f 91       	pop	r16
    4462:	ef 90       	pop	r14
    4464:	df 90       	pop	r13
    4466:	cf 90       	pop	r12
    4468:	08 95       	ret

Disassembly of section .text.write_appkey:

0000446a <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    446a:	cf 92       	push	r12
    446c:	df 92       	push	r13
    446e:	ef 92       	push	r14
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4478:	22 e0       	ldi	r18, 0x02	; 2
    447a:	40 e8       	ldi	r20, 0x80	; 128
    447c:	5e e0       	ldi	r21, 0x0E	; 14
    447e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    4482:	c8 2f       	mov	r28, r24
    4484:	88 23       	and	r24, r24
    4486:	29 f1       	breq	.+74     	; 0x44d2 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    4488:	80 e8       	ldi	r24, 0x80	; 128
    448a:	9e e0       	ldi	r25, 0x0E	; 14
    448c:	6c 01       	movw	r12, r24
    448e:	20 e8       	ldi	r18, 0x80	; 128
    4490:	e2 2e       	mov	r14, r18
    4492:	8e 2d       	mov	r24, r14
    4494:	b6 01       	movw	r22, r12
    4496:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    449a:	80 97       	sbiw	r24, 0x20	; 32
    449c:	c9 f4       	brne	.+50     	; 0x44d0 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    449e:	8e 2d       	mov	r24, r14
    44a0:	b6 01       	movw	r22, r12
    44a2:	0e 94 ed 2c 	call	0x59da	; 0x59da <EM_set_appkey>
    44a6:	c8 2f       	mov	r28, r24
    44a8:	81 11       	cpse	r24, r1
    44aa:	09 c0       	rjmp	.+18     	; 0x44be <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    44ac:	27 e0       	ldi	r18, 0x07	; 7
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	49 e8       	ldi	r20, 0x89	; 137
    44b2:	54 e0       	ldi	r21, 0x04	; 4
    44b4:	60 e0       	ldi	r22, 0x00	; 0
    44b6:	c8 01       	movw	r24, r16
    44b8:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return false;
    44bc:	0a c0       	rjmp	.+20     	; 0x44d2 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    44be:	28 e0       	ldi	r18, 0x08	; 8
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	40 e9       	ldi	r20, 0x90	; 144
    44c4:	54 e0       	ldi	r21, 0x04	; 4
    44c6:	60 e0       	ldi	r22, 0x00	; 0
    44c8:	c8 01       	movw	r24, r16
    44ca:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    44ce:	01 c0       	rjmp	.+2      	; 0x44d2 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    44d0:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    44d2:	8c 2f       	mov	r24, r28
    44d4:	cf 91       	pop	r28
    44d6:	1f 91       	pop	r17
    44d8:	0f 91       	pop	r16
    44da:	ef 90       	pop	r14
    44dc:	df 90       	pop	r13
    44de:	cf 90       	pop	r12
    44e0:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

0000509c <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    509c:	0f 93       	push	r16
    509e:	1f 93       	push	r17
    50a0:	cf 93       	push	r28
    50a2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    50a4:	22 e0       	ldi	r18, 0x02	; 2
    50a6:	40 e8       	ldi	r20, 0x80	; 128
    50a8:	5e e0       	ldi	r21, 0x0E	; 14
    50aa:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    50ae:	c8 2f       	mov	r28, r24
    50b0:	88 23       	and	r24, r24
    50b2:	a9 f0       	breq	.+42     	; 0x50de <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    50b4:	80 e8       	ldi	r24, 0x80	; 128
    50b6:	9e e0       	ldi	r25, 0x0E	; 14
    50b8:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <is_float>
    50bc:	c8 2f       	mov	r28, r24
    50be:	88 23       	and	r24, r24
    50c0:	71 f0       	breq	.+28     	; 0x50de <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    50c2:	80 e8       	ldi	r24, 0x80	; 128
    50c4:	9e e0       	ldi	r25, 0x0E	; 14
    50c6:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <str2flaot>
	EM_set_ppmfactor(val);
    50ca:	0e 94 9c 33 	call	0x6738	; 0x6738 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    50ce:	28 e0       	ldi	r18, 0x08	; 8
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	40 e9       	ldi	r20, 0x90	; 144
    50d4:	54 e0       	ldi	r21, 0x04	; 4
    50d6:	60 e0       	ldi	r22, 0x00	; 0
    50d8:	c8 01       	movw	r24, r16
    50da:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
}
    50de:	8c 2f       	mov	r24, r28
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	08 95       	ret

Disassembly of section .text.write_RRL:

000050e8 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    50f0:	22 e0       	ldi	r18, 0x02	; 2
    50f2:	40 e8       	ldi	r20, 0x80	; 128
    50f4:	5e e0       	ldi	r21, 0x0E	; 14
    50f6:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    50fa:	c8 2f       	mov	r28, r24
    50fc:	88 23       	and	r24, r24
    50fe:	a9 f0       	breq	.+42     	; 0x512a <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    5100:	80 e8       	ldi	r24, 0x80	; 128
    5102:	9e e0       	ldi	r25, 0x0E	; 14
    5104:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <is_float>
    5108:	c8 2f       	mov	r28, r24
    510a:	88 23       	and	r24, r24
    510c:	71 f0       	breq	.+28     	; 0x512a <write_RRL+0x42>
	
	float val=str2flaot(arg);
    510e:	80 e8       	ldi	r24, 0x80	; 128
    5110:	9e e0       	ldi	r25, 0x0E	; 14
    5112:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <str2flaot>
	EM_set_RRL(val);
    5116:	0e 94 a3 33 	call	0x6746	; 0x6746 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    511a:	28 e0       	ldi	r18, 0x08	; 8
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	40 e9       	ldi	r20, 0x90	; 144
    5120:	54 e0       	ldi	r21, 0x04	; 4
    5122:	60 e0       	ldi	r22, 0x00	; 0
    5124:	c8 01       	movw	r24, r16
    5126:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
}
    512a:	8c 2f       	mov	r24, r28
    512c:	cf 91       	pop	r28
    512e:	1f 91       	pop	r17
    5130:	0f 91       	pop	r16
    5132:	08 95       	ret

Disassembly of section .text.write_VCC:

00005134 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5134:	0f 93       	push	r16
    5136:	1f 93       	push	r17
    5138:	cf 93       	push	r28
    513a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    513c:	22 e0       	ldi	r18, 0x02	; 2
    513e:	40 e8       	ldi	r20, 0x80	; 128
    5140:	5e e0       	ldi	r21, 0x0E	; 14
    5142:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    5146:	c8 2f       	mov	r28, r24
    5148:	88 23       	and	r24, r24
    514a:	a9 f0       	breq	.+42     	; 0x5176 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    514c:	80 e8       	ldi	r24, 0x80	; 128
    514e:	9e e0       	ldi	r25, 0x0E	; 14
    5150:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <is_float>
    5154:	c8 2f       	mov	r28, r24
    5156:	88 23       	and	r24, r24
    5158:	71 f0       	breq	.+28     	; 0x5176 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    515a:	80 e8       	ldi	r24, 0x80	; 128
    515c:	9e e0       	ldi	r25, 0x0E	; 14
    515e:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <str2flaot>
	EM_set_Vcc(val);
    5162:	0e 94 aa 33 	call	0x6754	; 0x6754 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    5166:	28 e0       	ldi	r18, 0x08	; 8
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	40 e9       	ldi	r20, 0x90	; 144
    516c:	54 e0       	ldi	r21, 0x04	; 4
    516e:	60 e0       	ldi	r22, 0x00	; 0
    5170:	c8 01       	movw	r24, r16
    5172:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
}
    5176:	8c 2f       	mov	r24, r28
    5178:	cf 91       	pop	r28
    517a:	1f 91       	pop	r17
    517c:	0f 91       	pop	r16
    517e:	08 95       	ret

Disassembly of section .text.get_time_par:

00005c34 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    5c34:	cf 93       	push	r28
    5c36:	df 93       	push	r29
    5c38:	00 d0       	rcall	.+0      	; 0x5c3a <get_time_par+0x6>
    5c3a:	1f 92       	push	r1
    5c3c:	cd b7       	in	r28, 0x3d	; 61
    5c3e:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    5c40:	fc 01       	movw	r30, r24
    5c42:	e6 0f       	add	r30, r22
    5c44:	f1 1d       	adc	r31, r1
    5c46:	80 81       	ld	r24, Z
    5c48:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    5c4a:	81 81       	ldd	r24, Z+1	; 0x01
    5c4c:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    5c4e:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    5c50:	be 01       	movw	r22, r28
    5c52:	6f 5f       	subi	r22, 0xFF	; 255
    5c54:	7f 4f       	sbci	r23, 0xFF	; 255
    5c56:	80 e8       	ldi	r24, 0x80	; 128
    5c58:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
}
    5c5c:	0f 90       	pop	r0
    5c5e:	0f 90       	pop	r0
    5c60:	0f 90       	pop	r0
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	08 95       	ret

Disassembly of section .text.write_cols:

00002664 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    2664:	4f 92       	push	r4
    2666:	5f 92       	push	r5
    2668:	6f 92       	push	r6
    266a:	7f 92       	push	r7
    266c:	8f 92       	push	r8
    266e:	af 92       	push	r10
    2670:	bf 92       	push	r11
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	a3 97       	sbiw	r28, 0x23	; 35
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	3b 01       	movw	r6, r22
    2694:	88 2e       	mov	r8, r24
    2696:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    2698:	22 e0       	ldi	r18, 0x02	; 2
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5e e0       	ldi	r21, 0x0E	; 14
    269e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    26a2:	18 2f       	mov	r17, r24
    26a4:	88 23       	and	r24, r24
    26a6:	09 f4       	brne	.+2      	; 0x26aa <write_cols+0x46>
    26a8:	5d c0       	rjmp	.+186    	; 0x2764 <write_cols+0x100>
	index=atoi(arg);
    26aa:	80 e8       	ldi	r24, 0x80	; 128
    26ac:	9e e0       	ldi	r25, 0x0E	; 14
    26ae:	6c 01       	movw	r12, r24
    26b0:	20 e8       	ldi	r18, 0x80	; 128
    26b2:	e2 2e       	mov	r14, r18
    26b4:	8e 2d       	mov	r24, r14
    26b6:	b6 01       	movw	r22, r12
    26b8:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
	if(index<1 || index>7) return false;
    26bc:	0f ef       	ldi	r16, 0xFF	; 255
    26be:	08 0f       	add	r16, r24
    26c0:	07 30       	cpi	r16, 0x07	; 7
    26c2:	08 f0       	brcs	.+2      	; 0x26c6 <write_cols+0x62>
    26c4:	4a c0       	rjmp	.+148    	; 0x275a <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    26c6:	23 e0       	ldi	r18, 0x03	; 3
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5e e0       	ldi	r21, 0x0E	; 14
    26cc:	88 2d       	mov	r24, r8
    26ce:	b3 01       	movw	r22, r6
    26d0:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    26d4:	18 2f       	mov	r17, r24
    26d6:	88 23       	and	r24, r24
    26d8:	09 f4       	brne	.+2      	; 0x26dc <write_cols+0x78>
    26da:	44 c0       	rjmp	.+136    	; 0x2764 <write_cols+0x100>
	samplings=atoi(arg);
    26dc:	8e 2d       	mov	r24, r14
    26de:	b6 01       	movw	r22, r12
    26e0:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
    26e4:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    26e6:	02 97       	sbiw	r24, 0x02	; 2
    26e8:	8b 32       	cpi	r24, 0x2B	; 43
    26ea:	91 40       	sbci	r25, 0x01	; 1
    26ec:	c0 f5       	brcc	.+112    	; 0x275e <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    26ee:	24 e0       	ldi	r18, 0x04	; 4
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5e e0       	ldi	r21, 0x0E	; 14
    26f4:	88 2d       	mov	r24, r8
    26f6:	b3 01       	movw	r22, r6
    26f8:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    26fc:	18 2f       	mov	r17, r24
    26fe:	88 23       	and	r24, r24
    2700:	89 f1       	breq	.+98     	; 0x2764 <write_cols+0x100>
	samplingInterval=atoi(arg);
    2702:	8e 2d       	mov	r24, r14
    2704:	b6 01       	movw	r22, r12
    2706:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
    270a:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    270c:	02 97       	sbiw	r24, 0x02	; 2
    270e:	87 35       	cpi	r24, 0x57	; 87
    2710:	92 40       	sbci	r25, 0x02	; 2
    2712:	38 f5       	brcc	.+78     	; 0x2762 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2714:	63 e2       	ldi	r22, 0x23	; 35
    2716:	ce 01       	movw	r24, r28
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	7c 01       	movw	r14, r24
    271c:	0e 94 46 33 	call	0x668c	; 0x668c <EM_get_collections>
	
	cols[index].samplings=samplings;
    2720:	80 2f       	mov	r24, r16
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	fc 01       	movw	r30, r24
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	e8 0f       	add	r30, r24
    2730:	f9 1f       	adc	r31, r25
    2732:	ee 0d       	add	r30, r14
    2734:	ff 1d       	adc	r31, r15
    2736:	51 82       	std	Z+1, r5	; 0x01
    2738:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    273a:	d3 82       	std	Z+3, r13	; 0x03
    273c:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    273e:	b7 01       	movw	r22, r14
    2740:	80 e8       	ldi	r24, 0x80	; 128
    2742:	43 e2       	ldi	r20, 0x23	; 35
    2744:	0e 94 b1 33 	call	0x6762	; 0x6762 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    2748:	28 e0       	ldi	r18, 0x08	; 8
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e9       	ldi	r20, 0x90	; 144
    274e:	54 e0       	ldi	r21, 0x04	; 4
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	c5 01       	movw	r24, r10
    2754:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;	
    2758:	05 c0       	rjmp	.+10     	; 0x2764 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    275a:	10 e0       	ldi	r17, 0x00	; 0
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    275e:	10 e0       	ldi	r17, 0x00	; 0
    2760:	01 c0       	rjmp	.+2      	; 0x2764 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    2762:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    2764:	81 2f       	mov	r24, r17
    2766:	a3 96       	adiw	r28, 0x23	; 35
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	bf 90       	pop	r11
    2784:	af 90       	pop	r10
    2786:	8f 90       	pop	r8
    2788:	7f 90       	pop	r7
    278a:	6f 90       	pop	r6
    278c:	5f 90       	pop	r5
    278e:	4f 90       	pop	r4
    2790:	08 95       	ret

Disassembly of section .text.write_heat_up:

00005180 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    5180:	0f 93       	push	r16
    5182:	1f 93       	push	r17
    5184:	cf 93       	push	r28
    5186:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5188:	22 e0       	ldi	r18, 0x02	; 2
    518a:	40 e8       	ldi	r20, 0x80	; 128
    518c:	5e e0       	ldi	r21, 0x0E	; 14
    518e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    5192:	c8 2f       	mov	r28, r24
    5194:	88 23       	and	r24, r24
    5196:	a9 f0       	breq	.+42     	; 0x51c2 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    5198:	60 e8       	ldi	r22, 0x80	; 128
    519a:	7e e0       	ldi	r23, 0x0E	; 14
    519c:	80 e8       	ldi	r24, 0x80	; 128
    519e:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
	
	if(val<1 || val>200) return false;
    51a2:	9f ef       	ldi	r25, 0xFF	; 255
    51a4:	98 0f       	add	r25, r24
    51a6:	98 3c       	cpi	r25, 0xC8	; 200
    51a8:	58 f4       	brcc	.+22     	; 0x51c0 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    51aa:	0e 94 03 34 	call	0x6806	; 0x6806 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    51ae:	28 e0       	ldi	r18, 0x08	; 8
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	40 e9       	ldi	r20, 0x90	; 144
    51b4:	54 e0       	ldi	r21, 0x04	; 4
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	c8 01       	movw	r24, r16
    51ba:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
    51be:	01 c0       	rjmp	.+2      	; 0x51c2 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    51c0:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    51c2:	8c 2f       	mov	r24, r28
    51c4:	cf 91       	pop	r28
    51c6:	1f 91       	pop	r17
    51c8:	0f 91       	pop	r16
    51ca:	08 95       	ret

Disassembly of section .text.write_air_pump:

00004e7c <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    4e7c:	0f 93       	push	r16
    4e7e:	1f 93       	push	r17
    4e80:	cf 93       	push	r28
    4e82:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4e84:	22 e0       	ldi	r18, 0x02	; 2
    4e86:	40 e8       	ldi	r20, 0x80	; 128
    4e88:	5e e0       	ldi	r21, 0x0E	; 14
    4e8a:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    4e8e:	c8 2f       	mov	r28, r24
    4e90:	88 23       	and	r24, r24
    4e92:	b9 f0       	breq	.+46     	; 0x4ec2 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    4e94:	60 e8       	ldi	r22, 0x80	; 128
    4e96:	7e e0       	ldi	r23, 0x0E	; 14
    4e98:	80 e8       	ldi	r24, 0x80	; 128
    4e9a:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
	
	if(val<5 || val>1000) return false;
    4e9e:	9c 01       	movw	r18, r24
    4ea0:	25 50       	subi	r18, 0x05	; 5
    4ea2:	31 09       	sbc	r19, r1
    4ea4:	24 3e       	cpi	r18, 0xE4	; 228
    4ea6:	33 40       	sbci	r19, 0x03	; 3
    4ea8:	58 f4       	brcc	.+22     	; 0x4ec0 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    4eaa:	0e 94 0f 34 	call	0x681e	; 0x681e <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    4eae:	28 e0       	ldi	r18, 0x08	; 8
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	40 e9       	ldi	r20, 0x90	; 144
    4eb4:	54 e0       	ldi	r21, 0x04	; 4
    4eb6:	60 e0       	ldi	r22, 0x00	; 0
    4eb8:	c8 01       	movw	r24, r16
    4eba:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
    4ebe:	01 c0       	rjmp	.+2      	; 0x4ec2 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    4ec0:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4ec2:	8c 2f       	mov	r24, r28
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
    4eca:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000051cc <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    51cc:	0f 93       	push	r16
    51ce:	1f 93       	push	r17
    51d0:	cf 93       	push	r28
    51d2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    51d4:	22 e0       	ldi	r18, 0x02	; 2
    51d6:	40 e8       	ldi	r20, 0x80	; 128
    51d8:	5e e0       	ldi	r21, 0x0E	; 14
    51da:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    51de:	c8 2f       	mov	r28, r24
    51e0:	88 23       	and	r24, r24
    51e2:	a9 f0       	breq	.+42     	; 0x520e <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    51e4:	60 e8       	ldi	r22, 0x80	; 128
    51e6:	7e e0       	ldi	r23, 0x0E	; 14
    51e8:	80 e8       	ldi	r24, 0x80	; 128
    51ea:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
	
	if(val<6 || val>24) return false;
    51ee:	9a ef       	ldi	r25, 0xFA	; 250
    51f0:	98 0f       	add	r25, r24
    51f2:	93 31       	cpi	r25, 0x13	; 19
    51f4:	58 f4       	brcc	.+22     	; 0x520c <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    51f6:	0e 94 1b 34 	call	0x6836	; 0x6836 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    51fa:	28 e0       	ldi	r18, 0x08	; 8
    51fc:	30 e0       	ldi	r19, 0x00	; 0
    51fe:	40 e9       	ldi	r20, 0x90	; 144
    5200:	54 e0       	ldi	r21, 0x04	; 4
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	c8 01       	movw	r24, r16
    5206:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
    520a:	01 c0       	rjmp	.+2      	; 0x520e <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    520c:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    520e:	8c 2f       	mov	r24, r28
    5210:	cf 91       	pop	r28
    5212:	1f 91       	pop	r17
    5214:	0f 91       	pop	r16
    5216:	08 95       	ret

Disassembly of section .text.write_reset:

00003100 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	a3 97       	sbiw	r28, 0x23	; 35
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    311a:	68 e9       	ldi	r22, 0x98	; 152
    311c:	74 e0       	ldi	r23, 0x04	; 4
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	0e 94 b3 2c 	call	0x5966	; 0x5966 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    3124:	68 e9       	ldi	r22, 0x98	; 152
    3126:	74 e0       	ldi	r23, 0x04	; 4
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    312e:	69 ea       	ldi	r22, 0xA9	; 169
    3130:	74 e0       	ldi	r23, 0x04	; 4
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	0e 94 ed 2c 	call	0x59da	; 0x59da <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	80 e8       	ldi	r24, 0x80	; 128
    313e:	9f e3       	ldi	r25, 0x3F	; 63
    3140:	0e 94 9c 33 	call	0x6738	; 0x6738 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	70 e4       	ldi	r23, 0x40	; 64
    3148:	8c e1       	ldi	r24, 0x1C	; 28
    314a:	95 e4       	ldi	r25, 0x45	; 69
    314c:	0e 94 a3 33 	call	0x6746	; 0x6746 <EM_set_RRL>
	EM_set_Vcc(5.00);
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	80 ea       	ldi	r24, 0xA0	; 160
    3156:	90 e4       	ldi	r25, 0x40	; 64
    3158:	0e 94 aa 33 	call	0x6754	; 0x6754 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	0e 94 03 34 	call	0x6806	; 0x6806 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    3162:	85 e0       	ldi	r24, 0x05	; 5
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 0f 34 	call	0x681e	; 0x681e <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    316a:	86 e0       	ldi	r24, 0x06	; 6
    316c:	0e 94 1b 34 	call	0x6836	; 0x6836 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	1a c0       	rjmp	.+52     	; 0x31a8 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    3174:	e8 2f       	mov	r30, r24
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	9f 01       	movw	r18, r30
    317a:	22 0f       	add	r18, r18
    317c:	33 1f       	adc	r19, r19
    317e:	22 0f       	add	r18, r18
    3180:	33 1f       	adc	r19, r19
    3182:	e2 0f       	add	r30, r18
    3184:	f3 1f       	adc	r31, r19
    3186:	21 e0       	ldi	r18, 0x01	; 1
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	2c 0f       	add	r18, r28
    318c:	3d 1f       	adc	r19, r29
    318e:	e2 0f       	add	r30, r18
    3190:	f3 1f       	adc	r31, r19
    3192:	92 e0       	ldi	r25, 0x02	; 2
    3194:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    3196:	22 e0       	ldi	r18, 0x02	; 2
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	31 83       	std	Z+1, r19	; 0x01
    319c:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    319e:	23 e0       	ldi	r18, 0x03	; 3
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	33 83       	std	Z+3, r19	; 0x03
    31a4:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    31a6:	8f 5f       	subi	r24, 0xFF	; 255
    31a8:	87 30       	cpi	r24, 0x07	; 7
    31aa:	20 f3       	brcs	.-56     	; 0x3174 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    31ac:	be 01       	movw	r22, r28
    31ae:	6f 5f       	subi	r22, 0xFF	; 255
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	80 e8       	ldi	r24, 0x80	; 128
    31b4:	43 e2       	ldi	r20, 0x23	; 35
    31b6:	0e 94 b1 33 	call	0x6762	; 0x6762 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    31ba:	23 e1       	ldi	r18, 0x13	; 19
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	4a ec       	ldi	r20, 0xCA	; 202
    31c0:	54 e0       	ldi	r21, 0x04	; 4
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	c8 01       	movw	r24, r16
    31c6:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
}
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	a3 96       	adiw	r28, 0x23	; 35
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	08 95       	ret

Disassembly of section .text.write_time:

00002f0a <write_time>:

static bool write_time(const char cmd[], char res[]){
    2f0a:	6f 92       	push	r6
    2f0c:	7f 92       	push	r7
    2f0e:	8f 92       	push	r8
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <write_time+0x16>
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <write_time+0x18>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <write_time+0x1a>
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	3b 01       	movw	r6, r22
    2f2a:	88 2e       	mov	r8, r24
    2f2c:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2f2e:	0e 94 08 33 	call	0x6610	; 0x6610 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2f32:	22 e0       	ldi	r18, 0x02	; 2
    2f34:	40 e8       	ldi	r20, 0x80	; 128
    2f36:	5e e0       	ldi	r21, 0x0E	; 14
    2f38:	88 2d       	mov	r24, r8
    2f3a:	b3 01       	movw	r22, r6
    2f3c:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    2f40:	18 2f       	mov	r17, r24
    2f42:	88 23       	and	r24, r24
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <write_time+0x3e>
    2f46:	4e c0       	rjmp	.+156    	; 0x2fe4 <write_time+0xda>
	if(strlen(arg)!=17){
    2f48:	60 e8       	ldi	r22, 0x80	; 128
    2f4a:	7e e0       	ldi	r23, 0x0E	; 14
    2f4c:	80 e8       	ldi	r24, 0x80	; 128
    2f4e:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    2f52:	41 97       	sbiw	r24, 0x11	; 17
    2f54:	49 f0       	breq	.+18     	; 0x2f68 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    2f56:	25 e2       	ldi	r18, 0x25	; 37
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4d ed       	ldi	r20, 0xDD	; 221
    2f5c:	54 e0       	ldi	r21, 0x04	; 4
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	c7 01       	movw	r24, r14
    2f62:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    2f66:	3e c0       	rjmp	.+124    	; 0x2fe4 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	80 e8       	ldi	r24, 0x80	; 128
    2f6c:	9e e0       	ldi	r25, 0x0E	; 14
    2f6e:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <get_time_par>
    2f72:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    2f74:	63 e0       	ldi	r22, 0x03	; 3
    2f76:	80 e8       	ldi	r24, 0x80	; 128
    2f78:	9e e0       	ldi	r25, 0x0E	; 14
    2f7a:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <get_time_par>
    2f7e:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    2f80:	66 e0       	ldi	r22, 0x06	; 6
    2f82:	80 e8       	ldi	r24, 0x80	; 128
    2f84:	9e e0       	ldi	r25, 0x0E	; 14
    2f86:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <get_time_par>
    2f8a:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    2f8c:	69 e0       	ldi	r22, 0x09	; 9
    2f8e:	80 e8       	ldi	r24, 0x80	; 128
    2f90:	9e e0       	ldi	r25, 0x0E	; 14
    2f92:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <get_time_par>
    2f96:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    2f98:	6c e0       	ldi	r22, 0x0C	; 12
    2f9a:	80 e8       	ldi	r24, 0x80	; 128
    2f9c:	9e e0       	ldi	r25, 0x0E	; 14
    2f9e:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <get_time_par>
    2fa2:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2fa4:	6f e0       	ldi	r22, 0x0F	; 15
    2fa6:	80 e8       	ldi	r24, 0x80	; 128
    2fa8:	9e e0       	ldi	r25, 0x0E	; 14
    2faa:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2fae:	48 2f       	mov	r20, r24
    2fb0:	5d 2d       	mov	r21, r13
    2fb2:	60 2f       	mov	r22, r16
    2fb4:	76 2d       	mov	r23, r6
    2fb6:	87 2d       	mov	r24, r7
    2fb8:	98 2d       	mov	r25, r8
    2fba:	0e 94 9e 24 	call	0x493c	; 0x493c <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2fbe:	88 23       	and	r24, r24
    2fc0:	49 f0       	breq	.+18     	; 0x2fd4 <write_time+0xca>
		strcpy(res, "Failed to set time");
    2fc2:	23 e1       	ldi	r18, 0x13	; 19
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	42 e0       	ldi	r20, 0x02	; 2
    2fc8:	55 e0       	ldi	r21, 0x05	; 5
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	c7 01       	movw	r24, r14
    2fce:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    2fd2:	08 c0       	rjmp	.+16     	; 0x2fe4 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2fd4:	28 e0       	ldi	r18, 0x08	; 8
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e9       	ldi	r20, 0x90	; 144
    2fda:	54 e0       	ldi	r21, 0x04	; 4
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	c7 01       	movw	r24, r14
    2fe0:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
	return true;
}
    2fe4:	81 2f       	mov	r24, r17
    2fe6:	26 96       	adiw	r28, 0x06	; 6
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	8f 90       	pop	r8
    3002:	7f 90       	pop	r7
    3004:	6f 90       	pop	r6
    3006:	08 95       	ret

Disassembly of section .text.handle_read:

00001910 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	68 97       	sbiw	r28, 0x18	; 24
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	6b 01       	movw	r12, r22
    1932:	e8 2e       	mov	r14, r24
    1934:	f4 2e       	mov	r15, r20
    1936:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	ae 01       	movw	r20, r28
    193c:	4f 5f       	subi	r20, 0xFF	; 255
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    1944:	18 2f       	mov	r17, r24
    1946:	88 23       	and	r24, r24
    1948:	09 f4       	brne	.+2      	; 0x194c <handle_read+0x3c>
    194a:	23 c1       	rjmp	.+582    	; 0x1b92 <handle_read+0x282>
    194c:	8e 2d       	mov	r24, r14
    194e:	b6 01       	movw	r22, r12
    1950:	0e 94 ed 26 	call	0x4dda	; 0x4dda <count_parameters>
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	09 f4       	brne	.+2      	; 0x195a <handle_read+0x4a>
    1958:	1b c1       	rjmp	.+566    	; 0x1b90 <handle_read+0x280>
	
	if (strcmp(par, RW_DEVEUI)==0)
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	6c 01       	movw	r12, r24
    1960:	20 e8       	ldi	r18, 0x80	; 128
    1962:	e2 2e       	mov	r14, r18
    1964:	25 e1       	ldi	r18, 0x15	; 21
    1966:	35 e0       	ldi	r19, 0x05	; 5
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	8e 2d       	mov	r24, r14
    196c:	b6 01       	movw	r22, r12
    196e:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1972:	89 2b       	or	r24, r25
    1974:	29 f4       	brne	.+10     	; 0x1980 <handle_read+0x70>
	{
		EM_get_deveui(res);
    1976:	8f 2d       	mov	r24, r15
    1978:	90 2f       	mov	r25, r16
    197a:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <EM_get_deveui>
    197e:	09 c1       	rjmp	.+530    	; 0x1b92 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1980:	2c e1       	ldi	r18, 0x1C	; 28
    1982:	35 e0       	ldi	r19, 0x05	; 5
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	8e 2d       	mov	r24, r14
    1988:	b6 01       	movw	r22, r12
    198a:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    198e:	89 2b       	or	r24, r25
    1990:	29 f4       	brne	.+10     	; 0x199c <handle_read+0x8c>
	{
		EM_get_appeui(res);
    1992:	8f 2d       	mov	r24, r15
    1994:	90 2f       	mov	r25, r16
    1996:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <EM_get_appeui>
    199a:	fb c0       	rjmp	.+502    	; 0x1b92 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    199c:	23 e2       	ldi	r18, 0x23	; 35
    199e:	35 e0       	ldi	r19, 0x05	; 5
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	8e 2d       	mov	r24, r14
    19a4:	b6 01       	movw	r22, r12
    19a6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    19aa:	89 2b       	or	r24, r25
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    19ae:	8f 2d       	mov	r24, r15
    19b0:	90 2f       	mov	r25, r16
    19b2:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <EM_get_appkey>
    19b6:	ed c0       	rjmp	.+474    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    19b8:	2a e2       	ldi	r18, 0x2A	; 42
    19ba:	35 e0       	ldi	r19, 0x05	; 5
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	8e 2d       	mov	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    19c6:	89 2b       	or	r24, r25
    19c8:	e1 f4       	brne	.+56     	; 0x1a02 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    19ca:	ce 01       	movw	r24, r28
    19cc:	45 96       	adiw	r24, 0x15	; 21
    19ce:	0e 94 52 31 	call	0x62a4	; 0x62a4 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    19d2:	88 8d       	ldd	r24, Y+24	; 0x18
    19d4:	8f 93       	push	r24
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	8f 93       	push	r24
    19da:	8e 89       	ldd	r24, Y+22	; 0x16
    19dc:	8f 93       	push	r24
    19de:	8d 89       	ldd	r24, Y+21	; 0x15
    19e0:	8f 93       	push	r24
    19e2:	8f e2       	ldi	r24, 0x2F	; 47
    19e4:	95 e0       	ldi	r25, 0x05	; 5
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	af 93       	push	r26
    19ea:	9f 93       	push	r25
    19ec:	8f 93       	push	r24
    19ee:	0f 93       	push	r16
    19f0:	ff 92       	push	r15
    19f2:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	c8 c0       	rjmp	.+400    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_RRL)==0)
    1a02:	24 e3       	ldi	r18, 0x34	; 52
    1a04:	35 e0       	ldi	r19, 0x05	; 5
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	8e 2d       	mov	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1a10:	89 2b       	or	r24, r25
    1a12:	e1 f4       	brne	.+56     	; 0x1a4c <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1a14:	ce 01       	movw	r24, r28
    1a16:	45 96       	adiw	r24, 0x15	; 21
    1a18:	0e 94 61 31 	call	0x62c2	; 0x62c2 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1a1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a1e:	8f 93       	push	r24
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	8f 93       	push	r24
    1a24:	8e 89       	ldd	r24, Y+22	; 0x16
    1a26:	8f 93       	push	r24
    1a28:	8d 89       	ldd	r24, Y+21	; 0x15
    1a2a:	8f 93       	push	r24
    1a2c:	8f e2       	ldi	r24, 0x2F	; 47
    1a2e:	95 e0       	ldi	r25, 0x05	; 5
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	af 93       	push	r26
    1a34:	9f 93       	push	r25
    1a36:	8f 93       	push	r24
    1a38:	0f 93       	push	r16
    1a3a:	ff 92       	push	r15
    1a3c:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	a3 c0       	rjmp	.+326    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_VCC)==0)
    1a4c:	29 e3       	ldi	r18, 0x39	; 57
    1a4e:	35 e0       	ldi	r19, 0x05	; 5
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	8e 2d       	mov	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	e1 f4       	brne	.+56     	; 0x1a96 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	45 96       	adiw	r24, 0x15	; 21
    1a62:	0e 94 70 31 	call	0x62e0	; 0x62e0 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1a66:	88 8d       	ldd	r24, Y+24	; 0x18
    1a68:	8f 93       	push	r24
    1a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6c:	8f 93       	push	r24
    1a6e:	8e 89       	ldd	r24, Y+22	; 0x16
    1a70:	8f 93       	push	r24
    1a72:	8d 89       	ldd	r24, Y+21	; 0x15
    1a74:	8f 93       	push	r24
    1a76:	8f e2       	ldi	r24, 0x2F	; 47
    1a78:	95 e0       	ldi	r25, 0x05	; 5
    1a7a:	a0 e0       	ldi	r26, 0x00	; 0
    1a7c:	af 93       	push	r26
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	0f 93       	push	r16
    1a84:	ff 92       	push	r15
    1a86:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	7e c0       	rjmp	.+252    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_COLS)==0)
    1a96:	2e e3       	ldi	r18, 0x3E	; 62
    1a98:	35 e0       	ldi	r19, 0x05	; 5
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	8e 2d       	mov	r24, r14
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <handle_read+0x1a2>
	{
		read_cols(res);
    1aa8:	8f 2d       	mov	r24, r15
    1aaa:	90 2f       	mov	r25, r16
    1aac:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <read_cols>
    1ab0:	70 c0       	rjmp	.+224    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1ab2:	23 e4       	ldi	r18, 0x43	; 67
    1ab4:	35 e0       	ldi	r19, 0x05	; 5
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	8e 2d       	mov	r24, r14
    1aba:	b6 01       	movw	r22, r12
    1abc:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1ac0:	89 2b       	or	r24, r25
    1ac2:	a1 f4       	brne	.+40     	; 0x1aec <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    1ac4:	0e 94 09 34 	call	0x6812	; 0x6812 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1ac8:	1f 92       	push	r1
    1aca:	8f 93       	push	r24
    1acc:	8d e4       	ldi	r24, 0x4D	; 77
    1ace:	95 e0       	ldi	r25, 0x05	; 5
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	af 93       	push	r26
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0f 93       	push	r16
    1ada:	ff 92       	push	r15
    1adc:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	53 c0       	rjmp	.+166    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1aec:	2f e5       	ldi	r18, 0x5F	; 95
    1aee:	35 e0       	ldi	r19, 0x05	; 5
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	8e 2d       	mov	r24, r14
    1af4:	b6 01       	movw	r22, r12
    1af6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1afa:	89 2b       	or	r24, r25
    1afc:	a1 f4       	brne	.+40     	; 0x1b26 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1afe:	0e 94 15 34 	call	0x682a	; 0x682a <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1b02:	9f 93       	push	r25
    1b04:	8f 93       	push	r24
    1b06:	8a e6       	ldi	r24, 0x6A	; 106
    1b08:	95 e0       	ldi	r25, 0x05	; 5
    1b0a:	a0 e0       	ldi	r26, 0x00	; 0
    1b0c:	af 93       	push	r26
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	0f 93       	push	r16
    1b14:	ff 92       	push	r15
    1b16:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	36 c0       	rjmp	.+108    	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1b26:	2d e7       	ldi	r18, 0x7D	; 125
    1b28:	35 e0       	ldi	r19, 0x05	; 5
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	8e 2d       	mov	r24, r14
    1b2e:	b6 01       	movw	r22, r12
    1b30:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1b34:	89 2b       	or	r24, r25
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1b38:	0e 94 21 34 	call	0x6842	; 0x6842 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1b3c:	1f 92       	push	r1
    1b3e:	8f 93       	push	r24
    1b40:	89 e8       	ldi	r24, 0x89	; 137
    1b42:	95 e0       	ldi	r25, 0x05	; 5
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	af 93       	push	r26
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24
    1b4c:	0f 93       	push	r16
    1b4e:	ff 92       	push	r15
    1b50:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	19 c0       	rjmp	.+50     	; 0x1b92 <handle_read+0x282>
	}
	else if(strcmp(par, RW_TIME)==0)
    1b60:	28 ea       	ldi	r18, 0xA8	; 168
    1b62:	35 e0       	ldi	r19, 0x05	; 5
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	8e 2d       	mov	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1b6e:	89 2b       	or	r24, r25
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <handle_read+0x26c>
	{
		read_time(res);
    1b72:	8f 2d       	mov	r24, r15
    1b74:	90 2f       	mov	r25, r16
    1b76:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <read_time>
    1b7a:	0b c0       	rjmp	.+22     	; 0x1b92 <handle_read+0x282>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1b7c:	26 e1       	ldi	r18, 0x16	; 22
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4d ea       	ldi	r20, 0xAD	; 173
    1b82:	55 e0       	ldi	r21, 0x05	; 5
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	8f 2d       	mov	r24, r15
    1b88:	90 2f       	mov	r25, r16
    1b8a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <handle_read+0x282>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1b90:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1b92:	81 2f       	mov	r24, r17
    1b94:	68 96       	adiw	r28, 0x18	; 24
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	08 95       	ret

Disassembly of section .text.handle_write:

00001bb2 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1bb2:	6f 92       	push	r6
    1bb4:	7f 92       	push	r7
    1bb6:	8f 92       	push	r8
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	64 97       	sbiw	r28, 0x14	; 20
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	3b 01       	movw	r6, r22
    1bda:	88 2e       	mov	r8, r24
    1bdc:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	ae 01       	movw	r20, r28
    1be2:	4f 5f       	subi	r20, 0xFF	; 255
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    1bea:	18 2f       	mov	r17, r24
    1bec:	88 23       	and	r24, r24
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <handle_write+0x40>
    1bf0:	cd c0       	rjmp	.+410    	; 0x1d8c <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	6c 01       	movw	r12, r24
    1bf8:	20 e8       	ldi	r18, 0x80	; 128
    1bfa:	e2 2e       	mov	r14, r18
    1bfc:	25 e1       	ldi	r18, 0x15	; 21
    1bfe:	35 e0       	ldi	r19, 0x05	; 5
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	8e 2d       	mov	r24, r14
    1c04:	b6 01       	movw	r22, r12
    1c06:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1c0a:	89 2b       	or	r24, r25
    1c0c:	39 f4       	brne	.+14     	; 0x1c1c <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1c0e:	a5 01       	movw	r20, r10
    1c10:	88 2d       	mov	r24, r8
    1c12:	b3 01       	movw	r22, r6
    1c14:	0e 94 bd 21 	call	0x437a	; 0x437a <write_deveui>
    1c18:	18 2f       	mov	r17, r24
    1c1a:	b8 c0       	rjmp	.+368    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1c1c:	2c e1       	ldi	r18, 0x1C	; 28
    1c1e:	35 e0       	ldi	r19, 0x05	; 5
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	8e 2d       	mov	r24, r14
    1c24:	b6 01       	movw	r22, r12
    1c26:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1c2a:	89 2b       	or	r24, r25
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1c2e:	a5 01       	movw	r20, r10
    1c30:	88 2d       	mov	r24, r8
    1c32:	b3 01       	movw	r22, r6
    1c34:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <write_appeui>
    1c38:	18 2f       	mov	r17, r24
    1c3a:	a8 c0       	rjmp	.+336    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1c3c:	23 e2       	ldi	r18, 0x23	; 35
    1c3e:	35 e0       	ldi	r19, 0x05	; 5
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	8e 2d       	mov	r24, r14
    1c44:	b6 01       	movw	r22, r12
    1c46:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	39 f4       	brne	.+14     	; 0x1c5c <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1c4e:	a5 01       	movw	r20, r10
    1c50:	88 2d       	mov	r24, r8
    1c52:	b3 01       	movw	r22, r6
    1c54:	0e 94 35 22 	call	0x446a	; 0x446a <write_appkey>
    1c58:	18 2f       	mov	r17, r24
    1c5a:	98 c0       	rjmp	.+304    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1c5c:	2a e2       	ldi	r18, 0x2A	; 42
    1c5e:	35 e0       	ldi	r19, 0x05	; 5
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	8e 2d       	mov	r24, r14
    1c64:	b6 01       	movw	r22, r12
    1c66:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1c6a:	89 2b       	or	r24, r25
    1c6c:	39 f4       	brne	.+14     	; 0x1c7c <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1c6e:	a5 01       	movw	r20, r10
    1c70:	88 2d       	mov	r24, r8
    1c72:	b3 01       	movw	r22, r6
    1c74:	0e 94 4e 28 	call	0x509c	; 0x509c <write_PPM_factor>
    1c78:	18 2f       	mov	r17, r24
    1c7a:	88 c0       	rjmp	.+272    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1c7c:	24 e3       	ldi	r18, 0x34	; 52
    1c7e:	35 e0       	ldi	r19, 0x05	; 5
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	8e 2d       	mov	r24, r14
    1c84:	b6 01       	movw	r22, r12
    1c86:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1c8a:	89 2b       	or	r24, r25
    1c8c:	39 f4       	brne	.+14     	; 0x1c9c <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1c8e:	a5 01       	movw	r20, r10
    1c90:	88 2d       	mov	r24, r8
    1c92:	b3 01       	movw	r22, r6
    1c94:	0e 94 74 28 	call	0x50e8	; 0x50e8 <write_RRL>
    1c98:	18 2f       	mov	r17, r24
    1c9a:	78 c0       	rjmp	.+240    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1c9c:	29 e3       	ldi	r18, 0x39	; 57
    1c9e:	35 e0       	ldi	r19, 0x05	; 5
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	8e 2d       	mov	r24, r14
    1ca4:	b6 01       	movw	r22, r12
    1ca6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1caa:	89 2b       	or	r24, r25
    1cac:	39 f4       	brne	.+14     	; 0x1cbc <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1cae:	a5 01       	movw	r20, r10
    1cb0:	88 2d       	mov	r24, r8
    1cb2:	b3 01       	movw	r22, r6
    1cb4:	0e 94 9a 28 	call	0x5134	; 0x5134 <write_VCC>
    1cb8:	18 2f       	mov	r17, r24
    1cba:	68 c0       	rjmp	.+208    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1cbc:	2e e3       	ldi	r18, 0x3E	; 62
    1cbe:	35 e0       	ldi	r19, 0x05	; 5
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	8e 2d       	mov	r24, r14
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1cca:	89 2b       	or	r24, r25
    1ccc:	39 f4       	brne	.+14     	; 0x1cdc <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1cce:	a5 01       	movw	r20, r10
    1cd0:	88 2d       	mov	r24, r8
    1cd2:	b3 01       	movw	r22, r6
    1cd4:	0e 94 32 13 	call	0x2664	; 0x2664 <write_cols>
    1cd8:	18 2f       	mov	r17, r24
    1cda:	58 c0       	rjmp	.+176    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1cdc:	23 e4       	ldi	r18, 0x43	; 67
    1cde:	35 e0       	ldi	r19, 0x05	; 5
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	8e 2d       	mov	r24, r14
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1cea:	89 2b       	or	r24, r25
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1cee:	a5 01       	movw	r20, r10
    1cf0:	88 2d       	mov	r24, r8
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	0e 94 c0 28 	call	0x5180	; 0x5180 <write_heat_up>
    1cf8:	18 2f       	mov	r17, r24
    1cfa:	48 c0       	rjmp	.+144    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1cfc:	2f e5       	ldi	r18, 0x5F	; 95
    1cfe:	35 e0       	ldi	r19, 0x05	; 5
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	8e 2d       	mov	r24, r14
    1d04:	b6 01       	movw	r22, r12
    1d06:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1d0a:	89 2b       	or	r24, r25
    1d0c:	39 f4       	brne	.+14     	; 0x1d1c <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1d0e:	a5 01       	movw	r20, r10
    1d10:	88 2d       	mov	r24, r8
    1d12:	b3 01       	movw	r22, r6
    1d14:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <write_air_pump>
    1d18:	18 2f       	mov	r17, r24
    1d1a:	38 c0       	rjmp	.+112    	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1d1c:	2d e7       	ldi	r18, 0x7D	; 125
    1d1e:	35 e0       	ldi	r19, 0x05	; 5
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	8e 2d       	mov	r24, r14
    1d24:	b6 01       	movw	r22, r12
    1d26:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	39 f4       	brne	.+14     	; 0x1d3c <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1d2e:	a5 01       	movw	r20, r10
    1d30:	88 2d       	mov	r24, r8
    1d32:	b3 01       	movw	r22, r6
    1d34:	0e 94 e6 28 	call	0x51cc	; 0x51cc <write_sp_interval>
    1d38:	18 2f       	mov	r17, r24
    1d3a:	28 c0       	rjmp	.+80     	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1d3c:	23 ec       	ldi	r18, 0xC3	; 195
    1d3e:	35 e0       	ldi	r19, 0x05	; 5
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	8e 2d       	mov	r24, r14
    1d44:	b6 01       	movw	r22, r12
    1d46:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1d4e:	a5 01       	movw	r20, r10
    1d50:	88 2d       	mov	r24, r8
    1d52:	b3 01       	movw	r22, r6
    1d54:	0e 94 80 18 	call	0x3100	; 0x3100 <write_reset>
    1d58:	18 2f       	mov	r17, r24
    1d5a:	18 c0       	rjmp	.+48     	; 0x1d8c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1d5c:	28 ea       	ldi	r18, 0xA8	; 168
    1d5e:	35 e0       	ldi	r19, 0x05	; 5
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	8e 2d       	mov	r24, r14
    1d64:	b6 01       	movw	r22, r12
    1d66:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    1d6a:	89 2b       	or	r24, r25
    1d6c:	39 f4       	brne	.+14     	; 0x1d7c <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1d6e:	a5 01       	movw	r20, r10
    1d70:	88 2d       	mov	r24, r8
    1d72:	b3 01       	movw	r22, r6
    1d74:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <write_time>
    1d78:	18 2f       	mov	r17, r24
    1d7a:	08 c0       	rjmp	.+16     	; 0x1d8c <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1d7c:	26 e1       	ldi	r18, 0x16	; 22
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4d ea       	ldi	r20, 0xAD	; 173
    1d82:	55 e0       	ldi	r21, 0x05	; 5
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	c5 01       	movw	r24, r10
    1d88:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
	}
	
}
    1d8c:	81 2f       	mov	r24, r17
    1d8e:	64 96       	adiw	r28, 0x14	; 20
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	bf 90       	pop	r11
    1da8:	af 90       	pop	r10
    1daa:	8f 90       	pop	r8
    1dac:	7f 90       	pop	r7
    1dae:	6f 90       	pop	r6
    1db0:	08 95       	ret

Disassembly of section .text.handle_methane:

000029ce <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <handle_methane+0x12>
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	f4 2e       	mov	r15, r20
    29e6:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    29e8:	22 e0       	ldi	r18, 0x02	; 2
    29ea:	44 e1       	ldi	r20, 0x14	; 20
    29ec:	5f e0       	ldi	r21, 0x0F	; 15
    29ee:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    29f2:	18 2f       	mov	r17, r24
    29f4:	88 23       	and	r24, r24
    29f6:	09 f4       	brne	.+2      	; 0x29fa <handle_methane+0x2c>
    29f8:	6b c0       	rjmp	.+214    	; 0x2ad0 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    29fa:	84 e1       	ldi	r24, 0x14	; 20
    29fc:	9f e0       	ldi	r25, 0x0F	; 15
    29fe:	6c 01       	movw	r12, r24
    2a00:	20 e8       	ldi	r18, 0x80	; 128
    2a02:	e2 2e       	mov	r14, r18
    2a04:	25 e7       	ldi	r18, 0x75	; 117
    2a06:	36 e0       	ldi	r19, 0x06	; 6
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	8e 2d       	mov	r24, r14
    2a0c:	b6 01       	movw	r22, r12
    2a0e:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    2a12:	89 2b       	or	r24, r25
    2a14:	79 f4       	brne	.+30     	; 0x2a34 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    2a16:	0e 94 5d 33 	call	0x66ba	; 0x66ba <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	0e 94 a4 32 	call	0x6548	; 0x6548 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    2a20:	28 e1       	ldi	r18, 0x18	; 24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	48 e7       	ldi	r20, 0x78	; 120
    2a26:	56 e0       	ldi	r21, 0x06	; 6
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	8f 2d       	mov	r24, r15
    2a2c:	90 2f       	mov	r25, r16
    2a2e:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    2a32:	4e c0       	rjmp	.+156    	; 0x2ad0 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    2a34:	20 e9       	ldi	r18, 0x90	; 144
    2a36:	36 e0       	ldi	r19, 0x06	; 6
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	8e 2d       	mov	r24, r14
    2a3c:	b6 01       	movw	r22, r12
    2a3e:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    2a42:	89 2b       	or	r24, r25
    2a44:	79 f4       	brne	.+30     	; 0x2a64 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    2a46:	0e 94 5d 33 	call	0x66ba	; 0x66ba <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	0e 94 a4 32 	call	0x6548	; 0x6548 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    2a50:	29 e1       	ldi	r18, 0x19	; 25
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	44 e9       	ldi	r20, 0x94	; 148
    2a56:	56 e0       	ldi	r21, 0x06	; 6
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	8f 2d       	mov	r24, r15
    2a5c:	90 2f       	mov	r25, r16
    2a5e:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    2a62:	36 c0       	rjmp	.+108    	; 0x2ad0 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    2a64:	2d ea       	ldi	r18, 0xAD	; 173
    2a66:	36 e0       	ldi	r19, 0x06	; 6
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	8e 2d       	mov	r24, r14
    2a6c:	b6 01       	movw	r22, r12
    2a6e:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    2a72:	89 2b       	or	r24, r25
    2a74:	21 f5       	brne	.+72     	; 0x2abe <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	0e 94 43 26 	call	0x4c86	; 0x4c86 <ADC_get_value>
    2a7e:	88 23       	and	r24, r24
    2a80:	51 f0       	breq	.+20     	; 0x2a96 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    2a82:	28 e1       	ldi	r18, 0x18	; 24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	42 eb       	ldi	r20, 0xB2	; 178
    2a88:	56 e0       	ldi	r21, 0x06	; 6
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	8f 2d       	mov	r24, r15
    2a8e:	90 2f       	mov	r25, r16
    2a90:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
    2a94:	1d c0       	rjmp	.+58     	; 0x2ad0 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	8f 93       	push	r24
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	8f 93       	push	r24
    2a9e:	8a ec       	ldi	r24, 0xCA	; 202
    2aa0:	96 e0       	ldi	r25, 0x06	; 6
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	af 93       	push	r26
    2aa6:	9f 93       	push	r25
    2aa8:	8f 93       	push	r24
    2aaa:	0f 93       	push	r16
    2aac:	ff 92       	push	r15
    2aae:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2abe:	26 e1       	ldi	r18, 0x16	; 22
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	41 ed       	ldi	r20, 0xD1	; 209
    2ac4:	56 e0       	ldi	r21, 0x06	; 6
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	8f 2d       	mov	r24, r15
    2aca:	90 2f       	mov	r25, r16
    2acc:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
	}
	return false;
}
    2ad0:	81 2f       	mov	r24, r17
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
    2ae6:	08 95       	ret

Disassembly of section .text.handle_co2:

00003b06 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    3b06:	ff 92       	push	r15
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <handle_co2+0xc>
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	f4 2e       	mov	r15, r20
    3b18:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    3b1a:	22 e0       	ldi	r18, 0x02	; 2
    3b1c:	44 e1       	ldi	r20, 0x14	; 20
    3b1e:	5f e0       	ldi	r21, 0x0F	; 15
    3b20:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    3b24:	18 2f       	mov	r17, r24
    3b26:	88 23       	and	r24, r24
    3b28:	b9 f1       	breq	.+110    	; 0x3b98 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    3b2a:	64 e1       	ldi	r22, 0x14	; 20
    3b2c:	7f e0       	ldi	r23, 0x0F	; 15
    3b2e:	80 e8       	ldi	r24, 0x80	; 128
    3b30:	2d ea       	ldi	r18, 0xAD	; 173
    3b32:	36 e0       	ldi	r19, 0x06	; 6
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    3b3a:	89 2b       	or	r24, r25
    3b3c:	21 f5       	brne	.+72     	; 0x3b86 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    3b3e:	ce 01       	movw	r24, r28
    3b40:	01 96       	adiw	r24, 0x01	; 1
    3b42:	0e 94 1a 32 	call	0x6434	; 0x6434 <SCD30_get_reading>
    3b46:	88 23       	and	r24, r24
    3b48:	51 f0       	breq	.+20     	; 0x3b5e <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    3b4a:	28 e1       	ldi	r18, 0x18	; 24
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	42 eb       	ldi	r20, 0xB2	; 178
    3b50:	56 e0       	ldi	r21, 0x06	; 6
    3b52:	60 e0       	ldi	r22, 0x00	; 0
    3b54:	8f 2d       	mov	r24, r15
    3b56:	90 2f       	mov	r25, r16
    3b58:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
    3b5c:	1d c0       	rjmp	.+58     	; 0x3b98 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	8f 93       	push	r24
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	8f 93       	push	r24
    3b66:	8a ec       	ldi	r24, 0xCA	; 202
    3b68:	96 e0       	ldi	r25, 0x06	; 6
    3b6a:	a0 e0       	ldi	r26, 0x00	; 0
    3b6c:	af 93       	push	r26
    3b6e:	9f 93       	push	r25
    3b70:	8f 93       	push	r24
    3b72:	0f 93       	push	r16
    3b74:	ff 92       	push	r15
    3b76:	0e 94 97 2a 	call	0x552e	; 0x552e <sprintf>
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3b86:	26 e1       	ldi	r18, 0x16	; 22
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	41 ed       	ldi	r20, 0xD1	; 209
    3b8c:	56 e0       	ldi	r21, 0x06	; 6
    3b8e:	60 e0       	ldi	r22, 0x00	; 0
    3b90:	8f 2d       	mov	r24, r15
    3b92:	90 2f       	mov	r25, r16
    3b94:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
	}
}
    3b98:	81 2f       	mov	r24, r17
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	1f 91       	pop	r17
    3ba4:	0f 91       	pop	r16
    3ba6:	ff 90       	pop	r15
    3ba8:	08 95       	ret

Disassembly of section .text.handle_pump:

00003baa <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	ef 92       	push	r14
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    3bb8:	22 e0       	ldi	r18, 0x02	; 2
    3bba:	44 e1       	ldi	r20, 0x14	; 20
    3bbc:	5f e0       	ldi	r21, 0x0F	; 15
    3bbe:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    3bc2:	c8 2f       	mov	r28, r24
    3bc4:	88 23       	and	r24, r24
    3bc6:	d9 f1       	breq	.+118    	; 0x3c3e <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    3bc8:	84 e1       	ldi	r24, 0x14	; 20
    3bca:	9f e0       	ldi	r25, 0x0F	; 15
    3bcc:	6c 01       	movw	r12, r24
    3bce:	20 e8       	ldi	r18, 0x80	; 128
    3bd0:	e2 2e       	mov	r14, r18
    3bd2:	25 e7       	ldi	r18, 0x75	; 117
    3bd4:	36 e0       	ldi	r19, 0x06	; 6
    3bd6:	40 e0       	ldi	r20, 0x00	; 0
    3bd8:	8e 2d       	mov	r24, r14
    3bda:	b6 01       	movw	r22, r12
    3bdc:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    3be0:	89 2b       	or	r24, r25
    3be2:	71 f4       	brne	.+28     	; 0x3c00 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    3be4:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	0e 94 b8 32 	call	0x6570	; 0x6570 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    3bee:	25 e1       	ldi	r18, 0x15	; 21
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	47 ee       	ldi	r20, 0xE7	; 231
    3bf4:	56 e0       	ldi	r21, 0x06	; 6
    3bf6:	60 e0       	ldi	r22, 0x00	; 0
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    3bfe:	1f c0       	rjmp	.+62     	; 0x3c3e <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    3c00:	20 e9       	ldi	r18, 0x90	; 144
    3c02:	36 e0       	ldi	r19, 0x06	; 6
    3c04:	40 e0       	ldi	r20, 0x00	; 0
    3c06:	8e 2d       	mov	r24, r14
    3c08:	b6 01       	movw	r22, r12
    3c0a:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    3c0e:	89 2b       	or	r24, r25
    3c10:	71 f4       	brne	.+28     	; 0x3c2e <handle_pump+0x84>
		PM_HAL_BC_power_init();
    3c12:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	0e 94 b8 32 	call	0x6570	; 0x6570 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    3c1c:	26 e1       	ldi	r18, 0x16	; 22
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	4c ef       	ldi	r20, 0xFC	; 252
    3c22:	56 e0       	ldi	r21, 0x06	; 6
    3c24:	60 e0       	ldi	r22, 0x00	; 0
    3c26:	c8 01       	movw	r24, r16
    3c28:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
    3c2c:	08 c0       	rjmp	.+16     	; 0x3c3e <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3c2e:	26 e1       	ldi	r18, 0x16	; 22
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	41 ed       	ldi	r20, 0xD1	; 209
    3c34:	56 e0       	ldi	r21, 0x06	; 6
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	c8 01       	movw	r24, r16
    3c3a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
	}
}
    3c3e:	8c 2f       	mov	r24, r28
    3c40:	cf 91       	pop	r28
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	ef 90       	pop	r14
    3c48:	df 90       	pop	r13
    3c4a:	cf 90       	pop	r12
    3c4c:	08 95       	ret

Disassembly of section .text.handle_sample:

0000384a <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    384a:	6f 92       	push	r6
    384c:	7f 92       	push	r7
    384e:	8f 92       	push	r8
    3850:	cf 92       	push	r12
    3852:	df 92       	push	r13
    3854:	ef 92       	push	r14
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	3b 01       	movw	r6, r22
    385e:	88 2e       	mov	r8, r24
    3860:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    3862:	21 e0       	ldi	r18, 0x01	; 1
    3864:	44 e1       	ldi	r20, 0x14	; 20
    3866:	5f e0       	ldi	r21, 0x0F	; 15
    3868:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <get_parameter>
    386c:	c8 2f       	mov	r28, r24
    386e:	88 23       	and	r24, r24
    3870:	e9 f1       	breq	.+122    	; 0x38ec <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    3872:	84 e1       	ldi	r24, 0x14	; 20
    3874:	9f e0       	ldi	r25, 0x0F	; 15
    3876:	6c 01       	movw	r12, r24
    3878:	20 e8       	ldi	r18, 0x80	; 128
    387a:	e2 2e       	mov	r14, r18
    387c:	22 e1       	ldi	r18, 0x12	; 18
    387e:	37 e0       	ldi	r19, 0x07	; 7
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	8e 2d       	mov	r24, r14
    3884:	b6 01       	movw	r22, r12
    3886:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    388a:	89 2b       	or	r24, r25
    388c:	39 f4       	brne	.+14     	; 0x389c <handle_sample+0x52>
		return handle_methane(cmd, res);
    388e:	a8 01       	movw	r20, r16
    3890:	88 2d       	mov	r24, r8
    3892:	b3 01       	movw	r22, r6
    3894:	0e 94 e7 14 	call	0x29ce	; 0x29ce <handle_methane>
    3898:	c8 2f       	mov	r28, r24
    389a:	28 c0       	rjmp	.+80     	; 0x38ec <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    389c:	27 e1       	ldi	r18, 0x17	; 23
    389e:	37 e0       	ldi	r19, 0x07	; 7
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	8e 2d       	mov	r24, r14
    38a4:	b6 01       	movw	r22, r12
    38a6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    38aa:	89 2b       	or	r24, r25
    38ac:	39 f4       	brne	.+14     	; 0x38bc <handle_sample+0x72>
		return handle_co2(cmd, res);
    38ae:	a8 01       	movw	r20, r16
    38b0:	88 2d       	mov	r24, r8
    38b2:	b3 01       	movw	r22, r6
    38b4:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <handle_co2>
    38b8:	c8 2f       	mov	r28, r24
    38ba:	18 c0       	rjmp	.+48     	; 0x38ec <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    38bc:	2b e1       	ldi	r18, 0x1B	; 27
    38be:	37 e0       	ldi	r19, 0x07	; 7
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	8e 2d       	mov	r24, r14
    38c4:	b6 01       	movw	r22, r12
    38c6:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <strcmp>
    38ca:	89 2b       	or	r24, r25
    38cc:	39 f4       	brne	.+14     	; 0x38dc <handle_sample+0x92>
		return handle_pump(cmd, res);
    38ce:	a8 01       	movw	r20, r16
    38d0:	88 2d       	mov	r24, r8
    38d2:	b3 01       	movw	r22, r6
    38d4:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <handle_pump>
    38d8:	c8 2f       	mov	r28, r24
    38da:	08 c0       	rjmp	.+16     	; 0x38ec <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    38dc:	26 e1       	ldi	r18, 0x16	; 22
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	41 ed       	ldi	r20, 0xD1	; 209
    38e2:	56 e0       	ldi	r21, 0x06	; 6
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	c8 01       	movw	r24, r16
    38e8:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <memcpy>
		return true;
	}
}
    38ec:	8c 2f       	mov	r24, r28
    38ee:	cf 91       	pop	r28
    38f0:	1f 91       	pop	r17
    38f2:	0f 91       	pop	r16
    38f4:	ef 90       	pop	r14
    38f6:	df 90       	pop	r13
    38f8:	cf 90       	pop	r12
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

0000603e <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    603e:	0e 94 08 33 	call	0x6610	; 0x6610 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    6042:	0e 94 56 33 	call	0x66ac	; 0x66ac <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    6046:	81 e0       	ldi	r24, 0x01	; 1
    6048:	0e 94 9a 32 	call	0x6534	; 0x6534 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    604c:	0e 94 64 33 	call	0x66c8	; 0x66c8 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	0e 94 ae 32 	call	0x655c	; 0x655c <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    6056:	0e 94 b0 30 	call	0x6160	; 0x6160 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    605a:	88 23       	and	r24, r24
    605c:	11 f0       	breq	.+4      	; 0x6062 <init_methane_SCD30+0x24>
    605e:	80 e0       	ldi	r24, 0x00	; 0
    6060:	08 95       	ret
	return true;
    6062:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    6064:	08 95       	ret

Disassembly of section .text.count_parameters:

00004dda <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4dda:	6f 92       	push	r6
    4ddc:	7f 92       	push	r7
    4dde:	8f 92       	push	r8
    4de0:	cf 92       	push	r12
    4de2:	df 92       	push	r13
    4de4:	ef 92       	push	r14
    4de6:	3b 01       	movw	r6, r22
    4de8:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4dea:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4dee:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4df0:	20 e0       	ldi	r18, 0x00	; 0
    4df2:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    4df4:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    4df6:	10 c0       	rjmp	.+32     	; 0x4e18 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4df8:	e8 2c       	mov	r14, r8
    4dfa:	63 01       	movw	r12, r6
    4dfc:	c2 0e       	add	r12, r18
    4dfe:	d3 1e       	adc	r13, r19
    4e00:	e1 1c       	adc	r14, r1
    4e02:	37 fd       	sbrc	r19, 7
    4e04:	ea 94       	dec	r14
    4e06:	f6 01       	movw	r30, r12
    4e08:	94 91       	lpm	r25, Z
    4e0a:	e7 fc       	sbrc	r14, 7
    4e0c:	90 81       	ld	r25, Z
    4e0e:	90 32       	cpi	r25, 0x20	; 32
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <count_parameters+0x3a>
			cnt++;
    4e12:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4e14:	2f 5f       	subi	r18, 0xFF	; 255
    4e16:	3f 4f       	sbci	r19, 0xFF	; 255
    4e18:	26 17       	cp	r18, r22
    4e1a:	37 07       	cpc	r19, r23
    4e1c:	68 f3       	brcs	.-38     	; 0x4df8 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4e1e:	ef 90       	pop	r14
    4e20:	df 90       	pop	r13
    4e22:	cf 90       	pop	r12
    4e24:	8f 90       	pop	r8
    4e26:	7f 90       	pop	r7
    4e28:	6f 90       	pop	r6
    4e2a:	08 95       	ret

Disassembly of section .text.par_index:

000046b2 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    46b2:	cf 92       	push	r12
    46b4:	df 92       	push	r13
    46b6:	ef 92       	push	r14
    46b8:	0f 93       	push	r16
    46ba:	1f 93       	push	r17
    46bc:	cf 93       	push	r28
    46be:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    46c0:	44 23       	and	r20, r20
    46c2:	29 f1       	breq	.+74     	; 0x470e <par_index+0x5c>
    46c4:	04 2f       	mov	r16, r20
    46c6:	6b 01       	movw	r12, r22
    46c8:	e8 2e       	mov	r14, r24
    46ca:	c0 e0       	ldi	r28, 0x00	; 0
    46cc:	d0 e0       	ldi	r29, 0x00	; 0
    46ce:	10 e0       	ldi	r17, 0x00	; 0
    46d0:	14 c0       	rjmp	.+40     	; 0x46fa <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    46d2:	ae 2d       	mov	r26, r14
    46d4:	c6 01       	movw	r24, r12
    46d6:	8c 0f       	add	r24, r28
    46d8:	9d 1f       	adc	r25, r29
    46da:	a1 1d       	adc	r26, r1
    46dc:	d7 fd       	sbrc	r29, 7
    46de:	aa 95       	dec	r26
    46e0:	fc 01       	movw	r30, r24
    46e2:	84 91       	lpm	r24, Z
    46e4:	a7 fd       	sbrc	r26, 7
    46e6:	80 81       	ld	r24, Z
    46e8:	80 32       	cpi	r24, 0x20	; 32
    46ea:	31 f4       	brne	.+12     	; 0x46f8 <par_index+0x46>
			cnt++;
    46ec:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    46ee:	01 13       	cpse	r16, r17
    46f0:	03 c0       	rjmp	.+6      	; 0x46f8 <par_index+0x46>
				return i+1;
    46f2:	ce 01       	movw	r24, r28
    46f4:	01 96       	adiw	r24, 0x01	; 1
    46f6:	0d c0       	rjmp	.+26     	; 0x4712 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    46f8:	21 96       	adiw	r28, 0x01	; 1
    46fa:	8e 2d       	mov	r24, r14
    46fc:	b6 01       	movw	r22, r12
    46fe:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4702:	c8 17       	cp	r28, r24
    4704:	d9 07       	cpc	r29, r25
    4706:	28 f3       	brcs	.-54     	; 0x46d2 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	02 c0       	rjmp	.+4      	; 0x4712 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    4712:	df 91       	pop	r29
    4714:	cf 91       	pop	r28
    4716:	1f 91       	pop	r17
    4718:	0f 91       	pop	r16
    471a:	ef 90       	pop	r14
    471c:	df 90       	pop	r13
    471e:	cf 90       	pop	r12
    4720:	08 95       	ret

Disassembly of section .text.get_parameter:

00003ebe <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3ebe:	8f 92       	push	r8
    3ec0:	9f 92       	push	r9
    3ec2:	af 92       	push	r10
    3ec4:	cf 92       	push	r12
    3ec6:	df 92       	push	r13
    3ec8:	ef 92       	push	r14
    3eca:	ff 92       	push	r15
    3ecc:	0f 93       	push	r16
    3ece:	1f 93       	push	r17
    3ed0:	cf 93       	push	r28
    3ed2:	df 93       	push	r29
    3ed4:	6b 01       	movw	r12, r22
    3ed6:	e8 2e       	mov	r14, r24
    3ed8:	ea 01       	movw	r28, r20
    3eda:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3edc:	0e 94 ed 26 	call	0x4dda	; 0x4dda <count_parameters>
	if(pars<parNo) return false;
    3ee0:	8f 15       	cp	r24, r15
    3ee2:	58 f1       	brcs	.+86     	; 0x3f3a <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    3ee4:	8e 2d       	mov	r24, r14
    3ee6:	b6 01       	movw	r22, r12
    3ee8:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    3eec:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3eee:	4f 2d       	mov	r20, r15
    3ef0:	8e 2d       	mov	r24, r14
    3ef2:	b6 01       	movw	r22, r12
    3ef4:	0e 94 59 23 	call	0x46b2	; 0x46b2 <par_index>
	uint8_t parLen=0;
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3efa:	15 c0       	rjmp	.+42     	; 0x3f26 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3efc:	46 01       	movw	r8, r12
    3efe:	ae 2c       	mov	r10, r14
    3f00:	82 0e       	add	r8, r18
    3f02:	93 1e       	adc	r9, r19
    3f04:	a1 1c       	adc	r10, r1
    3f06:	37 fd       	sbrc	r19, 7
    3f08:	aa 94       	dec	r10
    3f0a:	4a 2d       	mov	r20, r10
    3f0c:	94 01       	movw	r18, r8
    3f0e:	f4 01       	movw	r30, r8
    3f10:	24 91       	lpm	r18, Z
    3f12:	47 fd       	sbrc	r20, 7
    3f14:	20 81       	ld	r18, Z
    3f16:	20 32       	cpi	r18, 0x20	; 32
    3f18:	59 f0       	breq	.+22     	; 0x3f30 <get_parameter+0x72>
		par[parLen++]=src[i];
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e9 0f       	add	r30, r25
    3f1e:	f1 1d       	adc	r31, r1
    3f20:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3f22:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    3f24:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3f26:	28 2f       	mov	r18, r24
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	20 17       	cp	r18, r16
    3f2c:	31 07       	cpc	r19, r17
    3f2e:	30 f3       	brcs	.-52     	; 0x3efc <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    3f30:	c9 0f       	add	r28, r25
    3f32:	d1 1d       	adc	r29, r1
    3f34:	18 82       	st	Y, r1
	
	return true;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	01 c0       	rjmp	.+2      	; 0x3f3c <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	ff 90       	pop	r15
    3f46:	ef 90       	pop	r14
    3f48:	df 90       	pop	r13
    3f4a:	cf 90       	pop	r12
    3f4c:	af 90       	pop	r10
    3f4e:	9f 90       	pop	r9
    3f50:	8f 90       	pop	r8
    3f52:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00006508 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    6508:	88 23       	and	r24, r24
    650a:	19 f0       	breq	.+6      	; 0x6512 <decode_stage_response+0xa>
    650c:	81 30       	cpi	r24, 0x01	; 1
    650e:	29 f0       	breq	.+10     	; 0x651a <decode_stage_response+0x12>
    6510:	02 c0       	rjmp	.+4      	; 0x6516 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6512:	81 e1       	ldi	r24, 0x11	; 17
    6514:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    6516:	86 e1       	ldi	r24, 0x16	; 22
    6518:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    651a:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    651c:	08 95       	ret

Disassembly of section .text.decode_join_response:

000063e4 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    63e4:	82 30       	cpi	r24, 0x02	; 2
    63e6:	51 f0       	breq	.+20     	; 0x63fc <decode_join_response+0x18>
    63e8:	83 30       	cpi	r24, 0x03	; 3
    63ea:	21 f0       	breq	.+8      	; 0x63f4 <decode_join_response+0x10>
    63ec:	81 11       	cpse	r24, r1
    63ee:	04 c0       	rjmp	.+8      	; 0x63f8 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    63f0:	83 e0       	ldi	r24, 0x03	; 3
    63f2:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    63f4:	85 e0       	ldi	r24, 0x05	; 5
    63f6:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    63f8:	86 e1       	ldi	r24, 0x16	; 22
    63fa:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    63fc:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    63fe:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

000062fe <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    62fe:	82 30       	cpi	r24, 0x02	; 2
    6300:	49 f0       	breq	.+18     	; 0x6314 <decode_header_tail_response+0x16>
    6302:	18 f4       	brcc	.+6      	; 0x630a <decode_header_tail_response+0xc>
    6304:	88 23       	and	r24, r24
    6306:	41 f0       	breq	.+16     	; 0x6318 <decode_header_tail_response+0x1a>
    6308:	03 c0       	rjmp	.+6      	; 0x6310 <decode_header_tail_response+0x12>
    630a:	84 50       	subi	r24, 0x04	; 4
    630c:	82 30       	cpi	r24, 0x02	; 2
    630e:	20 f0       	brcs	.+8      	; 0x6318 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    6310:	86 e1       	ldi	r24, 0x16	; 22
    6312:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6314:	84 2f       	mov	r24, r20
    6316:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    6318:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    631a:	08 95       	ret

Disassembly of section .text.read_eeprom:

00004b7c <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    4b7c:	89 e3       	ldi	r24, 0x39	; 57
    4b7e:	9f e0       	ldi	r25, 0x0F	; 15
    4b80:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <EM_get_deveui>
	EM_get_appeui(appeui);
    4b84:	88 e2       	ldi	r24, 0x28	; 40
    4b86:	9f e0       	ldi	r25, 0x0F	; 15
    4b88:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <EM_get_appeui>
	EM_get_appkey(appkey);
    4b8c:	83 ef       	ldi	r24, 0xF3	; 243
    4b8e:	9e e0       	ldi	r25, 0x0E	; 14
    4b90:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    4b94:	63 e2       	ldi	r22, 0x23	; 35
    4b96:	80 ed       	ldi	r24, 0xD0	; 208
    4b98:	9e e0       	ldi	r25, 0x0E	; 14
    4b9a:	0e 94 46 33 	call	0x668c	; 0x668c <EM_get_collections>
	EM_get_Vcc(&vccx);
    4b9e:	83 e7       	ldi	r24, 0x73	; 115
    4ba0:	9f e0       	ldi	r25, 0x0F	; 15
    4ba2:	0e 94 70 31 	call	0x62e0	; 0x62e0 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    4ba6:	8f e6       	ldi	r24, 0x6F	; 111
    4ba8:	9f e0       	ldi	r25, 0x0F	; 15
    4baa:	0e 94 61 31 	call	0x62c2	; 0x62c2 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    4bae:	8b e6       	ldi	r24, 0x6B	; 107
    4bb0:	9f e0       	ldi	r25, 0x0F	; 15
    4bb2:	0e 94 52 31 	call	0x62a4	; 0x62a4 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    4bb6:	0e 94 09 34 	call	0x6812	; 0x6812 <EM_get_heat_up_time>
    4bba:	80 93 ab 0f 	sts	0x0FAB, r24	; 0x800fab <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    4bbe:	0e 94 15 34 	call	0x682a	; 0x682a <EM_get_air_pump_time>
    4bc2:	90 93 92 0f 	sts	0x0F92, r25	; 0x800f92 <airPumpTime+0x1>
    4bc6:	80 93 91 0f 	sts	0x0F91, r24	; 0x800f91 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    4bca:	0e 94 21 34 	call	0x6842	; 0x6842 <EM_get_sp_interval>
    4bce:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <samplingProcessInterval>
	return true;
}
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	08 95       	ret

Disassembly of section .text.join_lora:

00006646 <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    6646:	43 ef       	ldi	r20, 0xF3	; 243
    6648:	5e e0       	ldi	r21, 0x0E	; 14
    664a:	68 e2       	ldi	r22, 0x28	; 40
    664c:	7f e0       	ldi	r23, 0x0F	; 15
    664e:	89 e3       	ldi	r24, 0x39	; 57
    6650:	9f e0       	ldi	r25, 0x0F	; 15
    6652:	0e 94 d5 34 	call	0x69aa	; 0x69aa <LM_join_network>
}
    6656:	08 95       	ret

Disassembly of section .text.set_wakeup:

00006914 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    6914:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <samplingProcessInterval>
    6918:	0e 94 07 1b 	call	0x360e	; 0x360e <RTC_set_wake_up_interrupt_minutes>
}
    691c:	08 95       	ret

Disassembly of section .text.send_header:

00005786 <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	cd b7       	in	r28, 0x3d	; 61
    578c:	de b7       	in	r29, 0x3e	; 62
    578e:	e4 97       	sbiw	r28, 0x34	; 52
    5790:	0f b6       	in	r0, 0x3f	; 63
    5792:	f8 94       	cli
    5794:	de bf       	out	0x3e, r29	; 62
    5796:	0f be       	out	0x3f, r0	; 63
    5798:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    579a:	be 01       	movw	r22, r28
    579c:	6c 5c       	subi	r22, 0xCC	; 204
    579e:	7f 4f       	sbci	r23, 0xFF	; 255
    57a0:	ce 01       	movw	r24, r28
    57a2:	01 96       	adiw	r24, 0x01	; 1
    57a4:	0e 94 8e 30 	call	0x611c	; 0x611c <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    57a8:	6c a9       	ldd	r22, Y+52	; 0x34
    57aa:	ce 01       	movw	r24, r28
    57ac:	01 96       	adiw	r24, 0x01	; 1
    57ae:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LM_send_uplink>
}
    57b2:	e4 96       	adiw	r28, 0x34	; 52
    57b4:	0f b6       	in	r0, 0x3f	; 63
    57b6:	f8 94       	cli
    57b8:	de bf       	out	0x3e, r29	; 62
    57ba:	0f be       	out	0x3f, r0	; 63
    57bc:	cd bf       	out	0x3d, r28	; 61
    57be:	df 91       	pop	r29
    57c0:	cf 91       	pop	r28
    57c2:	08 95       	ret

Disassembly of section .text.send_body:

00005746 <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    5746:	cf 93       	push	r28
    5748:	df 93       	push	r29
    574a:	cd b7       	in	r28, 0x3d	; 61
    574c:	de b7       	in	r29, 0x3e	; 62
    574e:	e4 97       	sbiw	r28, 0x34	; 52
    5750:	0f b6       	in	r0, 0x3f	; 63
    5752:	f8 94       	cli
    5754:	de bf       	out	0x3e, r29	; 62
    5756:	0f be       	out	0x3f, r0	; 63
    5758:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    575a:	ae 01       	movw	r20, r28
    575c:	4c 5c       	subi	r20, 0xCC	; 204
    575e:	5f 4f       	sbci	r21, 0xFF	; 255
    5760:	be 01       	movw	r22, r28
    5762:	6f 5f       	subi	r22, 0xFF	; 255
    5764:	7f 4f       	sbci	r23, 0xFF	; 255
    5766:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    576a:	6c a9       	ldd	r22, Y+52	; 0x34
    576c:	ce 01       	movw	r24, r28
    576e:	01 96       	adiw	r24, 0x01	; 1
    5770:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LM_send_uplink>
}
    5774:	e4 96       	adiw	r28, 0x34	; 52
    5776:	0f b6       	in	r0, 0x3f	; 63
    5778:	f8 94       	cli
    577a:	de bf       	out	0x3e, r29	; 62
    577c:	0f be       	out	0x3f, r0	; 63
    577e:	cd bf       	out	0x3d, r28	; 61
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	08 95       	ret

Disassembly of section .text.decode_body_response:

00006066 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    6066:	cf 93       	push	r28
	switch(status){
    6068:	62 30       	cpi	r22, 0x02	; 2
    606a:	71 f0       	breq	.+28     	; 0x6088 <decode_body_response+0x22>
    606c:	18 f4       	brcc	.+6      	; 0x6074 <decode_body_response+0xe>
    606e:	66 23       	and	r22, r22
    6070:	31 f0       	breq	.+12     	; 0x607e <decode_body_response+0x18>
    6072:	03 c0       	rjmp	.+6      	; 0x607a <decode_body_response+0x14>
    6074:	64 50       	subi	r22, 0x04	; 4
    6076:	62 30       	cpi	r22, 0x02	; 2
    6078:	10 f0       	brcs	.+4      	; 0x607e <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    607a:	86 e1       	ldi	r24, 0x16	; 22
    607c:	06 c0       	rjmp	.+12     	; 0x608a <decode_body_response+0x24>
    607e:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    6080:	0e 94 45 34 	call	0x688a	; 0x688a <MRPP_set_body_sent>
			return success;
    6084:	8c 2f       	mov	r24, r28
    6086:	01 c0       	rjmp	.+2      	; 0x608a <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    6088:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    608a:	cf 91       	pop	r28
    608c:	08 95       	ret

Disassembly of section .text.send_tail:

000057c4 <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    57c4:	cf 93       	push	r28
    57c6:	df 93       	push	r29
    57c8:	cd b7       	in	r28, 0x3d	; 61
    57ca:	de b7       	in	r29, 0x3e	; 62
    57cc:	e4 97       	sbiw	r28, 0x34	; 52
    57ce:	0f b6       	in	r0, 0x3f	; 63
    57d0:	f8 94       	cli
    57d2:	de bf       	out	0x3e, r29	; 62
    57d4:	0f be       	out	0x3f, r0	; 63
    57d6:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    57d8:	be 01       	movw	r22, r28
    57da:	6c 5c       	subi	r22, 0xCC	; 204
    57dc:	7f 4f       	sbci	r23, 0xFF	; 255
    57de:	ce 01       	movw	r24, r28
    57e0:	01 96       	adiw	r24, 0x01	; 1
    57e2:	0e 94 9f 30 	call	0x613e	; 0x613e <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    57e6:	6c a9       	ldd	r22, Y+52	; 0x34
    57e8:	ce 01       	movw	r24, r28
    57ea:	01 96       	adiw	r24, 0x01	; 1
    57ec:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <LM_send_uplink>
}
    57f0:	e4 96       	adiw	r28, 0x34	; 52
    57f2:	0f b6       	in	r0, 0x3f	; 63
    57f4:	f8 94       	cli
    57f6:	de bf       	out	0x3e, r29	; 62
    57f8:	0f be       	out	0x3f, r0	; 63
    57fa:	cd bf       	out	0x3d, r28	; 61
    57fc:	df 91       	pop	r29
    57fe:	cf 91       	pop	r28
    5800:	08 95       	ret

Disassembly of section .text.send_msg:

00006496 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    6496:	0e 94 3c 20 	call	0x4078	; 0x4078 <uart1_hal_send_string>
    649a:	2f ef       	ldi	r18, 0xFF	; 255
    649c:	80 e7       	ldi	r24, 0x70	; 112
    649e:	92 e0       	ldi	r25, 0x02	; 2
    64a0:	21 50       	subi	r18, 0x01	; 1
    64a2:	80 40       	sbci	r24, 0x00	; 0
    64a4:	90 40       	sbci	r25, 0x00	; 0
    64a6:	e1 f7       	brne	.-8      	; 0x64a0 <send_msg+0xa>
    64a8:	00 c0       	rjmp	.+0      	; 0x64aa <send_msg+0x14>
    64aa:	00 00       	nop
    64ac:	08 95       	ret

Disassembly of section .text.stage_0:

00003398 <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    3398:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <state_s0>
    339c:	82 30       	cpi	r24, 0x02	; 2
    339e:	41 f1       	breq	.+80     	; 0x33f0 <stage_0+0x58>
    33a0:	28 f4       	brcc	.+10     	; 0x33ac <stage_0+0x14>
    33a2:	88 23       	and	r24, r24
    33a4:	51 f0       	breq	.+20     	; 0x33ba <stage_0+0x22>
    33a6:	81 30       	cpi	r24, 0x01	; 1
    33a8:	d9 f0       	breq	.+54     	; 0x33e0 <stage_0+0x48>
    33aa:	f6 cf       	rjmp	.-20     	; 0x3398 <stage_0>
    33ac:	84 30       	cpi	r24, 0x04	; 4
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <stage_0+0x1a>
    33b0:	50 c0       	rjmp	.+160    	; 0x3452 <stage_0+0xba>
    33b2:	40 f1       	brcs	.+80     	; 0x3404 <stage_0+0x6c>
    33b4:	85 30       	cpi	r24, 0x05	; 5
    33b6:	91 f1       	breq	.+100    	; 0x341c <stage_0+0x84>
    33b8:	ef cf       	rjmp	.-34     	; 0x3398 <stage_0>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    33ba:	64 e6       	ldi	r22, 0x64	; 100
    33bc:	72 e0       	ldi	r23, 0x02	; 2
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    33c4:	e0 ed       	ldi	r30, 0xD0	; 208
    33c6:	fe e0       	ldi	r31, 0x0E	; 14
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	4a ec       	ldi	r20, 0xCA	; 202
    33ce:	5a e0       	ldi	r21, 0x0A	; 10
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	0e 94 c1 30 	call	0x6182	; 0x6182 <SCD30_init_sampling>
				state_s0=STAGE_GET_TIME;
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    33de:	dc cf       	rjmp	.-72     	; 0x3398 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    33e0:	84 e5       	ldi	r24, 0x54	; 84
    33e2:	9f e0       	ldi	r25, 0x0F	; 15
    33e4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <RTC_get_current_time>
				state_s0=STAGE_START;
    33e8:	82 e0       	ldi	r24, 0x02	; 2
    33ea:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    33ee:	d4 cf       	rjmp	.-88     	; 0x3398 <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    33f0:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <methHeatUpTime>
    33f4:	0e 94 43 31 	call	0x6286	; 0x6286 <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    33f8:	0e 94 85 34 	call	0x690a	; 0x690a <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    33fc:	83 e0       	ldi	r24, 0x03	; 3
    33fe:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3402:	ca cf       	rjmp	.-108    	; 0x3398 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3404:	0e 94 11 33 	call	0x6622	; 0x6622 <ADC_meth_sens_ready>
    3408:	88 23       	and	r24, r24
    340a:	61 f1       	breq	.+88     	; 0x3464 <stage_0+0xcc>
    340c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <SCD30_is_sampling_done>
    3410:	88 23       	and	r24, r24
    3412:	51 f1       	breq	.+84     	; 0x3468 <stage_0+0xd0>
				state_s0=STAGE_UPDATE_MRPP;
    3414:	85 e0       	ldi	r24, 0x05	; 5
    3416:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    341a:	be cf       	rjmp	.-132    	; 0x3398 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    341c:	27 e7       	ldi	r18, 0x77	; 119
    341e:	3f e0       	ldi	r19, 0x0F	; 15
    3420:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    3424:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    3428:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    342c:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    3430:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    3434:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    3438:	0e 94 c9 13 	call	0x2792	; 0x2792 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    343c:	4a ec       	ldi	r20, 0xCA	; 202
    343e:	5a e0       	ldi	r21, 0x0A	; 10
    3440:	67 e7       	ldi	r22, 0x77	; 119
    3442:	7f e0       	ldi	r23, 0x0F	; 15
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    344a:	84 e0       	ldi	r24, 0x04	; 4
    344c:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3450:	a3 cf       	rjmp	.-186    	; 0x3398 <stage_0>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    3452:	63 e7       	ldi	r22, 0x73	; 115
    3454:	72 e0       	ldi	r23, 0x02	; 2
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_deinit_sampling();
    345c:	0e 94 bf 33 	call	0x677e	; 0x677e <SCD30_deinit_sampling>
				return STAGE_DONE;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	08 95       	ret
    3468:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    346a:	08 95       	ret

Disassembly of section .text.stage_1:

00002e0a <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    2e0e:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <state_s1>
    2e12:	82 30       	cpi	r24, 0x02	; 2
    2e14:	89 f1       	breq	.+98     	; 0x2e78 <stage_1+0x6e>
    2e16:	28 f4       	brcc	.+10     	; 0x2e22 <stage_1+0x18>
    2e18:	88 23       	and	r24, r24
    2e1a:	51 f0       	breq	.+20     	; 0x2e30 <stage_1+0x26>
    2e1c:	81 30       	cpi	r24, 0x01	; 1
    2e1e:	21 f1       	breq	.+72     	; 0x2e68 <stage_1+0x5e>
    2e20:	f6 cf       	rjmp	.-20     	; 0x2e0e <stage_1+0x4>
    2e22:	84 30       	cpi	r24, 0x04	; 4
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <stage_1+0x1e>
    2e26:	5e c0       	rjmp	.+188    	; 0x2ee4 <stage_1+0xda>
    2e28:	78 f1       	brcs	.+94     	; 0x2e88 <stage_1+0x7e>
    2e2a:	85 30       	cpi	r24, 0x05	; 5
    2e2c:	c9 f1       	breq	.+114    	; 0x2ea0 <stage_1+0x96>
    2e2e:	ef cf       	rjmp	.-34     	; 0x2e0e <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2e30:	65 e8       	ldi	r22, 0x85	; 133
    2e32:	72 e0       	ldi	r23, 0x02	; 2
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2e3a:	c0 ed       	ldi	r28, 0xD0	; 208
    2e3c:	de e0       	ldi	r29, 0x0E	; 14
    2e3e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e40:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e42:	4a ec       	ldi	r20, 0xCA	; 202
    2e44:	5a e0       	ldi	r21, 0x0A	; 10
    2e46:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e48:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e4a:	0e 94 c1 30 	call	0x6182	; 0x6182 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2e4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2e50:	7e 81       	ldd	r23, Y+6	; 0x06
    2e52:	42 e7       	ldi	r20, 0x72	; 114
    2e54:	58 e0       	ldi	r21, 0x08	; 8
    2e56:	8f 81       	ldd	r24, Y+7	; 0x07
    2e58:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2e5c:	81 11       	cpse	r24, r1
    2e5e:	4d c0       	rjmp	.+154    	; 0x2efa <stage_1+0xf0>
				
				state_s1=STAGE_GET_TIME;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2e66:	d3 cf       	rjmp	.-90     	; 0x2e0e <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2e68:	84 e5       	ldi	r24, 0x54	; 84
    2e6a:	9f e0       	ldi	r25, 0x0F	; 15
    2e6c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2e76:	cb cf       	rjmp	.-106    	; 0x2e0e <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2e78:	0e 94 85 34 	call	0x690a	; 0x690a <SCD30_start_sampling>
				ADC_start_sampling();
    2e7c:	0e 94 76 34 	call	0x68ec	; 0x68ec <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2e80:	83 e0       	ldi	r24, 0x03	; 3
    2e82:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2e86:	c3 cf       	rjmp	.-122    	; 0x2e0e <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2e88:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <SCD30_is_sampling_done>
    2e8c:	88 23       	and	r24, r24
    2e8e:	b9 f1       	breq	.+110    	; 0x2efe <stage_1+0xf4>
    2e90:	0e 94 ac 31 	call	0x6358	; 0x6358 <ADC_is_sampling_done>
    2e94:	88 23       	and	r24, r24
    2e96:	a9 f1       	breq	.+106    	; 0x2f02 <stage_1+0xf8>
				state_s1=STAGE_UPDATE_MRPP;
    2e98:	85 e0       	ldi	r24, 0x05	; 5
    2e9a:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2e9e:	b7 cf       	rjmp	.-146    	; 0x2e0e <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2ea0:	27 e7       	ldi	r18, 0x77	; 119
    2ea2:	3f e0       	ldi	r19, 0x0F	; 15
    2ea4:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2ea8:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2eac:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2eb0:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2eb4:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2eb8:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2ebc:	0e 94 c9 13 	call	0x2792	; 0x2792 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2ec0:	4a ec       	ldi	r20, 0xCA	; 202
    2ec2:	5a e0       	ldi	r21, 0x0A	; 10
    2ec4:	67 e7       	ldi	r22, 0x77	; 119
    2ec6:	7f e0       	ldi	r23, 0x0F	; 15
    2ec8:	83 e0       	ldi	r24, 0x03	; 3
    2eca:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2ece:	42 e7       	ldi	r20, 0x72	; 114
    2ed0:	58 e0       	ldi	r21, 0x08	; 8
    2ed2:	67 e7       	ldi	r22, 0x77	; 119
    2ed4:	7f e0       	ldi	r23, 0x0F	; 15
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    2edc:	84 e0       	ldi	r24, 0x04	; 4
    2ede:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2ee2:	95 cf       	rjmp	.-214    	; 0x2e0e <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2ee4:	64 e9       	ldi	r22, 0x94	; 148
    2ee6:	72 e0       	ldi	r23, 0x02	; 2
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_deinit_sampling();
    2eee:	0e 94 bf 33 	call	0x677e	; 0x677e <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2ef2:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <ADC_deinit_sampling>
				return STAGE_DONE;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	05 c0       	rjmp	.+10     	; 0x2f04 <stage_1+0xfa>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <stage_1+0xfa>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <stage_1+0xfa>
    2f02:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

Disassembly of section .text.stage_2:

00002ae8 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    2aec:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <state_s2>
    2af0:	82 30       	cpi	r24, 0x02	; 2
    2af2:	91 f1       	breq	.+100    	; 0x2b58 <stage_2+0x70>
    2af4:	28 f4       	brcc	.+10     	; 0x2b00 <stage_2+0x18>
    2af6:	88 23       	and	r24, r24
    2af8:	59 f0       	breq	.+22     	; 0x2b10 <stage_2+0x28>
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	29 f1       	breq	.+74     	; 0x2b48 <stage_2+0x60>
    2afe:	f6 cf       	rjmp	.-20     	; 0x2aec <stage_2+0x4>
    2b00:	84 30       	cpi	r24, 0x04	; 4
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <stage_2+0x1e>
    2b04:	69 c0       	rjmp	.+210    	; 0x2bd8 <stage_2+0xf0>
    2b06:	b0 f1       	brcs	.+108    	; 0x2b74 <stage_2+0x8c>
    2b08:	85 30       	cpi	r24, 0x05	; 5
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <stage_2+0x26>
    2b0c:	43 c0       	rjmp	.+134    	; 0x2b94 <stage_2+0xac>
    2b0e:	ee cf       	rjmp	.-36     	; 0x2aec <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    2b10:	66 ea       	ldi	r22, 0xA6	; 166
    2b12:	72 e0       	ldi	r23, 0x02	; 2
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    2b1a:	c0 ed       	ldi	r28, 0xD0	; 208
    2b1c:	de e0       	ldi	r29, 0x0E	; 14
    2b1e:	6c 89       	ldd	r22, Y+20	; 0x14
    2b20:	7d 89       	ldd	r23, Y+21	; 0x15
    2b22:	4a ec       	ldi	r20, 0xCA	; 202
    2b24:	5a e0       	ldi	r21, 0x0A	; 10
    2b26:	8e 89       	ldd	r24, Y+22	; 0x16
    2b28:	9f 89       	ldd	r25, Y+23	; 0x17
    2b2a:	0e 94 c1 30 	call	0x6182	; 0x6182 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    2b2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b30:	78 89       	ldd	r23, Y+16	; 0x10
    2b32:	42 e7       	ldi	r20, 0x72	; 114
    2b34:	58 e0       	ldi	r21, 0x08	; 8
    2b36:	89 89       	ldd	r24, Y+17	; 0x11
    2b38:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b3c:	81 11       	cpse	r24, r1
    2b3e:	57 c0       	rjmp	.+174    	; 0x2bee <stage_2+0x106>
			
				state_s2=STAGE_GET_TIME;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2b46:	d2 cf       	rjmp	.-92     	; 0x2aec <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2b48:	84 e5       	ldi	r24, 0x54	; 84
    2b4a:	9f e0       	ldi	r25, 0x0F	; 15
    2b4c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2b56:	ca cf       	rjmp	.-108    	; 0x2aec <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2b58:	0e 94 85 34 	call	0x690a	; 0x690a <SCD30_start_sampling>
				ADC_start_sampling();
    2b5c:	0e 94 76 34 	call	0x68ec	; 0x68ec <ADC_start_sampling>
				PUMP_start(airPumpTime);
    2b60:	80 91 91 0f 	lds	r24, 0x0F91	; 0x800f91 <airPumpTime>
    2b64:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <airPumpTime+0x1>
    2b68:	0e 94 47 30 	call	0x608e	; 0x608e <PUMP_start>
			
				state_s2=STAGE_WAIT;
    2b6c:	83 e0       	ldi	r24, 0x03	; 3
    2b6e:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2b72:	bc cf       	rjmp	.-136    	; 0x2aec <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2b74:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <SCD30_is_sampling_done>
    2b78:	88 23       	and	r24, r24
    2b7a:	d9 f1       	breq	.+118    	; 0x2bf2 <stage_2+0x10a>
    2b7c:	0e 94 ac 31 	call	0x6358	; 0x6358 <ADC_is_sampling_done>
    2b80:	88 23       	and	r24, r24
    2b82:	c9 f1       	breq	.+114    	; 0x2bf6 <stage_2+0x10e>
    2b84:	0e 94 d6 31 	call	0x63ac	; 0x63ac <PUMP_is_done>
    2b88:	88 23       	and	r24, r24
    2b8a:	b9 f1       	breq	.+110    	; 0x2bfa <stage_2+0x112>
				state_s2=STAGE_UPDATE_MRPP;
    2b8c:	85 e0       	ldi	r24, 0x05	; 5
    2b8e:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2b92:	ac cf       	rjmp	.-168    	; 0x2aec <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2b94:	27 e7       	ldi	r18, 0x77	; 119
    2b96:	3f e0       	ldi	r19, 0x0F	; 15
    2b98:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2b9c:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2ba0:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2ba4:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2ba8:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2bac:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2bb0:	0e 94 c9 13 	call	0x2792	; 0x2792 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2bb4:	4a ec       	ldi	r20, 0xCA	; 202
    2bb6:	5a e0       	ldi	r21, 0x0A	; 10
    2bb8:	67 e7       	ldi	r22, 0x77	; 119
    2bba:	7f e0       	ldi	r23, 0x0F	; 15
    2bbc:	85 e0       	ldi	r24, 0x05	; 5
    2bbe:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    2bc2:	42 e7       	ldi	r20, 0x72	; 114
    2bc4:	58 e0       	ldi	r21, 0x08	; 8
    2bc6:	67 e7       	ldi	r22, 0x77	; 119
    2bc8:	7f e0       	ldi	r23, 0x0F	; 15
    2bca:	84 e0       	ldi	r24, 0x04	; 4
    2bcc:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    2bd0:	84 e0       	ldi	r24, 0x04	; 4
    2bd2:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2bd6:	8a cf       	rjmp	.-236    	; 0x2aec <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2bd8:	65 eb       	ldi	r22, 0xB5	; 181
    2bda:	72 e0       	ldi	r23, 0x02	; 2
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_deinit_sampling();
    2be2:	0e 94 bf 33 	call	0x677e	; 0x677e <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2be6:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <ADC_deinit_sampling>
				return STAGE_DONE;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	07 c0       	rjmp	.+14     	; 0x2bfc <stage_2+0x114>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2bee:	83 e0       	ldi	r24, 0x03	; 3
    2bf0:	05 c0       	rjmp	.+10     	; 0x2bfc <stage_2+0x114>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	03 c0       	rjmp	.+6      	; 0x2bfc <stage_2+0x114>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <stage_2+0x114>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	08 95       	ret

Disassembly of section .text.stage_3:

00002c02 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    2c02:	cf 93       	push	r28
    2c04:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    2c06:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <state_s3>
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	89 f1       	breq	.+98     	; 0x2c70 <stage_3+0x6e>
    2c0e:	28 f4       	brcc	.+10     	; 0x2c1a <stage_3+0x18>
    2c10:	88 23       	and	r24, r24
    2c12:	51 f0       	breq	.+20     	; 0x2c28 <stage_3+0x26>
    2c14:	81 30       	cpi	r24, 0x01	; 1
    2c16:	21 f1       	breq	.+72     	; 0x2c60 <stage_3+0x5e>
    2c18:	f6 cf       	rjmp	.-20     	; 0x2c06 <stage_3+0x4>
    2c1a:	84 30       	cpi	r24, 0x04	; 4
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <stage_3+0x1e>
    2c1e:	5e c0       	rjmp	.+188    	; 0x2cdc <stage_3+0xda>
    2c20:	78 f1       	brcs	.+94     	; 0x2c80 <stage_3+0x7e>
    2c22:	85 30       	cpi	r24, 0x05	; 5
    2c24:	c9 f1       	breq	.+114    	; 0x2c98 <stage_3+0x96>
    2c26:	ef cf       	rjmp	.-34     	; 0x2c06 <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    2c28:	67 ec       	ldi	r22, 0xC7	; 199
    2c2a:	72 e0       	ldi	r23, 0x02	; 2
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    2c32:	c0 ed       	ldi	r28, 0xD0	; 208
    2c34:	de e0       	ldi	r29, 0x0E	; 14
    2c36:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2c38:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2c3a:	4a ec       	ldi	r20, 0xCA	; 202
    2c3c:	5a e0       	ldi	r21, 0x0A	; 10
    2c3e:	88 a1       	ldd	r24, Y+32	; 0x20
    2c40:	99 a1       	ldd	r25, Y+33	; 0x21
    2c42:	0e 94 c1 30 	call	0x6182	; 0x6182 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2c46:	69 8d       	ldd	r22, Y+25	; 0x19
    2c48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c4a:	42 e7       	ldi	r20, 0x72	; 114
    2c4c:	58 e0       	ldi	r21, 0x08	; 8
    2c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c50:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2c54:	81 11       	cpse	r24, r1
    2c56:	51 c0       	rjmp	.+162    	; 0x2cfa <stage_3+0xf8>
			
				state_s3=STAGE_GET_TIME;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2c5e:	d3 cf       	rjmp	.-90     	; 0x2c06 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2c60:	84 e5       	ldi	r24, 0x54	; 84
    2c62:	9f e0       	ldi	r25, 0x0F	; 15
    2c64:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2c6e:	cb cf       	rjmp	.-106    	; 0x2c06 <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2c70:	0e 94 85 34 	call	0x690a	; 0x690a <SCD30_start_sampling>
				ADC_start_sampling();
    2c74:	0e 94 76 34 	call	0x68ec	; 0x68ec <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2c7e:	c3 cf       	rjmp	.-122    	; 0x2c06 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2c80:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <SCD30_is_sampling_done>
    2c84:	88 23       	and	r24, r24
    2c86:	d9 f1       	breq	.+118    	; 0x2cfe <stage_3+0xfc>
    2c88:	0e 94 ac 31 	call	0x6358	; 0x6358 <ADC_is_sampling_done>
    2c8c:	88 23       	and	r24, r24
    2c8e:	c9 f1       	breq	.+114    	; 0x2d02 <stage_3+0x100>
				state_s3=STAGE_UPDATE_MRPP;
    2c90:	85 e0       	ldi	r24, 0x05	; 5
    2c92:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2c96:	b7 cf       	rjmp	.-146    	; 0x2c06 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2c98:	27 e7       	ldi	r18, 0x77	; 119
    2c9a:	3f e0       	ldi	r19, 0x0F	; 15
    2c9c:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2ca0:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2ca4:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2ca8:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2cac:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2cb0:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2cb4:	0e 94 c9 13 	call	0x2792	; 0x2792 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2cb8:	4a ec       	ldi	r20, 0xCA	; 202
    2cba:	5a e0       	ldi	r21, 0x0A	; 10
    2cbc:	67 e7       	ldi	r22, 0x77	; 119
    2cbe:	7f e0       	ldi	r23, 0x0F	; 15
    2cc0:	87 e0       	ldi	r24, 0x07	; 7
    2cc2:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2cc6:	42 e7       	ldi	r20, 0x72	; 114
    2cc8:	58 e0       	ldi	r21, 0x08	; 8
    2cca:	67 e7       	ldi	r22, 0x77	; 119
    2ccc:	7f e0       	ldi	r23, 0x0F	; 15
    2cce:	86 e0       	ldi	r24, 0x06	; 6
    2cd0:	0e 94 21 23 	call	0x4642	; 0x4642 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    2cd4:	84 e0       	ldi	r24, 0x04	; 4
    2cd6:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2cda:	95 cf       	rjmp	.-214    	; 0x2c06 <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    2cdc:	66 ed       	ldi	r22, 0xD6	; 214
    2cde:	72 e0       	ldi	r23, 0x02	; 2
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				SCD30_deinit_sampling();
    2ce6:	0e 94 bf 33 	call	0x677e	; 0x677e <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2cea:	0e 94 bc 34 	call	0x6978	; 0x6978 <SCD30_sensor_off>
				ADC_deinit_sampling();
    2cee:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    2cf2:	0e 94 a8 34 	call	0x6950	; 0x6950 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	05 c0       	rjmp	.+10     	; 0x2d04 <stage_3+0x102>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <stage_3+0x102>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	01 c0       	rjmp	.+2      	; 0x2d04 <stage_3+0x102>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00001014 <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    1020:	c0 e0       	ldi	r28, 0x00	; 0
    1022:	1a c0       	rjmp	.+52     	; 0x1058 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    1024:	c6 e0       	ldi	r28, 0x06	; 6
    1026:	18 c0       	rjmp	.+48     	; 0x1058 <MAINPG_start+0x44>
					//state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1028:	c5 e0       	ldi	r28, 0x05	; 5
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <MAINPG_start+0x44>
    102c:	c5 e0       	ldi	r28, 0x05	; 5
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <MAINPG_start+0x44>
    1030:	c5 e0       	ldi	r28, 0x05	; 5
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <MAINPG_start+0x44>
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					//state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    1034:	c5 e0       	ldi	r28, 0x05	; 5
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1038:	c6 e1       	ldi	r28, 0x16	; 22
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    103c:	c6 e1       	ldi	r28, 0x16	; 22
    103e:	0c c0       	rjmp	.+24     	; 0x1058 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1040:	c6 e1       	ldi	r28, 0x16	; 22
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1044:	c6 e1       	ldi	r28, 0x16	; 22
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1048:	c6 e1       	ldi	r28, 0x16	; 22
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    104c:	cd 2f       	mov	r28, r29
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <MAINPG_start+0x44>
    1050:	cd 2f       	mov	r28, r29
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    1054:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1056:	c1 e1       	ldi	r28, 0x11	; 17
	SCD30_STATUS scd30Status;
	STAGE_STATUS stageStatus;
	

	while(1){
		switch(state){
    1058:	ec 2f       	mov	r30, r28
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e8 31       	cpi	r30, 0x18	; 24
    105e:	f1 05       	cpc	r31, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <MAINPG_start+0x44>
    1062:	e2 5a       	subi	r30, 0xA2	; 162
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	0c 94 51 34 	jmp	0x68a2	; 0x68a2 <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    106a:	68 ee       	ldi	r22, 0xE8	; 232
    106c:	72 e0       	ldi	r23, 0x02	; 2
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    1074:	10 92 af 0f 	sts	0x0FAF, r1	; 0x800faf <state_s0>
				state_s1=STAGE_INIT;
    1078:	10 92 ae 0f 	sts	0x0FAE, r1	; 0x800fae <state_s1>
				state_s2=STAGE_INIT;
    107c:	10 92 ad 0f 	sts	0x0FAD, r1	; 0x800fad <state_s2>
				state_s3=STAGE_INIT;
    1080:	10 92 ac 0f 	sts	0x0FAC, r1	; 0x800fac <state_s3>
				bodyIndex=-1;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
    1088:	90 93 94 0f 	sts	0x0F94, r25	; 0x800f94 <bodyIndex+0x1>
    108c:	80 93 93 0f 	sts	0x0F93, r24	; 0x800f93 <bodyIndex>
				
				uart0_hal_init();
    1090:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart0_hal_init>
				uart1_hal_init();
    1094:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <uart1_hal_init>
				TWI_HAL_init();
    1098:	0e 94 08 33 	call	0x6610	; 0x6610 <TWI_HAL_init>
				TC2_HAL_init();
    109c:	0e 94 03 31 	call	0x6206	; 0x6206 <TC2_HAL_init>
				rn2483_init();
    10a0:	0e 94 98 34 	call	0x6930	; 0x6930 <rn2483_init>
				SCD30_HAL_init();
    10a4:	0e 94 79 33 	call	0x66f2	; 0x66f2 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    10a8:	0e 94 56 33 	call	0x66ac	; 0x66ac <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    10ac:	0e 94 5d 33 	call	0x66ba	; 0x66ba <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    10b0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    10b4:	0e 94 64 33 	call	0x66c8	; 0x66c8 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    10b8:	0e 94 72 33 	call	0x66e4	; 0x66e4 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    10bc:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <fromSleep>
    10c0:	81 11       	cpse	r24, r1
    10c2:	b0 cf       	rjmp	.-160    	; 0x1024 <MAINPG_start+0x10>
    10c4:	c1 e0       	ldi	r28, 0x01	; 1
    10c6:	c8 cf       	rjmp	.-112    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    10c8:	67 ef       	ldi	r22, 0xF7	; 247
    10ca:	72 e0       	ldi	r23, 0x02	; 2
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    10d2:	0e 94 63 32 	call	0x64c6	; 0x64c6 <EM_has_deveui>
    10d6:	88 23       	and	r24, r24
    10d8:	09 f4       	brne	.+2      	; 0x10dc <MAINPG_start+0xc8>
    10da:	a6 cf       	rjmp	.-180    	; 0x1028 <MAINPG_start+0x14>
    10dc:	0e 94 6e 32 	call	0x64dc	; 0x64dc <EM_has_appeui>
    10e0:	88 23       	and	r24, r24
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <MAINPG_start+0xd2>
    10e4:	a3 cf       	rjmp	.-186    	; 0x102c <MAINPG_start+0x18>
    10e6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <EM_has_appkey>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <MAINPG_start+0xdc>
    10ee:	a0 cf       	rjmp	.-192    	; 0x1030 <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					//state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
    10f0:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <read_eeprom>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <MAINPG_start+0xe6>
    10f8:	9d cf       	rjmp	.-198    	; 0x1034 <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    10fa:	c2 e0       	ldi	r28, 0x02	; 2
    10fc:	ad cf       	rjmp	.-166    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    10fe:	65 e0       	ldi	r22, 0x05	; 5
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				LED_start_try_join();
    1108:	0e 94 b8 33 	call	0x6770	; 0x6770 <LED_start_try_join>
				lmStatus=join_lora();
    110c:	0e 94 23 33 	call	0x6646	; 0x6646 <join_lora>
    1110:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    1112:	0e 94 4e 33 	call	0x669c	; 0x669c <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    1116:	8c 2f       	mov	r24, r28
    1118:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <decode_join_response>
    111c:	c8 2f       	mov	r28, r24
			break;
    111e:	9c cf       	rjmp	.-200    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    1120:	66 e1       	ldi	r22, 0x16	; 22
    1122:	73 e0       	ldi	r23, 0x03	; 3
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				LED_join_success();
    112a:	0e 94 83 2b 	call	0x5706	; 0x5706 <LED_join_success>
				state=MAINPG_INIT_MODULES;
    112e:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    1130:	93 cf       	rjmp	.-218    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    1132:	6a e2       	ldi	r22, 0x2A	; 42
    1134:	73 e0       	ldi	r23, 0x03	; 3
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				lmStatus=LM_wake_up();
    113c:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1140:	81 11       	cpse	r24, r1
    1142:	7a cf       	rjmp	.-268    	; 0x1038 <MAINPG_start+0x24>
    1144:	ca e0       	ldi	r28, 0x0A	; 10
    1146:	88 cf       	rjmp	.-240    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    1148:	6e e3       	ldi	r22, 0x3E	; 62
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				LED_join_denied();
    1152:	0e 94 ac 34 	call	0x6958	; 0x6958 <LED_join_denied>
    1156:	2a ea       	ldi	r18, 0xAA	; 170
    1158:	36 ee       	ldi	r19, 0xE6	; 230
    115a:	86 e9       	ldi	r24, 0x96	; 150
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	d9 f7       	brne	.-10     	; 0x115e <__stack+0x5f>
    1168:	00 00       	nop
				_delay_ms(20000);
				state=MAINPG_LORA_JOIN_NETWORK;
    116a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    116c:	75 cf       	rjmp	.-278    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    116e:	64 e5       	ldi	r22, 0x54	; 84
    1170:	73 e0       	ldi	r23, 0x03	; 3
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    1178:	e0 90 6b 0f 	lds	r14, 0x0F6B	; 0x800f6b <ppmx>
    117c:	f0 90 6c 0f 	lds	r15, 0x0F6C	; 0x800f6c <ppmx+0x1>
    1180:	00 91 6d 0f 	lds	r16, 0x0F6D	; 0x800f6d <ppmx+0x2>
    1184:	10 91 6e 0f 	lds	r17, 0x0F6E	; 0x800f6e <ppmx+0x3>
    1188:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <rrlx>
    118c:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <rrlx+0x1>
    1190:	40 91 71 0f 	lds	r20, 0x0F71	; 0x800f71 <rrlx+0x2>
    1194:	50 91 72 0f 	lds	r21, 0x0F72	; 0x800f72 <rrlx+0x3>
    1198:	60 91 73 0f 	lds	r22, 0x0F73	; 0x800f73 <vccx>
    119c:	70 91 74 0f 	lds	r23, 0x0F74	; 0x800f74 <vccx+0x1>
    11a0:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <vccx+0x2>
    11a4:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <vccx+0x3>
    11a8:	0e 94 41 2b 	call	0x5682	; 0x5682 <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    11ac:	0e 94 b0 30 	call	0x6160	; 0x6160 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    11b0:	81 11       	cpse	r24, r1
    11b2:	44 cf       	rjmp	.-376    	; 0x103c <MAINPG_start+0x28>
    11b4:	c7 e0       	ldi	r28, 0x07	; 7
    11b6:	50 cf       	rjmp	.-352    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    11b8:	68 e6       	ldi	r22, 0x68	; 104
    11ba:	73 e0       	ldi	r23, 0x03	; 3
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    11c8:	81 11       	cpse	r24, r1
    11ca:	3a cf       	rjmp	.-396    	; 0x1040 <MAINPG_start+0x2c>
    11cc:	c9 e0       	ldi	r28, 0x09	; 9
    11ce:	44 cf       	rjmp	.-376    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    11d0:	68 e7       	ldi	r22, 0x78	; 120
    11d2:	73 e0       	ldi	r23, 0x03	; 3
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    11da:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    11de:	81 11       	cpse	r24, r1
    11e0:	31 cf       	rjmp	.-414    	; 0x1044 <MAINPG_start+0x30>
    11e2:	c8 e0       	ldi	r28, 0x08	; 8
    11e4:	39 cf       	rjmp	.-398    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    11e6:	69 e8       	ldi	r22, 0x89	; 137
    11e8:	73 e0       	ldi	r23, 0x03	; 3
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				rtcStatus=set_wakeup();
    11f0:	0e 94 8a 34 	call	0x6914	; 0x6914 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    11f4:	81 11       	cpse	r24, r1
    11f6:	28 cf       	rjmp	.-432    	; 0x1048 <MAINPG_start+0x34>
    11f8:	cb e0       	ldi	r28, 0x0B	; 11
    11fa:	2e cf       	rjmp	.-420    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    11fc:	6f e9       	ldi	r22, 0x9F	; 159
    11fe:	73 e0       	ldi	r23, 0x03	; 3
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				groupId=EM_get_group_id();
    1206:	0e 94 2d 34 	call	0x685a	; 0x685a <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    120a:	48 2f       	mov	r20, r24
    120c:	67 e0       	ldi	r22, 0x07	; 7
    120e:	80 ed       	ldi	r24, 0xD0	; 208
    1210:	9e e0       	ldi	r25, 0x0E	; 14
    1212:	0e 94 3f 32 	call	0x647e	; 0x647e <MRPP_init_group>
				EM_set_group_id(groupId);
    1216:	0e 94 27 34 	call	0x684e	; 0x684e <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    121a:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    121c:	1d cf       	rjmp	.-454    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    121e:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <LM_is_free>
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <__stack+0x129>
    1226:	18 cf       	rjmp	.-464    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    1228:	60 eb       	ldi	r22, 0xB0	; 176
    122a:	73 e0       	ldi	r23, 0x03	; 3
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				lmStatus=send_header();
    1232:	0e 94 c3 2b 	call	0x5786	; 0x5786 <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1236:	4c e0       	ldi	r20, 0x0C	; 12
    1238:	6d e0       	ldi	r22, 0x0D	; 13
    123a:	0e 94 7f 31 	call	0x62fe	; 0x62fe <decode_header_tail_response>
    123e:	c8 2f       	mov	r28, r24
			break;
    1240:	0b cf       	rjmp	.-490    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    1242:	0e 94 cc 19 	call	0x3398	; 0x3398 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1246:	6e e0       	ldi	r22, 0x0E	; 14
    1248:	0e 94 84 32 	call	0x6508	; 0x6508 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    124c:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    124e:	c8 2f       	mov	r28, r24
			break;
    1250:	03 cf       	rjmp	.-506    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    1252:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1256:	6f e0       	ldi	r22, 0x0F	; 15
    1258:	0e 94 84 32 	call	0x6508	; 0x6508 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    125c:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    125e:	c8 2f       	mov	r28, r24
			break;
    1260:	fb ce       	rjmp	.-522    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    1262:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1266:	60 e1       	ldi	r22, 0x10	; 16
    1268:	0e 94 84 32 	call	0x6508	; 0x6508 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    126c:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    126e:	c8 2f       	mov	r28, r24
			break;
    1270:	f3 ce       	rjmp	.-538    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    1272:	0e 94 01 16 	call	0x2c02	; 0x2c02 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1276:	62 e1       	ldi	r22, 0x12	; 18
    1278:	0e 94 84 32 	call	0x6508	; 0x6508 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    127c:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    127e:	c8 2f       	mov	r28, r24
			break;
    1280:	eb ce       	rjmp	.-554    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    1282:	83 e9       	ldi	r24, 0x93	; 147
    1284:	9f e0       	ldi	r25, 0x0F	; 15
    1286:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MRPP_is_body_package_ready>
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <__stack+0x191>
    128e:	de ce       	rjmp	.-580    	; 0x104c <MAINPG_start+0x38>
    1290:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <LM_is_free>
    1294:	88 23       	and	r24, r24
    1296:	09 f4       	brne	.+2      	; 0x129a <__stack+0x19b>
    1298:	db ce       	rjmp	.-586    	; 0x1050 <MAINPG_start+0x3c>
					lmStatus=send_body(bodyIndex);
    129a:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    129e:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    12a2:	0e 94 a3 2b 	call	0x5746	; 0x5746 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    12a6:	4d 2f       	mov	r20, r29
    12a8:	68 2f       	mov	r22, r24
    12aa:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    12ae:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    12b2:	0e 94 33 30 	call	0x6066	; 0x6066 <decode_body_response>
    12b6:	c8 2f       	mov	r28, r24
    12b8:	cf ce       	rjmp	.-610    	; 0x1058 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    12ba:	0e 94 80 34 	call	0x6900	; 0x6900 <MRPP_all_body_package_sent>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <__stack+0x1c5>
    12c2:	c8 ce       	rjmp	.-624    	; 0x1054 <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    12c4:	c3 e1       	ldi	r28, 0x13	; 19
    12c6:	c8 ce       	rjmp	.-624    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    12c8:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <LM_is_free>
    12cc:	88 23       	and	r24, r24
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <__stack+0x1d3>
    12d0:	c3 ce       	rjmp	.-634    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    12d2:	63 ec       	ldi	r22, 0xC3	; 195
    12d4:	73 e0       	ldi	r23, 0x03	; 3
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				lmStatus=send_tail();
    12dc:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    12e0:	43 e1       	ldi	r20, 0x13	; 19
    12e2:	64 e1       	ldi	r22, 0x14	; 20
    12e4:	0e 94 7f 31 	call	0x62fe	; 0x62fe <decode_header_tail_response>
    12e8:	c8 2f       	mov	r28, r24
				
			break;
    12ea:	b6 ce       	rjmp	.-660    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    12ec:	64 ed       	ldi	r22, 0xD4	; 212
    12ee:	73 e0       	ldi	r23, 0x03	; 3
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				lmStatus=LM_put_to_sleep();
    12f6:	0e 94 1a 33 	call	0x6634	; 0x6634 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	81 11       	cpse	r24, r1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	90 93 a9 0f 	sts	0x0FA9, r25	; 0x800fa9 <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	0e 94 9a 32 	call	0x6534	; 0x6534 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 ae 32 	call	0x655c	; 0x655c <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0e 94 b8 32 	call	0x6570	; 0x6570 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 a4 32 	call	0x6548	; 0x6548 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 c2 32 	call	0x6584	; 0x6584 <PM_HAL_LED_power>
				TC2_HAL_kill();
    1322:	0e 94 62 34 	call	0x68c4	; 0x68c4 <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    1326:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    1328:	97 ce       	rjmp	.-722    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    132a:	67 ee       	ldi	r22, 0xE7	; 231
    132c:	73 e0       	ldi	r23, 0x03	; 3
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				PM_HAL_enter_power_down();
    1334:	0e 94 01 2c 	call	0x5802	; 0x5802 <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    1338:	64 ef       	ldi	r22, 0xF4	; 244
    133a:	73 e0       	ldi	r23, 0x03	; 3
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				state=MAINPG_INIT_HW;
    1342:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    1344:	89 ce       	rjmp	.-750    	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    1346:	6a e0       	ldi	r22, 0x0A	; 10
    1348:	74 e0       	ldi	r23, 0x04	; 4
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				LED_conf_err();
    1350:	0e 94 b0 34 	call	0x6960	; 0x6960 <LED_conf_err>
				print_debug("Conf err\n\r");
    1354:	6a e1       	ldi	r22, 0x1A	; 26
    1356:	74 e0       	ldi	r23, 0x04	; 4
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				state=MAINPG_END;
    135e:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1360:	7b ce       	rjmp	.-778    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    1362:	65 e2       	ldi	r22, 0x25	; 37
    1364:	74 e0       	ldi	r23, 0x04	; 4
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				LED_fatal_err();
    136c:	0e 94 b4 34 	call	0x6968	; 0x6968 <LED_fatal_err>
				fromSleep=false;
    1370:	10 92 a9 0f 	sts	0x0FA9, r1	; 0x800fa9 <fromSleep>
				state=MAINPG_END;
    1374:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1376:	70 ce       	rjmp	.-800    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    1378:	66 e3       	ldi	r22, 0x36	; 54
    137a:	74 e0       	ldi	r23, 0x04	; 4
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 4b 32 	call	0x6496	; 0x6496 <send_msg>
				return;
			break;	
		}
	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret

Disassembly of section .text.calc_crc8:

00005b2a <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    5b2a:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    5b2e:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    5b30:	14 c0       	rjmp	.+40     	; 0x5b5a <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    5b32:	fa 01       	movw	r30, r20
    5b34:	e3 0f       	add	r30, r19
    5b36:	f1 1d       	adc	r31, r1
    5b38:	90 81       	ld	r25, Z
    5b3a:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    5b3c:	28 e0       	ldi	r18, 0x08	; 8
    5b3e:	0a c0       	rjmp	.+20     	; 0x5b54 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    5b40:	88 23       	and	r24, r24
    5b42:	34 f4       	brge	.+12     	; 0x5b50 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	88 0f       	add	r24, r24
    5b48:	99 1f       	adc	r25, r25
    5b4a:	91 e3       	ldi	r25, 0x31	; 49
    5b4c:	89 27       	eor	r24, r25
    5b4e:	01 c0       	rjmp	.+2      	; 0x5b52 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    5b50:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    5b52:	21 50       	subi	r18, 0x01	; 1
    5b54:	21 11       	cpse	r18, r1
    5b56:	f4 cf       	rjmp	.-24     	; 0x5b40 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5b58:	3f 5f       	subi	r19, 0xFF	; 255
    5b5a:	36 17       	cp	r19, r22
    5b5c:	50 f3       	brcs	.-44     	; 0x5b32 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    5b5e:	08 95       	ret

Disassembly of section .text.get_decimal:

00003902 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    3902:	cf 92       	push	r12
    3904:	df 92       	push	r13
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3914:	10 e0       	ldi	r17, 0x00	; 0
    3916:	08 c0       	rjmp	.+16     	; 0x3928 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    3918:	cc 0d       	add	r28, r12
    391a:	dd 1d       	adc	r29, r13
    391c:	88 81       	ld	r24, Y
    391e:	8e 32       	cpi	r24, 0x2E	; 46
    3920:	11 f4       	brne	.+4      	; 0x3926 <get_decimal+0x24>
			index=i+1;
    3922:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    3924:	0c c0       	rjmp	.+24     	; 0x393e <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3926:	1f 5f       	subi	r17, 0xFF	; 255
    3928:	c1 2f       	mov	r28, r17
    392a:	d0 e0       	ldi	r29, 0x00	; 0
    392c:	b6 01       	movw	r22, r12
    392e:	80 e8       	ldi	r24, 0x80	; 128
    3930:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	c8 17       	cp	r28, r24
    3938:	d9 07       	cpc	r29, r25
    393a:	70 f3       	brcs	.-36     	; 0x3918 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    393c:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    393e:	11 23       	and	r17, r17
    3940:	71 f1       	breq	.+92     	; 0x399e <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    3942:	c1 0e       	add	r12, r17
    3944:	d1 1c       	adc	r13, r1
    3946:	80 e8       	ldi	r24, 0x80	; 128
    3948:	e8 2e       	mov	r14, r24
    394a:	8e 2d       	mov	r24, r14
    394c:	b6 01       	movw	r22, r12
    394e:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    3952:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    3954:	8e 2d       	mov	r24, r14
    3956:	b6 01       	movw	r22, r12
    3958:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
    395c:	8c 01       	movw	r16, r24
	float divisor=1;
    395e:	0f 2e       	mov	r0, r31
    3960:	c1 2c       	mov	r12, r1
    3962:	d1 2c       	mov	r13, r1
    3964:	f0 e8       	ldi	r31, 0x80	; 128
    3966:	ef 2e       	mov	r14, r31
    3968:	ff e3       	ldi	r31, 0x3F	; 63
    396a:	ff 2e       	mov	r15, r31
    396c:	f0 2d       	mov	r31, r0
	
	while(len>0){
    396e:	0b c0       	rjmp	.+22     	; 0x3986 <get_decimal+0x84>
		divisor*=10;
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e2       	ldi	r20, 0x20	; 32
    3976:	51 e4       	ldi	r21, 0x41	; 65
    3978:	c7 01       	movw	r24, r14
    397a:	b6 01       	movw	r22, r12
    397c:	0e 94 c4 34 	call	0x6988	; 0x6988 <__mulsf3>
    3980:	6b 01       	movw	r12, r22
    3982:	7c 01       	movw	r14, r24
		len--;
    3984:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    3986:	c1 11       	cpse	r28, r1
    3988:	f3 cf       	rjmp	.-26     	; 0x3970 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    398a:	b8 01       	movw	r22, r16
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 44 21 	call	0x4288	; 0x4288 <__floatunsisf>
    3994:	a7 01       	movw	r20, r14
    3996:	96 01       	movw	r18, r12
    3998:	0e 94 c0 34 	call	0x6980	; 0x6980 <__divsf3>
    399c:	03 c0       	rjmp	.+6      	; 0x39a4 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    399e:	60 e0       	ldi	r22, 0x00	; 0
    39a0:	70 e0       	ldi	r23, 0x00	; 0
    39a2:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	ef 90       	pop	r14
    39b0:	df 90       	pop	r13
    39b2:	cf 90       	pop	r12
    39b4:	08 95       	ret

Disassembly of section .text.str2flaot:

00004fb6 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    4fb6:	cf 92       	push	r12
    4fb8:	df 92       	push	r13
    4fba:	ef 92       	push	r14
    4fbc:	ff 92       	push	r15
    4fbe:	0f 93       	push	r16
    4fc0:	1f 93       	push	r17
    4fc2:	cf 93       	push	r28
    4fc4:	df 93       	push	r29
    4fc6:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    4fc8:	bc 01       	movw	r22, r24
    4fca:	80 e8       	ldi	r24, 0x80	; 128
    4fcc:	0e 94 c8 34 	call	0x6990	; 0x6990 <atoi>
    4fd0:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    4fd2:	c8 01       	movw	r24, r16
    4fd4:	0e 94 81 1c 	call	0x3902	; 0x3902 <get_decimal>
    4fd8:	6b 01       	movw	r12, r22
    4fda:	7c 01       	movw	r14, r24
	return intVal+deci;
    4fdc:	be 01       	movw	r22, r28
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	0e 94 44 21 	call	0x4288	; 0x4288 <__floatunsisf>
    4fe6:	9b 01       	movw	r18, r22
    4fe8:	ac 01       	movw	r20, r24
    4fea:	c7 01       	movw	r24, r14
    4fec:	b6 01       	movw	r22, r12
    4fee:	0e 94 c7 33 	call	0x678e	; 0x678e <__addsf3>
	
	
}
    4ff2:	df 91       	pop	r29
    4ff4:	cf 91       	pop	r28
    4ff6:	1f 91       	pop	r17
    4ff8:	0f 91       	pop	r16
    4ffa:	ff 90       	pop	r15
    4ffc:	ef 90       	pop	r14
    4ffe:	df 90       	pop	r13
    5000:	cf 90       	pop	r12
    5002:	08 95       	ret

Disassembly of section .text.is_float:

00004c2e <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    4c2e:	ef 92       	push	r14
    4c30:	ff 92       	push	r15
    4c32:	0f 93       	push	r16
    4c34:	1f 93       	push	r17
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29
    4c3a:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4c3c:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    4c3e:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    4c40:	0d c0       	rjmp	.+26     	; 0x4c5c <is_float+0x2e>
	{
		if(str[i]=='.'){
    4c42:	ce 0d       	add	r28, r14
    4c44:	df 1d       	adc	r29, r15
    4c46:	88 81       	ld	r24, Y
    4c48:	8e 32       	cpi	r24, 0x2E	; 46
    4c4a:	21 f4       	brne	.+8      	; 0x4c54 <is_float+0x26>
			if (got_dot)
    4c4c:	01 11       	cpse	r16, r1
    4c4e:	11 c0       	rjmp	.+34     	; 0x4c72 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    4c50:	01 e0       	ldi	r16, 0x01	; 1
    4c52:	03 c0       	rjmp	.+6      	; 0x4c5a <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4c54:	80 53       	subi	r24, 0x30	; 48
    4c56:	8a 30       	cpi	r24, 0x0A	; 10
    4c58:	70 f4       	brcc	.+28     	; 0x4c76 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4c5a:	1f 5f       	subi	r17, 0xFF	; 255
    4c5c:	c1 2f       	mov	r28, r17
    4c5e:	d0 e0       	ldi	r29, 0x00	; 0
    4c60:	b7 01       	movw	r22, r14
    4c62:	80 e8       	ldi	r24, 0x80	; 128
    4c64:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <strlen>
    4c68:	c8 17       	cp	r28, r24
    4c6a:	d9 07       	cpc	r29, r25
    4c6c:	50 f3       	brcs	.-44     	; 0x4c42 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	03 c0       	rjmp	.+6      	; 0x4c78 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	01 c0       	rjmp	.+2      	; 0x4c78 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4c76:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	ff 90       	pop	r15
    4c82:	ef 90       	pop	r14
    4c84:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000678c <__subsf3>:
    678c:	50 58       	subi	r21, 0x80	; 128

0000678e <__addsf3>:
    678e:	bb 27       	eor	r27, r27
    6790:	aa 27       	eor	r26, r26
    6792:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__addsf3x>
    6796:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003540 <__addsf3x>:
    3540:	11 c0       	rjmp	.+34     	; 0x3564 <__addsf3x+0x24>
    3542:	0e 94 cd 33 	call	0x679a	; 0x679a <__fp_pscA>
    3546:	38 f0       	brcs	.+14     	; 0x3556 <__addsf3x+0x16>
    3548:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__fp_pscB>
    354c:	20 f0       	brcs	.+8      	; 0x3556 <__addsf3x+0x16>
    354e:	39 f4       	brne	.+14     	; 0x355e <__addsf3x+0x1e>
    3550:	9f 3f       	cpi	r25, 0xFF	; 255
    3552:	19 f4       	brne	.+6      	; 0x355a <__addsf3x+0x1a>
    3554:	26 f4       	brtc	.+8      	; 0x355e <__addsf3x+0x1e>
    3556:	0c 94 e4 34 	jmp	0x69c8	; 0x69c8 <__fp_nan>
    355a:	0e f4       	brtc	.+2      	; 0x355e <__addsf3x+0x1e>
    355c:	e0 95       	com	r30
    355e:	e7 fb       	bst	r30, 7
    3560:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_inf>
    3564:	e9 2f       	mov	r30, r25
    3566:	0e 94 ba 2a 	call	0x5574	; 0x5574 <__fp_split3>
    356a:	58 f3       	brcs	.-42     	; 0x3542 <__addsf3x+0x2>
    356c:	ba 17       	cp	r27, r26
    356e:	62 07       	cpc	r22, r18
    3570:	73 07       	cpc	r23, r19
    3572:	84 07       	cpc	r24, r20
    3574:	95 07       	cpc	r25, r21
    3576:	20 f0       	brcs	.+8      	; 0x3580 <__addsf3x+0x40>
    3578:	79 f4       	brne	.+30     	; 0x3598 <__addsf3x+0x58>
    357a:	a6 f5       	brtc	.+104    	; 0x35e4 <__addsf3x+0xa4>
    357c:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__fp_zero>
    3580:	0e f4       	brtc	.+2      	; 0x3584 <__addsf3x+0x44>
    3582:	e0 95       	com	r30
    3584:	0b 2e       	mov	r0, r27
    3586:	ba 2f       	mov	r27, r26
    3588:	a0 2d       	mov	r26, r0
    358a:	0b 01       	movw	r0, r22
    358c:	b9 01       	movw	r22, r18
    358e:	90 01       	movw	r18, r0
    3590:	0c 01       	movw	r0, r24
    3592:	ca 01       	movw	r24, r20
    3594:	a0 01       	movw	r20, r0
    3596:	11 24       	eor	r1, r1
    3598:	ff 27       	eor	r31, r31
    359a:	59 1b       	sub	r21, r25
    359c:	99 f0       	breq	.+38     	; 0x35c4 <__addsf3x+0x84>
    359e:	59 3f       	cpi	r21, 0xF9	; 249
    35a0:	50 f4       	brcc	.+20     	; 0x35b6 <__addsf3x+0x76>
    35a2:	50 3e       	cpi	r21, 0xE0	; 224
    35a4:	68 f1       	brcs	.+90     	; 0x3600 <__addsf3x+0xc0>
    35a6:	1a 16       	cp	r1, r26
    35a8:	f0 40       	sbci	r31, 0x00	; 0
    35aa:	a2 2f       	mov	r26, r18
    35ac:	23 2f       	mov	r18, r19
    35ae:	34 2f       	mov	r19, r20
    35b0:	44 27       	eor	r20, r20
    35b2:	58 5f       	subi	r21, 0xF8	; 248
    35b4:	f3 cf       	rjmp	.-26     	; 0x359c <__addsf3x+0x5c>
    35b6:	46 95       	lsr	r20
    35b8:	37 95       	ror	r19
    35ba:	27 95       	ror	r18
    35bc:	a7 95       	ror	r26
    35be:	f0 40       	sbci	r31, 0x00	; 0
    35c0:	53 95       	inc	r21
    35c2:	c9 f7       	brne	.-14     	; 0x35b6 <__addsf3x+0x76>
    35c4:	7e f4       	brtc	.+30     	; 0x35e4 <__addsf3x+0xa4>
    35c6:	1f 16       	cp	r1, r31
    35c8:	ba 0b       	sbc	r27, r26
    35ca:	62 0b       	sbc	r22, r18
    35cc:	73 0b       	sbc	r23, r19
    35ce:	84 0b       	sbc	r24, r20
    35d0:	ba f0       	brmi	.+46     	; 0x3600 <__addsf3x+0xc0>
    35d2:	91 50       	subi	r25, 0x01	; 1
    35d4:	a1 f0       	breq	.+40     	; 0x35fe <__addsf3x+0xbe>
    35d6:	ff 0f       	add	r31, r31
    35d8:	bb 1f       	adc	r27, r27
    35da:	66 1f       	adc	r22, r22
    35dc:	77 1f       	adc	r23, r23
    35de:	88 1f       	adc	r24, r24
    35e0:	c2 f7       	brpl	.-16     	; 0x35d2 <__addsf3x+0x92>
    35e2:	0e c0       	rjmp	.+28     	; 0x3600 <__addsf3x+0xc0>
    35e4:	ba 0f       	add	r27, r26
    35e6:	62 1f       	adc	r22, r18
    35e8:	73 1f       	adc	r23, r19
    35ea:	84 1f       	adc	r24, r20
    35ec:	48 f4       	brcc	.+18     	; 0x3600 <__addsf3x+0xc0>
    35ee:	87 95       	ror	r24
    35f0:	77 95       	ror	r23
    35f2:	67 95       	ror	r22
    35f4:	b7 95       	ror	r27
    35f6:	f7 95       	ror	r31
    35f8:	9e 3f       	cpi	r25, 0xFE	; 254
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <__addsf3x+0xbe>
    35fc:	b0 cf       	rjmp	.-160    	; 0x355e <__addsf3x+0x1e>
    35fe:	93 95       	inc	r25
    3600:	88 0f       	add	r24, r24
    3602:	08 f0       	brcs	.+2      	; 0x3606 <__addsf3x+0xc6>
    3604:	99 27       	eor	r25, r25
    3606:	ee 0f       	add	r30, r30
    3608:	97 95       	ror	r25
    360a:	87 95       	ror	r24
    360c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006980 <__divsf3>:
    6980:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3x>
    6984:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000031e2 <__divsf3x>:
    31e2:	10 c0       	rjmp	.+32     	; 0x3204 <__divsf3x+0x22>
    31e4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__fp_pscB>
    31e8:	58 f0       	brcs	.+22     	; 0x3200 <__divsf3x+0x1e>
    31ea:	0e 94 cd 33 	call	0x679a	; 0x679a <__fp_pscA>
    31ee:	40 f0       	brcs	.+16     	; 0x3200 <__divsf3x+0x1e>
    31f0:	29 f4       	brne	.+10     	; 0x31fc <__divsf3x+0x1a>
    31f2:	5f 3f       	cpi	r21, 0xFF	; 255
    31f4:	29 f0       	breq	.+10     	; 0x3200 <__divsf3x+0x1e>
    31f6:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_inf>
    31fa:	51 11       	cpse	r21, r1
    31fc:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__fp_szero>
    3200:	0c 94 e4 34 	jmp	0x69c8	; 0x69c8 <__fp_nan>
    3204:	0e 94 ba 2a 	call	0x5574	; 0x5574 <__fp_split3>
    3208:	68 f3       	brcs	.-38     	; 0x31e4 <__divsf3x+0x2>

0000320a <__divsf3_pse>:
    320a:	99 23       	and	r25, r25
    320c:	b1 f3       	breq	.-20     	; 0x31fa <__divsf3x+0x18>
    320e:	55 23       	and	r21, r21
    3210:	91 f3       	breq	.-28     	; 0x31f6 <__divsf3x+0x14>
    3212:	95 1b       	sub	r25, r21
    3214:	55 0b       	sbc	r21, r21
    3216:	bb 27       	eor	r27, r27
    3218:	aa 27       	eor	r26, r26
    321a:	62 17       	cp	r22, r18
    321c:	73 07       	cpc	r23, r19
    321e:	84 07       	cpc	r24, r20
    3220:	38 f0       	brcs	.+14     	; 0x3230 <__divsf3_pse+0x26>
    3222:	9f 5f       	subi	r25, 0xFF	; 255
    3224:	5f 4f       	sbci	r21, 0xFF	; 255
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	44 1f       	adc	r20, r20
    322c:	aa 1f       	adc	r26, r26
    322e:	a9 f3       	breq	.-22     	; 0x321a <__divsf3_pse+0x10>
    3230:	35 d0       	rcall	.+106    	; 0x329c <__divsf3_pse+0x92>
    3232:	0e 2e       	mov	r0, r30
    3234:	3a f0       	brmi	.+14     	; 0x3244 <__divsf3_pse+0x3a>
    3236:	e0 e8       	ldi	r30, 0x80	; 128
    3238:	32 d0       	rcall	.+100    	; 0x329e <__divsf3_pse+0x94>
    323a:	91 50       	subi	r25, 0x01	; 1
    323c:	50 40       	sbci	r21, 0x00	; 0
    323e:	e6 95       	lsr	r30
    3240:	00 1c       	adc	r0, r0
    3242:	ca f7       	brpl	.-14     	; 0x3236 <__divsf3_pse+0x2c>
    3244:	2b d0       	rcall	.+86     	; 0x329c <__divsf3_pse+0x92>
    3246:	fe 2f       	mov	r31, r30
    3248:	29 d0       	rcall	.+82     	; 0x329c <__divsf3_pse+0x92>
    324a:	66 0f       	add	r22, r22
    324c:	77 1f       	adc	r23, r23
    324e:	88 1f       	adc	r24, r24
    3250:	bb 1f       	adc	r27, r27
    3252:	26 17       	cp	r18, r22
    3254:	37 07       	cpc	r19, r23
    3256:	48 07       	cpc	r20, r24
    3258:	ab 07       	cpc	r26, r27
    325a:	b0 e8       	ldi	r27, 0x80	; 128
    325c:	09 f0       	breq	.+2      	; 0x3260 <__divsf3_pse+0x56>
    325e:	bb 0b       	sbc	r27, r27
    3260:	80 2d       	mov	r24, r0
    3262:	bf 01       	movw	r22, r30
    3264:	ff 27       	eor	r31, r31
    3266:	93 58       	subi	r25, 0x83	; 131
    3268:	5f 4f       	sbci	r21, 0xFF	; 255
    326a:	3a f0       	brmi	.+14     	; 0x327a <__divsf3_pse+0x70>
    326c:	9e 3f       	cpi	r25, 0xFE	; 254
    326e:	51 05       	cpc	r21, r1
    3270:	78 f0       	brcs	.+30     	; 0x3290 <__divsf3_pse+0x86>
    3272:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_inf>
    3276:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__fp_szero>
    327a:	5f 3f       	cpi	r21, 0xFF	; 255
    327c:	e4 f3       	brlt	.-8      	; 0x3276 <__divsf3_pse+0x6c>
    327e:	98 3e       	cpi	r25, 0xE8	; 232
    3280:	d4 f3       	brlt	.-12     	; 0x3276 <__divsf3_pse+0x6c>
    3282:	86 95       	lsr	r24
    3284:	77 95       	ror	r23
    3286:	67 95       	ror	r22
    3288:	b7 95       	ror	r27
    328a:	f7 95       	ror	r31
    328c:	9f 5f       	subi	r25, 0xFF	; 255
    328e:	c9 f7       	brne	.-14     	; 0x3282 <__divsf3_pse+0x78>
    3290:	88 0f       	add	r24, r24
    3292:	91 1d       	adc	r25, r1
    3294:	96 95       	lsr	r25
    3296:	87 95       	ror	r24
    3298:	97 f9       	bld	r25, 7
    329a:	08 95       	ret
    329c:	e1 e0       	ldi	r30, 0x01	; 1
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	88 1f       	adc	r24, r24
    32a4:	bb 1f       	adc	r27, r27
    32a6:	62 17       	cp	r22, r18
    32a8:	73 07       	cpc	r23, r19
    32aa:	84 07       	cpc	r24, r20
    32ac:	ba 07       	cpc	r27, r26
    32ae:	20 f0       	brcs	.+8      	; 0x32b8 <__divsf3_pse+0xae>
    32b0:	62 1b       	sub	r22, r18
    32b2:	73 0b       	sbc	r23, r19
    32b4:	84 0b       	sbc	r24, r20
    32b6:	ba 0b       	sbc	r27, r26
    32b8:	ee 1f       	adc	r30, r30
    32ba:	88 f7       	brcc	.-30     	; 0x329e <__divsf3_pse+0x94>
    32bc:	e0 95       	com	r30
    32be:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004a68 <__fixunssfsi>:
    4a68:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__fp_splitA>
    4a6c:	88 f0       	brcs	.+34     	; 0x4a90 <__fixunssfsi+0x28>
    4a6e:	9f 57       	subi	r25, 0x7F	; 127
    4a70:	98 f0       	brcs	.+38     	; 0x4a98 <__fixunssfsi+0x30>
    4a72:	b9 2f       	mov	r27, r25
    4a74:	99 27       	eor	r25, r25
    4a76:	b7 51       	subi	r27, 0x17	; 23
    4a78:	b0 f0       	brcs	.+44     	; 0x4aa6 <__fixunssfsi+0x3e>
    4a7a:	e1 f0       	breq	.+56     	; 0x4ab4 <__fixunssfsi+0x4c>
    4a7c:	66 0f       	add	r22, r22
    4a7e:	77 1f       	adc	r23, r23
    4a80:	88 1f       	adc	r24, r24
    4a82:	99 1f       	adc	r25, r25
    4a84:	1a f0       	brmi	.+6      	; 0x4a8c <__fixunssfsi+0x24>
    4a86:	ba 95       	dec	r27
    4a88:	c9 f7       	brne	.-14     	; 0x4a7c <__fixunssfsi+0x14>
    4a8a:	14 c0       	rjmp	.+40     	; 0x4ab4 <__fixunssfsi+0x4c>
    4a8c:	b1 30       	cpi	r27, 0x01	; 1
    4a8e:	91 f0       	breq	.+36     	; 0x4ab4 <__fixunssfsi+0x4c>
    4a90:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__fp_zero>
    4a94:	b1 e0       	ldi	r27, 0x01	; 1
    4a96:	08 95       	ret
    4a98:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__fp_zero>
    4a9c:	67 2f       	mov	r22, r23
    4a9e:	78 2f       	mov	r23, r24
    4aa0:	88 27       	eor	r24, r24
    4aa2:	b8 5f       	subi	r27, 0xF8	; 248
    4aa4:	39 f0       	breq	.+14     	; 0x4ab4 <__fixunssfsi+0x4c>
    4aa6:	b9 3f       	cpi	r27, 0xF9	; 249
    4aa8:	cc f3       	brlt	.-14     	; 0x4a9c <__fixunssfsi+0x34>
    4aaa:	86 95       	lsr	r24
    4aac:	77 95       	ror	r23
    4aae:	67 95       	ror	r22
    4ab0:	b3 95       	inc	r27
    4ab2:	d9 f7       	brne	.-10     	; 0x4aaa <__fixunssfsi+0x42>
    4ab4:	3e f4       	brtc	.+14     	; 0x4ac4 <__fixunssfsi+0x5c>
    4ab6:	90 95       	com	r25
    4ab8:	80 95       	com	r24
    4aba:	70 95       	com	r23
    4abc:	61 95       	neg	r22
    4abe:	7f 4f       	sbci	r23, 0xFF	; 255
    4ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004288 <__floatunsisf>:
    4288:	e8 94       	clt
    428a:	09 c0       	rjmp	.+18     	; 0x429e <__floatsisf+0x12>

0000428c <__floatsisf>:
    428c:	97 fb       	bst	r25, 7
    428e:	3e f4       	brtc	.+14     	; 0x429e <__floatsisf+0x12>
    4290:	90 95       	com	r25
    4292:	80 95       	com	r24
    4294:	70 95       	com	r23
    4296:	61 95       	neg	r22
    4298:	7f 4f       	sbci	r23, 0xFF	; 255
    429a:	8f 4f       	sbci	r24, 0xFF	; 255
    429c:	9f 4f       	sbci	r25, 0xFF	; 255
    429e:	99 23       	and	r25, r25
    42a0:	a9 f0       	breq	.+42     	; 0x42cc <__floatsisf+0x40>
    42a2:	f9 2f       	mov	r31, r25
    42a4:	96 e9       	ldi	r25, 0x96	; 150
    42a6:	bb 27       	eor	r27, r27
    42a8:	93 95       	inc	r25
    42aa:	f6 95       	lsr	r31
    42ac:	87 95       	ror	r24
    42ae:	77 95       	ror	r23
    42b0:	67 95       	ror	r22
    42b2:	b7 95       	ror	r27
    42b4:	f1 11       	cpse	r31, r1
    42b6:	f8 cf       	rjmp	.-16     	; 0x42a8 <__floatsisf+0x1c>
    42b8:	fa f4       	brpl	.+62     	; 0x42f8 <__floatsisf+0x6c>
    42ba:	bb 0f       	add	r27, r27
    42bc:	11 f4       	brne	.+4      	; 0x42c2 <__floatsisf+0x36>
    42be:	60 ff       	sbrs	r22, 0
    42c0:	1b c0       	rjmp	.+54     	; 0x42f8 <__floatsisf+0x6c>
    42c2:	6f 5f       	subi	r22, 0xFF	; 255
    42c4:	7f 4f       	sbci	r23, 0xFF	; 255
    42c6:	8f 4f       	sbci	r24, 0xFF	; 255
    42c8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ca:	16 c0       	rjmp	.+44     	; 0x42f8 <__floatsisf+0x6c>
    42cc:	88 23       	and	r24, r24
    42ce:	11 f0       	breq	.+4      	; 0x42d4 <__floatsisf+0x48>
    42d0:	96 e9       	ldi	r25, 0x96	; 150
    42d2:	11 c0       	rjmp	.+34     	; 0x42f6 <__floatsisf+0x6a>
    42d4:	77 23       	and	r23, r23
    42d6:	21 f0       	breq	.+8      	; 0x42e0 <__floatsisf+0x54>
    42d8:	9e e8       	ldi	r25, 0x8E	; 142
    42da:	87 2f       	mov	r24, r23
    42dc:	76 2f       	mov	r23, r22
    42de:	05 c0       	rjmp	.+10     	; 0x42ea <__floatsisf+0x5e>
    42e0:	66 23       	and	r22, r22
    42e2:	71 f0       	breq	.+28     	; 0x4300 <__floatsisf+0x74>
    42e4:	96 e8       	ldi	r25, 0x86	; 134
    42e6:	86 2f       	mov	r24, r22
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	60 e0       	ldi	r22, 0x00	; 0
    42ec:	2a f0       	brmi	.+10     	; 0x42f8 <__floatsisf+0x6c>
    42ee:	9a 95       	dec	r25
    42f0:	66 0f       	add	r22, r22
    42f2:	77 1f       	adc	r23, r23
    42f4:	88 1f       	adc	r24, r24
    42f6:	da f7       	brpl	.-10     	; 0x42ee <__floatsisf+0x62>
    42f8:	88 0f       	add	r24, r24
    42fa:	96 95       	lsr	r25
    42fc:	87 95       	ror	r24
    42fe:	97 f9       	bld	r25, 7
    4300:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006896 <__fp_inf>:
    6896:	97 f9       	bld	r25, 7
    6898:	9f 67       	ori	r25, 0x7F	; 127
    689a:	80 e8       	ldi	r24, 0x80	; 128
    689c:	70 e0       	ldi	r23, 0x00	; 0
    689e:	60 e0       	ldi	r22, 0x00	; 0
    68a0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000069c8 <__fp_nan>:
    69c8:	9f ef       	ldi	r25, 0xFF	; 255
    69ca:	80 ec       	ldi	r24, 0xC0	; 192
    69cc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000679a <__fp_pscA>:
    679a:	00 24       	eor	r0, r0
    679c:	0a 94       	dec	r0
    679e:	16 16       	cp	r1, r22
    67a0:	17 06       	cpc	r1, r23
    67a2:	18 06       	cpc	r1, r24
    67a4:	09 06       	cpc	r0, r25
    67a6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000067a8 <__fp_pscB>:
    67a8:	00 24       	eor	r0, r0
    67aa:	0a 94       	dec	r0
    67ac:	12 16       	cp	r1, r18
    67ae:	13 06       	cpc	r1, r19
    67b0:	14 06       	cpc	r1, r20
    67b2:	05 06       	cpc	r0, r21
    67b4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000061a4 <__fp_round>:
    61a4:	09 2e       	mov	r0, r25
    61a6:	03 94       	inc	r0
    61a8:	00 0c       	add	r0, r0
    61aa:	11 f4       	brne	.+4      	; 0x61b0 <__fp_round+0xc>
    61ac:	88 23       	and	r24, r24
    61ae:	52 f0       	brmi	.+20     	; 0x61c4 <__fp_round+0x20>
    61b0:	bb 0f       	add	r27, r27
    61b2:	40 f4       	brcc	.+16     	; 0x61c4 <__fp_round+0x20>
    61b4:	bf 2b       	or	r27, r31
    61b6:	11 f4       	brne	.+4      	; 0x61bc <__fp_round+0x18>
    61b8:	60 ff       	sbrs	r22, 0
    61ba:	04 c0       	rjmp	.+8      	; 0x61c4 <__fp_round+0x20>
    61bc:	6f 5f       	subi	r22, 0xFF	; 255
    61be:	7f 4f       	sbci	r23, 0xFF	; 255
    61c0:	8f 4f       	sbci	r24, 0xFF	; 255
    61c2:	9f 4f       	sbci	r25, 0xFF	; 255
    61c4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005574 <__fp_split3>:
    5574:	57 fd       	sbrc	r21, 7
    5576:	90 58       	subi	r25, 0x80	; 128
    5578:	44 0f       	add	r20, r20
    557a:	55 1f       	adc	r21, r21
    557c:	59 f0       	breq	.+22     	; 0x5594 <__fp_splitA+0x10>
    557e:	5f 3f       	cpi	r21, 0xFF	; 255
    5580:	71 f0       	breq	.+28     	; 0x559e <__fp_splitA+0x1a>
    5582:	47 95       	ror	r20

00005584 <__fp_splitA>:
    5584:	88 0f       	add	r24, r24
    5586:	97 fb       	bst	r25, 7
    5588:	99 1f       	adc	r25, r25
    558a:	61 f0       	breq	.+24     	; 0x55a4 <__fp_splitA+0x20>
    558c:	9f 3f       	cpi	r25, 0xFF	; 255
    558e:	79 f0       	breq	.+30     	; 0x55ae <__fp_splitA+0x2a>
    5590:	87 95       	ror	r24
    5592:	08 95       	ret
    5594:	12 16       	cp	r1, r18
    5596:	13 06       	cpc	r1, r19
    5598:	14 06       	cpc	r1, r20
    559a:	55 1f       	adc	r21, r21
    559c:	f2 cf       	rjmp	.-28     	; 0x5582 <__fp_split3+0xe>
    559e:	46 95       	lsr	r20
    55a0:	f1 df       	rcall	.-30     	; 0x5584 <__fp_splitA>
    55a2:	08 c0       	rjmp	.+16     	; 0x55b4 <__fp_splitA+0x30>
    55a4:	16 16       	cp	r1, r22
    55a6:	17 06       	cpc	r1, r23
    55a8:	18 06       	cpc	r1, r24
    55aa:	99 1f       	adc	r25, r25
    55ac:	f1 cf       	rjmp	.-30     	; 0x5590 <__fp_splitA+0xc>
    55ae:	86 95       	lsr	r24
    55b0:	71 05       	cpc	r23, r1
    55b2:	61 05       	cpc	r22, r1
    55b4:	08 94       	sec
    55b6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000067b6 <__fp_zero>:
    67b6:	e8 94       	clt

000067b8 <__fp_szero>:
    67b8:	bb 27       	eor	r27, r27
    67ba:	66 27       	eor	r22, r22
    67bc:	77 27       	eor	r23, r23
    67be:	cb 01       	movw	r24, r22
    67c0:	97 f9       	bld	r25, 7
    67c2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006988 <__mulsf3>:
    6988:	0e 94 36 1a 	call	0x346c	; 0x346c <__mulsf3x>
    698c:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000346c <__mulsf3x>:
    346c:	0f c0       	rjmp	.+30     	; 0x348c <__mulsf3x+0x20>
    346e:	0e 94 cd 33 	call	0x679a	; 0x679a <__fp_pscA>
    3472:	38 f0       	brcs	.+14     	; 0x3482 <__mulsf3x+0x16>
    3474:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__fp_pscB>
    3478:	20 f0       	brcs	.+8      	; 0x3482 <__mulsf3x+0x16>
    347a:	95 23       	and	r25, r21
    347c:	11 f0       	breq	.+4      	; 0x3482 <__mulsf3x+0x16>
    347e:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_inf>
    3482:	0c 94 e4 34 	jmp	0x69c8	; 0x69c8 <__fp_nan>
    3486:	11 24       	eor	r1, r1
    3488:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__fp_szero>
    348c:	0e 94 ba 2a 	call	0x5574	; 0x5574 <__fp_split3>
    3490:	70 f3       	brcs	.-36     	; 0x346e <__mulsf3x+0x2>

00003492 <__mulsf3_pse>:
    3492:	95 9f       	mul	r25, r21
    3494:	c1 f3       	breq	.-16     	; 0x3486 <__mulsf3x+0x1a>
    3496:	95 0f       	add	r25, r21
    3498:	50 e0       	ldi	r21, 0x00	; 0
    349a:	55 1f       	adc	r21, r21
    349c:	62 9f       	mul	r22, r18
    349e:	f0 01       	movw	r30, r0
    34a0:	72 9f       	mul	r23, r18
    34a2:	bb 27       	eor	r27, r27
    34a4:	f0 0d       	add	r31, r0
    34a6:	b1 1d       	adc	r27, r1
    34a8:	63 9f       	mul	r22, r19
    34aa:	aa 27       	eor	r26, r26
    34ac:	f0 0d       	add	r31, r0
    34ae:	b1 1d       	adc	r27, r1
    34b0:	aa 1f       	adc	r26, r26
    34b2:	64 9f       	mul	r22, r20
    34b4:	66 27       	eor	r22, r22
    34b6:	b0 0d       	add	r27, r0
    34b8:	a1 1d       	adc	r26, r1
    34ba:	66 1f       	adc	r22, r22
    34bc:	82 9f       	mul	r24, r18
    34be:	22 27       	eor	r18, r18
    34c0:	b0 0d       	add	r27, r0
    34c2:	a1 1d       	adc	r26, r1
    34c4:	62 1f       	adc	r22, r18
    34c6:	73 9f       	mul	r23, r19
    34c8:	b0 0d       	add	r27, r0
    34ca:	a1 1d       	adc	r26, r1
    34cc:	62 1f       	adc	r22, r18
    34ce:	83 9f       	mul	r24, r19
    34d0:	a0 0d       	add	r26, r0
    34d2:	61 1d       	adc	r22, r1
    34d4:	22 1f       	adc	r18, r18
    34d6:	74 9f       	mul	r23, r20
    34d8:	33 27       	eor	r19, r19
    34da:	a0 0d       	add	r26, r0
    34dc:	61 1d       	adc	r22, r1
    34de:	23 1f       	adc	r18, r19
    34e0:	84 9f       	mul	r24, r20
    34e2:	60 0d       	add	r22, r0
    34e4:	21 1d       	adc	r18, r1
    34e6:	82 2f       	mov	r24, r18
    34e8:	76 2f       	mov	r23, r22
    34ea:	6a 2f       	mov	r22, r26
    34ec:	11 24       	eor	r1, r1
    34ee:	9f 57       	subi	r25, 0x7F	; 127
    34f0:	50 40       	sbci	r21, 0x00	; 0
    34f2:	9a f0       	brmi	.+38     	; 0x351a <__mulsf3_pse+0x88>
    34f4:	f1 f0       	breq	.+60     	; 0x3532 <__mulsf3_pse+0xa0>
    34f6:	88 23       	and	r24, r24
    34f8:	4a f0       	brmi	.+18     	; 0x350c <__mulsf3_pse+0x7a>
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	bb 1f       	adc	r27, r27
    3500:	66 1f       	adc	r22, r22
    3502:	77 1f       	adc	r23, r23
    3504:	88 1f       	adc	r24, r24
    3506:	91 50       	subi	r25, 0x01	; 1
    3508:	50 40       	sbci	r21, 0x00	; 0
    350a:	a9 f7       	brne	.-22     	; 0x34f6 <__mulsf3_pse+0x64>
    350c:	9e 3f       	cpi	r25, 0xFE	; 254
    350e:	51 05       	cpc	r21, r1
    3510:	80 f0       	brcs	.+32     	; 0x3532 <__mulsf3_pse+0xa0>
    3512:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_inf>
    3516:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__fp_szero>
    351a:	5f 3f       	cpi	r21, 0xFF	; 255
    351c:	e4 f3       	brlt	.-8      	; 0x3516 <__mulsf3_pse+0x84>
    351e:	98 3e       	cpi	r25, 0xE8	; 232
    3520:	d4 f3       	brlt	.-12     	; 0x3516 <__mulsf3_pse+0x84>
    3522:	86 95       	lsr	r24
    3524:	77 95       	ror	r23
    3526:	67 95       	ror	r22
    3528:	b7 95       	ror	r27
    352a:	f7 95       	ror	r31
    352c:	e7 95       	ror	r30
    352e:	9f 5f       	subi	r25, 0xFF	; 255
    3530:	c1 f7       	brne	.-16     	; 0x3522 <__mulsf3_pse+0x90>
    3532:	fe 2b       	or	r31, r30
    3534:	88 0f       	add	r24, r24
    3536:	91 1d       	adc	r25, r1
    3538:	96 95       	lsr	r25
    353a:	87 95       	ror	r24
    353c:	97 f9       	bld	r25, 7
    353e:	08 95       	ret

Disassembly of section .text.avrlibc:

000008d0 <vfprintf>:
     8d0:	a4 e1       	ldi	r26, 0x14	; 20
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ee e6       	ldi	r30, 0x6E	; 110
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <__prologue_saves__>
     8dc:	6c 01       	movw	r12, r24
     8de:	1a 01       	movw	r2, r20
     8e0:	46 2e       	mov	r4, r22
     8e2:	59 01       	movw	r10, r18
     8e4:	fc 01       	movw	r30, r24
     8e6:	10 86       	std	Z+8, r1	; 0x08
     8e8:	17 82       	std	Z+7, r1	; 0x07
     8ea:	84 81       	ldd	r24, Z+4	; 0x04
     8ec:	81 ff       	sbrs	r24, 1
     8ee:	62 c3       	rjmp	.+1732   	; 0xfb4 <vfprintf+0x6e4>
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	9d 87       	std	Y+13, r25	; 0x0d
     8f6:	8c 87       	std	Y+12, r24	; 0x0c
     8f8:	a0 e8       	ldi	r26, 0x80	; 128
     8fa:	8a 8b       	std	Y+18, r24	; 0x12
     8fc:	9b 8b       	std	Y+19, r25	; 0x13
     8fe:	ac 8b       	std	Y+20, r26	; 0x14
     900:	f1 01       	movw	r30, r2
     902:	84 91       	lpm	r24, Z
     904:	47 fc       	sbrc	r4, 7
     906:	80 81       	ld	r24, Z
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <vfprintf+0x3e>
     90c:	4f c3       	rjmp	.+1694   	; 0xfac <vfprintf+0x6dc>
     90e:	44 2d       	mov	r20, r4
     910:	91 01       	movw	r18, r2
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	85 32       	cpi	r24, 0x25	; 37
     91a:	19 f0       	breq	.+6      	; 0x922 <vfprintf+0x52>
     91c:	19 01       	movw	r2, r18
     91e:	44 2e       	mov	r4, r20
     920:	0a c0       	rjmp	.+20     	; 0x936 <vfprintf+0x66>
     922:	f9 01       	movw	r30, r18
     924:	84 91       	lpm	r24, Z
     926:	47 fd       	sbrc	r20, 7
     928:	80 81       	ld	r24, Z
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	29 0e       	add	r2, r25
     92e:	31 1c       	adc	r3, r1
     930:	41 1c       	adc	r4, r1
     932:	85 32       	cpi	r24, 0x25	; 37
     934:	49 f4       	brne	.+18     	; 0x948 <vfprintf+0x78>
     936:	b6 01       	movw	r22, r12
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     93e:	bf 86       	std	Y+15, r11	; 0x0f
     940:	ae 86       	std	Y+14, r10	; 0x0e
     942:	ae 84       	ldd	r10, Y+14	; 0x0e
     944:	bf 84       	ldd	r11, Y+15	; 0x0f
     946:	dc cf       	rjmp	.-72     	; 0x900 <vfprintf+0x30>
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	f1 2c       	mov	r15, r1
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	00 32       	cpi	r16, 0x20	; 32
     950:	a0 f4       	brcc	.+40     	; 0x97a <vfprintf+0xaa>
     952:	8b 32       	cpi	r24, 0x2B	; 43
     954:	69 f0       	breq	.+26     	; 0x970 <vfprintf+0xa0>
     956:	30 f4       	brcc	.+12     	; 0x964 <vfprintf+0x94>
     958:	80 32       	cpi	r24, 0x20	; 32
     95a:	59 f0       	breq	.+22     	; 0x972 <vfprintf+0xa2>
     95c:	83 32       	cpi	r24, 0x23	; 35
     95e:	69 f4       	brne	.+26     	; 0x97a <vfprintf+0xaa>
     960:	00 61       	ori	r16, 0x10	; 16
     962:	2c c0       	rjmp	.+88     	; 0x9bc <vfprintf+0xec>
     964:	8d 32       	cpi	r24, 0x2D	; 45
     966:	39 f0       	breq	.+14     	; 0x976 <vfprintf+0xa6>
     968:	80 33       	cpi	r24, 0x30	; 48
     96a:	39 f4       	brne	.+14     	; 0x97a <vfprintf+0xaa>
     96c:	01 60       	ori	r16, 0x01	; 1
     96e:	26 c0       	rjmp	.+76     	; 0x9bc <vfprintf+0xec>
     970:	02 60       	ori	r16, 0x02	; 2
     972:	04 60       	ori	r16, 0x04	; 4
     974:	23 c0       	rjmp	.+70     	; 0x9bc <vfprintf+0xec>
     976:	08 60       	ori	r16, 0x08	; 8
     978:	21 c0       	rjmp	.+66     	; 0x9bc <vfprintf+0xec>
     97a:	07 fd       	sbrc	r16, 7
     97c:	29 c0       	rjmp	.+82     	; 0x9d0 <vfprintf+0x100>
     97e:	90 ed       	ldi	r25, 0xD0	; 208
     980:	98 0f       	add	r25, r24
     982:	9a 30       	cpi	r25, 0x0A	; 10
     984:	78 f4       	brcc	.+30     	; 0x9a4 <vfprintf+0xd4>
     986:	06 ff       	sbrs	r16, 6
     988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0xc6>
     98a:	aa e0       	ldi	r26, 0x0A	; 10
     98c:	1a 9f       	mul	r17, r26
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	19 2f       	mov	r17, r25
     994:	13 c0       	rjmp	.+38     	; 0x9bc <vfprintf+0xec>
     996:	ea e0       	ldi	r30, 0x0A	; 10
     998:	fe 9e       	mul	r15, r30
     99a:	90 0d       	add	r25, r0
     99c:	11 24       	eor	r1, r1
     99e:	f9 2e       	mov	r15, r25
     9a0:	00 62       	ori	r16, 0x20	; 32
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <vfprintf+0xec>
     9a4:	8e 32       	cpi	r24, 0x2E	; 46
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0xe0>
     9a8:	06 fd       	sbrc	r16, 6
     9aa:	00 c3       	rjmp	.+1536   	; 0xfac <vfprintf+0x6dc>
     9ac:	00 64       	ori	r16, 0x40	; 64
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <vfprintf+0xec>
     9b0:	8c 36       	cpi	r24, 0x6C	; 108
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <vfprintf+0xe8>
     9b4:	00 68       	ori	r16, 0x80	; 128
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0xec>
     9b8:	88 36       	cpi	r24, 0x68	; 104
     9ba:	51 f4       	brne	.+20     	; 0x9d0 <vfprintf+0x100>
     9bc:	f1 01       	movw	r30, r2
     9be:	84 91       	lpm	r24, Z
     9c0:	47 fc       	sbrc	r4, 7
     9c2:	80 81       	ld	r24, Z
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	2f 1a       	sub	r2, r31
     9c8:	3f 0a       	sbc	r3, r31
     9ca:	4f 0a       	sbc	r4, r31
     9cc:	81 11       	cpse	r24, r1
     9ce:	bf cf       	rjmp	.-130    	; 0x94e <vfprintf+0x7e>
     9d0:	9b eb       	ldi	r25, 0xBB	; 187
     9d2:	98 0f       	add	r25, r24
     9d4:	93 30       	cpi	r25, 0x03	; 3
     9d6:	18 f4       	brcc	.+6      	; 0x9de <vfprintf+0x10e>
     9d8:	00 61       	ori	r16, 0x10	; 16
     9da:	80 5e       	subi	r24, 0xE0	; 224
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <vfprintf+0x11a>
     9de:	9b e9       	ldi	r25, 0x9B	; 155
     9e0:	98 0f       	add	r25, r24
     9e2:	93 30       	cpi	r25, 0x03	; 3
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <vfprintf+0x118>
     9e6:	66 c1       	rjmp	.+716    	; 0xcb4 <vfprintf+0x3e4>
     9e8:	0f 7e       	andi	r16, 0xEF	; 239
     9ea:	06 ff       	sbrs	r16, 6
     9ec:	16 e0       	ldi	r17, 0x06	; 6
     9ee:	0f 73       	andi	r16, 0x3F	; 63
     9f0:	70 2e       	mov	r7, r16
     9f2:	85 36       	cpi	r24, 0x65	; 101
     9f4:	21 f4       	brne	.+8      	; 0x9fe <vfprintf+0x12e>
     9f6:	20 2f       	mov	r18, r16
     9f8:	20 64       	ori	r18, 0x40	; 64
     9fa:	72 2e       	mov	r7, r18
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <vfprintf+0x13e>
     9fe:	86 36       	cpi	r24, 0x66	; 102
     a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0x13a>
     a02:	80 2f       	mov	r24, r16
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	78 2e       	mov	r7, r24
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x13e>
     a0a:	11 11       	cpse	r17, r1
     a0c:	11 50       	subi	r17, 0x01	; 1
     a0e:	77 fe       	sbrs	r7, 7
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <vfprintf+0x150>
     a12:	1c 33       	cpi	r17, 0x3C	; 60
     a14:	50 f4       	brcc	.+20     	; 0xa2a <vfprintf+0x15a>
     a16:	ee 24       	eor	r14, r14
     a18:	e3 94       	inc	r14
     a1a:	e1 0e       	add	r14, r17
     a1c:	27 e0       	ldi	r18, 0x07	; 7
     a1e:	0b c0       	rjmp	.+22     	; 0xa36 <vfprintf+0x166>
     a20:	18 30       	cpi	r17, 0x08	; 8
     a22:	38 f0       	brcs	.+14     	; 0xa32 <vfprintf+0x162>
     a24:	27 e0       	ldi	r18, 0x07	; 7
     a26:	17 e0       	ldi	r17, 0x07	; 7
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <vfprintf+0x164>
     a2a:	27 e0       	ldi	r18, 0x07	; 7
     a2c:	6c e3       	ldi	r22, 0x3C	; 60
     a2e:	e6 2e       	mov	r14, r22
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <vfprintf+0x166>
     a32:	21 2f       	mov	r18, r17
     a34:	e1 2c       	mov	r14, r1
     a36:	f5 01       	movw	r30, r10
     a38:	34 96       	adiw	r30, 0x04	; 4
     a3a:	ff 87       	std	Y+15, r31	; 0x0f
     a3c:	ee 87       	std	Y+14, r30	; 0x0e
     a3e:	f5 01       	movw	r30, r10
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	0e 2d       	mov	r16, r14
     a4a:	ae 01       	movw	r20, r28
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__ftoa_engine>
     a54:	5c 01       	movw	r10, r24
     a56:	59 80       	ldd	r5, Y+1	; 0x01
     a58:	50 fe       	sbrs	r5, 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x190>
     a5c:	53 fe       	sbrs	r5, 3
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0x19c>
     a60:	71 fc       	sbrc	r7, 1
     a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x1a0>
     a64:	72 fe       	sbrs	r7, 2
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x1a4>
     a68:	00 e2       	ldi	r16, 0x20	; 32
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <vfprintf+0x1a6>
     a6c:	0d e2       	ldi	r16, 0x2D	; 45
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x1a6>
     a70:	0b e2       	ldi	r16, 0x2B	; 43
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <vfprintf+0x1a6>
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	85 2d       	mov	r24, r5
     a78:	8c 70       	andi	r24, 0x0C	; 12
     a7a:	19 f0       	breq	.+6      	; 0xa82 <vfprintf+0x1b2>
     a7c:	01 11       	cpse	r16, r1
     a7e:	73 c2       	rjmp	.+1254   	; 0xf66 <vfprintf+0x696>
     a80:	be c2       	rjmp	.+1404   	; 0xffe <vfprintf+0x72e>
     a82:	77 fe       	sbrs	r7, 7
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <vfprintf+0x1d4>
     a86:	ea 0c       	add	r14, r10
     a88:	54 fe       	sbrs	r5, 4
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <vfprintf+0x1c4>
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	81 33       	cpi	r24, 0x31	; 49
     a90:	09 f4       	brne	.+2      	; 0xa94 <vfprintf+0x1c4>
     a92:	ea 94       	dec	r14
     a94:	1e 14       	cp	r1, r14
     a96:	74 f5       	brge	.+92     	; 0xaf4 <vfprintf+0x224>
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	2e 15       	cp	r18, r14
     a9c:	78 f5       	brcc	.+94     	; 0xafc <vfprintf+0x22c>
     a9e:	38 e0       	ldi	r19, 0x08	; 8
     aa0:	e3 2e       	mov	r14, r19
     aa2:	2c c0       	rjmp	.+88     	; 0xafc <vfprintf+0x22c>
     aa4:	76 fc       	sbrc	r7, 6
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <vfprintf+0x22c>
     aa8:	81 2f       	mov	r24, r17
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	8a 15       	cp	r24, r10
     aae:	9b 05       	cpc	r25, r11
     ab0:	9c f0       	brlt	.+38     	; 0xad8 <vfprintf+0x208>
     ab2:	8c ef       	ldi	r24, 0xFC	; 252
     ab4:	a8 16       	cp	r10, r24
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	b8 06       	cpc	r11, r24
     aba:	74 f0       	brlt	.+28     	; 0xad8 <vfprintf+0x208>
     abc:	97 2d       	mov	r25, r7
     abe:	90 68       	ori	r25, 0x80	; 128
     ac0:	79 2e       	mov	r7, r25
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <vfprintf+0x208>
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ec 0f       	add	r30, r28
     aca:	fd 1f       	adc	r31, r29
     acc:	e1 0f       	add	r30, r17
     ace:	f1 1d       	adc	r31, r1
     ad0:	80 81       	ld	r24, Z
     ad2:	80 33       	cpi	r24, 0x30	; 48
     ad4:	19 f4       	brne	.+6      	; 0xadc <vfprintf+0x20c>
     ad6:	11 50       	subi	r17, 0x01	; 1
     ad8:	11 11       	cpse	r17, r1
     ada:	f4 cf       	rjmp	.-24     	; 0xac4 <vfprintf+0x1f4>
     adc:	77 fe       	sbrs	r7, 7
     ade:	0e c0       	rjmp	.+28     	; 0xafc <vfprintf+0x22c>
     ae0:	ee 24       	eor	r14, r14
     ae2:	e3 94       	inc	r14
     ae4:	e1 0e       	add	r14, r17
     ae6:	81 2f       	mov	r24, r17
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a8 16       	cp	r10, r24
     aec:	b9 06       	cpc	r11, r25
     aee:	2c f4       	brge	.+10     	; 0xafa <vfprintf+0x22a>
     af0:	1a 19       	sub	r17, r10
     af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x22c>
     af4:	ee 24       	eor	r14, r14
     af6:	e3 94       	inc	r14
     af8:	01 c0       	rjmp	.+2      	; 0xafc <vfprintf+0x22c>
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	77 fe       	sbrs	r7, 7
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <vfprintf+0x23c>
     b00:	1a 14       	cp	r1, r10
     b02:	1b 04       	cpc	r1, r11
     b04:	34 f4       	brge	.+12     	; 0xb12 <vfprintf+0x242>
     b06:	c5 01       	movw	r24, r10
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <vfprintf+0x246>
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x246>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	01 11       	cpse	r16, r1
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	11 23       	and	r17, r17
     b1c:	31 f0       	breq	.+12     	; 0xb2a <vfprintf+0x25a>
     b1e:	21 2f       	mov	r18, r17
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	2f 2d       	mov	r18, r15
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	14 f4       	brge	.+4      	; 0xb38 <vfprintf+0x268>
     b34:	f8 1a       	sub	r15, r24
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <vfprintf+0x26a>
     b38:	f1 2c       	mov	r15, r1
     b3a:	87 2d       	mov	r24, r7
     b3c:	89 70       	andi	r24, 0x09	; 9
     b3e:	49 f4       	brne	.+18     	; 0xb52 <vfprintf+0x282>
     b40:	ff 20       	and	r15, r15
     b42:	39 f0       	breq	.+14     	; 0xb52 <vfprintf+0x282>
     b44:	b6 01       	movw	r22, r12
     b46:	80 e2       	ldi	r24, 0x20	; 32
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     b4e:	fa 94       	dec	r15
     b50:	f7 cf       	rjmp	.-18     	; 0xb40 <vfprintf+0x270>
     b52:	00 23       	and	r16, r16
     b54:	29 f0       	breq	.+10     	; 0xb60 <vfprintf+0x290>
     b56:	b6 01       	movw	r22, r12
     b58:	80 2f       	mov	r24, r16
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     b60:	73 fc       	sbrc	r7, 3
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <vfprintf+0x2a6>
     b64:	ff 20       	and	r15, r15
     b66:	39 f0       	breq	.+14     	; 0xb76 <vfprintf+0x2a6>
     b68:	b6 01       	movw	r22, r12
     b6a:	80 e3       	ldi	r24, 0x30	; 48
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     b72:	fa 94       	dec	r15
     b74:	f7 cf       	rjmp	.-18     	; 0xb64 <vfprintf+0x294>
     b76:	77 fe       	sbrs	r7, 7
     b78:	49 c0       	rjmp	.+146    	; 0xc0c <vfprintf+0x33c>
     b7a:	35 01       	movw	r6, r10
     b7c:	b7 fe       	sbrs	r11, 7
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x2b4>
     b80:	61 2c       	mov	r6, r1
     b82:	71 2c       	mov	r7, r1
     b84:	c5 01       	movw	r24, r10
     b86:	86 19       	sub	r24, r6
     b88:	97 09       	sbc	r25, r7
     b8a:	88 24       	eor	r8, r8
     b8c:	83 94       	inc	r8
     b8e:	91 2c       	mov	r9, r1
     b90:	8c 0e       	add	r8, r28
     b92:	9d 1e       	adc	r9, r29
     b94:	88 0e       	add	r8, r24
     b96:	99 1e       	adc	r9, r25
     b98:	f5 01       	movw	r30, r10
     b9a:	ee 19       	sub	r30, r14
     b9c:	f1 09       	sbc	r31, r1
     b9e:	f9 8b       	std	Y+17, r31	; 0x11
     ba0:	e8 8b       	std	Y+16, r30	; 0x10
     ba2:	01 2f       	mov	r16, r17
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	11 95       	neg	r17
     ba8:	01 95       	neg	r16
     baa:	11 09       	sbc	r17, r1
     bac:	ff ef       	ldi	r31, 0xFF	; 255
     bae:	6f 16       	cp	r6, r31
     bb0:	7f 06       	cpc	r7, r31
     bb2:	29 f4       	brne	.+10     	; 0xbbe <vfprintf+0x2ee>
     bb4:	b6 01       	movw	r22, r12
     bb6:	8e e2       	ldi	r24, 0x2E	; 46
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     bbe:	a6 14       	cp	r10, r6
     bc0:	b7 04       	cpc	r11, r7
     bc2:	44 f0       	brlt	.+16     	; 0xbd4 <vfprintf+0x304>
     bc4:	88 89       	ldd	r24, Y+16	; 0x10
     bc6:	99 89       	ldd	r25, Y+17	; 0x11
     bc8:	86 15       	cp	r24, r6
     bca:	97 05       	cpc	r25, r7
     bcc:	1c f4       	brge	.+6      	; 0xbd4 <vfprintf+0x304>
     bce:	f4 01       	movw	r30, r8
     bd0:	81 81       	ldd	r24, Z+1	; 0x01
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vfprintf+0x306>
     bd4:	80 e3       	ldi	r24, 0x30	; 48
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	6f 1a       	sub	r6, r31
     bda:	71 08       	sbc	r7, r1
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	82 1a       	sub	r8, r18
     be0:	92 0a       	sbc	r9, r18
     be2:	60 16       	cp	r6, r16
     be4:	71 06       	cpc	r7, r17
     be6:	2c f0       	brlt	.+10     	; 0xbf2 <vfprintf+0x322>
     be8:	b6 01       	movw	r22, r12
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     bf0:	dd cf       	rjmp	.-70     	; 0xbac <vfprintf+0x2dc>
     bf2:	a6 14       	cp	r10, r6
     bf4:	b7 04       	cpc	r11, r7
     bf6:	39 f4       	brne	.+14     	; 0xc06 <vfprintf+0x336>
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	96 33       	cpi	r25, 0x36	; 54
     bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x334>
     bfe:	95 33       	cpi	r25, 0x35	; 53
     c00:	11 f4       	brne	.+4      	; 0xc06 <vfprintf+0x336>
     c02:	54 fe       	sbrs	r5, 4
     c04:	81 e3       	ldi	r24, 0x31	; 49
     c06:	b6 01       	movw	r22, r12
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	51 c0       	rjmp	.+162    	; 0xcae <vfprintf+0x3de>
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	81 33       	cpi	r24, 0x31	; 49
     c10:	19 f0       	breq	.+6      	; 0xc18 <vfprintf+0x348>
     c12:	95 2d       	mov	r25, r5
     c14:	9f 7e       	andi	r25, 0xEF	; 239
     c16:	59 2e       	mov	r5, r25
     c18:	b6 01       	movw	r22, r12
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     c20:	11 11       	cpse	r17, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <vfprintf+0x35e>
     c24:	74 fc       	sbrc	r7, 4
     c26:	1c c0       	rjmp	.+56     	; 0xc60 <vfprintf+0x390>
     c28:	85 e6       	ldi	r24, 0x65	; 101
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <vfprintf+0x394>
     c2e:	b6 01       	movw	r22, r12
     c30:	8e e2       	ldi	r24, 0x2E	; 46
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     c38:	02 e0       	ldi	r16, 0x02	; 2
     c3a:	01 0f       	add	r16, r17
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	18 0f       	add	r17, r24
     c42:	e1 e0       	ldi	r30, 0x01	; 1
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	e8 0f       	add	r30, r24
     c4c:	f1 1d       	adc	r31, r1
     c4e:	80 81       	ld	r24, Z
     c50:	b6 01       	movw	r22, r12
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     c58:	81 2f       	mov	r24, r17
     c5a:	10 13       	cpse	r17, r16
     c5c:	f0 cf       	rjmp	.-32     	; 0xc3e <vfprintf+0x36e>
     c5e:	e2 cf       	rjmp	.-60     	; 0xc24 <vfprintf+0x354>
     c60:	85 e4       	ldi	r24, 0x45	; 69
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     c6a:	b7 fc       	sbrc	r11, 7
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x3a8>
     c6e:	a1 14       	cp	r10, r1
     c70:	b1 04       	cpc	r11, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <vfprintf+0x3b2>
     c74:	54 fe       	sbrs	r5, 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x3b2>
     c78:	b1 94       	neg	r11
     c7a:	a1 94       	neg	r10
     c7c:	b1 08       	sbc	r11, r1
     c7e:	8d e2       	ldi	r24, 0x2D	; 45
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <vfprintf+0x3b4>
     c82:	8b e2       	ldi	r24, 0x2B	; 43
     c84:	b6 01       	movw	r22, r12
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	ea e0       	ldi	r30, 0x0A	; 10
     c90:	ae 16       	cp	r10, r30
     c92:	b1 04       	cpc	r11, r1
     c94:	2c f0       	brlt	.+10     	; 0xca0 <vfprintf+0x3d0>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	aa e0       	ldi	r26, 0x0A	; 10
     c9a:	aa 1a       	sub	r10, r26
     c9c:	b1 08       	sbc	r11, r1
     c9e:	f7 cf       	rjmp	.-18     	; 0xc8e <vfprintf+0x3be>
     ca0:	b6 01       	movw	r22, r12
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     ca8:	b6 01       	movw	r22, r12
     caa:	c5 01       	movw	r24, r10
     cac:	c0 96       	adiw	r24, 0x30	; 48
     cae:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     cb2:	72 c1       	rjmp	.+740    	; 0xf98 <vfprintf+0x6c8>
     cb4:	83 36       	cpi	r24, 0x63	; 99
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <vfprintf+0x3f4>
     cb8:	83 37       	cpi	r24, 0x73	; 115
     cba:	91 f0       	breq	.+36     	; 0xce0 <vfprintf+0x410>
     cbc:	83 35       	cpi	r24, 0x53	; 83
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x3f2>
     cc0:	5d c0       	rjmp	.+186    	; 0xd7c <vfprintf+0x4ac>
     cc2:	24 c0       	rjmp	.+72     	; 0xd0c <vfprintf+0x43c>
     cc4:	c5 01       	movw	r24, r10
     cc6:	02 96       	adiw	r24, 0x02	; 2
     cc8:	9f 87       	std	Y+15, r25	; 0x0f
     cca:	8e 87       	std	Y+14, r24	; 0x0e
     ccc:	f5 01       	movw	r30, r10
     cce:	80 81       	ld	r24, Z
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 88       	ldd	r6, Y+18	; 0x12
     cd4:	7b 88       	ldd	r7, Y+19	; 0x13
     cd6:	8c 88       	ldd	r8, Y+20	; 0x14
     cd8:	aa 24       	eor	r10, r10
     cda:	a3 94       	inc	r10
     cdc:	b1 2c       	mov	r11, r1
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <vfprintf+0x438>
     ce0:	c5 01       	movw	r24, r10
     ce2:	03 96       	adiw	r24, 0x03	; 3
     ce4:	9f 87       	std	Y+15, r25	; 0x0f
     ce6:	8e 87       	std	Y+14, r24	; 0x0e
     ce8:	f5 01       	movw	r30, r10
     cea:	60 80       	ld	r6, Z
     cec:	71 80       	ldd	r7, Z+1	; 0x01
     cee:	82 80       	ldd	r8, Z+2	; 0x02
     cf0:	06 ff       	sbrs	r16, 6
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x42a>
     cf4:	41 2f       	mov	r20, r17
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x42e>
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	5f ef       	ldi	r21, 0xFF	; 255
     cfe:	88 2d       	mov	r24, r8
     d00:	b3 01       	movw	r22, r6
     d02:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <strnlen>
     d06:	5c 01       	movw	r10, r24
     d08:	0f 77       	andi	r16, 0x7F	; 127
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <vfprintf+0x466>
     d0c:	c5 01       	movw	r24, r10
     d0e:	03 96       	adiw	r24, 0x03	; 3
     d10:	9f 87       	std	Y+15, r25	; 0x0f
     d12:	8e 87       	std	Y+14, r24	; 0x0e
     d14:	f5 01       	movw	r30, r10
     d16:	60 80       	ld	r6, Z
     d18:	71 80       	ldd	r7, Z+1	; 0x01
     d1a:	82 80       	ldd	r8, Z+2	; 0x02
     d1c:	06 ff       	sbrs	r16, 6
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <vfprintf+0x456>
     d20:	41 2f       	mov	r20, r17
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x45a>
     d26:	4f ef       	ldi	r20, 0xFF	; 255
     d28:	5f ef       	ldi	r21, 0xFF	; 255
     d2a:	88 2d       	mov	r24, r8
     d2c:	b3 01       	movw	r22, r6
     d2e:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <strnlen>
     d32:	5c 01       	movw	r10, r24
     d34:	00 68       	ori	r16, 0x80	; 128
     d36:	03 fd       	sbrc	r16, 3
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <vfprintf+0x4a4>
     d3a:	8f 2d       	mov	r24, r15
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a8 16       	cp	r10, r24
     d40:	b9 06       	cpc	r11, r25
     d42:	c0 f4       	brcc	.+48     	; 0xd74 <vfprintf+0x4a4>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     d4e:	fa 94       	dec	r15
     d50:	f4 cf       	rjmp	.-24     	; 0xd3a <vfprintf+0x46a>
     d52:	f3 01       	movw	r30, r6
     d54:	84 91       	lpm	r24, Z
     d56:	87 fc       	sbrc	r8, 7
     d58:	80 81       	ld	r24, Z
     d5a:	ff ef       	ldi	r31, 0xFF	; 255
     d5c:	6f 1a       	sub	r6, r31
     d5e:	7f 0a       	sbc	r7, r31
     d60:	8f 0a       	sbc	r8, r31
     d62:	b6 01       	movw	r22, r12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     d6a:	f1 10       	cpse	r15, r1
     d6c:	fa 94       	dec	r15
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	a2 1a       	sub	r10, r18
     d72:	b1 08       	sbc	r11, r1
     d74:	a1 14       	cp	r10, r1
     d76:	b1 04       	cpc	r11, r1
     d78:	61 f7       	brne	.-40     	; 0xd52 <vfprintf+0x482>
     d7a:	0e c1       	rjmp	.+540    	; 0xf98 <vfprintf+0x6c8>
     d7c:	84 36       	cpi	r24, 0x64	; 100
     d7e:	11 f0       	breq	.+4      	; 0xd84 <vfprintf+0x4b4>
     d80:	89 36       	cpi	r24, 0x69	; 105
     d82:	79 f5       	brne	.+94     	; 0xde2 <vfprintf+0x512>
     d84:	c5 01       	movw	r24, r10
     d86:	07 ff       	sbrs	r16, 7
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x4cc>
     d8a:	04 96       	adiw	r24, 0x04	; 4
     d8c:	9f 87       	std	Y+15, r25	; 0x0f
     d8e:	8e 87       	std	Y+14, r24	; 0x0e
     d90:	f5 01       	movw	r30, r10
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <vfprintf+0x4e0>
     d9c:	02 96       	adiw	r24, 0x02	; 2
     d9e:	9f 87       	std	Y+15, r25	; 0x0f
     da0:	8e 87       	std	Y+14, r24	; 0x0e
     da2:	f5 01       	movw	r30, r10
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	07 2e       	mov	r0, r23
     daa:	00 0c       	add	r0, r0
     dac:	88 0b       	sbc	r24, r24
     dae:	99 0b       	sbc	r25, r25
     db0:	0f 76       	andi	r16, 0x6F	; 111
     db2:	e0 2e       	mov	r14, r16
     db4:	97 ff       	sbrs	r25, 7
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <vfprintf+0x4fc>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	f0 2f       	mov	r31, r16
     dc8:	f0 68       	ori	r31, 0x80	; 128
     dca:	ef 2e       	mov	r14, r31
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	0e 94 c7 1b 	call	0x378e	; 0x378e <__ultoa_invert>
     dda:	a8 2e       	mov	r10, r24
     ddc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dde:	a2 1a       	sub	r10, r18
     de0:	4b c0       	rjmp	.+150    	; 0xe78 <vfprintf+0x5a8>
     de2:	85 37       	cpi	r24, 0x75	; 117
     de4:	29 f4       	brne	.+10     	; 0xdf0 <vfprintf+0x520>
     de6:	0f 7e       	andi	r16, 0xEF	; 239
     de8:	e0 2e       	mov	r14, r16
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	25 c0       	rjmp	.+74     	; 0xe3a <vfprintf+0x56a>
     df0:	90 2f       	mov	r25, r16
     df2:	99 7f       	andi	r25, 0xF9	; 249
     df4:	e9 2e       	mov	r14, r25
     df6:	8f 36       	cpi	r24, 0x6F	; 111
     df8:	c1 f0       	breq	.+48     	; 0xe2a <vfprintf+0x55a>
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x532>
     dfc:	88 35       	cpi	r24, 0x58	; 88
     dfe:	79 f0       	breq	.+30     	; 0xe1e <vfprintf+0x54e>
     e00:	d5 c0       	rjmp	.+426    	; 0xfac <vfprintf+0x6dc>
     e02:	80 37       	cpi	r24, 0x70	; 112
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x53c>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	21 f0       	breq	.+8      	; 0xe12 <vfprintf+0x542>
     e0a:	d0 c0       	rjmp	.+416    	; 0xfac <vfprintf+0x6dc>
     e0c:	a9 2f       	mov	r26, r25
     e0e:	a0 61       	ori	r26, 0x10	; 16
     e10:	ea 2e       	mov	r14, r26
     e12:	e4 fe       	sbrs	r14, 4
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x560>
     e16:	ee 2d       	mov	r30, r14
     e18:	e4 60       	ori	r30, 0x04	; 4
     e1a:	ee 2e       	mov	r14, r30
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x560>
     e1e:	04 ff       	sbrs	r16, 4
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <vfprintf+0x566>
     e22:	f9 2f       	mov	r31, r25
     e24:	f6 60       	ori	r31, 0x06	; 6
     e26:	ef 2e       	mov	r14, r31
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x566>
     e2a:	28 e0       	ldi	r18, 0x08	; 8
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x56a>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x56a>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	c5 01       	movw	r24, r10
     e3c:	e7 fe       	sbrs	r14, 7
     e3e:	09 c0       	rjmp	.+18     	; 0xe52 <vfprintf+0x582>
     e40:	04 96       	adiw	r24, 0x04	; 4
     e42:	9f 87       	std	Y+15, r25	; 0x0f
     e44:	8e 87       	std	Y+14, r24	; 0x0e
     e46:	f5 01       	movw	r30, r10
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x592>
     e52:	02 96       	adiw	r24, 0x02	; 2
     e54:	9f 87       	std	Y+15, r25	; 0x0f
     e56:	8e 87       	std	Y+14, r24	; 0x0e
     e58:	f5 01       	movw	r30, r10
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ae 01       	movw	r20, r28
     e64:	4f 5f       	subi	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	0e 94 c7 1b 	call	0x378e	; 0x378e <__ultoa_invert>
     e6c:	a8 2e       	mov	r10, r24
     e6e:	fc 85       	ldd	r31, Y+12	; 0x0c
     e70:	af 1a       	sub	r10, r31
     e72:	2e 2d       	mov	r18, r14
     e74:	2f 77       	andi	r18, 0x7F	; 127
     e76:	e2 2e       	mov	r14, r18
     e78:	e6 fe       	sbrs	r14, 6
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <vfprintf+0x5c2>
     e7c:	0e 2d       	mov	r16, r14
     e7e:	0e 7f       	andi	r16, 0xFE	; 254
     e80:	a1 16       	cp	r10, r17
     e82:	50 f4       	brcc	.+20     	; 0xe98 <vfprintf+0x5c8>
     e84:	e4 fe       	sbrs	r14, 4
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <vfprintf+0x5cc>
     e88:	e2 fc       	sbrc	r14, 2
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <vfprintf+0x5cc>
     e8c:	0e 2d       	mov	r16, r14
     e8e:	0e 7e       	andi	r16, 0xEE	; 238
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <vfprintf+0x5cc>
     e92:	ba 2c       	mov	r11, r10
     e94:	0e 2d       	mov	r16, r14
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x5ce>
     e98:	ba 2c       	mov	r11, r10
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <vfprintf+0x5ce>
     e9c:	b1 2e       	mov	r11, r17
     e9e:	04 ff       	sbrs	r16, 4
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <vfprintf+0x5ec>
     ea2:	fe 01       	movw	r30, r28
     ea4:	ea 0d       	add	r30, r10
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	11 f4       	brne	.+4      	; 0xeb2 <vfprintf+0x5e2>
     eae:	09 7e       	andi	r16, 0xE9	; 233
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <vfprintf+0x5f4>
     eb2:	02 ff       	sbrs	r16, 2
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x5f2>
     eb6:	b3 94       	inc	r11
     eb8:	b3 94       	inc	r11
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <vfprintf+0x5f4>
     ebc:	80 2f       	mov	r24, r16
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	09 f0       	breq	.+2      	; 0xec4 <vfprintf+0x5f4>
     ec2:	b3 94       	inc	r11
     ec4:	03 fd       	sbrc	r16, 3
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0x61a>
     ec8:	00 ff       	sbrs	r16, 0
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x608>
     ecc:	bf 14       	cp	r11, r15
     ece:	88 f4       	brcc	.+34     	; 0xef2 <vfprintf+0x622>
     ed0:	fa 0c       	add	r15, r10
     ed2:	1f 2d       	mov	r17, r15
     ed4:	1b 19       	sub	r17, r11
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <vfprintf+0x624>
     ed8:	bf 14       	cp	r11, r15
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x624>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x608>
     eea:	bf 14       	cp	r11, r15
     eec:	18 f4       	brcc	.+6      	; 0xef4 <vfprintf+0x624>
     eee:	fb 18       	sub	r15, r11
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x626>
     ef2:	1a 2d       	mov	r17, r10
     ef4:	f1 2c       	mov	r15, r1
     ef6:	04 ff       	sbrs	r16, 4
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x64a>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     f04:	02 ff       	sbrs	r16, 2
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <vfprintf+0x666>
     f08:	01 fd       	sbrc	r16, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x642>
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x646>
     f12:	88 e5       	ldi	r24, 0x58	; 88
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	b6 01       	movw	r22, r12
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <vfprintf+0x662>
     f1a:	80 2f       	mov	r24, r16
     f1c:	86 78       	andi	r24, 0x86	; 134
     f1e:	59 f0       	breq	.+22     	; 0xf36 <vfprintf+0x666>
     f20:	01 ff       	sbrs	r16, 1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x658>
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x65a>
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	07 fd       	sbrc	r16, 7
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     f36:	a1 16       	cp	r10, r17
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x678>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     f44:	11 50       	subi	r17, 0x01	; 1
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x666>
     f48:	aa 94       	dec	r10
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ec 0f       	add	r30, r28
     f50:	fd 1f       	adc	r31, r29
     f52:	ea 0d       	add	r30, r10
     f54:	f1 1d       	adc	r31, r1
     f56:	80 81       	ld	r24, Z
     f58:	b6 01       	movw	r22, r12
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     f60:	a1 10       	cpse	r10, r1
     f62:	f2 cf       	rjmp	.-28     	; 0xf48 <vfprintf+0x678>
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <vfprintf+0x6c8>
     f66:	f4 e0       	ldi	r31, 0x04	; 4
     f68:	ff 15       	cp	r31, r15
     f6a:	80 f5       	brcc	.+96     	; 0xfcc <vfprintf+0x6fc>
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	f8 1a       	sub	r15, r24
     f70:	73 fe       	sbrs	r7, 3
     f72:	23 c0       	rjmp	.+70     	; 0xfba <vfprintf+0x6ea>
     f74:	01 11       	cpse	r16, r1
     f76:	2b c0       	rjmp	.+86     	; 0xfce <vfprintf+0x6fe>
     f78:	53 fe       	sbrs	r5, 3
     f7a:	2f c0       	rjmp	.+94     	; 0xfda <vfprintf+0x70a>
     f7c:	5b eb       	ldi	r21, 0xBB	; 187
     f7e:	85 2e       	mov	r8, r21
     f80:	58 e0       	ldi	r21, 0x08	; 8
     f82:	95 2e       	mov	r9, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	a5 2e       	mov	r10, r21
     f88:	07 2d       	mov	r16, r7
     f8a:	00 71       	andi	r16, 0x10	; 16
     f8c:	f4 01       	movw	r30, r8
     f8e:	84 91       	lpm	r24, Z
     f90:	a7 fc       	sbrc	r10, 7
     f92:	80 81       	ld	r24, Z
     f94:	81 11       	cpse	r24, r1
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <vfprintf+0x718>
     f98:	ff 20       	and	r15, r15
     f9a:	09 f4       	brne	.+2      	; 0xf9e <vfprintf+0x6ce>
     f9c:	d2 cc       	rjmp	.-1628   	; 0x942 <vfprintf+0x72>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     fa8:	fa 94       	dec	r15
     faa:	f6 cf       	rjmp	.-20     	; 0xf98 <vfprintf+0x6c8>
     fac:	f6 01       	movw	r30, r12
     fae:	87 81       	ldd	r24, Z+7	; 0x07
     fb0:	90 85       	ldd	r25, Z+8	; 0x08
     fb2:	2c c0       	rjmp	.+88     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	29 c0       	rjmp	.+82     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fba:	b6 01       	movw	r22, r12
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     fc4:	fa 94       	dec	r15
     fc6:	f1 10       	cpse	r15, r1
     fc8:	f8 cf       	rjmp	.-16     	; 0xfba <vfprintf+0x6ea>
     fca:	d4 cf       	rjmp	.-88     	; 0xf74 <vfprintf+0x6a4>
     fcc:	f1 2c       	mov	r15, r1
     fce:	b6 01       	movw	r22, r12
     fd0:	80 2f       	mov	r24, r16
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     fd8:	cf cf       	rjmp	.-98     	; 0xf78 <vfprintf+0x6a8>
     fda:	47 eb       	ldi	r20, 0xB7	; 183
     fdc:	84 2e       	mov	r8, r20
     fde:	48 e0       	ldi	r20, 0x08	; 8
     fe0:	94 2e       	mov	r9, r20
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	a4 2e       	mov	r10, r20
     fe6:	d0 cf       	rjmp	.-96     	; 0xf88 <vfprintf+0x6b8>
     fe8:	01 11       	cpse	r16, r1
     fea:	80 52       	subi	r24, 0x20	; 32
     fec:	b6 01       	movw	r22, r12
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 71 22 	call	0x44e2	; 0x44e2 <fputc>
     ff4:	ff ef       	ldi	r31, 0xFF	; 255
     ff6:	8f 1a       	sub	r8, r31
     ff8:	9f 0a       	sbc	r9, r31
     ffa:	af 0a       	sbc	r10, r31
     ffc:	c7 cf       	rjmp	.-114    	; 0xf8c <vfprintf+0x6bc>
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	2f 15       	cp	r18, r15
    1002:	10 f4       	brcc	.+4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	b3 cf       	rjmp	.-154    	; 0xf6e <vfprintf+0x69e>
    1008:	f1 2c       	mov	r15, r1
    100a:	b6 cf       	rjmp	.-148    	; 0xf78 <vfprintf+0x6a8>
    100c:	64 96       	adiw	r28, 0x14	; 20
    100e:	e2 e1       	ldi	r30, 0x12	; 18
    1010:	0c 94 b0 2d 	jmp	0x5b60	; 0x5b60 <__epilogue_restores__>

Disassembly of section .text.libgcc:

000068a2 <__tablejump2__>:
    68a2:	ee 0f       	add	r30, r30
    68a4:	ff 1f       	adc	r31, r31
    68a6:	05 90       	lpm	r0, Z+
    68a8:	f4 91       	lpm	r31, Z
    68aa:	e0 2d       	mov	r30, r0
    68ac:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000631c <__umulhisi3>:
    631c:	a2 9f       	mul	r26, r18
    631e:	b0 01       	movw	r22, r0
    6320:	b3 9f       	mul	r27, r19
    6322:	c0 01       	movw	r24, r0
    6324:	a3 9f       	mul	r26, r19
    6326:	70 0d       	add	r23, r0
    6328:	81 1d       	adc	r24, r1
    632a:	11 24       	eor	r1, r1
    632c:	91 1d       	adc	r25, r1
    632e:	b2 9f       	mul	r27, r18
    6330:	70 0d       	add	r23, r0
    6332:	81 1d       	adc	r24, r1
    6334:	11 24       	eor	r1, r1
    6336:	91 1d       	adc	r25, r1
    6338:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00005abc <__prologue_saves__>:
    5abc:	2f 92       	push	r2
    5abe:	3f 92       	push	r3
    5ac0:	4f 92       	push	r4
    5ac2:	5f 92       	push	r5
    5ac4:	6f 92       	push	r6
    5ac6:	7f 92       	push	r7
    5ac8:	8f 92       	push	r8
    5aca:	9f 92       	push	r9
    5acc:	af 92       	push	r10
    5ace:	bf 92       	push	r11
    5ad0:	cf 92       	push	r12
    5ad2:	df 92       	push	r13
    5ad4:	ef 92       	push	r14
    5ad6:	ff 92       	push	r15
    5ad8:	0f 93       	push	r16
    5ada:	1f 93       	push	r17
    5adc:	cf 93       	push	r28
    5ade:	df 93       	push	r29
    5ae0:	cd b7       	in	r28, 0x3d	; 61
    5ae2:	de b7       	in	r29, 0x3e	; 62
    5ae4:	ca 1b       	sub	r28, r26
    5ae6:	db 0b       	sbc	r29, r27
    5ae8:	0f b6       	in	r0, 0x3f	; 63
    5aea:	f8 94       	cli
    5aec:	de bf       	out	0x3e, r29	; 62
    5aee:	0f be       	out	0x3f, r0	; 63
    5af0:	cd bf       	out	0x3d, r28	; 61
    5af2:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00005b60 <__epilogue_restores__>:
    5b60:	2a 88       	ldd	r2, Y+18	; 0x12
    5b62:	39 88       	ldd	r3, Y+17	; 0x11
    5b64:	48 88       	ldd	r4, Y+16	; 0x10
    5b66:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b68:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b70:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b72:	b9 84       	ldd	r11, Y+9	; 0x09
    5b74:	c8 84       	ldd	r12, Y+8	; 0x08
    5b76:	df 80       	ldd	r13, Y+7	; 0x07
    5b78:	ee 80       	ldd	r14, Y+6	; 0x06
    5b7a:	fd 80       	ldd	r15, Y+5	; 0x05
    5b7c:	0c 81       	ldd	r16, Y+4	; 0x04
    5b7e:	1b 81       	ldd	r17, Y+3	; 0x03
    5b80:	aa 81       	ldd	r26, Y+2	; 0x02
    5b82:	b9 81       	ldd	r27, Y+1	; 0x01
    5b84:	ce 0f       	add	r28, r30
    5b86:	d1 1d       	adc	r29, r1
    5b88:	0f b6       	in	r0, 0x3f	; 63
    5b8a:	f8 94       	cli
    5b8c:	de bf       	out	0x3e, r29	; 62
    5b8e:	0f be       	out	0x3f, r0	; 63
    5b90:	cd bf       	out	0x3d, r28	; 61
    5b92:	ed 01       	movw	r28, r26
    5b94:	08 95       	ret

Disassembly of section .text.avrlibc:

00006990 <atoi>:
    6990:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <atol>
    6994:	cb 01       	movw	r24, r22
    6996:	08 95       	ret

Disassembly of section .text.avrlibc:

000067c4 <atol>:
    67c4:	2a e0       	ldi	r18, 0x0A	; 10
    67c6:	30 e0       	ldi	r19, 0x00	; 0
    67c8:	40 e0       	ldi	r20, 0x00	; 0
    67ca:	50 e0       	ldi	r21, 0x00	; 0
    67cc:	0e 94 c8 09 	call	0x1390	; 0x1390 <strtol>
    67d0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001390 <strtol>:
    1390:	2f 92       	push	r2
    1392:	3f 92       	push	r3
    1394:	4f 92       	push	r4
    1396:	5f 92       	push	r5
    1398:	6f 92       	push	r6
    139a:	7f 92       	push	r7
    139c:	8f 92       	push	r8
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <strtol+0x22>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <strtol+0x24>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <strtol+0x26>
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	3b 01       	movw	r6, r22
    13bc:	88 2e       	mov	r8, r24
    13be:	5a 01       	movw	r10, r20
    13c0:	19 01       	movw	r2, r18
    13c2:	41 15       	cp	r20, r1
    13c4:	51 05       	cpc	r21, r1
    13c6:	21 f0       	breq	.+8      	; 0x13d0 <strtol+0x40>
    13c8:	fa 01       	movw	r30, r20
    13ca:	60 83       	st	Z, r22
    13cc:	71 83       	std	Z+1, r23	; 0x01
    13ce:	82 83       	std	Z+2, r24	; 0x02
    13d0:	21 14       	cp	r2, r1
    13d2:	31 04       	cpc	r3, r1
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <strtol+0x50>
    13d6:	c1 01       	movw	r24, r2
    13d8:	02 97       	sbiw	r24, 0x02	; 2
    13da:	83 97       	sbiw	r24, 0x23	; 35
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <strtol+0x50>
    13de:	1a c1       	rjmp	.+564    	; 0x1614 <strtol+0x284>
    13e0:	e8 2c       	mov	r14, r8
    13e2:	63 01       	movw	r12, r6
    13e4:	ff ef       	ldi	r31, 0xFF	; 255
    13e6:	cf 1a       	sub	r12, r31
    13e8:	df 0a       	sbc	r13, r31
    13ea:	ef 0a       	sbc	r14, r31
    13ec:	f3 01       	movw	r30, r6
    13ee:	14 91       	lpm	r17, Z
    13f0:	87 fc       	sbrc	r8, 7
    13f2:	10 81       	ld	r17, Z
    13f4:	81 2f       	mov	r24, r17
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 2c 33 	call	0x6658	; 0x6658 <isspace>
    13fc:	4c 2d       	mov	r20, r12
    13fe:	3d 2d       	mov	r19, r13
    1400:	2e 2d       	mov	r18, r14
    1402:	89 2b       	or	r24, r25
    1404:	19 f0       	breq	.+6      	; 0x140c <strtol+0x7c>
    1406:	36 01       	movw	r6, r12
    1408:	8e 2c       	mov	r8, r14
    140a:	ea cf       	rjmp	.-44     	; 0x13e0 <strtol+0x50>
    140c:	1d 32       	cpi	r17, 0x2D	; 45
    140e:	69 f4       	brne	.+26     	; 0x142a <strtol+0x9a>
    1410:	e8 2c       	mov	r14, r8
    1412:	63 01       	movw	r12, r6
    1414:	52 e0       	ldi	r21, 0x02	; 2
    1416:	c5 0e       	add	r12, r21
    1418:	d1 1c       	adc	r13, r1
    141a:	e1 1c       	adc	r14, r1
    141c:	e4 2f       	mov	r30, r20
    141e:	f3 2f       	mov	r31, r19
    1420:	14 91       	lpm	r17, Z
    1422:	27 fd       	sbrc	r18, 7
    1424:	10 81       	ld	r17, Z
    1426:	01 e0       	ldi	r16, 0x01	; 1
    1428:	0e c0       	rjmp	.+28     	; 0x1446 <strtol+0xb6>
    142a:	1b 32       	cpi	r17, 0x2B	; 43
    142c:	59 f4       	brne	.+22     	; 0x1444 <strtol+0xb4>
    142e:	e8 2c       	mov	r14, r8
    1430:	63 01       	movw	r12, r6
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	c8 0e       	add	r12, r24
    1436:	d1 1c       	adc	r13, r1
    1438:	e1 1c       	adc	r14, r1
    143a:	e4 2f       	mov	r30, r20
    143c:	f3 2f       	mov	r31, r19
    143e:	14 91       	lpm	r17, Z
    1440:	27 fd       	sbrc	r18, 7
    1442:	10 81       	ld	r17, Z
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	21 14       	cp	r2, r1
    1448:	31 04       	cpc	r3, r1
    144a:	09 f1       	breq	.+66     	; 0x148e <strtol+0xfe>
    144c:	90 e1       	ldi	r25, 0x10	; 16
    144e:	29 16       	cp	r2, r25
    1450:	31 04       	cpc	r3, r1
    1452:	29 f4       	brne	.+10     	; 0x145e <strtol+0xce>
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <strtol+0x144>
    1456:	10 e3       	ldi	r17, 0x30	; 48
    1458:	21 14       	cp	r2, r1
    145a:	31 04       	cpc	r3, r1
    145c:	21 f1       	breq	.+72     	; 0x14a6 <strtol+0x116>
    145e:	f8 e0       	ldi	r31, 0x08	; 8
    1460:	2f 16       	cp	r2, r31
    1462:	31 04       	cpc	r3, r1
    1464:	01 f1       	breq	.+64     	; 0x14a6 <strtol+0x116>
    1466:	54 f4       	brge	.+20     	; 0x147c <strtol+0xec>
    1468:	32 e0       	ldi	r19, 0x02	; 2
    146a:	23 16       	cp	r2, r19
    146c:	31 04       	cpc	r3, r1
    146e:	21 f5       	brne	.+72     	; 0x14b8 <strtol+0x128>
    1470:	41 2c       	mov	r4, r1
    1472:	51 2c       	mov	r5, r1
    1474:	61 2c       	mov	r6, r1
    1476:	50 e4       	ldi	r21, 0x40	; 64
    1478:	75 2e       	mov	r7, r21
    147a:	4b c0       	rjmp	.+150    	; 0x1512 <strtol+0x182>
    147c:	4a e0       	ldi	r20, 0x0A	; 10
    147e:	24 16       	cp	r2, r20
    1480:	31 04       	cpc	r3, r1
    1482:	39 f0       	breq	.+14     	; 0x1492 <strtol+0x102>
    1484:	50 e1       	ldi	r21, 0x10	; 16
    1486:	25 16       	cp	r2, r21
    1488:	31 04       	cpc	r3, r1
    148a:	b1 f4       	brne	.+44     	; 0x14b8 <strtol+0x128>
    148c:	3d c0       	rjmp	.+122    	; 0x1508 <strtol+0x178>
    148e:	10 33       	cpi	r17, 0x30	; 48
    1490:	19 f1       	breq	.+70     	; 0x14d8 <strtol+0x148>
    1492:	3a e0       	ldi	r19, 0x0A	; 10
    1494:	23 2e       	mov	r2, r19
    1496:	31 2c       	mov	r3, r1
    1498:	4c ec       	ldi	r20, 0xCC	; 204
    149a:	44 2e       	mov	r4, r20
    149c:	54 2c       	mov	r5, r4
    149e:	64 2c       	mov	r6, r4
    14a0:	4c e0       	ldi	r20, 0x0C	; 12
    14a2:	74 2e       	mov	r7, r20
    14a4:	36 c0       	rjmp	.+108    	; 0x1512 <strtol+0x182>
    14a6:	98 e0       	ldi	r25, 0x08	; 8
    14a8:	29 2e       	mov	r2, r25
    14aa:	31 2c       	mov	r3, r1
    14ac:	41 2c       	mov	r4, r1
    14ae:	51 2c       	mov	r5, r1
    14b0:	61 2c       	mov	r6, r1
    14b2:	20 e1       	ldi	r18, 0x10	; 16
    14b4:	72 2e       	mov	r7, r18
    14b6:	2d c0       	rjmp	.+90     	; 0x1512 <strtol+0x182>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e8       	ldi	r25, 0x80	; 128
    14c0:	91 01       	movw	r18, r2
    14c2:	03 2c       	mov	r0, r3
    14c4:	00 0c       	add	r0, r0
    14c6:	44 0b       	sbc	r20, r20
    14c8:	55 0b       	sbc	r21, r21
    14ca:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <__udivmodsi4>
    14ce:	29 01       	movw	r4, r18
    14d0:	3a 01       	movw	r6, r20
    14d2:	1f c0       	rjmp	.+62     	; 0x1512 <strtol+0x182>
    14d4:	10 33       	cpi	r17, 0x30	; 48
    14d6:	c1 f4       	brne	.+48     	; 0x1508 <strtol+0x178>
    14d8:	f6 01       	movw	r30, r12
    14da:	84 91       	lpm	r24, Z
    14dc:	e7 fc       	sbrc	r14, 7
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7d       	andi	r24, 0xDF	; 223
    14e2:	88 35       	cpi	r24, 0x58	; 88
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <strtol+0x158>
    14e6:	b7 cf       	rjmp	.-146    	; 0x1456 <strtol+0xc6>
    14e8:	ae 2d       	mov	r26, r14
    14ea:	c6 01       	movw	r24, r12
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	fc 01       	movw	r30, r24
    14f2:	14 91       	lpm	r17, Z
    14f4:	a7 fd       	sbrc	r26, 7
    14f6:	10 81       	ld	r17, Z
    14f8:	e2 e0       	ldi	r30, 0x02	; 2
    14fa:	ce 0e       	add	r12, r30
    14fc:	d1 1c       	adc	r13, r1
    14fe:	e1 1c       	adc	r14, r1
    1500:	02 60       	ori	r16, 0x02	; 2
    1502:	60 e1       	ldi	r22, 0x10	; 16
    1504:	26 2e       	mov	r2, r22
    1506:	31 2c       	mov	r3, r1
    1508:	41 2c       	mov	r4, r1
    150a:	51 2c       	mov	r5, r1
    150c:	61 2c       	mov	r6, r1
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	78 2e       	mov	r7, r24
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	cb 01       	movw	r24, r22
    151a:	91 01       	movw	r18, r2
    151c:	03 2c       	mov	r0, r3
    151e:	00 0c       	add	r0, r0
    1520:	44 0b       	sbc	r20, r20
    1522:	55 0b       	sbc	r21, r21
    1524:	29 83       	std	Y+1, r18	; 0x01
    1526:	3a 83       	std	Y+2, r19	; 0x02
    1528:	4b 83       	std	Y+3, r20	; 0x03
    152a:	5c 83       	std	Y+4, r21	; 0x04
    152c:	e0 ed       	ldi	r30, 0xD0	; 208
    152e:	e1 0f       	add	r30, r17
    1530:	ea 30       	cpi	r30, 0x0A	; 10
    1532:	60 f0       	brcs	.+24     	; 0x154c <strtol+0x1bc>
    1534:	2f eb       	ldi	r18, 0xBF	; 191
    1536:	21 0f       	add	r18, r17
    1538:	2a 31       	cpi	r18, 0x1A	; 26
    153a:	10 f4       	brcc	.+4      	; 0x1540 <strtol+0x1b0>
    153c:	e9 ec       	ldi	r30, 0xC9	; 201
    153e:	05 c0       	rjmp	.+10     	; 0x154a <strtol+0x1ba>
    1540:	2f e9       	ldi	r18, 0x9F	; 159
    1542:	21 0f       	add	r18, r17
    1544:	2a 31       	cpi	r18, 0x1A	; 26
    1546:	50 f5       	brcc	.+84     	; 0x159c <strtol+0x20c>
    1548:	e9 ea       	ldi	r30, 0xA9	; 169
    154a:	e1 0f       	add	r30, r17
    154c:	2e 2f       	mov	r18, r30
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	22 15       	cp	r18, r2
    1552:	33 05       	cpc	r19, r3
    1554:	1c f5       	brge	.+70     	; 0x159c <strtol+0x20c>
    1556:	a7 fd       	sbrc	r26, 7
    1558:	18 c0       	rjmp	.+48     	; 0x158a <strtol+0x1fa>
    155a:	46 16       	cp	r4, r22
    155c:	57 06       	cpc	r5, r23
    155e:	68 06       	cpc	r6, r24
    1560:	79 06       	cpc	r7, r25
    1562:	80 f0       	brcs	.+32     	; 0x1584 <strtol+0x1f4>
    1564:	29 81       	ldd	r18, Y+1	; 0x01
    1566:	3a 81       	ldd	r19, Y+2	; 0x02
    1568:	4b 81       	ldd	r20, Y+3	; 0x03
    156a:	5c 81       	ldd	r21, Y+4	; 0x04
    156c:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsi3>
    1570:	6e 0f       	add	r22, r30
    1572:	71 1d       	adc	r23, r1
    1574:	81 1d       	adc	r24, r1
    1576:	91 1d       	adc	r25, r1
    1578:	61 30       	cpi	r22, 0x01	; 1
    157a:	71 05       	cpc	r23, r1
    157c:	81 05       	cpc	r24, r1
    157e:	30 e8       	ldi	r19, 0x80	; 128
    1580:	93 07       	cpc	r25, r19
    1582:	10 f0       	brcs	.+4      	; 0x1588 <strtol+0x1f8>
    1584:	af ef       	ldi	r26, 0xFF	; 255
    1586:	01 c0       	rjmp	.+2      	; 0x158a <strtol+0x1fa>
    1588:	a1 e0       	ldi	r26, 0x01	; 1
    158a:	f6 01       	movw	r30, r12
    158c:	14 91       	lpm	r17, Z
    158e:	e7 fc       	sbrc	r14, 7
    1590:	10 81       	ld	r17, Z
    1592:	4f ef       	ldi	r20, 0xFF	; 255
    1594:	c4 1a       	sub	r12, r20
    1596:	d4 0a       	sbc	r13, r20
    1598:	e4 0a       	sbc	r14, r20
    159a:	c8 cf       	rjmp	.-112    	; 0x152c <strtol+0x19c>
    159c:	20 2f       	mov	r18, r16
    159e:	21 70       	andi	r18, 0x01	; 1
    15a0:	a1 14       	cp	r10, r1
    15a2:	b1 04       	cpc	r11, r1
    15a4:	b1 f0       	breq	.+44     	; 0x15d2 <strtol+0x242>
    15a6:	aa 23       	and	r26, r26
    15a8:	49 f0       	breq	.+18     	; 0x15bc <strtol+0x22c>
    15aa:	51 e0       	ldi	r21, 0x01	; 1
    15ac:	c5 1a       	sub	r12, r21
    15ae:	d1 08       	sbc	r13, r1
    15b0:	e1 08       	sbc	r14, r1
    15b2:	f5 01       	movw	r30, r10
    15b4:	c0 82       	st	Z, r12
    15b6:	d1 82       	std	Z+1, r13	; 0x01
    15b8:	e2 82       	std	Z+2, r14	; 0x02
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <strtol+0x242>
    15bc:	01 ff       	sbrs	r16, 1
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <strtol+0x26a>
    15c0:	f2 e0       	ldi	r31, 0x02	; 2
    15c2:	cf 1a       	sub	r12, r31
    15c4:	d1 08       	sbc	r13, r1
    15c6:	e1 08       	sbc	r14, r1
    15c8:	f5 01       	movw	r30, r10
    15ca:	c0 82       	st	Z, r12
    15cc:	d1 82       	std	Z+1, r13	; 0x01
    15ce:	e2 82       	std	Z+2, r14	; 0x02
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <strtol+0x26a>
    15d2:	a7 ff       	sbrs	r26, 7
    15d4:	12 c0       	rjmp	.+36     	; 0x15fa <strtol+0x26a>
    15d6:	22 23       	and	r18, r18
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <strtol+0x254>
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e8       	ldi	r25, 0x80	; 128
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <strtol+0x25c>
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	7f ef       	ldi	r23, 0xFF	; 255
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	9f e7       	ldi	r25, 0x7F	; 127
    15ec:	22 e2       	ldi	r18, 0x22	; 34
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	30 93 71 08 	sts	0x0871, r19	; 0x800871 <errno+0x1>
    15f4:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <errno>
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <strtol+0x27c>
    15fa:	22 23       	and	r18, r18
    15fc:	81 f0       	breq	.+32     	; 0x161e <strtol+0x28e>
    15fe:	90 95       	com	r25
    1600:	80 95       	com	r24
    1602:	70 95       	com	r23
    1604:	61 95       	neg	r22
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	46 2f       	mov	r20, r22
    160e:	37 2f       	mov	r19, r23
    1610:	28 2f       	mov	r18, r24
    1612:	12 c0       	rjmp	.+36     	; 0x1638 <strtol+0x2a8>
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <strtol+0x2a8>
    161e:	97 ff       	sbrs	r25, 7
    1620:	f5 cf       	rjmp	.-22     	; 0x160c <strtol+0x27c>
    1622:	82 e2       	ldi	r24, 0x22	; 34
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <errno+0x1>
    162a:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <errno>
    162e:	6f ef       	ldi	r22, 0xFF	; 255
    1630:	7f ef       	ldi	r23, 0xFF	; 255
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	9f e7       	ldi	r25, 0x7F	; 127
    1636:	ea cf       	rjmp	.-44     	; 0x160c <strtol+0x27c>
    1638:	64 2f       	mov	r22, r20
    163a:	73 2f       	mov	r23, r19
    163c:	82 2f       	mov	r24, r18
    163e:	26 96       	adiw	r28, 0x06	; 6
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	af 90       	pop	r10
    165c:	8f 90       	pop	r8
    165e:	7f 90       	pop	r7
    1660:	6f 90       	pop	r6
    1662:	5f 90       	pop	r5
    1664:	4f 90       	pop	r4
    1666:	3f 90       	pop	r3
    1668:	2f 90       	pop	r2
    166a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001f70 <__ftoa_engine>:
    1f70:	28 30       	cpi	r18, 0x08	; 8
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <__ftoa_engine+0x6>
    1f74:	27 e0       	ldi	r18, 0x07	; 7
    1f76:	33 27       	eor	r19, r19
    1f78:	da 01       	movw	r26, r20
    1f7a:	99 0f       	add	r25, r25
    1f7c:	31 1d       	adc	r19, r1
    1f7e:	87 fd       	sbrc	r24, 7
    1f80:	91 60       	ori	r25, 0x01	; 1
    1f82:	00 96       	adiw	r24, 0x00	; 0
    1f84:	61 05       	cpc	r22, r1
    1f86:	71 05       	cpc	r23, r1
    1f88:	39 f4       	brne	.+14     	; 0x1f98 <__ftoa_engine+0x28>
    1f8a:	32 60       	ori	r19, 0x02	; 2
    1f8c:	2e 5f       	subi	r18, 0xFE	; 254
    1f8e:	3d 93       	st	X+, r19
    1f90:	30 e3       	ldi	r19, 0x30	; 48
    1f92:	2a 95       	dec	r18
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <__ftoa_engine+0x1e>
    1f96:	08 95       	ret
    1f98:	9f 3f       	cpi	r25, 0xFF	; 255
    1f9a:	30 f0       	brcs	.+12     	; 0x1fa8 <__ftoa_engine+0x38>
    1f9c:	80 38       	cpi	r24, 0x80	; 128
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	61 05       	cpc	r22, r1
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <__ftoa_engine+0x36>
    1fa4:	3c 5f       	subi	r19, 0xFC	; 252
    1fa6:	3c 5f       	subi	r19, 0xFC	; 252
    1fa8:	3d 93       	st	X+, r19
    1faa:	91 30       	cpi	r25, 0x01	; 1
    1fac:	08 f0       	brcs	.+2      	; 0x1fb0 <__ftoa_engine+0x40>
    1fae:	80 68       	ori	r24, 0x80	; 128
    1fb0:	91 1d       	adc	r25, r1
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	1f 93       	push	r17
    1fb8:	0f 93       	push	r16
    1fba:	ff 92       	push	r15
    1fbc:	ef 92       	push	r14
    1fbe:	19 2f       	mov	r17, r25
    1fc0:	98 7f       	andi	r25, 0xF8	; 248
    1fc2:	96 95       	lsr	r25
    1fc4:	e9 2f       	mov	r30, r25
    1fc6:	96 95       	lsr	r25
    1fc8:	96 95       	lsr	r25
    1fca:	e9 0f       	add	r30, r25
    1fcc:	ff 27       	eor	r31, r31
    1fce:	e0 59       	subi	r30, 0x90	; 144
    1fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd2:	99 27       	eor	r25, r25
    1fd4:	33 27       	eor	r19, r19
    1fd6:	ee 24       	eor	r14, r14
    1fd8:	ff 24       	eor	r15, r15
    1fda:	a7 01       	movw	r20, r14
    1fdc:	e7 01       	movw	r28, r14
    1fde:	05 90       	lpm	r0, Z+
    1fe0:	08 94       	sec
    1fe2:	07 94       	ror	r0
    1fe4:	28 f4       	brcc	.+10     	; 0x1ff0 <__ftoa_engine+0x80>
    1fe6:	36 0f       	add	r19, r22
    1fe8:	e7 1e       	adc	r14, r23
    1fea:	f8 1e       	adc	r15, r24
    1fec:	49 1f       	adc	r20, r25
    1fee:	51 1d       	adc	r21, r1
    1ff0:	66 0f       	add	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	06 94       	lsr	r0
    1ffa:	a1 f7       	brne	.-24     	; 0x1fe4 <__ftoa_engine+0x74>
    1ffc:	05 90       	lpm	r0, Z+
    1ffe:	07 94       	ror	r0
    2000:	28 f4       	brcc	.+10     	; 0x200c <__ftoa_engine+0x9c>
    2002:	e7 0e       	add	r14, r23
    2004:	f8 1e       	adc	r15, r24
    2006:	49 1f       	adc	r20, r25
    2008:	56 1f       	adc	r21, r22
    200a:	c1 1d       	adc	r28, r1
    200c:	77 0f       	add	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	66 1f       	adc	r22, r22
    2014:	06 94       	lsr	r0
    2016:	a1 f7       	brne	.-24     	; 0x2000 <__ftoa_engine+0x90>
    2018:	05 90       	lpm	r0, Z+
    201a:	07 94       	ror	r0
    201c:	28 f4       	brcc	.+10     	; 0x2028 <__ftoa_engine+0xb8>
    201e:	f8 0e       	add	r15, r24
    2020:	49 1f       	adc	r20, r25
    2022:	56 1f       	adc	r21, r22
    2024:	c7 1f       	adc	r28, r23
    2026:	d1 1d       	adc	r29, r1
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	66 1f       	adc	r22, r22
    202e:	77 1f       	adc	r23, r23
    2030:	06 94       	lsr	r0
    2032:	a1 f7       	brne	.-24     	; 0x201c <__ftoa_engine+0xac>
    2034:	05 90       	lpm	r0, Z+
    2036:	07 94       	ror	r0
    2038:	20 f4       	brcc	.+8      	; 0x2042 <__ftoa_engine+0xd2>
    203a:	49 0f       	add	r20, r25
    203c:	56 1f       	adc	r21, r22
    203e:	c7 1f       	adc	r28, r23
    2040:	d8 1f       	adc	r29, r24
    2042:	99 0f       	add	r25, r25
    2044:	66 1f       	adc	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	88 1f       	adc	r24, r24
    204a:	06 94       	lsr	r0
    204c:	a9 f7       	brne	.-22     	; 0x2038 <__ftoa_engine+0xc8>
    204e:	84 91       	lpm	r24, Z
    2050:	10 95       	com	r17
    2052:	17 70       	andi	r17, 0x07	; 7
    2054:	41 f0       	breq	.+16     	; 0x2066 <__ftoa_engine+0xf6>
    2056:	d6 95       	lsr	r29
    2058:	c7 95       	ror	r28
    205a:	57 95       	ror	r21
    205c:	47 95       	ror	r20
    205e:	f7 94       	ror	r15
    2060:	e7 94       	ror	r14
    2062:	1a 95       	dec	r17
    2064:	c1 f7       	brne	.-16     	; 0x2056 <__ftoa_engine+0xe6>
    2066:	e6 e1       	ldi	r30, 0x16	; 22
    2068:	f1 e0       	ldi	r31, 0x01	; 1
    206a:	68 94       	set
    206c:	15 90       	lpm	r1, Z+
    206e:	15 91       	lpm	r17, Z+
    2070:	35 91       	lpm	r19, Z+
    2072:	65 91       	lpm	r22, Z+
    2074:	95 91       	lpm	r25, Z+
    2076:	05 90       	lpm	r0, Z+
    2078:	7f e2       	ldi	r23, 0x2F	; 47
    207a:	73 95       	inc	r23
    207c:	e1 18       	sub	r14, r1
    207e:	f1 0a       	sbc	r15, r17
    2080:	43 0b       	sbc	r20, r19
    2082:	56 0b       	sbc	r21, r22
    2084:	c9 0b       	sbc	r28, r25
    2086:	d0 09       	sbc	r29, r0
    2088:	c0 f7       	brcc	.-16     	; 0x207a <__ftoa_engine+0x10a>
    208a:	e1 0c       	add	r14, r1
    208c:	f1 1e       	adc	r15, r17
    208e:	43 1f       	adc	r20, r19
    2090:	56 1f       	adc	r21, r22
    2092:	c9 1f       	adc	r28, r25
    2094:	d0 1d       	adc	r29, r0
    2096:	7e f4       	brtc	.+30     	; 0x20b6 <__ftoa_engine+0x146>
    2098:	70 33       	cpi	r23, 0x30	; 48
    209a:	11 f4       	brne	.+4      	; 0x20a0 <__ftoa_engine+0x130>
    209c:	8a 95       	dec	r24
    209e:	e6 cf       	rjmp	.-52     	; 0x206c <__ftoa_engine+0xfc>
    20a0:	e8 94       	clt
    20a2:	01 50       	subi	r16, 0x01	; 1
    20a4:	30 f0       	brcs	.+12     	; 0x20b2 <__ftoa_engine+0x142>
    20a6:	08 0f       	add	r16, r24
    20a8:	0a f4       	brpl	.+2      	; 0x20ac <__ftoa_engine+0x13c>
    20aa:	00 27       	eor	r16, r16
    20ac:	02 17       	cp	r16, r18
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <__ftoa_engine+0x142>
    20b0:	20 2f       	mov	r18, r16
    20b2:	23 95       	inc	r18
    20b4:	02 2f       	mov	r16, r18
    20b6:	7a 33       	cpi	r23, 0x3A	; 58
    20b8:	28 f0       	brcs	.+10     	; 0x20c4 <__ftoa_engine+0x154>
    20ba:	79 e3       	ldi	r23, 0x39	; 57
    20bc:	7d 93       	st	X+, r23
    20be:	2a 95       	dec	r18
    20c0:	e9 f7       	brne	.-6      	; 0x20bc <__ftoa_engine+0x14c>
    20c2:	10 c0       	rjmp	.+32     	; 0x20e4 <__ftoa_engine+0x174>
    20c4:	7d 93       	st	X+, r23
    20c6:	2a 95       	dec	r18
    20c8:	89 f6       	brne	.-94     	; 0x206c <__ftoa_engine+0xfc>
    20ca:	06 94       	lsr	r0
    20cc:	97 95       	ror	r25
    20ce:	67 95       	ror	r22
    20d0:	37 95       	ror	r19
    20d2:	17 95       	ror	r17
    20d4:	17 94       	ror	r1
    20d6:	e1 18       	sub	r14, r1
    20d8:	f1 0a       	sbc	r15, r17
    20da:	43 0b       	sbc	r20, r19
    20dc:	56 0b       	sbc	r21, r22
    20de:	c9 0b       	sbc	r28, r25
    20e0:	d0 09       	sbc	r29, r0
    20e2:	98 f0       	brcs	.+38     	; 0x210a <__ftoa_engine+0x19a>
    20e4:	23 95       	inc	r18
    20e6:	7e 91       	ld	r23, -X
    20e8:	73 95       	inc	r23
    20ea:	7a 33       	cpi	r23, 0x3A	; 58
    20ec:	08 f0       	brcs	.+2      	; 0x20f0 <__ftoa_engine+0x180>
    20ee:	70 e3       	ldi	r23, 0x30	; 48
    20f0:	7c 93       	st	X, r23
    20f2:	20 13       	cpse	r18, r16
    20f4:	b8 f7       	brcc	.-18     	; 0x20e4 <__ftoa_engine+0x174>
    20f6:	7e 91       	ld	r23, -X
    20f8:	70 61       	ori	r23, 0x10	; 16
    20fa:	7d 93       	st	X+, r23
    20fc:	30 f0       	brcs	.+12     	; 0x210a <__ftoa_engine+0x19a>
    20fe:	83 95       	inc	r24
    2100:	71 e3       	ldi	r23, 0x31	; 49
    2102:	7d 93       	st	X+, r23
    2104:	70 e3       	ldi	r23, 0x30	; 48
    2106:	2a 95       	dec	r18
    2108:	e1 f7       	brne	.-8      	; 0x2102 <__ftoa_engine+0x192>
    210a:	11 24       	eor	r1, r1
    210c:	ef 90       	pop	r14
    210e:	ff 90       	pop	r15
    2110:	0f 91       	pop	r16
    2112:	1f 91       	pop	r17
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	99 27       	eor	r25, r25
    211a:	87 fd       	sbrc	r24, 7
    211c:	90 95       	com	r25
    211e:	08 95       	ret

Disassembly of section .text.avrlibc:

00006658 <isspace>:
    6658:	91 11       	cpse	r25, r1
    665a:	0c 94 e7 34 	jmp	0x69ce	; 0x69ce <__ctype_isfalse>
    665e:	80 32       	cpi	r24, 0x20	; 32
    6660:	19 f0       	breq	.+6      	; 0x6668 <isspace+0x10>
    6662:	89 50       	subi	r24, 0x09	; 9
    6664:	85 50       	subi	r24, 0x05	; 5
    6666:	c8 f7       	brcc	.-14     	; 0x665a <isspace+0x2>
    6668:	08 95       	ret

Disassembly of section .text.avrlibc:

00005cfe <memcpy>:
    5cfe:	cf 92       	push	r12
    5d00:	df 92       	push	r13
    5d02:	ef 92       	push	r14
    5d04:	dc 01       	movw	r26, r24
    5d06:	6a 01       	movw	r12, r20
    5d08:	e6 2e       	mov	r14, r22
    5d0a:	28 0f       	add	r18, r24
    5d0c:	39 1f       	adc	r19, r25
    5d0e:	a2 17       	cp	r26, r18
    5d10:	b3 07       	cpc	r27, r19
    5d12:	51 f0       	breq	.+20     	; 0x5d28 <memcpy+0x2a>
    5d14:	f6 01       	movw	r30, r12
    5d16:	44 91       	lpm	r20, Z
    5d18:	e7 fc       	sbrc	r14, 7
    5d1a:	40 81       	ld	r20, Z
    5d1c:	4d 93       	st	X+, r20
    5d1e:	4f ef       	ldi	r20, 0xFF	; 255
    5d20:	c4 1a       	sub	r12, r20
    5d22:	d4 0a       	sbc	r13, r20
    5d24:	e4 0a       	sbc	r14, r20
    5d26:	f3 cf       	rjmp	.-26     	; 0x5d0e <memcpy+0x10>
    5d28:	ef 90       	pop	r14
    5d2a:	df 90       	pop	r13
    5d2c:	cf 90       	pop	r12
    5d2e:	08 95       	ret

Disassembly of section .text.avrlibc:

00005f6a <strcat>:
    5f6a:	9a 01       	movw	r18, r20
    5f6c:	46 2f       	mov	r20, r22
    5f6e:	dc 01       	movw	r26, r24
    5f70:	bd 01       	movw	r22, r26
    5f72:	6f 5f       	subi	r22, 0xFF	; 255
    5f74:	7f 4f       	sbci	r23, 0xFF	; 255
    5f76:	5c 91       	ld	r21, X
    5f78:	55 23       	and	r21, r21
    5f7a:	11 f0       	breq	.+4      	; 0x5f80 <strcat+0x16>
    5f7c:	db 01       	movw	r26, r22
    5f7e:	f8 cf       	rjmp	.-16     	; 0x5f70 <strcat+0x6>
    5f80:	f9 01       	movw	r30, r18
    5f82:	54 91       	lpm	r21, Z
    5f84:	47 fd       	sbrc	r20, 7
    5f86:	50 81       	ld	r21, Z
    5f88:	5d 93       	st	X+, r21
    5f8a:	55 23       	and	r21, r21
    5f8c:	21 f0       	breq	.+8      	; 0x5f96 <strcat+0x2c>
    5f8e:	2f 5f       	subi	r18, 0xFF	; 255
    5f90:	3f 4f       	sbci	r19, 0xFF	; 255
    5f92:	4f 4f       	sbci	r20, 0xFF	; 255
    5f94:	f5 cf       	rjmp	.-22     	; 0x5f80 <strcat+0x16>
    5f96:	08 95       	ret

Disassembly of section .text.avrlibc:

000056c4 <strcmp>:
    56c4:	cf 92       	push	r12
    56c6:	df 92       	push	r13
    56c8:	ef 92       	push	r14
    56ca:	6b 01       	movw	r12, r22
    56cc:	e8 2e       	mov	r14, r24
    56ce:	f6 01       	movw	r30, r12
    56d0:	84 91       	lpm	r24, Z
    56d2:	e7 fc       	sbrc	r14, 7
    56d4:	80 81       	ld	r24, Z
    56d6:	f9 01       	movw	r30, r18
    56d8:	54 91       	lpm	r21, Z
    56da:	47 fd       	sbrc	r20, 7
    56dc:	50 81       	ld	r21, Z
    56de:	85 13       	cpse	r24, r21
    56e0:	0b c0       	rjmp	.+22     	; 0x56f8 <strcmp+0x34>
    56e2:	88 23       	and	r24, r24
    56e4:	41 f0       	breq	.+16     	; 0x56f6 <strcmp+0x32>
    56e6:	8f ef       	ldi	r24, 0xFF	; 255
    56e8:	c8 1a       	sub	r12, r24
    56ea:	d8 0a       	sbc	r13, r24
    56ec:	e8 0a       	sbc	r14, r24
    56ee:	2f 5f       	subi	r18, 0xFF	; 255
    56f0:	3f 4f       	sbci	r19, 0xFF	; 255
    56f2:	4f 4f       	sbci	r20, 0xFF	; 255
    56f4:	ec cf       	rjmp	.-40     	; 0x56ce <strcmp+0xa>
    56f6:	58 2f       	mov	r21, r24
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	85 1b       	sub	r24, r21
    56fc:	91 09       	sbc	r25, r1
    56fe:	ef 90       	pop	r14
    5700:	df 90       	pop	r13
    5702:	cf 90       	pop	r12
    5704:	08 95       	ret

Disassembly of section .text.avrlibc:

0000486a <strncmp>:
    486a:	cf 92       	push	r12
    486c:	df 92       	push	r13
    486e:	ef 92       	push	r14
    4870:	0f 93       	push	r16
    4872:	1f 93       	push	r17
    4874:	6b 01       	movw	r12, r22
    4876:	e8 2e       	mov	r14, r24
    4878:	01 15       	cp	r16, r1
    487a:	11 05       	cpc	r17, r1
    487c:	19 f1       	breq	.+70     	; 0x48c4 <strncmp+0x5a>
    487e:	01 50       	subi	r16, 0x01	; 1
    4880:	11 09       	sbc	r17, r1
    4882:	f6 01       	movw	r30, r12
    4884:	84 91       	lpm	r24, Z
    4886:	e7 fc       	sbrc	r14, 7
    4888:	80 81       	ld	r24, Z
    488a:	88 23       	and	r24, r24
    488c:	99 f0       	breq	.+38     	; 0x48b4 <strncmp+0x4a>
    488e:	f9 01       	movw	r30, r18
    4890:	94 91       	lpm	r25, Z
    4892:	47 fd       	sbrc	r20, 7
    4894:	90 81       	ld	r25, Z
    4896:	99 23       	and	r25, r25
    4898:	69 f0       	breq	.+26     	; 0x48b4 <strncmp+0x4a>
    489a:	01 15       	cp	r16, r1
    489c:	11 05       	cpc	r17, r1
    489e:	51 f0       	breq	.+20     	; 0x48b4 <strncmp+0x4a>
    48a0:	89 13       	cpse	r24, r25
    48a2:	08 c0       	rjmp	.+16     	; 0x48b4 <strncmp+0x4a>
    48a4:	8f ef       	ldi	r24, 0xFF	; 255
    48a6:	c8 1a       	sub	r12, r24
    48a8:	d8 0a       	sbc	r13, r24
    48aa:	e8 0a       	sbc	r14, r24
    48ac:	2f 5f       	subi	r18, 0xFF	; 255
    48ae:	3f 4f       	sbci	r19, 0xFF	; 255
    48b0:	4f 4f       	sbci	r20, 0xFF	; 255
    48b2:	e5 cf       	rjmp	.-54     	; 0x487e <strncmp+0x14>
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	f9 01       	movw	r30, r18
    48b8:	24 91       	lpm	r18, Z
    48ba:	47 fd       	sbrc	r20, 7
    48bc:	20 81       	ld	r18, Z
    48be:	82 1b       	sub	r24, r18
    48c0:	91 09       	sbc	r25, r1
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <strncmp+0x5e>
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	1f 91       	pop	r17
    48ca:	0f 91       	pop	r16
    48cc:	ef 90       	pop	r14
    48ce:	df 90       	pop	r13
    48d0:	cf 90       	pop	r12
    48d2:	08 95       	ret

Disassembly of section .text.avrlibc:

00005f98 <strlen>:
    5f98:	cf 92       	push	r12
    5f9a:	df 92       	push	r13
    5f9c:	ef 92       	push	r14
    5f9e:	6b 01       	movw	r12, r22
    5fa0:	e8 2e       	mov	r14, r24
    5fa2:	a8 2f       	mov	r26, r24
    5fa4:	cb 01       	movw	r24, r22
    5fa6:	fc 01       	movw	r30, r24
    5fa8:	24 91       	lpm	r18, Z
    5faa:	a7 fd       	sbrc	r26, 7
    5fac:	20 81       	ld	r18, Z
    5fae:	22 23       	and	r18, r18
    5fb0:	19 f0       	breq	.+6      	; 0x5fb8 <strlen+0x20>
    5fb2:	01 96       	adiw	r24, 0x01	; 1
    5fb4:	a1 1d       	adc	r26, r1
    5fb6:	f7 cf       	rjmp	.-18     	; 0x5fa6 <strlen+0xe>
    5fb8:	8c 19       	sub	r24, r12
    5fba:	9d 09       	sbc	r25, r13
    5fbc:	ef 90       	pop	r14
    5fbe:	df 90       	pop	r13
    5fc0:	cf 90       	pop	r12
    5fc2:	08 95       	ret

Disassembly of section .text.avrlibc:

0000633a <strcpy>:
    633a:	9a 01       	movw	r18, r20
    633c:	46 2f       	mov	r20, r22
    633e:	dc 01       	movw	r26, r24
    6340:	f9 01       	movw	r30, r18
    6342:	54 91       	lpm	r21, Z
    6344:	47 fd       	sbrc	r20, 7
    6346:	50 81       	ld	r21, Z
    6348:	5d 93       	st	X+, r21
    634a:	55 23       	and	r21, r21
    634c:	21 f0       	breq	.+8      	; 0x6356 <strcpy+0x1c>
    634e:	2f 5f       	subi	r18, 0xFF	; 255
    6350:	3f 4f       	sbci	r19, 0xFF	; 255
    6352:	4f 4f       	sbci	r20, 0xFF	; 255
    6354:	f5 cf       	rjmp	.-22     	; 0x6340 <strcpy+0x6>
    6356:	08 95       	ret

Disassembly of section .text.avrlibc:

00005b96 <strnlen>:
    5b96:	cf 92       	push	r12
    5b98:	df 92       	push	r13
    5b9a:	ef 92       	push	r14
    5b9c:	6b 01       	movw	r12, r22
    5b9e:	e8 2e       	mov	r14, r24
    5ba0:	a8 2f       	mov	r26, r24
    5ba2:	cb 01       	movw	r24, r22
    5ba4:	41 15       	cp	r20, r1
    5ba6:	51 05       	cpc	r21, r1
    5ba8:	31 f4       	brne	.+12     	; 0x5bb6 <strnlen+0x20>
    5baa:	8c 19       	sub	r24, r12
    5bac:	9d 09       	sbc	r25, r13
    5bae:	ef 90       	pop	r14
    5bb0:	df 90       	pop	r13
    5bb2:	cf 90       	pop	r12
    5bb4:	08 95       	ret
    5bb6:	fc 01       	movw	r30, r24
    5bb8:	24 91       	lpm	r18, Z
    5bba:	a7 fd       	sbrc	r26, 7
    5bbc:	20 81       	ld	r18, Z
    5bbe:	22 23       	and	r18, r18
    5bc0:	a1 f3       	breq	.-24     	; 0x5baa <strnlen+0x14>
    5bc2:	01 96       	adiw	r24, 0x01	; 1
    5bc4:	a1 1d       	adc	r26, r1
    5bc6:	41 50       	subi	r20, 0x01	; 1
    5bc8:	51 09       	sbc	r21, r1
    5bca:	ec cf       	rjmp	.-40     	; 0x5ba4 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000044e2 <fputc>:
    44e2:	0f 93       	push	r16
    44e4:	1f 93       	push	r17
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	fb 01       	movw	r30, r22
    44ec:	24 81       	ldd	r18, Z+4	; 0x04
    44ee:	21 fd       	sbrc	r18, 1
    44f0:	03 c0       	rjmp	.+6      	; 0x44f8 <fputc+0x16>
    44f2:	8f ef       	ldi	r24, 0xFF	; 255
    44f4:	9f ef       	ldi	r25, 0xFF	; 255
    44f6:	2c c0       	rjmp	.+88     	; 0x4550 <fputc+0x6e>
    44f8:	22 ff       	sbrs	r18, 2
    44fa:	16 c0       	rjmp	.+44     	; 0x4528 <fputc+0x46>
    44fc:	47 81       	ldd	r20, Z+7	; 0x07
    44fe:	50 85       	ldd	r21, Z+8	; 0x08
    4500:	25 81       	ldd	r18, Z+5	; 0x05
    4502:	36 81       	ldd	r19, Z+6	; 0x06
    4504:	42 17       	cp	r20, r18
    4506:	53 07       	cpc	r21, r19
    4508:	44 f4       	brge	.+16     	; 0x451a <fputc+0x38>
    450a:	a0 81       	ld	r26, Z
    450c:	b1 81       	ldd	r27, Z+1	; 0x01
    450e:	9d 01       	movw	r18, r26
    4510:	2f 5f       	subi	r18, 0xFF	; 255
    4512:	3f 4f       	sbci	r19, 0xFF	; 255
    4514:	31 83       	std	Z+1, r19	; 0x01
    4516:	20 83       	st	Z, r18
    4518:	8c 93       	st	X, r24
    451a:	27 81       	ldd	r18, Z+7	; 0x07
    451c:	30 85       	ldd	r19, Z+8	; 0x08
    451e:	2f 5f       	subi	r18, 0xFF	; 255
    4520:	3f 4f       	sbci	r19, 0xFF	; 255
    4522:	30 87       	std	Z+8, r19	; 0x08
    4524:	27 83       	std	Z+7, r18	; 0x07
    4526:	14 c0       	rjmp	.+40     	; 0x4550 <fputc+0x6e>
    4528:	8b 01       	movw	r16, r22
    452a:	ec 01       	movw	r28, r24
    452c:	fb 01       	movw	r30, r22
    452e:	01 84       	ldd	r0, Z+9	; 0x09
    4530:	f2 85       	ldd	r31, Z+10	; 0x0a
    4532:	e0 2d       	mov	r30, r0
    4534:	09 95       	icall
    4536:	89 2b       	or	r24, r25
    4538:	e1 f6       	brne	.-72     	; 0x44f2 <fputc+0x10>
    453a:	d8 01       	movw	r26, r16
    453c:	17 96       	adiw	r26, 0x07	; 7
    453e:	8d 91       	ld	r24, X+
    4540:	9c 91       	ld	r25, X
    4542:	18 97       	sbiw	r26, 0x08	; 8
    4544:	01 96       	adiw	r24, 0x01	; 1
    4546:	18 96       	adiw	r26, 0x08	; 8
    4548:	9c 93       	st	X, r25
    454a:	8e 93       	st	-X, r24
    454c:	17 97       	sbiw	r26, 0x07	; 7
    454e:	ce 01       	movw	r24, r28
    4550:	df 91       	pop	r29
    4552:	cf 91       	pop	r28
    4554:	1f 91       	pop	r17
    4556:	0f 91       	pop	r16
    4558:	08 95       	ret

Disassembly of section .text.avrlibc:

0000552e <sprintf>:
    552e:	af e0       	ldi	r26, 0x0F	; 15
    5530:	b0 e0       	ldi	r27, 0x00	; 0
    5532:	ed e9       	ldi	r30, 0x9D	; 157
    5534:	fa e2       	ldi	r31, 0x2A	; 42
    5536:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <__prologue_saves__+0x1c>
    553a:	0e 89       	ldd	r16, Y+22	; 0x16
    553c:	1f 89       	ldd	r17, Y+23	; 0x17
    553e:	86 e0       	ldi	r24, 0x06	; 6
    5540:	8d 83       	std	Y+5, r24	; 0x05
    5542:	1a 83       	std	Y+2, r17	; 0x02
    5544:	09 83       	std	Y+1, r16	; 0x01
    5546:	8f ef       	ldi	r24, 0xFF	; 255
    5548:	9f e7       	ldi	r25, 0x7F	; 127
    554a:	9f 83       	std	Y+7, r25	; 0x07
    554c:	8e 83       	std	Y+6, r24	; 0x06
    554e:	9e 01       	movw	r18, r28
    5550:	25 5e       	subi	r18, 0xE5	; 229
    5552:	3f 4f       	sbci	r19, 0xFF	; 255
    5554:	48 8d       	ldd	r20, Y+24	; 0x18
    5556:	59 8d       	ldd	r21, Y+25	; 0x19
    5558:	6a 8d       	ldd	r22, Y+26	; 0x1a
    555a:	ce 01       	movw	r24, r28
    555c:	01 96       	adiw	r24, 0x01	; 1
    555e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <vfprintf>
    5562:	e8 85       	ldd	r30, Y+8	; 0x08
    5564:	f9 85       	ldd	r31, Y+9	; 0x09
    5566:	e0 0f       	add	r30, r16
    5568:	f1 1f       	adc	r31, r17
    556a:	10 82       	st	Z, r1
    556c:	2f 96       	adiw	r28, 0x0f	; 15
    556e:	e4 e0       	ldi	r30, 0x04	; 4
    5570:	0c 94 be 2d 	jmp	0x5b7c	; 0x5b7c <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000378e <__ultoa_invert>:
    378e:	fa 01       	movw	r30, r20
    3790:	aa 27       	eor	r26, r26
    3792:	28 30       	cpi	r18, 0x08	; 8
    3794:	51 f1       	breq	.+84     	; 0x37ea <__ultoa_invert+0x5c>
    3796:	20 31       	cpi	r18, 0x10	; 16
    3798:	81 f1       	breq	.+96     	; 0x37fa <__ultoa_invert+0x6c>
    379a:	e8 94       	clt
    379c:	6f 93       	push	r22
    379e:	6e 7f       	andi	r22, 0xFE	; 254
    37a0:	6e 5f       	subi	r22, 0xFE	; 254
    37a2:	7f 4f       	sbci	r23, 0xFF	; 255
    37a4:	8f 4f       	sbci	r24, 0xFF	; 255
    37a6:	9f 4f       	sbci	r25, 0xFF	; 255
    37a8:	af 4f       	sbci	r26, 0xFF	; 255
    37aa:	b1 e0       	ldi	r27, 0x01	; 1
    37ac:	3e d0       	rcall	.+124    	; 0x382a <__ultoa_invert+0x9c>
    37ae:	b4 e0       	ldi	r27, 0x04	; 4
    37b0:	3c d0       	rcall	.+120    	; 0x382a <__ultoa_invert+0x9c>
    37b2:	67 0f       	add	r22, r23
    37b4:	78 1f       	adc	r23, r24
    37b6:	89 1f       	adc	r24, r25
    37b8:	9a 1f       	adc	r25, r26
    37ba:	a1 1d       	adc	r26, r1
    37bc:	68 0f       	add	r22, r24
    37be:	79 1f       	adc	r23, r25
    37c0:	8a 1f       	adc	r24, r26
    37c2:	91 1d       	adc	r25, r1
    37c4:	a1 1d       	adc	r26, r1
    37c6:	6a 0f       	add	r22, r26
    37c8:	71 1d       	adc	r23, r1
    37ca:	81 1d       	adc	r24, r1
    37cc:	91 1d       	adc	r25, r1
    37ce:	a1 1d       	adc	r26, r1
    37d0:	20 d0       	rcall	.+64     	; 0x3812 <__ultoa_invert+0x84>
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <__ultoa_invert+0x48>
    37d4:	68 94       	set
    37d6:	3f 91       	pop	r19
    37d8:	2a e0       	ldi	r18, 0x0A	; 10
    37da:	26 9f       	mul	r18, r22
    37dc:	11 24       	eor	r1, r1
    37de:	30 19       	sub	r19, r0
    37e0:	30 5d       	subi	r19, 0xD0	; 208
    37e2:	31 93       	st	Z+, r19
    37e4:	de f6       	brtc	.-74     	; 0x379c <__ultoa_invert+0xe>
    37e6:	cf 01       	movw	r24, r30
    37e8:	08 95       	ret
    37ea:	46 2f       	mov	r20, r22
    37ec:	47 70       	andi	r20, 0x07	; 7
    37ee:	40 5d       	subi	r20, 0xD0	; 208
    37f0:	41 93       	st	Z+, r20
    37f2:	b3 e0       	ldi	r27, 0x03	; 3
    37f4:	0f d0       	rcall	.+30     	; 0x3814 <__ultoa_invert+0x86>
    37f6:	c9 f7       	brne	.-14     	; 0x37ea <__ultoa_invert+0x5c>
    37f8:	f6 cf       	rjmp	.-20     	; 0x37e6 <__ultoa_invert+0x58>
    37fa:	46 2f       	mov	r20, r22
    37fc:	4f 70       	andi	r20, 0x0F	; 15
    37fe:	40 5d       	subi	r20, 0xD0	; 208
    3800:	4a 33       	cpi	r20, 0x3A	; 58
    3802:	18 f0       	brcs	.+6      	; 0x380a <__ultoa_invert+0x7c>
    3804:	49 5d       	subi	r20, 0xD9	; 217
    3806:	31 fd       	sbrc	r19, 1
    3808:	40 52       	subi	r20, 0x20	; 32
    380a:	41 93       	st	Z+, r20
    380c:	02 d0       	rcall	.+4      	; 0x3812 <__ultoa_invert+0x84>
    380e:	a9 f7       	brne	.-22     	; 0x37fa <__ultoa_invert+0x6c>
    3810:	ea cf       	rjmp	.-44     	; 0x37e6 <__ultoa_invert+0x58>
    3812:	b4 e0       	ldi	r27, 0x04	; 4
    3814:	a6 95       	lsr	r26
    3816:	97 95       	ror	r25
    3818:	87 95       	ror	r24
    381a:	77 95       	ror	r23
    381c:	67 95       	ror	r22
    381e:	ba 95       	dec	r27
    3820:	c9 f7       	brne	.-14     	; 0x3814 <__ultoa_invert+0x86>
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	61 05       	cpc	r22, r1
    3826:	71 05       	cpc	r23, r1
    3828:	08 95       	ret
    382a:	9b 01       	movw	r18, r22
    382c:	ac 01       	movw	r20, r24
    382e:	0a 2e       	mov	r0, r26
    3830:	06 94       	lsr	r0
    3832:	57 95       	ror	r21
    3834:	47 95       	ror	r20
    3836:	37 95       	ror	r19
    3838:	27 95       	ror	r18
    383a:	ba 95       	dec	r27
    383c:	c9 f7       	brne	.-14     	; 0x3830 <__ultoa_invert+0xa2>
    383e:	62 0f       	add	r22, r18
    3840:	73 1f       	adc	r23, r19
    3842:	84 1f       	adc	r24, r20
    3844:	95 1f       	adc	r25, r21
    3846:	a0 1d       	adc	r26, r0
    3848:	08 95       	ret

Disassembly of section .text.avrlibc:

000069ce <__ctype_isfalse>:
    69ce:	99 27       	eor	r25, r25
    69d0:	88 27       	eor	r24, r24

000069d2 <__ctype_istrue>:
    69d2:	08 95       	ret

Disassembly of section .text.avrlibc:

000060b2 <eeprom_read_block>:
    60b2:	ba 01       	movw	r22, r20
    60b4:	a9 01       	movw	r20, r18
    60b6:	dc 01       	movw	r26, r24
    60b8:	cb 01       	movw	r24, r22

000060ba <eeprom_read_blraw>:
    60ba:	fc 01       	movw	r30, r24
    60bc:	f9 99       	sbic	0x1f, 1	; 31
    60be:	fe cf       	rjmp	.-4      	; 0x60bc <eeprom_read_blraw+0x2>
    60c0:	06 c0       	rjmp	.+12     	; 0x60ce <eeprom_read_blraw+0x14>
    60c2:	f2 bd       	out	0x22, r31	; 34
    60c4:	e1 bd       	out	0x21, r30	; 33
    60c6:	f8 9a       	sbi	0x1f, 0	; 31
    60c8:	31 96       	adiw	r30, 0x01	; 1
    60ca:	00 b4       	in	r0, 0x20	; 32
    60cc:	0d 92       	st	X+, r0
    60ce:	41 50       	subi	r20, 0x01	; 1
    60d0:	50 40       	sbci	r21, 0x00	; 0
    60d2:	b8 f7       	brcc	.-18     	; 0x60c2 <eeprom_read_blraw+0x8>
    60d4:	08 95       	ret

Disassembly of section .text.avrlibc:

0000666a <eeprom_read_byte>:
    666a:	cb 01       	movw	r24, r22
    666c:	f9 99       	sbic	0x1f, 1	; 31
    666e:	fe cf       	rjmp	.-4      	; 0x666c <eeprom_read_byte+0x2>
    6670:	92 bd       	out	0x22, r25	; 34
    6672:	81 bd       	out	0x21, r24	; 33
    6674:	f8 9a       	sbi	0x1f, 0	; 31
    6676:	99 27       	eor	r25, r25
    6678:	80 b5       	in	r24, 0x20	; 32
    667a:	08 95       	ret

Disassembly of section .text.avrlibc:

000067d2 <eeprom_read_dword>:
    67d2:	cb 01       	movw	r24, r22
    67d4:	a6 e1       	ldi	r26, 0x16	; 22
    67d6:	b0 e0       	ldi	r27, 0x00	; 0
    67d8:	44 e0       	ldi	r20, 0x04	; 4
    67da:	50 e0       	ldi	r21, 0x00	; 0
    67dc:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000067e0 <eeprom_read_word>:
    67e0:	cb 01       	movw	r24, r22
    67e2:	a8 e1       	ldi	r26, 0x18	; 24
    67e4:	b0 e0       	ldi	r27, 0x00	; 0
    67e6:	42 e0       	ldi	r20, 0x02	; 2
    67e8:	50 e0       	ldi	r21, 0x00	; 0
    67ea:	0c 94 5d 30 	jmp	0x60ba	; 0x60ba <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000055b8 <eeprom_update_block>:
    55b8:	cf 92       	push	r12
    55ba:	df 92       	push	r13
    55bc:	ef 92       	push	r14
    55be:	21 50       	subi	r18, 0x01	; 1
    55c0:	31 09       	sbc	r19, r1
    55c2:	c0 f0       	brcs	.+48     	; 0x55f4 <eeprom_update_block+0x3c>
    55c4:	6b 01       	movw	r12, r22
    55c6:	e8 2e       	mov	r14, r24
    55c8:	c2 0e       	add	r12, r18
    55ca:	d3 1e       	adc	r13, r19
    55cc:	e1 1c       	adc	r14, r1
    55ce:	ca 01       	movw	r24, r20
    55d0:	82 0f       	add	r24, r18
    55d2:	93 1f       	adc	r25, r19
    55d4:	42 2f       	mov	r20, r18
    55d6:	73 2f       	mov	r23, r19
    55d8:	f6 01       	movw	r30, r12
    55da:	5e 2d       	mov	r21, r14
    55dc:	0e 94 8f 34 	call	0x691e	; 0x691e <__xload_1>
    55e0:	26 2f       	mov	r18, r22
    55e2:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <eeprom_update_r18>
    55e6:	31 e0       	ldi	r19, 0x01	; 1
    55e8:	c3 1a       	sub	r12, r19
    55ea:	d1 08       	sbc	r13, r1
    55ec:	e1 08       	sbc	r14, r1
    55ee:	41 50       	subi	r20, 0x01	; 1
    55f0:	70 40       	sbci	r23, 0x00	; 0
    55f2:	90 f7       	brcc	.-28     	; 0x55d8 <eeprom_update_block+0x20>
    55f4:	ef 90       	pop	r14
    55f6:	df 90       	pop	r13
    55f8:	cf 90       	pop	r12
    55fa:	08 95       	ret

Disassembly of section .text.avrlibc:

000060d6 <eeprom_update_byte>:
    60d6:	26 2f       	mov	r18, r22

000060d8 <eeprom_update_r18>:
    60d8:	f9 99       	sbic	0x1f, 1	; 31
    60da:	fe cf       	rjmp	.-4      	; 0x60d8 <eeprom_update_r18>
    60dc:	92 bd       	out	0x22, r25	; 34
    60de:	81 bd       	out	0x21, r24	; 33
    60e0:	f8 9a       	sbi	0x1f, 0	; 31
    60e2:	01 97       	sbiw	r24, 0x01	; 1
    60e4:	00 b4       	in	r0, 0x20	; 32
    60e6:	02 16       	cp	r0, r18
    60e8:	39 f0       	breq	.+14     	; 0x60f8 <eeprom_update_r18+0x20>
    60ea:	1f ba       	out	0x1f, r1	; 31
    60ec:	20 bd       	out	0x20, r18	; 32
    60ee:	0f b6       	in	r0, 0x3f	; 63
    60f0:	f8 94       	cli
    60f2:	fa 9a       	sbi	0x1f, 2	; 31
    60f4:	f9 9a       	sbi	0x1f, 1	; 31
    60f6:	0f be       	out	0x3f, r0	; 63
    60f8:	08 95       	ret

Disassembly of section .text.avrlibc:

000064ae <eeprom_update_dword>:
    64ae:	03 96       	adiw	r24, 0x03	; 3
    64b0:	27 2f       	mov	r18, r23
    64b2:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <eeprom_update_r18>
    64b6:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <eeprom_update_byte>
    64ba:	25 2f       	mov	r18, r21
    64bc:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <eeprom_update_r18>
    64c0:	24 2f       	mov	r18, r20
    64c2:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

000068ae <eeprom_update_word>:
    68ae:	01 96       	adiw	r24, 0x01	; 1
    68b0:	27 2f       	mov	r18, r23
    68b2:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <eeprom_update_r18>
    68b6:	0c 94 6b 30 	jmp	0x60d6	; 0x60d6 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006266 <__mulsi3>:
    6266:	db 01       	movw	r26, r22
    6268:	8f 93       	push	r24
    626a:	9f 93       	push	r25
    626c:	0e 94 8f 32 	call	0x651e	; 0x651e <__muluhisi3>
    6270:	bf 91       	pop	r27
    6272:	af 91       	pop	r26
    6274:	a2 9f       	mul	r26, r18
    6276:	80 0d       	add	r24, r0
    6278:	91 1d       	adc	r25, r1
    627a:	a3 9f       	mul	r26, r19
    627c:	90 0d       	add	r25, r0
    627e:	b2 9f       	mul	r27, r18
    6280:	90 0d       	add	r25, r0
    6282:	11 24       	eor	r1, r1
    6284:	08 95       	ret

Disassembly of section .text.libgcc.div:

000055fc <__udivmodsi4>:
    55fc:	a1 e2       	ldi	r26, 0x21	; 33
    55fe:	1a 2e       	mov	r1, r26
    5600:	aa 1b       	sub	r26, r26
    5602:	bb 1b       	sub	r27, r27
    5604:	fd 01       	movw	r30, r26
    5606:	0d c0       	rjmp	.+26     	; 0x5622 <__udivmodsi4_ep>

00005608 <__udivmodsi4_loop>:
    5608:	aa 1f       	adc	r26, r26
    560a:	bb 1f       	adc	r27, r27
    560c:	ee 1f       	adc	r30, r30
    560e:	ff 1f       	adc	r31, r31
    5610:	a2 17       	cp	r26, r18
    5612:	b3 07       	cpc	r27, r19
    5614:	e4 07       	cpc	r30, r20
    5616:	f5 07       	cpc	r31, r21
    5618:	20 f0       	brcs	.+8      	; 0x5622 <__udivmodsi4_ep>
    561a:	a2 1b       	sub	r26, r18
    561c:	b3 0b       	sbc	r27, r19
    561e:	e4 0b       	sbc	r30, r20
    5620:	f5 0b       	sbc	r31, r21

00005622 <__udivmodsi4_ep>:
    5622:	66 1f       	adc	r22, r22
    5624:	77 1f       	adc	r23, r23
    5626:	88 1f       	adc	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	1a 94       	dec	r1
    562c:	69 f7       	brne	.-38     	; 0x5608 <__udivmodsi4_loop>
    562e:	60 95       	com	r22
    5630:	70 95       	com	r23
    5632:	80 95       	com	r24
    5634:	90 95       	com	r25
    5636:	9b 01       	movw	r18, r22
    5638:	ac 01       	movw	r20, r24
    563a:	bd 01       	movw	r22, r26
    563c:	cf 01       	movw	r24, r30
    563e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000651e <__muluhisi3>:
    651e:	0e 94 8e 31 	call	0x631c	; 0x631c <__umulhisi3>
    6522:	a5 9f       	mul	r26, r21
    6524:	90 0d       	add	r25, r0
    6526:	b4 9f       	mul	r27, r20
    6528:	90 0d       	add	r25, r0
    652a:	a4 9f       	mul	r26, r20
    652c:	80 0d       	add	r24, r0
    652e:	91 1d       	adc	r25, r1
    6530:	11 24       	eor	r1, r1
    6532:	08 95       	ret

Disassembly of section .text.libgcc:

0000691e <__xload_1>:
    691e:	57 fd       	sbrc	r21, 7
    6920:	60 81       	ld	r22, Z
    6922:	57 ff       	sbrs	r21, 7
    6924:	64 91       	lpm	r22, Z
    6926:	08 95       	ret
