
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00006b2d  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000772  00800100  00800100  00006b2d  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00006b2d  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00006b88  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c18  00000000  00000000  00006bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012725  00000000  00000000  00007810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034a2  00000000  00000000  00019f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b83  00000000  00000000  0001d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f94  00000000  00000000  00023f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000152a  00000000  00000000  00025ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000074cb  00000000  00000000  0002741a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0002e8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000069bc  000069bc  00006b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  000066a0  000066a0  000067f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00006528  00006528  0000667c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  000066ae  000066ae  00006802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  0000653c  0000653c  00006690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000066bc  000066bc  00006810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00006550  00006550  000066a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  000066ca  000066ca  0000681e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00006564  00006564  000066b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  000066d8  000066d8  0000682c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00006578  00006578  000066cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00006904  00006904  00006a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  000057dc  000057dc  00005930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  0000658c  0000658c  000066e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  0000690c  0000690c  00006a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00006914  00006914  00006a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  0000691c  0000691c  00006a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  000066e6  000066e6  0000683a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  00006896  00006896  000069ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  000061d2  000061d2  00006326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00006974  00006974  00006ac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  000069c0  000069c0  00006b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00004ea6  00004ea6  00004ffa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800f7b  00800f7b  00006b2d  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  00005ba6  00005ba6  00005cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  000067e2  000067e2  00006936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  000067ee  000067ee  00006942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00004ef4  00004ef4  00005048  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800f7d  00800f7d  00006b2d  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  000061f2  000061f2  00006346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  00006924  00006924  00006a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  0000697a  0000697a  00006ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006212  00006212  00006366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  000068a0  000068a0  000069f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  00004d0c  00004d0c  00004e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  000058cc  000058cc  00005a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  000041e6  000041e6  0000433a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800f95  00800f95  00006b2d  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800f96  00800f96  00006b2d  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800f4a  00800f4a  00006b2d  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  00004fde  00004fde  00005132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  00004afc  00004afc  00004c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  000065a0  000065a0  000066f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  0000640c  0000640c  00006560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00005c42  00005c42  00005d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  00005d3c  00005d3c  00005e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006604  00006604  00006758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  000052d0  000052d0  00005424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  0000561a  0000561a  0000576e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006232  00006232  00006386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  000065b4  000065b4  00006708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  000065c8  000065c8  0000671c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  00006670  00006670  000067c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00005eec  00005eec  00006040  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  00005818  00005818  0000596c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000003c  00005854  00005854  000059a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000006e  000046fc  000046fc  00004850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  000066f4  000066f4  00006848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  000068aa  000068aa  000069fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00005ffa  00005ffa  0000614e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  000053f0  000053f0  00005544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000004a  000051f2  000051f2  00005346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  00004534  00004534  00004688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800f97  00800f97  00006b2d  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800f98  00800f98  00006b2d  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000001  00800f99  00800f99  00006b2d  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000001  00800f9a  00800f9a  00006b2d  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  00005f1a  00005f1a  0000606e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  00005890  00005890  000059e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 0000008a  00004052  00004052  000041a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  00006702  00006702  00006856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  00006710  00006710  00006864  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  000068b4  000068b4  00006a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  00006022  00006022  00006176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000004a  0000523c  0000523c  00005390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  000045a8  000045a8  000046fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800f9b  00800f9b  00006b2d  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800f9c  00800f9c  00006b2d  2**0
                  ALLOC
 92 .bss.rx_buffer 00000096  00800dea  00800dea  00006b2d  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000001  00800f9d  00800f9d  00006b2d  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000001  00800f9e  00800f9e  00006b2d  2**0
                  ALLOC
 95 .bss.tx_buffer 000000c8  00800d22  00800d22  00006b2d  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  0000671e  0000671e  00006872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  000068be  000068be  00006a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  00005906  00005906  00005a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00003d6c  00003d6c  00003ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  0000645a  0000645a  000065ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  0000497e  0000497e  00004ad2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  000065dc  000065dc  00006730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  00006364  00006364  000064b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  00004c60  00004c60  00004db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  00005436  00005436  0000558a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  000068c8  000068c8  00006a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  00006292  00006292  000063e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  0000692c  0000692c  00006a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006616  00006616  0000676a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  0000565c  0000565c  000057b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800f9f  00800f9f  00006b2d  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800fa0  00800fa0  00006b2d  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800f7f  00800f7f  00006b2d  2**0
                  ALLOC
114 .bss._data    00000002  00800f81  00800f81  00006b2d  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800f83  00800f83  00006b2d  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800f5f  000069c9  00006b1d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800f63  000069cd  00006b21  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800f67  000069d1  00006b25  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  000064ba  000064ba  0000660e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  000064d0  000064d0  00006624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  000064e6  000064e6  0000663a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  00005940  00005940  00005a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  00005d6c  00005d6c  00005ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  0000597a  0000597a  00005ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00005d9c  00005d9c  00005ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  000059b4  000059b4  00005b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00005dcc  00005dcc  00005f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  0000672c  0000672c  00006880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  000062b0  000062b0  00006404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  0000673a  0000673a  0000688e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  000062ce  000062ce  00006422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  00006748  00006748  0000689c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  000062ec  000062ec  00006440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  00006756  00006756  000068aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  00006680  00006680  000067d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  000067fa  000067fa  0000694e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  00006806  00006806  0000695a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  00006812  00006812  00006966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  0000681e  0000681e  00006972  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  0000682a  0000682a  0000697e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  00006836  00006836  0000698a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.cb_blink 00000006  00006980  00006980  00006ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.blink   0000004c  0000502a  0000502a  0000517e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.err_code 00000038  000059ee  000059ee  00005b42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.LED_start_try_join 0000000e  00006764  00006764  000068b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.LED_stop_try_join 00000010  00006690  00006690  000067e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_join_success 00000040  000056e0  000056e0  00005834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_join_denied 00000008  00006934  00006934  00006a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_conf_err 00000008  0000693c  0000693c  00006a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_fatal_err 00000008  00006944  00006944  00006a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .bss.cbPointer 00000001  00800fa1  00800fa1  00006b2d  2**0
                  ALLOC
152 .progmemx.data 00000058  00000814  00000814  00000968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
153 .text.parse_err 00000058  00004bb0  00004bb0  00004d04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.JN_join_network 000002a4  00001646  00001646  0000179a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.set_block_uplink 00000018  00006472  00006472  000065c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.cb_block_uplink 0000001c  00006380  00006380  000064d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.LM_join_network 00000006  00006986  00006986  00006ada  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.LM_send_uplink 0000002e  00005f48  00005f48  0000609c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_put_to_sleep 00000012  00006628  00006628  0000677c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_wake_up 00000006  0000698c  0000698c  00006ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_is_free 0000000a  000068d2  000068d2  00006a26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_reset_module 00000006  00006992  00006992  00006ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_forward_msg 00000006  00006998  00006998  00006aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_send_break 00000006  0000699e  0000699e  00006af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .bss.subPointer 00000001  00800fa2  00800fa2  00006b2d  2**0
                  ALLOC
166 .bss.busy     00000001  00800fa3  00800fa3  00006b2d  2**0
                  ALLOC
167 .bss.cnt      00000001  00800fa4  00800fa4  00006b2d  2**0
                  ALLOC
168 .progmemx.data 00000073  000007a1  000007a1  000008f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
169 .text.tohex   00000084  00004162  00004162  000042b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.attach_ending 0000001c  0000639c  0000639c  000064f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.cmd_with_ending 00000032  00005c74  00005c74  00005dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.sys_sleep_cmd 0000005e  000049e4  000049e4  00004b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.mac_set_parameter 0000004e  00004f42  00004f42  00005096  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.mac_set_deveui 00000048  00005318  00005318  0000546c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_appeui 00000048  00005360  00005360  000054b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_appkey 00000048  000053a8  000053a8  000054fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_ADR 00000030  00005dfc  00005dfc  00005f50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_tx_confirmed 000000ac  00003990  00003990  00003ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .progmemx.data 00000038  0000086c  0000086c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
180 .text.decode_tx_response 00000068  000048ae  000048ae  00004a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.SU_send_uplink 000000f8  00002fe2  00002fe2  00003136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.cb_counter 00000014  000065f0  000065f0  00006744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SC_put_to_sleep 00000038  00005a26  00005a26  00005b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .progmemx.data 00000003  000008c9  000008c9  00000a1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
185 .text.SC_wake_up 0000006e  0000476a  0000476a  000048be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .bss.eventPointer 00000001  00800fa5  00800fa5  00006b2d  2**0
                  ALLOC
187 .bss.cnt      00000002  00800f85  00800f85  00006b2d  2**0
                  ALLOC
188 .text.cb_watchdog_counter 0000000c  00006842  00006842  00006996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.util_setPendingStates 0000000c  0000684e  0000684e  000069a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.util_setMatchCase 0000000c  0000685a  0000685a  000069ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_strbeginswith 0000004a  00005286  00005286  000053da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_matchMessage 0000005c  00004aa0  00004aa0  00004bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .progmemx.data 00000013  000008a4  000008a4  000009f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
194 .text.util_reset_module 00000046  0000547c  0000547c  000055d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.util_lora_forward_msg 00000078  000042dc  000042dc  00004430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.util_send_break 00000008  0000694c  0000694c  00006aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .bss.wd_cb_pointer 00000001  00800fa6  00800fa6  00006b2d  2**0
                  ALLOC
198 .bss.wd_cnt   00000001  00800fa7  00800fa7  00006b2d  2**0
                  ALLOC
199 .text.get_group_id 00000006  000069a4  000069a4  00006af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.set_group_id 00000006  000069aa  000069aa  00006afe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.MRPP_init_group 00000032  00005ca6  00005ca6  00005dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  0000461c  0000461c  00004770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  00006106  00006106  0000625a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00003e02  00003e02  00003f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  00006866  00006866  000069ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  00006128  00006128  0000627c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  0000614a  0000614a  0000629e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  000068dc  000068dc  00006a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .bss._groupId 00000001  00800fa8  00800fa8  00006b2d  2**0
                  ALLOC
210 .text.mrpp_data_add_int16 00000092  00003f2e  00003f2e  00004082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.mrpp_data_get 00000030  00005e2c  00005e2c  00005f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.add_data_types 000000d8  0000329a  0000329a  000033ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.update_bodies 00000162  00002260  00002260  000023b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.mrpp_state_init 000001be  00001d8c  00001d8c  00001ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_get_header 000000a2  00003c28  00003c28  00003d7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_get_tail 000000a4  00003a3c  00003a3c  00003b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_set_collection 00000086  000040dc  000040dc  00004230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_is_body_ready 00000030  00005e5c  00005e5c  00005fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_all_bodies_sent 0000002a  00005fd0  00005fd0  00006124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_get_ready_body 0000011a  0000288e  0000288e  000029e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_set_body_sent 00000020  00006252  00006252  000063a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.mrpp_state_get_collection_address 00000036  00005ace  00005ace  00005c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.cb_cnt_time 00000030  00005e8c  00005e8c  00005fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.PUMP_start 00000024  0000609a  0000609a  000061ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.PUMP_is_done 0000001c  000063b8  000063b8  0000650c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .bss.eventPointer 00000001  00800fa9  00800fa9  00006b2d  2**0
                  ALLOC
227 .bss.cnt      00000002  00800f87  00800f87  00006b2d  2**0
                  ALLOC
228 .bss._seconds 00000002  00800f89  00800f89  00006b2d  2**0
                  ALLOC
229 .text.datetime_to_BCD 00000100  00002ce4  00002ce4  00002e38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.RTC_set_clock_out 00000050  00004e06  00004e06  00004f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_clear_wake_up_interrupt 00000034  00005bda  00005bda  00005d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.RTC_get_current_time 00000140  000023c2  000023c2  00002516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .rodata       00000005  00800f5a  000069c4  00006b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
234 .text.RTC_set_wake_up_interrupt_minutes 000000c4  000035e8  000035e8  0000373c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.RTC_set_current_time 00000068  00004916  00004916  00004a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.RTC_datetime_to_ts 00000122  0000276c  0000276c  000028c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000008ce  000008ce  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
238 .text.bytes_2_uint 0000001a  00006426  00006426  0000657a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.init_measurement 00000038  00005a5e  00005a5e  00005bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.validate_data 00000032  00005cd8  00005cd8  00005e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.read_value 000000a2  00003cca  00003cca  00003e1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.vect_SCD_do_sample 00000046  000054c2  000054c2  00005616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_on 00000022  0000616c  0000616c  000062c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_sensor_off 00000008  00006954  00006954  00006aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_init_sampling 00000022  0000618e  0000618e  000062e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_deinit_sampling 0000000e  00006772  00006772  000068c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_start_sampling 0000000a  000068e6  000068e6  00006a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_is_sampling_done 0000001c  000063d4  000063d4  00006528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.SCD30_get_reading 0000001a  00006440  00006440  00006594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .bss.cntSamples 00000002  00800f8b  00800f8b  00006b2d  2**0
                  ALLOC
251 .bss._data    00000002  00800f8d  00800f8d  00006b2d  2**0
                  ALLOC
252 .bss._nSamples 00000002  00800f8f  00800f8f  00006b2d  2**0
                  ALLOC
253 .progmemx.data.READ_DATA_CMD 00000002  000008cc  000008cc  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
254 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000008bf  000008bf  00000a13  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
255 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000008c4  000008c4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
256 .text.parse_cmd 00000030  00005ebc  00005ebc  00006010  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.validate_cmd 00000056  00004cb6  00004cb6  00004e0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .progmemx.data 000000ac  000005c9  000005c9  0000071d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
259 .text.CONF_enter 0000013c  00002502  00002502  00002656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 .progmemx.data 00000081  00000720  00000720  00000874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
261 .text.CON_RN2483_parse 0000006c  000047d8  000047d8  0000492c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.CON_RN2483 00000166  000020fa  000020fa  0000224e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.CONNECT 00000054  00004d60  00004d60  00004eb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .progmemx.data 00000188  00000441  00000441  00000595  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
265 .text.read_cols 000000bc  000036ac  000036ac  00003800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.read_time 00000092  00003fc0  00003fc0  00004114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.write_deveui 00000078  00004354  00004354  000044a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.write_appeui 00000078  000043cc  000043cc  00004520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.write_appkey 00000078  00004444  00004444  00004598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.write_PPM_factor 0000004c  00005076  00005076  000051ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.write_RRL 0000004c  000050c2  000050c2  00005216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.write_VCC 0000004c  0000510e  0000510e  00005262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.get_time_par 00000034  00005c0e  00005c0e  00005d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.write_cols 0000012e  0000263e  0000263e  00002792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.write_heat_up 0000004c  0000515a  0000515a  000052ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_air_pump 00000050  00004e56  00004e56  00004faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_sp_interval 0000004c  000051a6  000051a6  000052fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_reset 000000e2  000030da  000030da  0000322e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.write_time 000000fe  00002ee4  00002ee4  00003038  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.handle_read 000002a2  000018ea  000018ea  00001a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.handle_write 00000200  00001b8c  00001b8c  00001ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .bss.arg      00000050  00800e80  00800e80  00006b2d  2**0
                  ALLOC
283 .progmemx.data 000000ab  00000675  00000675  000007c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
284 .text.handle_methane 0000011a  000029a8  000029a8  00002afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.handle_co2 000000a4  00003ae0  00003ae0  00003c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.handle_pump 000000a4  00003b84  00003b84  00003cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.handle_sample 000000b8  00003824  00003824  00003978  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.init_methane_SCD30 00000028  0000604a  0000604a  0000619e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .bss.par      00000014  00800f14  00800f14  00006b2d  2**0
                  ALLOC
290 .text.count_parameters 00000052  00004db4  00004db4  00004f08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.par_index 00000070  0000468c  0000468c  000047e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.get_parameter 00000096  00003e98  00003e98  00003fec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.decode_stage_response 00000016  000064fc  000064fc  00006650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.decode_join_response 0000001c  000063f0  000063f0  00006544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.decode_header_tail_response 0000001e  0000630a  0000630a  0000645e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.read_eeprom 0000005a  00004b56  00004b56  00004caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.join_lora 00000012  0000663a  0000663a  0000678e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.set_wakeup 0000000a  000068f0  000068f0  00006a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.send_header 0000003e  00005760  00005760  000058b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.send_body 00000040  00005720  00005720  00005874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.decode_body_response 00000028  00006072  00006072  000061c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.send_tail 0000003e  0000579e  0000579e  000058f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .text.send_msg 00000018  0000648a  0000648a  000065de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
304 .progmemx.data 000001dd  00000264  00000264  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
305 .text.stage_0 000000d4  00003372  00003372  000034c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.stage_1 00000100  00002de4  00002de4  00002f38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.stage_2 0000011a  00002ac2  00002ac2  00002c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.stage_3 00000108  00002bdc  00002bdc  00002d30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .text.MAINPG_start 00000356  00001014  00001014  00001168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
310 .bss.fromSleep 00000001  00800faa  00800faa  00006b2d  2**0
                  ALLOC
311 .bss.samplingProcessInterval 00000001  00800fab  00800fab  00006b2d  2**0
                  ALLOC
312 .data.methHeatUpTime 00000001  00800fac  000008cf  00000a23  2**0
                  CONTENTS, ALLOC, LOAD, DATA
313 .data.airPumpTime 00000002  00800f91  000069d5  00006b29  2**0
                  CONTENTS, ALLOC, LOAD, DATA
314 .bss.ppmx     00000004  00800f6b  00800f6b  00006b2d  2**0
                  ALLOC
315 .bss.rrlx     00000004  00800f6f  00800f6f  00006b2d  2**0
                  ALLOC
316 .bss.vccx     00000004  00800f73  00800f73  00006b2d  2**0
                  ALLOC
317 .bss.cols     00000023  00800ed0  00800ed0  00006b2d  2**0
                  ALLOC
318 .bss.appkey   00000021  00800ef3  00800ef3  00006b2d  2**0
                  ALLOC
319 .bss.appeui   00000011  00800f28  00800f28  00006b2d  2**0
                  ALLOC
320 .bss.deveui   00000011  00800f39  00800f39  00006b2d  2**0
                  ALLOC
321 .bss.dt       00000006  00800f54  00800f54  00006b2d  2**0
                  ALLOC
322 .bss.ts       00000004  00800f77  00800f77  00006b2d  2**0
                  ALLOC
323 .bss.meth_data 00000258  00800872  00800872  00006b2d  2**0
                  ALLOC
324 .bss.co2_data 00000258  00800aca  00800aca  00006b2d  2**0
                  ALLOC
325 .data.bodyIndex 00000002  00800f93  000069d7  00006b2b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
326 .bss.state_s3 00000001  00800fad  00800fad  00006b2d  2**0
                  ALLOC
327 .bss.state_s2 00000001  00800fae  00800fae  00006b2d  2**0
                  ALLOC
328 .bss.state_s1 00000001  00800faf  00800faf  00006b2d  2**0
                  ALLOC
329 .bss.state_s0 00000001  00800fb0  00800fb0  00006b2d  2**0
                  ALLOC
330 .text.calc_crc8 00000036  00005b04  00005b04  00005c58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text.get_decimal 000000b4  000038dc  000038dc  00003a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text.str2flaot 0000004e  00004f90  00004f90  000050e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.is_float 00000058  00004c08  00004c08  00004d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.avrlibc.fplib 0000000e  00006780  00006780  000068d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.avrlibc.fplib 000000ce  0000351a  0000351a  0000366e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc.fplib 00000008  0000695c  0000695c  00006ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc.fplib 000000de  000031bc  000031bc  00003310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc.fplib 0000005e  00004a42  00004a42  00004b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc.fplib 0000007a  00004262  00004262  000043b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .text.avrlibc.fplib 0000000c  00006872  00006872  000069c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text.avrlibc.fplib 00000006  000069b0  000069b0  00006b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.avrlibc.fplib 0000000e  0000678e  0000678e  000068e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.avrlibc.fplib 0000000e  0000679c  0000679c  000068f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.avrlibc.fplib 00000022  000061b0  000061b0  00006304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 00000044  0000554e  0000554e  000056a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 0000000e  000067aa  000067aa  000068fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 00000008  00006964  00006964  00006ab8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text.avrlibc.fplib 000000d4  00003446  00003446  0000359a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .progmemx.data 00000008  000008b7  000008b7  00000a0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
350 .text.avrlibc 00000744  000008d0  000008d0  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.libgcc  0000000c  0000687e  0000687e  000069d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.libgcc.mul 0000001e  00006328  00006328  0000647c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.libgcc.prologue 00000038  00005a96  00005a96  00005bea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.libgcc.prologue 00000036  00005b3a  00005b3a  00005c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc 00000008  0000696c  0000696c  00006ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc 0000000e  000067b8  000067b8  0000690c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc 000002dc  0000136a  0000136a  000014be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc 000001b0  00001f4a  00001f4a  0000209e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc 00000012  0000664c  0000664c  000067a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc 00000032  00005d0a  00005d0a  00005e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc 0000002e  00005f76  00005f76  000060ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc 00000042  0000569e  0000569e  000057f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc 0000006a  00004844  00004844  00004998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.avrlibc 0000002c  00005fa4  00005fa4  000060f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.avrlibc 0000001e  00006346  00006346  0000649a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.avrlibc 00000036  00005b70  00005b70  00005cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.avrlibc 00000078  000044bc  000044bc  00004610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.avrlibc 00000046  00005508  00005508  0000565c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 000000bc  00003768  00003768  000038bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 00000006  000069b6  000069b6  00006b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 00000024  000060be  000060be  00006212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 00000012  0000665e  0000665e  000067b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 0000000e  000067c6  000067c6  0000691a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 0000000e  000067d4  000067d4  00006928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000044  00005592  00005592  000056e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 00000024  000060e2  000060e2  00006236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 00000018  000064a2  000064a2  000065f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.avrlibc 0000000c  0000688a  0000688a  000069de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.libgcc.mul 00000020  00006272  00006272  000063c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.libgcc.div 00000044  000055d6  000055d6  0000572a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.libgcc.mul 00000016  00006512  00006512  00006666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 .text.libgcc  0000000a  000068fa  000068fa  00006a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
   8:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
   c:	0c 94 c6 32 	jmp	0x658c	; 0x658c <__vector_3>
  10:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  14:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  18:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  1c:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  20:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  24:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__vector_9>
  28:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  2c:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  30:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  34:	0c 94 7a 27 	jmp	0x4ef4	; 0x4ef4 <__vector_13>
  38:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  3c:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  40:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <__vector_16>
  44:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  48:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  4c:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  50:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <__vector_20>
  54:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  58:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <__vector_22>
  5c:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  60:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  64:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  68:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  6c:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  70:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__vector_28>
  74:	0c 94 de 34 	jmp	0x69bc	; 0x69bc <__bad_interrupt>
  78:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__vector_30>
  7c:	41 0b       	sbc	r20, r17
  7e:	51 0c       	add	r5, r1
  80:	60 0b       	sbc	r22, r16
  82:	7e 0b       	sbc	r23, r30
  84:	9e 0b       	sbc	r25, r30
  86:	be 0b       	sbc	r27, r30
  88:	de 0b       	sbc	r29, r30
  8a:	fe 0b       	sbc	r31, r30
  8c:	1c 0c       	add	r1, r12
  8e:	3a 0c       	add	r3, r10
  90:	4c 0c       	add	r4, r12
  92:	62 0c       	add	r6, r2
  94:	64 0c       	add	r6, r4
  96:	9c 12       	cpse	r9, r28
  98:	b3 12       	cpse	r11, r19
  9a:	0f 13       	cpse	r16, r31
  9c:	bc 12       	cpse	r11, r28
  9e:	18 13       	cpse	r17, r24
  a0:	01 13       	cpse	r16, r17
  a2:	08 13       	cpse	r16, r24
  a4:	cc 12       	cpse	r12, r28
  a6:	d8 12       	cpse	r13, r24
  a8:	e4 12       	cpse	r14, r20
  aa:	ee 12       	cpse	r14, r30
  ac:	fa 12       	cpse	r15, r26
  ae:	8f 10       	cpse	r8, r15
  b0:	9c 10       	cpse	r9, r12
  b2:	a6 10       	cpse	r10, r6
  b4:	ac 10       	cpse	r10, r12
  b6:	db 10       	cpse	r13, r11
  b8:	06 11       	cpse	r16, r6
  ba:	1f 11       	cpse	r17, r15
  bc:	35 08       	sbc	r3, r5
  be:	56 08       	sbc	r5, r6
  c0:	71 08       	sbc	r7, r1
  c2:	82 08       	sbc	r8, r2
  c4:	96 08       	sbc	r9, r6
  c6:	90 09       	sbc	r25, r0
  c8:	8b 08       	sbc	r8, r11
  ca:	ce 08       	sbc	r12, r14
  cc:	e5 08       	sbc	r14, r5
  ce:	da 08       	sbc	r13, r10
  d0:	a9 08       	sbc	r10, r9
  d2:	f0 08       	sbc	r15, r0
  d4:	fc 08       	sbc	r15, r12
  d6:	0e 09       	sbc	r16, r14
  d8:	16 09       	sbc	r17, r6
  da:	1e 09       	sbc	r17, r14
  dc:	26 09       	sbc	r18, r6
  de:	2e 09       	sbc	r18, r14
  e0:	4a 09       	sbc	r20, r10
  e2:	51 09       	sbc	r21, r1
  e4:	63 09       	sbc	r22, r3
  e6:	82 09       	sbc	r24, r2
  e8:	9e 09       	sbc	r25, r14
  ea:	a9 09       	sbc	r26, r9

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0f 5a       	subi	r16, 0xAF	; 175
  f0:	80 0f       	add	r24, r16
  f2:	5a 0f       	add	r21, r26
  f4:	6b 00       	.word	0x006b	; ????
  f6:	69 c4       	rjmp	.+2258   	; 0x9ca <vfprintf+0xfa>
  f8:	0f 6b       	ori	r16, 0xBF	; 191
  fa:	0f 91       	pop	r16
  fc:	80 0f       	add	r24, r16
  fe:	91 0f       	add	r25, r17
 100:	95 00       	.word	0x0095	; ????
 102:	69 d5       	rcall	.+2770   	; 0xbd6 <vfprintf+0x306>
 104:	0f 95 0f ac 	call	0x43581e	; 0x43581e <__TEXT_REGION_LENGTH__+0x42581e>
 108:	80 0f       	add	r24, r16
 10a:	ac 0f       	add	r26, r28
 10c:	ad 00       	.word	0x00ad	; ????
 10e:	08 cf       	rjmp	.-496    	; 0xffffff20 <__eeprom_end+0xff7eff20>
 110:	0f ad       	ldd	r16, Y+63	; 0x3f
 112:	0f b1       	in	r16, 0x0f	; 15
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <vfprintf+0x1a0>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 83 2c 	call	0x5906	; 0x5906 <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

000069bc <__bad_interrupt>:
    69bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

000066a0 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    66a0:	81 b1       	in	r24, 0x01	; 1
    66a2:	88 60       	ori	r24, 0x08	; 8
    66a4:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    66a6:	82 b1       	in	r24, 0x02	; 2
    66a8:	87 7f       	andi	r24, 0xF7	; 247
    66aa:	82 b9       	out	0x02, r24	; 2
    66ac:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00006528 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    6528:	88 23       	and	r24, r24
    652a:	21 f0       	breq	.+8      	; 0x6534 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    652c:	82 b1       	in	r24, 0x02	; 2
    652e:	88 60       	ori	r24, 0x08	; 8
    6530:	82 b9       	out	0x02, r24	; 2
    6532:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    6534:	82 b1       	in	r24, 0x02	; 2
    6536:	87 7f       	andi	r24, 0xF7	; 247
    6538:	82 b9       	out	0x02, r24	; 2
    653a:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000066ae <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    66ae:	81 b1       	in	r24, 0x01	; 1
    66b0:	80 62       	ori	r24, 0x20	; 32
    66b2:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    66b4:	82 b1       	in	r24, 0x02	; 2
    66b6:	8f 7d       	andi	r24, 0xDF	; 223
    66b8:	82 b9       	out	0x02, r24	; 2
    66ba:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

0000653c <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    653c:	88 23       	and	r24, r24
    653e:	21 f0       	breq	.+8      	; 0x6548 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    6540:	82 b1       	in	r24, 0x02	; 2
    6542:	80 62       	ori	r24, 0x20	; 32
    6544:	82 b9       	out	0x02, r24	; 2
    6546:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    6548:	82 b1       	in	r24, 0x02	; 2
    654a:	8f 7d       	andi	r24, 0xDF	; 223
    654c:	82 b9       	out	0x02, r24	; 2
    654e:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000066bc <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    66bc:	81 b1       	in	r24, 0x01	; 1
    66be:	80 61       	ori	r24, 0x10	; 16
    66c0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    66c2:	82 b1       	in	r24, 0x02	; 2
    66c4:	8f 7e       	andi	r24, 0xEF	; 239
    66c6:	82 b9       	out	0x02, r24	; 2
    66c8:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00006550 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    6550:	88 23       	and	r24, r24
    6552:	21 f0       	breq	.+8      	; 0x655c <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    6554:	82 b1       	in	r24, 0x02	; 2
    6556:	80 61       	ori	r24, 0x10	; 16
    6558:	82 b9       	out	0x02, r24	; 2
    655a:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    655c:	82 b1       	in	r24, 0x02	; 2
    655e:	8f 7e       	andi	r24, 0xEF	; 239
    6560:	82 b9       	out	0x02, r24	; 2
    6562:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

000066ca <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    66ca:	8a b1       	in	r24, 0x0a	; 10
    66cc:	80 61       	ori	r24, 0x10	; 16
    66ce:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    66d0:	8b b1       	in	r24, 0x0b	; 11
    66d2:	8f 7e       	andi	r24, 0xEF	; 239
    66d4:	8b b9       	out	0x0b, r24	; 11
    66d6:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00006564 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    6564:	88 23       	and	r24, r24
    6566:	21 f0       	breq	.+8      	; 0x6570 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    6568:	8b b1       	in	r24, 0x0b	; 11
    656a:	80 61       	ori	r24, 0x10	; 16
    656c:	8b b9       	out	0x0b, r24	; 11
    656e:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    6570:	8b b1       	in	r24, 0x0b	; 11
    6572:	8f 7e       	andi	r24, 0xEF	; 239
    6574:	8b b9       	out	0x0b, r24	; 11
    6576:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

000066d8 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    66d8:	81 b1       	in	r24, 0x01	; 1
    66da:	80 68       	ori	r24, 0x80	; 128
    66dc:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    66de:	82 b1       	in	r24, 0x02	; 2
    66e0:	8f 77       	andi	r24, 0x7F	; 127
    66e2:	82 b9       	out	0x02, r24	; 2
    66e4:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00006578 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    6578:	88 23       	and	r24, r24
    657a:	21 f0       	breq	.+8      	; 0x6584 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    657c:	82 b1       	in	r24, 0x02	; 2
    657e:	80 68       	ori	r24, 0x80	; 128
    6580:	82 b9       	out	0x02, r24	; 2
    6582:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6584:	82 b1       	in	r24, 0x02	; 2
    6586:	8f 77       	andi	r24, 0x7F	; 127
    6588:	82 b9       	out	0x02, r24	; 2
    658a:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00006904 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    6904:	82 b1       	in	r24, 0x02	; 2
    6906:	80 58       	subi	r24, 0x80	; 128
    6908:	82 b9       	out	0x02, r24	; 2
    690a:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

000057dc <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    57dc:	84 b1       	in	r24, 0x04	; 4
    57de:	8b 7f       	andi	r24, 0xFB	; 251
    57e0:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    57e2:	e9 e6       	ldi	r30, 0x69	; 105
    57e4:	f0 e0       	ldi	r31, 0x00	; 0
    57e6:	80 81       	ld	r24, Z
    57e8:	8f 7e       	andi	r24, 0xEF	; 239
    57ea:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    57ec:	80 81       	ld	r24, Z
    57ee:	80 62       	ori	r24, 0x20	; 32
    57f0:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    57f2:	8d b3       	in	r24, 0x1d	; 29
    57f4:	84 60       	ori	r24, 0x04	; 4
    57f6:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    57f8:	83 b7       	in	r24, 0x33	; 51
    57fa:	81 7f       	andi	r24, 0xF1	; 241
    57fc:	84 60       	ori	r24, 0x04	; 4
    57fe:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    5800:	83 b7       	in	r24, 0x33	; 51
    5802:	81 60       	ori	r24, 0x01	; 1
    5804:	83 bf       	out	0x33, r24	; 51
	sei();
    5806:	78 94       	sei
	sleep_cpu();
    5808:	88 95       	sleep
	sleep_disable();
    580a:	83 b7       	in	r24, 0x33	; 51
    580c:	8e 7f       	andi	r24, 0xFE	; 254
    580e:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    5810:	8d b3       	in	r24, 0x1d	; 29
    5812:	8b 7f       	andi	r24, 0xFB	; 251
    5814:	8d bb       	out	0x1d, r24	; 29
    5816:	08 95       	ret

Disassembly of section .text.__vector_3:

0000658c <__vector_3>:
}

ISR(INT2_vect){
    658c:	1f 92       	push	r1
    658e:	0f 92       	push	r0
    6590:	0f b6       	in	r0, 0x3f	; 63
    6592:	0f 92       	push	r0
    6594:	11 24       	eor	r1, r1
	
}
    6596:	0f 90       	pop	r0
    6598:	0f be       	out	0x3f, r0	; 63
    659a:	0f 90       	pop	r0
    659c:	1f 90       	pop	r1
    659e:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000690c <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    690c:	84 b1       	in	r24, 0x04	; 4
    690e:	80 61       	ori	r24, 0x10	; 16
    6910:	84 b9       	out	0x04, r24	; 4
    6912:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00006914 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    6914:	85 b1       	in	r24, 0x05	; 5
    6916:	8f 7e       	andi	r24, 0xEF	; 239
    6918:	85 b9       	out	0x05, r24	; 5
    691a:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000691c <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    691c:	85 b1       	in	r24, 0x05	; 5
    691e:	80 61       	ori	r24, 0x10	; 16
    6920:	85 b9       	out	0x05, r24	; 5
    6922:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

000066e6 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    66e6:	87 b1       	in	r24, 0x07	; 7
    66e8:	8f 7b       	andi	r24, 0xBF	; 191
    66ea:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    66ec:	88 b1       	in	r24, 0x08	; 8
    66ee:	8f 7b       	andi	r24, 0xBF	; 191
    66f0:	88 b9       	out	0x08, r24	; 8
    66f2:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00006896 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    6896:	86 b1       	in	r24, 0x06	; 6
    6898:	86 fb       	bst	r24, 6
    689a:	88 27       	eor	r24, r24
    689c:	80 f9       	bld	r24, 0
    689e:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

000061d2 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    61d2:	92 e0       	ldi	r25, 0x02	; 2
    61d4:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    61d6:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    61d8:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    61da:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    61dc:	ee e6       	ldi	r30, 0x6E	; 110
    61de:	f0 e0       	ldi	r31, 0x00	; 0
    61e0:	80 81       	ld	r24, Z
    61e2:	82 60       	ori	r24, 0x02	; 2
    61e4:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    61e6:	78 94       	sei
	
	//Set callback
	_cb=cb;
    61e8:	70 93 7c 0f 	sts	0x0F7C, r23	; 0x800f7c <_cb+0x1>
    61ec:	60 93 7b 0f 	sts	0x0F7B, r22	; 0x800f7b <_cb>
    61f0:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00006974 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    6974:	86 e0       	ldi	r24, 0x06	; 6
    6976:	85 bd       	out	0x25, r24	; 37
    6978:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

000069c0 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    69c0:	15 bc       	out	0x25, r1	; 37
    69c2:	08 95       	ret

Disassembly of section .text.__vector_16:

00004ea6 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    4ea6:	1f 92       	push	r1
    4ea8:	0f 92       	push	r0
    4eaa:	0f b6       	in	r0, 0x3f	; 63
    4eac:	0f 92       	push	r0
    4eae:	11 24       	eor	r1, r1
    4eb0:	2f 93       	push	r18
    4eb2:	3f 93       	push	r19
    4eb4:	4f 93       	push	r20
    4eb6:	5f 93       	push	r21
    4eb8:	6f 93       	push	r22
    4eba:	7f 93       	push	r23
    4ebc:	8f 93       	push	r24
    4ebe:	9f 93       	push	r25
    4ec0:	af 93       	push	r26
    4ec2:	bf 93       	push	r27
    4ec4:	ef 93       	push	r30
    4ec6:	ff 93       	push	r31
	_cb();
    4ec8:	e0 91 7b 0f 	lds	r30, 0x0F7B	; 0x800f7b <_cb>
    4ecc:	f0 91 7c 0f 	lds	r31, 0x0F7C	; 0x800f7c <_cb+0x1>
    4ed0:	09 95       	icall
}
    4ed2:	ff 91       	pop	r31
    4ed4:	ef 91       	pop	r30
    4ed6:	bf 91       	pop	r27
    4ed8:	af 91       	pop	r26
    4eda:	9f 91       	pop	r25
    4edc:	8f 91       	pop	r24
    4ede:	7f 91       	pop	r23
    4ee0:	6f 91       	pop	r22
    4ee2:	5f 91       	pop	r21
    4ee4:	4f 91       	pop	r20
    4ee6:	3f 91       	pop	r19
    4ee8:	2f 91       	pop	r18
    4eea:	0f 90       	pop	r0
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	0f 90       	pop	r0
    4ef0:	1f 90       	pop	r1
    4ef2:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005ba6 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5ba6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    5baa:	28 e0       	ldi	r18, 0x08	; 8
    5bac:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5bb0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    5bb4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    5bb8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    5bbc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5bc0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5bc4:	ef e6       	ldi	r30, 0x6F	; 111
    5bc6:	f0 e0       	ldi	r31, 0x00	; 0
    5bc8:	80 81       	ld	r24, Z
    5bca:	82 60       	ori	r24, 0x02	; 2
    5bcc:	80 83       	st	Z, r24
	sei();
    5bce:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5bd0:	70 93 7e 0f 	sts	0x0F7E, r23	; 0x800f7e <_cb+0x1>
    5bd4:	60 93 7d 0f 	sts	0x0F7D, r22	; 0x800f7d <_cb>
    5bd8:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000067e2 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    67e2:	e1 e8       	ldi	r30, 0x81	; 129
    67e4:	f0 e0       	ldi	r31, 0x00	; 0
    67e6:	80 81       	ld	r24, Z
    67e8:	86 60       	ori	r24, 0x06	; 6
    67ea:	80 83       	st	Z, r24
    67ec:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000067ee <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    67ee:	e1 e8       	ldi	r30, 0x81	; 129
    67f0:	f0 e0       	ldi	r31, 0x00	; 0
    67f2:	80 81       	ld	r24, Z
    67f4:	88 7f       	andi	r24, 0xF8	; 248
    67f6:	80 83       	st	Z, r24
    67f8:	08 95       	ret

Disassembly of section .text.__vector_13:

00004ef4 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    4ef4:	1f 92       	push	r1
    4ef6:	0f 92       	push	r0
    4ef8:	0f b6       	in	r0, 0x3f	; 63
    4efa:	0f 92       	push	r0
    4efc:	11 24       	eor	r1, r1
    4efe:	2f 93       	push	r18
    4f00:	3f 93       	push	r19
    4f02:	4f 93       	push	r20
    4f04:	5f 93       	push	r21
    4f06:	6f 93       	push	r22
    4f08:	7f 93       	push	r23
    4f0a:	8f 93       	push	r24
    4f0c:	9f 93       	push	r25
    4f0e:	af 93       	push	r26
    4f10:	bf 93       	push	r27
    4f12:	ef 93       	push	r30
    4f14:	ff 93       	push	r31
	_cb();
    4f16:	e0 91 7d 0f 	lds	r30, 0x0F7D	; 0x800f7d <_cb>
    4f1a:	f0 91 7e 0f 	lds	r31, 0x0F7E	; 0x800f7e <_cb+0x1>
    4f1e:	09 95       	icall
    4f20:	ff 91       	pop	r31
    4f22:	ef 91       	pop	r30
    4f24:	bf 91       	pop	r27
    4f26:	af 91       	pop	r26
    4f28:	9f 91       	pop	r25
    4f2a:	8f 91       	pop	r24
    4f2c:	7f 91       	pop	r23
    4f2e:	6f 91       	pop	r22
    4f30:	5f 91       	pop	r21
    4f32:	4f 91       	pop	r20
    4f34:	3f 91       	pop	r19
    4f36:	2f 91       	pop	r18
    4f38:	0f 90       	pop	r0
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	0f 90       	pop	r0
    4f3e:	1f 90       	pop	r1
    4f40:	18 95       	reti

Disassembly of section .text.clear_callbacks:

000061f2 <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    61f2:	80 e0       	ldi	r24, 0x00	; 0
    61f4:	09 c0       	rjmp	.+18     	; 0x6208 <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    61f6:	e8 2f       	mov	r30, r24
    61f8:	f0 e0       	ldi	r31, 0x00	; 0
    61fa:	ee 0f       	add	r30, r30
    61fc:	ff 1f       	adc	r31, r31
    61fe:	e6 5b       	subi	r30, 0xB6	; 182
    6200:	f0 4f       	sbci	r31, 0xF0	; 240
    6202:	11 82       	std	Z+1, r1	; 0x01
    6204:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6206:	8f 5f       	subi	r24, 0xFF	; 255
    6208:	85 30       	cpi	r24, 0x05	; 5
    620a:	a8 f3       	brcs	.-22     	; 0x61f6 <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    620c:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <cbCounter>
    6210:	08 95       	ret

Disassembly of section .text.start_timer:

00006924 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    6924:	87 e0       	ldi	r24, 0x07	; 7
    6926:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    692a:	08 95       	ret

Disassembly of section .text.stop_timer:

0000697a <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    697a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    697e:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006212 <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6212:	82 e0       	ldi	r24, 0x02	; 2
    6214:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    6218:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    621c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6220:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6224:	93 ef       	ldi	r25, 0xF3	; 243
    6226:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    622a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    622e:	78 94       	sei
    6230:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

000068a0 <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    68a0:	0e 94 bd 34 	call	0x697a	; 0x697a <stop_timer>
	clear_callbacks();
    68a4:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <clear_callbacks>
    68a8:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00004d0c <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    4d0c:	cf 93       	push	r28
    4d0e:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4d10:	60 91 96 0f 	lds	r22, 0x0F96	; 0x800f96 <cbCounter>
    4d14:	65 30       	cpi	r22, 0x05	; 5
    4d16:	00 f5       	brcc	.+64     	; 0x4d58 <TC2_HAL_subscribe+0x4c>
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	15 c0       	rjmp	.+42     	; 0x4d46 <TC2_HAL_subscribe+0x3a>
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    4d1c:	29 2f       	mov	r18, r25
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	f9 01       	movw	r30, r18
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	e6 5b       	subi	r30, 0xB6	; 182
    4d28:	f0 4f       	sbci	r31, 0xF0	; 240
    4d2a:	40 81       	ld	r20, Z
    4d2c:	51 81       	ldd	r21, Z+1	; 0x01
    4d2e:	45 2b       	or	r20, r21
    4d30:	49 f4       	brne	.+18     	; 0x4d44 <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    4d32:	22 0f       	add	r18, r18
    4d34:	33 1f       	adc	r19, r19
    4d36:	f9 01       	movw	r30, r18
    4d38:	e6 5b       	subi	r30, 0xB6	; 182
    4d3a:	f0 4f       	sbci	r31, 0xF0	; 240
    4d3c:	b1 83       	std	Z+1, r27	; 0x01
    4d3e:	a0 83       	st	Z, r26
			pointer=i;
    4d40:	c9 2f       	mov	r28, r25
			break;
    4d42:	04 c0       	rjmp	.+8      	; 0x4d4c <TC2_HAL_subscribe+0x40>
int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4d44:	9f 5f       	subi	r25, 0xFF	; 255
    4d46:	95 30       	cpi	r25, 0x05	; 5
    4d48:	48 f3       	brcs	.-46     	; 0x4d1c <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    4d4a:	cf ef       	ldi	r28, 0xFF	; 255
			callbacks[i]=cb;
			pointer=i;
			break;
		}
	}
	cbCounter++;
    4d4c:	6f 5f       	subi	r22, 0xFF	; 255
    4d4e:	60 93 96 0f 	sts	0x0F96, r22	; 0x800f96 <cbCounter>
	start_timer();
    4d52:	0e 94 92 34 	call	0x6924	; 0x6924 <start_timer>
	return pointer;
    4d56:	01 c0       	rjmp	.+2      	; 0x4d5a <TC2_HAL_subscribe+0x4e>
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4d58:	cf ef       	ldi	r28, 0xFF	; 255
		}
	}
	cbCounter++;
	start_timer();
	return pointer;
}
    4d5a:	8c 2f       	mov	r24, r28
    4d5c:	cf 91       	pop	r28
    4d5e:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000058cc <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	if(callbacks[pointer]==NULL) return;
    58cc:	08 2e       	mov	r0, r24
    58ce:	00 0c       	add	r0, r0
    58d0:	99 0b       	sbc	r25, r25
    58d2:	fc 01       	movw	r30, r24
    58d4:	ee 0f       	add	r30, r30
    58d6:	ff 1f       	adc	r31, r31
    58d8:	e6 5b       	subi	r30, 0xB6	; 182
    58da:	f0 4f       	sbci	r31, 0xF0	; 240
    58dc:	20 81       	ld	r18, Z
    58de:	31 81       	ldd	r19, Z+1	; 0x01
    58e0:	23 2b       	or	r18, r19
    58e2:	81 f0       	breq	.+32     	; 0x5904 <TC2_HAL_cancel+0x38>
	callbacks[pointer]=NULL;
    58e4:	88 0f       	add	r24, r24
    58e6:	99 1f       	adc	r25, r25
    58e8:	fc 01       	movw	r30, r24
    58ea:	e6 5b       	subi	r30, 0xB6	; 182
    58ec:	f0 4f       	sbci	r31, 0xF0	; 240
    58ee:	11 82       	std	Z+1, r1	; 0x01
    58f0:	10 82       	st	Z, r1
	cbCounter--;
    58f2:	80 91 96 0f 	lds	r24, 0x0F96	; 0x800f96 <cbCounter>
    58f6:	81 50       	subi	r24, 0x01	; 1
    58f8:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <cbCounter>
	if(cbCounter==0){
    58fc:	81 11       	cpse	r24, r1
    58fe:	02 c0       	rjmp	.+4      	; 0x5904 <TC2_HAL_cancel+0x38>
		stop_timer();		
    5900:	0e 94 bd 34 	call	0x697a	; 0x697a <stop_timer>
    5904:	08 95       	ret

Disassembly of section .text.__vector_9:

000041e6 <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    41e6:	1f 92       	push	r1
    41e8:	0f 92       	push	r0
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	0f 92       	push	r0
    41ee:	11 24       	eor	r1, r1
    41f0:	2f 93       	push	r18
    41f2:	3f 93       	push	r19
    41f4:	4f 93       	push	r20
    41f6:	5f 93       	push	r21
    41f8:	6f 93       	push	r22
    41fa:	7f 93       	push	r23
    41fc:	8f 93       	push	r24
    41fe:	9f 93       	push	r25
    4200:	af 93       	push	r26
    4202:	bf 93       	push	r27
    4204:	cf 93       	push	r28
    4206:	ef 93       	push	r30
    4208:	ff 93       	push	r31
	cnt++;
    420a:	80 91 95 0f 	lds	r24, 0x0F95	; 0x800f95 <cnt>
    420e:	8f 5f       	subi	r24, 0xFF	; 255
    4210:	80 93 95 0f 	sts	0x0F95, r24	; 0x800f95 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    4214:	80 32       	cpi	r24, 0x20	; 32
    4216:	99 f4       	brne	.+38     	; 0x423e <__vector_9+0x58>
		cnt=0;
    4218:	10 92 95 0f 	sts	0x0F95, r1	; 0x800f95 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    421c:	c0 e0       	ldi	r28, 0x00	; 0
    421e:	0d c0       	rjmp	.+26     	; 0x423a <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    4220:	ec 2f       	mov	r30, r28
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	ee 0f       	add	r30, r30
    4226:	ff 1f       	adc	r31, r31
    4228:	e6 5b       	subi	r30, 0xB6	; 182
    422a:	f0 4f       	sbci	r31, 0xF0	; 240
    422c:	01 90       	ld	r0, Z+
    422e:	f0 81       	ld	r31, Z
    4230:	e0 2d       	mov	r30, r0
    4232:	30 97       	sbiw	r30, 0x00	; 0
    4234:	09 f0       	breq	.+2      	; 0x4238 <__vector_9+0x52>
				callbacks[i]();
    4236:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4238:	cf 5f       	subi	r28, 0xFF	; 255
    423a:	c5 30       	cpi	r28, 0x05	; 5
    423c:	88 f3       	brcs	.-30     	; 0x4220 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    423e:	ff 91       	pop	r31
    4240:	ef 91       	pop	r30
    4242:	cf 91       	pop	r28
    4244:	bf 91       	pop	r27
    4246:	af 91       	pop	r26
    4248:	9f 91       	pop	r25
    424a:	8f 91       	pop	r24
    424c:	7f 91       	pop	r23
    424e:	6f 91       	pop	r22
    4250:	5f 91       	pop	r21
    4252:	4f 91       	pop	r20
    4254:	3f 91       	pop	r19
    4256:	2f 91       	pop	r18
    4258:	0f 90       	pop	r0
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	0f 90       	pop	r0
    425e:	1f 90       	pop	r1
    4260:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00004fde <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4fde:	cf 92       	push	r12
    4fe0:	df 92       	push	r13
    4fe2:	ef 92       	push	r14
    4fe4:	cf 93       	push	r28
    4fe6:	df 93       	push	r29
    4fe8:	6a 01       	movw	r12, r20
    4fea:	e6 2e       	mov	r14, r22
    4fec:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    4fee:	60 e0       	ldi	r22, 0x00	; 0
    4ff0:	0e 94 68 29 	call	0x52d0	; 0x52d0 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    4ff4:	81 11       	cpse	r24, r1
    4ff6:	13 c0       	rjmp	.+38     	; 0x501e <start_and_write_data+0x40>
    4ff8:	c0 e0       	ldi	r28, 0x00	; 0
    4ffa:	0e c0       	rjmp	.+28     	; 0x5018 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    4ffc:	ae 2d       	mov	r26, r14
    4ffe:	c6 01       	movw	r24, r12
    5000:	8c 0f       	add	r24, r28
    5002:	91 1d       	adc	r25, r1
    5004:	a1 1d       	adc	r26, r1
    5006:	fc 01       	movw	r30, r24
    5008:	84 91       	lpm	r24, Z
    500a:	a7 fd       	sbrc	r26, 7
    500c:	80 81       	ld	r24, Z
    500e:	0e 94 19 31 	call	0x6232	; 0x6232 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    5012:	81 11       	cpse	r24, r1
    5014:	04 c0       	rjmp	.+8      	; 0x501e <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    5016:	cf 5f       	subi	r28, 0xFF	; 255
    5018:	cd 17       	cp	r28, r29
    501a:	80 f3       	brcs	.-32     	; 0x4ffc <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    501c:	80 e0       	ldi	r24, 0x00	; 0
}
    501e:	df 91       	pop	r29
    5020:	cf 91       	pop	r28
    5022:	ef 90       	pop	r14
    5024:	df 90       	pop	r13
    5026:	cf 90       	pop	r12
    5028:	08 95       	ret

Disassembly of section .text.read_and_stop:

00004afc <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    4afc:	ef 92       	push	r14
    4afe:	ff 92       	push	r15
    4b00:	0f 93       	push	r16
    4b02:	1f 93       	push	r17
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	8c 01       	movw	r16, r24
    4b0a:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    4b0c:	c0 e0       	ldi	r28, 0x00	; 0
    4b0e:	08 c0       	rjmp	.+16     	; 0x4b20 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    4b10:	78 01       	movw	r14, r16
    4b12:	ec 0e       	add	r14, r28
    4b14:	f1 1c       	adc	r15, r1
    4b16:	0e 94 da 32 	call	0x65b4	; 0x65b4 <TWI_HAL_read_byte_ack>
    4b1a:	f7 01       	movw	r30, r14
    4b1c:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    4b1e:	cf 5f       	subi	r28, 0xFF	; 255
    4b20:	2c 2f       	mov	r18, r28
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	8d 2f       	mov	r24, r29
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	01 97       	sbiw	r24, 0x01	; 1
    4b2a:	28 17       	cp	r18, r24
    4b2c:	39 07       	cpc	r19, r25
    4b2e:	84 f3       	brlt	.-32     	; 0x4b10 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    4b30:	8d 2f       	mov	r24, r29
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	e8 01       	movw	r28, r16
    4b38:	c8 0f       	add	r28, r24
    4b3a:	d9 1f       	adc	r29, r25
    4b3c:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <TWI_HAL_read_byte_nack>
    4b40:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    4b42:	0e 94 38 33 	call	0x6670	; 0x6670 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	df 91       	pop	r29
    4b4a:	cf 91       	pop	r28
    4b4c:	1f 91       	pop	r17
    4b4e:	0f 91       	pop	r16
    4b50:	ff 90       	pop	r15
    4b52:	ef 90       	pop	r14
    4b54:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

000065a0 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    65a0:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    65a2:	0e 94 ef 27 	call	0x4fde	; 0x4fde <start_and_write_data>
    65a6:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    65a8:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    65aa:	0e 94 38 33 	call	0x6670	; 0x6670 <TWI_HAL_stop>
	}
	return status;
}
    65ae:	8c 2f       	mov	r24, r28
    65b0:	cf 91       	pop	r28
    65b2:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

0000640c <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    640c:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    640e:	0e 94 ef 27 	call	0x4fde	; 0x4fde <start_and_write_data>
    6412:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6414:	0e 94 38 33 	call	0x6670	; 0x6670 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    6418:	c1 11       	cpse	r28, r1
    641a:	02 c0       	rjmp	.+4      	; 0x6420 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    641c:	80 e0       	ldi	r24, 0x00	; 0
    641e:	01 c0       	rjmp	.+2      	; 0x6422 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6420:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6422:	cf 91       	pop	r28
    6424:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00005c42 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5c42:	0f 93       	push	r16
    5c44:	1f 93       	push	r17
    5c46:	cf 93       	push	r28
    5c48:	df 93       	push	r29
    5c4a:	8b 01       	movw	r16, r22
    5c4c:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    5c4e:	61 e0       	ldi	r22, 0x01	; 1
    5c50:	0e 94 68 29 	call	0x52d0	; 0x52d0 <TWI_HAL_start>
    5c54:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5c56:	88 23       	and	r24, r24
    5c58:	21 f0       	breq	.+8      	; 0x5c62 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    5c5a:	0e 94 38 33 	call	0x6670	; 0x6670 <TWI_HAL_stop>
		return status;	
    5c5e:	8c 2f       	mov	r24, r28
    5c60:	04 c0       	rjmp	.+8      	; 0x5c6a <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    5c62:	6d 2f       	mov	r22, r29
    5c64:	c8 01       	movw	r24, r16
    5c66:	0e 94 7e 25 	call	0x4afc	; 0x4afc <read_and_stop>
	
}
    5c6a:	df 91       	pop	r29
    5c6c:	cf 91       	pop	r28
    5c6e:	1f 91       	pop	r17
    5c70:	0f 91       	pop	r16
    5c72:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00005d3c <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5d3c:	0f 93       	push	r16
    5d3e:	1f 93       	push	r17
    5d40:	cf 93       	push	r28
    5d42:	df 93       	push	r29
    5d44:	8b 01       	movw	r16, r22
    5d46:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    5d48:	0e 94 0d 2b 	call	0x561a	; 0x561a <TWI_HAL_repeated_start>
    5d4c:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5d4e:	88 23       	and	r24, r24
    5d50:	21 f0       	breq	.+8      	; 0x5d5a <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    5d52:	0e 94 38 33 	call	0x6670	; 0x6670 <TWI_HAL_stop>
		return status;
    5d56:	8c 2f       	mov	r24, r28
    5d58:	04 c0       	rjmp	.+8      	; 0x5d62 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    5d5a:	6d 2f       	mov	r22, r29
    5d5c:	c8 01       	movw	r24, r16
    5d5e:	0e 94 7e 25 	call	0x4afc	; 0x4afc <read_and_stop>
	
}
    5d62:	df 91       	pop	r29
    5d64:	cf 91       	pop	r28
    5d66:	1f 91       	pop	r17
    5d68:	0f 91       	pop	r16
    5d6a:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006604 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6604:	80 e2       	ldi	r24, 0x20	; 32
    6606:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    660a:	e9 eb       	ldi	r30, 0xB9	; 185
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	80 81       	ld	r24, Z
    6610:	8c 7f       	andi	r24, 0xFC	; 252
    6612:	80 83       	st	Z, r24
    6614:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000052d0 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	88 0f       	add	r24, r24
    52d4:	99 1f       	adc	r25, r25
    52d6:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    52d8:	84 ea       	ldi	r24, 0xA4	; 164
    52da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    52de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    52e2:	99 23       	and	r25, r25
    52e4:	e4 f7       	brge	.-8      	; 0x52de <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    52e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    52ea:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    52ec:	88 30       	cpi	r24, 0x08	; 8
    52ee:	99 f4       	brne	.+38     	; 0x5316 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    52f0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    52f4:	84 e8       	ldi	r24, 0x84	; 132
    52f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    52fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    52fe:	88 23       	and	r24, r24
    5300:	e4 f7       	brge	.-8      	; 0x52fa <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5302:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5306:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5308:	88 31       	cpi	r24, 0x18	; 24
    530a:	21 f0       	breq	.+8      	; 0x5314 <TWI_HAL_start+0x44>
    530c:	80 34       	cpi	r24, 0x40	; 64
    530e:	19 f4       	brne	.+6      	; 0x5316 <TWI_HAL_start+0x46>
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	08 95       	ret
    5314:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5316:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

0000561a <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	88 0f       	add	r24, r24
    561e:	99 1f       	adc	r25, r25
    5620:	28 2f       	mov	r18, r24
    5622:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5624:	84 ea       	ldi	r24, 0xA4	; 164
    5626:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    562a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    562e:	99 23       	and	r25, r25
    5630:	e4 f7       	brge	.-8      	; 0x562a <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    5632:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5636:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    5638:	80 31       	cpi	r24, 0x10	; 16
    563a:	79 f4       	brne	.+30     	; 0x565a <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    563c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5640:	84 e8       	ldi	r24, 0x84	; 132
    5642:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5646:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    564a:	88 23       	and	r24, r24
    564c:	e4 f7       	brge	.-8      	; 0x5646 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    564e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5652:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    5654:	80 34       	cpi	r24, 0x40	; 64
    5656:	09 f4       	brne	.+2      	; 0x565a <TWI_HAL_repeated_start+0x40>
    5658:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    565a:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006232 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6232:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    6236:	84 e8       	ldi	r24, 0x84	; 132
    6238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    623c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6240:	88 23       	and	r24, r24
    6242:	e4 f7       	brge	.-8      	; 0x623c <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    6244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6248:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    624a:	88 32       	cpi	r24, 0x28	; 40
    624c:	09 f4       	brne	.+2      	; 0x6250 <TWI_HAL_write_byte+0x1e>
    624e:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    6250:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000065b4 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    65b4:	84 ec       	ldi	r24, 0xC4	; 196
    65b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    65ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    65be:	88 23       	and	r24, r24
    65c0:	e4 f7       	brge	.-8      	; 0x65ba <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    65c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    65c6:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000065c8 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    65c8:	84 e8       	ldi	r24, 0x84	; 132
    65ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    65ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    65d2:	88 23       	and	r24, r24
    65d4:	e4 f7       	brge	.-8      	; 0x65ce <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    65d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    65da:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00006670 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    6670:	84 e9       	ldi	r24, 0x94	; 148
    6672:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    6676:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    667a:	84 fd       	sbrc	r24, 4
    667c:	fc cf       	rjmp	.-8      	; 0x6676 <TWI_HAL_stop+0x6>
}
    667e:	08 95       	ret

Disassembly of section .text.copy_buffer:

00005eec <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5eec:	bc 01       	movw	r22, r24
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	09 c0       	rjmp	.+18     	; 0x5f04 <copy_buffer+0x18>
    5ef2:	fb 01       	movw	r30, r22
    5ef4:	e9 0f       	add	r30, r25
    5ef6:	f1 1d       	adc	r31, r1
    5ef8:	da 01       	movw	r26, r20
    5efa:	a0 50       	subi	r26, 0x00	; 0
    5efc:	bf 4f       	sbci	r27, 0xFF	; 255
    5efe:	2c 91       	ld	r18, X
    5f00:	20 83       	st	Z, r18
    5f02:	9f 5f       	subi	r25, 0xFF	; 255
    5f04:	49 2f       	mov	r20, r25
    5f06:	50 e0       	ldi	r21, 0x00	; 0
    5f08:	20 91 98 0f 	lds	r18, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5f0c:	30 e0       	ldi	r19, 0x00	; 0
    5f0e:	22 50       	subi	r18, 0x02	; 2
    5f10:	31 09       	sbc	r19, r1
    5f12:	42 17       	cp	r20, r18
    5f14:	53 07       	cpc	r21, r19
    5f16:	6c f3       	brlt	.-38     	; 0x5ef2 <copy_buffer+0x6>
    5f18:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00005818 <uart0_hal_init>:
    5818:	e1 ec       	ldi	r30, 0xC1	; 193
    581a:	f0 e0       	ldi	r31, 0x00	; 0
    581c:	80 81       	ld	r24, Z
    581e:	80 61       	ori	r24, 0x10	; 16
    5820:	80 83       	st	Z, r24
    5822:	80 81       	ld	r24, Z
    5824:	88 60       	ori	r24, 0x08	; 8
    5826:	80 83       	st	Z, r24
    5828:	80 81       	ld	r24, Z
    582a:	80 68       	ori	r24, 0x80	; 128
    582c:	80 83       	st	Z, r24
    582e:	80 81       	ld	r24, Z
    5830:	80 64       	ori	r24, 0x40	; 64
    5832:	80 83       	st	Z, r24
    5834:	e0 ec       	ldi	r30, 0xC0	; 192
    5836:	f0 e0       	ldi	r31, 0x00	; 0
    5838:	80 81       	ld	r24, Z
    583a:	82 60       	ori	r24, 0x02	; 2
    583c:	80 83       	st	Z, r24
    583e:	86 e0       	ldi	r24, 0x06	; 6
    5840:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    5844:	80 e1       	ldi	r24, 0x10	; 16
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    584c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    5850:	78 94       	sei
    5852:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00005854 <uart0_hal_send_message>:
    5854:	dc 01       	movw	r26, r24
    5856:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    585a:	81 11       	cpse	r24, r1
    585c:	fc cf       	rjmp	.-8      	; 0x5856 <uart0_hal_send_message+0x2>
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	0b c0       	rjmp	.+22     	; 0x5878 <uart0_hal_send_message+0x24>
    5862:	29 2f       	mov	r18, r25
    5864:	30 e0       	ldi	r19, 0x00	; 0
    5866:	fd 01       	movw	r30, r26
    5868:	e2 0f       	add	r30, r18
    586a:	f3 1f       	adc	r31, r19
    586c:	40 81       	ld	r20, Z
    586e:	f9 01       	movw	r30, r18
    5870:	ea 56       	subi	r30, 0x6A	; 106
    5872:	fe 4f       	sbci	r31, 0xFE	; 254
    5874:	40 83       	st	Z, r20
    5876:	9f 5f       	subi	r25, 0xFF	; 255
    5878:	96 17       	cp	r25, r22
    587a:	98 f3       	brcs	.-26     	; 0x5862 <uart0_hal_send_message+0xe>
    587c:	60 93 9a 0f 	sts	0x0F9A, r22	; 0x800f9a <tx_buffer_data_len>
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    5886:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    588a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    588e:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

000046fc <uart0_hal_send_string>:
    46fc:	6f 92       	push	r6
    46fe:	7f 92       	push	r7
    4700:	8f 92       	push	r8
    4702:	cf 92       	push	r12
    4704:	df 92       	push	r13
    4706:	ef 92       	push	r14
    4708:	3b 01       	movw	r6, r22
    470a:	88 2e       	mov	r8, r24
    470c:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    4710:	81 11       	cpse	r24, r1
    4712:	fc cf       	rjmp	.-8      	; 0x470c <uart0_hal_send_string+0x10>
    4714:	88 2d       	mov	r24, r8
    4716:	b3 01       	movw	r22, r6
    4718:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    471c:	68 2f       	mov	r22, r24
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	12 c0       	rjmp	.+36     	; 0x4746 <uart0_hal_send_string+0x4a>
    4722:	29 2f       	mov	r18, r25
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	e8 2c       	mov	r14, r8
    4728:	63 01       	movw	r12, r6
    472a:	c2 0e       	add	r12, r18
    472c:	d3 1e       	adc	r13, r19
    472e:	e1 1c       	adc	r14, r1
    4730:	37 fd       	sbrc	r19, 7
    4732:	ea 94       	dec	r14
    4734:	f6 01       	movw	r30, r12
    4736:	44 91       	lpm	r20, Z
    4738:	e7 fc       	sbrc	r14, 7
    473a:	40 81       	ld	r20, Z
    473c:	f9 01       	movw	r30, r18
    473e:	ea 56       	subi	r30, 0x6A	; 106
    4740:	fe 4f       	sbci	r31, 0xFE	; 254
    4742:	40 83       	st	Z, r20
    4744:	9f 5f       	subi	r25, 0xFF	; 255
    4746:	96 17       	cp	r25, r22
    4748:	60 f3       	brcs	.-40     	; 0x4722 <uart0_hal_send_string+0x26>
    474a:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <tx_buffer_data_len>
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    4754:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    4758:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    475c:	ef 90       	pop	r14
    475e:	df 90       	pop	r13
    4760:	cf 90       	pop	r12
    4762:	8f 90       	pop	r8
    4764:	7f 90       	pop	r7
    4766:	6f 90       	pop	r6
    4768:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000066f4 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    66f4:	90 91 97 0f 	lds	r25, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	91 11       	cpse	r25, r1
    66fc:	01 c0       	rjmp	.+2      	; 0x6700 <uart0_hal_message_ready+0xc>
    66fe:	80 e0       	ldi	r24, 0x00	; 0
}
    6700:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000068aa <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    68aa:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    68ae:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <rx_buffer_data_len>
    68b2:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00005ffa <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    5ffa:	0f 93       	push	r16
    5ffc:	1f 93       	push	r17
    5ffe:	cf 93       	push	r28
    6000:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    6002:	0e 94 76 2f 	call	0x5eec	; 0x5eec <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    6006:	c0 91 98 0f 	lds	r28, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    600a:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    600c:	f8 01       	movw	r30, r16
    600e:	ec 0f       	add	r30, r28
    6010:	f1 1d       	adc	r31, r1
    6012:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    6014:	0e 94 55 34 	call	0x68aa	; 0x68aa <uart0_hal_clear_rx_buffer>
	return len;
}
    6018:	8c 2f       	mov	r24, r28
    601a:	cf 91       	pop	r28
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

000053f0 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    53f0:	cf 93       	push	r28
    53f2:	df 93       	push	r29
    53f4:	1f 92       	push	r1
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	9a b1       	in	r25, 0x0a	; 10
    53fc:	92 60       	ori	r25, 0x02	; 2
    53fe:	9a b9       	out	0x0a, r25	; 10
    5400:	e1 ec       	ldi	r30, 0xC1	; 193
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	90 81       	ld	r25, Z
    5406:	97 7f       	andi	r25, 0xF7	; 247
    5408:	90 83       	st	Z, r25
    540a:	9b b1       	in	r25, 0x0b	; 11
    540c:	9d 7f       	andi	r25, 0xFD	; 253
    540e:	9b b9       	out	0x0b, r25	; 11
    5410:	af e9       	ldi	r26, 0x9F	; 159
    5412:	bf e0       	ldi	r27, 0x0F	; 15
    5414:	11 97       	sbiw	r26, 0x01	; 1
    5416:	f1 f7       	brne	.-4      	; 0x5414 <uart0_hal_send_break+0x24>
    5418:	00 c0       	rjmp	.+0      	; 0x541a <uart0_hal_send_break+0x2a>
    541a:	00 00       	nop
    541c:	90 81       	ld	r25, Z
    541e:	98 60       	ori	r25, 0x08	; 8
    5420:	90 83       	st	Z, r25
    5422:	89 83       	std	Y+1, r24	; 0x01
    5424:	61 e0       	ldi	r22, 0x01	; 1
    5426:	ce 01       	movw	r24, r28
    5428:	01 96       	adiw	r24, 0x01	; 1
    542a:	0e 94 2a 2c 	call	0x5854	; 0x5854 <uart0_hal_send_message>
    542e:	0f 90       	pop	r0
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	08 95       	ret

Disassembly of section .text.__vector_22:

000051f2 <__vector_22>:
    51f2:	1f 92       	push	r1
    51f4:	0f 92       	push	r0
    51f6:	0f b6       	in	r0, 0x3f	; 63
    51f8:	0f 92       	push	r0
    51fa:	11 24       	eor	r1, r1
    51fc:	8f 93       	push	r24
    51fe:	ef 93       	push	r30
    5200:	ff 93       	push	r31
    5202:	e0 91 99 0f 	lds	r30, 0x0F99	; 0x800f99 <tx_buffer_cursor>
    5206:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    520a:	e8 17       	cp	r30, r24
    520c:	58 f4       	brcc	.+22     	; 0x5224 <__vector_22+0x32>
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	8e 0f       	add	r24, r30
    5212:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	ea 56       	subi	r30, 0x6A	; 106
    521a:	fe 4f       	sbci	r31, 0xFE	; 254
    521c:	80 81       	ld	r24, Z
    521e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    5222:	04 c0       	rjmp	.+8      	; 0x522c <__vector_22+0x3a>
    5224:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <tx_buffer_cursor>
    5228:	10 92 9a 0f 	sts	0x0F9A, r1	; 0x800f9a <tx_buffer_data_len>
    522c:	ff 91       	pop	r31
    522e:	ef 91       	pop	r30
    5230:	8f 91       	pop	r24
    5232:	0f 90       	pop	r0
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	0f 90       	pop	r0
    5238:	1f 90       	pop	r1
    523a:	18 95       	reti

Disassembly of section .text.__vector_20:

00004534 <__vector_20>:
    4534:	1f 92       	push	r1
    4536:	0f 92       	push	r0
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	0f 92       	push	r0
    453c:	11 24       	eor	r1, r1
    453e:	2f 93       	push	r18
    4540:	8f 93       	push	r24
    4542:	9f 93       	push	r25
    4544:	ef 93       	push	r30
    4546:	ff 93       	push	r31
    4548:	80 91 97 0f 	lds	r24, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    454c:	81 11       	cpse	r24, r1
    454e:	0e c0       	rjmp	.+28     	; 0x456c <__vector_20+0x38>
    4550:	e0 91 98 0f 	lds	r30, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    4554:	e6 39       	cpi	r30, 0x96	; 150
    4556:	50 f4       	brcc	.+20     	; 0x456c <__vector_20+0x38>
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	8e 0f       	add	r24, r30
    455c:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <rx_buffer_data_len>
    4560:	f0 e0       	ldi	r31, 0x00	; 0
    4562:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4566:	e0 50       	subi	r30, 0x00	; 0
    4568:	ff 4f       	sbci	r31, 0xFF	; 255
    456a:	80 83       	st	Z, r24
    456c:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    4570:	83 30       	cpi	r24, 0x03	; 3
    4572:	80 f0       	brcs	.+32     	; 0x4594 <__vector_20+0x60>
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	fc 01       	movw	r30, r24
    4578:	e1 50       	subi	r30, 0x01	; 1
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	20 81       	ld	r18, Z
    457e:	2a 30       	cpi	r18, 0x0A	; 10
    4580:	49 f4       	brne	.+18     	; 0x4594 <__vector_20+0x60>
    4582:	fc 01       	movw	r30, r24
    4584:	e2 50       	subi	r30, 0x02	; 2
    4586:	ff 4f       	sbci	r31, 0xFF	; 255
    4588:	80 81       	ld	r24, Z
    458a:	8d 30       	cpi	r24, 0x0D	; 13
    458c:	19 f4       	brne	.+6      	; 0x4594 <__vector_20+0x60>
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <rx_buffer_has_message>
    4594:	ff 91       	pop	r31
    4596:	ef 91       	pop	r30
    4598:	9f 91       	pop	r25
    459a:	8f 91       	pop	r24
    459c:	2f 91       	pop	r18
    459e:	0f 90       	pop	r0
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	0f 90       	pop	r0
    45a4:	1f 90       	pop	r1
    45a6:	18 95       	reti

Disassembly of section .text.copy_buffer:

00005f1a <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5f1a:	bc 01       	movw	r22, r24
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	09 c0       	rjmp	.+18     	; 0x5f32 <copy_buffer+0x18>
    5f20:	fb 01       	movw	r30, r22
    5f22:	e9 0f       	add	r30, r25
    5f24:	f1 1d       	adc	r31, r1
    5f26:	da 01       	movw	r26, r20
    5f28:	a6 51       	subi	r26, 0x16	; 22
    5f2a:	b2 4f       	sbci	r27, 0xF2	; 242
    5f2c:	2c 91       	ld	r18, X
    5f2e:	20 83       	st	Z, r18
    5f30:	9f 5f       	subi	r25, 0xFF	; 255
    5f32:	49 2f       	mov	r20, r25
    5f34:	50 e0       	ldi	r21, 0x00	; 0
    5f36:	20 91 9c 0f 	lds	r18, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	22 50       	subi	r18, 0x02	; 2
    5f3e:	31 09       	sbc	r19, r1
    5f40:	42 17       	cp	r20, r18
    5f42:	53 07       	cpc	r21, r19
    5f44:	6c f3       	brlt	.-38     	; 0x5f20 <copy_buffer+0x6>
    5f46:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00005890 <uart1_hal_init>:
    5890:	e9 ec       	ldi	r30, 0xC9	; 201
    5892:	f0 e0       	ldi	r31, 0x00	; 0
    5894:	80 81       	ld	r24, Z
    5896:	80 61       	ori	r24, 0x10	; 16
    5898:	80 83       	st	Z, r24
    589a:	80 81       	ld	r24, Z
    589c:	88 60       	ori	r24, 0x08	; 8
    589e:	80 83       	st	Z, r24
    58a0:	80 81       	ld	r24, Z
    58a2:	80 68       	ori	r24, 0x80	; 128
    58a4:	80 83       	st	Z, r24
    58a6:	80 81       	ld	r24, Z
    58a8:	80 64       	ori	r24, 0x40	; 64
    58aa:	80 83       	st	Z, r24
    58ac:	e8 ec       	ldi	r30, 0xC8	; 200
    58ae:	f0 e0       	ldi	r31, 0x00	; 0
    58b0:	80 81       	ld	r24, Z
    58b2:	82 60       	ori	r24, 0x02	; 2
    58b4:	80 83       	st	Z, r24
    58b6:	86 e0       	ldi	r24, 0x06	; 6
    58b8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    58bc:	80 e1       	ldi	r24, 0x10	; 16
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    58c4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    58c8:	78 94       	sei
    58ca:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00004052 <uart1_hal_send_string>:
    4052:	6f 92       	push	r6
    4054:	7f 92       	push	r7
    4056:	8f 92       	push	r8
    4058:	cf 92       	push	r12
    405a:	df 92       	push	r13
    405c:	ef 92       	push	r14
    405e:	3b 01       	movw	r6, r22
    4060:	88 2e       	mov	r8, r24
    4062:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    4066:	81 11       	cpse	r24, r1
    4068:	fc cf       	rjmp	.-8      	; 0x4062 <uart1_hal_send_string+0x10>
    406a:	88 2d       	mov	r24, r8
    406c:	b3 01       	movw	r22, r6
    406e:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4072:	bc 01       	movw	r22, r24
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	12 c0       	rjmp	.+36     	; 0x409c <uart1_hal_send_string+0x4a>
    4078:	29 2f       	mov	r18, r25
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	e8 2c       	mov	r14, r8
    407e:	63 01       	movw	r12, r6
    4080:	c4 0e       	add	r12, r20
    4082:	d5 1e       	adc	r13, r21
    4084:	e1 1c       	adc	r14, r1
    4086:	57 fd       	sbrc	r21, 7
    4088:	ea 94       	dec	r14
    408a:	f6 01       	movw	r30, r12
    408c:	44 91       	lpm	r20, Z
    408e:	e7 fc       	sbrc	r14, 7
    4090:	40 81       	ld	r20, Z
    4092:	f9 01       	movw	r30, r18
    4094:	ee 5d       	subi	r30, 0xDE	; 222
    4096:	f2 4f       	sbci	r31, 0xF2	; 242
    4098:	40 83       	st	Z, r20
    409a:	9f 5f       	subi	r25, 0xFF	; 255
    409c:	49 2f       	mov	r20, r25
    409e:	50 e0       	ldi	r21, 0x00	; 0
    40a0:	46 17       	cp	r20, r22
    40a2:	57 07       	cpc	r21, r23
    40a4:	48 f3       	brcs	.-46     	; 0x4078 <uart1_hal_send_string+0x26>
    40a6:	fb 01       	movw	r30, r22
    40a8:	ee 5d       	subi	r30, 0xDE	; 222
    40aa:	f2 4f       	sbci	r31, 0xF2	; 242
    40ac:	8d e0       	ldi	r24, 0x0D	; 13
    40ae:	80 83       	st	Z, r24
    40b0:	fb 01       	movw	r30, r22
    40b2:	ed 5d       	subi	r30, 0xDD	; 221
    40b4:	f2 4f       	sbci	r31, 0xF2	; 242
    40b6:	8a e0       	ldi	r24, 0x0A	; 10
    40b8:	80 83       	st	Z, r24
    40ba:	6e 5f       	subi	r22, 0xFE	; 254
    40bc:	60 93 9e 0f 	sts	0x0F9E, r22	; 0x800f9e <tx_buffer_data_len>
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    40c6:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <tx_buffer>
    40ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    40ce:	ef 90       	pop	r14
    40d0:	df 90       	pop	r13
    40d2:	cf 90       	pop	r12
    40d4:	8f 90       	pop	r8
    40d6:	7f 90       	pop	r7
    40d8:	6f 90       	pop	r6
    40da:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00006702 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    6702:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    6706:	81 e0       	ldi	r24, 0x01	; 1
    6708:	91 11       	cpse	r25, r1
    670a:	01 c0       	rjmp	.+2      	; 0x670e <uart1_hal_message_ready+0xc>
    670c:	80 e0       	ldi	r24, 0x00	; 0
}
    670e:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00006710 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    6710:	90 91 9c 0f 	lds	r25, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    6714:	81 e0       	ldi	r24, 0x01	; 1
    6716:	95 39       	cpi	r25, 0x95	; 149
    6718:	08 f4       	brcc	.+2      	; 0x671c <uart1_hal_rx_full+0xc>
    671a:	80 e0       	ldi	r24, 0x00	; 0
}
    671c:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

000068b4 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    68b4:	10 92 9b 0f 	sts	0x0F9B, r1	; 0x800f9b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    68b8:	10 92 9c 0f 	sts	0x0F9C, r1	; 0x800f9c <rx_buffer_data_len>
    68bc:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00006022 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    6022:	0f 93       	push	r16
    6024:	1f 93       	push	r17
    6026:	cf 93       	push	r28
    6028:	8c 01       	movw	r16, r24
    602a:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <copy_buffer>
    602e:	c0 91 9c 0f 	lds	r28, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    6032:	c2 50       	subi	r28, 0x02	; 2
    6034:	f8 01       	movw	r30, r16
    6036:	ec 0f       	add	r30, r28
    6038:	f1 1d       	adc	r31, r1
    603a:	10 82       	st	Z, r1
    603c:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <uart1_hal_clear_rx_buffer>
    6040:	8c 2f       	mov	r24, r28
    6042:	cf 91       	pop	r28
    6044:	1f 91       	pop	r17
    6046:	0f 91       	pop	r16
    6048:	08 95       	ret

Disassembly of section .text.__vector_30:

0000523c <__vector_30>:
    523c:	1f 92       	push	r1
    523e:	0f 92       	push	r0
    5240:	0f b6       	in	r0, 0x3f	; 63
    5242:	0f 92       	push	r0
    5244:	11 24       	eor	r1, r1
    5246:	8f 93       	push	r24
    5248:	ef 93       	push	r30
    524a:	ff 93       	push	r31
    524c:	e0 91 9d 0f 	lds	r30, 0x0F9D	; 0x800f9d <tx_buffer_cursor>
    5250:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    5254:	e8 17       	cp	r30, r24
    5256:	58 f4       	brcc	.+22     	; 0x526e <__vector_30+0x32>
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	8e 0f       	add	r24, r30
    525c:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    5260:	f0 e0       	ldi	r31, 0x00	; 0
    5262:	ee 5d       	subi	r30, 0xDE	; 222
    5264:	f2 4f       	sbci	r31, 0xF2	; 242
    5266:	80 81       	ld	r24, Z
    5268:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    526c:	04 c0       	rjmp	.+8      	; 0x5276 <__vector_30+0x3a>
    526e:	10 92 9d 0f 	sts	0x0F9D, r1	; 0x800f9d <tx_buffer_cursor>
    5272:	10 92 9e 0f 	sts	0x0F9E, r1	; 0x800f9e <tx_buffer_data_len>
    5276:	ff 91       	pop	r31
    5278:	ef 91       	pop	r30
    527a:	8f 91       	pop	r24
    527c:	0f 90       	pop	r0
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	0f 90       	pop	r0
    5282:	1f 90       	pop	r1
    5284:	18 95       	reti

Disassembly of section .text.__vector_28:

000045a8 <__vector_28>:
    45a8:	1f 92       	push	r1
    45aa:	0f 92       	push	r0
    45ac:	0f b6       	in	r0, 0x3f	; 63
    45ae:	0f 92       	push	r0
    45b0:	11 24       	eor	r1, r1
    45b2:	2f 93       	push	r18
    45b4:	8f 93       	push	r24
    45b6:	9f 93       	push	r25
    45b8:	ef 93       	push	r30
    45ba:	ff 93       	push	r31
    45bc:	80 91 9b 0f 	lds	r24, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    45c0:	81 11       	cpse	r24, r1
    45c2:	0e c0       	rjmp	.+28     	; 0x45e0 <__vector_28+0x38>
    45c4:	e0 91 9c 0f 	lds	r30, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    45c8:	e6 39       	cpi	r30, 0x96	; 150
    45ca:	50 f4       	brcc	.+20     	; 0x45e0 <__vector_28+0x38>
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	8e 0f       	add	r24, r30
    45d0:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <rx_buffer_data_len>
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    45da:	e6 51       	subi	r30, 0x16	; 22
    45dc:	f2 4f       	sbci	r31, 0xF2	; 242
    45de:	80 83       	st	Z, r24
    45e0:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    45e4:	83 30       	cpi	r24, 0x03	; 3
    45e6:	80 f0       	brcs	.+32     	; 0x4608 <__vector_28+0x60>
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	fc 01       	movw	r30, r24
    45ec:	e7 51       	subi	r30, 0x17	; 23
    45ee:	f2 4f       	sbci	r31, 0xF2	; 242
    45f0:	20 81       	ld	r18, Z
    45f2:	2a 30       	cpi	r18, 0x0A	; 10
    45f4:	49 f4       	brne	.+18     	; 0x4608 <__vector_28+0x60>
    45f6:	fc 01       	movw	r30, r24
    45f8:	e8 51       	subi	r30, 0x18	; 24
    45fa:	f2 4f       	sbci	r31, 0xF2	; 242
    45fc:	80 81       	ld	r24, Z
    45fe:	8d 30       	cpi	r24, 0x0D	; 13
    4600:	19 f4       	brne	.+6      	; 0x4608 <__vector_28+0x60>
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <rx_buffer_has_message>
    4608:	ff 91       	pop	r31
    460a:	ef 91       	pop	r30
    460c:	9f 91       	pop	r25
    460e:	8f 91       	pop	r24
    4610:	2f 91       	pop	r18
    4612:	0f 90       	pop	r0
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	0f 90       	pop	r0
    4618:	1f 90       	pop	r1
    461a:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

0000671e <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    671e:	81 b1       	in	r24, 0x01	; 1
    6720:	8f 7b       	andi	r24, 0xBF	; 191
    6722:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    6724:	82 b1       	in	r24, 0x02	; 2
    6726:	80 64       	ori	r24, 0x40	; 64
    6728:	82 b9       	out	0x02, r24	; 2
    672a:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

000068be <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    68be:	80 b1       	in	r24, 0x00	; 0
}
    68c0:	86 fb       	bst	r24, 6
    68c2:	88 27       	eor	r24, r24
    68c4:	80 f9       	bld	r24, 0
    68c6:	08 95       	ret

Disassembly of section .text.main:

00005906 <main>:
#include "HAL/PM/PM_HAL.h"
#include "HAL/UI/UI_HAL.h"

int main(void)
{
	PM_HAL_LED_power_init();
    5906:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    590a:	0e 94 8f 33 	call	0x671e	; 0x671e <UI_HAL_jumper_init>
	//test_runner();
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    590e:	0e 94 5f 34 	call	0x68be	; 0x68be <UI_HAL_is_config_mode>
    5912:	88 23       	and	r24, r24
    5914:	49 f0       	breq	.+18     	; 0x5928 <main+0x22>
			PM_HAL_LED_power(true);
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
			CONF_enter();
    591c:	0e 94 81 12 	call	0x2502	; 0x2502 <CONF_enter>
			PM_HAL_LED_power(false);
    5920:	80 e0       	ldi	r24, 0x00	; 0
    5922:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    5926:	02 c0       	rjmp	.+4      	; 0x592c <main+0x26>
		}else{
			MAINPG_start();
    5928:	0e 94 0a 08 	call	0x1014	; 0x1014 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    592c:	2f ef       	ldi	r18, 0xFF	; 255
    592e:	81 e1       	ldi	r24, 0x11	; 17
    5930:	9a e7       	ldi	r25, 0x7A	; 122
    5932:	21 50       	subi	r18, 0x01	; 1
    5934:	80 40       	sbci	r24, 0x00	; 0
    5936:	90 40       	sbci	r25, 0x00	; 0
    5938:	e1 f7       	brne	.-8      	; 0x5932 <main+0x2c>
    593a:	00 c0       	rjmp	.+0      	; 0x593c <main+0x36>
    593c:	00 00       	nop
    593e:	e7 cf       	rjmp	.-50     	; 0x590e <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00003d6c <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    3d6c:	8f 92       	push	r8
    3d6e:	9f 92       	push	r9
    3d70:	af 92       	push	r10
    3d72:	bf 92       	push	r11
    3d74:	cf 92       	push	r12
    3d76:	df 92       	push	r13
    3d78:	ef 92       	push	r14
    3d7a:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	0e 94 31 21 	call	0x4262	; 0x4262 <__floatunsisf>
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	40 e8       	ldi	r20, 0x80	; 128
    3d8c:	59 e3       	ldi	r21, 0x39	; 57
    3d8e:	0e 94 b2 34 	call	0x6964	; 0x6964 <__mulsf3>
    3d92:	80 90 67 0f 	lds	r8, 0x0F67	; 0x800f67 <Vc>
    3d96:	90 90 68 0f 	lds	r9, 0x0F68	; 0x800f68 <Vc+0x1>
    3d9a:	a0 90 69 0f 	lds	r10, 0x0F69	; 0x800f69 <Vc+0x2>
    3d9e:	b0 90 6a 0f 	lds	r11, 0x0F6A	; 0x800f6a <Vc+0x3>
    3da2:	a5 01       	movw	r20, r10
    3da4:	94 01       	movw	r18, r8
    3da6:	0e 94 b2 34 	call	0x6964	; 0x6964 <__mulsf3>
    3daa:	6b 01       	movw	r12, r22
    3dac:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    3dae:	9b 01       	movw	r18, r22
    3db0:	ac 01       	movw	r20, r24
    3db2:	c5 01       	movw	r24, r10
    3db4:	b4 01       	movw	r22, r8
    3db6:	0e 94 c0 33 	call	0x6780	; 0x6780 <__subsf3>
    3dba:	a7 01       	movw	r20, r14
    3dbc:	96 01       	movw	r18, r12
    3dbe:	0e 94 ae 34 	call	0x695c	; 0x695c <__divsf3>
    3dc2:	20 91 63 0f 	lds	r18, 0x0F63	; 0x800f63 <RRL>
    3dc6:	30 91 64 0f 	lds	r19, 0x0F64	; 0x800f64 <RRL+0x1>
    3dca:	40 91 65 0f 	lds	r20, 0x0F65	; 0x800f65 <RRL+0x2>
    3dce:	50 91 66 0f 	lds	r21, 0x0F66	; 0x800f66 <RRL+0x3>
    3dd2:	0e 94 b2 34 	call	0x6964	; 0x6964 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    3dd6:	20 91 5f 0f 	lds	r18, 0x0F5F	; 0x800f5f <PPM_factor>
    3dda:	30 91 60 0f 	lds	r19, 0x0F60	; 0x800f60 <PPM_factor+0x1>
    3dde:	40 91 61 0f 	lds	r20, 0x0F61	; 0x800f61 <PPM_factor+0x2>
    3de2:	50 91 62 0f 	lds	r21, 0x0F62	; 0x800f62 <PPM_factor+0x3>
    3de6:	0e 94 b2 34 	call	0x6964	; 0x6964 <__mulsf3>
    3dea:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__fixunssfsi>
	return PPM;
}
    3dee:	cb 01       	movw	r24, r22
    3df0:	ff 90       	pop	r15
    3df2:	ef 90       	pop	r14
    3df4:	df 90       	pop	r13
    3df6:	cf 90       	pop	r12
    3df8:	bf 90       	pop	r11
    3dfa:	af 90       	pop	r10
    3dfc:	9f 90       	pop	r9
    3dfe:	8f 90       	pop	r8
    3e00:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

0000645a <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    645a:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    645e:	8f 5f       	subi	r24, 0xFF	; 255
    6460:	80 93 9f 0f 	sts	0x0F9F, r24	; 0x800f9f <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    6464:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    6468:	89 17       	cp	r24, r25
    646a:	10 f0       	brcs	.+4      	; 0x6470 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    646c:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <TC0_HAL_stop>
    6470:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

0000497e <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    497e:	cf 93       	push	r28
	_data=data;
    4980:	50 93 82 0f 	sts	0x0F82, r21	; 0x800f82 <_data+0x1>
    4984:	40 93 81 0f 	sts	0x0F81, r20	; 0x800f81 <_data>
	_nSamples=nSamples;
    4988:	70 93 84 0f 	sts	0x0F84, r23	; 0x800f84 <_nSamples+0x1>
    498c:	60 93 83 0f 	sts	0x0F83, r22	; 0x800f83 <_nSamples>
	cntSamples=0;
    4990:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <cntSamples+0x1>
    4994:	10 92 7f 0f 	sts	0x0F7F, r1	; 0x800f7f <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    4998:	6b e1       	ldi	r22, 0x1B	; 27
    499a:	7a e2       	ldi	r23, 0x2A	; 42
    499c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	0e 94 94 32 	call	0x6528	; 0x6528 <PM_HAL_adc_power>
    49a6:	2f ef       	ldi	r18, 0xFF	; 255
    49a8:	83 ec       	ldi	r24, 0xC3	; 195
    49aa:	99 e0       	ldi	r25, 0x09	; 9
    49ac:	21 50       	subi	r18, 0x01	; 1
    49ae:	80 40       	sbci	r24, 0x00	; 0
    49b0:	90 40       	sbci	r25, 0x00	; 0
    49b2:	e1 f7       	brne	.-8      	; 0x49ac <ADC_init_sampling+0x2e>
    49b4:	00 c0       	rjmp	.+0      	; 0x49b6 <ADC_init_sampling+0x38>
    49b6:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    49b8:	60 e0       	ldi	r22, 0x00	; 0
    49ba:	8d e4       	ldi	r24, 0x4D	; 77
    49bc:	0e 94 68 29 	call	0x52d0	; 0x52d0 <TWI_HAL_start>
    49c0:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    49c2:	0e 94 38 33 	call	0x6670	; 0x6670 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    49c6:	cc 23       	and	r28, r28
    49c8:	51 f0       	breq	.+20     	; 0x49de <ADC_init_sampling+0x60>
		_data=NULL;
    49ca:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    49ce:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
		_nSamples=0;
    49d2:	10 92 84 0f 	sts	0x0F84, r1	; 0x800f84 <_nSamples+0x1>
    49d6:	10 92 83 0f 	sts	0x0F83, r1	; 0x800f83 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    49da:	82 e0       	ldi	r24, 0x02	; 2
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    49de:	80 e0       	ldi	r24, 0x00	; 0
}
    49e0:	cf 91       	pop	r28
    49e2:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

000065dc <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    65dc:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    65e0:	80 e0       	ldi	r24, 0x00	; 0
    65e2:	0e 94 94 32 	call	0x6528	; 0x6528 <PM_HAL_adc_power>
	_data=NULL;
    65e6:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    65ea:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
    65ee:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006364 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6364:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <cntSamples>
    6368:	50 91 80 0f 	lds	r21, 0x0F80	; 0x800f80 <cntSamples+0x1>
    636c:	20 91 83 0f 	lds	r18, 0x0F83	; 0x800f83 <_nSamples>
    6370:	30 91 84 0f 	lds	r19, 0x0F84	; 0x800f84 <_nSamples+0x1>
    6374:	81 e0       	ldi	r24, 0x01	; 1
    6376:	42 17       	cp	r20, r18
    6378:	53 07       	cpc	r21, r19
    637a:	08 f4       	brcc	.+2      	; 0x637e <ADC_is_sampling_done+0x1a>
    637c:	80 e0       	ldi	r24, 0x00	; 0
}
    637e:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00004c60 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    4c60:	0f 93       	push	r16
    4c62:	1f 93       	push	r17
    4c64:	cf 93       	push	r28
    4c66:	df 93       	push	r29
    4c68:	00 d0       	rcall	.+0      	; 0x4c6a <ADC_get_value+0xa>
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    4c70:	8f ef       	ldi	r24, 0xFF	; 255
    4c72:	9f ef       	ldi	r25, 0xFF	; 255
    4c74:	f8 01       	movw	r30, r16
    4c76:	91 83       	std	Z+1, r25	; 0x01
    4c78:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    4c7a:	42 e0       	ldi	r20, 0x02	; 2
    4c7c:	be 01       	movw	r22, r28
    4c7e:	6f 5f       	subi	r22, 0xFF	; 255
    4c80:	7f 4f       	sbci	r23, 0xFF	; 255
    4c82:	8d e4       	ldi	r24, 0x4D	; 77
    4c84:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4c88:	81 11       	cpse	r24, r1
    4c8a:	0d c0       	rjmp	.+26     	; 0x4ca6 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    4c8c:	89 81       	ldd	r24, Y+1	; 0x01
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	98 2f       	mov	r25, r24
    4c92:	88 27       	eor	r24, r24
    4c94:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    4c96:	82 2b       	or	r24, r18
    4c98:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <calc_ppm_methane>
    4c9c:	f8 01       	movw	r30, r16
    4c9e:	91 83       	std	Z+1, r25	; 0x01
    4ca0:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    4ca4:	01 c0       	rjmp	.+2      	; 0x4ca8 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4ca6:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    4ca8:	0f 90       	pop	r0
    4caa:	0f 90       	pop	r0
    4cac:	df 91       	pop	r29
    4cae:	cf 91       	pop	r28
    4cb0:	1f 91       	pop	r17
    4cb2:	0f 91       	pop	r16
    4cb4:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00005436 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    5436:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <_data>
    543a:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <_data+0x1>
    543e:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    5442:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    5446:	a9 01       	movw	r20, r18
    5448:	4f 5f       	subi	r20, 0xFF	; 255
    544a:	5f 4f       	sbci	r21, 0xFF	; 255
    544c:	50 93 80 0f 	sts	0x0F80, r21	; 0x800f80 <cntSamples+0x1>
    5450:	40 93 7f 0f 	sts	0x0F7F, r20	; 0x800f7f <cntSamples>
    5454:	22 0f       	add	r18, r18
    5456:	33 1f       	adc	r19, r19
    5458:	82 0f       	add	r24, r18
    545a:	93 1f       	adc	r25, r19
    545c:	0e 94 30 26 	call	0x4c60	; 0x4c60 <ADC_get_value>
	if(cntSamples>=_nSamples){
    5460:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    5464:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    5468:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <_nSamples>
    546c:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <_nSamples+0x1>
    5470:	28 17       	cp	r18, r24
    5472:	39 07       	cpc	r19, r25
    5474:	10 f0       	brcs	.+4      	; 0x547a <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    5476:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <TC0_HAL_stop>
    547a:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

000068c8 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    68c8:	0e 94 ba 34 	call	0x6974	; 0x6974 <TC0_HAL_start>
	vect_ADC_do_sample();
    68cc:	0e 94 1b 2a 	call	0x5436	; 0x5436 <vect_ADC_do_sample>
    68d0:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00006292 <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    6292:	80 93 a0 0f 	sts	0x0FA0, r24	; 0x800fa0 <_powerUpTime>
	cntPowerUpTime=0;
    6296:	10 92 9f 0f 	sts	0x0F9F, r1	; 0x800f9f <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    629a:	81 e0       	ldi	r24, 0x01	; 1
    629c:	0e 94 9e 32 	call	0x653c	; 0x653c <PM_HAL_meth_power>
	
	//Setup timer
	//TC0_HAL_init(60, &vect_ADC_heat_timeout);
	TC0_HAL_init(1, &vect_ADC_heat_timeout);
    62a0:	6d e2       	ldi	r22, 0x2D	; 45
    62a2:	72 e3       	ldi	r23, 0x32	; 50
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <TC0_HAL_init>
	TC0_HAL_start();
    62aa:	0e 94 ba 34 	call	0x6974	; 0x6974 <TC0_HAL_start>
    62ae:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

0000692c <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    692c:	80 e0       	ldi	r24, 0x00	; 0
    692e:	0e 94 9e 32 	call	0x653c	; 0x653c <PM_HAL_meth_power>
    6932:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006616 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6616:	20 91 9f 0f 	lds	r18, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    661a:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    661e:	81 e0       	ldi	r24, 0x01	; 1
    6620:	29 17       	cp	r18, r25
    6622:	08 f4       	brcc	.+2      	; 0x6626 <ADC_meth_sens_ready+0x10>
    6624:	80 e0       	ldi	r24, 0x00	; 0
}
    6626:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

0000565c <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    565c:	ef 92       	push	r14
    565e:	ff 92       	push	r15
    5660:	0f 93       	push	r16
    5662:	1f 93       	push	r17
	Vc=Vcc;
    5664:	60 93 67 0f 	sts	0x0F67, r22	; 0x800f67 <Vc>
    5668:	70 93 68 0f 	sts	0x0F68, r23	; 0x800f68 <Vc+0x1>
    566c:	80 93 69 0f 	sts	0x0F69, r24	; 0x800f69 <Vc+0x2>
    5670:	90 93 6a 0f 	sts	0x0F6A, r25	; 0x800f6a <Vc+0x3>
	RRL=Rrl;
    5674:	20 93 63 0f 	sts	0x0F63, r18	; 0x800f63 <RRL>
    5678:	30 93 64 0f 	sts	0x0F64, r19	; 0x800f64 <RRL+0x1>
    567c:	40 93 65 0f 	sts	0x0F65, r20	; 0x800f65 <RRL+0x2>
    5680:	50 93 66 0f 	sts	0x0F66, r21	; 0x800f66 <RRL+0x3>
	PPM_factor=PPMfactor;
    5684:	e0 92 5f 0f 	sts	0x0F5F, r14	; 0x800f5f <PPM_factor>
    5688:	f0 92 60 0f 	sts	0x0F60, r15	; 0x800f60 <PPM_factor+0x1>
    568c:	00 93 61 0f 	sts	0x0F61, r16	; 0x800f61 <PPM_factor+0x2>
    5690:	10 93 62 0f 	sts	0x0F62, r17	; 0x800f62 <PPM_factor+0x3>
}
    5694:	1f 91       	pop	r17
    5696:	0f 91       	pop	r16
    5698:	ff 90       	pop	r15
    569a:	ef 90       	pop	r14
    569c:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

000064ba <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    64ba:	60 e4       	ldi	r22, 0x40	; 64
    64bc:	70 e0       	ldi	r23, 0x00	; 0
    64be:	80 e8       	ldi	r24, 0x80	; 128
    64c0:	0e 94 2f 33 	call	0x665e	; 0x665e <eeprom_read_byte>
    64c4:	91 e0       	ldi	r25, 0x01	; 1
    64c6:	81 11       	cpse	r24, r1
    64c8:	01 c0       	rjmp	.+2      	; 0x64cc <EM_has_deveui+0x12>
    64ca:	90 e0       	ldi	r25, 0x00	; 0
}
    64cc:	89 2f       	mov	r24, r25
    64ce:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

000064d0 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    64d0:	61 e4       	ldi	r22, 0x41	; 65
    64d2:	70 e0       	ldi	r23, 0x00	; 0
    64d4:	80 e8       	ldi	r24, 0x80	; 128
    64d6:	0e 94 2f 33 	call	0x665e	; 0x665e <eeprom_read_byte>
    64da:	91 e0       	ldi	r25, 0x01	; 1
    64dc:	81 11       	cpse	r24, r1
    64de:	01 c0       	rjmp	.+2      	; 0x64e2 <EM_has_appeui+0x12>
    64e0:	90 e0       	ldi	r25, 0x00	; 0
}
    64e2:	89 2f       	mov	r24, r25
    64e4:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

000064e6 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    64e6:	62 e4       	ldi	r22, 0x42	; 66
    64e8:	70 e0       	ldi	r23, 0x00	; 0
    64ea:	80 e8       	ldi	r24, 0x80	; 128
    64ec:	0e 94 2f 33 	call	0x665e	; 0x665e <eeprom_read_byte>
    64f0:	91 e0       	ldi	r25, 0x01	; 1
    64f2:	81 11       	cpse	r24, r1
    64f4:	01 c0       	rjmp	.+2      	; 0x64f8 <EM_has_appkey+0x12>
    64f6:	90 e0       	ldi	r25, 0x00	; 0
}
    64f8:	89 2f       	mov	r24, r25
    64fa:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00005940 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    5940:	cf 92       	push	r12
    5942:	df 92       	push	r13
    5944:	ef 92       	push	r14
    5946:	6b 01       	movw	r12, r22
    5948:	e8 2e       	mov	r14, r24
    594a:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    594e:	40 97       	sbiw	r24, 0x10	; 16
    5950:	79 f4       	brne	.+30     	; 0x5970 <EM_set_deveui+0x30>
    5952:	20 e1       	ldi	r18, 0x10	; 16
    5954:	30 e0       	ldi	r19, 0x00	; 0
    5956:	40 e0       	ldi	r20, 0x00	; 0
    5958:	50 e0       	ldi	r21, 0x00	; 0
    595a:	8e 2d       	mov	r24, r14
    595c:	b6 01       	movw	r22, r12
    595e:	0e 94 c9 2a 	call	0x5592	; 0x5592 <eeprom_update_block>
    5962:	61 e0       	ldi	r22, 0x01	; 1
    5964:	80 e4       	ldi	r24, 0x40	; 64
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	0e 94 71 30 	call	0x60e2	; 0x60e2 <eeprom_update_byte>
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	01 c0       	rjmp	.+2      	; 0x5972 <EM_set_deveui+0x32>
    5970:	80 e0       	ldi	r24, 0x00	; 0
    5972:	ef 90       	pop	r14
    5974:	df 90       	pop	r13
    5976:	cf 90       	pop	r12
    5978:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00005d6c <EM_get_deveui>:
    5d6c:	0f 93       	push	r16
    5d6e:	1f 93       	push	r17
    5d70:	cf 93       	push	r28
    5d72:	8c 01       	movw	r16, r24
    5d74:	0e 94 5d 32 	call	0x64ba	; 0x64ba <EM_has_deveui>
    5d78:	c8 2f       	mov	r28, r24
    5d7a:	88 23       	and	r24, r24
    5d7c:	51 f0       	breq	.+20     	; 0x5d92 <EM_get_deveui+0x26>
    5d7e:	20 e1       	ldi	r18, 0x10	; 16
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	40 e0       	ldi	r20, 0x00	; 0
    5d84:	50 e0       	ldi	r21, 0x00	; 0
    5d86:	60 e0       	ldi	r22, 0x00	; 0
    5d88:	c8 01       	movw	r24, r16
    5d8a:	0e 94 5f 30 	call	0x60be	; 0x60be <eeprom_read_block>
    5d8e:	f8 01       	movw	r30, r16
    5d90:	10 8a       	std	Z+16, r1	; 0x10
    5d92:	8c 2f       	mov	r24, r28
    5d94:	cf 91       	pop	r28
    5d96:	1f 91       	pop	r17
    5d98:	0f 91       	pop	r16
    5d9a:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

0000597a <EM_set_appeui>:
    597a:	cf 92       	push	r12
    597c:	df 92       	push	r13
    597e:	ef 92       	push	r14
    5980:	6b 01       	movw	r12, r22
    5982:	e8 2e       	mov	r14, r24
    5984:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    5988:	40 97       	sbiw	r24, 0x10	; 16
    598a:	79 f4       	brne	.+30     	; 0x59aa <EM_set_appeui+0x30>
    598c:	20 e1       	ldi	r18, 0x10	; 16
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	40 e1       	ldi	r20, 0x10	; 16
    5992:	50 e0       	ldi	r21, 0x00	; 0
    5994:	8e 2d       	mov	r24, r14
    5996:	b6 01       	movw	r22, r12
    5998:	0e 94 c9 2a 	call	0x5592	; 0x5592 <eeprom_update_block>
    599c:	61 e0       	ldi	r22, 0x01	; 1
    599e:	81 e4       	ldi	r24, 0x41	; 65
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	0e 94 71 30 	call	0x60e2	; 0x60e2 <eeprom_update_byte>
    59a6:	81 e0       	ldi	r24, 0x01	; 1
    59a8:	01 c0       	rjmp	.+2      	; 0x59ac <EM_set_appeui+0x32>
    59aa:	80 e0       	ldi	r24, 0x00	; 0
    59ac:	ef 90       	pop	r14
    59ae:	df 90       	pop	r13
    59b0:	cf 90       	pop	r12
    59b2:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00005d9c <EM_get_appeui>:
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
    5da0:	cf 93       	push	r28
    5da2:	8c 01       	movw	r16, r24
    5da4:	0e 94 68 32 	call	0x64d0	; 0x64d0 <EM_has_appeui>
    5da8:	c8 2f       	mov	r28, r24
    5daa:	88 23       	and	r24, r24
    5dac:	51 f0       	breq	.+20     	; 0x5dc2 <EM_get_appeui+0x26>
    5dae:	20 e1       	ldi	r18, 0x10	; 16
    5db0:	30 e0       	ldi	r19, 0x00	; 0
    5db2:	40 e1       	ldi	r20, 0x10	; 16
    5db4:	50 e0       	ldi	r21, 0x00	; 0
    5db6:	60 e0       	ldi	r22, 0x00	; 0
    5db8:	c8 01       	movw	r24, r16
    5dba:	0e 94 5f 30 	call	0x60be	; 0x60be <eeprom_read_block>
    5dbe:	f8 01       	movw	r30, r16
    5dc0:	10 8a       	std	Z+16, r1	; 0x10
    5dc2:	8c 2f       	mov	r24, r28
    5dc4:	cf 91       	pop	r28
    5dc6:	1f 91       	pop	r17
    5dc8:	0f 91       	pop	r16
    5dca:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

000059b4 <EM_set_appkey>:
    59b4:	cf 92       	push	r12
    59b6:	df 92       	push	r13
    59b8:	ef 92       	push	r14
    59ba:	6b 01       	movw	r12, r22
    59bc:	e8 2e       	mov	r14, r24
    59be:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    59c2:	80 97       	sbiw	r24, 0x20	; 32
    59c4:	79 f4       	brne	.+30     	; 0x59e4 <EM_set_appkey+0x30>
    59c6:	20 e2       	ldi	r18, 0x20	; 32
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	40 e2       	ldi	r20, 0x20	; 32
    59cc:	50 e0       	ldi	r21, 0x00	; 0
    59ce:	8e 2d       	mov	r24, r14
    59d0:	b6 01       	movw	r22, r12
    59d2:	0e 94 c9 2a 	call	0x5592	; 0x5592 <eeprom_update_block>
    59d6:	61 e0       	ldi	r22, 0x01	; 1
    59d8:	82 e4       	ldi	r24, 0x42	; 66
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	0e 94 71 30 	call	0x60e2	; 0x60e2 <eeprom_update_byte>
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	01 c0       	rjmp	.+2      	; 0x59e6 <EM_set_appkey+0x32>
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	ef 90       	pop	r14
    59e8:	df 90       	pop	r13
    59ea:	cf 90       	pop	r12
    59ec:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00005dcc <EM_get_appkey>:
    5dcc:	0f 93       	push	r16
    5dce:	1f 93       	push	r17
    5dd0:	cf 93       	push	r28
    5dd2:	8c 01       	movw	r16, r24
    5dd4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <EM_has_appkey>
    5dd8:	c8 2f       	mov	r28, r24
    5dda:	88 23       	and	r24, r24
    5ddc:	51 f0       	breq	.+20     	; 0x5df2 <EM_get_appkey+0x26>
    5dde:	20 e2       	ldi	r18, 0x20	; 32
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	40 e2       	ldi	r20, 0x20	; 32
    5de4:	50 e0       	ldi	r21, 0x00	; 0
    5de6:	60 e0       	ldi	r22, 0x00	; 0
    5de8:	c8 01       	movw	r24, r16
    5dea:	0e 94 5f 30 	call	0x60be	; 0x60be <eeprom_read_block>
    5dee:	f8 01       	movw	r30, r16
    5df0:	10 a2       	std	Z+32, r1	; 0x20
    5df2:	8c 2f       	mov	r24, r28
    5df4:	cf 91       	pop	r28
    5df6:	1f 91       	pop	r17
    5df8:	0f 91       	pop	r16
    5dfa:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

0000672c <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    672c:	ab 01       	movw	r20, r22
    672e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    6730:	83 e4       	ldi	r24, 0x43	; 67
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	0e 94 51 32 	call	0x64a2	; 0x64a2 <eeprom_update_dword>
    6738:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

000062b0 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62b0:	cf 93       	push	r28
    62b2:	df 93       	push	r29
    62b4:	ec 01       	movw	r28, r24
    62b6:	63 e4       	ldi	r22, 0x43	; 67
    62b8:	70 e0       	ldi	r23, 0x00	; 0
    62ba:	80 e0       	ldi	r24, 0x00	; 0
    62bc:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <eeprom_read_dword>
    62c0:	68 83       	st	Y, r22
    62c2:	79 83       	std	Y+1, r23	; 0x01
    62c4:	8a 83       	std	Y+2, r24	; 0x02
    62c6:	9b 83       	std	Y+3, r25	; 0x03
    62c8:	df 91       	pop	r29
    62ca:	cf 91       	pop	r28
    62cc:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

0000673a <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    673a:	ab 01       	movw	r20, r22
    673c:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    673e:	87 e4       	ldi	r24, 0x47	; 71
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	0e 94 51 32 	call	0x64a2	; 0x64a2 <eeprom_update_dword>
    6746:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

000062ce <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    62d2:	ec 01       	movw	r28, r24
    62d4:	67 e4       	ldi	r22, 0x47	; 71
    62d6:	70 e0       	ldi	r23, 0x00	; 0
    62d8:	80 e0       	ldi	r24, 0x00	; 0
    62da:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <eeprom_read_dword>
    62de:	68 83       	st	Y, r22
    62e0:	79 83       	std	Y+1, r23	; 0x01
    62e2:	8a 83       	std	Y+2, r24	; 0x02
    62e4:	9b 83       	std	Y+3, r25	; 0x03
    62e6:	df 91       	pop	r29
    62e8:	cf 91       	pop	r28
    62ea:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00006748 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    6748:	ab 01       	movw	r20, r22
    674a:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    674c:	8b e4       	ldi	r24, 0x4B	; 75
    674e:	90 e0       	ldi	r25, 0x00	; 0
    6750:	0e 94 51 32 	call	0x64a2	; 0x64a2 <eeprom_update_dword>
    6754:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

000062ec <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62ec:	cf 93       	push	r28
    62ee:	df 93       	push	r29
    62f0:	ec 01       	movw	r28, r24
    62f2:	6b e4       	ldi	r22, 0x4B	; 75
    62f4:	70 e0       	ldi	r23, 0x00	; 0
    62f6:	80 e0       	ldi	r24, 0x00	; 0
    62f8:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <eeprom_read_dword>
    62fc:	68 83       	st	Y, r22
    62fe:	79 83       	std	Y+1, r23	; 0x01
    6300:	8a 83       	std	Y+2, r24	; 0x02
    6302:	9b 83       	std	Y+3, r25	; 0x03
    6304:	df 91       	pop	r29
    6306:	cf 91       	pop	r28
    6308:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00006756 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    6756:	24 2f       	mov	r18, r20
    6758:	30 e0       	ldi	r19, 0x00	; 0
    675a:	44 e6       	ldi	r20, 0x64	; 100
    675c:	50 e0       	ldi	r21, 0x00	; 0
    675e:	0e 94 c9 2a 	call	0x5592	; 0x5592 <eeprom_update_block>
    6762:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00006680 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    6680:	26 2f       	mov	r18, r22
    6682:	30 e0       	ldi	r19, 0x00	; 0
    6684:	44 e6       	ldi	r20, 0x64	; 100
    6686:	50 e0       	ldi	r21, 0x00	; 0
    6688:	60 e0       	ldi	r22, 0x00	; 0
    668a:	0e 94 5f 30 	call	0x60be	; 0x60be <eeprom_read_block>
    668e:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

000067fa <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    67fa:	68 2f       	mov	r22, r24
    67fc:	8f e4       	ldi	r24, 0x4F	; 79
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	0e 94 71 30 	call	0x60e2	; 0x60e2 <eeprom_update_byte>
    6804:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00006806 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    6806:	6f e4       	ldi	r22, 0x4F	; 79
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	80 e0       	ldi	r24, 0x00	; 0
    680c:	0e 94 2f 33 	call	0x665e	; 0x665e <eeprom_read_byte>
}
    6810:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00006812 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    6812:	bc 01       	movw	r22, r24
    6814:	80 e5       	ldi	r24, 0x50	; 80
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	0e 94 45 34 	call	0x688a	; 0x688a <eeprom_update_word>
    681c:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000681e <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    681e:	60 e5       	ldi	r22, 0x50	; 80
    6820:	70 e0       	ldi	r23, 0x00	; 0
    6822:	80 e0       	ldi	r24, 0x00	; 0
    6824:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <eeprom_read_word>
}
    6828:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

0000682a <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    682a:	68 2f       	mov	r22, r24
    682c:	82 e5       	ldi	r24, 0x52	; 82
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	0e 94 71 30 	call	0x60e2	; 0x60e2 <eeprom_update_byte>
    6834:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00006836 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    6836:	62 e5       	ldi	r22, 0x52	; 82
    6838:	70 e0       	ldi	r23, 0x00	; 0
    683a:	80 e0       	ldi	r24, 0x00	; 0
    683c:	0e 94 2f 33 	call	0x665e	; 0x665e <eeprom_read_byte>
    6840:	08 95       	ret

Disassembly of section .text.cb_blink:

00006980 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    6980:	0e 94 82 34 	call	0x6904	; 0x6904 <PM_HAL_LED_toggle>
    6984:	08 95       	ret

Disassembly of section .text.blink:

0000502a <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    502a:	cf 93       	push	r28
    502c:	df 93       	push	r29
    502e:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    5030:	c0 e0       	ldi	r28, 0x00	; 0
    5032:	19 c0       	rjmp	.+50     	; 0x5066 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    503a:	2f ef       	ldi	r18, 0xFF	; 255
    503c:	82 e5       	ldi	r24, 0x52	; 82
    503e:	97 e0       	ldi	r25, 0x07	; 7
    5040:	21 50       	subi	r18, 0x01	; 1
    5042:	80 40       	sbci	r24, 0x00	; 0
    5044:	90 40       	sbci	r25, 0x00	; 0
    5046:	e1 f7       	brne	.-8      	; 0x5040 <blink+0x16>
    5048:	00 c0       	rjmp	.+0      	; 0x504a <blink+0x20>
    504a:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    5052:	2f ef       	ldi	r18, 0xFF	; 255
    5054:	82 e5       	ldi	r24, 0x52	; 82
    5056:	97 e0       	ldi	r25, 0x07	; 7
    5058:	21 50       	subi	r18, 0x01	; 1
    505a:	80 40       	sbci	r24, 0x00	; 0
    505c:	90 40       	sbci	r25, 0x00	; 0
    505e:	e1 f7       	brne	.-8      	; 0x5058 <blink+0x2e>
    5060:	00 c0       	rjmp	.+0      	; 0x5062 <blink+0x38>
    5062:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    5064:	cf 5f       	subi	r28, 0xFF	; 255
    5066:	cd 17       	cp	r28, r29
    5068:	28 f3       	brcs	.-54     	; 0x5034 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
}
    5070:	df 91       	pop	r29
    5072:	cf 91       	pop	r28
    5074:	08 95       	ret

Disassembly of section .text.err_code:

000059ee <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    59ee:	cf 93       	push	r28
    59f0:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    59f8:	2f ef       	ldi	r18, 0xFF	; 255
    59fa:	83 ed       	ldi	r24, 0xD3	; 211
    59fc:	90 e3       	ldi	r25, 0x30	; 48
    59fe:	21 50       	subi	r18, 0x01	; 1
    5a00:	80 40       	sbci	r24, 0x00	; 0
    5a02:	90 40       	sbci	r25, 0x00	; 0
    5a04:	e1 f7       	brne	.-8      	; 0x59fe <err_code+0x10>
    5a06:	00 c0       	rjmp	.+0      	; 0x5a08 <err_code+0x1a>
    5a08:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    5a0a:	8c 2f       	mov	r24, r28
    5a0c:	0e 94 15 28 	call	0x502a	; 0x502a <blink>
    5a10:	2f ef       	ldi	r18, 0xFF	; 255
    5a12:	89 e6       	ldi	r24, 0x69	; 105
    5a14:	98 e1       	ldi	r25, 0x18	; 24
    5a16:	21 50       	subi	r18, 0x01	; 1
    5a18:	80 40       	sbci	r24, 0x00	; 0
    5a1a:	90 40       	sbci	r25, 0x00	; 0
    5a1c:	e1 f7       	brne	.-8      	; 0x5a16 <err_code+0x28>
    5a1e:	00 c0       	rjmp	.+0      	; 0x5a20 <err_code+0x32>
    5a20:	00 00       	nop
	_delay_ms(1000);
}
    5a22:	cf 91       	pop	r28
    5a24:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00006764 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    6764:	80 ec       	ldi	r24, 0xC0	; 192
    6766:	94 e3       	ldi	r25, 0x34	; 52
    6768:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TC2_HAL_subscribe>
    676c:	80 93 a1 0f 	sts	0x0FA1, r24	; 0x800fa1 <cbPointer>
    6770:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00006690 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    6690:	80 91 a1 0f 	lds	r24, 0x0FA1	; 0x800fa1 <cbPointer>
    6694:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6698:	80 e0       	ldi	r24, 0x00	; 0
    669a:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    669e:	08 95       	ret

Disassembly of section .text.LED_join_success:

000056e0 <LED_join_success>:
}

void LED_join_success(){
    56e0:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    56e2:	c0 e0       	ldi	r28, 0x00	; 0
    56e4:	19 c0       	rjmp	.+50     	; 0x5718 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    56ec:	2f ef       	ldi	r18, 0xFF	; 255
    56ee:	80 e7       	ldi	r24, 0x70	; 112
    56f0:	92 e0       	ldi	r25, 0x02	; 2
    56f2:	21 50       	subi	r18, 0x01	; 1
    56f4:	80 40       	sbci	r24, 0x00	; 0
    56f6:	90 40       	sbci	r25, 0x00	; 0
    56f8:	e1 f7       	brne	.-8      	; 0x56f2 <LED_join_success+0x12>
    56fa:	00 c0       	rjmp	.+0      	; 0x56fc <LED_join_success+0x1c>
    56fc:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    56fe:	80 e0       	ldi	r24, 0x00	; 0
    5700:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
    5704:	2f ef       	ldi	r18, 0xFF	; 255
    5706:	80 e7       	ldi	r24, 0x70	; 112
    5708:	92 e0       	ldi	r25, 0x02	; 2
    570a:	21 50       	subi	r18, 0x01	; 1
    570c:	80 40       	sbci	r24, 0x00	; 0
    570e:	90 40       	sbci	r25, 0x00	; 0
    5710:	e1 f7       	brne	.-8      	; 0x570a <LED_join_success+0x2a>
    5712:	00 c0       	rjmp	.+0      	; 0x5714 <LED_join_success+0x34>
    5714:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    5716:	cf 5f       	subi	r28, 0xFF	; 255
    5718:	ca 30       	cpi	r28, 0x0A	; 10
    571a:	28 f3       	brcs	.-54     	; 0x56e6 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    571c:	cf 91       	pop	r28
    571e:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00006934 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    6934:	83 e0       	ldi	r24, 0x03	; 3
    6936:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <err_code>
    693a:	08 95       	ret

Disassembly of section .text.LED_conf_err:

0000693c <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    693c:	85 e0       	ldi	r24, 0x05	; 5
    693e:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <err_code>
    6942:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

00006944 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    6944:	87 e0       	ldi	r24, 0x07	; 7
    6946:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <err_code>
    694a:	08 95       	ret

Disassembly of section .text.parse_err:

00004bb0 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    4bb0:	cf 92       	push	r12
    4bb2:	df 92       	push	r13
    4bb4:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    4bb6:	6c 01       	movw	r12, r24
    4bb8:	20 e8       	ldi	r18, 0x80	; 128
    4bba:	e2 2e       	mov	r14, r18
    4bbc:	24 e1       	ldi	r18, 0x14	; 20
    4bbe:	38 e0       	ldi	r19, 0x08	; 8
    4bc0:	40 e0       	ldi	r20, 0x00	; 0
    4bc2:	8e 2d       	mov	r24, r14
    4bc4:	b6 01       	movw	r22, r12
    4bc6:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    4bca:	89 2b       	or	r24, r25
    4bcc:	a1 f0       	breq	.+40     	; 0x4bf6 <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    4bce:	2f e1       	ldi	r18, 0x1F	; 31
    4bd0:	38 e0       	ldi	r19, 0x08	; 8
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	8e 2d       	mov	r24, r14
    4bd6:	b6 01       	movw	r22, r12
    4bd8:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    4bdc:	89 2b       	or	r24, r25
    4bde:	69 f0       	breq	.+26     	; 0x4bfa <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    4be0:	26 e2       	ldi	r18, 0x26	; 38
    4be2:	38 e0       	ldi	r19, 0x08	; 8
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	8e 2d       	mov	r24, r14
    4be8:	b6 01       	movw	r22, r12
    4bea:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    4bee:	89 2b       	or	r24, r25
    4bf0:	31 f4       	brne	.+12     	; 0x4bfe <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    4bf2:	83 e0       	ldi	r24, 0x03	; 3
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    4bf6:	82 e0       	ldi	r24, 0x02	; 2
    4bf8:	03 c0       	rjmp	.+6      	; 0x4c00 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    4bfa:	82 e0       	ldi	r24, 0x02	; 2
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
}
    4c00:	ef 90       	pop	r14
    4c02:	df 90       	pop	r13
    4c04:	cf 90       	pop	r12
    4c06:	08 95       	ret

Disassembly of section .text.JN_join_network:

00001646 <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	28 97       	sbiw	r28, 0x08	; 8
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	5c 01       	movw	r10, r24
    166a:	6b 01       	movw	r12, r22
    166c:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    166e:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1670:	e1 2f       	mov	r30, r17
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	ed 30       	cpi	r30, 0x0D	; 13
    1676:	f1 05       	cpc	r31, r1
    1678:	d8 f7       	brcc	.-10     	; 0x1670 <JN_join_network+0x2a>
    167a:	e2 5c       	subi	r30, 0xC2	; 194
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	0c 94 3f 34 	jmp	0x687e	; 0x687e <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    1682:	0e 94 8a 34 	call	0x6914	; 0x6914 <rn2483_reset_active>
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	89 e6       	ldi	r24, 0x69	; 105
    168a:	98 e1       	ldi	r25, 0x18	; 24
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	80 40       	sbci	r24, 0x00	; 0
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	e1 f7       	brne	.-8      	; 0x168c <JN_join_network+0x46>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <JN_join_network+0x50>
    1696:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    1698:	0e 94 8e 34 	call	0x691c	; 0x691c <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    169c:	4c e0       	ldi	r20, 0x0C	; 12
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	ce 01       	movw	r24, r28
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
    16ac:	24 e3       	ldi	r18, 0x34	; 52
    16ae:	38 e0       	ldi	r19, 0x08	; 8
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
    16bc:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16be:	d8 cf       	rjmp	.-80     	; 0x1670 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    16c0:	4b e3       	ldi	r20, 0x3B	; 59
    16c2:	58 e0       	ldi	r21, 0x08	; 8
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	8e e5       	ldi	r24, 0x5E	; 94
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    16ce:	6e e5       	ldi	r22, 0x5E	; 94
    16d0:	72 e0       	ldi	r23, 0x02	; 2
    16d2:	80 e8       	ldi	r24, 0x80	; 128
    16d4:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    16d8:	4c e0       	ldi	r20, 0x0C	; 12
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	63 e0       	ldi	r22, 0x03	; 3
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    16e8:	29 e4       	ldi	r18, 0x49	; 73
    16ea:	38 e0       	ldi	r19, 0x08	; 8
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	ce 01       	movw	r24, r28
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    16f8:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16fa:	ba cf       	rjmp	.-140    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    16fc:	b5 01       	movw	r22, r10
    16fe:	8e e5       	ldi	r24, 0x5E	; 94
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	0e 94 8c 29 	call	0x5318	; 0x5318 <mac_set_deveui>
				attach_ending(lm_msg);
    1706:	8e e5       	ldi	r24, 0x5E	; 94
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
				uart0_hal_send_string(lm_msg);
    170e:	6e e5       	ldi	r22, 0x5E	; 94
    1710:	72 e0       	ldi	r23, 0x02	; 2
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1718:	4c e0       	ldi	r20, 0x0C	; 12
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	ce 01       	movw	r24, r28
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1728:	29 e4       	ldi	r18, 0x49	; 73
    172a:	38 e0       	ldi	r19, 0x08	; 8
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1738:	11 e0       	ldi	r17, 0x01	; 1
			break;
    173a:	9a cf       	rjmp	.-204    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    173c:	b7 01       	movw	r22, r14
    173e:	8e e5       	ldi	r24, 0x5E	; 94
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <mac_set_appkey>
				attach_ending(lm_msg);
    1746:	8e e5       	ldi	r24, 0x5E	; 94
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
				uart0_hal_send_string(lm_msg);
    174e:	6e e5       	ldi	r22, 0x5E	; 94
    1750:	72 e0       	ldi	r23, 0x02	; 2
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    1758:	4c e0       	ldi	r20, 0x0C	; 12
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1768:	29 e4       	ldi	r18, 0x49	; 73
    176a:	38 e0       	ldi	r19, 0x08	; 8
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1778:	11 e0       	ldi	r17, 0x01	; 1
			break;
    177a:	7a cf       	rjmp	.-268    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    177c:	b6 01       	movw	r22, r12
    177e:	8e e5       	ldi	r24, 0x5E	; 94
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	0e 94 b0 29 	call	0x5360	; 0x5360 <mac_set_appeui>
				attach_ending(lm_msg);
    1786:	8e e5       	ldi	r24, 0x5E	; 94
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
				uart0_hal_send_string(lm_msg);
    178e:	6e e5       	ldi	r22, 0x5E	; 94
    1790:	72 e0       	ldi	r23, 0x02	; 2
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    1798:	4c e0       	ldi	r20, 0x0C	; 12
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	66 e0       	ldi	r22, 0x06	; 6
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    17a8:	29 e4       	ldi	r18, 0x49	; 73
    17aa:	38 e0       	ldi	r19, 0x08	; 8
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	ce 01       	movw	r24, r28
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    17b8:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17ba:	5a cf       	rjmp	.-332    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	8e e5       	ldi	r24, 0x5E	; 94
    17c0:	92 e0       	ldi	r25, 0x02	; 2
    17c2:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <mac_set_ADR>
				attach_ending(lm_msg);
    17c6:	8e e5       	ldi	r24, 0x5E	; 94
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
				uart0_hal_send_string(lm_msg);
    17ce:	6e e5       	ldi	r22, 0x5E	; 94
    17d0:	72 e0       	ldi	r23, 0x02	; 2
    17d2:	80 e8       	ldi	r24, 0x80	; 128
    17d4:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    17d8:	4c e0       	ldi	r20, 0x0C	; 12
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	67 e0       	ldi	r22, 0x07	; 7
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    17e8:	29 e4       	ldi	r18, 0x49	; 73
    17ea:	38 e0       	ldi	r19, 0x08	; 8
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	ce 01       	movw	r24, r28
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    17f8:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17fa:	3a cf       	rjmp	.-396    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    17fc:	4c e4       	ldi	r20, 0x4C	; 76
    17fe:	58 e0       	ldi	r21, 0x08	; 8
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	8e e5       	ldi	r24, 0x5E	; 94
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    180a:	6e e5       	ldi	r22, 0x5E	; 94
    180c:	72 e0       	ldi	r23, 0x02	; 2
    180e:	80 e8       	ldi	r24, 0x80	; 128
    1810:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1814:	4c e0       	ldi	r20, 0x0C	; 12
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	68 e0       	ldi	r22, 0x08	; 8
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1824:	29 e4       	ldi	r18, 0x49	; 73
    1826:	38 e0       	ldi	r19, 0x08	; 8
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	ce 01       	movw	r24, r28
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1834:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1836:	1c cf       	rjmp	.-456    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1838:	45 e5       	ldi	r20, 0x55	; 85
    183a:	58 e0       	ldi	r21, 0x08	; 8
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	8e e5       	ldi	r24, 0x5E	; 94
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1846:	6e e5       	ldi	r22, 0x5E	; 94
    1848:	72 e0       	ldi	r23, 0x02	; 2
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1850:	4a e0       	ldi	r20, 0x0A	; 10
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	69 e0       	ldi	r22, 0x09	; 9
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1860:	29 e4       	ldi	r18, 0x49	; 73
    1862:	38 e0       	ldi	r19, 0x08	; 8
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	ce 01       	movw	r24, r28
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1870:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1872:	fe ce       	rjmp	.-516    	; 0x1670 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1874:	4a e0       	ldi	r20, 0x0A	; 10
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	6b e0       	ldi	r22, 0x0B	; 11
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	ce 01       	movw	r24, r28
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    1884:	23 e6       	ldi	r18, 0x63	; 99
    1886:	38 e0       	ldi	r19, 0x08	; 8
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	ce 01       	movw	r24, r28
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1894:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1896:	ec ce       	rjmp	.-552    	; 0x1670 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    1898:	8e e5       	ldi	r24, 0x5E	; 94
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <parse_err>
    18a0:	14 c0       	rjmp	.+40     	; 0x18ca <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    18a2:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <uart0_hal_message_ready>
    18a6:	88 23       	and	r24, r24
    18a8:	09 f4       	brne	.+2      	; 0x18ac <JN_join_network+0x266>
    18aa:	e2 ce       	rjmp	.-572    	; 0x1670 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    18ac:	8e e5       	ldi	r24, 0x5E	; 94
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    18b4:	6e e5       	ldi	r22, 0x5E	; 94
    18b6:	72 e0       	ldi	r23, 0x02	; 2
    18b8:	ce 01       	movw	r24, r28
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <util_matchMessage>
    18c0:	18 2f       	mov	r17, r24
    18c2:	d6 ce       	rjmp	.-596    	; 0x1670 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    18ca:	28 96       	adiw	r28, 0x08	; 8
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00006472 <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    6472:	80 ec       	ldi	r24, 0xC0	; 192
    6474:	91 e3       	ldi	r25, 0x31	; 49
    6476:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TC2_HAL_subscribe>
    647a:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <subPointer>
	busy=true;
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <busy>
	cnt=0;
    6484:	10 92 a4 0f 	sts	0x0FA4, r1	; 0x800fa4 <cnt>
    6488:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006380 <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    6380:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <cnt>
    6384:	8f 5f       	subi	r24, 0xFF	; 255
    6386:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    638a:	8f 31       	cpi	r24, 0x1F	; 31
    638c:	30 f0       	brcs	.+12     	; 0x639a <cb_block_uplink+0x1a>
		busy=false;
    638e:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
		TC2_HAL_cancel(subPointer);
    6392:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    6396:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TC2_HAL_cancel>
    639a:	08 95       	ret

Disassembly of section .text.LM_join_network:

00006986 <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    6986:	0e 94 23 0b 	call	0x1646	; 0x1646 <JN_join_network>
}
    698a:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00005f48 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    5f48:	1f 93       	push	r17
    5f4a:	cf 93       	push	r28
    5f4c:	df 93       	push	r29
    5f4e:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    5f50:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
    5f54:	91 11       	cpse	r25, r1
    5f56:	0a c0       	rjmp	.+20     	; 0x5f6c <LM_send_uplink+0x24>
    5f58:	16 2f       	mov	r17, r22
    5f5a:	e9 01       	movw	r28, r18
	set_block_uplink();
    5f5c:	0e 94 39 32 	call	0x6472	; 0x6472 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    5f60:	41 2f       	mov	r20, r17
    5f62:	be 01       	movw	r22, r28
    5f64:	84 e6       	ldi	r24, 0x64	; 100
    5f66:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <SU_send_uplink>
    5f6a:	01 c0       	rjmp	.+2      	; 0x5f6e <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    5f6c:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    5f6e:	df 91       	pop	r29
    5f70:	cf 91       	pop	r28
    5f72:	1f 91       	pop	r17
    5f74:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00006628 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    6628:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
	TC2_HAL_cancel(subPointer);
    662c:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    6630:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TC2_HAL_cancel>
	return SC_put_to_sleep();
    6634:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <SC_put_to_sleep>
}
    6638:	08 95       	ret

Disassembly of section .text.LM_wake_up:

0000698c <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    698c:	0e 94 b5 23 	call	0x476a	; 0x476a <SC_wake_up>
}
    6990:	08 95       	ret

Disassembly of section .text.LM_is_free:

000068d2 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    68d2:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
}
    68d6:	81 e0       	ldi	r24, 0x01	; 1
    68d8:	89 27       	eor	r24, r25
    68da:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00006992 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    6992:	0e 94 3e 2a 	call	0x547c	; 0x547c <util_reset_module>
}
    6996:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00006998 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    6998:	0e 94 6e 21 	call	0x42dc	; 0x42dc <util_lora_forward_msg>
    699c:	08 95       	ret

Disassembly of section .text.LM_send_break:

0000699e <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    699e:	0e 94 a6 34 	call	0x694c	; 0x694c <util_send_break>
    69a2:	08 95       	ret

Disassembly of section .text.tohex:

00004162 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    4162:	6f 92       	push	r6
    4164:	7f 92       	push	r7
    4166:	8f 92       	push	r8
    4168:	ef 92       	push	r14
    416a:	ff 92       	push	r15
    416c:	0f 93       	push	r16
    416e:	1f 93       	push	r17
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	7c 01       	movw	r14, r24
    4176:	3a 01       	movw	r6, r20
    4178:	86 2e       	mov	r8, r22
    417a:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    417c:	c0 e0       	ldi	r28, 0x00	; 0
    417e:	d0 e0       	ldi	r29, 0x00	; 0
    4180:	25 c0       	rjmp	.+74     	; 0x41cc <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    4182:	a8 2d       	mov	r26, r8
    4184:	c3 01       	movw	r24, r6
    4186:	8c 0f       	add	r24, r28
    4188:	9d 1f       	adc	r25, r29
    418a:	a1 1d       	adc	r26, r1
    418c:	d7 fd       	sbrc	r29, 7
    418e:	aa 95       	dec	r26
    4190:	fc 01       	movw	r30, r24
    4192:	24 91       	lpm	r18, Z
    4194:	a7 fd       	sbrc	r26, 7
    4196:	20 81       	ld	r18, Z
    4198:	ce 01       	movw	r24, r28
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	1f 92       	push	r1
    41a0:	2f 93       	push	r18
    41a2:	21 ea       	ldi	r18, 0xA1	; 161
    41a4:	37 e0       	ldi	r19, 0x07	; 7
    41a6:	40 e0       	ldi	r20, 0x00	; 0
    41a8:	4f 93       	push	r20
    41aa:	3f 93       	push	r19
    41ac:	2f 93       	push	r18
    41ae:	8e 0d       	add	r24, r14
    41b0:	9f 1d       	adc	r25, r15
    41b2:	9f 93       	push	r25
    41b4:	8f 93       	push	r24
    41b6:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    41ba:	21 96       	adiw	r28, 0x01	; 1
    41bc:	8d b7       	in	r24, 0x3d	; 61
    41be:	9e b7       	in	r25, 0x3e	; 62
    41c0:	07 96       	adiw	r24, 0x07	; 7
    41c2:	0f b6       	in	r0, 0x3f	; 63
    41c4:	f8 94       	cli
    41c6:	9e bf       	out	0x3e, r25	; 62
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	8d bf       	out	0x3d, r24	; 61
    41cc:	c0 17       	cp	r28, r16
    41ce:	d1 07       	cpc	r29, r17
    41d0:	c4 f2       	brlt	.-80     	; 0x4182 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	1f 91       	pop	r17
    41d8:	0f 91       	pop	r16
    41da:	ff 90       	pop	r15
    41dc:	ef 90       	pop	r14
    41de:	8f 90       	pop	r8
    41e0:	7f 90       	pop	r7
    41e2:	6f 90       	pop	r6
    41e4:	08 95       	ret

Disassembly of section .text.attach_ending:

0000639c <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    639c:	fc 01       	movw	r30, r24
    639e:	01 90       	ld	r0, Z+
    63a0:	00 20       	and	r0, r0
    63a2:	e9 f7       	brne	.-6      	; 0x639e <attach_ending+0x2>
    63a4:	cf 01       	movw	r24, r30
    63a6:	23 e0       	ldi	r18, 0x03	; 3
    63a8:	30 e0       	ldi	r19, 0x00	; 0
    63aa:	46 ea       	ldi	r20, 0xA6	; 166
    63ac:	57 e0       	ldi	r21, 0x07	; 7
    63ae:	60 e0       	ldi	r22, 0x00	; 0
    63b0:	01 97       	sbiw	r24, 0x01	; 1
    63b2:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
    63b6:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00005c74 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    5c74:	cf 93       	push	r28
    5c76:	df 93       	push	r29
    5c78:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    5c7a:	0e 94 a3 31 	call	0x6346	; 0x6346 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    5c7e:	fe 01       	movw	r30, r28
    5c80:	01 90       	ld	r0, Z+
    5c82:	00 20       	and	r0, r0
    5c84:	e9 f7       	brne	.-6      	; 0x5c80 <cmd_with_ending+0xc>
    5c86:	cf 01       	movw	r24, r30
    5c88:	23 e0       	ldi	r18, 0x03	; 3
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	46 ea       	ldi	r20, 0xA6	; 166
    5c8e:	57 e0       	ldi	r21, 0x07	; 7
    5c90:	60 e0       	ldi	r22, 0x00	; 0
    5c92:	01 97       	sbiw	r24, 0x01	; 1
    5c94:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return strlen(buffer);
    5c98:	be 01       	movw	r22, r28
    5c9a:	80 e8       	ldi	r24, 0x80	; 128
    5c9c:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
}
    5ca0:	df 91       	pop	r29
    5ca2:	cf 91       	pop	r28
    5ca4:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

000049e4 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    49e4:	cf 93       	push	r28
    49e6:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    49e8:	44 36       	cpi	r20, 0x64	; 100
    49ea:	51 05       	cpc	r21, r1
    49ec:	61 05       	cpc	r22, r1
    49ee:	71 05       	cpc	r23, r1
    49f0:	18 f1       	brcs	.+70     	; 0x4a38 <sys_sleep_cmd+0x54>
    49f2:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    49f4:	7f 93       	push	r23
    49f6:	6f 93       	push	r22
    49f8:	5f 93       	push	r21
    49fa:	4f 93       	push	r20
    49fc:	89 ea       	ldi	r24, 0xA9	; 169
    49fe:	97 e0       	ldi	r25, 0x07	; 7
    4a00:	a0 e0       	ldi	r26, 0x00	; 0
    4a02:	af 93       	push	r26
    4a04:	9f 93       	push	r25
    4a06:	8f 93       	push	r24
    4a08:	83 eb       	ldi	r24, 0xB3	; 179
    4a0a:	97 e0       	ldi	r25, 0x07	; 7
    4a0c:	a0 e0       	ldi	r26, 0x00	; 0
    4a0e:	af 93       	push	r26
    4a10:	9f 93       	push	r25
    4a12:	8f 93       	push	r24
    4a14:	df 93       	push	r29
    4a16:	cf 93       	push	r28
    4a18:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    return strlen(buffer);
    4a1c:	be 01       	movw	r22, r28
    4a1e:	80 e8       	ldi	r24, 0x80	; 128
    4a20:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4a24:	2d b7       	in	r18, 0x3d	; 61
    4a26:	3e b7       	in	r19, 0x3e	; 62
    4a28:	24 5f       	subi	r18, 0xF4	; 244
    4a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	3e bf       	out	0x3e, r19	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	2d bf       	out	0x3d, r18	; 61
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    4a38:	8f ef       	ldi	r24, 0xFF	; 255
    4a3a:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    4a3c:	df 91       	pop	r29
    4a3e:	cf 91       	pop	r28
    4a40:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00004f42 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    4f42:	0f 93       	push	r16
    4f44:	1f 93       	push	r17
    4f46:	cf 93       	push	r28
    4f48:	df 93       	push	r29
    4f4a:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    4f4c:	2f 93       	push	r18
    4f4e:	1f 93       	push	r17
    4f50:	0f 93       	push	r16
    4f52:	6f 93       	push	r22
    4f54:	5f 93       	push	r21
    4f56:	4f 93       	push	r20
    4f58:	8a eb       	ldi	r24, 0xBA	; 186
    4f5a:	97 e0       	ldi	r25, 0x07	; 7
    4f5c:	a0 e0       	ldi	r26, 0x00	; 0
    4f5e:	af 93       	push	r26
    4f60:	9f 93       	push	r25
    4f62:	8f 93       	push	r24
    4f64:	df 93       	push	r29
    4f66:	cf 93       	push	r28
    4f68:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    return strlen(buffer);
    4f6c:	be 01       	movw	r22, r28
    4f6e:	80 e8       	ldi	r24, 0x80	; 128
    4f70:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4f74:	2d b7       	in	r18, 0x3d	; 61
    4f76:	3e b7       	in	r19, 0x3e	; 62
    4f78:	25 5f       	subi	r18, 0xF5	; 245
    4f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7c:	0f b6       	in	r0, 0x3f	; 63
    4f7e:	f8 94       	cli
    4f80:	3e bf       	out	0x3e, r19	; 62
    4f82:	0f be       	out	0x3f, r0	; 63
    4f84:	2d bf       	out	0x3d, r18	; 61
}
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	1f 91       	pop	r17
    4f8c:	0f 91       	pop	r16
    4f8e:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00005318 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    5318:	cf 92       	push	r12
    531a:	df 92       	push	r13
    531c:	ef 92       	push	r14
    531e:	0f 93       	push	r16
    5320:	1f 93       	push	r17
    5322:	cf 93       	push	r28
    5324:	df 93       	push	r29
    5326:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    5328:	6b 01       	movw	r12, r22
    532a:	80 e8       	ldi	r24, 0x80	; 128
    532c:	e8 2e       	mov	r14, r24
    532e:	8e 2d       	mov	r24, r14
    5330:	b6 01       	movw	r22, r12
    5332:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    5336:	40 97       	sbiw	r24, 0x10	; 16
    5338:	49 f4       	brne	.+18     	; 0x534c <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    533a:	2e 2d       	mov	r18, r14
    533c:	86 01       	movw	r16, r12
    533e:	40 ec       	ldi	r20, 0xC0	; 192
    5340:	57 e0       	ldi	r21, 0x07	; 7
    5342:	60 e0       	ldi	r22, 0x00	; 0
    5344:	ce 01       	movw	r24, r28
    5346:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <mac_set_parameter>
    534a:	02 c0       	rjmp	.+4      	; 0x5350 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    534c:	8f ef       	ldi	r24, 0xFF	; 255
    534e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	1f 91       	pop	r17
    5356:	0f 91       	pop	r16
    5358:	ef 90       	pop	r14
    535a:	df 90       	pop	r13
    535c:	cf 90       	pop	r12
    535e:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00005360 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    5360:	cf 92       	push	r12
    5362:	df 92       	push	r13
    5364:	ef 92       	push	r14
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    5370:	6b 01       	movw	r12, r22
    5372:	80 e8       	ldi	r24, 0x80	; 128
    5374:	e8 2e       	mov	r14, r24
    5376:	8e 2d       	mov	r24, r14
    5378:	b6 01       	movw	r22, r12
    537a:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    537e:	40 97       	sbiw	r24, 0x10	; 16
    5380:	49 f4       	brne	.+18     	; 0x5394 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    5382:	2e 2d       	mov	r18, r14
    5384:	86 01       	movw	r16, r12
    5386:	4f ec       	ldi	r20, 0xCF	; 207
    5388:	57 e0       	ldi	r21, 0x07	; 7
    538a:	60 e0       	ldi	r22, 0x00	; 0
    538c:	ce 01       	movw	r24, r28
    538e:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <mac_set_parameter>
    5392:	02 c0       	rjmp	.+4      	; 0x5398 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    5394:	8f ef       	ldi	r24, 0xFF	; 255
    5396:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5398:	df 91       	pop	r29
    539a:	cf 91       	pop	r28
    539c:	1f 91       	pop	r17
    539e:	0f 91       	pop	r16
    53a0:	ef 90       	pop	r14
    53a2:	df 90       	pop	r13
    53a4:	cf 90       	pop	r12
    53a6:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

000053a8 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    53a8:	cf 92       	push	r12
    53aa:	df 92       	push	r13
    53ac:	ef 92       	push	r14
    53ae:	0f 93       	push	r16
    53b0:	1f 93       	push	r17
    53b2:	cf 93       	push	r28
    53b4:	df 93       	push	r29
    53b6:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    53b8:	6b 01       	movw	r12, r22
    53ba:	80 e8       	ldi	r24, 0x80	; 128
    53bc:	e8 2e       	mov	r14, r24
    53be:	8e 2d       	mov	r24, r14
    53c0:	b6 01       	movw	r22, r12
    53c2:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    53c6:	80 97       	sbiw	r24, 0x20	; 32
    53c8:	49 f4       	brne	.+18     	; 0x53dc <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    53ca:	2e 2d       	mov	r18, r14
    53cc:	86 01       	movw	r16, r12
    53ce:	4e ed       	ldi	r20, 0xDE	; 222
    53d0:	57 e0       	ldi	r21, 0x07	; 7
    53d2:	60 e0       	ldi	r22, 0x00	; 0
    53d4:	ce 01       	movw	r24, r28
    53d6:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <mac_set_parameter>
    53da:	02 c0       	rjmp	.+4      	; 0x53e0 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    53dc:	8f ef       	ldi	r24, 0xFF	; 255
    53de:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	1f 91       	pop	r17
    53e6:	0f 91       	pop	r16
    53e8:	ef 90       	pop	r14
    53ea:	df 90       	pop	r13
    53ec:	cf 90       	pop	r12
    53ee:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00005dfc <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    5dfc:	0f 93       	push	r16
    5dfe:	1f 93       	push	r17
	if(state==0){
    5e00:	61 11       	cpse	r22, r1
    5e02:	09 c0       	rjmp	.+18     	; 0x5e16 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5e04:	0d ee       	ldi	r16, 0xED	; 237
    5e06:	17 e0       	ldi	r17, 0x07	; 7
    5e08:	20 e0       	ldi	r18, 0x00	; 0
    5e0a:	41 ef       	ldi	r20, 0xF1	; 241
    5e0c:	57 e0       	ldi	r21, 0x07	; 7
    5e0e:	60 e0       	ldi	r22, 0x00	; 0
    5e10:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <mac_set_parameter>
    5e14:	08 c0       	rjmp	.+16     	; 0x5e26 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5e16:	0d ef       	ldi	r16, 0xFD	; 253
    5e18:	17 e0       	ldi	r17, 0x07	; 7
    5e1a:	20 e0       	ldi	r18, 0x00	; 0
    5e1c:	41 ef       	ldi	r20, 0xF1	; 241
    5e1e:	57 e0       	ldi	r21, 0x07	; 7
    5e20:	60 e0       	ldi	r22, 0x00	; 0
    5e22:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <mac_set_parameter>
	}
}
    5e26:	1f 91       	pop	r17
    5e28:	0f 91       	pop	r16
    5e2a:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00003990 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    3990:	df 92       	push	r13
    3992:	ef 92       	push	r14
    3994:	ff 92       	push	r15
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	cf 93       	push	r28
    399c:	df 93       	push	r29
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
    39a2:	c7 56       	subi	r28, 0x67	; 103
    39a4:	d1 09       	sbc	r29, r1
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    39b2:	9f ef       	ldi	r25, 0xFF	; 255
    39b4:	96 0f       	add	r25, r22
    39b6:	9f 3d       	cpi	r25, 0xDF	; 223
    39b8:	68 f5       	brcc	.+90     	; 0x3a14 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    39ba:	9f ef       	ldi	r25, 0xFF	; 255
    39bc:	92 0f       	add	r25, r18
    39be:	93 33       	cpi	r25, 0x33	; 51
    39c0:	60 f5       	brcc	.+88     	; 0x3a1a <mac_tx_confirmed+0x8a>
    39c2:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	60 e8       	ldi	r22, 0x80	; 128
    39c8:	ce 01       	movw	r24, r28
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	7c 01       	movw	r14, r24
    39ce:	0e 94 b1 20 	call	0x4162	; 0x4162 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    39d2:	c7 01       	movw	r24, r14
    39d4:	a0 e8       	ldi	r26, 0x80	; 128
    39d6:	af 93       	push	r26
    39d8:	9f 93       	push	r25
    39da:	ef 92       	push	r14
    39dc:	1f 92       	push	r1
    39de:	df 92       	push	r13
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	98 e0       	ldi	r25, 0x08	; 8
    39e4:	a0 e0       	ldi	r26, 0x00	; 0
    39e6:	af 93       	push	r26
    39e8:	9f 93       	push	r25
    39ea:	8f 93       	push	r24
    39ec:	8b e0       	ldi	r24, 0x0B	; 11
    39ee:	98 e0       	ldi	r25, 0x08	; 8
    39f0:	a0 e0       	ldi	r26, 0x00	; 0
    39f2:	af 93       	push	r26
    39f4:	9f 93       	push	r25
    39f6:	8f 93       	push	r24
    39f8:	1f 93       	push	r17
    39fa:	0f 93       	push	r16
    39fc:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    
	
    return strlen(buffer);
    3a00:	b8 01       	movw	r22, r16
    3a02:	80 e8       	ldi	r24, 0x80	; 128
    3a04:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	05 c0       	rjmp	.+10     	; 0x3a1e <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    3a14:	8f ef       	ldi	r24, 0xFF	; 255
    3a16:	9f ef       	ldi	r25, 0xFF	; 255
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    3a1a:	8f ef       	ldi	r24, 0xFF	; 255
    3a1c:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    3a1e:	c9 59       	subi	r28, 0x99	; 153
    3a20:	df 4f       	sbci	r29, 0xFF	; 255
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	ff 90       	pop	r15
    3a36:	ef 90       	pop	r14
    3a38:	df 90       	pop	r13
    3a3a:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000048ae <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    48ae:	cf 92       	push	r12
    48b0:	df 92       	push	r13
    48b2:	ef 92       	push	r14
    48b4:	6b 01       	movw	r12, r22
    48b6:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    48b8:	2c e6       	ldi	r18, 0x6C	; 108
    48ba:	38 e0       	ldi	r19, 0x08	; 8
    48bc:	40 e0       	ldi	r20, 0x00	; 0
    48be:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    48c2:	89 2b       	or	r24, r25
    48c4:	e9 f0       	breq	.+58     	; 0x4900 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    48c6:	27 e7       	ldi	r18, 0x77	; 119
    48c8:	38 e0       	ldi	r19, 0x08	; 8
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	8e 2d       	mov	r24, r14
    48ce:	b6 01       	movw	r22, r12
    48d0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    48d4:	89 2b       	or	r24, r25
    48d6:	b1 f0       	breq	.+44     	; 0x4904 <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    48d8:	2f e7       	ldi	r18, 0x7F	; 127
    48da:	38 e0       	ldi	r19, 0x08	; 8
    48dc:	40 e0       	ldi	r20, 0x00	; 0
    48de:	8e 2d       	mov	r24, r14
    48e0:	b6 01       	movw	r22, r12
    48e2:	0e 94 43 29 	call	0x5286	; 0x5286 <util_strbeginswith>
    48e6:	81 11       	cpse	r24, r1
    48e8:	0f c0       	rjmp	.+30     	; 0x4908 <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    48ea:	26 e8       	ldi	r18, 0x86	; 134
    48ec:	38 e0       	ldi	r19, 0x08	; 8
    48ee:	40 e0       	ldi	r20, 0x00	; 0
    48f0:	8e 2d       	mov	r24, r14
    48f2:	b6 01       	movw	r22, r12
    48f4:	0e 94 43 29 	call	0x5286	; 0x5286 <util_strbeginswith>
    48f8:	88 23       	and	r24, r24
    48fa:	41 f0       	breq	.+16     	; 0x490c <decode_tx_response+0x5e>
    48fc:	85 e0       	ldi	r24, 0x05	; 5
    48fe:	07 c0       	rjmp	.+14     	; 0x490e <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4900:	82 e0       	ldi	r24, 0x02	; 2
    4902:	05 c0       	rjmp	.+10     	; 0x490e <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    4904:	84 e0       	ldi	r24, 0x04	; 4
    4906:	03 c0       	rjmp	.+6      	; 0x490e <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	01 c0       	rjmp	.+2      	; 0x490e <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    490c:	81 e0       	ldi	r24, 0x01	; 1
}
    490e:	ef 90       	pop	r14
    4910:	df 90       	pop	r13
    4912:	cf 90       	pop	r12
    4914:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00002fe2 <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	28 97       	sbiw	r28, 0x08	; 8
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	d8 2e       	mov	r13, r24
    3002:	7b 01       	movw	r14, r22
    3004:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    3006:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    3008:	12 30       	cpi	r17, 0x02	; 2
    300a:	09 f4       	brne	.+2      	; 0x300e <SU_send_uplink+0x2c>
    300c:	40 c0       	rjmp	.+128    	; 0x308e <SU_send_uplink+0xac>
    300e:	28 f4       	brcc	.+10     	; 0x301a <SU_send_uplink+0x38>
    3010:	11 23       	and	r17, r17
    3012:	49 f0       	breq	.+18     	; 0x3026 <SU_send_uplink+0x44>
    3014:	11 30       	cpi	r17, 0x01	; 1
    3016:	49 f1       	breq	.+82     	; 0x306a <SU_send_uplink+0x88>
    3018:	f7 cf       	rjmp	.-18     	; 0x3008 <SU_send_uplink+0x26>
    301a:	13 30       	cpi	r17, 0x03	; 3
    301c:	09 f4       	brne	.+2      	; 0x3020 <SU_send_uplink+0x3e>
    301e:	4e c0       	rjmp	.+156    	; 0x30bc <SU_send_uplink+0xda>
    3020:	14 30       	cpi	r17, 0x04	; 4
    3022:	d9 f1       	breq	.+118    	; 0x309a <SU_send_uplink+0xb8>
    3024:	f1 cf       	rjmp	.-30     	; 0x3008 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    3026:	20 2f       	mov	r18, r16
    3028:	a7 01       	movw	r20, r14
    302a:	6d 2d       	mov	r22, r13
    302c:	8e e5       	ldi	r24, 0x5E	; 94
    302e:	92 e0       	ldi	r25, 0x02	; 2
    3030:	0e 94 c8 1c 	call	0x3990	; 0x3990 <mac_tx_confirmed>
				attach_ending(lm_msg);
    3034:	8e e5       	ldi	r24, 0x5E	; 94
    3036:	92 e0       	ldi	r25, 0x02	; 2
    3038:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
				uart0_hal_send_string(lm_msg);
    303c:	6e e5       	ldi	r22, 0x5E	; 94
    303e:	72 e0       	ldi	r23, 0x02	; 2
    3040:	80 e8       	ldi	r24, 0x80	; 128
    3042:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    3046:	42 e0       	ldi	r20, 0x02	; 2
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	61 e0       	ldi	r22, 0x01	; 1
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	ce 01       	movw	r24, r28
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    3056:	27 e9       	ldi	r18, 0x97	; 151
    3058:	38 e0       	ldi	r19, 0x08	; 8
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	ce 01       	movw	r24, r28
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    3066:	14 e0       	ldi	r17, 0x04	; 4
			break;
    3068:	cf cf       	rjmp	.-98     	; 0x3008 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    306a:	42 e0       	ldi	r20, 0x02	; 2
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	63 e0       	ldi	r22, 0x03	; 3
    3070:	70 e0       	ldi	r23, 0x00	; 0
    3072:	ce 01       	movw	r24, r28
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	0e 94 27 34 	call	0x684e	; 0x684e <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    307a:	2a e9       	ldi	r18, 0x9A	; 154
    307c:	38 e0       	ldi	r19, 0x08	; 8
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	60 e0       	ldi	r22, 0x00	; 0
    3082:	ce 01       	movw	r24, r28
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	0e 94 2d 34 	call	0x685a	; 0x685a <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    308a:	14 e0       	ldi	r17, 0x04	; 4
			break;
    308c:	bd cf       	rjmp	.-134    	; 0x3008 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    308e:	6e e5       	ldi	r22, 0x5E	; 94
    3090:	72 e0       	ldi	r23, 0x02	; 2
    3092:	80 e8       	ldi	r24, 0x80	; 128
    3094:	0e 94 57 24 	call	0x48ae	; 0x48ae <decode_tx_response>
    3098:	12 c0       	rjmp	.+36     	; 0x30be <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    309a:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <uart0_hal_message_ready>
    309e:	88 23       	and	r24, r24
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <SU_send_uplink+0xc2>
    30a2:	b2 cf       	rjmp	.-156    	; 0x3008 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    30a4:	8e e5       	ldi	r24, 0x5E	; 94
    30a6:	92 e0       	ldi	r25, 0x02	; 2
    30a8:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    30ac:	6e e5       	ldi	r22, 0x5E	; 94
    30ae:	72 e0       	ldi	r23, 0x02	; 2
    30b0:	ce 01       	movw	r24, r28
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <util_matchMessage>
    30b8:	18 2f       	mov	r17, r24
    30ba:	a6 cf       	rjmp	.-180    	; 0x3008 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    30bc:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    30be:	28 96       	adiw	r28, 0x08	; 8
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	08 95       	ret

Disassembly of section .text.cb_counter:

000065f0 <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    65f0:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    65f4:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    65f8:	01 96       	adiw	r24, 0x01	; 1
    65fa:	90 93 86 0f 	sts	0x0F86, r25	; 0x800f86 <cnt+0x1>
    65fe:	80 93 85 0f 	sts	0x0F85, r24	; 0x800f85 <cnt>
    6602:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00005a26 <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    5a26:	40 e0       	ldi	r20, 0x00	; 0
    5a28:	5c e5       	ldi	r21, 0x5C	; 92
    5a2a:	66 e2       	ldi	r22, 0x26	; 38
    5a2c:	75 e0       	ldi	r23, 0x05	; 5
    5a2e:	8e e5       	ldi	r24, 0x5E	; 94
    5a30:	92 e0       	ldi	r25, 0x02	; 2
    5a32:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <sys_sleep_cmd>
	attach_ending(lm_msg);
    5a36:	8e e5       	ldi	r24, 0x5E	; 94
    5a38:	92 e0       	ldi	r25, 0x02	; 2
    5a3a:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
	uart0_hal_send_string(lm_msg);
    5a3e:	6e e5       	ldi	r22, 0x5E	; 94
    5a40:	72 e0       	ldi	r23, 0x02	; 2
    5a42:	80 e8       	ldi	r24, 0x80	; 128
    5a44:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
    5a48:	2f ef       	ldi	r18, 0xFF	; 255
    5a4a:	81 ee       	ldi	r24, 0xE1	; 225
    5a4c:	94 e0       	ldi	r25, 0x04	; 4
    5a4e:	21 50       	subi	r18, 0x01	; 1
    5a50:	80 40       	sbci	r24, 0x00	; 0
    5a52:	90 40       	sbci	r25, 0x00	; 0
    5a54:	e1 f7       	brne	.-8      	; 0x5a4e <SC_put_to_sleep+0x28>
    5a56:	00 c0       	rjmp	.+0      	; 0x5a58 <SC_put_to_sleep+0x32>
    5a58:	00 00       	nop
	//
	//uart0_hal_read_message_as_str(lm_msg);
	//
	//if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
	//return LM_STATUS_FATAL_ERROR;
}
    5a5a:	80 e0       	ldi	r24, 0x00	; 0
    5a5c:	08 95       	ret

Disassembly of section .text.SC_wake_up:

0000476a <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    476a:	85 e5       	ldi	r24, 0x55	; 85
    476c:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    4770:	10 92 86 0f 	sts	0x0F86, r1	; 0x800f86 <cnt+0x1>
    4774:	10 92 85 0f 	sts	0x0F85, r1	; 0x800f85 <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    4778:	88 ef       	ldi	r24, 0xF8	; 248
    477a:	92 e3       	ldi	r25, 0x32	; 50
    477c:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TC2_HAL_subscribe>
    4780:	80 93 a5 0f 	sts	0x0FA5, r24	; 0x800fa5 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    4784:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <uart0_hal_message_ready>
    4788:	81 11       	cpse	r24, r1
    478a:	06 c0       	rjmp	.+12     	; 0x4798 <SC_wake_up+0x2e>
    478c:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    4790:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    4794:	0a 97       	sbiw	r24, 0x0a	; 10
    4796:	b0 f3       	brcs	.-20     	; 0x4784 <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    4798:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <eventPointer>
    479c:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    47a0:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    47a4:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    47a8:	0a 97       	sbiw	r24, 0x0a	; 10
    47aa:	20 f0       	brcs	.+8      	; 0x47b4 <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    47ac:	0e 94 55 34 	call	0x68aa	; 0x68aa <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    47b4:	8e e5       	ldi	r24, 0x5E	; 94
    47b6:	92 e0       	ldi	r25, 0x02	; 2
    47b8:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    47bc:	6e e5       	ldi	r22, 0x5E	; 94
    47be:	72 e0       	ldi	r23, 0x02	; 2
    47c0:	80 e8       	ldi	r24, 0x80	; 128
    47c2:	29 ec       	ldi	r18, 0xC9	; 201
    47c4:	38 e0       	ldi	r19, 0x08	; 8
    47c6:	40 e0       	ldi	r20, 0x00	; 0
    47c8:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    47cc:	89 2b       	or	r24, r25
    47ce:	11 f4       	brne	.+4      	; 0x47d4 <SC_wake_up+0x6a>
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    47d6:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

00006842 <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    6842:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    6846:	8f 5f       	subi	r24, 0xFF	; 255
    6848:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <wd_cnt>
    684c:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

0000684e <util_setPendingStates>:
char lm_msg[200];

static void cb_watchdog_counter();

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    684e:	fc 01       	movw	r30, r24
    6850:	71 83       	std	Z+1, r23	; 0x01
    6852:	60 83       	st	Z, r22
	sd->failure_state=failed;
    6854:	53 83       	std	Z+3, r21	; 0x03
    6856:	42 83       	std	Z+2, r20	; 0x02
    6858:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

0000685a <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    685a:	fc 01       	movw	r30, r24
    685c:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    685e:	25 83       	std	Z+5, r18	; 0x05
    6860:	36 83       	std	Z+6, r19	; 0x06
    6862:	47 83       	std	Z+7, r20	; 0x07
    6864:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00005286 <util_strbeginswith>:
		return sd->failure_state;
	}
}


bool util_strbeginswith(const char *s1, const char *s2){
    5286:	6f 92       	push	r6
    5288:	7f 92       	push	r7
    528a:	8f 92       	push	r8
    528c:	cf 92       	push	r12
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	0f 93       	push	r16
    5294:	1f 93       	push	r17
    5296:	3b 01       	movw	r6, r22
    5298:	88 2e       	mov	r8, r24
    529a:	69 01       	movw	r12, r18
    529c:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    529e:	84 2f       	mov	r24, r20
    52a0:	b9 01       	movw	r22, r18
    52a2:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    52a6:	8c 01       	movw	r16, r24
    52a8:	4e 2d       	mov	r20, r14
    52aa:	96 01       	movw	r18, r12
    52ac:	88 2d       	mov	r24, r8
    52ae:	b3 01       	movw	r22, r6
    52b0:	0e 94 22 24 	call	0x4844	; 0x4844 <strncmp>
    52b4:	21 e0       	ldi	r18, 0x01	; 1
    52b6:	89 2b       	or	r24, r25
    52b8:	09 f0       	breq	.+2      	; 0x52bc <util_strbeginswith+0x36>
    52ba:	20 e0       	ldi	r18, 0x00	; 0
}
    52bc:	82 2f       	mov	r24, r18
    52be:	1f 91       	pop	r17
    52c0:	0f 91       	pop	r16
    52c2:	ef 90       	pop	r14
    52c4:	df 90       	pop	r13
    52c6:	cf 90       	pop	r12
    52c8:	8f 90       	pop	r8
    52ca:	7f 90       	pop	r7
    52cc:	6f 90       	pop	r6
    52ce:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00004aa0 <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    4aa0:	cf 93       	push	r28
    4aa2:	df 93       	push	r29
    4aa4:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    4aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa8:	81 30       	cpi	r24, 0x01	; 1
    4aaa:	91 f0       	breq	.+36     	; 0x4ad0 <util_matchMessage+0x30>
    4aac:	18 f0       	brcs	.+6      	; 0x4ab4 <util_matchMessage+0x14>
    4aae:	82 30       	cpi	r24, 0x02	; 2
    4ab0:	e9 f0       	breq	.+58     	; 0x4aec <util_matchMessage+0x4c>
    4ab2:	1f c0       	rjmp	.+62     	; 0x4af2 <util_matchMessage+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    4ab4:	2d 81       	ldd	r18, Y+5	; 0x05
    4ab6:	3e 81       	ldd	r19, Y+6	; 0x06
    4ab8:	4f 81       	ldd	r20, Y+7	; 0x07
    4aba:	80 e8       	ldi	r24, 0x80	; 128
    4abc:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    4ac0:	89 2b       	or	r24, r25
    4ac2:	19 f4       	brne	.+6      	; 0x4aca <util_matchMessage+0x2a>
    4ac4:	88 81       	ld	r24, Y
    4ac6:	99 81       	ldd	r25, Y+1	; 0x01
    4ac8:	16 c0       	rjmp	.+44     	; 0x4af6 <util_matchMessage+0x56>
    4aca:	8a 81       	ldd	r24, Y+2	; 0x02
    4acc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ace:	13 c0       	rjmp	.+38     	; 0x4af6 <util_matchMessage+0x56>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    4ad0:	2d 81       	ldd	r18, Y+5	; 0x05
    4ad2:	3e 81       	ldd	r19, Y+6	; 0x06
    4ad4:	4f 81       	ldd	r20, Y+7	; 0x07
    4ad6:	80 e8       	ldi	r24, 0x80	; 128
    4ad8:	0e 94 43 29 	call	0x5286	; 0x5286 <util_strbeginswith>
    4adc:	88 23       	and	r24, r24
    4ade:	19 f0       	breq	.+6      	; 0x4ae6 <util_matchMessage+0x46>
    4ae0:	88 81       	ld	r24, Y
    4ae2:	99 81       	ldd	r25, Y+1	; 0x01
    4ae4:	08 c0       	rjmp	.+16     	; 0x4af6 <util_matchMessage+0x56>
    4ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    4aea:	05 c0       	rjmp	.+10     	; 0x4af6 <util_matchMessage+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    4aec:	88 81       	ld	r24, Y
    4aee:	99 81       	ldd	r25, Y+1	; 0x01
    4af0:	02 c0       	rjmp	.+4      	; 0x4af6 <util_matchMessage+0x56>
		default:
		return sd->failure_state;
    4af2:	8a 81       	ldd	r24, Y+2	; 0x02
    4af4:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	08 95       	ret

Disassembly of section .text.util_reset_module:

0000547c <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    547c:	0e 94 8a 34 	call	0x6914	; 0x6914 <rn2483_reset_active>
    5480:	2f ef       	ldi	r18, 0xFF	; 255
    5482:	89 e6       	ldi	r24, 0x69	; 105
    5484:	98 e1       	ldi	r25, 0x18	; 24
    5486:	21 50       	subi	r18, 0x01	; 1
    5488:	80 40       	sbci	r24, 0x00	; 0
    548a:	90 40       	sbci	r25, 0x00	; 0
    548c:	e1 f7       	brne	.-8      	; 0x5486 <util_reset_module+0xa>
    548e:	00 c0       	rjmp	.+0      	; 0x5490 <util_reset_module+0x14>
    5490:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    5492:	0e 94 8e 34 	call	0x691c	; 0x691c <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    5496:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <uart0_hal_message_ready>
    549a:	88 23       	and	r24, r24
    549c:	e1 f3       	breq	.-8      	; 0x5496 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    549e:	8e e5       	ldi	r24, 0x5E	; 94
    54a0:	92 e0       	ldi	r25, 0x02	; 2
    54a2:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    54a6:	6e e5       	ldi	r22, 0x5E	; 94
    54a8:	72 e0       	ldi	r23, 0x02	; 2
    54aa:	80 e8       	ldi	r24, 0x80	; 128
    54ac:	24 ea       	ldi	r18, 0xA4	; 164
    54ae:	38 e0       	ldi	r19, 0x08	; 8
    54b0:	40 e0       	ldi	r20, 0x00	; 0
    54b2:	0e 94 43 29 	call	0x5286	; 0x5286 <util_strbeginswith>
    54b6:	88 23       	and	r24, r24
    54b8:	11 f0       	breq	.+4      	; 0x54be <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    54be:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    54c0:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

000042dc <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    42e2:	ab 01       	movw	r20, r22
    42e4:	68 2f       	mov	r22, r24
    42e6:	8e e5       	ldi	r24, 0x5E	; 94
    42e8:	92 e0       	ldi	r25, 0x02	; 2
    42ea:	0e 94 a3 31 	call	0x6346	; 0x6346 <strcpy>
	attach_ending(lm_msg);
    42ee:	8e e5       	ldi	r24, 0x5E	; 94
    42f0:	92 e0       	ldi	r25, 0x02	; 2
    42f2:	0e 94 ce 31 	call	0x639c	; 0x639c <attach_ending>
	uart0_hal_send_string(lm_msg);
    42f6:	6e e5       	ldi	r22, 0x5E	; 94
    42f8:	72 e0       	ldi	r23, 0x02	; 2
    42fa:	80 e8       	ldi	r24, 0x80	; 128
    42fc:	0e 94 7e 23 	call	0x46fc	; 0x46fc <uart0_hal_send_string>
	
	wd_cnt=0;
    4300:	10 92 a7 0f 	sts	0x0FA7, r1	; 0x800fa7 <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    4304:	81 e2       	ldi	r24, 0x21	; 33
    4306:	94 e3       	ldi	r25, 0x34	; 52
    4308:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TC2_HAL_subscribe>
    430c:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    4310:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <uart0_hal_message_ready>
    4314:	81 11       	cpse	r24, r1
    4316:	04 c0       	rjmp	.+8      	; 0x4320 <util_lora_forward_msg+0x44>
    4318:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    431c:	8f 30       	cpi	r24, 0x0F	; 15
    431e:	c0 f3       	brcs	.-16     	; 0x4310 <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    4320:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <wd_cb_pointer>
    4324:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TC2_HAL_cancel>
	if(wd_cnt>=15){
    4328:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    432c:	8f 30       	cpi	r24, 0x0F	; 15
    432e:	60 f0       	brcs	.+24     	; 0x4348 <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    4330:	2c e0       	ldi	r18, 0x0C	; 12
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	4b ea       	ldi	r20, 0xAB	; 171
    4336:	58 e0       	ldi	r21, 0x08	; 8
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	ce 01       	movw	r24, r28
    433c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		uart0_hal_read_message_as_str(res);
    4340:	ce 01       	movw	r24, r28
    4342:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
    4346:	03 c0       	rjmp	.+6      	; 0x434e <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    4348:	ce 01       	movw	r24, r28
    434a:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
	}
}
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	08 95       	ret

Disassembly of section .text.util_send_break:

0000694c <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    694c:	85 e5       	ldi	r24, 0x55	; 85
    694e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <uart0_hal_send_break>
    6952:	08 95       	ret

Disassembly of section .text.get_group_id:

000069a4 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    69a4:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <_groupId>
    69a8:	08 95       	ret

Disassembly of section .text.set_group_id:

000069aa <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    69aa:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <_groupId>
    69ae:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00005ca6 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    5ca6:	0f 93       	push	r16
    5ca8:	1f 93       	push	r17
    5caa:	cf 93       	push	r28
    5cac:	df 93       	push	r29
    5cae:	8c 01       	movw	r16, r24
    5cb0:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    5cb2:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <get_group_id>
    5cb6:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    5cb8:	2d 2f       	mov	r18, r29
    5cba:	a8 01       	movw	r20, r16
    5cbc:	68 2f       	mov	r22, r24
    5cbe:	86 e2       	ldi	r24, 0x26	; 38
    5cc0:	93 e0       	ldi	r25, 0x03	; 3
    5cc2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    5cc6:	81 e0       	ldi	r24, 0x01	; 1
    5cc8:	8c 0f       	add	r24, r28
    5cca:	0e 94 d5 34 	call	0x69aa	; 0x69aa <set_group_id>
}
    5cce:	df 91       	pop	r29
    5cd0:	cf 91       	pop	r28
    5cd2:	1f 91       	pop	r17
    5cd4:	0f 91       	pop	r16
    5cd6:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

0000461c <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    461c:	ef 92       	push	r14
    461e:	ff 92       	push	r15
    4620:	1f 93       	push	r17
    4622:	cf 93       	push	r28
    4624:	df 93       	push	r29
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
    462a:	2a 97       	sbiw	r28, 0x0a	; 10
    462c:	0f b6       	in	r0, 0x3f	; 63
    462e:	f8 94       	cli
    4630:	de bf       	out	0x3e, r29	; 62
    4632:	0f be       	out	0x3f, r0	; 63
    4634:	cd bf       	out	0x3d, r28	; 61
    4636:	18 2f       	mov	r17, r24
    4638:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    463a:	9e 01       	movw	r18, r28
    463c:	2f 5f       	subi	r18, 0xFF	; 255
    463e:	3f 4f       	sbci	r19, 0xFF	; 255
    4640:	ab 01       	movw	r20, r22
    4642:	68 2f       	mov	r22, r24
    4644:	86 e2       	ldi	r24, 0x26	; 38
    4646:	93 e0       	ldi	r25, 0x03	; 3
    4648:	0e 94 6e 20 	call	0x40dc	; 0x40dc <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    464c:	9e 01       	movw	r18, r28
    464e:	27 5f       	subi	r18, 0xF7	; 247
    4650:	3f 4f       	sbci	r19, 0xFF	; 255
    4652:	ae 01       	movw	r20, r28
    4654:	49 5f       	subi	r20, 0xF9	; 249
    4656:	5f 4f       	sbci	r21, 0xFF	; 255
    4658:	61 2f       	mov	r22, r17
    465a:	86 e2       	ldi	r24, 0x26	; 38
    465c:	93 e0       	ldi	r25, 0x03	; 3
    465e:	0e 94 67 2d 	call	0x5ace	; 0x5ace <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    4662:	29 85       	ldd	r18, Y+9	; 0x09
    4664:	3a 85       	ldd	r19, Y+10	; 0x0a
    4666:	4f 81       	ldd	r20, Y+7	; 0x07
    4668:	58 85       	ldd	r21, Y+8	; 0x08
    466a:	b7 01       	movw	r22, r14
    466c:	ce 01       	movw	r24, r28
    466e:	01 96       	adiw	r24, 0x01	; 1
    4670:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <mrpp_data_add_int16>
}
    4674:	2a 96       	adiw	r28, 0x0a	; 10
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	f8 94       	cli
    467a:	de bf       	out	0x3e, r29	; 62
    467c:	0f be       	out	0x3f, r0	; 63
    467e:	cd bf       	out	0x3d, r28	; 61
    4680:	df 91       	pop	r29
    4682:	cf 91       	pop	r28
    4684:	1f 91       	pop	r17
    4686:	ff 90       	pop	r15
    4688:	ef 90       	pop	r14
    468a:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00006106 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    6106:	cf 93       	push	r28
    6108:	df 93       	push	r29
    610a:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    610c:	86 e2       	ldi	r24, 0x26	; 38
    610e:	93 e0       	ldi	r25, 0x03	; 3
    6110:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <mrpp_state_is_body_ready>
    6114:	88 83       	st	Y, r24
    6116:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    6118:	89 2f       	mov	r24, r25
    611a:	80 95       	com	r24
    
}
    611c:	88 1f       	adc	r24, r24
    611e:	88 27       	eor	r24, r24
    6120:	88 1f       	adc	r24, r24
    6122:	df 91       	pop	r29
    6124:	cf 91       	pop	r28
    6126:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003e02 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3e02:	af 92       	push	r10
    3e04:	bf 92       	push	r11
    3e06:	cf 92       	push	r12
    3e08:	df 92       	push	r13
    3e0a:	ef 92       	push	r14
    3e0c:	ff 92       	push	r15
    3e0e:	0f 93       	push	r16
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
    3e16:	00 d0       	rcall	.+0      	; 0x3e18 <MRPP_get_ready_body_package+0x16>
    3e18:	00 d0       	rcall	.+0      	; 0x3e1a <MRPP_get_ready_body_package+0x18>
    3e1a:	1f 92       	push	r1
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	6b 01       	movw	r12, r22
    3e22:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    3e24:	9e 01       	movw	r18, r28
    3e26:	2b 5f       	subi	r18, 0xFB	; 251
    3e28:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2a:	79 01       	movw	r14, r18
    3e2c:	8e 01       	movw	r16, r28
    3e2e:	0d 5f       	subi	r16, 0xFD	; 253
    3e30:	1f 4f       	sbci	r17, 0xFF	; 255
    3e32:	23 50       	subi	r18, 0x03	; 3
    3e34:	31 09       	sbc	r19, r1
    3e36:	ae 01       	movw	r20, r28
    3e38:	4f 5f       	subi	r20, 0xFF	; 255
    3e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	86 e2       	ldi	r24, 0x26	; 38
    3e40:	93 e0       	ldi	r25, 0x03	; 3
    3e42:	0e 94 47 14 	call	0x288e	; 0x288e <mrpp_state_get_ready_body>
    
    if(!res) return false;
    3e46:	88 23       	and	r24, r24
    3e48:	b1 f0       	breq	.+44     	; 0x3e76 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    3e4a:	4d 81       	ldd	r20, Y+5	; 0x05
    3e4c:	83 e0       	ldi	r24, 0x03	; 3
    3e4e:	84 0f       	add	r24, r20
    3e50:	f5 01       	movw	r30, r10
    3e52:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    3e54:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <state>
    3e58:	f6 01       	movw	r30, r12
    3e5a:	80 83       	st	Z, r24
    package[1]=subId;
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    3e60:	8a 81       	ldd	r24, Y+2	; 0x02
    3e62:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	6b 81       	ldd	r22, Y+3	; 0x03
    3e68:	7c 81       	ldd	r23, Y+4	; 0x04
    3e6a:	c6 01       	movw	r24, r12
    3e6c:	03 96       	adiw	r24, 0x03	; 3
    3e6e:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <mrpp_data_get>

    return true;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	01 c0       	rjmp	.+2      	; 0x3e78 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    3e76:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	df 91       	pop	r29
    3e84:	cf 91       	pop	r28
    3e86:	1f 91       	pop	r17
    3e88:	0f 91       	pop	r16
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	bf 90       	pop	r11
    3e94:	af 90       	pop	r10
    3e96:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

00006866 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    6866:	bc 01       	movw	r22, r24
    6868:	86 e2       	ldi	r24, 0x26	; 38
    686a:	93 e0       	ldi	r25, 0x03	; 3
    686c:	0e 94 29 31 	call	0x6252	; 0x6252 <mrpp_state_set_body_sent>
    6870:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00006128 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    6128:	cf 93       	push	r28
    612a:	df 93       	push	r29
    612c:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    612e:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    6132:	fc 01       	movw	r30, r24
    6134:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    6136:	bf 01       	movw	r22, r30
    6138:	86 e2       	ldi	r24, 0x26	; 38
    613a:	93 e0       	ldi	r25, 0x03	; 3
    613c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <mrpp_state_get_header>
    *package_length+=1;
    6140:	8f 5f       	subi	r24, 0xFF	; 255
    6142:	88 83       	st	Y, r24
}
    6144:	df 91       	pop	r29
    6146:	cf 91       	pop	r28
    6148:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

0000614a <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    614a:	cf 93       	push	r28
    614c:	df 93       	push	r29
    614e:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6150:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    6154:	fc 01       	movw	r30, r24
    6156:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    6158:	bf 01       	movw	r22, r30
    615a:	86 e2       	ldi	r24, 0x26	; 38
    615c:	93 e0       	ldi	r25, 0x03	; 3
    615e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <mrpp_state_get_tail>
    *package_length+=1;
    6162:	8f 5f       	subi	r24, 0xFF	; 255
    6164:	88 83       	st	Y, r24
}
    6166:	df 91       	pop	r29
    6168:	cf 91       	pop	r28
    616a:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

000068dc <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    68dc:	86 e2       	ldi	r24, 0x26	; 38
    68de:	93 e0       	ldi	r25, 0x03	; 3
    68e0:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <mrpp_state_all_bodies_sent>
}
    68e4:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00003f2e <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    3f2e:	cf 92       	push	r12
    3f30:	df 92       	push	r13
    3f32:	ff 92       	push	r15
    3f34:	0f 93       	push	r16
    3f36:	1f 93       	push	r17
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3f3e:	94 2f       	mov	r25, r20
    3f40:	0c c0       	rjmp	.+24     	; 0x3f5a <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    3f42:	c9 2f       	mov	r28, r25
    3f44:	d0 e0       	ldi	r29, 0x00	; 0
    3f46:	e4 1b       	sub	r30, r20
    3f48:	f5 0b       	sbc	r31, r21
    3f4a:	ea 0f       	add	r30, r26
    3f4c:	fb 1f       	adc	r31, r27
    3f4e:	80 81       	ld	r24, Z
    3f50:	fe 01       	movw	r30, r28
    3f52:	e0 54       	subi	r30, 0x40	; 64
    3f54:	fc 4f       	sbci	r31, 0xFC	; 252
    3f56:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3f58:	9f 5f       	subi	r25, 0xFF	; 255
    3f5a:	e9 2f       	mov	r30, r25
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	6a 01       	movw	r12, r20
    3f60:	86 e0       	ldi	r24, 0x06	; 6
    3f62:	c8 0e       	add	r12, r24
    3f64:	d1 1c       	adc	r13, r1
    3f66:	ec 15       	cp	r30, r12
    3f68:	fd 05       	cpc	r31, r13
    3f6a:	58 f3       	brcs	.-42     	; 0x3f42 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    3f6c:	26 50       	subi	r18, 0x06	; 6
    3f6e:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    3f70:	36 95       	lsr	r19
    3f72:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    3f74:	49 5f       	subi	r20, 0xF9	; 249
    3f76:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    3f78:	a0 e0       	ldi	r26, 0x00	; 0
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	16 c0       	rjmp	.+44     	; 0x3faa <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    3f7e:	cd 01       	movw	r24, r26
    3f80:	88 0f       	add	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	f6 01       	movw	r30, r12
    3f86:	e8 0f       	add	r30, r24
    3f88:	f9 1f       	adc	r31, r25
    3f8a:	8b 01       	movw	r16, r22
    3f8c:	08 0f       	add	r16, r24
    3f8e:	19 1f       	adc	r17, r25
    3f90:	e8 01       	movw	r28, r16
    3f92:	f9 80       	ldd	r15, Y+1	; 0x01
    3f94:	e0 54       	subi	r30, 0x40	; 64
    3f96:	fc 4f       	sbci	r31, 0xFC	; 252
    3f98:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    3f9a:	84 0f       	add	r24, r20
    3f9c:	95 1f       	adc	r25, r21
    3f9e:	18 81       	ld	r17, Y
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	e0 54       	subi	r30, 0x40	; 64
    3fa4:	fc 4f       	sbci	r31, 0xFC	; 252
    3fa6:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    3fa8:	11 96       	adiw	r26, 0x01	; 1
    3faa:	a2 17       	cp	r26, r18
    3fac:	b3 07       	cpc	r27, r19
    3fae:	38 f3       	brcs	.-50     	; 0x3f7e <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	1f 91       	pop	r17
    3fb6:	0f 91       	pop	r16
    3fb8:	ff 90       	pop	r15
    3fba:	df 90       	pop	r13
    3fbc:	cf 90       	pop	r12
    3fbe:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00005e2c <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    5e2c:	cf 93       	push	r28
    5e2e:	df 93       	push	r29
    5e30:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    5e32:	20 e0       	ldi	r18, 0x00	; 0
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	0c c0       	rjmp	.+24     	; 0x5e50 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    5e38:	de 01       	movw	r26, r28
    5e3a:	a2 0f       	add	r26, r18
    5e3c:	b3 1f       	adc	r27, r19
    5e3e:	f9 01       	movw	r30, r18
    5e40:	e6 0f       	add	r30, r22
    5e42:	f7 1f       	adc	r31, r23
    5e44:	e0 54       	subi	r30, 0x40	; 64
    5e46:	fc 4f       	sbci	r31, 0xFC	; 252
    5e48:	90 81       	ld	r25, Z
    5e4a:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    5e4c:	2f 5f       	subi	r18, 0xFF	; 255
    5e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e50:	24 17       	cp	r18, r20
    5e52:	35 07       	cpc	r19, r21
    5e54:	88 f3       	brcs	.-30     	; 0x5e38 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    5e56:	df 91       	pop	r29
    5e58:	cf 91       	pop	r28
    5e5a:	08 95       	ret

Disassembly of section .text.add_data_types:

0000329a <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	dc 01       	movw	r26, r24
    32ac:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    32b0:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    32b2:	c1 2c       	mov	r12, r1
    32b4:	d1 2c       	mov	r13, r1
    32b6:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    32b8:	4a c0       	rjmp	.+148    	; 0x334e <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    32ba:	29 2f       	mov	r18, r25
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	f9 01       	movw	r30, r18
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	e2 0f       	add	r30, r18
    32d2:	f3 1f       	adc	r31, r19
    32d4:	ea 0f       	add	r30, r26
    32d6:	fb 1f       	adc	r31, r27
    32d8:	27 81       	ldd	r18, Z+7	; 0x07
    32da:	22 30       	cpi	r18, 0x02	; 2
    32dc:	a9 f0       	breq	.+42     	; 0x3308 <add_data_types+0x6e>
    32de:	24 30       	cpi	r18, 0x04	; 4
    32e0:	21 f1       	breq	.+72     	; 0x332a <add_data_types+0x90>
    32e2:	21 30       	cpi	r18, 0x01	; 1
    32e4:	91 f5       	brne	.+100    	; 0x334a <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    32e6:	01 e0       	ldi	r16, 0x01	; 1
    32e8:	10 e0       	ldi	r17, 0x00	; 0
    32ea:	04 2e       	mov	r0, r20
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <add_data_types+0x58>
    32ee:	00 0f       	add	r16, r16
    32f0:	11 1f       	adc	r17, r17
    32f2:	0a 94       	dec	r0
    32f4:	e2 f7       	brpl	.-8      	; 0x32ee <add_data_types+0x54>
    32f6:	01 2e       	mov	r0, r17
    32f8:	00 0c       	add	r0, r0
    32fa:	22 0b       	sbc	r18, r18
    32fc:	33 0b       	sbc	r19, r19
    32fe:	c0 2a       	or	r12, r16
    3300:	d1 2a       	or	r13, r17
    3302:	e2 2a       	or	r14, r18
    3304:	f3 2a       	or	r15, r19
                break;
    3306:	21 c0       	rjmp	.+66     	; 0x334a <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    3308:	02 e0       	ldi	r16, 0x02	; 2
    330a:	10 e0       	ldi	r17, 0x00	; 0
    330c:	04 2e       	mov	r0, r20
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <add_data_types+0x7a>
    3310:	00 0f       	add	r16, r16
    3312:	11 1f       	adc	r17, r17
    3314:	0a 94       	dec	r0
    3316:	e2 f7       	brpl	.-8      	; 0x3310 <add_data_types+0x76>
    3318:	01 2e       	mov	r0, r17
    331a:	00 0c       	add	r0, r0
    331c:	22 0b       	sbc	r18, r18
    331e:	33 0b       	sbc	r19, r19
    3320:	c0 2a       	or	r12, r16
    3322:	d1 2a       	or	r13, r17
    3324:	e2 2a       	or	r14, r18
    3326:	f3 2a       	or	r15, r19
                break;
    3328:	10 c0       	rjmp	.+32     	; 0x334a <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    332a:	03 e0       	ldi	r16, 0x03	; 3
    332c:	10 e0       	ldi	r17, 0x00	; 0
    332e:	04 2e       	mov	r0, r20
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <add_data_types+0x9c>
    3332:	00 0f       	add	r16, r16
    3334:	11 1f       	adc	r17, r17
    3336:	0a 94       	dec	r0
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <add_data_types+0x98>
    333a:	01 2e       	mov	r0, r17
    333c:	00 0c       	add	r0, r0
    333e:	22 0b       	sbc	r18, r18
    3340:	33 0b       	sbc	r19, r19
    3342:	c0 2a       	or	r12, r16
    3344:	d1 2a       	or	r13, r17
    3346:	e2 2a       	or	r14, r18
    3348:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    334a:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    334c:	9f 5f       	subi	r25, 0xFF	; 255
    334e:	12 96       	adiw	r26, 0x02	; 2
    3350:	8c 91       	ld	r24, X
    3352:	12 97       	sbiw	r26, 0x02	; 2
    3354:	98 17       	cp	r25, r24
    3356:	08 f4       	brcc	.+2      	; 0x335a <add_data_types+0xc0>
    3358:	b0 cf       	rjmp	.-160    	; 0x32ba <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    335a:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    335c:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    335e:	cd 82       	std	Y+5, r12	; 0x05
} 
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	ff 90       	pop	r15
    336a:	ef 90       	pop	r14
    336c:	df 90       	pop	r13
    336e:	cf 90       	pop	r12
    3370:	08 95       	ret

Disassembly of section .text.update_bodies:

00002260 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    2260:	cf 93       	push	r28
    2262:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    2264:	26 2f       	mov	r18, r22
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	c9 01       	movw	r24, r18
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f9 01       	movw	r30, r18
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	22 0f       	add	r18, r18
    2274:	33 1f       	adc	r19, r19
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	22 0f       	add	r18, r18
    227c:	33 1f       	adc	r19, r19
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	ea 0f       	add	r30, r26
    2284:	fb 1f       	adc	r31, r27
    2286:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    2288:	c0 e0       	ldi	r28, 0x00	; 0
    228a:	25 c0       	rjmp	.+74     	; 0x22d6 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    228c:	82 17       	cp	r24, r18
    228e:	93 07       	cpc	r25, r19
    2290:	09 f1       	breq	.+66     	; 0x22d4 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    2292:	a9 01       	movw	r20, r18
    2294:	44 0f       	add	r20, r20
    2296:	55 1f       	adc	r21, r21
    2298:	44 0f       	add	r20, r20
    229a:	55 1f       	adc	r21, r21
    229c:	44 0f       	add	r20, r20
    229e:	55 1f       	adc	r21, r21
    22a0:	f9 01       	movw	r30, r18
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	e4 0f       	add	r30, r20
    22a8:	f5 1f       	adc	r31, r21
    22aa:	ea 0f       	add	r30, r26
    22ac:	fb 1f       	adc	r31, r27
    22ae:	43 85       	ldd	r20, Z+11	; 0x0b
    22b0:	74 13       	cpse	r23, r20
    22b2:	10 c0       	rjmp	.+32     	; 0x22d4 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    22b4:	f9 01       	movw	r30, r18
    22b6:	ee 0f       	add	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	22 0f       	add	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	22 0f       	add	r18, r18
    22c4:	33 1f       	adc	r19, r19
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	ea 0f       	add	r30, r26
    22cc:	fb 1f       	adc	r31, r27
    22ce:	24 85       	ldd	r18, Z+12	; 0x0c
    22d0:	23 30       	cpi	r18, 0x03	; 3
    22d2:	41 f4       	brne	.+16     	; 0x22e4 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    22d4:	cf 5f       	subi	r28, 0xFF	; 255
    22d6:	2c 2f       	mov	r18, r28
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	28 17       	cp	r18, r24
    22dc:	39 07       	cpc	r19, r25
    22de:	b4 f2       	brlt	.-84     	; 0x228c <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    22e0:	21 e0       	ldi	r18, 0x01	; 1
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    22e4:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    22e6:	22 23       	and	r18, r18
    22e8:	39 f0       	breq	.+14     	; 0x22f8 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    22ea:	fd 01       	movw	r30, r26
    22ec:	e7 0f       	add	r30, r23
    22ee:	f1 1d       	adc	r31, r1
    22f0:	e4 58       	subi	r30, 0x84	; 132
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	21 e0       	ldi	r18, 0x01	; 1
    22f6:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    22f8:	9c 01       	movw	r18, r24
    22fa:	22 0f       	add	r18, r18
    22fc:	33 1f       	adc	r19, r19
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	fc 01       	movw	r30, r24
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	e2 0f       	add	r30, r18
    230e:	f3 1f       	adc	r31, r19
    2310:	ea 0f       	add	r30, r26
    2312:	fb 1f       	adc	r31, r27
    2314:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2316:	29 c0       	rjmp	.+82     	; 0x236a <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    2318:	46 2f       	mov	r20, r22
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	84 17       	cp	r24, r20
    231e:	95 07       	cpc	r25, r21
    2320:	19 f1       	breq	.+70     	; 0x2368 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    2322:	9a 01       	movw	r18, r20
    2324:	2f 5f       	subi	r18, 0xFF	; 255
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	f9 01       	movw	r30, r18
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	22 0f       	add	r18, r18
    2330:	33 1f       	adc	r19, r19
    2332:	22 0f       	add	r18, r18
    2334:	33 1f       	adc	r19, r19
    2336:	22 0f       	add	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	e2 0f       	add	r30, r18
    233c:	f3 1f       	adc	r31, r19
    233e:	ea 0f       	add	r30, r26
    2340:	fb 1f       	adc	r31, r27
    2342:	20 81       	ld	r18, Z
    2344:	c2 13       	cpse	r28, r18
    2346:	10 c0       	rjmp	.+32     	; 0x2368 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    2348:	fa 01       	movw	r30, r20
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	44 0f       	add	r20, r20
    2350:	55 1f       	adc	r21, r21
    2352:	44 0f       	add	r20, r20
    2354:	55 1f       	adc	r21, r21
    2356:	44 0f       	add	r20, r20
    2358:	55 1f       	adc	r21, r21
    235a:	e4 0f       	add	r30, r20
    235c:	f5 1f       	adc	r31, r21
    235e:	ea 0f       	add	r30, r26
    2360:	fb 1f       	adc	r31, r27
    2362:	24 85       	ldd	r18, Z+12	; 0x0c
    2364:	23 30       	cpi	r18, 0x03	; 3
    2366:	41 f4       	brne	.+16     	; 0x2378 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2368:	6f 5f       	subi	r22, 0xFF	; 255
    236a:	12 96       	adiw	r26, 0x02	; 2
    236c:	2c 91       	ld	r18, X
    236e:	12 97       	sbiw	r26, 0x02	; 2
    2370:	62 17       	cp	r22, r18
    2372:	90 f2       	brcs	.-92     	; 0x2318 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	01 c0       	rjmp	.+2      	; 0x237a <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    2378:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    237a:	88 23       	and	r24, r24
    237c:	41 f0       	breq	.+16     	; 0x238e <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    237e:	fd 01       	movw	r30, r26
    2380:	ec 0f       	add	r30, r28
    2382:	f1 1d       	adc	r31, r1
    2384:	e4 58       	subi	r30, 0x84	; 132
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	80 83       	st	Z, r24
    238c:	06 c0       	rjmp	.+12     	; 0x239a <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    238e:	fd 01       	movw	r30, r26
    2390:	ec 0f       	add	r30, r28
    2392:	f1 1d       	adc	r31, r1
    2394:	e4 58       	subi	r30, 0x84	; 132
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    239a:	8c 2f       	mov	r24, r28
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	87 1b       	sub	r24, r23
    23a0:	91 09       	sbc	r25, r1
    23a2:	02 97       	sbiw	r24, 0x02	; 2
    23a4:	64 f0       	brlt	.+24     	; 0x23be <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    23a6:	7f 5f       	subi	r23, 0xFF	; 255
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    23aa:	fd 01       	movw	r30, r26
    23ac:	e7 0f       	add	r30, r23
    23ae:	f1 1d       	adc	r31, r1
    23b0:	e4 58       	subi	r30, 0x84	; 132
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    23b8:	7f 5f       	subi	r23, 0xFF	; 255
    23ba:	7c 17       	cp	r23, r28
    23bc:	b0 f3       	brcs	.-20     	; 0x23aa <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00001d8c <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    1da4:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    1da6:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1da8:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    1daa:	00 e0       	ldi	r16, 0x00	; 0
    1dac:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    1dae:	8f c0       	rjmp	.+286    	; 0x1ece <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    1db0:	ed 2d       	mov	r30, r13
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	cf 01       	movw	r24, r30
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	8e 0f       	add	r24, r30
    1dc0:	9f 1f       	adc	r25, r31
    1dc2:	84 0f       	add	r24, r20
    1dc4:	95 1f       	adc	r25, r21
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	12 96       	adiw	r26, 0x02	; 2
    1dca:	6d 91       	ld	r22, X+
    1dcc:	7c 91       	ld	r23, X
    1dce:	13 97       	sbiw	r26, 0x03	; 3
    1dd0:	df 01       	movw	r26, r30
    1dd2:	aa 0f       	add	r26, r26
    1dd4:	bb 1f       	adc	r27, r27
    1dd6:	9f 01       	movw	r18, r30
    1dd8:	22 0f       	add	r18, r18
    1dda:	33 1f       	adc	r19, r19
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	a2 0f       	add	r26, r18
    1de6:	b3 1f       	adc	r27, r19
    1de8:	5d 01       	movw	r10, r26
    1dea:	ac 0e       	add	r10, r28
    1dec:	bd 1e       	adc	r11, r29
    1dee:	d5 01       	movw	r26, r10
    1df0:	19 96       	adiw	r26, 0x09	; 9
    1df2:	7c 93       	st	X, r23
    1df4:	6e 93       	st	-X, r22
    1df6:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    1df8:	dc 01       	movw	r26, r24
    1dfa:	14 96       	adiw	r26, 0x04	; 4
    1dfc:	2c 91       	ld	r18, X
    1dfe:	d5 01       	movw	r26, r10
    1e00:	17 96       	adiw	r26, 0x07	; 7
    1e02:	2c 93       	st	X, r18
    1e04:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1e06:	14 96       	adiw	r26, 0x04	; 4
    1e08:	1c 93       	st	X, r17
    1e0a:	0e 93       	st	-X, r16
    1e0c:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    1e0e:	dc 01       	movw	r26, r24
    1e10:	2d 91       	ld	r18, X+
    1e12:	3c 91       	ld	r19, X
    1e14:	11 97       	sbiw	r26, 0x01	; 1
    1e16:	14 96       	adiw	r26, 0x04	; 4
    1e18:	8c 91       	ld	r24, X
    1e1a:	82 9f       	mul	r24, r18
    1e1c:	70 01       	movw	r14, r0
    1e1e:	83 9f       	mul	r24, r19
    1e20:	f0 0c       	add	r15, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	b6 e0       	ldi	r27, 0x06	; 6
    1e26:	eb 0e       	add	r14, r27
    1e28:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    1e2a:	d5 01       	movw	r26, r10
    1e2c:	16 96       	adiw	r26, 0x06	; 6
    1e2e:	fc 92       	st	X, r15
    1e30:	ee 92       	st	-X, r14
    1e32:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    1e34:	98 01       	movw	r18, r16
    1e36:	ab ea       	ldi	r26, 0xAB	; 171
    1e38:	ba ea       	ldi	r27, 0xAA	; 170
    1e3a:	0e 94 94 31 	call	0x6328	; 0x6328 <__umulhisi3>
    1e3e:	96 95       	lsr	r25
    1e40:	87 95       	ror	r24
    1e42:	92 95       	swap	r25
    1e44:	82 95       	swap	r24
    1e46:	8f 70       	andi	r24, 0x0F	; 15
    1e48:	89 27       	eor	r24, r25
    1e4a:	9f 70       	andi	r25, 0x0F	; 15
    1e4c:	89 27       	eor	r24, r25
    1e4e:	9f 01       	movw	r18, r30
    1e50:	2f 5f       	subi	r18, 0xFF	; 255
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	d9 01       	movw	r26, r18
    1e56:	aa 0f       	add	r26, r26
    1e58:	bb 1f       	adc	r27, r27
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	22 0f       	add	r18, r18
    1e60:	33 1f       	adc	r19, r19
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	a2 0f       	add	r26, r18
    1e68:	b3 1f       	adc	r27, r19
    1e6a:	ac 0f       	add	r26, r28
    1e6c:	bd 1f       	adc	r27, r29
    1e6e:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    1e70:	0e 0d       	add	r16, r14
    1e72:	1f 1d       	adc	r17, r15
    1e74:	98 01       	movw	r18, r16
    1e76:	ab ea       	ldi	r26, 0xAB	; 171
    1e78:	ba ea       	ldi	r27, 0xAA	; 170
    1e7a:	0e 94 94 31 	call	0x6328	; 0x6328 <__umulhisi3>
    1e7e:	7c 01       	movw	r14, r24
    1e80:	f6 94       	lsr	r15
    1e82:	e7 94       	ror	r14
    1e84:	f6 94       	lsr	r15
    1e86:	e7 94       	ror	r14
    1e88:	f6 94       	lsr	r15
    1e8a:	e7 94       	ror	r14
    1e8c:	f6 94       	lsr	r15
    1e8e:	e7 94       	ror	r14
    1e90:	f6 94       	lsr	r15
    1e92:	e7 94       	ror	r14
    1e94:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    1e96:	20 e3       	ldi	r18, 0x30	; 48
    1e98:	2e 9d       	mul	r18, r14
    1e9a:	c0 01       	movw	r24, r0
    1e9c:	2f 9d       	mul	r18, r15
    1e9e:	90 0d       	add	r25, r0
    1ea0:	11 24       	eor	r1, r1
    1ea2:	08 17       	cp	r16, r24
    1ea4:	19 07       	cpc	r17, r25
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <mrpp_state_init+0x122>
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	ba 94       	dec	r11
    1eac:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    1eae:	cf 01       	movw	r24, r30
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	e8 0f       	add	r30, r24
    1ec2:	f9 1f       	adc	r31, r25
    1ec4:	ec 0f       	add	r30, r28
    1ec6:	fd 1f       	adc	r31, r29
    1ec8:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    1eca:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1ecc:	d3 94       	inc	r13
    1ece:	dc 14       	cp	r13, r12
    1ed0:	08 f4       	brcc	.+2      	; 0x1ed4 <mrpp_state_init+0x148>
    1ed2:	6e cf       	rjmp	.-292    	; 0x1db0 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    1ed4:	98 01       	movw	r18, r16
    1ed6:	ab ea       	ldi	r26, 0xAB	; 171
    1ed8:	ba ea       	ldi	r27, 0xAA	; 170
    1eda:	0e 94 94 31 	call	0x6328	; 0x6328 <__umulhisi3>
    1ede:	fc 01       	movw	r30, r24
    1ee0:	f6 95       	lsr	r31
    1ee2:	e7 95       	ror	r30
    1ee4:	f2 95       	swap	r31
    1ee6:	e2 95       	swap	r30
    1ee8:	ef 70       	andi	r30, 0x0F	; 15
    1eea:	ef 27       	eor	r30, r31
    1eec:	ff 70       	andi	r31, 0x0F	; 15
    1eee:	ef 27       	eor	r30, r31
    1ef0:	4e 2f       	mov	r20, r30
    1ef2:	52 e0       	ldi	r21, 0x02	; 2
    1ef4:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    1ef6:	20 e3       	ldi	r18, 0x30	; 48
    1ef8:	2e 9f       	mul	r18, r30
    1efa:	c0 01       	movw	r24, r0
    1efc:	2f 9f       	mul	r18, r31
    1efe:	90 0d       	add	r25, r0
    1f00:	11 24       	eor	r1, r1
    1f02:	08 1b       	sub	r16, r24
    1f04:	19 0b       	sbc	r17, r25
    1f06:	11 f4       	brne	.+4      	; 0x1f0c <mrpp_state_init+0x180>
    1f08:	51 e0       	ldi	r21, 0x01	; 1
    1f0a:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    1f0c:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    1f0e:	01 2b       	or	r16, r17
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <mrpp_state_init+0x18a>
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1f16:	fe 01       	movw	r30, r28
    1f18:	e5 58       	subi	r30, 0x85	; 133
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
    1f22:	fe 01       	movw	r30, r28
    1f24:	e8 0f       	add	r30, r24
    1f26:	f1 1d       	adc	r31, r1
    1f28:	e4 58       	subi	r30, 0x84	; 132
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	84 17       	cp	r24, r20
    1f32:	b8 f3       	brcs	.-18     	; 0x1f22 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	bf 90       	pop	r11
    1f46:	af 90       	pop	r10
    1f48:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003c28 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3c28:	0f 93       	push	r16
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	8c 01       	movw	r16, r24
    3c32:	eb 01       	movw	r28, r22
    package[0]=0;
    3c34:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3c36:	fc 01       	movw	r30, r24
    3c38:	81 81       	ldd	r24, Z+1	; 0x01
    3c3a:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3c3c:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3c3e:	c8 01       	movw	r24, r16
    3c40:	0e 94 4d 19 	call	0x329a	; 0x329a <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	35 c0       	rjmp	.+106    	; 0x3cb2 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3c48:	82 2f       	mov	r24, r18
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	aa 0f       	add	r26, r26
    3c50:	bb 1f       	adc	r27, r27
    3c52:	aa 0f       	add	r26, r26
    3c54:	bb 1f       	adc	r27, r27
    3c56:	ad 01       	movw	r20, r26
    3c58:	4a 5f       	subi	r20, 0xFA	; 250
    3c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5c:	4c 0f       	add	r20, r28
    3c5e:	5d 1f       	adc	r21, r29
    3c60:	fc 01       	movw	r30, r24
    3c62:	ee 0f       	add	r30, r30
    3c64:	ff 1f       	adc	r31, r31
    3c66:	88 0f       	add	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	88 0f       	add	r24, r24
    3c70:	99 1f       	adc	r25, r25
    3c72:	e8 0f       	add	r30, r24
    3c74:	f9 1f       	adc	r31, r25
    3c76:	bf 01       	movw	r22, r30
    3c78:	60 0f       	add	r22, r16
    3c7a:	71 1f       	adc	r23, r17
    3c7c:	fb 01       	movw	r30, r22
    3c7e:	84 81       	ldd	r24, Z+4	; 0x04
    3c80:	fa 01       	movw	r30, r20
    3c82:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3c84:	cd 01       	movw	r24, r26
    3c86:	07 96       	adiw	r24, 0x07	; 7
    3c88:	8c 0f       	add	r24, r28
    3c8a:	9d 1f       	adc	r25, r29
    3c8c:	fb 01       	movw	r30, r22
    3c8e:	33 81       	ldd	r19, Z+3	; 0x03
    3c90:	fc 01       	movw	r30, r24
    3c92:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3c94:	cd 01       	movw	r24, r26
    3c96:	08 96       	adiw	r24, 0x08	; 8
    3c98:	8c 0f       	add	r24, r28
    3c9a:	9d 1f       	adc	r25, r29
    3c9c:	fb 01       	movw	r30, r22
    3c9e:	36 81       	ldd	r19, Z+6	; 0x06
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3ca4:	19 96       	adiw	r26, 0x09	; 9
    3ca6:	ac 0f       	add	r26, r28
    3ca8:	bd 1f       	adc	r27, r29
    3caa:	fb 01       	movw	r30, r22
    3cac:	85 81       	ldd	r24, Z+5	; 0x05
    3cae:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3cb0:	2f 5f       	subi	r18, 0xFF	; 255
    3cb2:	f8 01       	movw	r30, r16
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	28 17       	cp	r18, r24
    3cb8:	38 f2       	brcs	.-114    	; 0x3c48 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3cba:	88 0f       	add	r24, r24
    3cbc:	88 0f       	add	r24, r24
}
    3cbe:	8a 5f       	subi	r24, 0xFA	; 250
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00003a3c <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	8c 01       	movw	r16, r24
    3a46:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    3a48:	fc 01       	movw	r30, r24
    3a4a:	81 81       	ldd	r24, Z+1	; 0x01
    3a4c:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    3a4e:	81 81       	ldd	r24, Z+1	; 0x01
    3a50:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3a52:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3a54:	c8 01       	movw	r24, r16
    3a56:	0e 94 4d 19 	call	0x329a	; 0x329a <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	35 c0       	rjmp	.+106    	; 0x3ac8 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3a5e:	82 2f       	mov	r24, r18
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	dc 01       	movw	r26, r24
    3a64:	aa 0f       	add	r26, r26
    3a66:	bb 1f       	adc	r27, r27
    3a68:	aa 0f       	add	r26, r26
    3a6a:	bb 1f       	adc	r27, r27
    3a6c:	ad 01       	movw	r20, r26
    3a6e:	4a 5f       	subi	r20, 0xFA	; 250
    3a70:	5f 4f       	sbci	r21, 0xFF	; 255
    3a72:	4c 0f       	add	r20, r28
    3a74:	5d 1f       	adc	r21, r29
    3a76:	fc 01       	movw	r30, r24
    3a78:	ee 0f       	add	r30, r30
    3a7a:	ff 1f       	adc	r31, r31
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	e8 0f       	add	r30, r24
    3a8a:	f9 1f       	adc	r31, r25
    3a8c:	bf 01       	movw	r22, r30
    3a8e:	60 0f       	add	r22, r16
    3a90:	71 1f       	adc	r23, r17
    3a92:	fb 01       	movw	r30, r22
    3a94:	84 81       	ldd	r24, Z+4	; 0x04
    3a96:	fa 01       	movw	r30, r20
    3a98:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	07 96       	adiw	r24, 0x07	; 7
    3a9e:	8c 0f       	add	r24, r28
    3aa0:	9d 1f       	adc	r25, r29
    3aa2:	fb 01       	movw	r30, r22
    3aa4:	33 81       	ldd	r19, Z+3	; 0x03
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3aaa:	cd 01       	movw	r24, r26
    3aac:	08 96       	adiw	r24, 0x08	; 8
    3aae:	8c 0f       	add	r24, r28
    3ab0:	9d 1f       	adc	r25, r29
    3ab2:	fb 01       	movw	r30, r22
    3ab4:	36 81       	ldd	r19, Z+6	; 0x06
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3aba:	19 96       	adiw	r26, 0x09	; 9
    3abc:	ac 0f       	add	r26, r28
    3abe:	bd 1f       	adc	r27, r29
    3ac0:	fb 01       	movw	r30, r22
    3ac2:	85 81       	ldd	r24, Z+5	; 0x05
    3ac4:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3ac6:	2f 5f       	subi	r18, 0xFF	; 255
    3ac8:	f8 01       	movw	r30, r16
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	28 17       	cp	r18, r24
    3ace:	38 f2       	brcs	.-114    	; 0x3a5e <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3ad0:	88 0f       	add	r24, r24
    3ad2:	88 0f       	add	r24, r24
}
    3ad4:	8a 5f       	subi	r24, 0xFA	; 250
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

000040dc <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    40e6:	a6 2f       	mov	r26, r22
    40e8:	b0 e0       	ldi	r27, 0x00	; 0
    40ea:	11 97       	sbiw	r26, 0x01	; 1
    40ec:	fd 01       	movw	r30, r26
    40ee:	ee 0f       	add	r30, r30
    40f0:	ff 1f       	adc	r31, r31
    40f2:	cd 01       	movw	r24, r26
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	88 0f       	add	r24, r24
    40fa:	99 1f       	adc	r25, r25
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	e8 0f       	add	r30, r24
    4102:	f9 1f       	adc	r31, r25
    4104:	e0 0f       	add	r30, r16
    4106:	f1 1f       	adc	r31, r17
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0a c0       	rjmp	.+20     	; 0x4124 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    4110:	e9 2f       	mov	r30, r25
    4112:	f0 e0       	ldi	r31, 0x00	; 0
    4114:	e9 01       	movw	r28, r18
    4116:	ce 0f       	add	r28, r30
    4118:	df 1f       	adc	r29, r31
    411a:	e4 0f       	add	r30, r20
    411c:	f5 1f       	adc	r31, r21
    411e:	80 81       	ld	r24, Z
    4120:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4122:	9f 5f       	subi	r25, 0xFF	; 255
    4124:	94 30       	cpi	r25, 0x04	; 4
    4126:	a0 f3       	brcs	.-24     	; 0x4110 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    4128:	cd 01       	movw	r24, r26
    412a:	88 0f       	add	r24, r24
    412c:	99 1f       	adc	r25, r25
    412e:	aa 0f       	add	r26, r26
    4130:	bb 1f       	adc	r27, r27
    4132:	aa 0f       	add	r26, r26
    4134:	bb 1f       	adc	r27, r27
    4136:	aa 0f       	add	r26, r26
    4138:	bb 1f       	adc	r27, r27
    413a:	a8 0f       	add	r26, r24
    413c:	b9 1f       	adc	r27, r25
    413e:	a0 0f       	add	r26, r16
    4140:	b1 1f       	adc	r27, r17
    4142:	19 96       	adiw	r26, 0x09	; 9
    4144:	8c 91       	ld	r24, X
    4146:	19 97       	sbiw	r26, 0x09	; 9
    4148:	f9 01       	movw	r30, r18
    414a:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    414c:	18 96       	adiw	r26, 0x08	; 8
    414e:	8c 91       	ld	r24, X
    4150:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    4152:	c8 01       	movw	r24, r16
    4154:	0e 94 30 11 	call	0x2260	; 0x2260 <update_bodies>
}
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00005e5c <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    5e5c:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	0b c0       	rjmp	.+22     	; 0x5e78 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    5e62:	29 2f       	mov	r18, r25
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	fa 01       	movw	r30, r20
    5e68:	e2 0f       	add	r30, r18
    5e6a:	f3 1f       	adc	r31, r19
    5e6c:	e4 58       	subi	r30, 0x84	; 132
    5e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e70:	80 81       	ld	r24, Z
    5e72:	81 30       	cpi	r24, 0x01	; 1
    5e74:	49 f0       	breq	.+18     	; 0x5e88 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5e76:	9f 5f       	subi	r25, 0xFF	; 255
    5e78:	fa 01       	movw	r30, r20
    5e7a:	e5 58       	subi	r30, 0x85	; 133
    5e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7e:	80 81       	ld	r24, Z
    5e80:	98 17       	cp	r25, r24
    5e82:	78 f3       	brcs	.-34     	; 0x5e62 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5e84:	2f ef       	ldi	r18, 0xFF	; 255
    5e86:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    5e88:	c9 01       	movw	r24, r18
    5e8a:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00005fd0 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    5fd0:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    5fd4:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    5fd6:	0a c0       	rjmp	.+20     	; 0x5fec <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    5fd8:	f9 01       	movw	r30, r18
    5fda:	e9 0f       	add	r30, r25
    5fdc:	f1 1d       	adc	r31, r1
    5fde:	e4 58       	subi	r30, 0x84	; 132
    5fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe2:	40 81       	ld	r20, Z
    5fe4:	42 30       	cpi	r20, 0x02	; 2
    5fe6:	09 f0       	breq	.+2      	; 0x5fea <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5fea:	9f 5f       	subi	r25, 0xFF	; 255
    5fec:	f9 01       	movw	r30, r18
    5fee:	e5 58       	subi	r30, 0x85	; 133
    5ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff2:	40 81       	ld	r20, Z
    5ff4:	94 17       	cp	r25, r20
    5ff6:	80 f3       	brcs	.-32     	; 0x5fd8 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    5ff8:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

0000288e <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    288e:	8f 92       	push	r8
    2890:	9f 92       	push	r9
    2892:	af 92       	push	r10
    2894:	bf 92       	push	r11
    2896:	cf 92       	push	r12
    2898:	df 92       	push	r13
    289a:	ef 92       	push	r14
    289c:	ff 92       	push	r15
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	ec 01       	movw	r28, r24
    28a8:	6b 01       	movw	r12, r22
    28aa:	4a 01       	movw	r8, r20
    28ac:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    28ae:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    28b2:	8f 3f       	cpi	r24, 0xFF	; 255
    28b4:	2f ef       	ldi	r18, 0xFF	; 255
    28b6:	92 07       	cpc	r25, r18
    28b8:	09 f4       	brne	.+2      	; 0x28bc <mrpp_state_get_ready_body+0x2e>
    28ba:	66 c0       	rjmp	.+204    	; 0x2988 <mrpp_state_get_ready_body+0xfa>
    28bc:	8c 15       	cp	r24, r12
    28be:	9d 05       	cpc	r25, r13
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <mrpp_state_get_ready_body+0x36>
    28c2:	64 c0       	rjmp	.+200    	; 0x298c <mrpp_state_get_ready_body+0xfe>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	09 c0       	rjmp	.+18     	; 0x28da <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    28c8:	fe 01       	movw	r30, r28
    28ca:	e8 0f       	add	r30, r24
    28cc:	f1 1d       	adc	r31, r1
    28ce:	e4 58       	subi	r30, 0x84	; 132
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	90 81       	ld	r25, Z
    28d4:	91 30       	cpi	r25, 0x01	; 1
    28d6:	41 f0       	breq	.+16     	; 0x28e8 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    28d8:	8f 5f       	subi	r24, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	e5 58       	subi	r30, 0x85	; 133
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	90 81       	ld	r25, Z
    28e2:	89 17       	cp	r24, r25
    28e4:	88 f3       	brcs	.-30     	; 0x28c8 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    28e6:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	98 0f       	add	r25, r24
    28ec:	f4 01       	movw	r30, r8
    28ee:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    28f0:	99 81       	ldd	r25, Y+1	; 0x01
    28f2:	f5 01       	movw	r30, r10
    28f4:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	40 e3       	ldi	r20, 0x30	; 48
    28fa:	48 9f       	mul	r20, r24
    28fc:	90 01       	movw	r18, r0
    28fe:	49 9f       	mul	r20, r25
    2900:	30 0d       	add	r19, r0
    2902:	11 24       	eor	r1, r1
    2904:	f8 01       	movw	r30, r16
    2906:	31 83       	std	Z+1, r19	; 0x01
    2908:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    290a:	fe 01       	movw	r30, r28
    290c:	e5 58       	subi	r30, 0x85	; 133
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	20 81       	ld	r18, Z
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	21 50       	subi	r18, 0x01	; 1
    2916:	31 09       	sbc	r19, r1
    2918:	82 17       	cp	r24, r18
    291a:	93 07       	cpc	r25, r19
    291c:	2c f4       	brge	.+10     	; 0x2928 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    291e:	80 e3       	ldi	r24, 0x30	; 48
    2920:	f7 01       	movw	r30, r14
    2922:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	33 c0       	rjmp	.+102    	; 0x298e <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9c 01       	movw	r18, r24
    2930:	22 0f       	add	r18, r18
    2932:	33 1f       	adc	r19, r19
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	c8 0f       	add	r28, r24
    2946:	d9 1f       	adc	r29, r25
    2948:	4b 81       	ldd	r20, Y+3	; 0x03
    294a:	5c 81       	ldd	r21, Y+4	; 0x04
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	48 0f       	add	r20, r24
    2952:	59 1f       	adc	r21, r25
    2954:	9a 01       	movw	r18, r20
    2956:	ab ea       	ldi	r26, 0xAB	; 171
    2958:	ba ea       	ldi	r27, 0xAA	; 170
    295a:	0e 94 94 31 	call	0x6328	; 0x6328 <__umulhisi3>
    295e:	96 95       	lsr	r25
    2960:	87 95       	ror	r24
    2962:	92 95       	swap	r25
    2964:	82 95       	swap	r24
    2966:	8f 70       	andi	r24, 0x0F	; 15
    2968:	89 27       	eor	r24, r25
    296a:	9f 70       	andi	r25, 0x0F	; 15
    296c:	89 27       	eor	r24, r25
    296e:	60 e3       	ldi	r22, 0x30	; 48
    2970:	68 9f       	mul	r22, r24
    2972:	90 01       	movw	r18, r0
    2974:	69 9f       	mul	r22, r25
    2976:	30 0d       	add	r19, r0
    2978:	11 24       	eor	r1, r1
    297a:	ca 01       	movw	r24, r20
    297c:	82 1b       	sub	r24, r18
    297e:	93 0b       	sbc	r25, r19
    2980:	f7 01       	movw	r30, r14
    2982:	80 83       	st	Z, r24
    } 
    return true; 
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	03 c0       	rjmp	.+6      	; 0x298e <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	01 c0       	rjmp	.+2      	; 0x298e <mrpp_state_get_ready_body+0x100>
    298c:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	bf 90       	pop	r11
    29a0:	af 90       	pop	r10
    29a2:	9f 90       	pop	r9
    29a4:	8f 90       	pop	r8
    29a6:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006252 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6252:	fc 01       	movw	r30, r24
    6254:	e5 58       	subi	r30, 0x85	; 133
    6256:	ff 4f       	sbci	r31, 0xFF	; 255
    6258:	20 81       	ld	r18, Z
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	62 17       	cp	r22, r18
    625e:	73 07       	cpc	r23, r19
    6260:	3c f4       	brge	.+14     	; 0x6270 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6262:	68 0f       	add	r22, r24
    6264:	79 1f       	adc	r23, r25
    6266:	fb 01       	movw	r30, r22
    6268:	e4 58       	subi	r30, 0x84	; 132
    626a:	ff 4f       	sbci	r31, 0xFF	; 255
    626c:	82 e0       	ldi	r24, 0x02	; 2
    626e:	80 83       	st	Z, r24
    6270:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00005ace <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    5ace:	70 e0       	ldi	r23, 0x00	; 0
    5ad0:	61 50       	subi	r22, 0x01	; 1
    5ad2:	71 09       	sbc	r23, r1
    5ad4:	fb 01       	movw	r30, r22
    5ad6:	ee 0f       	add	r30, r30
    5ad8:	ff 1f       	adc	r31, r31
    5ada:	66 0f       	add	r22, r22
    5adc:	77 1f       	adc	r23, r23
    5ade:	66 0f       	add	r22, r22
    5ae0:	77 1f       	adc	r23, r23
    5ae2:	66 0f       	add	r22, r22
    5ae4:	77 1f       	adc	r23, r23
    5ae6:	e6 0f       	add	r30, r22
    5ae8:	f7 1f       	adc	r31, r23
    5aea:	e8 0f       	add	r30, r24
    5aec:	f9 1f       	adc	r31, r25
    5aee:	83 81       	ldd	r24, Z+3	; 0x03
    5af0:	94 81       	ldd	r25, Z+4	; 0x04
    5af2:	da 01       	movw	r26, r20
    5af4:	8d 93       	st	X+, r24
    5af6:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    5af8:	85 81       	ldd	r24, Z+5	; 0x05
    5afa:	96 81       	ldd	r25, Z+6	; 0x06
    5afc:	f9 01       	movw	r30, r18
    5afe:	91 83       	std	Z+1, r25	; 0x01
    5b00:	80 83       	st	Z, r24
    5b02:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00005e8c <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    5e8c:	80 91 87 0f 	lds	r24, 0x0F87	; 0x800f87 <cnt>
    5e90:	90 91 88 0f 	lds	r25, 0x0F88	; 0x800f88 <cnt+0x1>
    5e94:	01 96       	adiw	r24, 0x01	; 1
    5e96:	90 93 88 0f 	sts	0x0F88, r25	; 0x800f88 <cnt+0x1>
    5e9a:	80 93 87 0f 	sts	0x0F87, r24	; 0x800f87 <cnt>
	if(cnt>=_seconds){
    5e9e:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    5ea2:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    5ea6:	82 17       	cp	r24, r18
    5ea8:	93 07       	cpc	r25, r19
    5eaa:	38 f0       	brcs	.+14     	; 0x5eba <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    5eac:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <eventPointer>
    5eb0:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	0e 94 b2 32 	call	0x6564	; 0x6564 <PM_HAL_BC_power>
    5eba:	08 95       	ret

Disassembly of section .text.PUMP_start:

0000609a <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    609a:	10 92 88 0f 	sts	0x0F88, r1	; 0x800f88 <cnt+0x1>
    609e:	10 92 87 0f 	sts	0x0F87, r1	; 0x800f87 <cnt>
	_seconds=seconds;
    60a2:	90 93 8a 0f 	sts	0x0F8A, r25	; 0x800f8a <_seconds+0x1>
    60a6:	80 93 89 0f 	sts	0x0F89, r24	; 0x800f89 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    60aa:	86 e4       	ldi	r24, 0x46	; 70
    60ac:	9f e2       	ldi	r25, 0x2F	; 47
    60ae:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TC2_HAL_subscribe>
    60b2:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <eventPointer>
	PM_HAL_BC_power(true);
    60b6:	81 e0       	ldi	r24, 0x01	; 1
    60b8:	0e 94 b2 32 	call	0x6564	; 0x6564 <PM_HAL_BC_power>
    60bc:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

000063b8 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    63b8:	40 91 87 0f 	lds	r20, 0x0F87	; 0x800f87 <cnt>
    63bc:	50 91 88 0f 	lds	r21, 0x0F88	; 0x800f88 <cnt+0x1>
    63c0:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    63c4:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    63c8:	81 e0       	ldi	r24, 0x01	; 1
    63ca:	42 17       	cp	r20, r18
    63cc:	53 07       	cpc	r21, r19
    63ce:	08 f4       	brcc	.+2      	; 0x63d2 <PUMP_is_done+0x1a>
    63d0:	80 e0       	ldi	r24, 0x00	; 0
}
    63d2:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00002ce4 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <datetime_to_BCD+0x8>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <datetime_to_BCD+0xa>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <datetime_to_BCD+0xc>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	f9 01       	movw	r30, r18
    2cf6:	3d ec       	ldi	r19, 0xCD	; 205
    2cf8:	43 9f       	mul	r20, r19
    2cfa:	21 2d       	mov	r18, r1
    2cfc:	11 24       	eor	r1, r1
    2cfe:	26 95       	lsr	r18
    2d00:	26 95       	lsr	r18
    2d02:	26 95       	lsr	r18
    2d04:	10 e1       	ldi	r17, 0x10	; 16
    2d06:	21 9f       	mul	r18, r17
    2d08:	d0 01       	movw	r26, r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	22 0f       	add	r18, r18
    2d0e:	b2 2f       	mov	r27, r18
    2d10:	bb 0f       	add	r27, r27
    2d12:	bb 0f       	add	r27, r27
    2d14:	2b 0f       	add	r18, r27
    2d16:	42 1b       	sub	r20, r18
    2d18:	4a 2b       	or	r20, r26
    2d1a:	40 83       	st	Z, r20
    2d1c:	53 9f       	mul	r21, r19
    2d1e:	21 2d       	mov	r18, r1
    2d20:	11 24       	eor	r1, r1
    2d22:	26 95       	lsr	r18
    2d24:	26 95       	lsr	r18
    2d26:	26 95       	lsr	r18
    2d28:	40 e1       	ldi	r20, 0x10	; 16
    2d2a:	24 9f       	mul	r18, r20
    2d2c:	d0 01       	movw	r26, r0
    2d2e:	11 24       	eor	r1, r1
    2d30:	22 0f       	add	r18, r18
    2d32:	42 2f       	mov	r20, r18
    2d34:	44 0f       	add	r20, r20
    2d36:	44 0f       	add	r20, r20
    2d38:	24 0f       	add	r18, r20
    2d3a:	52 1b       	sub	r21, r18
    2d3c:	5a 2b       	or	r21, r26
    2d3e:	51 83       	std	Z+1, r21	; 0x01
    2d40:	63 9f       	mul	r22, r19
    2d42:	41 2d       	mov	r20, r1
    2d44:	11 24       	eor	r1, r1
    2d46:	46 95       	lsr	r20
    2d48:	46 95       	lsr	r20
    2d4a:	46 95       	lsr	r20
    2d4c:	10 e1       	ldi	r17, 0x10	; 16
    2d4e:	41 9f       	mul	r20, r17
    2d50:	d0 01       	movw	r26, r0
    2d52:	11 24       	eor	r1, r1
    2d54:	44 0f       	add	r20, r20
    2d56:	24 2f       	mov	r18, r20
    2d58:	22 0f       	add	r18, r18
    2d5a:	22 0f       	add	r18, r18
    2d5c:	42 0f       	add	r20, r18
    2d5e:	64 1b       	sub	r22, r20
    2d60:	6a 2b       	or	r22, r26
    2d62:	62 83       	std	Z+2, r22	; 0x02
    2d64:	73 9f       	mul	r23, r19
    2d66:	41 2d       	mov	r20, r1
    2d68:	11 24       	eor	r1, r1
    2d6a:	46 95       	lsr	r20
    2d6c:	46 95       	lsr	r20
    2d6e:	46 95       	lsr	r20
    2d70:	20 e1       	ldi	r18, 0x10	; 16
    2d72:	42 9f       	mul	r20, r18
    2d74:	d0 01       	movw	r26, r0
    2d76:	11 24       	eor	r1, r1
    2d78:	44 0f       	add	r20, r20
    2d7a:	24 2f       	mov	r18, r20
    2d7c:	22 0f       	add	r18, r18
    2d7e:	22 0f       	add	r18, r18
    2d80:	42 0f       	add	r20, r18
    2d82:	74 1b       	sub	r23, r20
    2d84:	7a 2b       	or	r23, r26
    2d86:	73 83       	std	Z+3, r23	; 0x03
    2d88:	83 9f       	mul	r24, r19
    2d8a:	41 2d       	mov	r20, r1
    2d8c:	11 24       	eor	r1, r1
    2d8e:	46 95       	lsr	r20
    2d90:	46 95       	lsr	r20
    2d92:	46 95       	lsr	r20
    2d94:	10 e1       	ldi	r17, 0x10	; 16
    2d96:	41 9f       	mul	r20, r17
    2d98:	b0 01       	movw	r22, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	44 0f       	add	r20, r20
    2d9e:	24 2f       	mov	r18, r20
    2da0:	22 0f       	add	r18, r18
    2da2:	22 0f       	add	r18, r18
    2da4:	42 0f       	add	r20, r18
    2da6:	84 1b       	sub	r24, r20
    2da8:	86 2b       	or	r24, r22
    2daa:	84 83       	std	Z+4, r24	; 0x04
    2dac:	93 9f       	mul	r25, r19
    2dae:	31 2d       	mov	r19, r1
    2db0:	11 24       	eor	r1, r1
    2db2:	36 95       	lsr	r19
    2db4:	36 95       	lsr	r19
    2db6:	36 95       	lsr	r19
    2db8:	20 e1       	ldi	r18, 0x10	; 16
    2dba:	32 9f       	mul	r19, r18
    2dbc:	a0 01       	movw	r20, r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	33 0f       	add	r19, r19
    2dc2:	83 2f       	mov	r24, r19
    2dc4:	88 0f       	add	r24, r24
    2dc6:	88 0f       	add	r24, r24
    2dc8:	38 0f       	add	r19, r24
    2dca:	93 1b       	sub	r25, r19
    2dcc:	94 2b       	or	r25, r20
    2dce:	95 83       	std	Z+5, r25	; 0x05
    2dd0:	26 96       	adiw	r28, 0x06	; 6
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004e06 <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	00 d0       	rcall	.+0      	; 0x4e0c <RTC_set_clock_out+0x6>
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    4e10:	9d e0       	ldi	r25, 0x0D	; 13
    4e12:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    4e14:	81 30       	cpi	r24, 0x01	; 1
    4e16:	31 f0       	breq	.+12     	; 0x4e24 <RTC_set_clock_out+0x1e>
    4e18:	18 f0       	brcs	.+6      	; 0x4e20 <RTC_set_clock_out+0x1a>
    4e1a:	80 32       	cpi	r24, 0x20	; 32
    4e1c:	31 f0       	breq	.+12     	; 0x4e2a <RTC_set_clock_out+0x24>
    4e1e:	13 c0       	rjmp	.+38     	; 0x4e46 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    4e20:	1a 82       	std	Y+2, r1	; 0x02
			break;
    4e22:	05 c0       	rjmp	.+10     	; 0x4e2e <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    4e24:	83 e8       	ldi	r24, 0x83	; 131
    4e26:	8a 83       	std	Y+2, r24	; 0x02
			break;
    4e28:	02 c0       	rjmp	.+4      	; 0x4e2e <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    4e2a:	82 e8       	ldi	r24, 0x82	; 130
    4e2c:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    4e2e:	ae 01       	movw	r20, r28
    4e30:	4f 5f       	subi	r20, 0xFF	; 255
    4e32:	5f 4f       	sbci	r21, 0xFF	; 255
    4e34:	60 e8       	ldi	r22, 0x80	; 128
    4e36:	22 e0       	ldi	r18, 0x02	; 2
    4e38:	81 e5       	ldi	r24, 0x51	; 81
    4e3a:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4e3e:	88 23       	and	r24, r24
    4e40:	21 f0       	breq	.+8      	; 0x4e4a <RTC_set_clock_out+0x44>
    4e42:	82 e0       	ldi	r24, 0x02	; 2
    4e44:	03 c0       	rjmp	.+6      	; 0x4e4c <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	01 c0       	rjmp	.+2      	; 0x4e4c <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
}
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
    4e50:	df 91       	pop	r29
    4e52:	cf 91       	pop	r28
    4e54:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00005bda <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    5bda:	cf 93       	push	r28
    5bdc:	df 93       	push	r29
    5bde:	00 d0       	rcall	.+0      	; 0x5be0 <RTC_clear_wake_up_interrupt+0x6>
    5be0:	cd b7       	in	r28, 0x3d	; 61
    5be2:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    5be4:	81 e0       	ldi	r24, 0x01	; 1
    5be6:	89 83       	std	Y+1, r24	; 0x01
    5be8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    5bea:	ae 01       	movw	r20, r28
    5bec:	4f 5f       	subi	r20, 0xFF	; 255
    5bee:	5f 4f       	sbci	r21, 0xFF	; 255
    5bf0:	60 e8       	ldi	r22, 0x80	; 128
    5bf2:	22 e0       	ldi	r18, 0x02	; 2
    5bf4:	81 e5       	ldi	r24, 0x51	; 81
    5bf6:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    5bfa:	88 23       	and	r24, r24
    5bfc:	11 f0       	breq	.+4      	; 0x5c02 <RTC_clear_wake_up_interrupt+0x28>
    5bfe:	82 e0       	ldi	r24, 0x02	; 2
    5c00:	01 c0       	rjmp	.+2      	; 0x5c04 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    5c02:	80 e0       	ldi	r24, 0x00	; 0
}
    5c04:	0f 90       	pop	r0
    5c06:	0f 90       	pop	r0
    5c08:	df 91       	pop	r29
    5c0a:	cf 91       	pop	r28
    5c0c:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

000023c2 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	27 97       	sbiw	r28, 0x07	; 7
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	8c 01       	movw	r16, r24
    23dc:	21 e0       	ldi	r18, 0x01	; 1
    23de:	4e ec       	ldi	r20, 0xCE	; 206
    23e0:	58 e0       	ldi	r21, 0x08	; 8
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	81 e5       	ldi	r24, 0x51	; 81
    23e6:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <TWI_API_write_data>
    23ea:	81 11       	cpse	r24, r1
    23ec:	7c c0       	rjmp	.+248    	; 0x24e6 <RTC_get_current_time+0x124>
    23ee:	47 e0       	ldi	r20, 0x07	; 7
    23f0:	be 01       	movw	r22, r28
    23f2:	6f 5f       	subi	r22, 0xFF	; 255
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	81 e5       	ldi	r24, 0x51	; 81
    23f8:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <TWI_API_repeat_read_data_stop>
    23fc:	81 11       	cpse	r24, r1
    23fe:	75 c0       	rjmp	.+234    	; 0x24ea <RTC_get_current_time+0x128>
    2400:	29 81       	ldd	r18, Y+1	; 0x01
    2402:	82 2f       	mov	r24, r18
    2404:	8f 77       	andi	r24, 0x7F	; 127
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	95 95       	asr	r25
    240a:	87 95       	ror	r24
    240c:	95 95       	asr	r25
    240e:	87 95       	ror	r24
    2410:	95 95       	asr	r25
    2412:	87 95       	ror	r24
    2414:	95 95       	asr	r25
    2416:	87 95       	ror	r24
    2418:	88 0f       	add	r24, r24
    241a:	98 2f       	mov	r25, r24
    241c:	99 0f       	add	r25, r25
    241e:	99 0f       	add	r25, r25
    2420:	89 0f       	add	r24, r25
    2422:	2f 70       	andi	r18, 0x0F	; 15
    2424:	82 0f       	add	r24, r18
    2426:	f8 01       	movw	r30, r16
    2428:	80 83       	st	Z, r24
    242a:	2a 81       	ldd	r18, Y+2	; 0x02
    242c:	82 2f       	mov	r24, r18
    242e:	8f 77       	andi	r24, 0x7F	; 127
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	95 95       	asr	r25
    2434:	87 95       	ror	r24
    2436:	95 95       	asr	r25
    2438:	87 95       	ror	r24
    243a:	95 95       	asr	r25
    243c:	87 95       	ror	r24
    243e:	95 95       	asr	r25
    2440:	87 95       	ror	r24
    2442:	88 0f       	add	r24, r24
    2444:	98 2f       	mov	r25, r24
    2446:	99 0f       	add	r25, r25
    2448:	99 0f       	add	r25, r25
    244a:	89 0f       	add	r24, r25
    244c:	2f 70       	andi	r18, 0x0F	; 15
    244e:	82 0f       	add	r24, r18
    2450:	81 83       	std	Z+1, r24	; 0x01
    2452:	2b 81       	ldd	r18, Y+3	; 0x03
    2454:	82 2f       	mov	r24, r18
    2456:	8f 73       	andi	r24, 0x3F	; 63
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	95 95       	asr	r25
    245c:	87 95       	ror	r24
    245e:	95 95       	asr	r25
    2460:	87 95       	ror	r24
    2462:	95 95       	asr	r25
    2464:	87 95       	ror	r24
    2466:	95 95       	asr	r25
    2468:	87 95       	ror	r24
    246a:	88 0f       	add	r24, r24
    246c:	98 2f       	mov	r25, r24
    246e:	99 0f       	add	r25, r25
    2470:	99 0f       	add	r25, r25
    2472:	89 0f       	add	r24, r25
    2474:	2f 70       	andi	r18, 0x0F	; 15
    2476:	82 0f       	add	r24, r18
    2478:	82 83       	std	Z+2, r24	; 0x02
    247a:	2c 81       	ldd	r18, Y+4	; 0x04
    247c:	82 2f       	mov	r24, r18
    247e:	8f 73       	andi	r24, 0x3F	; 63
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	95 95       	asr	r25
    2484:	87 95       	ror	r24
    2486:	95 95       	asr	r25
    2488:	87 95       	ror	r24
    248a:	95 95       	asr	r25
    248c:	87 95       	ror	r24
    248e:	95 95       	asr	r25
    2490:	87 95       	ror	r24
    2492:	88 0f       	add	r24, r24
    2494:	98 2f       	mov	r25, r24
    2496:	99 0f       	add	r25, r25
    2498:	99 0f       	add	r25, r25
    249a:	89 0f       	add	r24, r25
    249c:	2f 70       	andi	r18, 0x0F	; 15
    249e:	82 0f       	add	r24, r18
    24a0:	83 83       	std	Z+3, r24	; 0x03
    24a2:	2e 81       	ldd	r18, Y+6	; 0x06
    24a4:	82 2f       	mov	r24, r18
    24a6:	8f 71       	andi	r24, 0x1F	; 31
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	95 95       	asr	r25
    24ac:	87 95       	ror	r24
    24ae:	95 95       	asr	r25
    24b0:	87 95       	ror	r24
    24b2:	95 95       	asr	r25
    24b4:	87 95       	ror	r24
    24b6:	95 95       	asr	r25
    24b8:	87 95       	ror	r24
    24ba:	88 0f       	add	r24, r24
    24bc:	98 2f       	mov	r25, r24
    24be:	99 0f       	add	r25, r25
    24c0:	99 0f       	add	r25, r25
    24c2:	89 0f       	add	r24, r25
    24c4:	2f 70       	andi	r18, 0x0F	; 15
    24c6:	82 0f       	add	r24, r18
    24c8:	84 83       	std	Z+4, r24	; 0x04
    24ca:	8f 81       	ldd	r24, Y+7	; 0x07
    24cc:	98 2f       	mov	r25, r24
    24ce:	92 95       	swap	r25
    24d0:	9f 70       	andi	r25, 0x0F	; 15
    24d2:	99 0f       	add	r25, r25
    24d4:	29 2f       	mov	r18, r25
    24d6:	22 0f       	add	r18, r18
    24d8:	22 0f       	add	r18, r18
    24da:	92 0f       	add	r25, r18
    24dc:	8f 70       	andi	r24, 0x0F	; 15
    24de:	89 0f       	add	r24, r25
    24e0:	85 83       	std	Z+5, r24	; 0x05
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <RTC_get_current_time+0x12a>
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <RTC_get_current_time+0x12a>
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	27 96       	adiw	r28, 0x07	; 7
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

000035e8 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	2d 97       	sbiw	r28, 0x0d	; 13
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	82 e0       	ldi	r24, 0x02	; 2
    3606:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    3608:	85 e0       	ldi	r24, 0x05	; 5
    360a:	ea e5       	ldi	r30, 0x5A	; 90
    360c:	ff e0       	ldi	r31, 0x0F	; 15
    360e:	de 01       	movw	r26, r28
    3610:	13 96       	adiw	r26, 0x03	; 3
    3612:	01 90       	ld	r0, Z+
    3614:	0d 92       	st	X+, r0
    3616:	8a 95       	dec	r24
    3618:	e1 f7       	brne	.-8      	; 0x3612 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    361a:	ce 01       	movw	r24, r28
    361c:	08 96       	adiw	r24, 0x08	; 8
    361e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	81 0f       	add	r24, r17
	dt.minute %= 60;
    3626:	99 e8       	ldi	r25, 0x89	; 137
    3628:	89 9f       	mul	r24, r25
    362a:	91 2d       	mov	r25, r1
    362c:	11 24       	eor	r1, r1
    362e:	92 95       	swap	r25
    3630:	96 95       	lsr	r25
    3632:	97 70       	andi	r25, 0x07	; 7
    3634:	2c e3       	ldi	r18, 0x3C	; 60
    3636:	92 9f       	mul	r25, r18
    3638:	80 19       	sub	r24, r0
    363a:	11 24       	eor	r1, r1
    363c:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    363e:	ae 01       	movw	r20, r28
    3640:	4f 5f       	subi	r20, 0xFF	; 255
    3642:	5f 4f       	sbci	r21, 0xFF	; 255
    3644:	60 e8       	ldi	r22, 0x80	; 128
    3646:	22 e0       	ldi	r18, 0x02	; 2
    3648:	81 e5       	ldi	r24, 0x51	; 81
    364a:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    364e:	81 11       	cpse	r24, r1
    3650:	20 c0       	rjmp	.+64     	; 0x3692 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    3652:	99 85       	ldd	r25, Y+9	; 0x09
    3654:	8d ec       	ldi	r24, 0xCD	; 205
    3656:	98 9f       	mul	r25, r24
    3658:	81 2d       	mov	r24, r1
    365a:	11 24       	eor	r1, r1
    365c:	86 95       	lsr	r24
    365e:	86 95       	lsr	r24
    3660:	86 95       	lsr	r24
    3662:	40 e1       	ldi	r20, 0x10	; 16
    3664:	84 9f       	mul	r24, r20
    3666:	90 01       	movw	r18, r0
    3668:	11 24       	eor	r1, r1
    366a:	88 0f       	add	r24, r24
    366c:	38 2f       	mov	r19, r24
    366e:	33 0f       	add	r19, r19
    3670:	33 0f       	add	r19, r19
    3672:	83 0f       	add	r24, r19
    3674:	98 1b       	sub	r25, r24
    3676:	92 2b       	or	r25, r18
    3678:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    367a:	ae 01       	movw	r20, r28
    367c:	4d 5f       	subi	r20, 0xFD	; 253
    367e:	5f 4f       	sbci	r21, 0xFF	; 255
    3680:	60 e8       	ldi	r22, 0x80	; 128
    3682:	25 e0       	ldi	r18, 0x05	; 5
    3684:	81 e5       	ldi	r24, 0x51	; 81
    3686:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    368a:	88 23       	and	r24, r24
    368c:	21 f0       	breq	.+8      	; 0x3696 <RTC_set_wake_up_interrupt_minutes+0xae>
    368e:	82 e0       	ldi	r24, 0x02	; 2
    3690:	03 c0       	rjmp	.+6      	; 0x3698 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3692:	82 e0       	ldi	r24, 0x02	; 2
    3694:	01 c0       	rjmp	.+2      	; 0x3698 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    3696:	80 e0       	ldi	r24, 0x00	; 0
}
    3698:	2d 96       	adiw	r28, 0x0d	; 13
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	1f 91       	pop	r17
    36aa:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00004916 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    4916:	cf 93       	push	r28
    4918:	df 93       	push	r29
    491a:	cd b7       	in	r28, 0x3d	; 61
    491c:	de b7       	in	r29, 0x3e	; 62
    491e:	64 97       	sbiw	r28, 0x14	; 20
    4920:	0f b6       	in	r0, 0x3f	; 63
    4922:	f8 94       	cli
    4924:	de bf       	out	0x3e, r29	; 62
    4926:	0f be       	out	0x3f, r0	; 63
    4928:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    492a:	9e 01       	movw	r18, r28
    492c:	27 5f       	subi	r18, 0xF7	; 247
    492e:	3f 4f       	sbci	r19, 0xFF	; 255
    4930:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <datetime_to_BCD>
	
	data[0]=0x02;
    4934:	82 e0       	ldi	r24, 0x02	; 2
    4936:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    4938:	89 85       	ldd	r24, Y+9	; 0x09
    493a:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    493c:	8a 85       	ldd	r24, Y+10	; 0x0a
    493e:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    4940:	8b 85       	ldd	r24, Y+11	; 0x0b
    4942:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    4944:	8c 85       	ldd	r24, Y+12	; 0x0c
    4946:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    4948:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    494a:	8d 85       	ldd	r24, Y+13	; 0x0d
    494c:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    494e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4950:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    4952:	ae 01       	movw	r20, r28
    4954:	4f 5f       	subi	r20, 0xFF	; 255
    4956:	5f 4f       	sbci	r21, 0xFF	; 255
    4958:	60 e8       	ldi	r22, 0x80	; 128
    495a:	28 e0       	ldi	r18, 0x08	; 8
    495c:	81 e5       	ldi	r24, 0x51	; 81
    495e:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4962:	88 23       	and	r24, r24
    4964:	11 f0       	breq	.+4      	; 0x496a <RTC_set_current_time+0x54>
    4966:	82 e0       	ldi	r24, 0x02	; 2
    4968:	01 c0       	rjmp	.+2      	; 0x496c <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    496a:	80 e0       	ldi	r24, 0x00	; 0
}
    496c:	64 96       	adiw	r28, 0x14	; 20
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	f8 94       	cli
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	0f be       	out	0x3f, r0	; 63
    4976:	cd bf       	out	0x3d, r28	; 61
    4978:	df 91       	pop	r29
    497a:	cf 91       	pop	r28
    497c:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

0000276c <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    276c:	4f 92       	push	r4
    276e:	5f 92       	push	r5
    2770:	6f 92       	push	r6
    2772:	7f 92       	push	r7
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	00 d0       	rcall	.+0      	; 0x278e <RTC_datetime_to_ts+0x22>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <RTC_datetime_to_ts+0x24>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <RTC_datetime_to_ts+0x26>
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	f9 01       	movw	r30, r18
    2798:	49 2e       	mov	r4, r25
    279a:	51 2c       	mov	r5, r1
    279c:	61 2c       	mov	r6, r1
    279e:	71 2c       	mov	r7, r1
    27a0:	03 2e       	mov	r0, r19
    27a2:	3a e1       	ldi	r19, 0x1A	; 26
    27a4:	44 0c       	add	r4, r4
    27a6:	55 1c       	adc	r5, r5
    27a8:	66 1c       	adc	r6, r6
    27aa:	77 1c       	adc	r7, r7
    27ac:	3a 95       	dec	r19
    27ae:	d1 f7       	brne	.-12     	; 0x27a4 <RTC_datetime_to_ts+0x38>
    27b0:	30 2d       	mov	r19, r0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	07 2e       	mov	r0, r23
    27ba:	76 e1       	ldi	r23, 0x16	; 22
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	aa 1f       	adc	r26, r26
    27c2:	bb 1f       	adc	r27, r27
    27c4:	7a 95       	dec	r23
    27c6:	d1 f7       	brne	.-12     	; 0x27bc <RTC_datetime_to_ts+0x50>
    27c8:	70 2d       	mov	r23, r0
    27ca:	84 29       	or	r24, r4
    27cc:	95 29       	or	r25, r5
    27ce:	a6 29       	or	r26, r6
    27d0:	b7 29       	or	r27, r7
    27d2:	87 2e       	mov	r8, r23
    27d4:	91 2c       	mov	r9, r1
    27d6:	a1 2c       	mov	r10, r1
    27d8:	b1 2c       	mov	r11, r1
    27da:	07 2e       	mov	r0, r23
    27dc:	71 e1       	ldi	r23, 0x11	; 17
    27de:	88 0c       	add	r8, r8
    27e0:	99 1c       	adc	r9, r9
    27e2:	aa 1c       	adc	r10, r10
    27e4:	bb 1c       	adc	r11, r11
    27e6:	7a 95       	dec	r23
    27e8:	d1 f7       	brne	.-12     	; 0x27de <RTC_datetime_to_ts+0x72>
    27ea:	70 2d       	mov	r23, r0
    27ec:	88 29       	or	r24, r8
    27ee:	99 29       	or	r25, r9
    27f0:	aa 29       	or	r26, r10
    27f2:	bb 29       	or	r27, r11
    27f4:	c6 2e       	mov	r12, r22
    27f6:	d1 2c       	mov	r13, r1
    27f8:	e1 2c       	mov	r14, r1
    27fa:	f1 2c       	mov	r15, r1
    27fc:	0b 2e       	mov	r0, r27
    27fe:	bc e0       	ldi	r27, 0x0C	; 12
    2800:	cc 0c       	add	r12, r12
    2802:	dd 1c       	adc	r13, r13
    2804:	ee 1c       	adc	r14, r14
    2806:	ff 1c       	adc	r15, r15
    2808:	ba 95       	dec	r27
    280a:	d1 f7       	brne	.-12     	; 0x2800 <RTC_datetime_to_ts+0x94>
    280c:	b0 2d       	mov	r27, r0
    280e:	8c 29       	or	r24, r12
    2810:	9d 29       	or	r25, r13
    2812:	ae 29       	or	r26, r14
    2814:	bf 29       	or	r27, r15
    2816:	05 2f       	mov	r16, r21
    2818:	10 e0       	ldi	r17, 0x00	; 0
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	00 0f       	add	r16, r16
    2820:	11 1f       	adc	r17, r17
    2822:	22 1f       	adc	r18, r18
    2824:	33 1f       	adc	r19, r19
    2826:	00 0f       	add	r16, r16
    2828:	11 1f       	adc	r17, r17
    282a:	22 1f       	adc	r18, r18
    282c:	33 1f       	adc	r19, r19
    282e:	00 0f       	add	r16, r16
    2830:	11 1f       	adc	r17, r17
    2832:	22 1f       	adc	r18, r18
    2834:	33 1f       	adc	r19, r19
    2836:	00 0f       	add	r16, r16
    2838:	11 1f       	adc	r17, r17
    283a:	22 1f       	adc	r18, r18
    283c:	33 1f       	adc	r19, r19
    283e:	00 0f       	add	r16, r16
    2840:	11 1f       	adc	r17, r17
    2842:	22 1f       	adc	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	00 0f       	add	r16, r16
    2848:	11 1f       	adc	r17, r17
    284a:	22 1f       	adc	r18, r18
    284c:	33 1f       	adc	r19, r19
    284e:	80 2b       	or	r24, r16
    2850:	91 2b       	or	r25, r17
    2852:	a2 2b       	or	r26, r18
    2854:	b3 2b       	or	r27, r19
    2856:	84 2b       	or	r24, r20
    2858:	b0 83       	st	Z, r27
    285a:	a1 83       	std	Z+1, r26	; 0x01
    285c:	92 83       	std	Z+2, r25	; 0x02
    285e:	83 83       	std	Z+3, r24	; 0x03
    2860:	26 96       	adiw	r28, 0x06	; 6
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	df 90       	pop	r13
    287a:	cf 90       	pop	r12
    287c:	bf 90       	pop	r11
    287e:	af 90       	pop	r10
    2880:	9f 90       	pop	r9
    2882:	8f 90       	pop	r8
    2884:	7f 90       	pop	r7
    2886:	6f 90       	pop	r6
    2888:	5f 90       	pop	r5
    288a:	4f 90       	pop	r4
    288c:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00006426 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    6426:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    6428:	54 81       	ldd	r21, Z+4	; 0x04
    642a:	43 81       	ldd	r20, Z+3	; 0x03
    642c:	31 81       	ldd	r19, Z+1	; 0x01
    642e:	20 81       	ld	r18, Z
    6430:	65 2f       	mov	r22, r21
    6432:	74 2f       	mov	r23, r20
    6434:	83 2f       	mov	r24, r19
    6436:	92 2f       	mov	r25, r18
    6438:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__fixunssfsi>
}
    643c:	cb 01       	movw	r24, r22
    643e:	08 95       	ret

Disassembly of section .text.init_measurement:

00005a5e <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    5a5e:	25 e0       	ldi	r18, 0x05	; 5
    5a60:	4f eb       	ldi	r20, 0xBF	; 191
    5a62:	58 e0       	ldi	r21, 0x08	; 8
    5a64:	60 e0       	ldi	r22, 0x00	; 0
    5a66:	81 e6       	ldi	r24, 0x61	; 97
    5a68:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a6c:	81 11       	cpse	r24, r1
    5a6e:	0f c0       	rjmp	.+30     	; 0x5a8e <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    5a70:	25 e0       	ldi	r18, 0x05	; 5
    5a72:	44 ec       	ldi	r20, 0xC4	; 196
    5a74:	58 e0       	ldi	r21, 0x08	; 8
    5a76:	60 e0       	ldi	r22, 0x00	; 0
    5a78:	81 e6       	ldi	r24, 0x61	; 97
    5a7a:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a7e:	81 11       	cpse	r24, r1
    5a80:	08 c0       	rjmp	.+16     	; 0x5a92 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    5a82:	0e 94 4b 34 	call	0x6896	; 0x6896 <SCD30_HAL_data_ready>
    5a86:	88 23       	and	r24, r24
    5a88:	e1 f3       	breq	.-8      	; 0x5a82 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a8e:	82 e0       	ldi	r24, 0x02	; 2
    5a90:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a92:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    5a94:	08 95       	ret

Disassembly of section .text.validate_data:

00005cd8 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    5cd8:	cf 93       	push	r28
    5cda:	df 93       	push	r29
    5cdc:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    5cde:	62 e0       	ldi	r22, 0x02	; 2
    5ce0:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <calc_crc8>
	if(data[2]!=crc) return false;
    5ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce6:	89 13       	cpse	r24, r25
    5ce8:	0a c0       	rjmp	.+20     	; 0x5cfe <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    5cea:	62 e0       	ldi	r22, 0x02	; 2
    5cec:	ce 01       	movw	r24, r28
    5cee:	03 96       	adiw	r24, 0x03	; 3
    5cf0:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <calc_crc8>
	if(data[5]!=crc) return false;
    5cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    5cf6:	89 17       	cp	r24, r25
    5cf8:	21 f0       	breq	.+8      	; 0x5d02 <validate_data+0x2a>
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
    5cfc:	03 c0       	rjmp	.+6      	; 0x5d04 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    5cfe:	80 e0       	ldi	r24, 0x00	; 0
    5d00:	01 c0       	rjmp	.+2      	; 0x5d04 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    5d02:	81 e0       	ldi	r24, 0x01	; 1
}
    5d04:	df 91       	pop	r29
    5d06:	cf 91       	pop	r28
    5d08:	08 95       	ret

Disassembly of section .text.read_value:

00003cca <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <read_value+0xa>
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <read_value+0xc>
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <read_value+0xe>
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    3cde:	8f ef       	ldi	r24, 0xFF	; 255
    3ce0:	9f ef       	ldi	r25, 0xFF	; 255
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    3ce8:	0e 94 4b 34 	call	0x6896	; 0x6896 <SCD30_HAL_data_ready>
    3cec:	81 11       	cpse	r24, r1
    3cee:	07 c0       	rjmp	.+14     	; 0x3cfe <read_value+0x34>
		*value=0xfffe;
    3cf0:	8e ef       	ldi	r24, 0xFE	; 254
    3cf2:	9f ef       	ldi	r25, 0xFF	; 255
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3cfa:	83 e0       	ldi	r24, 0x03	; 3
    3cfc:	2c c0       	rjmp	.+88     	; 0x3d56 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3cfe:	22 e0       	ldi	r18, 0x02	; 2
    3d00:	4c ec       	ldi	r20, 0xCC	; 204
    3d02:	58 e0       	ldi	r21, 0x08	; 8
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	81 e6       	ldi	r24, 0x61	; 97
    3d08:	0e 94 06 32 	call	0x640c	; 0x640c <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d0c:	81 11       	cpse	r24, r1
    3d0e:	1e c0       	rjmp	.+60     	; 0x3d4c <read_value+0x82>
    3d10:	8f e3       	ldi	r24, 0x3F	; 63
    3d12:	9f e1       	ldi	r25, 0x1F	; 31
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <read_value+0x4a>
    3d18:	00 c0       	rjmp	.+0      	; 0x3d1a <read_value+0x50>
    3d1a:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    3d1c:	46 e0       	ldi	r20, 0x06	; 6
    3d1e:	be 01       	movw	r22, r28
    3d20:	6f 5f       	subi	r22, 0xFF	; 255
    3d22:	7f 4f       	sbci	r23, 0xFF	; 255
    3d24:	81 e6       	ldi	r24, 0x61	; 97
    3d26:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d2a:	81 11       	cpse	r24, r1
    3d2c:	11 c0       	rjmp	.+34     	; 0x3d50 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3d2e:	ce 01       	movw	r24, r28
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <validate_data>
    3d36:	88 23       	and	r24, r24
    3d38:	69 f0       	breq	.+26     	; 0x3d54 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	0e 94 13 32 	call	0x6426	; 0x6426 <bytes_2_uint>
    3d42:	f8 01       	movw	r30, r16
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	05 c0       	rjmp	.+10     	; 0x3d56 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	03 c0       	rjmp	.+6      	; 0x3d56 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3d54:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    3d56:	26 96       	adiw	r28, 0x06	; 6
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

000054c2 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    54c2:	80 91 8d 0f 	lds	r24, 0x0F8D	; 0x800f8d <_data>
    54c6:	90 91 8e 0f 	lds	r25, 0x0F8E	; 0x800f8e <_data+0x1>
    54ca:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    54ce:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    54d2:	a9 01       	movw	r20, r18
    54d4:	4f 5f       	subi	r20, 0xFF	; 255
    54d6:	5f 4f       	sbci	r21, 0xFF	; 255
    54d8:	50 93 8c 0f 	sts	0x0F8C, r21	; 0x800f8c <cntSamples+0x1>
    54dc:	40 93 8b 0f 	sts	0x0F8B, r20	; 0x800f8b <cntSamples>
    54e0:	22 0f       	add	r18, r18
    54e2:	33 1f       	adc	r19, r19
    54e4:	82 0f       	add	r24, r18
    54e6:	93 1f       	adc	r25, r19
    54e8:	0e 94 65 1e 	call	0x3cca	; 0x3cca <read_value>
	if(cntSamples>=_nSamples){
    54ec:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    54f0:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    54f4:	80 91 8f 0f 	lds	r24, 0x0F8F	; 0x800f8f <_nSamples>
    54f8:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <_nSamples+0x1>
    54fc:	28 17       	cp	r18, r24
    54fe:	39 07       	cpc	r19, r25
    5500:	10 f0       	brcs	.+4      	; 0x5506 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    5502:	0e 94 f7 33 	call	0x67ee	; 0x67ee <TC1_HAL_stop>
    5506:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

0000616c <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    616c:	0e 94 73 33 	call	0x66e6	; 0x66e6 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    6170:	81 e0       	ldi	r24, 0x01	; 1
    6172:	0e 94 a8 32 	call	0x6550	; 0x6550 <PM_HAL_SCD30_power>
    6176:	2f ef       	ldi	r18, 0xFF	; 255
    6178:	83 ed       	ldi	r24, 0xD3	; 211
    617a:	90 e3       	ldi	r25, 0x30	; 48
    617c:	21 50       	subi	r18, 0x01	; 1
    617e:	80 40       	sbci	r24, 0x00	; 0
    6180:	90 40       	sbci	r25, 0x00	; 0
    6182:	e1 f7       	brne	.-8      	; 0x617c <SCD30_sensor_on+0x10>
    6184:	00 c0       	rjmp	.+0      	; 0x6186 <SCD30_sensor_on+0x1a>
    6186:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    6188:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <init_measurement>
}
    618c:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

00006954 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    6954:	80 e0       	ldi	r24, 0x00	; 0
    6956:	0e 94 a8 32 	call	0x6550	; 0x6550 <PM_HAL_SCD30_power>
    695a:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

0000618e <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    618e:	70 93 90 0f 	sts	0x0F90, r23	; 0x800f90 <_nSamples+0x1>
    6192:	60 93 8f 0f 	sts	0x0F8F, r22	; 0x800f8f <_nSamples>
	cntSamples=0;
    6196:	10 92 8c 0f 	sts	0x0F8C, r1	; 0x800f8c <cntSamples+0x1>
    619a:	10 92 8b 0f 	sts	0x0F8B, r1	; 0x800f8b <cntSamples>
	_data=data;
    619e:	50 93 8e 0f 	sts	0x0F8E, r21	; 0x800f8e <_data+0x1>
    61a2:	40 93 8d 0f 	sts	0x0F8D, r20	; 0x800f8d <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    61a6:	61 e6       	ldi	r22, 0x61	; 97
    61a8:	7a e2       	ldi	r23, 0x2A	; 42
    61aa:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <TC1_HAL_init>
    61ae:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00006772 <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    6772:	0e 94 f7 33 	call	0x67ee	; 0x67ee <TC1_HAL_stop>
	_data=NULL;
    6776:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <_data+0x1>
    677a:	10 92 8d 0f 	sts	0x0F8D, r1	; 0x800f8d <_data>
    677e:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000068e6 <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    68e6:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <vect_SCD_do_sample>
	TC1_HAL_start();
    68ea:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <TC1_HAL_start>
    68ee:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

000063d4 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    63d4:	40 91 8b 0f 	lds	r20, 0x0F8B	; 0x800f8b <cntSamples>
    63d8:	50 91 8c 0f 	lds	r21, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    63dc:	20 91 8f 0f 	lds	r18, 0x0F8F	; 0x800f8f <_nSamples>
    63e0:	30 91 90 0f 	lds	r19, 0x0F90	; 0x800f90 <_nSamples+0x1>
    63e4:	81 e0       	ldi	r24, 0x01	; 1
    63e6:	42 17       	cp	r20, r18
    63e8:	53 07       	cpc	r21, r19
    63ea:	08 f4       	brcc	.+2      	; 0x63ee <SCD30_is_sampling_done+0x1a>
    63ec:	80 e0       	ldi	r24, 0x00	; 0
}
    63ee:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00006440 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    6444:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    6446:	0e 94 4b 34 	call	0x6896	; 0x6896 <SCD30_HAL_data_ready>
    644a:	88 23       	and	r24, r24
    644c:	e1 f3       	breq	.-8      	; 0x6446 <SCD30_get_reading+0x6>
	
	return read_value(value);
    644e:	ce 01       	movw	r24, r28
    6450:	0e 94 65 1e 	call	0x3cca	; 0x3cca <read_value>
}
    6454:	df 91       	pop	r29
    6456:	cf 91       	pop	r28
    6458:	08 95       	ret

Disassembly of section .text.parse_cmd:

00005ebc <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	80 81       	ld	r24, Z
    5ec0:	82 37       	cpi	r24, 0x72	; 114
    5ec2:	51 f0       	breq	.+20     	; 0x5ed8 <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    5ec4:	87 37       	cpi	r24, 0x77	; 119
    5ec6:	51 f0       	breq	.+20     	; 0x5edc <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    5ec8:	83 36       	cpi	r24, 0x63	; 99
    5eca:	51 f0       	breq	.+20     	; 0x5ee0 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    5ecc:	83 37       	cpi	r24, 0x73	; 115
    5ece:	51 f0       	breq	.+20     	; 0x5ee4 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    5ed0:	81 37       	cpi	r24, 0x71	; 113
    5ed2:	51 f4       	brne	.+20     	; 0x5ee8 <parse_cmd+0x2c>
    5ed4:	84 e0       	ldi	r24, 0x04	; 4
    5ed6:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5ed8:	87 e0       	ldi	r24, 0x07	; 7
    5eda:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    5edc:	88 e0       	ldi	r24, 0x08	; 8
    5ede:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    5ee0:	89 e0       	ldi	r24, 0x09	; 9
    5ee2:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    5ee4:	8a e0       	ldi	r24, 0x0A	; 10
    5ee6:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    5ee8:	85 e0       	ldi	r24, 0x05	; 5
}
    5eea:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004cb6 <validate_cmd>:

static bool validate_cmd(char msg[]){
    4cb6:	cf 93       	push	r28
    4cb8:	df 93       	push	r29
    4cba:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    4cbc:	bc 01       	movw	r22, r24
    4cbe:	80 e8       	ldi	r24, 0x80	; 128
    4cc0:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4cc4:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	31 97       	sbiw	r30, 0x01	; 1
    4cca:	ec 0f       	add	r30, r28
    4ccc:	fd 1f       	adc	r31, r29
    4cce:	80 81       	ld	r24, Z
    4cd0:	80 32       	cpi	r24, 0x20	; 32
    4cd2:	b1 f0       	breq	.+44     	; 0x4d00 <validate_cmd+0x4a>
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e0       	ldi	r20, 0x00	; 0
    4cda:	0d c0       	rjmp	.+26     	; 0x4cf6 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    4cdc:	fe 01       	movw	r30, r28
    4cde:	e2 0f       	add	r30, r18
    4ce0:	f3 1f       	adc	r31, r19
    4ce2:	90 81       	ld	r25, Z
    4ce4:	90 32       	cpi	r25, 0x20	; 32
    4ce6:	21 f4       	brne	.+8      	; 0x4cf0 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    4ce8:	41 11       	cpse	r20, r1
    4cea:	0c c0       	rjmp	.+24     	; 0x4d04 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    4cec:	41 e0       	ldi	r20, 0x01	; 1
    4cee:	01 c0       	rjmp	.+2      	; 0x4cf2 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    4cf0:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    4cf2:	2f 5f       	subi	r18, 0xFF	; 255
    4cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf6:	26 17       	cp	r18, r22
    4cf8:	37 07       	cpc	r19, r23
    4cfa:	80 f3       	brcs	.-32     	; 0x4cdc <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	03 c0       	rjmp	.+6      	; 0x4d06 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	01 c0       	rjmp	.+2      	; 0x4d06 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    4d04:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	08 95       	ret

Disassembly of section .text.CONF_enter:

00002502 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    2502:	cf 93       	push	r28
	uart1_hal_init();
    2504:	0e 94 48 2c 	call	0x5890	; 0x5890 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    2508:	c0 e0       	ldi	r28, 0x00	; 0
    250a:	0d c0       	rjmp	.+26     	; 0x2526 <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    250c:	c2 e0       	ldi	r28, 0x02	; 2
    250e:	0b c0       	rjmp	.+22     	; 0x2526 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    2510:	c5 e0       	ldi	r28, 0x05	; 5
    2512:	09 c0       	rjmp	.+18     	; 0x2526 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    2514:	c6 e0       	ldi	r28, 0x06	; 6
    2516:	07 c0       	rjmp	.+14     	; 0x2526 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2518:	c5 e0       	ldi	r28, 0x05	; 5
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    251c:	c5 e0       	ldi	r28, 0x05	; 5
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    2520:	c5 e0       	ldi	r28, 0x05	; 5
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2524:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    2526:	ec 2f       	mov	r30, r28
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	ec 30       	cpi	r30, 0x0C	; 12
    252c:	f1 05       	cpc	r31, r1
    252e:	d8 f7       	brcc	.-10     	; 0x2526 <CONF_enter+0x24>
    2530:	e5 5b       	subi	r30, 0xB5	; 181
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	0c 94 3f 34 	jmp	0x687e	; 0x687e <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    2538:	69 ec       	ldi	r22, 0xC9	; 201
    253a:	75 e0       	ldi	r23, 0x05	; 5
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    2542:	6f ee       	ldi	r22, 0xEF	; 239
    2544:	75 e0       	ldi	r23, 0x05	; 5
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				TC2_HAL_init();
    254c:	0e 94 09 31 	call	0x6212	; 0x6212 <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2550:	0e 94 25 30 	call	0x604a	; 0x604a <init_methane_SCD30>
    2554:	81 11       	cpse	r24, r1
    2556:	da cf       	rjmp	.-76     	; 0x250c <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    2558:	61 e1       	ldi	r22, 0x11	; 17
    255a:	76 e0       	ldi	r23, 0x06	; 6
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
					state=CONF_EXIT;
    2562:	c4 e0       	ldi	r28, 0x04	; 4
    2564:	e0 cf       	rjmp	.-64     	; 0x2526 <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    2566:	0e 94 81 33 	call	0x6702	; 0x6702 <uart1_hal_message_ready>
    256a:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    256c:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    256e:	0e 94 88 33 	call	0x6710	; 0x6710 <uart1_hal_rx_full>
    2572:	81 11       	cpse	r24, r1
    2574:	cd cf       	rjmp	.-102    	; 0x2510 <CONF_enter+0xe>
    2576:	d7 cf       	rjmp	.-82     	; 0x2526 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    2578:	88 ea       	ldi	r24, 0xA8	; 168
    257a:	97 e0       	ldi	r25, 0x07	; 7
    257c:	0e 94 11 30 	call	0x6022	; 0x6022 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2580:	88 ea       	ldi	r24, 0xA8	; 168
    2582:	97 e0       	ldi	r25, 0x07	; 7
    2584:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <validate_cmd>
    2588:	88 23       	and	r24, r24
    258a:	21 f2       	breq	.-120    	; 0x2514 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    258c:	88 ea       	ldi	r24, 0xA8	; 168
    258e:	97 e0       	ldi	r25, 0x07	; 7
    2590:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <parse_cmd>
    2594:	c8 2f       	mov	r28, r24
    2596:	c7 cf       	rjmp	.-114    	; 0x2526 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    2598:	68 ea       	ldi	r22, 0xA8	; 168
    259a:	77 e0       	ldi	r23, 0x07	; 7
    259c:	80 e8       	ldi	r24, 0x80	; 128
    259e:	40 ee       	ldi	r20, 0xE0	; 224
    25a0:	56 e0       	ldi	r21, 0x06	; 6
    25a2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <handle_read>
    25a6:	88 23       	and	r24, r24
    25a8:	09 f4       	brne	.+2      	; 0x25ac <CONF_enter+0xaa>
    25aa:	b6 cf       	rjmp	.-148    	; 0x2518 <CONF_enter+0x16>
					state=CONF_REPLY;
    25ac:	cb e0       	ldi	r28, 0x0B	; 11
    25ae:	bb cf       	rjmp	.-138    	; 0x2526 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    25b0:	68 ea       	ldi	r22, 0xA8	; 168
    25b2:	77 e0       	ldi	r23, 0x07	; 7
    25b4:	80 e8       	ldi	r24, 0x80	; 128
    25b6:	40 ee       	ldi	r20, 0xE0	; 224
    25b8:	56 e0       	ldi	r21, 0x06	; 6
    25ba:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <handle_write>
    25be:	88 23       	and	r24, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <CONF_enter+0xc2>
    25c2:	ac cf       	rjmp	.-168    	; 0x251c <CONF_enter+0x1a>
					state=CONF_REPLY;
    25c4:	cb e0       	ldi	r28, 0x0B	; 11
    25c6:	af cf       	rjmp	.-162    	; 0x2526 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    25c8:	68 ea       	ldi	r22, 0xA8	; 168
    25ca:	77 e0       	ldi	r23, 0x07	; 7
    25cc:	80 e8       	ldi	r24, 0x80	; 128
    25ce:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <CONNECT>
    25d2:	88 23       	and	r24, r24
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <CONF_enter+0xd6>
    25d6:	a4 cf       	rjmp	.-184    	; 0x2520 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    25d8:	c2 e0       	ldi	r28, 0x02	; 2
    25da:	a5 cf       	rjmp	.-182    	; 0x2526 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    25dc:	68 ea       	ldi	r22, 0xA8	; 168
    25de:	77 e0       	ldi	r23, 0x07	; 7
    25e0:	80 e8       	ldi	r24, 0x80	; 128
    25e2:	40 ee       	ldi	r20, 0xE0	; 224
    25e4:	56 e0       	ldi	r21, 0x06	; 6
    25e6:	0e 94 12 1c 	call	0x3824	; 0x3824 <handle_sample>
    25ea:	88 23       	and	r24, r24
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <CONF_enter+0xee>
    25ee:	9a cf       	rjmp	.-204    	; 0x2524 <CONF_enter+0x22>
					state=CONF_REPLY;
    25f0:	cb e0       	ldi	r28, 0x0B	; 11
    25f2:	99 cf       	rjmp	.-206    	; 0x2526 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    25f4:	60 ee       	ldi	r22, 0xE0	; 224
    25f6:	76 e0       	ldi	r23, 0x06	; 6
    25f8:	80 e8       	ldi	r24, 0x80	; 128
    25fa:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25fe:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2600:	92 cf       	rjmp	.-220    	; 0x2526 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    2602:	60 e3       	ldi	r22, 0x30	; 48
    2604:	76 e0       	ldi	r23, 0x06	; 6
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    260c:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    260e:	8b cf       	rjmp	.-234    	; 0x2526 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    2610:	6a e3       	ldi	r22, 0x3A	; 58
    2612:	76 e0       	ldi	r23, 0x06	; 6
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    261a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    261c:	84 cf       	rjmp	.-248    	; 0x2526 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    261e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    2622:	67 e4       	ldi	r22, 0x47	; 71
    2624:	76 e0       	ldi	r23, 0x06	; 6
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    262c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    262e:	7b cf       	rjmp	.-266    	; 0x2526 <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    2630:	6d e6       	ldi	r22, 0x6D	; 109
    2632:	76 e0       	ldi	r23, 0x06	; 6
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				return;
		}
	}
}
    263a:	cf 91       	pop	r28
    263c:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

000047d8 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    47d8:	cf 92       	push	r12
    47da:	df 92       	push	r13
    47dc:	ef 92       	push	r14
    47de:	0f 93       	push	r16
    47e0:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    47e2:	6c 01       	movw	r12, r24
    47e4:	20 e8       	ldi	r18, 0x80	; 128
    47e6:	e2 2e       	mov	r14, r18
    47e8:	04 e0       	ldi	r16, 0x04	; 4
    47ea:	10 e0       	ldi	r17, 0x00	; 0
    47ec:	20 e2       	ldi	r18, 0x20	; 32
    47ee:	37 e0       	ldi	r19, 0x07	; 7
    47f0:	40 e0       	ldi	r20, 0x00	; 0
    47f2:	8e 2d       	mov	r24, r14
    47f4:	b6 01       	movw	r22, r12
    47f6:	0e 94 22 24 	call	0x4844	; 0x4844 <strncmp>
    47fa:	89 2b       	or	r24, r25
    47fc:	c1 f0       	breq	.+48     	; 0x482e <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    47fe:	05 e0       	ldi	r16, 0x05	; 5
    4800:	10 e0       	ldi	r17, 0x00	; 0
    4802:	25 e2       	ldi	r18, 0x25	; 37
    4804:	37 e0       	ldi	r19, 0x07	; 7
    4806:	40 e0       	ldi	r20, 0x00	; 0
    4808:	8e 2d       	mov	r24, r14
    480a:	b6 01       	movw	r22, r12
    480c:	0e 94 22 24 	call	0x4844	; 0x4844 <strncmp>
    4810:	89 2b       	or	r24, r25
    4812:	79 f0       	breq	.+30     	; 0x4832 <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    4814:	04 e0       	ldi	r16, 0x04	; 4
    4816:	10 e0       	ldi	r17, 0x00	; 0
    4818:	2b e2       	ldi	r18, 0x2B	; 43
    481a:	37 e0       	ldi	r19, 0x07	; 7
    481c:	40 e0       	ldi	r20, 0x00	; 0
    481e:	8e 2d       	mov	r24, r14
    4820:	b6 01       	movw	r22, r12
    4822:	0e 94 22 24 	call	0x4844	; 0x4844 <strncmp>
    4826:	89 2b       	or	r24, r25
    4828:	31 f4       	brne	.+12     	; 0x4836 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    482a:	85 e0       	ldi	r24, 0x05	; 5
    482c:	05 c0       	rjmp	.+10     	; 0x4838 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    482e:	86 e0       	ldi	r24, 0x06	; 6
    4830:	03 c0       	rjmp	.+6      	; 0x4838 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    4832:	84 e0       	ldi	r24, 0x04	; 4
    4834:	01 c0       	rjmp	.+2      	; 0x4838 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    4836:	83 e0       	ldi	r24, 0x03	; 3
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	ef 90       	pop	r14
    483e:	df 90       	pop	r13
    4840:	cf 90       	pop	r12
    4842:	08 95       	ret

Disassembly of section .text.CON_RN2483:

000020fa <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    20fa:	6f 92       	push	r6
    20fc:	7f 92       	push	r7
    20fe:	8f 92       	push	r8
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    210a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    210c:	ec 2f       	mov	r30, r28
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	e7 30       	cpi	r30, 0x07	; 7
    2112:	f1 05       	cpc	r31, r1
    2114:	d8 f7       	brcc	.-10     	; 0x210c <CON_RN2483+0x12>
    2116:	e9 5a       	subi	r30, 0xA9	; 169
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	0c 94 3f 34 	jmp	0x687e	; 0x687e <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    211e:	0e 94 0c 2c 	call	0x5818	; 0x5818 <uart0_hal_init>
				rn2483_init();
    2122:	0e 94 86 34 	call	0x690c	; 0x690c <rn2483_init>
				LM_reset_module();
    2126:	0e 94 c9 34 	call	0x6992	; 0x6992 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    212a:	60 e3       	ldi	r22, 0x30	; 48
    212c:	77 e0       	ldi	r23, 0x07	; 7
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CL_READ_MSG;
    2134:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2136:	ea cf       	rjmp	.-44     	; 0x210c <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    2138:	0e 94 81 33 	call	0x6702	; 0x6702 <uart1_hal_message_ready>
    213c:	88 23       	and	r24, r24
    213e:	31 f3       	breq	.-52     	; 0x210c <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    2140:	88 ea       	ldi	r24, 0xA8	; 168
    2142:	97 e0       	ldi	r25, 0x07	; 7
    2144:	0e 94 11 30 	call	0x6022	; 0x6022 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    2148:	c2 e0       	ldi	r28, 0x02	; 2
    214a:	e0 cf       	rjmp	.-64     	; 0x210c <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    214c:	88 ea       	ldi	r24, 0xA8	; 168
    214e:	97 e0       	ldi	r25, 0x07	; 7
    2150:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <CON_RN2483_parse>
    2154:	c8 2f       	mov	r28, r24
			break;
    2156:	da cf       	rjmp	.-76     	; 0x210c <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    2158:	88 ea       	ldi	r24, 0xA8	; 168
    215a:	97 e0       	ldi	r25, 0x07	; 7
    215c:	6c 01       	movw	r12, r24
    215e:	20 e8       	ldi	r18, 0x80	; 128
    2160:	e2 2e       	mov	r14, r18
    2162:	2f 93       	push	r18
    2164:	df 92       	push	r13
    2166:	8f 93       	push	r24
    2168:	86 e6       	ldi	r24, 0x66	; 102
    216a:	97 e0       	ldi	r25, 0x07	; 7
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	af 93       	push	r26
    2170:	9f 93       	push	r25
    2172:	8f 93       	push	r24
    2174:	c0 ee       	ldi	r28, 0xE0	; 224
    2176:	d6 e0       	ldi	r29, 0x06	; 6
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
				uart1_hal_send_string(cnf_reply);
    2180:	3e 01       	movw	r6, r28
    2182:	20 e8       	ldi	r18, 0x80	; 128
    2184:	82 2e       	mov	r8, r18
    2186:	88 2d       	mov	r24, r8
    2188:	b3 01       	movw	r22, r6
    218a:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    218e:	ae 01       	movw	r20, r28
    2190:	6c 2d       	mov	r22, r12
    2192:	7d 2d       	mov	r23, r13
    2194:	8e 2d       	mov	r24, r14
    2196:	0e 94 cc 34 	call	0x6998	; 0x6998 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    219a:	88 2d       	mov	r24, r8
    219c:	b3 01       	movw	r22, r6
    219e:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    21a2:	8d b7       	in	r24, 0x3d	; 61
    21a4:	9e b7       	in	r25, 0x3e	; 62
    21a6:	08 96       	adiw	r24, 0x08	; 8
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	9e bf       	out	0x3e, r25	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    21b2:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    21b4:	ab cf       	rjmp	.-170    	; 0x210c <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    21b6:	8c e6       	ldi	r24, 0x6C	; 108
    21b8:	97 e0       	ldi	r25, 0x07	; 7
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	af 93       	push	r26
    21be:	9f 93       	push	r25
    21c0:	8f 93       	push	r24
    21c2:	86 e6       	ldi	r24, 0x66	; 102
    21c4:	97 e0       	ldi	r25, 0x07	; 7
    21c6:	a0 e0       	ldi	r26, 0x00	; 0
    21c8:	af 93       	push	r26
    21ca:	9f 93       	push	r25
    21cc:	8f 93       	push	r24
    21ce:	c0 ee       	ldi	r28, 0xE0	; 224
    21d0:	d6 e0       	ldi	r29, 0x06	; 6
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
				uart1_hal_send_string(cnf_reply);
    21da:	be 01       	movw	r22, r28
    21dc:	80 e8       	ldi	r24, 0x80	; 128
    21de:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
    21e2:	8f e7       	ldi	r24, 0x7F	; 127
    21e4:	98 e3       	ldi	r25, 0x38	; 56
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	81 50       	subi	r24, 0x01	; 1
    21ea:	90 40       	sbci	r25, 0x00	; 0
    21ec:	20 40       	sbci	r18, 0x00	; 0
    21ee:	e1 f7       	brne	.-8      	; 0x21e8 <CON_RN2483+0xee>
    21f0:	00 c0       	rjmp	.+0      	; 0x21f2 <CON_RN2483+0xf8>
    21f2:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    21f4:	0e 94 cf 34 	call	0x699e	; 0x699e <LM_send_break>
				state=CL_READ_MSG;
			break;
    21f8:	8d b7       	in	r24, 0x3d	; 61
    21fa:	9e b7       	in	r25, 0x3e	; 62
    21fc:	08 96       	adiw	r24, 0x08	; 8
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	9e bf       	out	0x3e, r25	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    2208:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    220a:	80 cf       	rjmp	.-256    	; 0x210c <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    220c:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <uart0_hal_message_ready>
    2210:	88 23       	and	r24, r24
    2212:	29 f0       	breq	.+10     	; 0x221e <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    2214:	80 ee       	ldi	r24, 0xE0	; 224
    2216:	96 e0       	ldi	r25, 0x06	; 6
    2218:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <uart0_hal_read_message_as_str>
    221c:	09 c0       	rjmp	.+18     	; 0x2230 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    221e:	25 e0       	ldi	r18, 0x05	; 5
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	47 e7       	ldi	r20, 0x77	; 119
    2224:	57 e0       	ldi	r21, 0x07	; 7
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	80 ee       	ldi	r24, 0xE0	; 224
    222a:	96 e0       	ldi	r25, 0x06	; 6
    222c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    2230:	60 ee       	ldi	r22, 0xE0	; 224
    2232:	76 e0       	ldi	r23, 0x06	; 6
    2234:	80 e8       	ldi	r24, 0x80	; 128
    2236:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				state=CL_READ_MSG;
    223a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    223c:	67 cf       	rjmp	.-306    	; 0x210c <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    223e:	0e 94 55 34 	call	0x68aa	; 0x68aa <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    2242:	6c e7       	ldi	r22, 0x7C	; 124
    2244:	77 e0       	ldi	r23, 0x07	; 7
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	8f 90       	pop	r8
    225a:	7f 90       	pop	r7
    225c:	6f 90       	pop	r6
    225e:	08 95       	ret

Disassembly of section .text.CONNECT:

00004d60 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
    4d64:	cd b7       	in	r28, 0x3d	; 61
    4d66:	de b7       	in	r29, 0x3e	; 62
    4d68:	64 97       	sbiw	r28, 0x14	; 20
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	de bf       	out	0x3e, r29	; 62
    4d70:	0f be       	out	0x3f, r0	; 63
    4d72:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    4d74:	21 e0       	ldi	r18, 0x01	; 1
    4d76:	ae 01       	movw	r20, r28
    4d78:	4f 5f       	subi	r20, 0xFF	; 255
    4d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d7c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    4d80:	88 23       	and	r24, r24
    4d82:	79 f0       	breq	.+30     	; 0x4da2 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    4d84:	be 01       	movw	r22, r28
    4d86:	6f 5f       	subi	r22, 0xFF	; 255
    4d88:	7f 4f       	sbci	r23, 0xFF	; 255
    4d8a:	80 e8       	ldi	r24, 0x80	; 128
    4d8c:	2c e9       	ldi	r18, 0x9C	; 156
    4d8e:	37 e0       	ldi	r19, 0x07	; 7
    4d90:	40 e0       	ldi	r20, 0x00	; 0
    4d92:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    4d96:	89 2b       	or	r24, r25
    4d98:	19 f4       	brne	.+6      	; 0x4da0 <CONNECT+0x40>
		return CON_RN2483();
    4d9a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <CON_RN2483>
    4d9e:	01 c0       	rjmp	.+2      	; 0x4da2 <CONNECT+0x42>
	}else{
		return false;
    4da0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4da2:	64 96       	adiw	r28, 0x14	; 20
    4da4:	0f b6       	in	r0, 0x3f	; 63
    4da6:	f8 94       	cli
    4da8:	de bf       	out	0x3e, r29	; 62
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	cd bf       	out	0x3d, r28	; 61
    4dae:	df 91       	pop	r29
    4db0:	cf 91       	pop	r28
    4db2:	08 95       	ret

Disassembly of section .text.read_cols:

000036ac <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	a3 97       	sbiw	r28, 0x23	; 35
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    36cc:	63 e2       	ldi	r22, 0x23	; 35
    36ce:	ce 01       	movw	r24, r28
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	0e 94 40 33 	call	0x6680	; 0x6680 <EM_get_collections>
	res[0]='\0';
    36d6:	f7 01       	movw	r30, r14
    36d8:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    36da:	10 e0       	ldi	r17, 0x00	; 0
    36dc:	35 c0       	rjmp	.+106    	; 0x3748 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    36de:	81 2f       	mov	r24, r17
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	fc 01       	movw	r30, r24
    36e4:	ee 0f       	add	r30, r30
    36e6:	ff 1f       	adc	r31, r31
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	e8 0f       	add	r30, r24
    36ee:	f9 1f       	adc	r31, r25
    36f0:	21 e0       	ldi	r18, 0x01	; 1
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	2c 0f       	add	r18, r28
    36f6:	3d 1f       	adc	r19, r29
    36f8:	e2 0f       	add	r30, r18
    36fa:	f3 1f       	adc	r31, r19
    36fc:	23 81       	ldd	r18, Z+3	; 0x03
    36fe:	2f 93       	push	r18
    3700:	22 81       	ldd	r18, Z+2	; 0x02
    3702:	2f 93       	push	r18
    3704:	21 81       	ldd	r18, Z+1	; 0x01
    3706:	2f 93       	push	r18
    3708:	20 81       	ld	r18, Z
    370a:	2f 93       	push	r18
    370c:	01 96       	adiw	r24, 0x01	; 1
    370e:	9f 93       	push	r25
    3710:	8f 93       	push	r24
    3712:	81 e4       	ldi	r24, 0x41	; 65
    3714:	94 e0       	ldi	r25, 0x04	; 4
    3716:	a0 e0       	ldi	r26, 0x00	; 0
    3718:	af 93       	push	r26
    371a:	9f 93       	push	r25
    371c:	8f 93       	push	r24
    371e:	0f 2e       	mov	r0, r31
    3720:	f0 e8       	ldi	r31, 0x80	; 128
    3722:	cf 2e       	mov	r12, r31
    3724:	fe e0       	ldi	r31, 0x0E	; 14
    3726:	df 2e       	mov	r13, r31
    3728:	f0 2d       	mov	r31, r0
    372a:	df 92       	push	r13
    372c:	cf 92       	push	r12
    372e:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
		strcat(res, arg);
    3732:	a6 01       	movw	r20, r12
    3734:	60 e8       	ldi	r22, 0x80	; 128
    3736:	c7 01       	movw	r24, r14
    3738:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    373c:	1f 5f       	subi	r17, 0xFF	; 255
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	17 30       	cpi	r17, 0x07	; 7
    374a:	48 f2       	brcs	.-110    	; 0x36de <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    374c:	a3 96       	adiw	r28, 0x23	; 35
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	1f 91       	pop	r17
    375e:	ff 90       	pop	r15
    3760:	ef 90       	pop	r14
    3762:	df 90       	pop	r13
    3764:	cf 90       	pop	r12
    3766:	08 95       	ret

Disassembly of section .text.read_time:

00003fc0 <read_time>:

static void read_time(char res[]){
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
    3fc8:	00 d0       	rcall	.+0      	; 0x3fca <read_time+0xa>
    3fca:	00 d0       	rcall	.+0      	; 0x3fcc <read_time+0xc>
    3fcc:	00 d0       	rcall	.+0      	; 0x3fce <read_time+0xe>
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	18 2f       	mov	r17, r24
    3fd4:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    3fd6:	0e 94 02 33 	call	0x6604	; 0x6604 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    3fda:	ce 01       	movw	r24, r28
    3fdc:	01 96       	adiw	r24, 0x01	; 1
    3fde:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    3fe2:	88 23       	and	r24, r24
    3fe4:	51 f0       	breq	.+20     	; 0x3ffa <read_time+0x3a>
		strcpy(res, "Failed to read time");
    3fe6:	24 e1       	ldi	r18, 0x14	; 20
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	47 e5       	ldi	r20, 0x57	; 87
    3fec:	54 e0       	ldi	r21, 0x04	; 4
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	81 2f       	mov	r24, r17
    3ff2:	90 2f       	mov	r25, r16
    3ff4:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
    3ff8:	21 c0       	rjmp	.+66     	; 0x403c <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    3ffa:	59 81       	ldd	r21, Y+1	; 0x01
    3ffc:	4a 81       	ldd	r20, Y+2	; 0x02
    3ffe:	3b 81       	ldd	r19, Y+3	; 0x03
    4000:	2c 81       	ldd	r18, Y+4	; 0x04
    4002:	9d 81       	ldd	r25, Y+5	; 0x05
    4004:	8e 81       	ldd	r24, Y+6	; 0x06
    4006:	1f 92       	push	r1
    4008:	5f 93       	push	r21
    400a:	1f 92       	push	r1
    400c:	4f 93       	push	r20
    400e:	1f 92       	push	r1
    4010:	3f 93       	push	r19
    4012:	1f 92       	push	r1
    4014:	2f 93       	push	r18
    4016:	1f 92       	push	r1
    4018:	9f 93       	push	r25
    401a:	1f 92       	push	r1
    401c:	8f 93       	push	r24
    401e:	8b e6       	ldi	r24, 0x6B	; 107
    4020:	94 e0       	ldi	r25, 0x04	; 4
    4022:	a0 e0       	ldi	r26, 0x00	; 0
    4024:	af 93       	push	r26
    4026:	9f 93       	push	r25
    4028:	8f 93       	push	r24
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61
	}
}
    403c:	26 96       	adiw	r28, 0x06	; 6
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	1f 91       	pop	r17
    404e:	0f 91       	pop	r16
    4050:	08 95       	ret

Disassembly of section .text.write_deveui:

00004354 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    4354:	cf 92       	push	r12
    4356:	df 92       	push	r13
    4358:	ef 92       	push	r14
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
    4360:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4362:	22 e0       	ldi	r18, 0x02	; 2
    4364:	40 e8       	ldi	r20, 0x80	; 128
    4366:	5e e0       	ldi	r21, 0x0E	; 14
    4368:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    436c:	c8 2f       	mov	r28, r24
    436e:	88 23       	and	r24, r24
    4370:	29 f1       	breq	.+74     	; 0x43bc <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4372:	80 e8       	ldi	r24, 0x80	; 128
    4374:	9e e0       	ldi	r25, 0x0E	; 14
    4376:	6c 01       	movw	r12, r24
    4378:	20 e8       	ldi	r18, 0x80	; 128
    437a:	e2 2e       	mov	r14, r18
    437c:	8e 2d       	mov	r24, r14
    437e:	b6 01       	movw	r22, r12
    4380:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4384:	40 97       	sbiw	r24, 0x10	; 16
    4386:	c9 f4       	brne	.+50     	; 0x43ba <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4388:	8e 2d       	mov	r24, r14
    438a:	b6 01       	movw	r22, r12
    438c:	0e 94 a0 2c 	call	0x5940	; 0x5940 <EM_set_deveui>
    4390:	c8 2f       	mov	r28, r24
    4392:	81 11       	cpse	r24, r1
    4394:	09 c0       	rjmp	.+18     	; 0x43a8 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4396:	27 e0       	ldi	r18, 0x07	; 7
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	49 e8       	ldi	r20, 0x89	; 137
    439c:	54 e0       	ldi	r21, 0x04	; 4
    439e:	60 e0       	ldi	r22, 0x00	; 0
    43a0:	c8 01       	movw	r24, r16
    43a2:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return false;
    43a6:	0a c0       	rjmp	.+20     	; 0x43bc <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    43a8:	28 e0       	ldi	r18, 0x08	; 8
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	40 e9       	ldi	r20, 0x90	; 144
    43ae:	54 e0       	ldi	r21, 0x04	; 4
    43b0:	60 e0       	ldi	r22, 0x00	; 0
    43b2:	c8 01       	movw	r24, r16
    43b4:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    43b8:	01 c0       	rjmp	.+2      	; 0x43bc <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    43ba:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    43bc:	8c 2f       	mov	r24, r28
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	ef 90       	pop	r14
    43c6:	df 90       	pop	r13
    43c8:	cf 90       	pop	r12
    43ca:	08 95       	ret

Disassembly of section .text.write_appeui:

000043cc <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    43cc:	cf 92       	push	r12
    43ce:	df 92       	push	r13
    43d0:	ef 92       	push	r14
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	cf 93       	push	r28
    43d8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    43da:	22 e0       	ldi	r18, 0x02	; 2
    43dc:	40 e8       	ldi	r20, 0x80	; 128
    43de:	5e e0       	ldi	r21, 0x0E	; 14
    43e0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    43e4:	c8 2f       	mov	r28, r24
    43e6:	88 23       	and	r24, r24
    43e8:	29 f1       	breq	.+74     	; 0x4434 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    43ea:	80 e8       	ldi	r24, 0x80	; 128
    43ec:	9e e0       	ldi	r25, 0x0E	; 14
    43ee:	6c 01       	movw	r12, r24
    43f0:	20 e8       	ldi	r18, 0x80	; 128
    43f2:	e2 2e       	mov	r14, r18
    43f4:	8e 2d       	mov	r24, r14
    43f6:	b6 01       	movw	r22, r12
    43f8:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    43fc:	40 97       	sbiw	r24, 0x10	; 16
    43fe:	c9 f4       	brne	.+50     	; 0x4432 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    4400:	8e 2d       	mov	r24, r14
    4402:	b6 01       	movw	r22, r12
    4404:	0e 94 bd 2c 	call	0x597a	; 0x597a <EM_set_appeui>
    4408:	c8 2f       	mov	r28, r24
    440a:	81 11       	cpse	r24, r1
    440c:	09 c0       	rjmp	.+18     	; 0x4420 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    440e:	27 e0       	ldi	r18, 0x07	; 7
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	49 e8       	ldi	r20, 0x89	; 137
    4414:	54 e0       	ldi	r21, 0x04	; 4
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	c8 01       	movw	r24, r16
    441a:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return false;
    441e:	0a c0       	rjmp	.+20     	; 0x4434 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4420:	28 e0       	ldi	r18, 0x08	; 8
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e9       	ldi	r20, 0x90	; 144
    4426:	54 e0       	ldi	r21, 0x04	; 4
    4428:	60 e0       	ldi	r22, 0x00	; 0
    442a:	c8 01       	movw	r24, r16
    442c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    4430:	01 c0       	rjmp	.+2      	; 0x4434 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4432:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4434:	8c 2f       	mov	r24, r28
    4436:	cf 91       	pop	r28
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	ef 90       	pop	r14
    443e:	df 90       	pop	r13
    4440:	cf 90       	pop	r12
    4442:	08 95       	ret

Disassembly of section .text.write_appkey:

00004444 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    4444:	cf 92       	push	r12
    4446:	df 92       	push	r13
    4448:	ef 92       	push	r14
    444a:	0f 93       	push	r16
    444c:	1f 93       	push	r17
    444e:	cf 93       	push	r28
    4450:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4452:	22 e0       	ldi	r18, 0x02	; 2
    4454:	40 e8       	ldi	r20, 0x80	; 128
    4456:	5e e0       	ldi	r21, 0x0E	; 14
    4458:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    445c:	c8 2f       	mov	r28, r24
    445e:	88 23       	and	r24, r24
    4460:	29 f1       	breq	.+74     	; 0x44ac <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    4462:	80 e8       	ldi	r24, 0x80	; 128
    4464:	9e e0       	ldi	r25, 0x0E	; 14
    4466:	6c 01       	movw	r12, r24
    4468:	20 e8       	ldi	r18, 0x80	; 128
    446a:	e2 2e       	mov	r14, r18
    446c:	8e 2d       	mov	r24, r14
    446e:	b6 01       	movw	r22, r12
    4470:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4474:	80 97       	sbiw	r24, 0x20	; 32
    4476:	c9 f4       	brne	.+50     	; 0x44aa <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4478:	8e 2d       	mov	r24, r14
    447a:	b6 01       	movw	r22, r12
    447c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <EM_set_appkey>
    4480:	c8 2f       	mov	r28, r24
    4482:	81 11       	cpse	r24, r1
    4484:	09 c0       	rjmp	.+18     	; 0x4498 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4486:	27 e0       	ldi	r18, 0x07	; 7
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	49 e8       	ldi	r20, 0x89	; 137
    448c:	54 e0       	ldi	r21, 0x04	; 4
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	c8 01       	movw	r24, r16
    4492:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return false;
    4496:	0a c0       	rjmp	.+20     	; 0x44ac <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4498:	28 e0       	ldi	r18, 0x08	; 8
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e9       	ldi	r20, 0x90	; 144
    449e:	54 e0       	ldi	r21, 0x04	; 4
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	c8 01       	movw	r24, r16
    44a4:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    44a8:	01 c0       	rjmp	.+2      	; 0x44ac <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    44aa:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    44ac:	8c 2f       	mov	r24, r28
    44ae:	cf 91       	pop	r28
    44b0:	1f 91       	pop	r17
    44b2:	0f 91       	pop	r16
    44b4:	ef 90       	pop	r14
    44b6:	df 90       	pop	r13
    44b8:	cf 90       	pop	r12
    44ba:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00005076 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    5076:	0f 93       	push	r16
    5078:	1f 93       	push	r17
    507a:	cf 93       	push	r28
    507c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    507e:	22 e0       	ldi	r18, 0x02	; 2
    5080:	40 e8       	ldi	r20, 0x80	; 128
    5082:	5e e0       	ldi	r21, 0x0E	; 14
    5084:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    5088:	c8 2f       	mov	r28, r24
    508a:	88 23       	and	r24, r24
    508c:	a9 f0       	breq	.+42     	; 0x50b8 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    508e:	80 e8       	ldi	r24, 0x80	; 128
    5090:	9e e0       	ldi	r25, 0x0E	; 14
    5092:	0e 94 04 26 	call	0x4c08	; 0x4c08 <is_float>
    5096:	c8 2f       	mov	r28, r24
    5098:	88 23       	and	r24, r24
    509a:	71 f0       	breq	.+28     	; 0x50b8 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    509c:	80 e8       	ldi	r24, 0x80	; 128
    509e:	9e e0       	ldi	r25, 0x0E	; 14
    50a0:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <str2flaot>
	EM_set_ppmfactor(val);
    50a4:	0e 94 96 33 	call	0x672c	; 0x672c <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    50a8:	28 e0       	ldi	r18, 0x08	; 8
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	40 e9       	ldi	r20, 0x90	; 144
    50ae:	54 e0       	ldi	r21, 0x04	; 4
    50b0:	60 e0       	ldi	r22, 0x00	; 0
    50b2:	c8 01       	movw	r24, r16
    50b4:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
}
    50b8:	8c 2f       	mov	r24, r28
    50ba:	cf 91       	pop	r28
    50bc:	1f 91       	pop	r17
    50be:	0f 91       	pop	r16
    50c0:	08 95       	ret

Disassembly of section .text.write_RRL:

000050c2 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    50c2:	0f 93       	push	r16
    50c4:	1f 93       	push	r17
    50c6:	cf 93       	push	r28
    50c8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    50ca:	22 e0       	ldi	r18, 0x02	; 2
    50cc:	40 e8       	ldi	r20, 0x80	; 128
    50ce:	5e e0       	ldi	r21, 0x0E	; 14
    50d0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    50d4:	c8 2f       	mov	r28, r24
    50d6:	88 23       	and	r24, r24
    50d8:	a9 f0       	breq	.+42     	; 0x5104 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    50da:	80 e8       	ldi	r24, 0x80	; 128
    50dc:	9e e0       	ldi	r25, 0x0E	; 14
    50de:	0e 94 04 26 	call	0x4c08	; 0x4c08 <is_float>
    50e2:	c8 2f       	mov	r28, r24
    50e4:	88 23       	and	r24, r24
    50e6:	71 f0       	breq	.+28     	; 0x5104 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    50e8:	80 e8       	ldi	r24, 0x80	; 128
    50ea:	9e e0       	ldi	r25, 0x0E	; 14
    50ec:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <str2flaot>
	EM_set_RRL(val);
    50f0:	0e 94 9d 33 	call	0x673a	; 0x673a <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    50f4:	28 e0       	ldi	r18, 0x08	; 8
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	40 e9       	ldi	r20, 0x90	; 144
    50fa:	54 e0       	ldi	r21, 0x04	; 4
    50fc:	60 e0       	ldi	r22, 0x00	; 0
    50fe:	c8 01       	movw	r24, r16
    5100:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
}
    5104:	8c 2f       	mov	r24, r28
    5106:	cf 91       	pop	r28
    5108:	1f 91       	pop	r17
    510a:	0f 91       	pop	r16
    510c:	08 95       	ret

Disassembly of section .text.write_VCC:

0000510e <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    510e:	0f 93       	push	r16
    5110:	1f 93       	push	r17
    5112:	cf 93       	push	r28
    5114:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5116:	22 e0       	ldi	r18, 0x02	; 2
    5118:	40 e8       	ldi	r20, 0x80	; 128
    511a:	5e e0       	ldi	r21, 0x0E	; 14
    511c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    5120:	c8 2f       	mov	r28, r24
    5122:	88 23       	and	r24, r24
    5124:	a9 f0       	breq	.+42     	; 0x5150 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    5126:	80 e8       	ldi	r24, 0x80	; 128
    5128:	9e e0       	ldi	r25, 0x0E	; 14
    512a:	0e 94 04 26 	call	0x4c08	; 0x4c08 <is_float>
    512e:	c8 2f       	mov	r28, r24
    5130:	88 23       	and	r24, r24
    5132:	71 f0       	breq	.+28     	; 0x5150 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    5134:	80 e8       	ldi	r24, 0x80	; 128
    5136:	9e e0       	ldi	r25, 0x0E	; 14
    5138:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <str2flaot>
	EM_set_Vcc(val);
    513c:	0e 94 a4 33 	call	0x6748	; 0x6748 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    5140:	28 e0       	ldi	r18, 0x08	; 8
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	40 e9       	ldi	r20, 0x90	; 144
    5146:	54 e0       	ldi	r21, 0x04	; 4
    5148:	60 e0       	ldi	r22, 0x00	; 0
    514a:	c8 01       	movw	r24, r16
    514c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
}
    5150:	8c 2f       	mov	r24, r28
    5152:	cf 91       	pop	r28
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	08 95       	ret

Disassembly of section .text.get_time_par:

00005c0e <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    5c0e:	cf 93       	push	r28
    5c10:	df 93       	push	r29
    5c12:	00 d0       	rcall	.+0      	; 0x5c14 <get_time_par+0x6>
    5c14:	1f 92       	push	r1
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	e6 0f       	add	r30, r22
    5c1e:	f1 1d       	adc	r31, r1
    5c20:	80 81       	ld	r24, Z
    5c22:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    5c24:	81 81       	ldd	r24, Z+1	; 0x01
    5c26:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    5c28:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    5c2a:	be 01       	movw	r22, r28
    5c2c:	6f 5f       	subi	r22, 0xFF	; 255
    5c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c30:	80 e8       	ldi	r24, 0x80	; 128
    5c32:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
}
    5c36:	0f 90       	pop	r0
    5c38:	0f 90       	pop	r0
    5c3a:	0f 90       	pop	r0
    5c3c:	df 91       	pop	r29
    5c3e:	cf 91       	pop	r28
    5c40:	08 95       	ret

Disassembly of section .text.write_cols:

0000263e <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    263e:	4f 92       	push	r4
    2640:	5f 92       	push	r5
    2642:	6f 92       	push	r6
    2644:	7f 92       	push	r7
    2646:	8f 92       	push	r8
    2648:	af 92       	push	r10
    264a:	bf 92       	push	r11
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	a3 97       	sbiw	r28, 0x23	; 35
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	3b 01       	movw	r6, r22
    266e:	88 2e       	mov	r8, r24
    2670:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    2672:	22 e0       	ldi	r18, 0x02	; 2
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5e e0       	ldi	r21, 0x0E	; 14
    2678:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    267c:	18 2f       	mov	r17, r24
    267e:	88 23       	and	r24, r24
    2680:	09 f4       	brne	.+2      	; 0x2684 <write_cols+0x46>
    2682:	5d c0       	rjmp	.+186    	; 0x273e <write_cols+0x100>
	index=atoi(arg);
    2684:	80 e8       	ldi	r24, 0x80	; 128
    2686:	9e e0       	ldi	r25, 0x0E	; 14
    2688:	6c 01       	movw	r12, r24
    268a:	20 e8       	ldi	r18, 0x80	; 128
    268c:	e2 2e       	mov	r14, r18
    268e:	8e 2d       	mov	r24, r14
    2690:	b6 01       	movw	r22, r12
    2692:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
	if(index<1 || index>7) return false;
    2696:	0f ef       	ldi	r16, 0xFF	; 255
    2698:	08 0f       	add	r16, r24
    269a:	07 30       	cpi	r16, 0x07	; 7
    269c:	08 f0       	brcs	.+2      	; 0x26a0 <write_cols+0x62>
    269e:	4a c0       	rjmp	.+148    	; 0x2734 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    26a0:	23 e0       	ldi	r18, 0x03	; 3
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5e e0       	ldi	r21, 0x0E	; 14
    26a6:	88 2d       	mov	r24, r8
    26a8:	b3 01       	movw	r22, r6
    26aa:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    26ae:	18 2f       	mov	r17, r24
    26b0:	88 23       	and	r24, r24
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <write_cols+0x78>
    26b4:	44 c0       	rjmp	.+136    	; 0x273e <write_cols+0x100>
	samplings=atoi(arg);
    26b6:	8e 2d       	mov	r24, r14
    26b8:	b6 01       	movw	r22, r12
    26ba:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
    26be:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    26c0:	02 97       	sbiw	r24, 0x02	; 2
    26c2:	8b 32       	cpi	r24, 0x2B	; 43
    26c4:	91 40       	sbci	r25, 0x01	; 1
    26c6:	c0 f5       	brcc	.+112    	; 0x2738 <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    26c8:	24 e0       	ldi	r18, 0x04	; 4
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5e e0       	ldi	r21, 0x0E	; 14
    26ce:	88 2d       	mov	r24, r8
    26d0:	b3 01       	movw	r22, r6
    26d2:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    26d6:	18 2f       	mov	r17, r24
    26d8:	88 23       	and	r24, r24
    26da:	89 f1       	breq	.+98     	; 0x273e <write_cols+0x100>
	samplingInterval=atoi(arg);
    26dc:	8e 2d       	mov	r24, r14
    26de:	b6 01       	movw	r22, r12
    26e0:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
    26e4:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    26e6:	02 97       	sbiw	r24, 0x02	; 2
    26e8:	87 35       	cpi	r24, 0x57	; 87
    26ea:	92 40       	sbci	r25, 0x02	; 2
    26ec:	38 f5       	brcc	.+78     	; 0x273c <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    26ee:	63 e2       	ldi	r22, 0x23	; 35
    26f0:	ce 01       	movw	r24, r28
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	7c 01       	movw	r14, r24
    26f6:	0e 94 40 33 	call	0x6680	; 0x6680 <EM_get_collections>
	
	cols[index].samplings=samplings;
    26fa:	80 2f       	mov	r24, r16
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	e8 0f       	add	r30, r24
    270a:	f9 1f       	adc	r31, r25
    270c:	ee 0d       	add	r30, r14
    270e:	ff 1d       	adc	r31, r15
    2710:	51 82       	std	Z+1, r5	; 0x01
    2712:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    2714:	d3 82       	std	Z+3, r13	; 0x03
    2716:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    2718:	b7 01       	movw	r22, r14
    271a:	80 e8       	ldi	r24, 0x80	; 128
    271c:	43 e2       	ldi	r20, 0x23	; 35
    271e:	0e 94 ab 33 	call	0x6756	; 0x6756 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    2722:	28 e0       	ldi	r18, 0x08	; 8
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e9       	ldi	r20, 0x90	; 144
    2728:	54 e0       	ldi	r21, 0x04	; 4
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	c5 01       	movw	r24, r10
    272e:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;	
    2732:	05 c0       	rjmp	.+10     	; 0x273e <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    2734:	10 e0       	ldi	r17, 0x00	; 0
    2736:	03 c0       	rjmp	.+6      	; 0x273e <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    2738:	10 e0       	ldi	r17, 0x00	; 0
    273a:	01 c0       	rjmp	.+2      	; 0x273e <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    273c:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    273e:	81 2f       	mov	r24, r17
    2740:	a3 96       	adiw	r28, 0x23	; 35
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	ff 90       	pop	r15
    2756:	ef 90       	pop	r14
    2758:	df 90       	pop	r13
    275a:	cf 90       	pop	r12
    275c:	bf 90       	pop	r11
    275e:	af 90       	pop	r10
    2760:	8f 90       	pop	r8
    2762:	7f 90       	pop	r7
    2764:	6f 90       	pop	r6
    2766:	5f 90       	pop	r5
    2768:	4f 90       	pop	r4
    276a:	08 95       	ret

Disassembly of section .text.write_heat_up:

0000515a <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    515a:	0f 93       	push	r16
    515c:	1f 93       	push	r17
    515e:	cf 93       	push	r28
    5160:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5162:	22 e0       	ldi	r18, 0x02	; 2
    5164:	40 e8       	ldi	r20, 0x80	; 128
    5166:	5e e0       	ldi	r21, 0x0E	; 14
    5168:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    516c:	c8 2f       	mov	r28, r24
    516e:	88 23       	and	r24, r24
    5170:	a9 f0       	breq	.+42     	; 0x519c <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    5172:	60 e8       	ldi	r22, 0x80	; 128
    5174:	7e e0       	ldi	r23, 0x0E	; 14
    5176:	80 e8       	ldi	r24, 0x80	; 128
    5178:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
	
	if(val<1 || val>200) return false;
    517c:	9f ef       	ldi	r25, 0xFF	; 255
    517e:	98 0f       	add	r25, r24
    5180:	98 3c       	cpi	r25, 0xC8	; 200
    5182:	58 f4       	brcc	.+22     	; 0x519a <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    5184:	0e 94 fd 33 	call	0x67fa	; 0x67fa <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    5188:	28 e0       	ldi	r18, 0x08	; 8
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	40 e9       	ldi	r20, 0x90	; 144
    518e:	54 e0       	ldi	r21, 0x04	; 4
    5190:	60 e0       	ldi	r22, 0x00	; 0
    5192:	c8 01       	movw	r24, r16
    5194:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
    5198:	01 c0       	rjmp	.+2      	; 0x519c <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    519a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    519c:	8c 2f       	mov	r24, r28
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
    51a2:	0f 91       	pop	r16
    51a4:	08 95       	ret

Disassembly of section .text.write_air_pump:

00004e56 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    4e56:	0f 93       	push	r16
    4e58:	1f 93       	push	r17
    4e5a:	cf 93       	push	r28
    4e5c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4e5e:	22 e0       	ldi	r18, 0x02	; 2
    4e60:	40 e8       	ldi	r20, 0x80	; 128
    4e62:	5e e0       	ldi	r21, 0x0E	; 14
    4e64:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    4e68:	c8 2f       	mov	r28, r24
    4e6a:	88 23       	and	r24, r24
    4e6c:	b9 f0       	breq	.+46     	; 0x4e9c <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    4e6e:	60 e8       	ldi	r22, 0x80	; 128
    4e70:	7e e0       	ldi	r23, 0x0E	; 14
    4e72:	80 e8       	ldi	r24, 0x80	; 128
    4e74:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
	
	if(val<5 || val>1000) return false;
    4e78:	9c 01       	movw	r18, r24
    4e7a:	25 50       	subi	r18, 0x05	; 5
    4e7c:	31 09       	sbc	r19, r1
    4e7e:	24 3e       	cpi	r18, 0xE4	; 228
    4e80:	33 40       	sbci	r19, 0x03	; 3
    4e82:	58 f4       	brcc	.+22     	; 0x4e9a <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    4e84:	0e 94 09 34 	call	0x6812	; 0x6812 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    4e88:	28 e0       	ldi	r18, 0x08	; 8
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	40 e9       	ldi	r20, 0x90	; 144
    4e8e:	54 e0       	ldi	r21, 0x04	; 4
    4e90:	60 e0       	ldi	r22, 0x00	; 0
    4e92:	c8 01       	movw	r24, r16
    4e94:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
    4e98:	01 c0       	rjmp	.+2      	; 0x4e9c <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    4e9a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4e9c:	8c 2f       	mov	r24, r28
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000051a6 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    51a6:	0f 93       	push	r16
    51a8:	1f 93       	push	r17
    51aa:	cf 93       	push	r28
    51ac:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    51ae:	22 e0       	ldi	r18, 0x02	; 2
    51b0:	40 e8       	ldi	r20, 0x80	; 128
    51b2:	5e e0       	ldi	r21, 0x0E	; 14
    51b4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    51b8:	c8 2f       	mov	r28, r24
    51ba:	88 23       	and	r24, r24
    51bc:	a9 f0       	breq	.+42     	; 0x51e8 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    51be:	60 e8       	ldi	r22, 0x80	; 128
    51c0:	7e e0       	ldi	r23, 0x0E	; 14
    51c2:	80 e8       	ldi	r24, 0x80	; 128
    51c4:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
	
	if(val<6 || val>24) return false;
    51c8:	9a ef       	ldi	r25, 0xFA	; 250
    51ca:	98 0f       	add	r25, r24
    51cc:	93 31       	cpi	r25, 0x13	; 19
    51ce:	58 f4       	brcc	.+22     	; 0x51e6 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    51d0:	0e 94 15 34 	call	0x682a	; 0x682a <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    51d4:	28 e0       	ldi	r18, 0x08	; 8
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	40 e9       	ldi	r20, 0x90	; 144
    51da:	54 e0       	ldi	r21, 0x04	; 4
    51dc:	60 e0       	ldi	r22, 0x00	; 0
    51de:	c8 01       	movw	r24, r16
    51e0:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
    51e4:	01 c0       	rjmp	.+2      	; 0x51e8 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    51e6:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    51e8:	8c 2f       	mov	r24, r28
    51ea:	cf 91       	pop	r28
    51ec:	1f 91       	pop	r17
    51ee:	0f 91       	pop	r16
    51f0:	08 95       	ret

Disassembly of section .text.write_reset:

000030da <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	a3 97       	sbiw	r28, 0x23	; 35
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    30f4:	68 e9       	ldi	r22, 0x98	; 152
    30f6:	74 e0       	ldi	r23, 0x04	; 4
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0e 94 a0 2c 	call	0x5940	; 0x5940 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    30fe:	68 e9       	ldi	r22, 0x98	; 152
    3100:	74 e0       	ldi	r23, 0x04	; 4
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	0e 94 bd 2c 	call	0x597a	; 0x597a <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    3108:	69 ea       	ldi	r22, 0xA9	; 169
    310a:	74 e0       	ldi	r23, 0x04	; 4
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	80 e8       	ldi	r24, 0x80	; 128
    3118:	9f e3       	ldi	r25, 0x3F	; 63
    311a:	0e 94 96 33 	call	0x672c	; 0x672c <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	70 e4       	ldi	r23, 0x40	; 64
    3122:	8c e1       	ldi	r24, 0x1C	; 28
    3124:	95 e4       	ldi	r25, 0x45	; 69
    3126:	0e 94 9d 33 	call	0x673a	; 0x673a <EM_set_RRL>
	EM_set_Vcc(5.00);
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	80 ea       	ldi	r24, 0xA0	; 160
    3130:	90 e4       	ldi	r25, 0x40	; 64
    3132:	0e 94 a4 33 	call	0x6748	; 0x6748 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	0e 94 fd 33 	call	0x67fa	; 0x67fa <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    313c:	85 e0       	ldi	r24, 0x05	; 5
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 09 34 	call	0x6812	; 0x6812 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    3144:	86 e0       	ldi	r24, 0x06	; 6
    3146:	0e 94 15 34 	call	0x682a	; 0x682a <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	1a c0       	rjmp	.+52     	; 0x3182 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    314e:	e8 2f       	mov	r30, r24
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	9f 01       	movw	r18, r30
    3154:	22 0f       	add	r18, r18
    3156:	33 1f       	adc	r19, r19
    3158:	22 0f       	add	r18, r18
    315a:	33 1f       	adc	r19, r19
    315c:	e2 0f       	add	r30, r18
    315e:	f3 1f       	adc	r31, r19
    3160:	21 e0       	ldi	r18, 0x01	; 1
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	2c 0f       	add	r18, r28
    3166:	3d 1f       	adc	r19, r29
    3168:	e2 0f       	add	r30, r18
    316a:	f3 1f       	adc	r31, r19
    316c:	92 e0       	ldi	r25, 0x02	; 2
    316e:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    3170:	22 e0       	ldi	r18, 0x02	; 2
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	31 83       	std	Z+1, r19	; 0x01
    3176:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    3178:	23 e0       	ldi	r18, 0x03	; 3
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	33 83       	std	Z+3, r19	; 0x03
    317e:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    3180:	8f 5f       	subi	r24, 0xFF	; 255
    3182:	87 30       	cpi	r24, 0x07	; 7
    3184:	20 f3       	brcs	.-56     	; 0x314e <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    3186:	be 01       	movw	r22, r28
    3188:	6f 5f       	subi	r22, 0xFF	; 255
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	80 e8       	ldi	r24, 0x80	; 128
    318e:	43 e2       	ldi	r20, 0x23	; 35
    3190:	0e 94 ab 33 	call	0x6756	; 0x6756 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    3194:	23 e1       	ldi	r18, 0x13	; 19
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ec       	ldi	r20, 0xCA	; 202
    319a:	54 e0       	ldi	r21, 0x04	; 4
    319c:	60 e0       	ldi	r22, 0x00	; 0
    319e:	c8 01       	movw	r24, r16
    31a0:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
}
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	a3 96       	adiw	r28, 0x23	; 35
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

Disassembly of section .text.write_time:

00002ee4 <write_time>:

static bool write_time(const char cmd[], char res[]){
    2ee4:	6f 92       	push	r6
    2ee6:	7f 92       	push	r7
    2ee8:	8f 92       	push	r8
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <write_time+0x16>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <write_time+0x18>
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <write_time+0x1a>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	3b 01       	movw	r6, r22
    2f04:	88 2e       	mov	r8, r24
    2f06:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2f08:	0e 94 02 33 	call	0x6604	; 0x6604 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2f0c:	22 e0       	ldi	r18, 0x02	; 2
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5e e0       	ldi	r21, 0x0E	; 14
    2f12:	88 2d       	mov	r24, r8
    2f14:	b3 01       	movw	r22, r6
    2f16:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    2f1a:	18 2f       	mov	r17, r24
    2f1c:	88 23       	and	r24, r24
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <write_time+0x3e>
    2f20:	4e c0       	rjmp	.+156    	; 0x2fbe <write_time+0xda>
	if(strlen(arg)!=17){
    2f22:	60 e8       	ldi	r22, 0x80	; 128
    2f24:	7e e0       	ldi	r23, 0x0E	; 14
    2f26:	80 e8       	ldi	r24, 0x80	; 128
    2f28:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    2f2c:	41 97       	sbiw	r24, 0x11	; 17
    2f2e:	49 f0       	breq	.+18     	; 0x2f42 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    2f30:	25 e2       	ldi	r18, 0x25	; 37
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4d ed       	ldi	r20, 0xDD	; 221
    2f36:	54 e0       	ldi	r21, 0x04	; 4
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    2f40:	3e c0       	rjmp	.+124    	; 0x2fbe <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	80 e8       	ldi	r24, 0x80	; 128
    2f46:	9e e0       	ldi	r25, 0x0E	; 14
    2f48:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <get_time_par>
    2f4c:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    2f4e:	63 e0       	ldi	r22, 0x03	; 3
    2f50:	80 e8       	ldi	r24, 0x80	; 128
    2f52:	9e e0       	ldi	r25, 0x0E	; 14
    2f54:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <get_time_par>
    2f58:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    2f5a:	66 e0       	ldi	r22, 0x06	; 6
    2f5c:	80 e8       	ldi	r24, 0x80	; 128
    2f5e:	9e e0       	ldi	r25, 0x0E	; 14
    2f60:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <get_time_par>
    2f64:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    2f66:	69 e0       	ldi	r22, 0x09	; 9
    2f68:	80 e8       	ldi	r24, 0x80	; 128
    2f6a:	9e e0       	ldi	r25, 0x0E	; 14
    2f6c:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <get_time_par>
    2f70:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    2f72:	6c e0       	ldi	r22, 0x0C	; 12
    2f74:	80 e8       	ldi	r24, 0x80	; 128
    2f76:	9e e0       	ldi	r25, 0x0E	; 14
    2f78:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <get_time_par>
    2f7c:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2f7e:	6f e0       	ldi	r22, 0x0F	; 15
    2f80:	80 e8       	ldi	r24, 0x80	; 128
    2f82:	9e e0       	ldi	r25, 0x0E	; 14
    2f84:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2f88:	48 2f       	mov	r20, r24
    2f8a:	5d 2d       	mov	r21, r13
    2f8c:	60 2f       	mov	r22, r16
    2f8e:	76 2d       	mov	r23, r6
    2f90:	87 2d       	mov	r24, r7
    2f92:	98 2d       	mov	r25, r8
    2f94:	0e 94 8b 24 	call	0x4916	; 0x4916 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2f98:	88 23       	and	r24, r24
    2f9a:	49 f0       	breq	.+18     	; 0x2fae <write_time+0xca>
		strcpy(res, "Failed to set time");
    2f9c:	23 e1       	ldi	r18, 0x13	; 19
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	42 e0       	ldi	r20, 0x02	; 2
    2fa2:	55 e0       	ldi	r21, 0x05	; 5
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	c7 01       	movw	r24, r14
    2fa8:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    2fac:	08 c0       	rjmp	.+16     	; 0x2fbe <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2fae:	28 e0       	ldi	r18, 0x08	; 8
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e9       	ldi	r20, 0x90	; 144
    2fb4:	54 e0       	ldi	r21, 0x04	; 4
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	c7 01       	movw	r24, r14
    2fba:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
	return true;
}
    2fbe:	81 2f       	mov	r24, r17
    2fc0:	26 96       	adiw	r28, 0x06	; 6
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	ff 90       	pop	r15
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	8f 90       	pop	r8
    2fdc:	7f 90       	pop	r7
    2fde:	6f 90       	pop	r6
    2fe0:	08 95       	ret

Disassembly of section .text.handle_read:

000018ea <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	68 97       	sbiw	r28, 0x18	; 24
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	6b 01       	movw	r12, r22
    190c:	e8 2e       	mov	r14, r24
    190e:	f4 2e       	mov	r15, r20
    1910:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1912:	21 e0       	ldi	r18, 0x01	; 1
    1914:	ae 01       	movw	r20, r28
    1916:	4f 5f       	subi	r20, 0xFF	; 255
    1918:	5f 4f       	sbci	r21, 0xFF	; 255
    191a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    191e:	18 2f       	mov	r17, r24
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <handle_read+0x3c>
    1924:	23 c1       	rjmp	.+582    	; 0x1b6c <handle_read+0x282>
    1926:	8e 2d       	mov	r24, r14
    1928:	b6 01       	movw	r22, r12
    192a:	0e 94 da 26 	call	0x4db4	; 0x4db4 <count_parameters>
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	09 f4       	brne	.+2      	; 0x1934 <handle_read+0x4a>
    1932:	1b c1       	rjmp	.+566    	; 0x1b6a <handle_read+0x280>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	6c 01       	movw	r12, r24
    193a:	20 e8       	ldi	r18, 0x80	; 128
    193c:	e2 2e       	mov	r14, r18
    193e:	25 e1       	ldi	r18, 0x15	; 21
    1940:	35 e0       	ldi	r19, 0x05	; 5
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	8e 2d       	mov	r24, r14
    1946:	b6 01       	movw	r22, r12
    1948:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    194c:	89 2b       	or	r24, r25
    194e:	29 f4       	brne	.+10     	; 0x195a <handle_read+0x70>
	{
		EM_get_deveui(res);
    1950:	8f 2d       	mov	r24, r15
    1952:	90 2f       	mov	r25, r16
    1954:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <EM_get_deveui>
    1958:	09 c1       	rjmp	.+530    	; 0x1b6c <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    195a:	2c e1       	ldi	r18, 0x1C	; 28
    195c:	35 e0       	ldi	r19, 0x05	; 5
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	8e 2d       	mov	r24, r14
    1962:	b6 01       	movw	r22, r12
    1964:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1968:	89 2b       	or	r24, r25
    196a:	29 f4       	brne	.+10     	; 0x1976 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    196c:	8f 2d       	mov	r24, r15
    196e:	90 2f       	mov	r25, r16
    1970:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <EM_get_appeui>
    1974:	fb c0       	rjmp	.+502    	; 0x1b6c <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    1976:	23 e2       	ldi	r18, 0x23	; 35
    1978:	35 e0       	ldi	r19, 0x05	; 5
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	8e 2d       	mov	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1984:	89 2b       	or	r24, r25
    1986:	29 f4       	brne	.+10     	; 0x1992 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    1988:	8f 2d       	mov	r24, r15
    198a:	90 2f       	mov	r25, r16
    198c:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <EM_get_appkey>
    1990:	ed c0       	rjmp	.+474    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1992:	2a e2       	ldi	r18, 0x2A	; 42
    1994:	35 e0       	ldi	r19, 0x05	; 5
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	8e 2d       	mov	r24, r14
    199a:	b6 01       	movw	r22, r12
    199c:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    19a0:	89 2b       	or	r24, r25
    19a2:	e1 f4       	brne	.+56     	; 0x19dc <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    19a4:	ce 01       	movw	r24, r28
    19a6:	45 96       	adiw	r24, 0x15	; 21
    19a8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    19ac:	88 8d       	ldd	r24, Y+24	; 0x18
    19ae:	8f 93       	push	r24
    19b0:	8f 89       	ldd	r24, Y+23	; 0x17
    19b2:	8f 93       	push	r24
    19b4:	8e 89       	ldd	r24, Y+22	; 0x16
    19b6:	8f 93       	push	r24
    19b8:	8d 89       	ldd	r24, Y+21	; 0x15
    19ba:	8f 93       	push	r24
    19bc:	8f e2       	ldi	r24, 0x2F	; 47
    19be:	95 e0       	ldi	r25, 0x05	; 5
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	af 93       	push	r26
    19c4:	9f 93       	push	r25
    19c6:	8f 93       	push	r24
    19c8:	0f 93       	push	r16
    19ca:	ff 92       	push	r15
    19cc:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	c8 c0       	rjmp	.+400    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_RRL)==0)
    19dc:	24 e3       	ldi	r18, 0x34	; 52
    19de:	35 e0       	ldi	r19, 0x05	; 5
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	8e 2d       	mov	r24, r14
    19e4:	b6 01       	movw	r22, r12
    19e6:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    19ea:	89 2b       	or	r24, r25
    19ec:	e1 f4       	brne	.+56     	; 0x1a26 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    19ee:	ce 01       	movw	r24, r28
    19f0:	45 96       	adiw	r24, 0x15	; 21
    19f2:	0e 94 67 31 	call	0x62ce	; 0x62ce <EM_get_RRL>
		sprintf(res, "%.2f", val);
    19f6:	88 8d       	ldd	r24, Y+24	; 0x18
    19f8:	8f 93       	push	r24
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	8f 93       	push	r24
    19fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1a00:	8f 93       	push	r24
    1a02:	8d 89       	ldd	r24, Y+21	; 0x15
    1a04:	8f 93       	push	r24
    1a06:	8f e2       	ldi	r24, 0x2F	; 47
    1a08:	95 e0       	ldi	r25, 0x05	; 5
    1a0a:	a0 e0       	ldi	r26, 0x00	; 0
    1a0c:	af 93       	push	r26
    1a0e:	9f 93       	push	r25
    1a10:	8f 93       	push	r24
    1a12:	0f 93       	push	r16
    1a14:	ff 92       	push	r15
    1a16:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	a3 c0       	rjmp	.+326    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_VCC)==0)
    1a26:	29 e3       	ldi	r18, 0x39	; 57
    1a28:	35 e0       	ldi	r19, 0x05	; 5
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	8e 2d       	mov	r24, r14
    1a2e:	b6 01       	movw	r22, r12
    1a30:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1a34:	89 2b       	or	r24, r25
    1a36:	e1 f4       	brne	.+56     	; 0x1a70 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1a38:	ce 01       	movw	r24, r28
    1a3a:	45 96       	adiw	r24, 0x15	; 21
    1a3c:	0e 94 76 31 	call	0x62ec	; 0x62ec <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1a40:	88 8d       	ldd	r24, Y+24	; 0x18
    1a42:	8f 93       	push	r24
    1a44:	8f 89       	ldd	r24, Y+23	; 0x17
    1a46:	8f 93       	push	r24
    1a48:	8e 89       	ldd	r24, Y+22	; 0x16
    1a4a:	8f 93       	push	r24
    1a4c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a4e:	8f 93       	push	r24
    1a50:	8f e2       	ldi	r24, 0x2F	; 47
    1a52:	95 e0       	ldi	r25, 0x05	; 5
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	af 93       	push	r26
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	0f 93       	push	r16
    1a5e:	ff 92       	push	r15
    1a60:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	7e c0       	rjmp	.+252    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_COLS)==0)
    1a70:	2e e3       	ldi	r18, 0x3E	; 62
    1a72:	35 e0       	ldi	r19, 0x05	; 5
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	8e 2d       	mov	r24, r14
    1a78:	b6 01       	movw	r22, r12
    1a7a:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1a7e:	89 2b       	or	r24, r25
    1a80:	29 f4       	brne	.+10     	; 0x1a8c <handle_read+0x1a2>
	{
		read_cols(res);
    1a82:	8f 2d       	mov	r24, r15
    1a84:	90 2f       	mov	r25, r16
    1a86:	0e 94 56 1b 	call	0x36ac	; 0x36ac <read_cols>
    1a8a:	70 c0       	rjmp	.+224    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1a8c:	23 e4       	ldi	r18, 0x43	; 67
    1a8e:	35 e0       	ldi	r19, 0x05	; 5
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	8e 2d       	mov	r24, r14
    1a94:	b6 01       	movw	r22, r12
    1a96:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1a9a:	89 2b       	or	r24, r25
    1a9c:	a1 f4       	brne	.+40     	; 0x1ac6 <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    1a9e:	0e 94 03 34 	call	0x6806	; 0x6806 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1aa2:	1f 92       	push	r1
    1aa4:	8f 93       	push	r24
    1aa6:	8d e4       	ldi	r24, 0x4D	; 77
    1aa8:	95 e0       	ldi	r25, 0x05	; 5
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	af 93       	push	r26
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	0f 93       	push	r16
    1ab4:	ff 92       	push	r15
    1ab6:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	53 c0       	rjmp	.+166    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1ac6:	2f e5       	ldi	r18, 0x5F	; 95
    1ac8:	35 e0       	ldi	r19, 0x05	; 5
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	8e 2d       	mov	r24, r14
    1ace:	b6 01       	movw	r22, r12
    1ad0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1ad4:	89 2b       	or	r24, r25
    1ad6:	a1 f4       	brne	.+40     	; 0x1b00 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1ad8:	0e 94 0f 34 	call	0x681e	; 0x681e <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1adc:	9f 93       	push	r25
    1ade:	8f 93       	push	r24
    1ae0:	8a e6       	ldi	r24, 0x6A	; 106
    1ae2:	95 e0       	ldi	r25, 0x05	; 5
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	af 93       	push	r26
    1ae8:	9f 93       	push	r25
    1aea:	8f 93       	push	r24
    1aec:	0f 93       	push	r16
    1aee:	ff 92       	push	r15
    1af0:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	36 c0       	rjmp	.+108    	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1b00:	2d e7       	ldi	r18, 0x7D	; 125
    1b02:	35 e0       	ldi	r19, 0x05	; 5
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	8e 2d       	mov	r24, r14
    1b08:	b6 01       	movw	r22, r12
    1b0a:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1b0e:	89 2b       	or	r24, r25
    1b10:	a1 f4       	brne	.+40     	; 0x1b3a <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1b12:	0e 94 1b 34 	call	0x6836	; 0x6836 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1b16:	1f 92       	push	r1
    1b18:	8f 93       	push	r24
    1b1a:	89 e8       	ldi	r24, 0x89	; 137
    1b1c:	95 e0       	ldi	r25, 0x05	; 5
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	af 93       	push	r26
    1b22:	9f 93       	push	r25
    1b24:	8f 93       	push	r24
    1b26:	0f 93       	push	r16
    1b28:	ff 92       	push	r15
    1b2a:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	19 c0       	rjmp	.+50     	; 0x1b6c <handle_read+0x282>
	}
	else if(strcmp(par, RW_TIME)==0)
    1b3a:	28 ea       	ldi	r18, 0xA8	; 168
    1b3c:	35 e0       	ldi	r19, 0x05	; 5
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	8e 2d       	mov	r24, r14
    1b42:	b6 01       	movw	r22, r12
    1b44:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1b48:	89 2b       	or	r24, r25
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <handle_read+0x26c>
	{
		read_time(res);
    1b4c:	8f 2d       	mov	r24, r15
    1b4e:	90 2f       	mov	r25, r16
    1b50:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <read_time>
    1b54:	0b c0       	rjmp	.+22     	; 0x1b6c <handle_read+0x282>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1b56:	26 e1       	ldi	r18, 0x16	; 22
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4d ea       	ldi	r20, 0xAD	; 173
    1b5c:	55 e0       	ldi	r21, 0x05	; 5
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	8f 2d       	mov	r24, r15
    1b62:	90 2f       	mov	r25, r16
    1b64:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <handle_read+0x282>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1b6c:	81 2f       	mov	r24, r17
    1b6e:	68 96       	adiw	r28, 0x18	; 24
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	08 95       	ret

Disassembly of section .text.handle_write:

00001b8c <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	af 92       	push	r10
    1b94:	bf 92       	push	r11
    1b96:	cf 92       	push	r12
    1b98:	df 92       	push	r13
    1b9a:	ef 92       	push	r14
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	64 97       	sbiw	r28, 0x14	; 20
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	3b 01       	movw	r6, r22
    1bb4:	88 2e       	mov	r8, r24
    1bb6:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	ae 01       	movw	r20, r28
    1bbc:	4f 5f       	subi	r20, 0xFF	; 255
    1bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    1bc4:	18 2f       	mov	r17, r24
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <handle_write+0x40>
    1bca:	cd c0       	rjmp	.+410    	; 0x1d66 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	6c 01       	movw	r12, r24
    1bd2:	20 e8       	ldi	r18, 0x80	; 128
    1bd4:	e2 2e       	mov	r14, r18
    1bd6:	25 e1       	ldi	r18, 0x15	; 21
    1bd8:	35 e0       	ldi	r19, 0x05	; 5
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	8e 2d       	mov	r24, r14
    1bde:	b6 01       	movw	r22, r12
    1be0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1be4:	89 2b       	or	r24, r25
    1be6:	39 f4       	brne	.+14     	; 0x1bf6 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1be8:	a5 01       	movw	r20, r10
    1bea:	88 2d       	mov	r24, r8
    1bec:	b3 01       	movw	r22, r6
    1bee:	0e 94 aa 21 	call	0x4354	; 0x4354 <write_deveui>
    1bf2:	18 2f       	mov	r17, r24
    1bf4:	b8 c0       	rjmp	.+368    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1bf6:	2c e1       	ldi	r18, 0x1C	; 28
    1bf8:	35 e0       	ldi	r19, 0x05	; 5
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	8e 2d       	mov	r24, r14
    1bfe:	b6 01       	movw	r22, r12
    1c00:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1c04:	89 2b       	or	r24, r25
    1c06:	39 f4       	brne	.+14     	; 0x1c16 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1c08:	a5 01       	movw	r20, r10
    1c0a:	88 2d       	mov	r24, r8
    1c0c:	b3 01       	movw	r22, r6
    1c0e:	0e 94 e6 21 	call	0x43cc	; 0x43cc <write_appeui>
    1c12:	18 2f       	mov	r17, r24
    1c14:	a8 c0       	rjmp	.+336    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1c16:	23 e2       	ldi	r18, 0x23	; 35
    1c18:	35 e0       	ldi	r19, 0x05	; 5
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	8e 2d       	mov	r24, r14
    1c1e:	b6 01       	movw	r22, r12
    1c20:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1c24:	89 2b       	or	r24, r25
    1c26:	39 f4       	brne	.+14     	; 0x1c36 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1c28:	a5 01       	movw	r20, r10
    1c2a:	88 2d       	mov	r24, r8
    1c2c:	b3 01       	movw	r22, r6
    1c2e:	0e 94 22 22 	call	0x4444	; 0x4444 <write_appkey>
    1c32:	18 2f       	mov	r17, r24
    1c34:	98 c0       	rjmp	.+304    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1c36:	2a e2       	ldi	r18, 0x2A	; 42
    1c38:	35 e0       	ldi	r19, 0x05	; 5
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	8e 2d       	mov	r24, r14
    1c3e:	b6 01       	movw	r22, r12
    1c40:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1c44:	89 2b       	or	r24, r25
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1c48:	a5 01       	movw	r20, r10
    1c4a:	88 2d       	mov	r24, r8
    1c4c:	b3 01       	movw	r22, r6
    1c4e:	0e 94 3b 28 	call	0x5076	; 0x5076 <write_PPM_factor>
    1c52:	18 2f       	mov	r17, r24
    1c54:	88 c0       	rjmp	.+272    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1c56:	24 e3       	ldi	r18, 0x34	; 52
    1c58:	35 e0       	ldi	r19, 0x05	; 5
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	8e 2d       	mov	r24, r14
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1c64:	89 2b       	or	r24, r25
    1c66:	39 f4       	brne	.+14     	; 0x1c76 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1c68:	a5 01       	movw	r20, r10
    1c6a:	88 2d       	mov	r24, r8
    1c6c:	b3 01       	movw	r22, r6
    1c6e:	0e 94 61 28 	call	0x50c2	; 0x50c2 <write_RRL>
    1c72:	18 2f       	mov	r17, r24
    1c74:	78 c0       	rjmp	.+240    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1c76:	29 e3       	ldi	r18, 0x39	; 57
    1c78:	35 e0       	ldi	r19, 0x05	; 5
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	8e 2d       	mov	r24, r14
    1c7e:	b6 01       	movw	r22, r12
    1c80:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1c84:	89 2b       	or	r24, r25
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1c88:	a5 01       	movw	r20, r10
    1c8a:	88 2d       	mov	r24, r8
    1c8c:	b3 01       	movw	r22, r6
    1c8e:	0e 94 87 28 	call	0x510e	; 0x510e <write_VCC>
    1c92:	18 2f       	mov	r17, r24
    1c94:	68 c0       	rjmp	.+208    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1c96:	2e e3       	ldi	r18, 0x3E	; 62
    1c98:	35 e0       	ldi	r19, 0x05	; 5
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	8e 2d       	mov	r24, r14
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	39 f4       	brne	.+14     	; 0x1cb6 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1ca8:	a5 01       	movw	r20, r10
    1caa:	88 2d       	mov	r24, r8
    1cac:	b3 01       	movw	r22, r6
    1cae:	0e 94 1f 13 	call	0x263e	; 0x263e <write_cols>
    1cb2:	18 2f       	mov	r17, r24
    1cb4:	58 c0       	rjmp	.+176    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1cb6:	23 e4       	ldi	r18, 0x43	; 67
    1cb8:	35 e0       	ldi	r19, 0x05	; 5
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	8e 2d       	mov	r24, r14
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1cc4:	89 2b       	or	r24, r25
    1cc6:	39 f4       	brne	.+14     	; 0x1cd6 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1cc8:	a5 01       	movw	r20, r10
    1cca:	88 2d       	mov	r24, r8
    1ccc:	b3 01       	movw	r22, r6
    1cce:	0e 94 ad 28 	call	0x515a	; 0x515a <write_heat_up>
    1cd2:	18 2f       	mov	r17, r24
    1cd4:	48 c0       	rjmp	.+144    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1cd6:	2f e5       	ldi	r18, 0x5F	; 95
    1cd8:	35 e0       	ldi	r19, 0x05	; 5
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	8e 2d       	mov	r24, r14
    1cde:	b6 01       	movw	r22, r12
    1ce0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1ce4:	89 2b       	or	r24, r25
    1ce6:	39 f4       	brne	.+14     	; 0x1cf6 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1ce8:	a5 01       	movw	r20, r10
    1cea:	88 2d       	mov	r24, r8
    1cec:	b3 01       	movw	r22, r6
    1cee:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <write_air_pump>
    1cf2:	18 2f       	mov	r17, r24
    1cf4:	38 c0       	rjmp	.+112    	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1cf6:	2d e7       	ldi	r18, 0x7D	; 125
    1cf8:	35 e0       	ldi	r19, 0x05	; 5
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	8e 2d       	mov	r24, r14
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1d04:	89 2b       	or	r24, r25
    1d06:	39 f4       	brne	.+14     	; 0x1d16 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1d08:	a5 01       	movw	r20, r10
    1d0a:	88 2d       	mov	r24, r8
    1d0c:	b3 01       	movw	r22, r6
    1d0e:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <write_sp_interval>
    1d12:	18 2f       	mov	r17, r24
    1d14:	28 c0       	rjmp	.+80     	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1d16:	23 ec       	ldi	r18, 0xC3	; 195
    1d18:	35 e0       	ldi	r19, 0x05	; 5
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	8e 2d       	mov	r24, r14
    1d1e:	b6 01       	movw	r22, r12
    1d20:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1d24:	89 2b       	or	r24, r25
    1d26:	39 f4       	brne	.+14     	; 0x1d36 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1d28:	a5 01       	movw	r20, r10
    1d2a:	88 2d       	mov	r24, r8
    1d2c:	b3 01       	movw	r22, r6
    1d2e:	0e 94 6d 18 	call	0x30da	; 0x30da <write_reset>
    1d32:	18 2f       	mov	r17, r24
    1d34:	18 c0       	rjmp	.+48     	; 0x1d66 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1d36:	28 ea       	ldi	r18, 0xA8	; 168
    1d38:	35 e0       	ldi	r19, 0x05	; 5
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	8e 2d       	mov	r24, r14
    1d3e:	b6 01       	movw	r22, r12
    1d40:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    1d44:	89 2b       	or	r24, r25
    1d46:	39 f4       	brne	.+14     	; 0x1d56 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1d48:	a5 01       	movw	r20, r10
    1d4a:	88 2d       	mov	r24, r8
    1d4c:	b3 01       	movw	r22, r6
    1d4e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <write_time>
    1d52:	18 2f       	mov	r17, r24
    1d54:	08 c0       	rjmp	.+16     	; 0x1d66 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1d56:	26 e1       	ldi	r18, 0x16	; 22
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4d ea       	ldi	r20, 0xAD	; 173
    1d5c:	55 e0       	ldi	r21, 0x05	; 5
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	c5 01       	movw	r24, r10
    1d62:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
	}
	
}
    1d66:	81 2f       	mov	r24, r17
    1d68:	64 96       	adiw	r28, 0x14	; 20
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	bf 90       	pop	r11
    1d82:	af 90       	pop	r10
    1d84:	8f 90       	pop	r8
    1d86:	7f 90       	pop	r7
    1d88:	6f 90       	pop	r6
    1d8a:	08 95       	ret

Disassembly of section .text.handle_methane:

000029a8 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    29a8:	cf 92       	push	r12
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <handle_methane+0x12>
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	f4 2e       	mov	r15, r20
    29c0:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    29c2:	22 e0       	ldi	r18, 0x02	; 2
    29c4:	44 e1       	ldi	r20, 0x14	; 20
    29c6:	5f e0       	ldi	r21, 0x0F	; 15
    29c8:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    29cc:	18 2f       	mov	r17, r24
    29ce:	88 23       	and	r24, r24
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <handle_methane+0x2c>
    29d2:	6b c0       	rjmp	.+214    	; 0x2aaa <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    29d4:	84 e1       	ldi	r24, 0x14	; 20
    29d6:	9f e0       	ldi	r25, 0x0F	; 15
    29d8:	6c 01       	movw	r12, r24
    29da:	20 e8       	ldi	r18, 0x80	; 128
    29dc:	e2 2e       	mov	r14, r18
    29de:	25 e7       	ldi	r18, 0x75	; 117
    29e0:	36 e0       	ldi	r19, 0x06	; 6
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	8e 2d       	mov	r24, r14
    29e6:	b6 01       	movw	r22, r12
    29e8:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    29ec:	89 2b       	or	r24, r25
    29ee:	79 f4       	brne	.+30     	; 0x2a0e <handle_methane+0x66>
		PM_HAL_meth_power_init();
    29f0:	0e 94 57 33 	call	0x66ae	; 0x66ae <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	0e 94 9e 32 	call	0x653c	; 0x653c <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    29fa:	28 e1       	ldi	r18, 0x18	; 24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	48 e7       	ldi	r20, 0x78	; 120
    2a00:	56 e0       	ldi	r21, 0x06	; 6
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	8f 2d       	mov	r24, r15
    2a06:	90 2f       	mov	r25, r16
    2a08:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    2a0c:	4e c0       	rjmp	.+156    	; 0x2aaa <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    2a0e:	20 e9       	ldi	r18, 0x90	; 144
    2a10:	36 e0       	ldi	r19, 0x06	; 6
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	8e 2d       	mov	r24, r14
    2a16:	b6 01       	movw	r22, r12
    2a18:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    2a1c:	89 2b       	or	r24, r25
    2a1e:	79 f4       	brne	.+30     	; 0x2a3e <handle_methane+0x96>
		PM_HAL_meth_power_init();
    2a20:	0e 94 57 33 	call	0x66ae	; 0x66ae <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 9e 32 	call	0x653c	; 0x653c <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    2a2a:	29 e1       	ldi	r18, 0x19	; 25
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	44 e9       	ldi	r20, 0x94	; 148
    2a30:	56 e0       	ldi	r21, 0x06	; 6
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	8f 2d       	mov	r24, r15
    2a36:	90 2f       	mov	r25, r16
    2a38:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    2a3c:	36 c0       	rjmp	.+108    	; 0x2aaa <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    2a3e:	2d ea       	ldi	r18, 0xAD	; 173
    2a40:	36 e0       	ldi	r19, 0x06	; 6
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	8e 2d       	mov	r24, r14
    2a46:	b6 01       	movw	r22, r12
    2a48:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    2a4c:	89 2b       	or	r24, r25
    2a4e:	21 f5       	brne	.+72     	; 0x2a98 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	0e 94 30 26 	call	0x4c60	; 0x4c60 <ADC_get_value>
    2a58:	88 23       	and	r24, r24
    2a5a:	51 f0       	breq	.+20     	; 0x2a70 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    2a5c:	28 e1       	ldi	r18, 0x18	; 24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	42 eb       	ldi	r20, 0xB2	; 178
    2a62:	56 e0       	ldi	r21, 0x06	; 6
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	8f 2d       	mov	r24, r15
    2a68:	90 2f       	mov	r25, r16
    2a6a:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
    2a6e:	1d c0       	rjmp	.+58     	; 0x2aaa <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	8f 93       	push	r24
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	8f 93       	push	r24
    2a78:	8a ec       	ldi	r24, 0xCA	; 202
    2a7a:	96 e0       	ldi	r25, 0x06	; 6
    2a7c:	a0 e0       	ldi	r26, 0x00	; 0
    2a7e:	af 93       	push	r26
    2a80:	9f 93       	push	r25
    2a82:	8f 93       	push	r24
    2a84:	0f 93       	push	r16
    2a86:	ff 92       	push	r15
    2a88:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	09 c0       	rjmp	.+18     	; 0x2aaa <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2a98:	26 e1       	ldi	r18, 0x16	; 22
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	41 ed       	ldi	r20, 0xD1	; 209
    2a9e:	56 e0       	ldi	r21, 0x06	; 6
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	8f 2d       	mov	r24, r15
    2aa4:	90 2f       	mov	r25, r16
    2aa6:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
	}
	return false;
}
    2aaa:	81 2f       	mov	r24, r17
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	08 95       	ret

Disassembly of section .text.handle_co2:

00003ae0 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    3ae0:	ff 92       	push	r15
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <handle_co2+0xc>
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	f4 2e       	mov	r15, r20
    3af2:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    3af4:	22 e0       	ldi	r18, 0x02	; 2
    3af6:	44 e1       	ldi	r20, 0x14	; 20
    3af8:	5f e0       	ldi	r21, 0x0F	; 15
    3afa:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    3afe:	18 2f       	mov	r17, r24
    3b00:	88 23       	and	r24, r24
    3b02:	b9 f1       	breq	.+110    	; 0x3b72 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    3b04:	64 e1       	ldi	r22, 0x14	; 20
    3b06:	7f e0       	ldi	r23, 0x0F	; 15
    3b08:	80 e8       	ldi	r24, 0x80	; 128
    3b0a:	2d ea       	ldi	r18, 0xAD	; 173
    3b0c:	36 e0       	ldi	r19, 0x06	; 6
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    3b14:	89 2b       	or	r24, r25
    3b16:	21 f5       	brne	.+72     	; 0x3b60 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    3b18:	ce 01       	movw	r24, r28
    3b1a:	01 96       	adiw	r24, 0x01	; 1
    3b1c:	0e 94 20 32 	call	0x6440	; 0x6440 <SCD30_get_reading>
    3b20:	88 23       	and	r24, r24
    3b22:	51 f0       	breq	.+20     	; 0x3b38 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    3b24:	28 e1       	ldi	r18, 0x18	; 24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	42 eb       	ldi	r20, 0xB2	; 178
    3b2a:	56 e0       	ldi	r21, 0x06	; 6
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	8f 2d       	mov	r24, r15
    3b30:	90 2f       	mov	r25, r16
    3b32:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
    3b36:	1d c0       	rjmp	.+58     	; 0x3b72 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	8f 93       	push	r24
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	8f 93       	push	r24
    3b40:	8a ec       	ldi	r24, 0xCA	; 202
    3b42:	96 e0       	ldi	r25, 0x06	; 6
    3b44:	a0 e0       	ldi	r26, 0x00	; 0
    3b46:	af 93       	push	r26
    3b48:	9f 93       	push	r25
    3b4a:	8f 93       	push	r24
    3b4c:	0f 93       	push	r16
    3b4e:	ff 92       	push	r15
    3b50:	0e 94 84 2a 	call	0x5508	; 0x5508 <sprintf>
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	09 c0       	rjmp	.+18     	; 0x3b72 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3b60:	26 e1       	ldi	r18, 0x16	; 22
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	41 ed       	ldi	r20, 0xD1	; 209
    3b66:	56 e0       	ldi	r21, 0x06	; 6
    3b68:	60 e0       	ldi	r22, 0x00	; 0
    3b6a:	8f 2d       	mov	r24, r15
    3b6c:	90 2f       	mov	r25, r16
    3b6e:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
	}
}
    3b72:	81 2f       	mov	r24, r17
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	ff 90       	pop	r15
    3b82:	08 95       	ret

Disassembly of section .text.handle_pump:

00003b84 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    3b84:	cf 92       	push	r12
    3b86:	df 92       	push	r13
    3b88:	ef 92       	push	r14
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    3b92:	22 e0       	ldi	r18, 0x02	; 2
    3b94:	44 e1       	ldi	r20, 0x14	; 20
    3b96:	5f e0       	ldi	r21, 0x0F	; 15
    3b98:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    3b9c:	c8 2f       	mov	r28, r24
    3b9e:	88 23       	and	r24, r24
    3ba0:	d9 f1       	breq	.+118    	; 0x3c18 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    3ba2:	84 e1       	ldi	r24, 0x14	; 20
    3ba4:	9f e0       	ldi	r25, 0x0F	; 15
    3ba6:	6c 01       	movw	r12, r24
    3ba8:	20 e8       	ldi	r18, 0x80	; 128
    3baa:	e2 2e       	mov	r14, r18
    3bac:	25 e7       	ldi	r18, 0x75	; 117
    3bae:	36 e0       	ldi	r19, 0x06	; 6
    3bb0:	40 e0       	ldi	r20, 0x00	; 0
    3bb2:	8e 2d       	mov	r24, r14
    3bb4:	b6 01       	movw	r22, r12
    3bb6:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    3bba:	89 2b       	or	r24, r25
    3bbc:	71 f4       	brne	.+28     	; 0x3bda <handle_pump+0x56>
		PM_HAL_BC_power_init();
    3bbe:	0e 94 65 33 	call	0x66ca	; 0x66ca <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	0e 94 b2 32 	call	0x6564	; 0x6564 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    3bc8:	25 e1       	ldi	r18, 0x15	; 21
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	47 ee       	ldi	r20, 0xE7	; 231
    3bce:	56 e0       	ldi	r21, 0x06	; 6
    3bd0:	60 e0       	ldi	r22, 0x00	; 0
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    3bd8:	1f c0       	rjmp	.+62     	; 0x3c18 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    3bda:	20 e9       	ldi	r18, 0x90	; 144
    3bdc:	36 e0       	ldi	r19, 0x06	; 6
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	8e 2d       	mov	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    3be8:	89 2b       	or	r24, r25
    3bea:	71 f4       	brne	.+28     	; 0x3c08 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    3bec:	0e 94 65 33 	call	0x66ca	; 0x66ca <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	0e 94 b2 32 	call	0x6564	; 0x6564 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    3bf6:	26 e1       	ldi	r18, 0x16	; 22
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	4c ef       	ldi	r20, 0xFC	; 252
    3bfc:	56 e0       	ldi	r21, 0x06	; 6
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	c8 01       	movw	r24, r16
    3c02:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
    3c06:	08 c0       	rjmp	.+16     	; 0x3c18 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3c08:	26 e1       	ldi	r18, 0x16	; 22
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	41 ed       	ldi	r20, 0xD1	; 209
    3c0e:	56 e0       	ldi	r21, 0x06	; 6
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	c8 01       	movw	r24, r16
    3c14:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
	}
}
    3c18:	8c 2f       	mov	r24, r28
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	0f 91       	pop	r16
    3c20:	ef 90       	pop	r14
    3c22:	df 90       	pop	r13
    3c24:	cf 90       	pop	r12
    3c26:	08 95       	ret

Disassembly of section .text.handle_sample:

00003824 <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    3824:	6f 92       	push	r6
    3826:	7f 92       	push	r7
    3828:	8f 92       	push	r8
    382a:	cf 92       	push	r12
    382c:	df 92       	push	r13
    382e:	ef 92       	push	r14
    3830:	0f 93       	push	r16
    3832:	1f 93       	push	r17
    3834:	cf 93       	push	r28
    3836:	3b 01       	movw	r6, r22
    3838:	88 2e       	mov	r8, r24
    383a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    383c:	21 e0       	ldi	r18, 0x01	; 1
    383e:	44 e1       	ldi	r20, 0x14	; 20
    3840:	5f e0       	ldi	r21, 0x0F	; 15
    3842:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <get_parameter>
    3846:	c8 2f       	mov	r28, r24
    3848:	88 23       	and	r24, r24
    384a:	e9 f1       	breq	.+122    	; 0x38c6 <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    384c:	84 e1       	ldi	r24, 0x14	; 20
    384e:	9f e0       	ldi	r25, 0x0F	; 15
    3850:	6c 01       	movw	r12, r24
    3852:	20 e8       	ldi	r18, 0x80	; 128
    3854:	e2 2e       	mov	r14, r18
    3856:	22 e1       	ldi	r18, 0x12	; 18
    3858:	37 e0       	ldi	r19, 0x07	; 7
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	8e 2d       	mov	r24, r14
    385e:	b6 01       	movw	r22, r12
    3860:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    3864:	89 2b       	or	r24, r25
    3866:	39 f4       	brne	.+14     	; 0x3876 <handle_sample+0x52>
		return handle_methane(cmd, res);
    3868:	a8 01       	movw	r20, r16
    386a:	88 2d       	mov	r24, r8
    386c:	b3 01       	movw	r22, r6
    386e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <handle_methane>
    3872:	c8 2f       	mov	r28, r24
    3874:	28 c0       	rjmp	.+80     	; 0x38c6 <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    3876:	27 e1       	ldi	r18, 0x17	; 23
    3878:	37 e0       	ldi	r19, 0x07	; 7
    387a:	40 e0       	ldi	r20, 0x00	; 0
    387c:	8e 2d       	mov	r24, r14
    387e:	b6 01       	movw	r22, r12
    3880:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    3884:	89 2b       	or	r24, r25
    3886:	39 f4       	brne	.+14     	; 0x3896 <handle_sample+0x72>
		return handle_co2(cmd, res);
    3888:	a8 01       	movw	r20, r16
    388a:	88 2d       	mov	r24, r8
    388c:	b3 01       	movw	r22, r6
    388e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <handle_co2>
    3892:	c8 2f       	mov	r28, r24
    3894:	18 c0       	rjmp	.+48     	; 0x38c6 <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    3896:	2b e1       	ldi	r18, 0x1B	; 27
    3898:	37 e0       	ldi	r19, 0x07	; 7
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	8e 2d       	mov	r24, r14
    389e:	b6 01       	movw	r22, r12
    38a0:	0e 94 4f 2b 	call	0x569e	; 0x569e <strcmp>
    38a4:	89 2b       	or	r24, r25
    38a6:	39 f4       	brne	.+14     	; 0x38b6 <handle_sample+0x92>
		return handle_pump(cmd, res);
    38a8:	a8 01       	movw	r20, r16
    38aa:	88 2d       	mov	r24, r8
    38ac:	b3 01       	movw	r22, r6
    38ae:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <handle_pump>
    38b2:	c8 2f       	mov	r28, r24
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    38b6:	26 e1       	ldi	r18, 0x16	; 22
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	41 ed       	ldi	r20, 0xD1	; 209
    38bc:	56 e0       	ldi	r21, 0x06	; 6
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	c8 01       	movw	r24, r16
    38c2:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <memcpy>
		return true;
	}
}
    38c6:	8c 2f       	mov	r24, r28
    38c8:	cf 91       	pop	r28
    38ca:	1f 91       	pop	r17
    38cc:	0f 91       	pop	r16
    38ce:	ef 90       	pop	r14
    38d0:	df 90       	pop	r13
    38d2:	cf 90       	pop	r12
    38d4:	8f 90       	pop	r8
    38d6:	7f 90       	pop	r7
    38d8:	6f 90       	pop	r6
    38da:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

0000604a <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    604a:	0e 94 02 33 	call	0x6604	; 0x6604 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    604e:	0e 94 50 33 	call	0x66a0	; 0x66a0 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    6052:	81 e0       	ldi	r24, 0x01	; 1
    6054:	0e 94 94 32 	call	0x6528	; 0x6528 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    6058:	0e 94 5e 33 	call	0x66bc	; 0x66bc <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	0e 94 a8 32 	call	0x6550	; 0x6550 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    6062:	0e 94 b6 30 	call	0x616c	; 0x616c <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    6066:	88 23       	and	r24, r24
    6068:	11 f0       	breq	.+4      	; 0x606e <init_methane_SCD30+0x24>
    606a:	80 e0       	ldi	r24, 0x00	; 0
    606c:	08 95       	ret
	return true;
    606e:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    6070:	08 95       	ret

Disassembly of section .text.count_parameters:

00004db4 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4db4:	6f 92       	push	r6
    4db6:	7f 92       	push	r7
    4db8:	8f 92       	push	r8
    4dba:	cf 92       	push	r12
    4dbc:	df 92       	push	r13
    4dbe:	ef 92       	push	r14
    4dc0:	3b 01       	movw	r6, r22
    4dc2:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4dc4:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4dc8:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    4dce:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    4dd0:	10 c0       	rjmp	.+32     	; 0x4df2 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4dd2:	e8 2c       	mov	r14, r8
    4dd4:	63 01       	movw	r12, r6
    4dd6:	c2 0e       	add	r12, r18
    4dd8:	d3 1e       	adc	r13, r19
    4dda:	e1 1c       	adc	r14, r1
    4ddc:	37 fd       	sbrc	r19, 7
    4dde:	ea 94       	dec	r14
    4de0:	f6 01       	movw	r30, r12
    4de2:	94 91       	lpm	r25, Z
    4de4:	e7 fc       	sbrc	r14, 7
    4de6:	90 81       	ld	r25, Z
    4de8:	90 32       	cpi	r25, 0x20	; 32
    4dea:	09 f4       	brne	.+2      	; 0x4dee <count_parameters+0x3a>
			cnt++;
    4dec:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4dee:	2f 5f       	subi	r18, 0xFF	; 255
    4df0:	3f 4f       	sbci	r19, 0xFF	; 255
    4df2:	26 17       	cp	r18, r22
    4df4:	37 07       	cpc	r19, r23
    4df6:	68 f3       	brcs	.-38     	; 0x4dd2 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4df8:	ef 90       	pop	r14
    4dfa:	df 90       	pop	r13
    4dfc:	cf 90       	pop	r12
    4dfe:	8f 90       	pop	r8
    4e00:	7f 90       	pop	r7
    4e02:	6f 90       	pop	r6
    4e04:	08 95       	ret

Disassembly of section .text.par_index:

0000468c <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    468c:	cf 92       	push	r12
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    469a:	44 23       	and	r20, r20
    469c:	29 f1       	breq	.+74     	; 0x46e8 <par_index+0x5c>
    469e:	04 2f       	mov	r16, r20
    46a0:	6b 01       	movw	r12, r22
    46a2:	e8 2e       	mov	r14, r24
    46a4:	c0 e0       	ldi	r28, 0x00	; 0
    46a6:	d0 e0       	ldi	r29, 0x00	; 0
    46a8:	10 e0       	ldi	r17, 0x00	; 0
    46aa:	14 c0       	rjmp	.+40     	; 0x46d4 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    46ac:	ae 2d       	mov	r26, r14
    46ae:	c6 01       	movw	r24, r12
    46b0:	8c 0f       	add	r24, r28
    46b2:	9d 1f       	adc	r25, r29
    46b4:	a1 1d       	adc	r26, r1
    46b6:	d7 fd       	sbrc	r29, 7
    46b8:	aa 95       	dec	r26
    46ba:	fc 01       	movw	r30, r24
    46bc:	84 91       	lpm	r24, Z
    46be:	a7 fd       	sbrc	r26, 7
    46c0:	80 81       	ld	r24, Z
    46c2:	80 32       	cpi	r24, 0x20	; 32
    46c4:	31 f4       	brne	.+12     	; 0x46d2 <par_index+0x46>
			cnt++;
    46c6:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    46c8:	01 13       	cpse	r16, r17
    46ca:	03 c0       	rjmp	.+6      	; 0x46d2 <par_index+0x46>
				return i+1;
    46cc:	ce 01       	movw	r24, r28
    46ce:	01 96       	adiw	r24, 0x01	; 1
    46d0:	0d c0       	rjmp	.+26     	; 0x46ec <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    46d2:	21 96       	adiw	r28, 0x01	; 1
    46d4:	8e 2d       	mov	r24, r14
    46d6:	b6 01       	movw	r22, r12
    46d8:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    46dc:	c8 17       	cp	r28, r24
    46de:	d9 07       	cpc	r29, r25
    46e0:	28 f3       	brcs	.-54     	; 0x46ac <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	02 c0       	rjmp	.+4      	; 0x46ec <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    46ec:	df 91       	pop	r29
    46ee:	cf 91       	pop	r28
    46f0:	1f 91       	pop	r17
    46f2:	0f 91       	pop	r16
    46f4:	ef 90       	pop	r14
    46f6:	df 90       	pop	r13
    46f8:	cf 90       	pop	r12
    46fa:	08 95       	ret

Disassembly of section .text.get_parameter:

00003e98 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3e98:	8f 92       	push	r8
    3e9a:	9f 92       	push	r9
    3e9c:	af 92       	push	r10
    3e9e:	cf 92       	push	r12
    3ea0:	df 92       	push	r13
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	0f 93       	push	r16
    3ea8:	1f 93       	push	r17
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	6b 01       	movw	r12, r22
    3eb0:	e8 2e       	mov	r14, r24
    3eb2:	ea 01       	movw	r28, r20
    3eb4:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3eb6:	0e 94 da 26 	call	0x4db4	; 0x4db4 <count_parameters>
	if(pars<parNo) return false;
    3eba:	8f 15       	cp	r24, r15
    3ebc:	58 f1       	brcs	.+86     	; 0x3f14 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    3ebe:	8e 2d       	mov	r24, r14
    3ec0:	b6 01       	movw	r22, r12
    3ec2:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    3ec6:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3ec8:	4f 2d       	mov	r20, r15
    3eca:	8e 2d       	mov	r24, r14
    3ecc:	b6 01       	movw	r22, r12
    3ece:	0e 94 46 23 	call	0x468c	; 0x468c <par_index>
	uint8_t parLen=0;
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3ed4:	15 c0       	rjmp	.+42     	; 0x3f00 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3ed6:	46 01       	movw	r8, r12
    3ed8:	ae 2c       	mov	r10, r14
    3eda:	82 0e       	add	r8, r18
    3edc:	93 1e       	adc	r9, r19
    3ede:	a1 1c       	adc	r10, r1
    3ee0:	37 fd       	sbrc	r19, 7
    3ee2:	aa 94       	dec	r10
    3ee4:	4a 2d       	mov	r20, r10
    3ee6:	94 01       	movw	r18, r8
    3ee8:	f4 01       	movw	r30, r8
    3eea:	24 91       	lpm	r18, Z
    3eec:	47 fd       	sbrc	r20, 7
    3eee:	20 81       	ld	r18, Z
    3ef0:	20 32       	cpi	r18, 0x20	; 32
    3ef2:	59 f0       	breq	.+22     	; 0x3f0a <get_parameter+0x72>
		par[parLen++]=src[i];
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e9 0f       	add	r30, r25
    3ef8:	f1 1d       	adc	r31, r1
    3efa:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3efc:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    3efe:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3f00:	28 2f       	mov	r18, r24
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	20 17       	cp	r18, r16
    3f06:	31 07       	cpc	r19, r17
    3f08:	30 f3       	brcs	.-52     	; 0x3ed6 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    3f0a:	c9 0f       	add	r28, r25
    3f0c:	d1 1d       	adc	r29, r1
    3f0e:	18 82       	st	Y, r1
	
	return true;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	01 c0       	rjmp	.+2      	; 0x3f16 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    3f14:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	0f 91       	pop	r16
    3f1e:	ff 90       	pop	r15
    3f20:	ef 90       	pop	r14
    3f22:	df 90       	pop	r13
    3f24:	cf 90       	pop	r12
    3f26:	af 90       	pop	r10
    3f28:	9f 90       	pop	r9
    3f2a:	8f 90       	pop	r8
    3f2c:	08 95       	ret

Disassembly of section .text.decode_stage_response:

000064fc <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    64fc:	88 23       	and	r24, r24
    64fe:	19 f0       	breq	.+6      	; 0x6506 <decode_stage_response+0xa>
    6500:	81 30       	cpi	r24, 0x01	; 1
    6502:	29 f0       	breq	.+10     	; 0x650e <decode_stage_response+0x12>
    6504:	02 c0       	rjmp	.+4      	; 0x650a <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6506:	81 e1       	ldi	r24, 0x11	; 17
    6508:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    650a:	86 e1       	ldi	r24, 0x16	; 22
    650c:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    650e:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6510:	08 95       	ret

Disassembly of section .text.decode_join_response:

000063f0 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    63f0:	82 30       	cpi	r24, 0x02	; 2
    63f2:	51 f0       	breq	.+20     	; 0x6408 <decode_join_response+0x18>
    63f4:	83 30       	cpi	r24, 0x03	; 3
    63f6:	21 f0       	breq	.+8      	; 0x6400 <decode_join_response+0x10>
    63f8:	81 11       	cpse	r24, r1
    63fa:	04 c0       	rjmp	.+8      	; 0x6404 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    63fc:	83 e0       	ldi	r24, 0x03	; 3
    63fe:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    6400:	85 e0       	ldi	r24, 0x05	; 5
    6402:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    6404:	86 e1       	ldi	r24, 0x16	; 22
    6406:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    6408:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    640a:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

0000630a <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    630a:	82 30       	cpi	r24, 0x02	; 2
    630c:	49 f0       	breq	.+18     	; 0x6320 <decode_header_tail_response+0x16>
    630e:	18 f4       	brcc	.+6      	; 0x6316 <decode_header_tail_response+0xc>
    6310:	88 23       	and	r24, r24
    6312:	41 f0       	breq	.+16     	; 0x6324 <decode_header_tail_response+0x1a>
    6314:	03 c0       	rjmp	.+6      	; 0x631c <decode_header_tail_response+0x12>
    6316:	84 50       	subi	r24, 0x04	; 4
    6318:	82 30       	cpi	r24, 0x02	; 2
    631a:	20 f0       	brcs	.+8      	; 0x6324 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    631c:	86 e1       	ldi	r24, 0x16	; 22
    631e:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6320:	84 2f       	mov	r24, r20
    6322:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    6324:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6326:	08 95       	ret

Disassembly of section .text.read_eeprom:

00004b56 <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    4b56:	89 e3       	ldi	r24, 0x39	; 57
    4b58:	9f e0       	ldi	r25, 0x0F	; 15
    4b5a:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <EM_get_deveui>
	EM_get_appeui(appeui);
    4b5e:	88 e2       	ldi	r24, 0x28	; 40
    4b60:	9f e0       	ldi	r25, 0x0F	; 15
    4b62:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <EM_get_appeui>
	EM_get_appkey(appkey);
    4b66:	83 ef       	ldi	r24, 0xF3	; 243
    4b68:	9e e0       	ldi	r25, 0x0E	; 14
    4b6a:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    4b6e:	63 e2       	ldi	r22, 0x23	; 35
    4b70:	80 ed       	ldi	r24, 0xD0	; 208
    4b72:	9e e0       	ldi	r25, 0x0E	; 14
    4b74:	0e 94 40 33 	call	0x6680	; 0x6680 <EM_get_collections>
	EM_get_Vcc(&vccx);
    4b78:	83 e7       	ldi	r24, 0x73	; 115
    4b7a:	9f e0       	ldi	r25, 0x0F	; 15
    4b7c:	0e 94 76 31 	call	0x62ec	; 0x62ec <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    4b80:	8f e6       	ldi	r24, 0x6F	; 111
    4b82:	9f e0       	ldi	r25, 0x0F	; 15
    4b84:	0e 94 67 31 	call	0x62ce	; 0x62ce <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    4b88:	8b e6       	ldi	r24, 0x6B	; 107
    4b8a:	9f e0       	ldi	r25, 0x0F	; 15
    4b8c:	0e 94 58 31 	call	0x62b0	; 0x62b0 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    4b90:	0e 94 03 34 	call	0x6806	; 0x6806 <EM_get_heat_up_time>
    4b94:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    4b98:	0e 94 0f 34 	call	0x681e	; 0x681e <EM_get_air_pump_time>
    4b9c:	90 93 92 0f 	sts	0x0F92, r25	; 0x800f92 <airPumpTime+0x1>
    4ba0:	80 93 91 0f 	sts	0x0F91, r24	; 0x800f91 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    4ba4:	0e 94 1b 34 	call	0x6836	; 0x6836 <EM_get_sp_interval>
    4ba8:	80 93 ab 0f 	sts	0x0FAB, r24	; 0x800fab <samplingProcessInterval>
	return true;
}
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	08 95       	ret

Disassembly of section .text.join_lora:

0000663a <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    663a:	43 ef       	ldi	r20, 0xF3	; 243
    663c:	5e e0       	ldi	r21, 0x0E	; 14
    663e:	68 e2       	ldi	r22, 0x28	; 40
    6640:	7f e0       	ldi	r23, 0x0F	; 15
    6642:	89 e3       	ldi	r24, 0x39	; 57
    6644:	9f e0       	ldi	r25, 0x0F	; 15
    6646:	0e 94 c3 34 	call	0x6986	; 0x6986 <LM_join_network>
}
    664a:	08 95       	ret

Disassembly of section .text.set_wakeup:

000068f0 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    68f0:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <samplingProcessInterval>
    68f4:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <RTC_set_wake_up_interrupt_minutes>
}
    68f8:	08 95       	ret

Disassembly of section .text.send_header:

00005760 <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    5760:	cf 93       	push	r28
    5762:	df 93       	push	r29
    5764:	cd b7       	in	r28, 0x3d	; 61
    5766:	de b7       	in	r29, 0x3e	; 62
    5768:	e4 97       	sbiw	r28, 0x34	; 52
    576a:	0f b6       	in	r0, 0x3f	; 63
    576c:	f8 94       	cli
    576e:	de bf       	out	0x3e, r29	; 62
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    5774:	be 01       	movw	r22, r28
    5776:	6c 5c       	subi	r22, 0xCC	; 204
    5778:	7f 4f       	sbci	r23, 0xFF	; 255
    577a:	ce 01       	movw	r24, r28
    577c:	01 96       	adiw	r24, 0x01	; 1
    577e:	0e 94 94 30 	call	0x6128	; 0x6128 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    5782:	6c a9       	ldd	r22, Y+52	; 0x34
    5784:	ce 01       	movw	r24, r28
    5786:	01 96       	adiw	r24, 0x01	; 1
    5788:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <LM_send_uplink>
}
    578c:	e4 96       	adiw	r28, 0x34	; 52
    578e:	0f b6       	in	r0, 0x3f	; 63
    5790:	f8 94       	cli
    5792:	de bf       	out	0x3e, r29	; 62
    5794:	0f be       	out	0x3f, r0	; 63
    5796:	cd bf       	out	0x3d, r28	; 61
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	08 95       	ret

Disassembly of section .text.send_body:

00005720 <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	e4 97       	sbiw	r28, 0x34	; 52
    572a:	0f b6       	in	r0, 0x3f	; 63
    572c:	f8 94       	cli
    572e:	de bf       	out	0x3e, r29	; 62
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    5734:	ae 01       	movw	r20, r28
    5736:	4c 5c       	subi	r20, 0xCC	; 204
    5738:	5f 4f       	sbci	r21, 0xFF	; 255
    573a:	be 01       	movw	r22, r28
    573c:	6f 5f       	subi	r22, 0xFF	; 255
    573e:	7f 4f       	sbci	r23, 0xFF	; 255
    5740:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    5744:	6c a9       	ldd	r22, Y+52	; 0x34
    5746:	ce 01       	movw	r24, r28
    5748:	01 96       	adiw	r24, 0x01	; 1
    574a:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <LM_send_uplink>
}
    574e:	e4 96       	adiw	r28, 0x34	; 52
    5750:	0f b6       	in	r0, 0x3f	; 63
    5752:	f8 94       	cli
    5754:	de bf       	out	0x3e, r29	; 62
    5756:	0f be       	out	0x3f, r0	; 63
    5758:	cd bf       	out	0x3d, r28	; 61
    575a:	df 91       	pop	r29
    575c:	cf 91       	pop	r28
    575e:	08 95       	ret

Disassembly of section .text.decode_body_response:

00006072 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    6072:	cf 93       	push	r28
	switch(status){
    6074:	62 30       	cpi	r22, 0x02	; 2
    6076:	71 f0       	breq	.+28     	; 0x6094 <decode_body_response+0x22>
    6078:	18 f4       	brcc	.+6      	; 0x6080 <decode_body_response+0xe>
    607a:	66 23       	and	r22, r22
    607c:	31 f0       	breq	.+12     	; 0x608a <decode_body_response+0x18>
    607e:	03 c0       	rjmp	.+6      	; 0x6086 <decode_body_response+0x14>
    6080:	64 50       	subi	r22, 0x04	; 4
    6082:	62 30       	cpi	r22, 0x02	; 2
    6084:	10 f0       	brcs	.+4      	; 0x608a <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    6086:	86 e1       	ldi	r24, 0x16	; 22
    6088:	06 c0       	rjmp	.+12     	; 0x6096 <decode_body_response+0x24>
    608a:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    608c:	0e 94 33 34 	call	0x6866	; 0x6866 <MRPP_set_body_sent>
			return success;
    6090:	8c 2f       	mov	r24, r28
    6092:	01 c0       	rjmp	.+2      	; 0x6096 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    6094:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6096:	cf 91       	pop	r28
    6098:	08 95       	ret

Disassembly of section .text.send_tail:

0000579e <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    579e:	cf 93       	push	r28
    57a0:	df 93       	push	r29
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
    57a6:	e4 97       	sbiw	r28, 0x34	; 52
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	f8 94       	cli
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    57b2:	be 01       	movw	r22, r28
    57b4:	6c 5c       	subi	r22, 0xCC	; 204
    57b6:	7f 4f       	sbci	r23, 0xFF	; 255
    57b8:	ce 01       	movw	r24, r28
    57ba:	01 96       	adiw	r24, 0x01	; 1
    57bc:	0e 94 a5 30 	call	0x614a	; 0x614a <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    57c0:	6c a9       	ldd	r22, Y+52	; 0x34
    57c2:	ce 01       	movw	r24, r28
    57c4:	01 96       	adiw	r24, 0x01	; 1
    57c6:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <LM_send_uplink>
}
    57ca:	e4 96       	adiw	r28, 0x34	; 52
    57cc:	0f b6       	in	r0, 0x3f	; 63
    57ce:	f8 94       	cli
    57d0:	de bf       	out	0x3e, r29	; 62
    57d2:	0f be       	out	0x3f, r0	; 63
    57d4:	cd bf       	out	0x3d, r28	; 61
    57d6:	df 91       	pop	r29
    57d8:	cf 91       	pop	r28
    57da:	08 95       	ret

Disassembly of section .text.send_msg:

0000648a <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    648a:	0e 94 29 20 	call	0x4052	; 0x4052 <uart1_hal_send_string>
    648e:	2f ef       	ldi	r18, 0xFF	; 255
    6490:	80 e7       	ldi	r24, 0x70	; 112
    6492:	92 e0       	ldi	r25, 0x02	; 2
    6494:	21 50       	subi	r18, 0x01	; 1
    6496:	80 40       	sbci	r24, 0x00	; 0
    6498:	90 40       	sbci	r25, 0x00	; 0
    649a:	e1 f7       	brne	.-8      	; 0x6494 <send_msg+0xa>
    649c:	00 c0       	rjmp	.+0      	; 0x649e <send_msg+0x14>
    649e:	00 00       	nop
    64a0:	08 95       	ret

Disassembly of section .text.stage_0:

00003372 <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    3372:	80 91 b0 0f 	lds	r24, 0x0FB0	; 0x800fb0 <state_s0>
    3376:	82 30       	cpi	r24, 0x02	; 2
    3378:	41 f1       	breq	.+80     	; 0x33ca <stage_0+0x58>
    337a:	28 f4       	brcc	.+10     	; 0x3386 <stage_0+0x14>
    337c:	88 23       	and	r24, r24
    337e:	51 f0       	breq	.+20     	; 0x3394 <stage_0+0x22>
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	d9 f0       	breq	.+54     	; 0x33ba <stage_0+0x48>
    3384:	f6 cf       	rjmp	.-20     	; 0x3372 <stage_0>
    3386:	84 30       	cpi	r24, 0x04	; 4
    3388:	09 f4       	brne	.+2      	; 0x338c <stage_0+0x1a>
    338a:	50 c0       	rjmp	.+160    	; 0x342c <stage_0+0xba>
    338c:	40 f1       	brcs	.+80     	; 0x33de <stage_0+0x6c>
    338e:	85 30       	cpi	r24, 0x05	; 5
    3390:	91 f1       	breq	.+100    	; 0x33f6 <stage_0+0x84>
    3392:	ef cf       	rjmp	.-34     	; 0x3372 <stage_0>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    3394:	64 e6       	ldi	r22, 0x64	; 100
    3396:	72 e0       	ldi	r23, 0x02	; 2
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    339e:	e0 ed       	ldi	r30, 0xD0	; 208
    33a0:	fe e0       	ldi	r31, 0x0E	; 14
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	4a ec       	ldi	r20, 0xCA	; 202
    33a8:	5a e0       	ldi	r21, 0x0A	; 10
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	0e 94 c7 30 	call	0x618e	; 0x618e <SCD30_init_sampling>
				state_s0=STAGE_GET_TIME;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <state_s0>
			break;
    33b8:	dc cf       	rjmp	.-72     	; 0x3372 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    33ba:	84 e5       	ldi	r24, 0x54	; 84
    33bc:	9f e0       	ldi	r25, 0x0F	; 15
    33be:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <RTC_get_current_time>
				state_s0=STAGE_START;
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <state_s0>
			break;
    33c8:	d4 cf       	rjmp	.-88     	; 0x3372 <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    33ca:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <methHeatUpTime>
    33ce:	0e 94 49 31 	call	0x6292	; 0x6292 <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    33d2:	0e 94 73 34 	call	0x68e6	; 0x68e6 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <state_s0>
			break;
    33dc:	ca cf       	rjmp	.-108    	; 0x3372 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    33de:	0e 94 0b 33 	call	0x6616	; 0x6616 <ADC_meth_sens_ready>
    33e2:	88 23       	and	r24, r24
    33e4:	61 f1       	breq	.+88     	; 0x343e <stage_0+0xcc>
    33e6:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <SCD30_is_sampling_done>
    33ea:	88 23       	and	r24, r24
    33ec:	51 f1       	breq	.+84     	; 0x3442 <stage_0+0xd0>
				state_s0=STAGE_UPDATE_MRPP;
    33ee:	85 e0       	ldi	r24, 0x05	; 5
    33f0:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <state_s0>
			break;
    33f4:	be cf       	rjmp	.-132    	; 0x3372 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    33f6:	27 e7       	ldi	r18, 0x77	; 119
    33f8:	3f e0       	ldi	r19, 0x0F	; 15
    33fa:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    33fe:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    3402:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    3406:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    340a:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    340e:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    3412:	0e 94 b6 13 	call	0x276c	; 0x276c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    3416:	4a ec       	ldi	r20, 0xCA	; 202
    3418:	5a e0       	ldi	r21, 0x0A	; 10
    341a:	67 e7       	ldi	r22, 0x77	; 119
    341c:	7f e0       	ldi	r23, 0x0F	; 15
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    3424:	84 e0       	ldi	r24, 0x04	; 4
    3426:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <state_s0>
			break;
    342a:	a3 cf       	rjmp	.-186    	; 0x3372 <stage_0>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    342c:	63 e7       	ldi	r22, 0x73	; 115
    342e:	72 e0       	ldi	r23, 0x02	; 2
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_deinit_sampling();
    3436:	0e 94 b9 33 	call	0x6772	; 0x6772 <SCD30_deinit_sampling>
				return STAGE_DONE;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	08 95       	ret
    3442:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    3444:	08 95       	ret

Disassembly of section .text.stage_1:

00002de4 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    2de8:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <state_s1>
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	89 f1       	breq	.+98     	; 0x2e52 <stage_1+0x6e>
    2df0:	28 f4       	brcc	.+10     	; 0x2dfc <stage_1+0x18>
    2df2:	88 23       	and	r24, r24
    2df4:	51 f0       	breq	.+20     	; 0x2e0a <stage_1+0x26>
    2df6:	81 30       	cpi	r24, 0x01	; 1
    2df8:	21 f1       	breq	.+72     	; 0x2e42 <stage_1+0x5e>
    2dfa:	f6 cf       	rjmp	.-20     	; 0x2de8 <stage_1+0x4>
    2dfc:	84 30       	cpi	r24, 0x04	; 4
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <stage_1+0x1e>
    2e00:	5e c0       	rjmp	.+188    	; 0x2ebe <stage_1+0xda>
    2e02:	78 f1       	brcs	.+94     	; 0x2e62 <stage_1+0x7e>
    2e04:	85 30       	cpi	r24, 0x05	; 5
    2e06:	c9 f1       	breq	.+114    	; 0x2e7a <stage_1+0x96>
    2e08:	ef cf       	rjmp	.-34     	; 0x2de8 <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2e0a:	65 e8       	ldi	r22, 0x85	; 133
    2e0c:	72 e0       	ldi	r23, 0x02	; 2
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2e14:	c0 ed       	ldi	r28, 0xD0	; 208
    2e16:	de e0       	ldi	r29, 0x0E	; 14
    2e18:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e1a:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e1c:	4a ec       	ldi	r20, 0xCA	; 202
    2e1e:	5a e0       	ldi	r21, 0x0A	; 10
    2e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e24:	0e 94 c7 30 	call	0x618e	; 0x618e <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2e28:	6d 81       	ldd	r22, Y+5	; 0x05
    2e2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e2c:	42 e7       	ldi	r20, 0x72	; 114
    2e2e:	58 e0       	ldi	r21, 0x08	; 8
    2e30:	8f 81       	ldd	r24, Y+7	; 0x07
    2e32:	0e 94 bf 24 	call	0x497e	; 0x497e <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2e36:	81 11       	cpse	r24, r1
    2e38:	4d c0       	rjmp	.+154    	; 0x2ed4 <stage_1+0xf0>
				
				state_s1=STAGE_GET_TIME;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s1>
			break;
    2e40:	d3 cf       	rjmp	.-90     	; 0x2de8 <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2e42:	84 e5       	ldi	r24, 0x54	; 84
    2e44:	9f e0       	ldi	r25, 0x0F	; 15
    2e46:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s1>
			break;
    2e50:	cb cf       	rjmp	.-106    	; 0x2de8 <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2e52:	0e 94 73 34 	call	0x68e6	; 0x68e6 <SCD30_start_sampling>
				ADC_start_sampling();
    2e56:	0e 94 64 34 	call	0x68c8	; 0x68c8 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s1>
			break;
    2e60:	c3 cf       	rjmp	.-122    	; 0x2de8 <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2e62:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <SCD30_is_sampling_done>
    2e66:	88 23       	and	r24, r24
    2e68:	b9 f1       	breq	.+110    	; 0x2ed8 <stage_1+0xf4>
    2e6a:	0e 94 b2 31 	call	0x6364	; 0x6364 <ADC_is_sampling_done>
    2e6e:	88 23       	and	r24, r24
    2e70:	a9 f1       	breq	.+106    	; 0x2edc <stage_1+0xf8>
				state_s1=STAGE_UPDATE_MRPP;
    2e72:	85 e0       	ldi	r24, 0x05	; 5
    2e74:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s1>
			break;
    2e78:	b7 cf       	rjmp	.-146    	; 0x2de8 <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2e7a:	27 e7       	ldi	r18, 0x77	; 119
    2e7c:	3f e0       	ldi	r19, 0x0F	; 15
    2e7e:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2e82:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2e86:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2e8a:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2e8e:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2e92:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2e96:	0e 94 b6 13 	call	0x276c	; 0x276c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2e9a:	4a ec       	ldi	r20, 0xCA	; 202
    2e9c:	5a e0       	ldi	r21, 0x0A	; 10
    2e9e:	67 e7       	ldi	r22, 0x77	; 119
    2ea0:	7f e0       	ldi	r23, 0x0F	; 15
    2ea2:	83 e0       	ldi	r24, 0x03	; 3
    2ea4:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2ea8:	42 e7       	ldi	r20, 0x72	; 114
    2eaa:	58 e0       	ldi	r21, 0x08	; 8
    2eac:	67 e7       	ldi	r22, 0x77	; 119
    2eae:	7f e0       	ldi	r23, 0x0F	; 15
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    2eb6:	84 e0       	ldi	r24, 0x04	; 4
    2eb8:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s1>
			break;
    2ebc:	95 cf       	rjmp	.-214    	; 0x2de8 <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2ebe:	64 e9       	ldi	r22, 0x94	; 148
    2ec0:	72 e0       	ldi	r23, 0x02	; 2
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_deinit_sampling();
    2ec8:	0e 94 b9 33 	call	0x6772	; 0x6772 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2ecc:	0e 94 ee 32 	call	0x65dc	; 0x65dc <ADC_deinit_sampling>
				return STAGE_DONE;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	05 c0       	rjmp	.+10     	; 0x2ede <stage_1+0xfa>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2ed4:	83 e0       	ldi	r24, 0x03	; 3
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <stage_1+0xfa>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <stage_1+0xfa>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

Disassembly of section .text.stage_2:

00002ac2 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    2ac6:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <state_s2>
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	91 f1       	breq	.+100    	; 0x2b32 <stage_2+0x70>
    2ace:	28 f4       	brcc	.+10     	; 0x2ada <stage_2+0x18>
    2ad0:	88 23       	and	r24, r24
    2ad2:	59 f0       	breq	.+22     	; 0x2aea <stage_2+0x28>
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	29 f1       	breq	.+74     	; 0x2b22 <stage_2+0x60>
    2ad8:	f6 cf       	rjmp	.-20     	; 0x2ac6 <stage_2+0x4>
    2ada:	84 30       	cpi	r24, 0x04	; 4
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <stage_2+0x1e>
    2ade:	69 c0       	rjmp	.+210    	; 0x2bb2 <stage_2+0xf0>
    2ae0:	b0 f1       	brcs	.+108    	; 0x2b4e <stage_2+0x8c>
    2ae2:	85 30       	cpi	r24, 0x05	; 5
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <stage_2+0x26>
    2ae6:	43 c0       	rjmp	.+134    	; 0x2b6e <stage_2+0xac>
    2ae8:	ee cf       	rjmp	.-36     	; 0x2ac6 <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    2aea:	66 ea       	ldi	r22, 0xA6	; 166
    2aec:	72 e0       	ldi	r23, 0x02	; 2
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    2af4:	c0 ed       	ldi	r28, 0xD0	; 208
    2af6:	de e0       	ldi	r29, 0x0E	; 14
    2af8:	6c 89       	ldd	r22, Y+20	; 0x14
    2afa:	7d 89       	ldd	r23, Y+21	; 0x15
    2afc:	4a ec       	ldi	r20, 0xCA	; 202
    2afe:	5a e0       	ldi	r21, 0x0A	; 10
    2b00:	8e 89       	ldd	r24, Y+22	; 0x16
    2b02:	9f 89       	ldd	r25, Y+23	; 0x17
    2b04:	0e 94 c7 30 	call	0x618e	; 0x618e <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    2b08:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b0a:	78 89       	ldd	r23, Y+16	; 0x10
    2b0c:	42 e7       	ldi	r20, 0x72	; 114
    2b0e:	58 e0       	ldi	r21, 0x08	; 8
    2b10:	89 89       	ldd	r24, Y+17	; 0x11
    2b12:	0e 94 bf 24 	call	0x497e	; 0x497e <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b16:	81 11       	cpse	r24, r1
    2b18:	57 c0       	rjmp	.+174    	; 0x2bc8 <stage_2+0x106>
			
				state_s2=STAGE_GET_TIME;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s2>
			break;
    2b20:	d2 cf       	rjmp	.-92     	; 0x2ac6 <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2b22:	84 e5       	ldi	r24, 0x54	; 84
    2b24:	9f e0       	ldi	r25, 0x0F	; 15
    2b26:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s2>
			break;
    2b30:	ca cf       	rjmp	.-108    	; 0x2ac6 <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2b32:	0e 94 73 34 	call	0x68e6	; 0x68e6 <SCD30_start_sampling>
				ADC_start_sampling();
    2b36:	0e 94 64 34 	call	0x68c8	; 0x68c8 <ADC_start_sampling>
				PUMP_start(airPumpTime);
    2b3a:	80 91 91 0f 	lds	r24, 0x0F91	; 0x800f91 <airPumpTime>
    2b3e:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <airPumpTime+0x1>
    2b42:	0e 94 4d 30 	call	0x609a	; 0x609a <PUMP_start>
			
				state_s2=STAGE_WAIT;
    2b46:	83 e0       	ldi	r24, 0x03	; 3
    2b48:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s2>
			break;
    2b4c:	bc cf       	rjmp	.-136    	; 0x2ac6 <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2b4e:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <SCD30_is_sampling_done>
    2b52:	88 23       	and	r24, r24
    2b54:	d9 f1       	breq	.+118    	; 0x2bcc <stage_2+0x10a>
    2b56:	0e 94 b2 31 	call	0x6364	; 0x6364 <ADC_is_sampling_done>
    2b5a:	88 23       	and	r24, r24
    2b5c:	c9 f1       	breq	.+114    	; 0x2bd0 <stage_2+0x10e>
    2b5e:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <PUMP_is_done>
    2b62:	88 23       	and	r24, r24
    2b64:	b9 f1       	breq	.+110    	; 0x2bd4 <stage_2+0x112>
				state_s2=STAGE_UPDATE_MRPP;
    2b66:	85 e0       	ldi	r24, 0x05	; 5
    2b68:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s2>
			break;
    2b6c:	ac cf       	rjmp	.-168    	; 0x2ac6 <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2b6e:	27 e7       	ldi	r18, 0x77	; 119
    2b70:	3f e0       	ldi	r19, 0x0F	; 15
    2b72:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2b76:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2b7a:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2b7e:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2b82:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2b86:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2b8a:	0e 94 b6 13 	call	0x276c	; 0x276c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2b8e:	4a ec       	ldi	r20, 0xCA	; 202
    2b90:	5a e0       	ldi	r21, 0x0A	; 10
    2b92:	67 e7       	ldi	r22, 0x77	; 119
    2b94:	7f e0       	ldi	r23, 0x0F	; 15
    2b96:	85 e0       	ldi	r24, 0x05	; 5
    2b98:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    2b9c:	42 e7       	ldi	r20, 0x72	; 114
    2b9e:	58 e0       	ldi	r21, 0x08	; 8
    2ba0:	67 e7       	ldi	r22, 0x77	; 119
    2ba2:	7f e0       	ldi	r23, 0x0F	; 15
    2ba4:	84 e0       	ldi	r24, 0x04	; 4
    2ba6:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    2baa:	84 e0       	ldi	r24, 0x04	; 4
    2bac:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s2>
			break;
    2bb0:	8a cf       	rjmp	.-236    	; 0x2ac6 <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2bb2:	65 eb       	ldi	r22, 0xB5	; 181
    2bb4:	72 e0       	ldi	r23, 0x02	; 2
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_deinit_sampling();
    2bbc:	0e 94 b9 33 	call	0x6772	; 0x6772 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2bc0:	0e 94 ee 32 	call	0x65dc	; 0x65dc <ADC_deinit_sampling>
				return STAGE_DONE;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	07 c0       	rjmp	.+14     	; 0x2bd6 <stage_2+0x114>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	05 c0       	rjmp	.+10     	; 0x2bd6 <stage_2+0x114>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	03 c0       	rjmp	.+6      	; 0x2bd6 <stage_2+0x114>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <stage_2+0x114>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

Disassembly of section .text.stage_3:

00002bdc <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    2be0:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <state_s3>
    2be4:	82 30       	cpi	r24, 0x02	; 2
    2be6:	89 f1       	breq	.+98     	; 0x2c4a <stage_3+0x6e>
    2be8:	28 f4       	brcc	.+10     	; 0x2bf4 <stage_3+0x18>
    2bea:	88 23       	and	r24, r24
    2bec:	51 f0       	breq	.+20     	; 0x2c02 <stage_3+0x26>
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	21 f1       	breq	.+72     	; 0x2c3a <stage_3+0x5e>
    2bf2:	f6 cf       	rjmp	.-20     	; 0x2be0 <stage_3+0x4>
    2bf4:	84 30       	cpi	r24, 0x04	; 4
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <stage_3+0x1e>
    2bf8:	5e c0       	rjmp	.+188    	; 0x2cb6 <stage_3+0xda>
    2bfa:	78 f1       	brcs	.+94     	; 0x2c5a <stage_3+0x7e>
    2bfc:	85 30       	cpi	r24, 0x05	; 5
    2bfe:	c9 f1       	breq	.+114    	; 0x2c72 <stage_3+0x96>
    2c00:	ef cf       	rjmp	.-34     	; 0x2be0 <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    2c02:	67 ec       	ldi	r22, 0xC7	; 199
    2c04:	72 e0       	ldi	r23, 0x02	; 2
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    2c0c:	c0 ed       	ldi	r28, 0xD0	; 208
    2c0e:	de e0       	ldi	r29, 0x0E	; 14
    2c10:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2c12:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2c14:	4a ec       	ldi	r20, 0xCA	; 202
    2c16:	5a e0       	ldi	r21, 0x0A	; 10
    2c18:	88 a1       	ldd	r24, Y+32	; 0x20
    2c1a:	99 a1       	ldd	r25, Y+33	; 0x21
    2c1c:	0e 94 c7 30 	call	0x618e	; 0x618e <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2c20:	69 8d       	ldd	r22, Y+25	; 0x19
    2c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c24:	42 e7       	ldi	r20, 0x72	; 114
    2c26:	58 e0       	ldi	r21, 0x08	; 8
    2c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2a:	0e 94 bf 24 	call	0x497e	; 0x497e <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2c2e:	81 11       	cpse	r24, r1
    2c30:	51 c0       	rjmp	.+162    	; 0x2cd4 <stage_3+0xf8>
			
				state_s3=STAGE_GET_TIME;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s3>
			break;
    2c38:	d3 cf       	rjmp	.-90     	; 0x2be0 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2c3a:	84 e5       	ldi	r24, 0x54	; 84
    2c3c:	9f e0       	ldi	r25, 0x0F	; 15
    2c3e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s3>
			break;
    2c48:	cb cf       	rjmp	.-106    	; 0x2be0 <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2c4a:	0e 94 73 34 	call	0x68e6	; 0x68e6 <SCD30_start_sampling>
				ADC_start_sampling();
    2c4e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s3>
			break;
    2c58:	c3 cf       	rjmp	.-122    	; 0x2be0 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2c5a:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <SCD30_is_sampling_done>
    2c5e:	88 23       	and	r24, r24
    2c60:	d9 f1       	breq	.+118    	; 0x2cd8 <stage_3+0xfc>
    2c62:	0e 94 b2 31 	call	0x6364	; 0x6364 <ADC_is_sampling_done>
    2c66:	88 23       	and	r24, r24
    2c68:	c9 f1       	breq	.+114    	; 0x2cdc <stage_3+0x100>
				state_s3=STAGE_UPDATE_MRPP;
    2c6a:	85 e0       	ldi	r24, 0x05	; 5
    2c6c:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s3>
			break;
    2c70:	b7 cf       	rjmp	.-146    	; 0x2be0 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2c72:	27 e7       	ldi	r18, 0x77	; 119
    2c74:	3f e0       	ldi	r19, 0x0F	; 15
    2c76:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2c7a:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2c7e:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2c82:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2c86:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2c8a:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2c8e:	0e 94 b6 13 	call	0x276c	; 0x276c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2c92:	4a ec       	ldi	r20, 0xCA	; 202
    2c94:	5a e0       	ldi	r21, 0x0A	; 10
    2c96:	67 e7       	ldi	r22, 0x77	; 119
    2c98:	7f e0       	ldi	r23, 0x0F	; 15
    2c9a:	87 e0       	ldi	r24, 0x07	; 7
    2c9c:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2ca0:	42 e7       	ldi	r20, 0x72	; 114
    2ca2:	58 e0       	ldi	r21, 0x08	; 8
    2ca4:	67 e7       	ldi	r22, 0x77	; 119
    2ca6:	7f e0       	ldi	r23, 0x0F	; 15
    2ca8:	86 e0       	ldi	r24, 0x06	; 6
    2caa:	0e 94 0e 23 	call	0x461c	; 0x461c <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    2cae:	84 e0       	ldi	r24, 0x04	; 4
    2cb0:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s3>
			break;
    2cb4:	95 cf       	rjmp	.-214    	; 0x2be0 <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    2cb6:	66 ed       	ldi	r22, 0xD6	; 214
    2cb8:	72 e0       	ldi	r23, 0x02	; 2
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				SCD30_deinit_sampling();
    2cc0:	0e 94 b9 33 	call	0x6772	; 0x6772 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2cc4:	0e 94 aa 34 	call	0x6954	; 0x6954 <SCD30_sensor_off>
				ADC_deinit_sampling();
    2cc8:	0e 94 ee 32 	call	0x65dc	; 0x65dc <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    2ccc:	0e 94 96 34 	call	0x692c	; 0x692c <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <stage_3+0x102>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2cd4:	83 e0       	ldi	r24, 0x03	; 3
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <stage_3+0x102>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	01 c0       	rjmp	.+2      	; 0x2cde <stage_3+0x102>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00001014 <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    1020:	c0 e0       	ldi	r28, 0x00	; 0
    1022:	1a c0       	rjmp	.+52     	; 0x1058 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    1024:	c6 e0       	ldi	r28, 0x06	; 6
    1026:	18 c0       	rjmp	.+48     	; 0x1058 <MAINPG_start+0x44>
					//state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1028:	c5 e0       	ldi	r28, 0x05	; 5
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <MAINPG_start+0x44>
    102c:	c5 e0       	ldi	r28, 0x05	; 5
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <MAINPG_start+0x44>
    1030:	c5 e0       	ldi	r28, 0x05	; 5
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <MAINPG_start+0x44>
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					//state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    1034:	c5 e0       	ldi	r28, 0x05	; 5
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1038:	c6 e1       	ldi	r28, 0x16	; 22
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    103c:	c6 e1       	ldi	r28, 0x16	; 22
    103e:	0c c0       	rjmp	.+24     	; 0x1058 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1040:	c6 e1       	ldi	r28, 0x16	; 22
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1044:	c6 e1       	ldi	r28, 0x16	; 22
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1048:	c6 e1       	ldi	r28, 0x16	; 22
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    104c:	cd 2f       	mov	r28, r29
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <MAINPG_start+0x44>
    1050:	cd 2f       	mov	r28, r29
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    1054:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1056:	c1 e1       	ldi	r28, 0x11	; 17
	SCD30_STATUS scd30Status;
	STAGE_STATUS stageStatus;
	

	while(1){
		switch(state){
    1058:	ec 2f       	mov	r30, r28
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e8 31       	cpi	r30, 0x18	; 24
    105e:	f1 05       	cpc	r31, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <MAINPG_start+0x44>
    1062:	e2 5a       	subi	r30, 0xA2	; 162
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	0c 94 3f 34 	jmp	0x687e	; 0x687e <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    106a:	68 ee       	ldi	r22, 0xE8	; 232
    106c:	72 e0       	ldi	r23, 0x02	; 2
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				uart0_hal_init();
    1074:	0e 94 0c 2c 	call	0x5818	; 0x5818 <uart0_hal_init>
				uart1_hal_init();
    1078:	0e 94 48 2c 	call	0x5890	; 0x5890 <uart1_hal_init>
				TWI_HAL_init();
    107c:	0e 94 02 33 	call	0x6604	; 0x6604 <TWI_HAL_init>
				TC2_HAL_init();
    1080:	0e 94 09 31 	call	0x6212	; 0x6212 <TC2_HAL_init>
				rn2483_init();
    1084:	0e 94 86 34 	call	0x690c	; 0x690c <rn2483_init>
				SCD30_HAL_init();
    1088:	0e 94 73 33 	call	0x66e6	; 0x66e6 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    108c:	0e 94 50 33 	call	0x66a0	; 0x66a0 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    1090:	0e 94 57 33 	call	0x66ae	; 0x66ae <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    1094:	0e 94 65 33 	call	0x66ca	; 0x66ca <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    1098:	0e 94 5e 33 	call	0x66bc	; 0x66bc <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    109c:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    10a0:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <fromSleep>
    10a4:	81 11       	cpse	r24, r1
    10a6:	be cf       	rjmp	.-132    	; 0x1024 <MAINPG_start+0x10>
    10a8:	c1 e0       	ldi	r28, 0x01	; 1
    10aa:	d6 cf       	rjmp	.-84     	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    10ac:	67 ef       	ldi	r22, 0xF7	; 247
    10ae:	72 e0       	ldi	r23, 0x02	; 2
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    10b6:	0e 94 5d 32 	call	0x64ba	; 0x64ba <EM_has_deveui>
    10ba:	88 23       	and	r24, r24
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <MAINPG_start+0xac>
    10be:	b4 cf       	rjmp	.-152    	; 0x1028 <MAINPG_start+0x14>
    10c0:	0e 94 68 32 	call	0x64d0	; 0x64d0 <EM_has_appeui>
    10c4:	88 23       	and	r24, r24
    10c6:	09 f4       	brne	.+2      	; 0x10ca <MAINPG_start+0xb6>
    10c8:	b1 cf       	rjmp	.-158    	; 0x102c <MAINPG_start+0x18>
    10ca:	0e 94 73 32 	call	0x64e6	; 0x64e6 <EM_has_appkey>
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <MAINPG_start+0xc0>
    10d2:	ae cf       	rjmp	.-164    	; 0x1030 <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					//state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
    10d4:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <read_eeprom>
    10d8:	88 23       	and	r24, r24
    10da:	09 f4       	brne	.+2      	; 0x10de <MAINPG_start+0xca>
    10dc:	ab cf       	rjmp	.-170    	; 0x1034 <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    10de:	c2 e0       	ldi	r28, 0x02	; 2
    10e0:	bb cf       	rjmp	.-138    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    10e2:	65 e0       	ldi	r22, 0x05	; 5
    10e4:	73 e0       	ldi	r23, 0x03	; 3
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				LED_start_try_join();
    10ec:	0e 94 b2 33 	call	0x6764	; 0x6764 <LED_start_try_join>
				lmStatus=join_lora();
    10f0:	0e 94 1d 33 	call	0x663a	; 0x663a <join_lora>
    10f4:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    10f6:	0e 94 48 33 	call	0x6690	; 0x6690 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    10fa:	8c 2f       	mov	r24, r28
    10fc:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <decode_join_response>
    1100:	c8 2f       	mov	r28, r24
			break;
    1102:	aa cf       	rjmp	.-172    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    1104:	66 e1       	ldi	r22, 0x16	; 22
    1106:	73 e0       	ldi	r23, 0x03	; 3
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				LED_join_success();
    110e:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <LED_join_success>
				state=MAINPG_INIT_MODULES;
    1112:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    1114:	a1 cf       	rjmp	.-190    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    1116:	6a e2       	ldi	r22, 0x2A	; 42
    1118:	73 e0       	ldi	r23, 0x03	; 3
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				lmStatus=LM_wake_up();
    1120:	0e 94 c6 34 	call	0x698c	; 0x698c <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1124:	81 11       	cpse	r24, r1
    1126:	88 cf       	rjmp	.-240    	; 0x1038 <MAINPG_start+0x24>
    1128:	ca e0       	ldi	r28, 0x0A	; 10
    112a:	96 cf       	rjmp	.-212    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    112c:	6e e3       	ldi	r22, 0x3E	; 62
    112e:	73 e0       	ldi	r23, 0x03	; 3
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				LED_join_denied();
    1136:	0e 94 9a 34 	call	0x6934	; 0x6934 <LED_join_denied>
    113a:	2a ea       	ldi	r18, 0xAA	; 170
    113c:	36 ee       	ldi	r19, 0xE6	; 230
    113e:	86 e9       	ldi	r24, 0x96	; 150
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	30 40       	sbci	r19, 0x00	; 0
    1146:	80 40       	sbci	r24, 0x00	; 0
    1148:	90 40       	sbci	r25, 0x00	; 0
    114a:	d9 f7       	brne	.-10     	; 0x1142 <__stack+0x43>
    114c:	00 00       	nop
				_delay_ms(20000);
				state=MAINPG_LORA_JOIN_NETWORK;
    114e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1150:	83 cf       	rjmp	.-250    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    1152:	64 e5       	ldi	r22, 0x54	; 84
    1154:	73 e0       	ldi	r23, 0x03	; 3
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    115c:	e0 90 6b 0f 	lds	r14, 0x0F6B	; 0x800f6b <ppmx>
    1160:	f0 90 6c 0f 	lds	r15, 0x0F6C	; 0x800f6c <ppmx+0x1>
    1164:	00 91 6d 0f 	lds	r16, 0x0F6D	; 0x800f6d <ppmx+0x2>
    1168:	10 91 6e 0f 	lds	r17, 0x0F6E	; 0x800f6e <ppmx+0x3>
    116c:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <rrlx>
    1170:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <rrlx+0x1>
    1174:	40 91 71 0f 	lds	r20, 0x0F71	; 0x800f71 <rrlx+0x2>
    1178:	50 91 72 0f 	lds	r21, 0x0F72	; 0x800f72 <rrlx+0x3>
    117c:	60 91 73 0f 	lds	r22, 0x0F73	; 0x800f73 <vccx>
    1180:	70 91 74 0f 	lds	r23, 0x0F74	; 0x800f74 <vccx+0x1>
    1184:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <vccx+0x2>
    1188:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <vccx+0x3>
    118c:	0e 94 2e 2b 	call	0x565c	; 0x565c <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    1190:	0e 94 b6 30 	call	0x616c	; 0x616c <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    1194:	81 11       	cpse	r24, r1
    1196:	52 cf       	rjmp	.-348    	; 0x103c <MAINPG_start+0x28>
    1198:	c7 e0       	ldi	r28, 0x07	; 7
    119a:	5e cf       	rjmp	.-324    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    119c:	68 e6       	ldi	r22, 0x68	; 104
    119e:	73 e0       	ldi	r23, 0x03	; 3
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    11ac:	81 11       	cpse	r24, r1
    11ae:	48 cf       	rjmp	.-368    	; 0x1040 <MAINPG_start+0x2c>
    11b0:	c9 e0       	ldi	r28, 0x09	; 9
    11b2:	52 cf       	rjmp	.-348    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    11b4:	68 e7       	ldi	r22, 0x78	; 120
    11b6:	73 e0       	ldi	r23, 0x03	; 3
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    11be:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    11c2:	81 11       	cpse	r24, r1
    11c4:	3f cf       	rjmp	.-386    	; 0x1044 <MAINPG_start+0x30>
    11c6:	c8 e0       	ldi	r28, 0x08	; 8
    11c8:	47 cf       	rjmp	.-370    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    11ca:	69 e8       	ldi	r22, 0x89	; 137
    11cc:	73 e0       	ldi	r23, 0x03	; 3
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				rtcStatus=set_wakeup();
    11d4:	0e 94 78 34 	call	0x68f0	; 0x68f0 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    11d8:	81 11       	cpse	r24, r1
    11da:	36 cf       	rjmp	.-404    	; 0x1048 <MAINPG_start+0x34>
    11dc:	cb e0       	ldi	r28, 0x0B	; 11
    11de:	3c cf       	rjmp	.-392    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    11e0:	6f e9       	ldi	r22, 0x9F	; 159
    11e2:	73 e0       	ldi	r23, 0x03	; 3
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				MRPP_init_group(cols, N_COLLECTIONS);
    11ea:	67 e0       	ldi	r22, 0x07	; 7
    11ec:	80 ed       	ldi	r24, 0xD0	; 208
    11ee:	9e e0       	ldi	r25, 0x0E	; 14
    11f0:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
    11f4:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    11f6:	30 cf       	rjmp	.-416    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    11f8:	0e 94 69 34 	call	0x68d2	; 0x68d2 <LM_is_free>
    11fc:	88 23       	and	r24, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__stack+0x103>
    1200:	2b cf       	rjmp	.-426    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    1202:	60 eb       	ldi	r22, 0xB0	; 176
    1204:	73 e0       	ldi	r23, 0x03	; 3
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				lmStatus=send_header();
    120c:	0e 94 b0 2b 	call	0x5760	; 0x5760 <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1210:	4c e0       	ldi	r20, 0x0C	; 12
    1212:	6d e0       	ldi	r22, 0x0D	; 13
    1214:	0e 94 85 31 	call	0x630a	; 0x630a <decode_header_tail_response>
    1218:	c8 2f       	mov	r28, r24
			break;
    121a:	1e cf       	rjmp	.-452    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    121c:	0e 94 b9 19 	call	0x3372	; 0x3372 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1220:	6e e0       	ldi	r22, 0x0E	; 14
    1222:	0e 94 7e 32 	call	0x64fc	; 0x64fc <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    1226:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1228:	c8 2f       	mov	r28, r24
			break;
    122a:	16 cf       	rjmp	.-468    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    122c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1230:	6f e0       	ldi	r22, 0x0F	; 15
    1232:	0e 94 7e 32 	call	0x64fc	; 0x64fc <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    1236:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1238:	c8 2f       	mov	r28, r24
			break;
    123a:	0e cf       	rjmp	.-484    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    123c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1240:	60 e1       	ldi	r22, 0x10	; 16
    1242:	0e 94 7e 32 	call	0x64fc	; 0x64fc <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    1246:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1248:	c8 2f       	mov	r28, r24
			break;
    124a:	06 cf       	rjmp	.-500    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    124c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1250:	62 e1       	ldi	r22, 0x12	; 18
    1252:	0e 94 7e 32 	call	0x64fc	; 0x64fc <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    1256:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1258:	c8 2f       	mov	r28, r24
			break;
    125a:	fe ce       	rjmp	.-516    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    125c:	83 e9       	ldi	r24, 0x93	; 147
    125e:	9f e0       	ldi	r25, 0x0F	; 15
    1260:	0e 94 83 30 	call	0x6106	; 0x6106 <MRPP_is_body_package_ready>
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <__stack+0x16b>
    1268:	f1 ce       	rjmp	.-542    	; 0x104c <MAINPG_start+0x38>
    126a:	0e 94 69 34 	call	0x68d2	; 0x68d2 <LM_is_free>
    126e:	88 23       	and	r24, r24
    1270:	09 f4       	brne	.+2      	; 0x1274 <__stack+0x175>
    1272:	ee ce       	rjmp	.-548    	; 0x1050 <MAINPG_start+0x3c>
					lmStatus=send_body(bodyIndex);
    1274:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    1278:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    127c:	0e 94 90 2b 	call	0x5720	; 0x5720 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    1280:	4d 2f       	mov	r20, r29
    1282:	68 2f       	mov	r22, r24
    1284:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    1288:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    128c:	0e 94 39 30 	call	0x6072	; 0x6072 <decode_body_response>
    1290:	c8 2f       	mov	r28, r24
    1292:	e2 ce       	rjmp	.-572    	; 0x1058 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    1294:	0e 94 6e 34 	call	0x68dc	; 0x68dc <MRPP_all_body_package_sent>
    1298:	88 23       	and	r24, r24
    129a:	09 f4       	brne	.+2      	; 0x129e <__stack+0x19f>
    129c:	db ce       	rjmp	.-586    	; 0x1054 <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    129e:	c3 e1       	ldi	r28, 0x13	; 19
    12a0:	db ce       	rjmp	.-586    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    12a2:	0e 94 69 34 	call	0x68d2	; 0x68d2 <LM_is_free>
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__stack+0x1ad>
    12aa:	d6 ce       	rjmp	.-596    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    12ac:	63 ec       	ldi	r22, 0xC3	; 195
    12ae:	73 e0       	ldi	r23, 0x03	; 3
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				lmStatus=send_tail();
    12b6:	0e 94 cf 2b 	call	0x579e	; 0x579e <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    12ba:	43 e1       	ldi	r20, 0x13	; 19
    12bc:	64 e1       	ldi	r22, 0x14	; 20
    12be:	0e 94 85 31 	call	0x630a	; 0x630a <decode_header_tail_response>
    12c2:	c8 2f       	mov	r28, r24
				
			break;
    12c4:	c9 ce       	rjmp	.-622    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    12c6:	64 ed       	ldi	r22, 0xD4	; 212
    12c8:	73 e0       	ldi	r23, 0x03	; 3
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				lmStatus=LM_put_to_sleep();
    12d0:	0e 94 14 33 	call	0x6628	; 0x6628 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	81 11       	cpse	r24, r1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	90 93 aa 0f 	sts	0x0FAA, r25	; 0x800faa <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0e 94 94 32 	call	0x6528	; 0x6528 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	0e 94 a8 32 	call	0x6550	; 0x6550 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	0e 94 b2 32 	call	0x6564	; 0x6564 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 9e 32 	call	0x653c	; 0x653c <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 bc 32 	call	0x6578	; 0x6578 <PM_HAL_LED_power>
				TC2_HAL_kill();
    12fc:	0e 94 50 34 	call	0x68a0	; 0x68a0 <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    1300:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    1302:	aa ce       	rjmp	.-684    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    1304:	67 ee       	ldi	r22, 0xE7	; 231
    1306:	73 e0       	ldi	r23, 0x03	; 3
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				PM_HAL_enter_power_down();
    130e:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    1312:	64 ef       	ldi	r22, 0xF4	; 244
    1314:	73 e0       	ldi	r23, 0x03	; 3
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				state=MAINPG_INIT_HW;
    131c:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    131e:	9c ce       	rjmp	.-712    	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    1320:	6a e0       	ldi	r22, 0x0A	; 10
    1322:	74 e0       	ldi	r23, 0x04	; 4
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				LED_conf_err();
    132a:	0e 94 9e 34 	call	0x693c	; 0x693c <LED_conf_err>
				print_debug("Conf err\n\r");
    132e:	6a e1       	ldi	r22, 0x1A	; 26
    1330:	74 e0       	ldi	r23, 0x04	; 4
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				state=MAINPG_END;
    1338:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    133a:	8e ce       	rjmp	.-740    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    133c:	65 e2       	ldi	r22, 0x25	; 37
    133e:	74 e0       	ldi	r23, 0x04	; 4
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				LED_fatal_err();
    1346:	0e 94 a2 34 	call	0x6944	; 0x6944 <LED_fatal_err>
				fromSleep=false;
    134a:	10 92 aa 0f 	sts	0x0FAA, r1	; 0x800faa <fromSleep>
				state=MAINPG_END;
    134e:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1350:	83 ce       	rjmp	.-762    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    1352:	66 e3       	ldi	r22, 0x36	; 54
    1354:	74 e0       	ldi	r23, 0x04	; 4
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 45 32 	call	0x648a	; 0x648a <send_msg>
				return;
			break;	
		}
	}
}
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	08 95       	ret

Disassembly of section .text.calc_crc8:

00005b04 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    5b04:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5b06:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    5b08:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    5b0a:	14 c0       	rjmp	.+40     	; 0x5b34 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    5b0c:	fa 01       	movw	r30, r20
    5b0e:	e3 0f       	add	r30, r19
    5b10:	f1 1d       	adc	r31, r1
    5b12:	90 81       	ld	r25, Z
    5b14:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    5b16:	28 e0       	ldi	r18, 0x08	; 8
    5b18:	0a c0       	rjmp	.+20     	; 0x5b2e <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    5b1a:	88 23       	and	r24, r24
    5b1c:	34 f4       	brge	.+12     	; 0x5b2a <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	88 0f       	add	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	91 e3       	ldi	r25, 0x31	; 49
    5b26:	89 27       	eor	r24, r25
    5b28:	01 c0       	rjmp	.+2      	; 0x5b2c <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    5b2a:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    5b2c:	21 50       	subi	r18, 0x01	; 1
    5b2e:	21 11       	cpse	r18, r1
    5b30:	f4 cf       	rjmp	.-24     	; 0x5b1a <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5b32:	3f 5f       	subi	r19, 0xFF	; 255
    5b34:	36 17       	cp	r19, r22
    5b36:	50 f3       	brcs	.-44     	; 0x5b0c <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    5b38:	08 95       	ret

Disassembly of section .text.get_decimal:

000038dc <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    38dc:	cf 92       	push	r12
    38de:	df 92       	push	r13
    38e0:	ef 92       	push	r14
    38e2:	ff 92       	push	r15
    38e4:	0f 93       	push	r16
    38e6:	1f 93       	push	r17
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    38ee:	10 e0       	ldi	r17, 0x00	; 0
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    38f2:	cc 0d       	add	r28, r12
    38f4:	dd 1d       	adc	r29, r13
    38f6:	88 81       	ld	r24, Y
    38f8:	8e 32       	cpi	r24, 0x2E	; 46
    38fa:	11 f4       	brne	.+4      	; 0x3900 <get_decimal+0x24>
			index=i+1;
    38fc:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    38fe:	0c c0       	rjmp	.+24     	; 0x3918 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3900:	1f 5f       	subi	r17, 0xFF	; 255
    3902:	c1 2f       	mov	r28, r17
    3904:	d0 e0       	ldi	r29, 0x00	; 0
    3906:	b6 01       	movw	r22, r12
    3908:	80 e8       	ldi	r24, 0x80	; 128
    390a:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	c8 17       	cp	r28, r24
    3912:	d9 07       	cpc	r29, r25
    3914:	70 f3       	brcs	.-36     	; 0x38f2 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    3916:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    3918:	11 23       	and	r17, r17
    391a:	71 f1       	breq	.+92     	; 0x3978 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    391c:	c1 0e       	add	r12, r17
    391e:	d1 1c       	adc	r13, r1
    3920:	80 e8       	ldi	r24, 0x80	; 128
    3922:	e8 2e       	mov	r14, r24
    3924:	8e 2d       	mov	r24, r14
    3926:	b6 01       	movw	r22, r12
    3928:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    392c:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    392e:	8e 2d       	mov	r24, r14
    3930:	b6 01       	movw	r22, r12
    3932:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
    3936:	8c 01       	movw	r16, r24
	float divisor=1;
    3938:	0f 2e       	mov	r0, r31
    393a:	c1 2c       	mov	r12, r1
    393c:	d1 2c       	mov	r13, r1
    393e:	f0 e8       	ldi	r31, 0x80	; 128
    3940:	ef 2e       	mov	r14, r31
    3942:	ff e3       	ldi	r31, 0x3F	; 63
    3944:	ff 2e       	mov	r15, r31
    3946:	f0 2d       	mov	r31, r0
	
	while(len>0){
    3948:	0b c0       	rjmp	.+22     	; 0x3960 <get_decimal+0x84>
		divisor*=10;
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e2       	ldi	r20, 0x20	; 32
    3950:	51 e4       	ldi	r21, 0x41	; 65
    3952:	c7 01       	movw	r24, r14
    3954:	b6 01       	movw	r22, r12
    3956:	0e 94 b2 34 	call	0x6964	; 0x6964 <__mulsf3>
    395a:	6b 01       	movw	r12, r22
    395c:	7c 01       	movw	r14, r24
		len--;
    395e:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    3960:	c1 11       	cpse	r28, r1
    3962:	f3 cf       	rjmp	.-26     	; 0x394a <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    3964:	b8 01       	movw	r22, r16
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0e 94 31 21 	call	0x4262	; 0x4262 <__floatunsisf>
    396e:	a7 01       	movw	r20, r14
    3970:	96 01       	movw	r18, r12
    3972:	0e 94 ae 34 	call	0x695c	; 0x695c <__divsf3>
    3976:	03 c0       	rjmp	.+6      	; 0x397e <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	df 90       	pop	r13
    398c:	cf 90       	pop	r12
    398e:	08 95       	ret

Disassembly of section .text.str2flaot:

00004f90 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    4f90:	cf 92       	push	r12
    4f92:	df 92       	push	r13
    4f94:	ef 92       	push	r14
    4f96:	ff 92       	push	r15
    4f98:	0f 93       	push	r16
    4f9a:	1f 93       	push	r17
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    4fa2:	bc 01       	movw	r22, r24
    4fa4:	80 e8       	ldi	r24, 0x80	; 128
    4fa6:	0e 94 b6 34 	call	0x696c	; 0x696c <atoi>
    4faa:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    4fac:	c8 01       	movw	r24, r16
    4fae:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <get_decimal>
    4fb2:	6b 01       	movw	r12, r22
    4fb4:	7c 01       	movw	r14, r24
	return intVal+deci;
    4fb6:	be 01       	movw	r22, r28
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	0e 94 31 21 	call	0x4262	; 0x4262 <__floatunsisf>
    4fc0:	9b 01       	movw	r18, r22
    4fc2:	ac 01       	movw	r20, r24
    4fc4:	c7 01       	movw	r24, r14
    4fc6:	b6 01       	movw	r22, r12
    4fc8:	0e 94 c1 33 	call	0x6782	; 0x6782 <__addsf3>
	
	
}
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	1f 91       	pop	r17
    4fd2:	0f 91       	pop	r16
    4fd4:	ff 90       	pop	r15
    4fd6:	ef 90       	pop	r14
    4fd8:	df 90       	pop	r13
    4fda:	cf 90       	pop	r12
    4fdc:	08 95       	ret

Disassembly of section .text.is_float:

00004c08 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    4c08:	ef 92       	push	r14
    4c0a:	ff 92       	push	r15
    4c0c:	0f 93       	push	r16
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4c16:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    4c18:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    4c1a:	0d c0       	rjmp	.+26     	; 0x4c36 <is_float+0x2e>
	{
		if(str[i]=='.'){
    4c1c:	ce 0d       	add	r28, r14
    4c1e:	df 1d       	adc	r29, r15
    4c20:	88 81       	ld	r24, Y
    4c22:	8e 32       	cpi	r24, 0x2E	; 46
    4c24:	21 f4       	brne	.+8      	; 0x4c2e <is_float+0x26>
			if (got_dot)
    4c26:	01 11       	cpse	r16, r1
    4c28:	11 c0       	rjmp	.+34     	; 0x4c4c <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    4c2a:	01 e0       	ldi	r16, 0x01	; 1
    4c2c:	03 c0       	rjmp	.+6      	; 0x4c34 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4c2e:	80 53       	subi	r24, 0x30	; 48
    4c30:	8a 30       	cpi	r24, 0x0A	; 10
    4c32:	70 f4       	brcc	.+28     	; 0x4c50 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4c34:	1f 5f       	subi	r17, 0xFF	; 255
    4c36:	c1 2f       	mov	r28, r17
    4c38:	d0 e0       	ldi	r29, 0x00	; 0
    4c3a:	b7 01       	movw	r22, r14
    4c3c:	80 e8       	ldi	r24, 0x80	; 128
    4c3e:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <strlen>
    4c42:	c8 17       	cp	r28, r24
    4c44:	d9 07       	cpc	r29, r25
    4c46:	50 f3       	brcs	.-44     	; 0x4c1c <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	03 c0       	rjmp	.+6      	; 0x4c52 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4c50:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006780 <__subsf3>:
    6780:	50 58       	subi	r21, 0x80	; 128

00006782 <__addsf3>:
    6782:	bb 27       	eor	r27, r27
    6784:	aa 27       	eor	r26, r26
    6786:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3x>
    678a:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000351a <__addsf3x>:
    351a:	11 c0       	rjmp	.+34     	; 0x353e <__addsf3x+0x24>
    351c:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_pscA>
    3520:	38 f0       	brcs	.+14     	; 0x3530 <__addsf3x+0x16>
    3522:	0e 94 ce 33 	call	0x679c	; 0x679c <__fp_pscB>
    3526:	20 f0       	brcs	.+8      	; 0x3530 <__addsf3x+0x16>
    3528:	39 f4       	brne	.+14     	; 0x3538 <__addsf3x+0x1e>
    352a:	9f 3f       	cpi	r25, 0xFF	; 255
    352c:	19 f4       	brne	.+6      	; 0x3534 <__addsf3x+0x1a>
    352e:	26 f4       	brtc	.+8      	; 0x3538 <__addsf3x+0x1e>
    3530:	0c 94 d8 34 	jmp	0x69b0	; 0x69b0 <__fp_nan>
    3534:	0e f4       	brtc	.+2      	; 0x3538 <__addsf3x+0x1e>
    3536:	e0 95       	com	r30
    3538:	e7 fb       	bst	r30, 7
    353a:	0c 94 39 34 	jmp	0x6872	; 0x6872 <__fp_inf>
    353e:	e9 2f       	mov	r30, r25
    3540:	0e 94 a7 2a 	call	0x554e	; 0x554e <__fp_split3>
    3544:	58 f3       	brcs	.-42     	; 0x351c <__addsf3x+0x2>
    3546:	ba 17       	cp	r27, r26
    3548:	62 07       	cpc	r22, r18
    354a:	73 07       	cpc	r23, r19
    354c:	84 07       	cpc	r24, r20
    354e:	95 07       	cpc	r25, r21
    3550:	20 f0       	brcs	.+8      	; 0x355a <__addsf3x+0x40>
    3552:	79 f4       	brne	.+30     	; 0x3572 <__addsf3x+0x58>
    3554:	a6 f5       	brtc	.+104    	; 0x35be <__addsf3x+0xa4>
    3556:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__fp_zero>
    355a:	0e f4       	brtc	.+2      	; 0x355e <__addsf3x+0x44>
    355c:	e0 95       	com	r30
    355e:	0b 2e       	mov	r0, r27
    3560:	ba 2f       	mov	r27, r26
    3562:	a0 2d       	mov	r26, r0
    3564:	0b 01       	movw	r0, r22
    3566:	b9 01       	movw	r22, r18
    3568:	90 01       	movw	r18, r0
    356a:	0c 01       	movw	r0, r24
    356c:	ca 01       	movw	r24, r20
    356e:	a0 01       	movw	r20, r0
    3570:	11 24       	eor	r1, r1
    3572:	ff 27       	eor	r31, r31
    3574:	59 1b       	sub	r21, r25
    3576:	99 f0       	breq	.+38     	; 0x359e <__addsf3x+0x84>
    3578:	59 3f       	cpi	r21, 0xF9	; 249
    357a:	50 f4       	brcc	.+20     	; 0x3590 <__addsf3x+0x76>
    357c:	50 3e       	cpi	r21, 0xE0	; 224
    357e:	68 f1       	brcs	.+90     	; 0x35da <__addsf3x+0xc0>
    3580:	1a 16       	cp	r1, r26
    3582:	f0 40       	sbci	r31, 0x00	; 0
    3584:	a2 2f       	mov	r26, r18
    3586:	23 2f       	mov	r18, r19
    3588:	34 2f       	mov	r19, r20
    358a:	44 27       	eor	r20, r20
    358c:	58 5f       	subi	r21, 0xF8	; 248
    358e:	f3 cf       	rjmp	.-26     	; 0x3576 <__addsf3x+0x5c>
    3590:	46 95       	lsr	r20
    3592:	37 95       	ror	r19
    3594:	27 95       	ror	r18
    3596:	a7 95       	ror	r26
    3598:	f0 40       	sbci	r31, 0x00	; 0
    359a:	53 95       	inc	r21
    359c:	c9 f7       	brne	.-14     	; 0x3590 <__addsf3x+0x76>
    359e:	7e f4       	brtc	.+30     	; 0x35be <__addsf3x+0xa4>
    35a0:	1f 16       	cp	r1, r31
    35a2:	ba 0b       	sbc	r27, r26
    35a4:	62 0b       	sbc	r22, r18
    35a6:	73 0b       	sbc	r23, r19
    35a8:	84 0b       	sbc	r24, r20
    35aa:	ba f0       	brmi	.+46     	; 0x35da <__addsf3x+0xc0>
    35ac:	91 50       	subi	r25, 0x01	; 1
    35ae:	a1 f0       	breq	.+40     	; 0x35d8 <__addsf3x+0xbe>
    35b0:	ff 0f       	add	r31, r31
    35b2:	bb 1f       	adc	r27, r27
    35b4:	66 1f       	adc	r22, r22
    35b6:	77 1f       	adc	r23, r23
    35b8:	88 1f       	adc	r24, r24
    35ba:	c2 f7       	brpl	.-16     	; 0x35ac <__addsf3x+0x92>
    35bc:	0e c0       	rjmp	.+28     	; 0x35da <__addsf3x+0xc0>
    35be:	ba 0f       	add	r27, r26
    35c0:	62 1f       	adc	r22, r18
    35c2:	73 1f       	adc	r23, r19
    35c4:	84 1f       	adc	r24, r20
    35c6:	48 f4       	brcc	.+18     	; 0x35da <__addsf3x+0xc0>
    35c8:	87 95       	ror	r24
    35ca:	77 95       	ror	r23
    35cc:	67 95       	ror	r22
    35ce:	b7 95       	ror	r27
    35d0:	f7 95       	ror	r31
    35d2:	9e 3f       	cpi	r25, 0xFE	; 254
    35d4:	08 f0       	brcs	.+2      	; 0x35d8 <__addsf3x+0xbe>
    35d6:	b0 cf       	rjmp	.-160    	; 0x3538 <__addsf3x+0x1e>
    35d8:	93 95       	inc	r25
    35da:	88 0f       	add	r24, r24
    35dc:	08 f0       	brcs	.+2      	; 0x35e0 <__addsf3x+0xc6>
    35de:	99 27       	eor	r25, r25
    35e0:	ee 0f       	add	r30, r30
    35e2:	97 95       	ror	r25
    35e4:	87 95       	ror	r24
    35e6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000695c <__divsf3>:
    695c:	0e 94 de 18 	call	0x31bc	; 0x31bc <__divsf3x>
    6960:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000031bc <__divsf3x>:
    31bc:	10 c0       	rjmp	.+32     	; 0x31de <__divsf3x+0x22>
    31be:	0e 94 ce 33 	call	0x679c	; 0x679c <__fp_pscB>
    31c2:	58 f0       	brcs	.+22     	; 0x31da <__divsf3x+0x1e>
    31c4:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_pscA>
    31c8:	40 f0       	brcs	.+16     	; 0x31da <__divsf3x+0x1e>
    31ca:	29 f4       	brne	.+10     	; 0x31d6 <__divsf3x+0x1a>
    31cc:	5f 3f       	cpi	r21, 0xFF	; 255
    31ce:	29 f0       	breq	.+10     	; 0x31da <__divsf3x+0x1e>
    31d0:	0c 94 39 34 	jmp	0x6872	; 0x6872 <__fp_inf>
    31d4:	51 11       	cpse	r21, r1
    31d6:	0c 94 d6 33 	jmp	0x67ac	; 0x67ac <__fp_szero>
    31da:	0c 94 d8 34 	jmp	0x69b0	; 0x69b0 <__fp_nan>
    31de:	0e 94 a7 2a 	call	0x554e	; 0x554e <__fp_split3>
    31e2:	68 f3       	brcs	.-38     	; 0x31be <__divsf3x+0x2>

000031e4 <__divsf3_pse>:
    31e4:	99 23       	and	r25, r25
    31e6:	b1 f3       	breq	.-20     	; 0x31d4 <__divsf3x+0x18>
    31e8:	55 23       	and	r21, r21
    31ea:	91 f3       	breq	.-28     	; 0x31d0 <__divsf3x+0x14>
    31ec:	95 1b       	sub	r25, r21
    31ee:	55 0b       	sbc	r21, r21
    31f0:	bb 27       	eor	r27, r27
    31f2:	aa 27       	eor	r26, r26
    31f4:	62 17       	cp	r22, r18
    31f6:	73 07       	cpc	r23, r19
    31f8:	84 07       	cpc	r24, r20
    31fa:	38 f0       	brcs	.+14     	; 0x320a <__divsf3_pse+0x26>
    31fc:	9f 5f       	subi	r25, 0xFF	; 255
    31fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3200:	22 0f       	add	r18, r18
    3202:	33 1f       	adc	r19, r19
    3204:	44 1f       	adc	r20, r20
    3206:	aa 1f       	adc	r26, r26
    3208:	a9 f3       	breq	.-22     	; 0x31f4 <__divsf3_pse+0x10>
    320a:	35 d0       	rcall	.+106    	; 0x3276 <__divsf3_pse+0x92>
    320c:	0e 2e       	mov	r0, r30
    320e:	3a f0       	brmi	.+14     	; 0x321e <__divsf3_pse+0x3a>
    3210:	e0 e8       	ldi	r30, 0x80	; 128
    3212:	32 d0       	rcall	.+100    	; 0x3278 <__divsf3_pse+0x94>
    3214:	91 50       	subi	r25, 0x01	; 1
    3216:	50 40       	sbci	r21, 0x00	; 0
    3218:	e6 95       	lsr	r30
    321a:	00 1c       	adc	r0, r0
    321c:	ca f7       	brpl	.-14     	; 0x3210 <__divsf3_pse+0x2c>
    321e:	2b d0       	rcall	.+86     	; 0x3276 <__divsf3_pse+0x92>
    3220:	fe 2f       	mov	r31, r30
    3222:	29 d0       	rcall	.+82     	; 0x3276 <__divsf3_pse+0x92>
    3224:	66 0f       	add	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	bb 1f       	adc	r27, r27
    322c:	26 17       	cp	r18, r22
    322e:	37 07       	cpc	r19, r23
    3230:	48 07       	cpc	r20, r24
    3232:	ab 07       	cpc	r26, r27
    3234:	b0 e8       	ldi	r27, 0x80	; 128
    3236:	09 f0       	breq	.+2      	; 0x323a <__divsf3_pse+0x56>
    3238:	bb 0b       	sbc	r27, r27
    323a:	80 2d       	mov	r24, r0
    323c:	bf 01       	movw	r22, r30
    323e:	ff 27       	eor	r31, r31
    3240:	93 58       	subi	r25, 0x83	; 131
    3242:	5f 4f       	sbci	r21, 0xFF	; 255
    3244:	3a f0       	brmi	.+14     	; 0x3254 <__divsf3_pse+0x70>
    3246:	9e 3f       	cpi	r25, 0xFE	; 254
    3248:	51 05       	cpc	r21, r1
    324a:	78 f0       	brcs	.+30     	; 0x326a <__divsf3_pse+0x86>
    324c:	0c 94 39 34 	jmp	0x6872	; 0x6872 <__fp_inf>
    3250:	0c 94 d6 33 	jmp	0x67ac	; 0x67ac <__fp_szero>
    3254:	5f 3f       	cpi	r21, 0xFF	; 255
    3256:	e4 f3       	brlt	.-8      	; 0x3250 <__divsf3_pse+0x6c>
    3258:	98 3e       	cpi	r25, 0xE8	; 232
    325a:	d4 f3       	brlt	.-12     	; 0x3250 <__divsf3_pse+0x6c>
    325c:	86 95       	lsr	r24
    325e:	77 95       	ror	r23
    3260:	67 95       	ror	r22
    3262:	b7 95       	ror	r27
    3264:	f7 95       	ror	r31
    3266:	9f 5f       	subi	r25, 0xFF	; 255
    3268:	c9 f7       	brne	.-14     	; 0x325c <__divsf3_pse+0x78>
    326a:	88 0f       	add	r24, r24
    326c:	91 1d       	adc	r25, r1
    326e:	96 95       	lsr	r25
    3270:	87 95       	ror	r24
    3272:	97 f9       	bld	r25, 7
    3274:	08 95       	ret
    3276:	e1 e0       	ldi	r30, 0x01	; 1
    3278:	66 0f       	add	r22, r22
    327a:	77 1f       	adc	r23, r23
    327c:	88 1f       	adc	r24, r24
    327e:	bb 1f       	adc	r27, r27
    3280:	62 17       	cp	r22, r18
    3282:	73 07       	cpc	r23, r19
    3284:	84 07       	cpc	r24, r20
    3286:	ba 07       	cpc	r27, r26
    3288:	20 f0       	brcs	.+8      	; 0x3292 <__divsf3_pse+0xae>
    328a:	62 1b       	sub	r22, r18
    328c:	73 0b       	sbc	r23, r19
    328e:	84 0b       	sbc	r24, r20
    3290:	ba 0b       	sbc	r27, r26
    3292:	ee 1f       	adc	r30, r30
    3294:	88 f7       	brcc	.-30     	; 0x3278 <__divsf3_pse+0x94>
    3296:	e0 95       	com	r30
    3298:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004a42 <__fixunssfsi>:
    4a42:	0e 94 af 2a 	call	0x555e	; 0x555e <__fp_splitA>
    4a46:	88 f0       	brcs	.+34     	; 0x4a6a <__fixunssfsi+0x28>
    4a48:	9f 57       	subi	r25, 0x7F	; 127
    4a4a:	98 f0       	brcs	.+38     	; 0x4a72 <__fixunssfsi+0x30>
    4a4c:	b9 2f       	mov	r27, r25
    4a4e:	99 27       	eor	r25, r25
    4a50:	b7 51       	subi	r27, 0x17	; 23
    4a52:	b0 f0       	brcs	.+44     	; 0x4a80 <__fixunssfsi+0x3e>
    4a54:	e1 f0       	breq	.+56     	; 0x4a8e <__fixunssfsi+0x4c>
    4a56:	66 0f       	add	r22, r22
    4a58:	77 1f       	adc	r23, r23
    4a5a:	88 1f       	adc	r24, r24
    4a5c:	99 1f       	adc	r25, r25
    4a5e:	1a f0       	brmi	.+6      	; 0x4a66 <__fixunssfsi+0x24>
    4a60:	ba 95       	dec	r27
    4a62:	c9 f7       	brne	.-14     	; 0x4a56 <__fixunssfsi+0x14>
    4a64:	14 c0       	rjmp	.+40     	; 0x4a8e <__fixunssfsi+0x4c>
    4a66:	b1 30       	cpi	r27, 0x01	; 1
    4a68:	91 f0       	breq	.+36     	; 0x4a8e <__fixunssfsi+0x4c>
    4a6a:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__fp_zero>
    4a6e:	b1 e0       	ldi	r27, 0x01	; 1
    4a70:	08 95       	ret
    4a72:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__fp_zero>
    4a76:	67 2f       	mov	r22, r23
    4a78:	78 2f       	mov	r23, r24
    4a7a:	88 27       	eor	r24, r24
    4a7c:	b8 5f       	subi	r27, 0xF8	; 248
    4a7e:	39 f0       	breq	.+14     	; 0x4a8e <__fixunssfsi+0x4c>
    4a80:	b9 3f       	cpi	r27, 0xF9	; 249
    4a82:	cc f3       	brlt	.-14     	; 0x4a76 <__fixunssfsi+0x34>
    4a84:	86 95       	lsr	r24
    4a86:	77 95       	ror	r23
    4a88:	67 95       	ror	r22
    4a8a:	b3 95       	inc	r27
    4a8c:	d9 f7       	brne	.-10     	; 0x4a84 <__fixunssfsi+0x42>
    4a8e:	3e f4       	brtc	.+14     	; 0x4a9e <__fixunssfsi+0x5c>
    4a90:	90 95       	com	r25
    4a92:	80 95       	com	r24
    4a94:	70 95       	com	r23
    4a96:	61 95       	neg	r22
    4a98:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a9e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004262 <__floatunsisf>:
    4262:	e8 94       	clt
    4264:	09 c0       	rjmp	.+18     	; 0x4278 <__floatsisf+0x12>

00004266 <__floatsisf>:
    4266:	97 fb       	bst	r25, 7
    4268:	3e f4       	brtc	.+14     	; 0x4278 <__floatsisf+0x12>
    426a:	90 95       	com	r25
    426c:	80 95       	com	r24
    426e:	70 95       	com	r23
    4270:	61 95       	neg	r22
    4272:	7f 4f       	sbci	r23, 0xFF	; 255
    4274:	8f 4f       	sbci	r24, 0xFF	; 255
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	99 23       	and	r25, r25
    427a:	a9 f0       	breq	.+42     	; 0x42a6 <__floatsisf+0x40>
    427c:	f9 2f       	mov	r31, r25
    427e:	96 e9       	ldi	r25, 0x96	; 150
    4280:	bb 27       	eor	r27, r27
    4282:	93 95       	inc	r25
    4284:	f6 95       	lsr	r31
    4286:	87 95       	ror	r24
    4288:	77 95       	ror	r23
    428a:	67 95       	ror	r22
    428c:	b7 95       	ror	r27
    428e:	f1 11       	cpse	r31, r1
    4290:	f8 cf       	rjmp	.-16     	; 0x4282 <__floatsisf+0x1c>
    4292:	fa f4       	brpl	.+62     	; 0x42d2 <__floatsisf+0x6c>
    4294:	bb 0f       	add	r27, r27
    4296:	11 f4       	brne	.+4      	; 0x429c <__floatsisf+0x36>
    4298:	60 ff       	sbrs	r22, 0
    429a:	1b c0       	rjmp	.+54     	; 0x42d2 <__floatsisf+0x6c>
    429c:	6f 5f       	subi	r22, 0xFF	; 255
    429e:	7f 4f       	sbci	r23, 0xFF	; 255
    42a0:	8f 4f       	sbci	r24, 0xFF	; 255
    42a2:	9f 4f       	sbci	r25, 0xFF	; 255
    42a4:	16 c0       	rjmp	.+44     	; 0x42d2 <__floatsisf+0x6c>
    42a6:	88 23       	and	r24, r24
    42a8:	11 f0       	breq	.+4      	; 0x42ae <__floatsisf+0x48>
    42aa:	96 e9       	ldi	r25, 0x96	; 150
    42ac:	11 c0       	rjmp	.+34     	; 0x42d0 <__floatsisf+0x6a>
    42ae:	77 23       	and	r23, r23
    42b0:	21 f0       	breq	.+8      	; 0x42ba <__floatsisf+0x54>
    42b2:	9e e8       	ldi	r25, 0x8E	; 142
    42b4:	87 2f       	mov	r24, r23
    42b6:	76 2f       	mov	r23, r22
    42b8:	05 c0       	rjmp	.+10     	; 0x42c4 <__floatsisf+0x5e>
    42ba:	66 23       	and	r22, r22
    42bc:	71 f0       	breq	.+28     	; 0x42da <__floatsisf+0x74>
    42be:	96 e8       	ldi	r25, 0x86	; 134
    42c0:	86 2f       	mov	r24, r22
    42c2:	70 e0       	ldi	r23, 0x00	; 0
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	2a f0       	brmi	.+10     	; 0x42d2 <__floatsisf+0x6c>
    42c8:	9a 95       	dec	r25
    42ca:	66 0f       	add	r22, r22
    42cc:	77 1f       	adc	r23, r23
    42ce:	88 1f       	adc	r24, r24
    42d0:	da f7       	brpl	.-10     	; 0x42c8 <__floatsisf+0x62>
    42d2:	88 0f       	add	r24, r24
    42d4:	96 95       	lsr	r25
    42d6:	87 95       	ror	r24
    42d8:	97 f9       	bld	r25, 7
    42da:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006872 <__fp_inf>:
    6872:	97 f9       	bld	r25, 7
    6874:	9f 67       	ori	r25, 0x7F	; 127
    6876:	80 e8       	ldi	r24, 0x80	; 128
    6878:	70 e0       	ldi	r23, 0x00	; 0
    687a:	60 e0       	ldi	r22, 0x00	; 0
    687c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000069b0 <__fp_nan>:
    69b0:	9f ef       	ldi	r25, 0xFF	; 255
    69b2:	80 ec       	ldi	r24, 0xC0	; 192
    69b4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000678e <__fp_pscA>:
    678e:	00 24       	eor	r0, r0
    6790:	0a 94       	dec	r0
    6792:	16 16       	cp	r1, r22
    6794:	17 06       	cpc	r1, r23
    6796:	18 06       	cpc	r1, r24
    6798:	09 06       	cpc	r0, r25
    679a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000679c <__fp_pscB>:
    679c:	00 24       	eor	r0, r0
    679e:	0a 94       	dec	r0
    67a0:	12 16       	cp	r1, r18
    67a2:	13 06       	cpc	r1, r19
    67a4:	14 06       	cpc	r1, r20
    67a6:	05 06       	cpc	r0, r21
    67a8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000061b0 <__fp_round>:
    61b0:	09 2e       	mov	r0, r25
    61b2:	03 94       	inc	r0
    61b4:	00 0c       	add	r0, r0
    61b6:	11 f4       	brne	.+4      	; 0x61bc <__fp_round+0xc>
    61b8:	88 23       	and	r24, r24
    61ba:	52 f0       	brmi	.+20     	; 0x61d0 <__fp_round+0x20>
    61bc:	bb 0f       	add	r27, r27
    61be:	40 f4       	brcc	.+16     	; 0x61d0 <__fp_round+0x20>
    61c0:	bf 2b       	or	r27, r31
    61c2:	11 f4       	brne	.+4      	; 0x61c8 <__fp_round+0x18>
    61c4:	60 ff       	sbrs	r22, 0
    61c6:	04 c0       	rjmp	.+8      	; 0x61d0 <__fp_round+0x20>
    61c8:	6f 5f       	subi	r22, 0xFF	; 255
    61ca:	7f 4f       	sbci	r23, 0xFF	; 255
    61cc:	8f 4f       	sbci	r24, 0xFF	; 255
    61ce:	9f 4f       	sbci	r25, 0xFF	; 255
    61d0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000554e <__fp_split3>:
    554e:	57 fd       	sbrc	r21, 7
    5550:	90 58       	subi	r25, 0x80	; 128
    5552:	44 0f       	add	r20, r20
    5554:	55 1f       	adc	r21, r21
    5556:	59 f0       	breq	.+22     	; 0x556e <__fp_splitA+0x10>
    5558:	5f 3f       	cpi	r21, 0xFF	; 255
    555a:	71 f0       	breq	.+28     	; 0x5578 <__fp_splitA+0x1a>
    555c:	47 95       	ror	r20

0000555e <__fp_splitA>:
    555e:	88 0f       	add	r24, r24
    5560:	97 fb       	bst	r25, 7
    5562:	99 1f       	adc	r25, r25
    5564:	61 f0       	breq	.+24     	; 0x557e <__fp_splitA+0x20>
    5566:	9f 3f       	cpi	r25, 0xFF	; 255
    5568:	79 f0       	breq	.+30     	; 0x5588 <__fp_splitA+0x2a>
    556a:	87 95       	ror	r24
    556c:	08 95       	ret
    556e:	12 16       	cp	r1, r18
    5570:	13 06       	cpc	r1, r19
    5572:	14 06       	cpc	r1, r20
    5574:	55 1f       	adc	r21, r21
    5576:	f2 cf       	rjmp	.-28     	; 0x555c <__fp_split3+0xe>
    5578:	46 95       	lsr	r20
    557a:	f1 df       	rcall	.-30     	; 0x555e <__fp_splitA>
    557c:	08 c0       	rjmp	.+16     	; 0x558e <__fp_splitA+0x30>
    557e:	16 16       	cp	r1, r22
    5580:	17 06       	cpc	r1, r23
    5582:	18 06       	cpc	r1, r24
    5584:	99 1f       	adc	r25, r25
    5586:	f1 cf       	rjmp	.-30     	; 0x556a <__fp_splitA+0xc>
    5588:	86 95       	lsr	r24
    558a:	71 05       	cpc	r23, r1
    558c:	61 05       	cpc	r22, r1
    558e:	08 94       	sec
    5590:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000067aa <__fp_zero>:
    67aa:	e8 94       	clt

000067ac <__fp_szero>:
    67ac:	bb 27       	eor	r27, r27
    67ae:	66 27       	eor	r22, r22
    67b0:	77 27       	eor	r23, r23
    67b2:	cb 01       	movw	r24, r22
    67b4:	97 f9       	bld	r25, 7
    67b6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006964 <__mulsf3>:
    6964:	0e 94 23 1a 	call	0x3446	; 0x3446 <__mulsf3x>
    6968:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003446 <__mulsf3x>:
    3446:	0f c0       	rjmp	.+30     	; 0x3466 <__mulsf3x+0x20>
    3448:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_pscA>
    344c:	38 f0       	brcs	.+14     	; 0x345c <__mulsf3x+0x16>
    344e:	0e 94 ce 33 	call	0x679c	; 0x679c <__fp_pscB>
    3452:	20 f0       	brcs	.+8      	; 0x345c <__mulsf3x+0x16>
    3454:	95 23       	and	r25, r21
    3456:	11 f0       	breq	.+4      	; 0x345c <__mulsf3x+0x16>
    3458:	0c 94 39 34 	jmp	0x6872	; 0x6872 <__fp_inf>
    345c:	0c 94 d8 34 	jmp	0x69b0	; 0x69b0 <__fp_nan>
    3460:	11 24       	eor	r1, r1
    3462:	0c 94 d6 33 	jmp	0x67ac	; 0x67ac <__fp_szero>
    3466:	0e 94 a7 2a 	call	0x554e	; 0x554e <__fp_split3>
    346a:	70 f3       	brcs	.-36     	; 0x3448 <__mulsf3x+0x2>

0000346c <__mulsf3_pse>:
    346c:	95 9f       	mul	r25, r21
    346e:	c1 f3       	breq	.-16     	; 0x3460 <__mulsf3x+0x1a>
    3470:	95 0f       	add	r25, r21
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	55 1f       	adc	r21, r21
    3476:	62 9f       	mul	r22, r18
    3478:	f0 01       	movw	r30, r0
    347a:	72 9f       	mul	r23, r18
    347c:	bb 27       	eor	r27, r27
    347e:	f0 0d       	add	r31, r0
    3480:	b1 1d       	adc	r27, r1
    3482:	63 9f       	mul	r22, r19
    3484:	aa 27       	eor	r26, r26
    3486:	f0 0d       	add	r31, r0
    3488:	b1 1d       	adc	r27, r1
    348a:	aa 1f       	adc	r26, r26
    348c:	64 9f       	mul	r22, r20
    348e:	66 27       	eor	r22, r22
    3490:	b0 0d       	add	r27, r0
    3492:	a1 1d       	adc	r26, r1
    3494:	66 1f       	adc	r22, r22
    3496:	82 9f       	mul	r24, r18
    3498:	22 27       	eor	r18, r18
    349a:	b0 0d       	add	r27, r0
    349c:	a1 1d       	adc	r26, r1
    349e:	62 1f       	adc	r22, r18
    34a0:	73 9f       	mul	r23, r19
    34a2:	b0 0d       	add	r27, r0
    34a4:	a1 1d       	adc	r26, r1
    34a6:	62 1f       	adc	r22, r18
    34a8:	83 9f       	mul	r24, r19
    34aa:	a0 0d       	add	r26, r0
    34ac:	61 1d       	adc	r22, r1
    34ae:	22 1f       	adc	r18, r18
    34b0:	74 9f       	mul	r23, r20
    34b2:	33 27       	eor	r19, r19
    34b4:	a0 0d       	add	r26, r0
    34b6:	61 1d       	adc	r22, r1
    34b8:	23 1f       	adc	r18, r19
    34ba:	84 9f       	mul	r24, r20
    34bc:	60 0d       	add	r22, r0
    34be:	21 1d       	adc	r18, r1
    34c0:	82 2f       	mov	r24, r18
    34c2:	76 2f       	mov	r23, r22
    34c4:	6a 2f       	mov	r22, r26
    34c6:	11 24       	eor	r1, r1
    34c8:	9f 57       	subi	r25, 0x7F	; 127
    34ca:	50 40       	sbci	r21, 0x00	; 0
    34cc:	9a f0       	brmi	.+38     	; 0x34f4 <__mulsf3_pse+0x88>
    34ce:	f1 f0       	breq	.+60     	; 0x350c <__mulsf3_pse+0xa0>
    34d0:	88 23       	and	r24, r24
    34d2:	4a f0       	brmi	.+18     	; 0x34e6 <__mulsf3_pse+0x7a>
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	bb 1f       	adc	r27, r27
    34da:	66 1f       	adc	r22, r22
    34dc:	77 1f       	adc	r23, r23
    34de:	88 1f       	adc	r24, r24
    34e0:	91 50       	subi	r25, 0x01	; 1
    34e2:	50 40       	sbci	r21, 0x00	; 0
    34e4:	a9 f7       	brne	.-22     	; 0x34d0 <__mulsf3_pse+0x64>
    34e6:	9e 3f       	cpi	r25, 0xFE	; 254
    34e8:	51 05       	cpc	r21, r1
    34ea:	80 f0       	brcs	.+32     	; 0x350c <__mulsf3_pse+0xa0>
    34ec:	0c 94 39 34 	jmp	0x6872	; 0x6872 <__fp_inf>
    34f0:	0c 94 d6 33 	jmp	0x67ac	; 0x67ac <__fp_szero>
    34f4:	5f 3f       	cpi	r21, 0xFF	; 255
    34f6:	e4 f3       	brlt	.-8      	; 0x34f0 <__mulsf3_pse+0x84>
    34f8:	98 3e       	cpi	r25, 0xE8	; 232
    34fa:	d4 f3       	brlt	.-12     	; 0x34f0 <__mulsf3_pse+0x84>
    34fc:	86 95       	lsr	r24
    34fe:	77 95       	ror	r23
    3500:	67 95       	ror	r22
    3502:	b7 95       	ror	r27
    3504:	f7 95       	ror	r31
    3506:	e7 95       	ror	r30
    3508:	9f 5f       	subi	r25, 0xFF	; 255
    350a:	c1 f7       	brne	.-16     	; 0x34fc <__mulsf3_pse+0x90>
    350c:	fe 2b       	or	r31, r30
    350e:	88 0f       	add	r24, r24
    3510:	91 1d       	adc	r25, r1
    3512:	96 95       	lsr	r25
    3514:	87 95       	ror	r24
    3516:	97 f9       	bld	r25, 7
    3518:	08 95       	ret

Disassembly of section .text.avrlibc:

000008d0 <vfprintf>:
     8d0:	a4 e1       	ldi	r26, 0x14	; 20
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ee e6       	ldi	r30, 0x6E	; 110
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	0c 94 4b 2d 	jmp	0x5a96	; 0x5a96 <__prologue_saves__>
     8dc:	6c 01       	movw	r12, r24
     8de:	1a 01       	movw	r2, r20
     8e0:	46 2e       	mov	r4, r22
     8e2:	59 01       	movw	r10, r18
     8e4:	fc 01       	movw	r30, r24
     8e6:	10 86       	std	Z+8, r1	; 0x08
     8e8:	17 82       	std	Z+7, r1	; 0x07
     8ea:	84 81       	ldd	r24, Z+4	; 0x04
     8ec:	81 ff       	sbrs	r24, 1
     8ee:	62 c3       	rjmp	.+1732   	; 0xfb4 <vfprintf+0x6e4>
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	9d 87       	std	Y+13, r25	; 0x0d
     8f6:	8c 87       	std	Y+12, r24	; 0x0c
     8f8:	a0 e8       	ldi	r26, 0x80	; 128
     8fa:	8a 8b       	std	Y+18, r24	; 0x12
     8fc:	9b 8b       	std	Y+19, r25	; 0x13
     8fe:	ac 8b       	std	Y+20, r26	; 0x14
     900:	f1 01       	movw	r30, r2
     902:	84 91       	lpm	r24, Z
     904:	47 fc       	sbrc	r4, 7
     906:	80 81       	ld	r24, Z
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <vfprintf+0x3e>
     90c:	4f c3       	rjmp	.+1694   	; 0xfac <vfprintf+0x6dc>
     90e:	44 2d       	mov	r20, r4
     910:	91 01       	movw	r18, r2
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	85 32       	cpi	r24, 0x25	; 37
     91a:	19 f0       	breq	.+6      	; 0x922 <vfprintf+0x52>
     91c:	19 01       	movw	r2, r18
     91e:	44 2e       	mov	r4, r20
     920:	0a c0       	rjmp	.+20     	; 0x936 <vfprintf+0x66>
     922:	f9 01       	movw	r30, r18
     924:	84 91       	lpm	r24, Z
     926:	47 fd       	sbrc	r20, 7
     928:	80 81       	ld	r24, Z
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	29 0e       	add	r2, r25
     92e:	31 1c       	adc	r3, r1
     930:	41 1c       	adc	r4, r1
     932:	85 32       	cpi	r24, 0x25	; 37
     934:	49 f4       	brne	.+18     	; 0x948 <vfprintf+0x78>
     936:	b6 01       	movw	r22, r12
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     93e:	bf 86       	std	Y+15, r11	; 0x0f
     940:	ae 86       	std	Y+14, r10	; 0x0e
     942:	ae 84       	ldd	r10, Y+14	; 0x0e
     944:	bf 84       	ldd	r11, Y+15	; 0x0f
     946:	dc cf       	rjmp	.-72     	; 0x900 <vfprintf+0x30>
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	f1 2c       	mov	r15, r1
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	00 32       	cpi	r16, 0x20	; 32
     950:	a0 f4       	brcc	.+40     	; 0x97a <vfprintf+0xaa>
     952:	8b 32       	cpi	r24, 0x2B	; 43
     954:	69 f0       	breq	.+26     	; 0x970 <vfprintf+0xa0>
     956:	30 f4       	brcc	.+12     	; 0x964 <vfprintf+0x94>
     958:	80 32       	cpi	r24, 0x20	; 32
     95a:	59 f0       	breq	.+22     	; 0x972 <vfprintf+0xa2>
     95c:	83 32       	cpi	r24, 0x23	; 35
     95e:	69 f4       	brne	.+26     	; 0x97a <vfprintf+0xaa>
     960:	00 61       	ori	r16, 0x10	; 16
     962:	2c c0       	rjmp	.+88     	; 0x9bc <vfprintf+0xec>
     964:	8d 32       	cpi	r24, 0x2D	; 45
     966:	39 f0       	breq	.+14     	; 0x976 <vfprintf+0xa6>
     968:	80 33       	cpi	r24, 0x30	; 48
     96a:	39 f4       	brne	.+14     	; 0x97a <vfprintf+0xaa>
     96c:	01 60       	ori	r16, 0x01	; 1
     96e:	26 c0       	rjmp	.+76     	; 0x9bc <vfprintf+0xec>
     970:	02 60       	ori	r16, 0x02	; 2
     972:	04 60       	ori	r16, 0x04	; 4
     974:	23 c0       	rjmp	.+70     	; 0x9bc <vfprintf+0xec>
     976:	08 60       	ori	r16, 0x08	; 8
     978:	21 c0       	rjmp	.+66     	; 0x9bc <vfprintf+0xec>
     97a:	07 fd       	sbrc	r16, 7
     97c:	29 c0       	rjmp	.+82     	; 0x9d0 <vfprintf+0x100>
     97e:	90 ed       	ldi	r25, 0xD0	; 208
     980:	98 0f       	add	r25, r24
     982:	9a 30       	cpi	r25, 0x0A	; 10
     984:	78 f4       	brcc	.+30     	; 0x9a4 <vfprintf+0xd4>
     986:	06 ff       	sbrs	r16, 6
     988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0xc6>
     98a:	aa e0       	ldi	r26, 0x0A	; 10
     98c:	1a 9f       	mul	r17, r26
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	19 2f       	mov	r17, r25
     994:	13 c0       	rjmp	.+38     	; 0x9bc <vfprintf+0xec>
     996:	ea e0       	ldi	r30, 0x0A	; 10
     998:	fe 9e       	mul	r15, r30
     99a:	90 0d       	add	r25, r0
     99c:	11 24       	eor	r1, r1
     99e:	f9 2e       	mov	r15, r25
     9a0:	00 62       	ori	r16, 0x20	; 32
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <vfprintf+0xec>
     9a4:	8e 32       	cpi	r24, 0x2E	; 46
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0xe0>
     9a8:	06 fd       	sbrc	r16, 6
     9aa:	00 c3       	rjmp	.+1536   	; 0xfac <vfprintf+0x6dc>
     9ac:	00 64       	ori	r16, 0x40	; 64
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <vfprintf+0xec>
     9b0:	8c 36       	cpi	r24, 0x6C	; 108
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <vfprintf+0xe8>
     9b4:	00 68       	ori	r16, 0x80	; 128
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0xec>
     9b8:	88 36       	cpi	r24, 0x68	; 104
     9ba:	51 f4       	brne	.+20     	; 0x9d0 <vfprintf+0x100>
     9bc:	f1 01       	movw	r30, r2
     9be:	84 91       	lpm	r24, Z
     9c0:	47 fc       	sbrc	r4, 7
     9c2:	80 81       	ld	r24, Z
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	2f 1a       	sub	r2, r31
     9c8:	3f 0a       	sbc	r3, r31
     9ca:	4f 0a       	sbc	r4, r31
     9cc:	81 11       	cpse	r24, r1
     9ce:	bf cf       	rjmp	.-130    	; 0x94e <vfprintf+0x7e>
     9d0:	9b eb       	ldi	r25, 0xBB	; 187
     9d2:	98 0f       	add	r25, r24
     9d4:	93 30       	cpi	r25, 0x03	; 3
     9d6:	18 f4       	brcc	.+6      	; 0x9de <vfprintf+0x10e>
     9d8:	00 61       	ori	r16, 0x10	; 16
     9da:	80 5e       	subi	r24, 0xE0	; 224
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <vfprintf+0x11a>
     9de:	9b e9       	ldi	r25, 0x9B	; 155
     9e0:	98 0f       	add	r25, r24
     9e2:	93 30       	cpi	r25, 0x03	; 3
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <vfprintf+0x118>
     9e6:	66 c1       	rjmp	.+716    	; 0xcb4 <vfprintf+0x3e4>
     9e8:	0f 7e       	andi	r16, 0xEF	; 239
     9ea:	06 ff       	sbrs	r16, 6
     9ec:	16 e0       	ldi	r17, 0x06	; 6
     9ee:	0f 73       	andi	r16, 0x3F	; 63
     9f0:	70 2e       	mov	r7, r16
     9f2:	85 36       	cpi	r24, 0x65	; 101
     9f4:	21 f4       	brne	.+8      	; 0x9fe <vfprintf+0x12e>
     9f6:	20 2f       	mov	r18, r16
     9f8:	20 64       	ori	r18, 0x40	; 64
     9fa:	72 2e       	mov	r7, r18
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <vfprintf+0x13e>
     9fe:	86 36       	cpi	r24, 0x66	; 102
     a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0x13a>
     a02:	80 2f       	mov	r24, r16
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	78 2e       	mov	r7, r24
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x13e>
     a0a:	11 11       	cpse	r17, r1
     a0c:	11 50       	subi	r17, 0x01	; 1
     a0e:	77 fe       	sbrs	r7, 7
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <vfprintf+0x150>
     a12:	1c 33       	cpi	r17, 0x3C	; 60
     a14:	50 f4       	brcc	.+20     	; 0xa2a <vfprintf+0x15a>
     a16:	ee 24       	eor	r14, r14
     a18:	e3 94       	inc	r14
     a1a:	e1 0e       	add	r14, r17
     a1c:	27 e0       	ldi	r18, 0x07	; 7
     a1e:	0b c0       	rjmp	.+22     	; 0xa36 <vfprintf+0x166>
     a20:	18 30       	cpi	r17, 0x08	; 8
     a22:	38 f0       	brcs	.+14     	; 0xa32 <vfprintf+0x162>
     a24:	27 e0       	ldi	r18, 0x07	; 7
     a26:	17 e0       	ldi	r17, 0x07	; 7
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <vfprintf+0x164>
     a2a:	27 e0       	ldi	r18, 0x07	; 7
     a2c:	6c e3       	ldi	r22, 0x3C	; 60
     a2e:	e6 2e       	mov	r14, r22
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <vfprintf+0x166>
     a32:	21 2f       	mov	r18, r17
     a34:	e1 2c       	mov	r14, r1
     a36:	f5 01       	movw	r30, r10
     a38:	34 96       	adiw	r30, 0x04	; 4
     a3a:	ff 87       	std	Y+15, r31	; 0x0f
     a3c:	ee 87       	std	Y+14, r30	; 0x0e
     a3e:	f5 01       	movw	r30, r10
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	0e 2d       	mov	r16, r14
     a4a:	ae 01       	movw	r20, r28
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__ftoa_engine>
     a54:	5c 01       	movw	r10, r24
     a56:	59 80       	ldd	r5, Y+1	; 0x01
     a58:	50 fe       	sbrs	r5, 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x190>
     a5c:	53 fe       	sbrs	r5, 3
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0x19c>
     a60:	71 fc       	sbrc	r7, 1
     a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x1a0>
     a64:	72 fe       	sbrs	r7, 2
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x1a4>
     a68:	00 e2       	ldi	r16, 0x20	; 32
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <vfprintf+0x1a6>
     a6c:	0d e2       	ldi	r16, 0x2D	; 45
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x1a6>
     a70:	0b e2       	ldi	r16, 0x2B	; 43
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <vfprintf+0x1a6>
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	85 2d       	mov	r24, r5
     a78:	8c 70       	andi	r24, 0x0C	; 12
     a7a:	19 f0       	breq	.+6      	; 0xa82 <vfprintf+0x1b2>
     a7c:	01 11       	cpse	r16, r1
     a7e:	73 c2       	rjmp	.+1254   	; 0xf66 <vfprintf+0x696>
     a80:	be c2       	rjmp	.+1404   	; 0xffe <vfprintf+0x72e>
     a82:	77 fe       	sbrs	r7, 7
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <vfprintf+0x1d4>
     a86:	ea 0c       	add	r14, r10
     a88:	54 fe       	sbrs	r5, 4
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <vfprintf+0x1c4>
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	81 33       	cpi	r24, 0x31	; 49
     a90:	09 f4       	brne	.+2      	; 0xa94 <vfprintf+0x1c4>
     a92:	ea 94       	dec	r14
     a94:	1e 14       	cp	r1, r14
     a96:	74 f5       	brge	.+92     	; 0xaf4 <vfprintf+0x224>
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	2e 15       	cp	r18, r14
     a9c:	78 f5       	brcc	.+94     	; 0xafc <vfprintf+0x22c>
     a9e:	38 e0       	ldi	r19, 0x08	; 8
     aa0:	e3 2e       	mov	r14, r19
     aa2:	2c c0       	rjmp	.+88     	; 0xafc <vfprintf+0x22c>
     aa4:	76 fc       	sbrc	r7, 6
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <vfprintf+0x22c>
     aa8:	81 2f       	mov	r24, r17
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	8a 15       	cp	r24, r10
     aae:	9b 05       	cpc	r25, r11
     ab0:	9c f0       	brlt	.+38     	; 0xad8 <vfprintf+0x208>
     ab2:	8c ef       	ldi	r24, 0xFC	; 252
     ab4:	a8 16       	cp	r10, r24
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	b8 06       	cpc	r11, r24
     aba:	74 f0       	brlt	.+28     	; 0xad8 <vfprintf+0x208>
     abc:	97 2d       	mov	r25, r7
     abe:	90 68       	ori	r25, 0x80	; 128
     ac0:	79 2e       	mov	r7, r25
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <vfprintf+0x208>
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ec 0f       	add	r30, r28
     aca:	fd 1f       	adc	r31, r29
     acc:	e1 0f       	add	r30, r17
     ace:	f1 1d       	adc	r31, r1
     ad0:	80 81       	ld	r24, Z
     ad2:	80 33       	cpi	r24, 0x30	; 48
     ad4:	19 f4       	brne	.+6      	; 0xadc <vfprintf+0x20c>
     ad6:	11 50       	subi	r17, 0x01	; 1
     ad8:	11 11       	cpse	r17, r1
     ada:	f4 cf       	rjmp	.-24     	; 0xac4 <vfprintf+0x1f4>
     adc:	77 fe       	sbrs	r7, 7
     ade:	0e c0       	rjmp	.+28     	; 0xafc <vfprintf+0x22c>
     ae0:	ee 24       	eor	r14, r14
     ae2:	e3 94       	inc	r14
     ae4:	e1 0e       	add	r14, r17
     ae6:	81 2f       	mov	r24, r17
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a8 16       	cp	r10, r24
     aec:	b9 06       	cpc	r11, r25
     aee:	2c f4       	brge	.+10     	; 0xafa <vfprintf+0x22a>
     af0:	1a 19       	sub	r17, r10
     af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x22c>
     af4:	ee 24       	eor	r14, r14
     af6:	e3 94       	inc	r14
     af8:	01 c0       	rjmp	.+2      	; 0xafc <vfprintf+0x22c>
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	77 fe       	sbrs	r7, 7
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <vfprintf+0x23c>
     b00:	1a 14       	cp	r1, r10
     b02:	1b 04       	cpc	r1, r11
     b04:	34 f4       	brge	.+12     	; 0xb12 <vfprintf+0x242>
     b06:	c5 01       	movw	r24, r10
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <vfprintf+0x246>
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x246>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	01 11       	cpse	r16, r1
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	11 23       	and	r17, r17
     b1c:	31 f0       	breq	.+12     	; 0xb2a <vfprintf+0x25a>
     b1e:	21 2f       	mov	r18, r17
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	2f 2d       	mov	r18, r15
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	14 f4       	brge	.+4      	; 0xb38 <vfprintf+0x268>
     b34:	f8 1a       	sub	r15, r24
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <vfprintf+0x26a>
     b38:	f1 2c       	mov	r15, r1
     b3a:	87 2d       	mov	r24, r7
     b3c:	89 70       	andi	r24, 0x09	; 9
     b3e:	49 f4       	brne	.+18     	; 0xb52 <vfprintf+0x282>
     b40:	ff 20       	and	r15, r15
     b42:	39 f0       	breq	.+14     	; 0xb52 <vfprintf+0x282>
     b44:	b6 01       	movw	r22, r12
     b46:	80 e2       	ldi	r24, 0x20	; 32
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     b4e:	fa 94       	dec	r15
     b50:	f7 cf       	rjmp	.-18     	; 0xb40 <vfprintf+0x270>
     b52:	00 23       	and	r16, r16
     b54:	29 f0       	breq	.+10     	; 0xb60 <vfprintf+0x290>
     b56:	b6 01       	movw	r22, r12
     b58:	80 2f       	mov	r24, r16
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     b60:	73 fc       	sbrc	r7, 3
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <vfprintf+0x2a6>
     b64:	ff 20       	and	r15, r15
     b66:	39 f0       	breq	.+14     	; 0xb76 <vfprintf+0x2a6>
     b68:	b6 01       	movw	r22, r12
     b6a:	80 e3       	ldi	r24, 0x30	; 48
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     b72:	fa 94       	dec	r15
     b74:	f7 cf       	rjmp	.-18     	; 0xb64 <vfprintf+0x294>
     b76:	77 fe       	sbrs	r7, 7
     b78:	49 c0       	rjmp	.+146    	; 0xc0c <vfprintf+0x33c>
     b7a:	35 01       	movw	r6, r10
     b7c:	b7 fe       	sbrs	r11, 7
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x2b4>
     b80:	61 2c       	mov	r6, r1
     b82:	71 2c       	mov	r7, r1
     b84:	c5 01       	movw	r24, r10
     b86:	86 19       	sub	r24, r6
     b88:	97 09       	sbc	r25, r7
     b8a:	88 24       	eor	r8, r8
     b8c:	83 94       	inc	r8
     b8e:	91 2c       	mov	r9, r1
     b90:	8c 0e       	add	r8, r28
     b92:	9d 1e       	adc	r9, r29
     b94:	88 0e       	add	r8, r24
     b96:	99 1e       	adc	r9, r25
     b98:	f5 01       	movw	r30, r10
     b9a:	ee 19       	sub	r30, r14
     b9c:	f1 09       	sbc	r31, r1
     b9e:	f9 8b       	std	Y+17, r31	; 0x11
     ba0:	e8 8b       	std	Y+16, r30	; 0x10
     ba2:	01 2f       	mov	r16, r17
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	11 95       	neg	r17
     ba8:	01 95       	neg	r16
     baa:	11 09       	sbc	r17, r1
     bac:	ff ef       	ldi	r31, 0xFF	; 255
     bae:	6f 16       	cp	r6, r31
     bb0:	7f 06       	cpc	r7, r31
     bb2:	29 f4       	brne	.+10     	; 0xbbe <vfprintf+0x2ee>
     bb4:	b6 01       	movw	r22, r12
     bb6:	8e e2       	ldi	r24, 0x2E	; 46
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     bbe:	a6 14       	cp	r10, r6
     bc0:	b7 04       	cpc	r11, r7
     bc2:	44 f0       	brlt	.+16     	; 0xbd4 <vfprintf+0x304>
     bc4:	88 89       	ldd	r24, Y+16	; 0x10
     bc6:	99 89       	ldd	r25, Y+17	; 0x11
     bc8:	86 15       	cp	r24, r6
     bca:	97 05       	cpc	r25, r7
     bcc:	1c f4       	brge	.+6      	; 0xbd4 <vfprintf+0x304>
     bce:	f4 01       	movw	r30, r8
     bd0:	81 81       	ldd	r24, Z+1	; 0x01
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vfprintf+0x306>
     bd4:	80 e3       	ldi	r24, 0x30	; 48
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	6f 1a       	sub	r6, r31
     bda:	71 08       	sbc	r7, r1
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	82 1a       	sub	r8, r18
     be0:	92 0a       	sbc	r9, r18
     be2:	60 16       	cp	r6, r16
     be4:	71 06       	cpc	r7, r17
     be6:	2c f0       	brlt	.+10     	; 0xbf2 <vfprintf+0x322>
     be8:	b6 01       	movw	r22, r12
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     bf0:	dd cf       	rjmp	.-70     	; 0xbac <vfprintf+0x2dc>
     bf2:	a6 14       	cp	r10, r6
     bf4:	b7 04       	cpc	r11, r7
     bf6:	39 f4       	brne	.+14     	; 0xc06 <vfprintf+0x336>
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	96 33       	cpi	r25, 0x36	; 54
     bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x334>
     bfe:	95 33       	cpi	r25, 0x35	; 53
     c00:	11 f4       	brne	.+4      	; 0xc06 <vfprintf+0x336>
     c02:	54 fe       	sbrs	r5, 4
     c04:	81 e3       	ldi	r24, 0x31	; 49
     c06:	b6 01       	movw	r22, r12
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	51 c0       	rjmp	.+162    	; 0xcae <vfprintf+0x3de>
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	81 33       	cpi	r24, 0x31	; 49
     c10:	19 f0       	breq	.+6      	; 0xc18 <vfprintf+0x348>
     c12:	95 2d       	mov	r25, r5
     c14:	9f 7e       	andi	r25, 0xEF	; 239
     c16:	59 2e       	mov	r5, r25
     c18:	b6 01       	movw	r22, r12
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     c20:	11 11       	cpse	r17, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <vfprintf+0x35e>
     c24:	74 fc       	sbrc	r7, 4
     c26:	1c c0       	rjmp	.+56     	; 0xc60 <vfprintf+0x390>
     c28:	85 e6       	ldi	r24, 0x65	; 101
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <vfprintf+0x394>
     c2e:	b6 01       	movw	r22, r12
     c30:	8e e2       	ldi	r24, 0x2E	; 46
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     c38:	02 e0       	ldi	r16, 0x02	; 2
     c3a:	01 0f       	add	r16, r17
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	18 0f       	add	r17, r24
     c42:	e1 e0       	ldi	r30, 0x01	; 1
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	e8 0f       	add	r30, r24
     c4c:	f1 1d       	adc	r31, r1
     c4e:	80 81       	ld	r24, Z
     c50:	b6 01       	movw	r22, r12
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     c58:	81 2f       	mov	r24, r17
     c5a:	10 13       	cpse	r17, r16
     c5c:	f0 cf       	rjmp	.-32     	; 0xc3e <vfprintf+0x36e>
     c5e:	e2 cf       	rjmp	.-60     	; 0xc24 <vfprintf+0x354>
     c60:	85 e4       	ldi	r24, 0x45	; 69
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     c6a:	b7 fc       	sbrc	r11, 7
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x3a8>
     c6e:	a1 14       	cp	r10, r1
     c70:	b1 04       	cpc	r11, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <vfprintf+0x3b2>
     c74:	54 fe       	sbrs	r5, 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x3b2>
     c78:	b1 94       	neg	r11
     c7a:	a1 94       	neg	r10
     c7c:	b1 08       	sbc	r11, r1
     c7e:	8d e2       	ldi	r24, 0x2D	; 45
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <vfprintf+0x3b4>
     c82:	8b e2       	ldi	r24, 0x2B	; 43
     c84:	b6 01       	movw	r22, r12
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	ea e0       	ldi	r30, 0x0A	; 10
     c90:	ae 16       	cp	r10, r30
     c92:	b1 04       	cpc	r11, r1
     c94:	2c f0       	brlt	.+10     	; 0xca0 <vfprintf+0x3d0>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	aa e0       	ldi	r26, 0x0A	; 10
     c9a:	aa 1a       	sub	r10, r26
     c9c:	b1 08       	sbc	r11, r1
     c9e:	f7 cf       	rjmp	.-18     	; 0xc8e <vfprintf+0x3be>
     ca0:	b6 01       	movw	r22, r12
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     ca8:	b6 01       	movw	r22, r12
     caa:	c5 01       	movw	r24, r10
     cac:	c0 96       	adiw	r24, 0x30	; 48
     cae:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     cb2:	72 c1       	rjmp	.+740    	; 0xf98 <vfprintf+0x6c8>
     cb4:	83 36       	cpi	r24, 0x63	; 99
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <vfprintf+0x3f4>
     cb8:	83 37       	cpi	r24, 0x73	; 115
     cba:	91 f0       	breq	.+36     	; 0xce0 <vfprintf+0x410>
     cbc:	83 35       	cpi	r24, 0x53	; 83
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x3f2>
     cc0:	5d c0       	rjmp	.+186    	; 0xd7c <vfprintf+0x4ac>
     cc2:	24 c0       	rjmp	.+72     	; 0xd0c <vfprintf+0x43c>
     cc4:	c5 01       	movw	r24, r10
     cc6:	02 96       	adiw	r24, 0x02	; 2
     cc8:	9f 87       	std	Y+15, r25	; 0x0f
     cca:	8e 87       	std	Y+14, r24	; 0x0e
     ccc:	f5 01       	movw	r30, r10
     cce:	80 81       	ld	r24, Z
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 88       	ldd	r6, Y+18	; 0x12
     cd4:	7b 88       	ldd	r7, Y+19	; 0x13
     cd6:	8c 88       	ldd	r8, Y+20	; 0x14
     cd8:	aa 24       	eor	r10, r10
     cda:	a3 94       	inc	r10
     cdc:	b1 2c       	mov	r11, r1
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <vfprintf+0x438>
     ce0:	c5 01       	movw	r24, r10
     ce2:	03 96       	adiw	r24, 0x03	; 3
     ce4:	9f 87       	std	Y+15, r25	; 0x0f
     ce6:	8e 87       	std	Y+14, r24	; 0x0e
     ce8:	f5 01       	movw	r30, r10
     cea:	60 80       	ld	r6, Z
     cec:	71 80       	ldd	r7, Z+1	; 0x01
     cee:	82 80       	ldd	r8, Z+2	; 0x02
     cf0:	06 ff       	sbrs	r16, 6
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x42a>
     cf4:	41 2f       	mov	r20, r17
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x42e>
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	5f ef       	ldi	r21, 0xFF	; 255
     cfe:	88 2d       	mov	r24, r8
     d00:	b3 01       	movw	r22, r6
     d02:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <strnlen>
     d06:	5c 01       	movw	r10, r24
     d08:	0f 77       	andi	r16, 0x7F	; 127
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <vfprintf+0x466>
     d0c:	c5 01       	movw	r24, r10
     d0e:	03 96       	adiw	r24, 0x03	; 3
     d10:	9f 87       	std	Y+15, r25	; 0x0f
     d12:	8e 87       	std	Y+14, r24	; 0x0e
     d14:	f5 01       	movw	r30, r10
     d16:	60 80       	ld	r6, Z
     d18:	71 80       	ldd	r7, Z+1	; 0x01
     d1a:	82 80       	ldd	r8, Z+2	; 0x02
     d1c:	06 ff       	sbrs	r16, 6
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <vfprintf+0x456>
     d20:	41 2f       	mov	r20, r17
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x45a>
     d26:	4f ef       	ldi	r20, 0xFF	; 255
     d28:	5f ef       	ldi	r21, 0xFF	; 255
     d2a:	88 2d       	mov	r24, r8
     d2c:	b3 01       	movw	r22, r6
     d2e:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <strnlen>
     d32:	5c 01       	movw	r10, r24
     d34:	00 68       	ori	r16, 0x80	; 128
     d36:	03 fd       	sbrc	r16, 3
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <vfprintf+0x4a4>
     d3a:	8f 2d       	mov	r24, r15
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a8 16       	cp	r10, r24
     d40:	b9 06       	cpc	r11, r25
     d42:	c0 f4       	brcc	.+48     	; 0xd74 <vfprintf+0x4a4>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     d4e:	fa 94       	dec	r15
     d50:	f4 cf       	rjmp	.-24     	; 0xd3a <vfprintf+0x46a>
     d52:	f3 01       	movw	r30, r6
     d54:	84 91       	lpm	r24, Z
     d56:	87 fc       	sbrc	r8, 7
     d58:	80 81       	ld	r24, Z
     d5a:	ff ef       	ldi	r31, 0xFF	; 255
     d5c:	6f 1a       	sub	r6, r31
     d5e:	7f 0a       	sbc	r7, r31
     d60:	8f 0a       	sbc	r8, r31
     d62:	b6 01       	movw	r22, r12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     d6a:	f1 10       	cpse	r15, r1
     d6c:	fa 94       	dec	r15
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	a2 1a       	sub	r10, r18
     d72:	b1 08       	sbc	r11, r1
     d74:	a1 14       	cp	r10, r1
     d76:	b1 04       	cpc	r11, r1
     d78:	61 f7       	brne	.-40     	; 0xd52 <vfprintf+0x482>
     d7a:	0e c1       	rjmp	.+540    	; 0xf98 <vfprintf+0x6c8>
     d7c:	84 36       	cpi	r24, 0x64	; 100
     d7e:	11 f0       	breq	.+4      	; 0xd84 <vfprintf+0x4b4>
     d80:	89 36       	cpi	r24, 0x69	; 105
     d82:	79 f5       	brne	.+94     	; 0xde2 <vfprintf+0x512>
     d84:	c5 01       	movw	r24, r10
     d86:	07 ff       	sbrs	r16, 7
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x4cc>
     d8a:	04 96       	adiw	r24, 0x04	; 4
     d8c:	9f 87       	std	Y+15, r25	; 0x0f
     d8e:	8e 87       	std	Y+14, r24	; 0x0e
     d90:	f5 01       	movw	r30, r10
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <vfprintf+0x4e0>
     d9c:	02 96       	adiw	r24, 0x02	; 2
     d9e:	9f 87       	std	Y+15, r25	; 0x0f
     da0:	8e 87       	std	Y+14, r24	; 0x0e
     da2:	f5 01       	movw	r30, r10
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	07 2e       	mov	r0, r23
     daa:	00 0c       	add	r0, r0
     dac:	88 0b       	sbc	r24, r24
     dae:	99 0b       	sbc	r25, r25
     db0:	0f 76       	andi	r16, 0x6F	; 111
     db2:	e0 2e       	mov	r14, r16
     db4:	97 ff       	sbrs	r25, 7
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <vfprintf+0x4fc>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	f0 2f       	mov	r31, r16
     dc8:	f0 68       	ori	r31, 0x80	; 128
     dca:	ef 2e       	mov	r14, r31
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__ultoa_invert>
     dda:	a8 2e       	mov	r10, r24
     ddc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dde:	a2 1a       	sub	r10, r18
     de0:	4b c0       	rjmp	.+150    	; 0xe78 <vfprintf+0x5a8>
     de2:	85 37       	cpi	r24, 0x75	; 117
     de4:	29 f4       	brne	.+10     	; 0xdf0 <vfprintf+0x520>
     de6:	0f 7e       	andi	r16, 0xEF	; 239
     de8:	e0 2e       	mov	r14, r16
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	25 c0       	rjmp	.+74     	; 0xe3a <vfprintf+0x56a>
     df0:	90 2f       	mov	r25, r16
     df2:	99 7f       	andi	r25, 0xF9	; 249
     df4:	e9 2e       	mov	r14, r25
     df6:	8f 36       	cpi	r24, 0x6F	; 111
     df8:	c1 f0       	breq	.+48     	; 0xe2a <vfprintf+0x55a>
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x532>
     dfc:	88 35       	cpi	r24, 0x58	; 88
     dfe:	79 f0       	breq	.+30     	; 0xe1e <vfprintf+0x54e>
     e00:	d5 c0       	rjmp	.+426    	; 0xfac <vfprintf+0x6dc>
     e02:	80 37       	cpi	r24, 0x70	; 112
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x53c>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	21 f0       	breq	.+8      	; 0xe12 <vfprintf+0x542>
     e0a:	d0 c0       	rjmp	.+416    	; 0xfac <vfprintf+0x6dc>
     e0c:	a9 2f       	mov	r26, r25
     e0e:	a0 61       	ori	r26, 0x10	; 16
     e10:	ea 2e       	mov	r14, r26
     e12:	e4 fe       	sbrs	r14, 4
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x560>
     e16:	ee 2d       	mov	r30, r14
     e18:	e4 60       	ori	r30, 0x04	; 4
     e1a:	ee 2e       	mov	r14, r30
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x560>
     e1e:	04 ff       	sbrs	r16, 4
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <vfprintf+0x566>
     e22:	f9 2f       	mov	r31, r25
     e24:	f6 60       	ori	r31, 0x06	; 6
     e26:	ef 2e       	mov	r14, r31
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x566>
     e2a:	28 e0       	ldi	r18, 0x08	; 8
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x56a>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x56a>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	c5 01       	movw	r24, r10
     e3c:	e7 fe       	sbrs	r14, 7
     e3e:	09 c0       	rjmp	.+18     	; 0xe52 <vfprintf+0x582>
     e40:	04 96       	adiw	r24, 0x04	; 4
     e42:	9f 87       	std	Y+15, r25	; 0x0f
     e44:	8e 87       	std	Y+14, r24	; 0x0e
     e46:	f5 01       	movw	r30, r10
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x592>
     e52:	02 96       	adiw	r24, 0x02	; 2
     e54:	9f 87       	std	Y+15, r25	; 0x0f
     e56:	8e 87       	std	Y+14, r24	; 0x0e
     e58:	f5 01       	movw	r30, r10
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ae 01       	movw	r20, r28
     e64:	4f 5f       	subi	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__ultoa_invert>
     e6c:	a8 2e       	mov	r10, r24
     e6e:	fc 85       	ldd	r31, Y+12	; 0x0c
     e70:	af 1a       	sub	r10, r31
     e72:	2e 2d       	mov	r18, r14
     e74:	2f 77       	andi	r18, 0x7F	; 127
     e76:	e2 2e       	mov	r14, r18
     e78:	e6 fe       	sbrs	r14, 6
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <vfprintf+0x5c2>
     e7c:	0e 2d       	mov	r16, r14
     e7e:	0e 7f       	andi	r16, 0xFE	; 254
     e80:	a1 16       	cp	r10, r17
     e82:	50 f4       	brcc	.+20     	; 0xe98 <vfprintf+0x5c8>
     e84:	e4 fe       	sbrs	r14, 4
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <vfprintf+0x5cc>
     e88:	e2 fc       	sbrc	r14, 2
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <vfprintf+0x5cc>
     e8c:	0e 2d       	mov	r16, r14
     e8e:	0e 7e       	andi	r16, 0xEE	; 238
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <vfprintf+0x5cc>
     e92:	ba 2c       	mov	r11, r10
     e94:	0e 2d       	mov	r16, r14
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x5ce>
     e98:	ba 2c       	mov	r11, r10
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <vfprintf+0x5ce>
     e9c:	b1 2e       	mov	r11, r17
     e9e:	04 ff       	sbrs	r16, 4
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <vfprintf+0x5ec>
     ea2:	fe 01       	movw	r30, r28
     ea4:	ea 0d       	add	r30, r10
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	11 f4       	brne	.+4      	; 0xeb2 <vfprintf+0x5e2>
     eae:	09 7e       	andi	r16, 0xE9	; 233
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <vfprintf+0x5f4>
     eb2:	02 ff       	sbrs	r16, 2
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x5f2>
     eb6:	b3 94       	inc	r11
     eb8:	b3 94       	inc	r11
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <vfprintf+0x5f4>
     ebc:	80 2f       	mov	r24, r16
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	09 f0       	breq	.+2      	; 0xec4 <vfprintf+0x5f4>
     ec2:	b3 94       	inc	r11
     ec4:	03 fd       	sbrc	r16, 3
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0x61a>
     ec8:	00 ff       	sbrs	r16, 0
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x608>
     ecc:	bf 14       	cp	r11, r15
     ece:	88 f4       	brcc	.+34     	; 0xef2 <vfprintf+0x622>
     ed0:	fa 0c       	add	r15, r10
     ed2:	1f 2d       	mov	r17, r15
     ed4:	1b 19       	sub	r17, r11
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <vfprintf+0x624>
     ed8:	bf 14       	cp	r11, r15
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x624>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x608>
     eea:	bf 14       	cp	r11, r15
     eec:	18 f4       	brcc	.+6      	; 0xef4 <vfprintf+0x624>
     eee:	fb 18       	sub	r15, r11
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x626>
     ef2:	1a 2d       	mov	r17, r10
     ef4:	f1 2c       	mov	r15, r1
     ef6:	04 ff       	sbrs	r16, 4
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x64a>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     f04:	02 ff       	sbrs	r16, 2
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <vfprintf+0x666>
     f08:	01 fd       	sbrc	r16, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x642>
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x646>
     f12:	88 e5       	ldi	r24, 0x58	; 88
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	b6 01       	movw	r22, r12
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <vfprintf+0x662>
     f1a:	80 2f       	mov	r24, r16
     f1c:	86 78       	andi	r24, 0x86	; 134
     f1e:	59 f0       	breq	.+22     	; 0xf36 <vfprintf+0x666>
     f20:	01 ff       	sbrs	r16, 1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x658>
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x65a>
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	07 fd       	sbrc	r16, 7
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     f36:	a1 16       	cp	r10, r17
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x678>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     f44:	11 50       	subi	r17, 0x01	; 1
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x666>
     f48:	aa 94       	dec	r10
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ec 0f       	add	r30, r28
     f50:	fd 1f       	adc	r31, r29
     f52:	ea 0d       	add	r30, r10
     f54:	f1 1d       	adc	r31, r1
     f56:	80 81       	ld	r24, Z
     f58:	b6 01       	movw	r22, r12
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     f60:	a1 10       	cpse	r10, r1
     f62:	f2 cf       	rjmp	.-28     	; 0xf48 <vfprintf+0x678>
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <vfprintf+0x6c8>
     f66:	f4 e0       	ldi	r31, 0x04	; 4
     f68:	ff 15       	cp	r31, r15
     f6a:	80 f5       	brcc	.+96     	; 0xfcc <vfprintf+0x6fc>
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	f8 1a       	sub	r15, r24
     f70:	73 fe       	sbrs	r7, 3
     f72:	23 c0       	rjmp	.+70     	; 0xfba <vfprintf+0x6ea>
     f74:	01 11       	cpse	r16, r1
     f76:	2b c0       	rjmp	.+86     	; 0xfce <vfprintf+0x6fe>
     f78:	53 fe       	sbrs	r5, 3
     f7a:	2f c0       	rjmp	.+94     	; 0xfda <vfprintf+0x70a>
     f7c:	5b eb       	ldi	r21, 0xBB	; 187
     f7e:	85 2e       	mov	r8, r21
     f80:	58 e0       	ldi	r21, 0x08	; 8
     f82:	95 2e       	mov	r9, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	a5 2e       	mov	r10, r21
     f88:	07 2d       	mov	r16, r7
     f8a:	00 71       	andi	r16, 0x10	; 16
     f8c:	f4 01       	movw	r30, r8
     f8e:	84 91       	lpm	r24, Z
     f90:	a7 fc       	sbrc	r10, 7
     f92:	80 81       	ld	r24, Z
     f94:	81 11       	cpse	r24, r1
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <vfprintf+0x718>
     f98:	ff 20       	and	r15, r15
     f9a:	09 f4       	brne	.+2      	; 0xf9e <vfprintf+0x6ce>
     f9c:	d2 cc       	rjmp	.-1628   	; 0x942 <vfprintf+0x72>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     fa8:	fa 94       	dec	r15
     faa:	f6 cf       	rjmp	.-20     	; 0xf98 <vfprintf+0x6c8>
     fac:	f6 01       	movw	r30, r12
     fae:	87 81       	ldd	r24, Z+7	; 0x07
     fb0:	90 85       	ldd	r25, Z+8	; 0x08
     fb2:	2c c0       	rjmp	.+88     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	29 c0       	rjmp	.+82     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fba:	b6 01       	movw	r22, r12
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     fc4:	fa 94       	dec	r15
     fc6:	f1 10       	cpse	r15, r1
     fc8:	f8 cf       	rjmp	.-16     	; 0xfba <vfprintf+0x6ea>
     fca:	d4 cf       	rjmp	.-88     	; 0xf74 <vfprintf+0x6a4>
     fcc:	f1 2c       	mov	r15, r1
     fce:	b6 01       	movw	r22, r12
     fd0:	80 2f       	mov	r24, r16
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     fd8:	cf cf       	rjmp	.-98     	; 0xf78 <vfprintf+0x6a8>
     fda:	47 eb       	ldi	r20, 0xB7	; 183
     fdc:	84 2e       	mov	r8, r20
     fde:	48 e0       	ldi	r20, 0x08	; 8
     fe0:	94 2e       	mov	r9, r20
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	a4 2e       	mov	r10, r20
     fe6:	d0 cf       	rjmp	.-96     	; 0xf88 <vfprintf+0x6b8>
     fe8:	01 11       	cpse	r16, r1
     fea:	80 52       	subi	r24, 0x20	; 32
     fec:	b6 01       	movw	r22, r12
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 5e 22 	call	0x44bc	; 0x44bc <fputc>
     ff4:	ff ef       	ldi	r31, 0xFF	; 255
     ff6:	8f 1a       	sub	r8, r31
     ff8:	9f 0a       	sbc	r9, r31
     ffa:	af 0a       	sbc	r10, r31
     ffc:	c7 cf       	rjmp	.-114    	; 0xf8c <vfprintf+0x6bc>
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	2f 15       	cp	r18, r15
    1002:	10 f4       	brcc	.+4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	b3 cf       	rjmp	.-154    	; 0xf6e <vfprintf+0x69e>
    1008:	f1 2c       	mov	r15, r1
    100a:	b6 cf       	rjmp	.-148    	; 0xf78 <vfprintf+0x6a8>
    100c:	64 96       	adiw	r28, 0x14	; 20
    100e:	e2 e1       	ldi	r30, 0x12	; 18
    1010:	0c 94 9d 2d 	jmp	0x5b3a	; 0x5b3a <__epilogue_restores__>

Disassembly of section .text.libgcc:

0000687e <__tablejump2__>:
    687e:	ee 0f       	add	r30, r30
    6880:	ff 1f       	adc	r31, r31
    6882:	05 90       	lpm	r0, Z+
    6884:	f4 91       	lpm	r31, Z
    6886:	e0 2d       	mov	r30, r0
    6888:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00006328 <__umulhisi3>:
    6328:	a2 9f       	mul	r26, r18
    632a:	b0 01       	movw	r22, r0
    632c:	b3 9f       	mul	r27, r19
    632e:	c0 01       	movw	r24, r0
    6330:	a3 9f       	mul	r26, r19
    6332:	70 0d       	add	r23, r0
    6334:	81 1d       	adc	r24, r1
    6336:	11 24       	eor	r1, r1
    6338:	91 1d       	adc	r25, r1
    633a:	b2 9f       	mul	r27, r18
    633c:	70 0d       	add	r23, r0
    633e:	81 1d       	adc	r24, r1
    6340:	11 24       	eor	r1, r1
    6342:	91 1d       	adc	r25, r1
    6344:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00005a96 <__prologue_saves__>:
    5a96:	2f 92       	push	r2
    5a98:	3f 92       	push	r3
    5a9a:	4f 92       	push	r4
    5a9c:	5f 92       	push	r5
    5a9e:	6f 92       	push	r6
    5aa0:	7f 92       	push	r7
    5aa2:	8f 92       	push	r8
    5aa4:	9f 92       	push	r9
    5aa6:	af 92       	push	r10
    5aa8:	bf 92       	push	r11
    5aaa:	cf 92       	push	r12
    5aac:	df 92       	push	r13
    5aae:	ef 92       	push	r14
    5ab0:	ff 92       	push	r15
    5ab2:	0f 93       	push	r16
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	cd b7       	in	r28, 0x3d	; 61
    5abc:	de b7       	in	r29, 0x3e	; 62
    5abe:	ca 1b       	sub	r28, r26
    5ac0:	db 0b       	sbc	r29, r27
    5ac2:	0f b6       	in	r0, 0x3f	; 63
    5ac4:	f8 94       	cli
    5ac6:	de bf       	out	0x3e, r29	; 62
    5ac8:	0f be       	out	0x3f, r0	; 63
    5aca:	cd bf       	out	0x3d, r28	; 61
    5acc:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00005b3a <__epilogue_restores__>:
    5b3a:	2a 88       	ldd	r2, Y+18	; 0x12
    5b3c:	39 88       	ldd	r3, Y+17	; 0x11
    5b3e:	48 88       	ldd	r4, Y+16	; 0x10
    5b40:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b42:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b44:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b46:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b48:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b4c:	b9 84       	ldd	r11, Y+9	; 0x09
    5b4e:	c8 84       	ldd	r12, Y+8	; 0x08
    5b50:	df 80       	ldd	r13, Y+7	; 0x07
    5b52:	ee 80       	ldd	r14, Y+6	; 0x06
    5b54:	fd 80       	ldd	r15, Y+5	; 0x05
    5b56:	0c 81       	ldd	r16, Y+4	; 0x04
    5b58:	1b 81       	ldd	r17, Y+3	; 0x03
    5b5a:	aa 81       	ldd	r26, Y+2	; 0x02
    5b5c:	b9 81       	ldd	r27, Y+1	; 0x01
    5b5e:	ce 0f       	add	r28, r30
    5b60:	d1 1d       	adc	r29, r1
    5b62:	0f b6       	in	r0, 0x3f	; 63
    5b64:	f8 94       	cli
    5b66:	de bf       	out	0x3e, r29	; 62
    5b68:	0f be       	out	0x3f, r0	; 63
    5b6a:	cd bf       	out	0x3d, r28	; 61
    5b6c:	ed 01       	movw	r28, r26
    5b6e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000696c <atoi>:
    696c:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <atol>
    6970:	cb 01       	movw	r24, r22
    6972:	08 95       	ret

Disassembly of section .text.avrlibc:

000067b8 <atol>:
    67b8:	2a e0       	ldi	r18, 0x0A	; 10
    67ba:	30 e0       	ldi	r19, 0x00	; 0
    67bc:	40 e0       	ldi	r20, 0x00	; 0
    67be:	50 e0       	ldi	r21, 0x00	; 0
    67c0:	0e 94 b5 09 	call	0x136a	; 0x136a <strtol>
    67c4:	08 95       	ret

Disassembly of section .text.avrlibc:

0000136a <strtol>:
    136a:	2f 92       	push	r2
    136c:	3f 92       	push	r3
    136e:	4f 92       	push	r4
    1370:	5f 92       	push	r5
    1372:	6f 92       	push	r6
    1374:	7f 92       	push	r7
    1376:	8f 92       	push	r8
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	00 d0       	rcall	.+0      	; 0x138c <strtol+0x22>
    138c:	00 d0       	rcall	.+0      	; 0x138e <strtol+0x24>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <strtol+0x26>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	3b 01       	movw	r6, r22
    1396:	88 2e       	mov	r8, r24
    1398:	5a 01       	movw	r10, r20
    139a:	19 01       	movw	r2, r18
    139c:	41 15       	cp	r20, r1
    139e:	51 05       	cpc	r21, r1
    13a0:	21 f0       	breq	.+8      	; 0x13aa <strtol+0x40>
    13a2:	fa 01       	movw	r30, r20
    13a4:	60 83       	st	Z, r22
    13a6:	71 83       	std	Z+1, r23	; 0x01
    13a8:	82 83       	std	Z+2, r24	; 0x02
    13aa:	21 14       	cp	r2, r1
    13ac:	31 04       	cpc	r3, r1
    13ae:	29 f0       	breq	.+10     	; 0x13ba <strtol+0x50>
    13b0:	c1 01       	movw	r24, r2
    13b2:	02 97       	sbiw	r24, 0x02	; 2
    13b4:	83 97       	sbiw	r24, 0x23	; 35
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <strtol+0x50>
    13b8:	1a c1       	rjmp	.+564    	; 0x15ee <strtol+0x284>
    13ba:	e8 2c       	mov	r14, r8
    13bc:	63 01       	movw	r12, r6
    13be:	ff ef       	ldi	r31, 0xFF	; 255
    13c0:	cf 1a       	sub	r12, r31
    13c2:	df 0a       	sbc	r13, r31
    13c4:	ef 0a       	sbc	r14, r31
    13c6:	f3 01       	movw	r30, r6
    13c8:	14 91       	lpm	r17, Z
    13ca:	87 fc       	sbrc	r8, 7
    13cc:	10 81       	ld	r17, Z
    13ce:	81 2f       	mov	r24, r17
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 26 33 	call	0x664c	; 0x664c <isspace>
    13d6:	4c 2d       	mov	r20, r12
    13d8:	3d 2d       	mov	r19, r13
    13da:	2e 2d       	mov	r18, r14
    13dc:	89 2b       	or	r24, r25
    13de:	19 f0       	breq	.+6      	; 0x13e6 <strtol+0x7c>
    13e0:	36 01       	movw	r6, r12
    13e2:	8e 2c       	mov	r8, r14
    13e4:	ea cf       	rjmp	.-44     	; 0x13ba <strtol+0x50>
    13e6:	1d 32       	cpi	r17, 0x2D	; 45
    13e8:	69 f4       	brne	.+26     	; 0x1404 <strtol+0x9a>
    13ea:	e8 2c       	mov	r14, r8
    13ec:	63 01       	movw	r12, r6
    13ee:	52 e0       	ldi	r21, 0x02	; 2
    13f0:	c5 0e       	add	r12, r21
    13f2:	d1 1c       	adc	r13, r1
    13f4:	e1 1c       	adc	r14, r1
    13f6:	e4 2f       	mov	r30, r20
    13f8:	f3 2f       	mov	r31, r19
    13fa:	14 91       	lpm	r17, Z
    13fc:	27 fd       	sbrc	r18, 7
    13fe:	10 81       	ld	r17, Z
    1400:	01 e0       	ldi	r16, 0x01	; 1
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <strtol+0xb6>
    1404:	1b 32       	cpi	r17, 0x2B	; 43
    1406:	59 f4       	brne	.+22     	; 0x141e <strtol+0xb4>
    1408:	e8 2c       	mov	r14, r8
    140a:	63 01       	movw	r12, r6
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	c8 0e       	add	r12, r24
    1410:	d1 1c       	adc	r13, r1
    1412:	e1 1c       	adc	r14, r1
    1414:	e4 2f       	mov	r30, r20
    1416:	f3 2f       	mov	r31, r19
    1418:	14 91       	lpm	r17, Z
    141a:	27 fd       	sbrc	r18, 7
    141c:	10 81       	ld	r17, Z
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	21 14       	cp	r2, r1
    1422:	31 04       	cpc	r3, r1
    1424:	09 f1       	breq	.+66     	; 0x1468 <strtol+0xfe>
    1426:	90 e1       	ldi	r25, 0x10	; 16
    1428:	29 16       	cp	r2, r25
    142a:	31 04       	cpc	r3, r1
    142c:	29 f4       	brne	.+10     	; 0x1438 <strtol+0xce>
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <strtol+0x144>
    1430:	10 e3       	ldi	r17, 0x30	; 48
    1432:	21 14       	cp	r2, r1
    1434:	31 04       	cpc	r3, r1
    1436:	21 f1       	breq	.+72     	; 0x1480 <strtol+0x116>
    1438:	f8 e0       	ldi	r31, 0x08	; 8
    143a:	2f 16       	cp	r2, r31
    143c:	31 04       	cpc	r3, r1
    143e:	01 f1       	breq	.+64     	; 0x1480 <strtol+0x116>
    1440:	54 f4       	brge	.+20     	; 0x1456 <strtol+0xec>
    1442:	32 e0       	ldi	r19, 0x02	; 2
    1444:	23 16       	cp	r2, r19
    1446:	31 04       	cpc	r3, r1
    1448:	21 f5       	brne	.+72     	; 0x1492 <strtol+0x128>
    144a:	41 2c       	mov	r4, r1
    144c:	51 2c       	mov	r5, r1
    144e:	61 2c       	mov	r6, r1
    1450:	50 e4       	ldi	r21, 0x40	; 64
    1452:	75 2e       	mov	r7, r21
    1454:	4b c0       	rjmp	.+150    	; 0x14ec <strtol+0x182>
    1456:	4a e0       	ldi	r20, 0x0A	; 10
    1458:	24 16       	cp	r2, r20
    145a:	31 04       	cpc	r3, r1
    145c:	39 f0       	breq	.+14     	; 0x146c <strtol+0x102>
    145e:	50 e1       	ldi	r21, 0x10	; 16
    1460:	25 16       	cp	r2, r21
    1462:	31 04       	cpc	r3, r1
    1464:	b1 f4       	brne	.+44     	; 0x1492 <strtol+0x128>
    1466:	3d c0       	rjmp	.+122    	; 0x14e2 <strtol+0x178>
    1468:	10 33       	cpi	r17, 0x30	; 48
    146a:	19 f1       	breq	.+70     	; 0x14b2 <strtol+0x148>
    146c:	3a e0       	ldi	r19, 0x0A	; 10
    146e:	23 2e       	mov	r2, r19
    1470:	31 2c       	mov	r3, r1
    1472:	4c ec       	ldi	r20, 0xCC	; 204
    1474:	44 2e       	mov	r4, r20
    1476:	54 2c       	mov	r5, r4
    1478:	64 2c       	mov	r6, r4
    147a:	4c e0       	ldi	r20, 0x0C	; 12
    147c:	74 2e       	mov	r7, r20
    147e:	36 c0       	rjmp	.+108    	; 0x14ec <strtol+0x182>
    1480:	98 e0       	ldi	r25, 0x08	; 8
    1482:	29 2e       	mov	r2, r25
    1484:	31 2c       	mov	r3, r1
    1486:	41 2c       	mov	r4, r1
    1488:	51 2c       	mov	r5, r1
    148a:	61 2c       	mov	r6, r1
    148c:	20 e1       	ldi	r18, 0x10	; 16
    148e:	72 2e       	mov	r7, r18
    1490:	2d c0       	rjmp	.+90     	; 0x14ec <strtol+0x182>
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e8       	ldi	r25, 0x80	; 128
    149a:	91 01       	movw	r18, r2
    149c:	03 2c       	mov	r0, r3
    149e:	00 0c       	add	r0, r0
    14a0:	44 0b       	sbc	r20, r20
    14a2:	55 0b       	sbc	r21, r21
    14a4:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__udivmodsi4>
    14a8:	29 01       	movw	r4, r18
    14aa:	3a 01       	movw	r6, r20
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <strtol+0x182>
    14ae:	10 33       	cpi	r17, 0x30	; 48
    14b0:	c1 f4       	brne	.+48     	; 0x14e2 <strtol+0x178>
    14b2:	f6 01       	movw	r30, r12
    14b4:	84 91       	lpm	r24, Z
    14b6:	e7 fc       	sbrc	r14, 7
    14b8:	80 81       	ld	r24, Z
    14ba:	8f 7d       	andi	r24, 0xDF	; 223
    14bc:	88 35       	cpi	r24, 0x58	; 88
    14be:	09 f0       	breq	.+2      	; 0x14c2 <strtol+0x158>
    14c0:	b7 cf       	rjmp	.-146    	; 0x1430 <strtol+0xc6>
    14c2:	ae 2d       	mov	r26, r14
    14c4:	c6 01       	movw	r24, r12
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	a1 1d       	adc	r26, r1
    14ca:	fc 01       	movw	r30, r24
    14cc:	14 91       	lpm	r17, Z
    14ce:	a7 fd       	sbrc	r26, 7
    14d0:	10 81       	ld	r17, Z
    14d2:	e2 e0       	ldi	r30, 0x02	; 2
    14d4:	ce 0e       	add	r12, r30
    14d6:	d1 1c       	adc	r13, r1
    14d8:	e1 1c       	adc	r14, r1
    14da:	02 60       	ori	r16, 0x02	; 2
    14dc:	60 e1       	ldi	r22, 0x10	; 16
    14de:	26 2e       	mov	r2, r22
    14e0:	31 2c       	mov	r3, r1
    14e2:	41 2c       	mov	r4, r1
    14e4:	51 2c       	mov	r5, r1
    14e6:	61 2c       	mov	r6, r1
    14e8:	88 e0       	ldi	r24, 0x08	; 8
    14ea:	78 2e       	mov	r7, r24
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	cb 01       	movw	r24, r22
    14f4:	91 01       	movw	r18, r2
    14f6:	03 2c       	mov	r0, r3
    14f8:	00 0c       	add	r0, r0
    14fa:	44 0b       	sbc	r20, r20
    14fc:	55 0b       	sbc	r21, r21
    14fe:	29 83       	std	Y+1, r18	; 0x01
    1500:	3a 83       	std	Y+2, r19	; 0x02
    1502:	4b 83       	std	Y+3, r20	; 0x03
    1504:	5c 83       	std	Y+4, r21	; 0x04
    1506:	e0 ed       	ldi	r30, 0xD0	; 208
    1508:	e1 0f       	add	r30, r17
    150a:	ea 30       	cpi	r30, 0x0A	; 10
    150c:	60 f0       	brcs	.+24     	; 0x1526 <strtol+0x1bc>
    150e:	2f eb       	ldi	r18, 0xBF	; 191
    1510:	21 0f       	add	r18, r17
    1512:	2a 31       	cpi	r18, 0x1A	; 26
    1514:	10 f4       	brcc	.+4      	; 0x151a <strtol+0x1b0>
    1516:	e9 ec       	ldi	r30, 0xC9	; 201
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <strtol+0x1ba>
    151a:	2f e9       	ldi	r18, 0x9F	; 159
    151c:	21 0f       	add	r18, r17
    151e:	2a 31       	cpi	r18, 0x1A	; 26
    1520:	50 f5       	brcc	.+84     	; 0x1576 <strtol+0x20c>
    1522:	e9 ea       	ldi	r30, 0xA9	; 169
    1524:	e1 0f       	add	r30, r17
    1526:	2e 2f       	mov	r18, r30
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	22 15       	cp	r18, r2
    152c:	33 05       	cpc	r19, r3
    152e:	1c f5       	brge	.+70     	; 0x1576 <strtol+0x20c>
    1530:	a7 fd       	sbrc	r26, 7
    1532:	18 c0       	rjmp	.+48     	; 0x1564 <strtol+0x1fa>
    1534:	46 16       	cp	r4, r22
    1536:	57 06       	cpc	r5, r23
    1538:	68 06       	cpc	r6, r24
    153a:	79 06       	cpc	r7, r25
    153c:	80 f0       	brcs	.+32     	; 0x155e <strtol+0x1f4>
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	3a 81       	ldd	r19, Y+2	; 0x02
    1542:	4b 81       	ldd	r20, Y+3	; 0x03
    1544:	5c 81       	ldd	r21, Y+4	; 0x04
    1546:	0e 94 39 31 	call	0x6272	; 0x6272 <__mulsi3>
    154a:	6e 0f       	add	r22, r30
    154c:	71 1d       	adc	r23, r1
    154e:	81 1d       	adc	r24, r1
    1550:	91 1d       	adc	r25, r1
    1552:	61 30       	cpi	r22, 0x01	; 1
    1554:	71 05       	cpc	r23, r1
    1556:	81 05       	cpc	r24, r1
    1558:	30 e8       	ldi	r19, 0x80	; 128
    155a:	93 07       	cpc	r25, r19
    155c:	10 f0       	brcs	.+4      	; 0x1562 <strtol+0x1f8>
    155e:	af ef       	ldi	r26, 0xFF	; 255
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <strtol+0x1fa>
    1562:	a1 e0       	ldi	r26, 0x01	; 1
    1564:	f6 01       	movw	r30, r12
    1566:	14 91       	lpm	r17, Z
    1568:	e7 fc       	sbrc	r14, 7
    156a:	10 81       	ld	r17, Z
    156c:	4f ef       	ldi	r20, 0xFF	; 255
    156e:	c4 1a       	sub	r12, r20
    1570:	d4 0a       	sbc	r13, r20
    1572:	e4 0a       	sbc	r14, r20
    1574:	c8 cf       	rjmp	.-112    	; 0x1506 <strtol+0x19c>
    1576:	20 2f       	mov	r18, r16
    1578:	21 70       	andi	r18, 0x01	; 1
    157a:	a1 14       	cp	r10, r1
    157c:	b1 04       	cpc	r11, r1
    157e:	b1 f0       	breq	.+44     	; 0x15ac <strtol+0x242>
    1580:	aa 23       	and	r26, r26
    1582:	49 f0       	breq	.+18     	; 0x1596 <strtol+0x22c>
    1584:	51 e0       	ldi	r21, 0x01	; 1
    1586:	c5 1a       	sub	r12, r21
    1588:	d1 08       	sbc	r13, r1
    158a:	e1 08       	sbc	r14, r1
    158c:	f5 01       	movw	r30, r10
    158e:	c0 82       	st	Z, r12
    1590:	d1 82       	std	Z+1, r13	; 0x01
    1592:	e2 82       	std	Z+2, r14	; 0x02
    1594:	0b c0       	rjmp	.+22     	; 0x15ac <strtol+0x242>
    1596:	01 ff       	sbrs	r16, 1
    1598:	1d c0       	rjmp	.+58     	; 0x15d4 <strtol+0x26a>
    159a:	f2 e0       	ldi	r31, 0x02	; 2
    159c:	cf 1a       	sub	r12, r31
    159e:	d1 08       	sbc	r13, r1
    15a0:	e1 08       	sbc	r14, r1
    15a2:	f5 01       	movw	r30, r10
    15a4:	c0 82       	st	Z, r12
    15a6:	d1 82       	std	Z+1, r13	; 0x01
    15a8:	e2 82       	std	Z+2, r14	; 0x02
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <strtol+0x26a>
    15ac:	a7 ff       	sbrs	r26, 7
    15ae:	12 c0       	rjmp	.+36     	; 0x15d4 <strtol+0x26a>
    15b0:	22 23       	and	r18, r18
    15b2:	29 f0       	breq	.+10     	; 0x15be <strtol+0x254>
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e8       	ldi	r25, 0x80	; 128
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <strtol+0x25c>
    15be:	6f ef       	ldi	r22, 0xFF	; 255
    15c0:	7f ef       	ldi	r23, 0xFF	; 255
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	9f e7       	ldi	r25, 0x7F	; 127
    15c6:	22 e2       	ldi	r18, 0x22	; 34
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	30 93 71 08 	sts	0x0871, r19	; 0x800871 <errno+0x1>
    15ce:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <errno>
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <strtol+0x27c>
    15d4:	22 23       	and	r18, r18
    15d6:	81 f0       	breq	.+32     	; 0x15f8 <strtol+0x28e>
    15d8:	90 95       	com	r25
    15da:	80 95       	com	r24
    15dc:	70 95       	com	r23
    15de:	61 95       	neg	r22
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	8f 4f       	sbci	r24, 0xFF	; 255
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	46 2f       	mov	r20, r22
    15e8:	37 2f       	mov	r19, r23
    15ea:	28 2f       	mov	r18, r24
    15ec:	12 c0       	rjmp	.+36     	; 0x1612 <strtol+0x2a8>
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <strtol+0x2a8>
    15f8:	97 ff       	sbrs	r25, 7
    15fa:	f5 cf       	rjmp	.-22     	; 0x15e6 <strtol+0x27c>
    15fc:	82 e2       	ldi	r24, 0x22	; 34
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <errno+0x1>
    1604:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <errno>
    1608:	6f ef       	ldi	r22, 0xFF	; 255
    160a:	7f ef       	ldi	r23, 0xFF	; 255
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	9f e7       	ldi	r25, 0x7F	; 127
    1610:	ea cf       	rjmp	.-44     	; 0x15e6 <strtol+0x27c>
    1612:	64 2f       	mov	r22, r20
    1614:	73 2f       	mov	r23, r19
    1616:	82 2f       	mov	r24, r18
    1618:	26 96       	adiw	r28, 0x06	; 6
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	6f 90       	pop	r6
    163c:	5f 90       	pop	r5
    163e:	4f 90       	pop	r4
    1640:	3f 90       	pop	r3
    1642:	2f 90       	pop	r2
    1644:	08 95       	ret

Disassembly of section .text.avrlibc:

00001f4a <__ftoa_engine>:
    1f4a:	28 30       	cpi	r18, 0x08	; 8
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <__ftoa_engine+0x6>
    1f4e:	27 e0       	ldi	r18, 0x07	; 7
    1f50:	33 27       	eor	r19, r19
    1f52:	da 01       	movw	r26, r20
    1f54:	99 0f       	add	r25, r25
    1f56:	31 1d       	adc	r19, r1
    1f58:	87 fd       	sbrc	r24, 7
    1f5a:	91 60       	ori	r25, 0x01	; 1
    1f5c:	00 96       	adiw	r24, 0x00	; 0
    1f5e:	61 05       	cpc	r22, r1
    1f60:	71 05       	cpc	r23, r1
    1f62:	39 f4       	brne	.+14     	; 0x1f72 <__ftoa_engine+0x28>
    1f64:	32 60       	ori	r19, 0x02	; 2
    1f66:	2e 5f       	subi	r18, 0xFE	; 254
    1f68:	3d 93       	st	X+, r19
    1f6a:	30 e3       	ldi	r19, 0x30	; 48
    1f6c:	2a 95       	dec	r18
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <__ftoa_engine+0x1e>
    1f70:	08 95       	ret
    1f72:	9f 3f       	cpi	r25, 0xFF	; 255
    1f74:	30 f0       	brcs	.+12     	; 0x1f82 <__ftoa_engine+0x38>
    1f76:	80 38       	cpi	r24, 0x80	; 128
    1f78:	71 05       	cpc	r23, r1
    1f7a:	61 05       	cpc	r22, r1
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <__ftoa_engine+0x36>
    1f7e:	3c 5f       	subi	r19, 0xFC	; 252
    1f80:	3c 5f       	subi	r19, 0xFC	; 252
    1f82:	3d 93       	st	X+, r19
    1f84:	91 30       	cpi	r25, 0x01	; 1
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <__ftoa_engine+0x40>
    1f88:	80 68       	ori	r24, 0x80	; 128
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	1f 93       	push	r17
    1f92:	0f 93       	push	r16
    1f94:	ff 92       	push	r15
    1f96:	ef 92       	push	r14
    1f98:	19 2f       	mov	r17, r25
    1f9a:	98 7f       	andi	r25, 0xF8	; 248
    1f9c:	96 95       	lsr	r25
    1f9e:	e9 2f       	mov	r30, r25
    1fa0:	96 95       	lsr	r25
    1fa2:	96 95       	lsr	r25
    1fa4:	e9 0f       	add	r30, r25
    1fa6:	ff 27       	eor	r31, r31
    1fa8:	e0 59       	subi	r30, 0x90	; 144
    1faa:	fe 4f       	sbci	r31, 0xFE	; 254
    1fac:	99 27       	eor	r25, r25
    1fae:	33 27       	eor	r19, r19
    1fb0:	ee 24       	eor	r14, r14
    1fb2:	ff 24       	eor	r15, r15
    1fb4:	a7 01       	movw	r20, r14
    1fb6:	e7 01       	movw	r28, r14
    1fb8:	05 90       	lpm	r0, Z+
    1fba:	08 94       	sec
    1fbc:	07 94       	ror	r0
    1fbe:	28 f4       	brcc	.+10     	; 0x1fca <__ftoa_engine+0x80>
    1fc0:	36 0f       	add	r19, r22
    1fc2:	e7 1e       	adc	r14, r23
    1fc4:	f8 1e       	adc	r15, r24
    1fc6:	49 1f       	adc	r20, r25
    1fc8:	51 1d       	adc	r21, r1
    1fca:	66 0f       	add	r22, r22
    1fcc:	77 1f       	adc	r23, r23
    1fce:	88 1f       	adc	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	06 94       	lsr	r0
    1fd4:	a1 f7       	brne	.-24     	; 0x1fbe <__ftoa_engine+0x74>
    1fd6:	05 90       	lpm	r0, Z+
    1fd8:	07 94       	ror	r0
    1fda:	28 f4       	brcc	.+10     	; 0x1fe6 <__ftoa_engine+0x9c>
    1fdc:	e7 0e       	add	r14, r23
    1fde:	f8 1e       	adc	r15, r24
    1fe0:	49 1f       	adc	r20, r25
    1fe2:	56 1f       	adc	r21, r22
    1fe4:	c1 1d       	adc	r28, r1
    1fe6:	77 0f       	add	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	66 1f       	adc	r22, r22
    1fee:	06 94       	lsr	r0
    1ff0:	a1 f7       	brne	.-24     	; 0x1fda <__ftoa_engine+0x90>
    1ff2:	05 90       	lpm	r0, Z+
    1ff4:	07 94       	ror	r0
    1ff6:	28 f4       	brcc	.+10     	; 0x2002 <__ftoa_engine+0xb8>
    1ff8:	f8 0e       	add	r15, r24
    1ffa:	49 1f       	adc	r20, r25
    1ffc:	56 1f       	adc	r21, r22
    1ffe:	c7 1f       	adc	r28, r23
    2000:	d1 1d       	adc	r29, r1
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	66 1f       	adc	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	06 94       	lsr	r0
    200c:	a1 f7       	brne	.-24     	; 0x1ff6 <__ftoa_engine+0xac>
    200e:	05 90       	lpm	r0, Z+
    2010:	07 94       	ror	r0
    2012:	20 f4       	brcc	.+8      	; 0x201c <__ftoa_engine+0xd2>
    2014:	49 0f       	add	r20, r25
    2016:	56 1f       	adc	r21, r22
    2018:	c7 1f       	adc	r28, r23
    201a:	d8 1f       	adc	r29, r24
    201c:	99 0f       	add	r25, r25
    201e:	66 1f       	adc	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	06 94       	lsr	r0
    2026:	a9 f7       	brne	.-22     	; 0x2012 <__ftoa_engine+0xc8>
    2028:	84 91       	lpm	r24, Z
    202a:	10 95       	com	r17
    202c:	17 70       	andi	r17, 0x07	; 7
    202e:	41 f0       	breq	.+16     	; 0x2040 <__ftoa_engine+0xf6>
    2030:	d6 95       	lsr	r29
    2032:	c7 95       	ror	r28
    2034:	57 95       	ror	r21
    2036:	47 95       	ror	r20
    2038:	f7 94       	ror	r15
    203a:	e7 94       	ror	r14
    203c:	1a 95       	dec	r17
    203e:	c1 f7       	brne	.-16     	; 0x2030 <__ftoa_engine+0xe6>
    2040:	e6 e1       	ldi	r30, 0x16	; 22
    2042:	f1 e0       	ldi	r31, 0x01	; 1
    2044:	68 94       	set
    2046:	15 90       	lpm	r1, Z+
    2048:	15 91       	lpm	r17, Z+
    204a:	35 91       	lpm	r19, Z+
    204c:	65 91       	lpm	r22, Z+
    204e:	95 91       	lpm	r25, Z+
    2050:	05 90       	lpm	r0, Z+
    2052:	7f e2       	ldi	r23, 0x2F	; 47
    2054:	73 95       	inc	r23
    2056:	e1 18       	sub	r14, r1
    2058:	f1 0a       	sbc	r15, r17
    205a:	43 0b       	sbc	r20, r19
    205c:	56 0b       	sbc	r21, r22
    205e:	c9 0b       	sbc	r28, r25
    2060:	d0 09       	sbc	r29, r0
    2062:	c0 f7       	brcc	.-16     	; 0x2054 <__ftoa_engine+0x10a>
    2064:	e1 0c       	add	r14, r1
    2066:	f1 1e       	adc	r15, r17
    2068:	43 1f       	adc	r20, r19
    206a:	56 1f       	adc	r21, r22
    206c:	c9 1f       	adc	r28, r25
    206e:	d0 1d       	adc	r29, r0
    2070:	7e f4       	brtc	.+30     	; 0x2090 <__ftoa_engine+0x146>
    2072:	70 33       	cpi	r23, 0x30	; 48
    2074:	11 f4       	brne	.+4      	; 0x207a <__ftoa_engine+0x130>
    2076:	8a 95       	dec	r24
    2078:	e6 cf       	rjmp	.-52     	; 0x2046 <__ftoa_engine+0xfc>
    207a:	e8 94       	clt
    207c:	01 50       	subi	r16, 0x01	; 1
    207e:	30 f0       	brcs	.+12     	; 0x208c <__ftoa_engine+0x142>
    2080:	08 0f       	add	r16, r24
    2082:	0a f4       	brpl	.+2      	; 0x2086 <__ftoa_engine+0x13c>
    2084:	00 27       	eor	r16, r16
    2086:	02 17       	cp	r16, r18
    2088:	08 f4       	brcc	.+2      	; 0x208c <__ftoa_engine+0x142>
    208a:	20 2f       	mov	r18, r16
    208c:	23 95       	inc	r18
    208e:	02 2f       	mov	r16, r18
    2090:	7a 33       	cpi	r23, 0x3A	; 58
    2092:	28 f0       	brcs	.+10     	; 0x209e <__ftoa_engine+0x154>
    2094:	79 e3       	ldi	r23, 0x39	; 57
    2096:	7d 93       	st	X+, r23
    2098:	2a 95       	dec	r18
    209a:	e9 f7       	brne	.-6      	; 0x2096 <__ftoa_engine+0x14c>
    209c:	10 c0       	rjmp	.+32     	; 0x20be <__ftoa_engine+0x174>
    209e:	7d 93       	st	X+, r23
    20a0:	2a 95       	dec	r18
    20a2:	89 f6       	brne	.-94     	; 0x2046 <__ftoa_engine+0xfc>
    20a4:	06 94       	lsr	r0
    20a6:	97 95       	ror	r25
    20a8:	67 95       	ror	r22
    20aa:	37 95       	ror	r19
    20ac:	17 95       	ror	r17
    20ae:	17 94       	ror	r1
    20b0:	e1 18       	sub	r14, r1
    20b2:	f1 0a       	sbc	r15, r17
    20b4:	43 0b       	sbc	r20, r19
    20b6:	56 0b       	sbc	r21, r22
    20b8:	c9 0b       	sbc	r28, r25
    20ba:	d0 09       	sbc	r29, r0
    20bc:	98 f0       	brcs	.+38     	; 0x20e4 <__ftoa_engine+0x19a>
    20be:	23 95       	inc	r18
    20c0:	7e 91       	ld	r23, -X
    20c2:	73 95       	inc	r23
    20c4:	7a 33       	cpi	r23, 0x3A	; 58
    20c6:	08 f0       	brcs	.+2      	; 0x20ca <__ftoa_engine+0x180>
    20c8:	70 e3       	ldi	r23, 0x30	; 48
    20ca:	7c 93       	st	X, r23
    20cc:	20 13       	cpse	r18, r16
    20ce:	b8 f7       	brcc	.-18     	; 0x20be <__ftoa_engine+0x174>
    20d0:	7e 91       	ld	r23, -X
    20d2:	70 61       	ori	r23, 0x10	; 16
    20d4:	7d 93       	st	X+, r23
    20d6:	30 f0       	brcs	.+12     	; 0x20e4 <__ftoa_engine+0x19a>
    20d8:	83 95       	inc	r24
    20da:	71 e3       	ldi	r23, 0x31	; 49
    20dc:	7d 93       	st	X+, r23
    20de:	70 e3       	ldi	r23, 0x30	; 48
    20e0:	2a 95       	dec	r18
    20e2:	e1 f7       	brne	.-8      	; 0x20dc <__ftoa_engine+0x192>
    20e4:	11 24       	eor	r1, r1
    20e6:	ef 90       	pop	r14
    20e8:	ff 90       	pop	r15
    20ea:	0f 91       	pop	r16
    20ec:	1f 91       	pop	r17
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	99 27       	eor	r25, r25
    20f4:	87 fd       	sbrc	r24, 7
    20f6:	90 95       	com	r25
    20f8:	08 95       	ret

Disassembly of section .text.avrlibc:

0000664c <isspace>:
    664c:	91 11       	cpse	r25, r1
    664e:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <__ctype_isfalse>
    6652:	80 32       	cpi	r24, 0x20	; 32
    6654:	19 f0       	breq	.+6      	; 0x665c <isspace+0x10>
    6656:	89 50       	subi	r24, 0x09	; 9
    6658:	85 50       	subi	r24, 0x05	; 5
    665a:	c8 f7       	brcc	.-14     	; 0x664e <isspace+0x2>
    665c:	08 95       	ret

Disassembly of section .text.avrlibc:

00005d0a <memcpy>:
    5d0a:	cf 92       	push	r12
    5d0c:	df 92       	push	r13
    5d0e:	ef 92       	push	r14
    5d10:	dc 01       	movw	r26, r24
    5d12:	6a 01       	movw	r12, r20
    5d14:	e6 2e       	mov	r14, r22
    5d16:	28 0f       	add	r18, r24
    5d18:	39 1f       	adc	r19, r25
    5d1a:	a2 17       	cp	r26, r18
    5d1c:	b3 07       	cpc	r27, r19
    5d1e:	51 f0       	breq	.+20     	; 0x5d34 <memcpy+0x2a>
    5d20:	f6 01       	movw	r30, r12
    5d22:	44 91       	lpm	r20, Z
    5d24:	e7 fc       	sbrc	r14, 7
    5d26:	40 81       	ld	r20, Z
    5d28:	4d 93       	st	X+, r20
    5d2a:	4f ef       	ldi	r20, 0xFF	; 255
    5d2c:	c4 1a       	sub	r12, r20
    5d2e:	d4 0a       	sbc	r13, r20
    5d30:	e4 0a       	sbc	r14, r20
    5d32:	f3 cf       	rjmp	.-26     	; 0x5d1a <memcpy+0x10>
    5d34:	ef 90       	pop	r14
    5d36:	df 90       	pop	r13
    5d38:	cf 90       	pop	r12
    5d3a:	08 95       	ret

Disassembly of section .text.avrlibc:

00005f76 <strcat>:
    5f76:	9a 01       	movw	r18, r20
    5f78:	46 2f       	mov	r20, r22
    5f7a:	dc 01       	movw	r26, r24
    5f7c:	bd 01       	movw	r22, r26
    5f7e:	6f 5f       	subi	r22, 0xFF	; 255
    5f80:	7f 4f       	sbci	r23, 0xFF	; 255
    5f82:	5c 91       	ld	r21, X
    5f84:	55 23       	and	r21, r21
    5f86:	11 f0       	breq	.+4      	; 0x5f8c <strcat+0x16>
    5f88:	db 01       	movw	r26, r22
    5f8a:	f8 cf       	rjmp	.-16     	; 0x5f7c <strcat+0x6>
    5f8c:	f9 01       	movw	r30, r18
    5f8e:	54 91       	lpm	r21, Z
    5f90:	47 fd       	sbrc	r20, 7
    5f92:	50 81       	ld	r21, Z
    5f94:	5d 93       	st	X+, r21
    5f96:	55 23       	and	r21, r21
    5f98:	21 f0       	breq	.+8      	; 0x5fa2 <strcat+0x2c>
    5f9a:	2f 5f       	subi	r18, 0xFF	; 255
    5f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f9e:	4f 4f       	sbci	r20, 0xFF	; 255
    5fa0:	f5 cf       	rjmp	.-22     	; 0x5f8c <strcat+0x16>
    5fa2:	08 95       	ret

Disassembly of section .text.avrlibc:

0000569e <strcmp>:
    569e:	cf 92       	push	r12
    56a0:	df 92       	push	r13
    56a2:	ef 92       	push	r14
    56a4:	6b 01       	movw	r12, r22
    56a6:	e8 2e       	mov	r14, r24
    56a8:	f6 01       	movw	r30, r12
    56aa:	84 91       	lpm	r24, Z
    56ac:	e7 fc       	sbrc	r14, 7
    56ae:	80 81       	ld	r24, Z
    56b0:	f9 01       	movw	r30, r18
    56b2:	54 91       	lpm	r21, Z
    56b4:	47 fd       	sbrc	r20, 7
    56b6:	50 81       	ld	r21, Z
    56b8:	85 13       	cpse	r24, r21
    56ba:	0b c0       	rjmp	.+22     	; 0x56d2 <strcmp+0x34>
    56bc:	88 23       	and	r24, r24
    56be:	41 f0       	breq	.+16     	; 0x56d0 <strcmp+0x32>
    56c0:	8f ef       	ldi	r24, 0xFF	; 255
    56c2:	c8 1a       	sub	r12, r24
    56c4:	d8 0a       	sbc	r13, r24
    56c6:	e8 0a       	sbc	r14, r24
    56c8:	2f 5f       	subi	r18, 0xFF	; 255
    56ca:	3f 4f       	sbci	r19, 0xFF	; 255
    56cc:	4f 4f       	sbci	r20, 0xFF	; 255
    56ce:	ec cf       	rjmp	.-40     	; 0x56a8 <strcmp+0xa>
    56d0:	58 2f       	mov	r21, r24
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	85 1b       	sub	r24, r21
    56d6:	91 09       	sbc	r25, r1
    56d8:	ef 90       	pop	r14
    56da:	df 90       	pop	r13
    56dc:	cf 90       	pop	r12
    56de:	08 95       	ret

Disassembly of section .text.avrlibc:

00004844 <strncmp>:
    4844:	cf 92       	push	r12
    4846:	df 92       	push	r13
    4848:	ef 92       	push	r14
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	6b 01       	movw	r12, r22
    4850:	e8 2e       	mov	r14, r24
    4852:	01 15       	cp	r16, r1
    4854:	11 05       	cpc	r17, r1
    4856:	19 f1       	breq	.+70     	; 0x489e <strncmp+0x5a>
    4858:	01 50       	subi	r16, 0x01	; 1
    485a:	11 09       	sbc	r17, r1
    485c:	f6 01       	movw	r30, r12
    485e:	84 91       	lpm	r24, Z
    4860:	e7 fc       	sbrc	r14, 7
    4862:	80 81       	ld	r24, Z
    4864:	88 23       	and	r24, r24
    4866:	99 f0       	breq	.+38     	; 0x488e <strncmp+0x4a>
    4868:	f9 01       	movw	r30, r18
    486a:	94 91       	lpm	r25, Z
    486c:	47 fd       	sbrc	r20, 7
    486e:	90 81       	ld	r25, Z
    4870:	99 23       	and	r25, r25
    4872:	69 f0       	breq	.+26     	; 0x488e <strncmp+0x4a>
    4874:	01 15       	cp	r16, r1
    4876:	11 05       	cpc	r17, r1
    4878:	51 f0       	breq	.+20     	; 0x488e <strncmp+0x4a>
    487a:	89 13       	cpse	r24, r25
    487c:	08 c0       	rjmp	.+16     	; 0x488e <strncmp+0x4a>
    487e:	8f ef       	ldi	r24, 0xFF	; 255
    4880:	c8 1a       	sub	r12, r24
    4882:	d8 0a       	sbc	r13, r24
    4884:	e8 0a       	sbc	r14, r24
    4886:	2f 5f       	subi	r18, 0xFF	; 255
    4888:	3f 4f       	sbci	r19, 0xFF	; 255
    488a:	4f 4f       	sbci	r20, 0xFF	; 255
    488c:	e5 cf       	rjmp	.-54     	; 0x4858 <strncmp+0x14>
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	f9 01       	movw	r30, r18
    4892:	24 91       	lpm	r18, Z
    4894:	47 fd       	sbrc	r20, 7
    4896:	20 81       	ld	r18, Z
    4898:	82 1b       	sub	r24, r18
    489a:	91 09       	sbc	r25, r1
    489c:	02 c0       	rjmp	.+4      	; 0x48a2 <strncmp+0x5e>
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	1f 91       	pop	r17
    48a4:	0f 91       	pop	r16
    48a6:	ef 90       	pop	r14
    48a8:	df 90       	pop	r13
    48aa:	cf 90       	pop	r12
    48ac:	08 95       	ret

Disassembly of section .text.avrlibc:

00005fa4 <strlen>:
    5fa4:	cf 92       	push	r12
    5fa6:	df 92       	push	r13
    5fa8:	ef 92       	push	r14
    5faa:	6b 01       	movw	r12, r22
    5fac:	e8 2e       	mov	r14, r24
    5fae:	a8 2f       	mov	r26, r24
    5fb0:	cb 01       	movw	r24, r22
    5fb2:	fc 01       	movw	r30, r24
    5fb4:	24 91       	lpm	r18, Z
    5fb6:	a7 fd       	sbrc	r26, 7
    5fb8:	20 81       	ld	r18, Z
    5fba:	22 23       	and	r18, r18
    5fbc:	19 f0       	breq	.+6      	; 0x5fc4 <strlen+0x20>
    5fbe:	01 96       	adiw	r24, 0x01	; 1
    5fc0:	a1 1d       	adc	r26, r1
    5fc2:	f7 cf       	rjmp	.-18     	; 0x5fb2 <strlen+0xe>
    5fc4:	8c 19       	sub	r24, r12
    5fc6:	9d 09       	sbc	r25, r13
    5fc8:	ef 90       	pop	r14
    5fca:	df 90       	pop	r13
    5fcc:	cf 90       	pop	r12
    5fce:	08 95       	ret

Disassembly of section .text.avrlibc:

00006346 <strcpy>:
    6346:	9a 01       	movw	r18, r20
    6348:	46 2f       	mov	r20, r22
    634a:	dc 01       	movw	r26, r24
    634c:	f9 01       	movw	r30, r18
    634e:	54 91       	lpm	r21, Z
    6350:	47 fd       	sbrc	r20, 7
    6352:	50 81       	ld	r21, Z
    6354:	5d 93       	st	X+, r21
    6356:	55 23       	and	r21, r21
    6358:	21 f0       	breq	.+8      	; 0x6362 <strcpy+0x1c>
    635a:	2f 5f       	subi	r18, 0xFF	; 255
    635c:	3f 4f       	sbci	r19, 0xFF	; 255
    635e:	4f 4f       	sbci	r20, 0xFF	; 255
    6360:	f5 cf       	rjmp	.-22     	; 0x634c <strcpy+0x6>
    6362:	08 95       	ret

Disassembly of section .text.avrlibc:

00005b70 <strnlen>:
    5b70:	cf 92       	push	r12
    5b72:	df 92       	push	r13
    5b74:	ef 92       	push	r14
    5b76:	6b 01       	movw	r12, r22
    5b78:	e8 2e       	mov	r14, r24
    5b7a:	a8 2f       	mov	r26, r24
    5b7c:	cb 01       	movw	r24, r22
    5b7e:	41 15       	cp	r20, r1
    5b80:	51 05       	cpc	r21, r1
    5b82:	31 f4       	brne	.+12     	; 0x5b90 <strnlen+0x20>
    5b84:	8c 19       	sub	r24, r12
    5b86:	9d 09       	sbc	r25, r13
    5b88:	ef 90       	pop	r14
    5b8a:	df 90       	pop	r13
    5b8c:	cf 90       	pop	r12
    5b8e:	08 95       	ret
    5b90:	fc 01       	movw	r30, r24
    5b92:	24 91       	lpm	r18, Z
    5b94:	a7 fd       	sbrc	r26, 7
    5b96:	20 81       	ld	r18, Z
    5b98:	22 23       	and	r18, r18
    5b9a:	a1 f3       	breq	.-24     	; 0x5b84 <strnlen+0x14>
    5b9c:	01 96       	adiw	r24, 0x01	; 1
    5b9e:	a1 1d       	adc	r26, r1
    5ba0:	41 50       	subi	r20, 0x01	; 1
    5ba2:	51 09       	sbc	r21, r1
    5ba4:	ec cf       	rjmp	.-40     	; 0x5b7e <strnlen+0xe>

Disassembly of section .text.avrlibc:

000044bc <fputc>:
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	fb 01       	movw	r30, r22
    44c6:	24 81       	ldd	r18, Z+4	; 0x04
    44c8:	21 fd       	sbrc	r18, 1
    44ca:	03 c0       	rjmp	.+6      	; 0x44d2 <fputc+0x16>
    44cc:	8f ef       	ldi	r24, 0xFF	; 255
    44ce:	9f ef       	ldi	r25, 0xFF	; 255
    44d0:	2c c0       	rjmp	.+88     	; 0x452a <fputc+0x6e>
    44d2:	22 ff       	sbrs	r18, 2
    44d4:	16 c0       	rjmp	.+44     	; 0x4502 <fputc+0x46>
    44d6:	47 81       	ldd	r20, Z+7	; 0x07
    44d8:	50 85       	ldd	r21, Z+8	; 0x08
    44da:	25 81       	ldd	r18, Z+5	; 0x05
    44dc:	36 81       	ldd	r19, Z+6	; 0x06
    44de:	42 17       	cp	r20, r18
    44e0:	53 07       	cpc	r21, r19
    44e2:	44 f4       	brge	.+16     	; 0x44f4 <fputc+0x38>
    44e4:	a0 81       	ld	r26, Z
    44e6:	b1 81       	ldd	r27, Z+1	; 0x01
    44e8:	9d 01       	movw	r18, r26
    44ea:	2f 5f       	subi	r18, 0xFF	; 255
    44ec:	3f 4f       	sbci	r19, 0xFF	; 255
    44ee:	31 83       	std	Z+1, r19	; 0x01
    44f0:	20 83       	st	Z, r18
    44f2:	8c 93       	st	X, r24
    44f4:	27 81       	ldd	r18, Z+7	; 0x07
    44f6:	30 85       	ldd	r19, Z+8	; 0x08
    44f8:	2f 5f       	subi	r18, 0xFF	; 255
    44fa:	3f 4f       	sbci	r19, 0xFF	; 255
    44fc:	30 87       	std	Z+8, r19	; 0x08
    44fe:	27 83       	std	Z+7, r18	; 0x07
    4500:	14 c0       	rjmp	.+40     	; 0x452a <fputc+0x6e>
    4502:	8b 01       	movw	r16, r22
    4504:	ec 01       	movw	r28, r24
    4506:	fb 01       	movw	r30, r22
    4508:	01 84       	ldd	r0, Z+9	; 0x09
    450a:	f2 85       	ldd	r31, Z+10	; 0x0a
    450c:	e0 2d       	mov	r30, r0
    450e:	09 95       	icall
    4510:	89 2b       	or	r24, r25
    4512:	e1 f6       	brne	.-72     	; 0x44cc <fputc+0x10>
    4514:	d8 01       	movw	r26, r16
    4516:	17 96       	adiw	r26, 0x07	; 7
    4518:	8d 91       	ld	r24, X+
    451a:	9c 91       	ld	r25, X
    451c:	18 97       	sbiw	r26, 0x08	; 8
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	18 96       	adiw	r26, 0x08	; 8
    4522:	9c 93       	st	X, r25
    4524:	8e 93       	st	-X, r24
    4526:	17 97       	sbiw	r26, 0x07	; 7
    4528:	ce 01       	movw	r24, r28
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	1f 91       	pop	r17
    4530:	0f 91       	pop	r16
    4532:	08 95       	ret

Disassembly of section .text.avrlibc:

00005508 <sprintf>:
    5508:	af e0       	ldi	r26, 0x0F	; 15
    550a:	b0 e0       	ldi	r27, 0x00	; 0
    550c:	ea e8       	ldi	r30, 0x8A	; 138
    550e:	fa e2       	ldi	r31, 0x2A	; 42
    5510:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__prologue_saves__+0x1c>
    5514:	0e 89       	ldd	r16, Y+22	; 0x16
    5516:	1f 89       	ldd	r17, Y+23	; 0x17
    5518:	86 e0       	ldi	r24, 0x06	; 6
    551a:	8d 83       	std	Y+5, r24	; 0x05
    551c:	1a 83       	std	Y+2, r17	; 0x02
    551e:	09 83       	std	Y+1, r16	; 0x01
    5520:	8f ef       	ldi	r24, 0xFF	; 255
    5522:	9f e7       	ldi	r25, 0x7F	; 127
    5524:	9f 83       	std	Y+7, r25	; 0x07
    5526:	8e 83       	std	Y+6, r24	; 0x06
    5528:	9e 01       	movw	r18, r28
    552a:	25 5e       	subi	r18, 0xE5	; 229
    552c:	3f 4f       	sbci	r19, 0xFF	; 255
    552e:	48 8d       	ldd	r20, Y+24	; 0x18
    5530:	59 8d       	ldd	r21, Y+25	; 0x19
    5532:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5534:	ce 01       	movw	r24, r28
    5536:	01 96       	adiw	r24, 0x01	; 1
    5538:	0e 94 68 04 	call	0x8d0	; 0x8d0 <vfprintf>
    553c:	e8 85       	ldd	r30, Y+8	; 0x08
    553e:	f9 85       	ldd	r31, Y+9	; 0x09
    5540:	e0 0f       	add	r30, r16
    5542:	f1 1f       	adc	r31, r17
    5544:	10 82       	st	Z, r1
    5546:	2f 96       	adiw	r28, 0x0f	; 15
    5548:	e4 e0       	ldi	r30, 0x04	; 4
    554a:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00003768 <__ultoa_invert>:
    3768:	fa 01       	movw	r30, r20
    376a:	aa 27       	eor	r26, r26
    376c:	28 30       	cpi	r18, 0x08	; 8
    376e:	51 f1       	breq	.+84     	; 0x37c4 <__ultoa_invert+0x5c>
    3770:	20 31       	cpi	r18, 0x10	; 16
    3772:	81 f1       	breq	.+96     	; 0x37d4 <__ultoa_invert+0x6c>
    3774:	e8 94       	clt
    3776:	6f 93       	push	r22
    3778:	6e 7f       	andi	r22, 0xFE	; 254
    377a:	6e 5f       	subi	r22, 0xFE	; 254
    377c:	7f 4f       	sbci	r23, 0xFF	; 255
    377e:	8f 4f       	sbci	r24, 0xFF	; 255
    3780:	9f 4f       	sbci	r25, 0xFF	; 255
    3782:	af 4f       	sbci	r26, 0xFF	; 255
    3784:	b1 e0       	ldi	r27, 0x01	; 1
    3786:	3e d0       	rcall	.+124    	; 0x3804 <__ultoa_invert+0x9c>
    3788:	b4 e0       	ldi	r27, 0x04	; 4
    378a:	3c d0       	rcall	.+120    	; 0x3804 <__ultoa_invert+0x9c>
    378c:	67 0f       	add	r22, r23
    378e:	78 1f       	adc	r23, r24
    3790:	89 1f       	adc	r24, r25
    3792:	9a 1f       	adc	r25, r26
    3794:	a1 1d       	adc	r26, r1
    3796:	68 0f       	add	r22, r24
    3798:	79 1f       	adc	r23, r25
    379a:	8a 1f       	adc	r24, r26
    379c:	91 1d       	adc	r25, r1
    379e:	a1 1d       	adc	r26, r1
    37a0:	6a 0f       	add	r22, r26
    37a2:	71 1d       	adc	r23, r1
    37a4:	81 1d       	adc	r24, r1
    37a6:	91 1d       	adc	r25, r1
    37a8:	a1 1d       	adc	r26, r1
    37aa:	20 d0       	rcall	.+64     	; 0x37ec <__ultoa_invert+0x84>
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <__ultoa_invert+0x48>
    37ae:	68 94       	set
    37b0:	3f 91       	pop	r19
    37b2:	2a e0       	ldi	r18, 0x0A	; 10
    37b4:	26 9f       	mul	r18, r22
    37b6:	11 24       	eor	r1, r1
    37b8:	30 19       	sub	r19, r0
    37ba:	30 5d       	subi	r19, 0xD0	; 208
    37bc:	31 93       	st	Z+, r19
    37be:	de f6       	brtc	.-74     	; 0x3776 <__ultoa_invert+0xe>
    37c0:	cf 01       	movw	r24, r30
    37c2:	08 95       	ret
    37c4:	46 2f       	mov	r20, r22
    37c6:	47 70       	andi	r20, 0x07	; 7
    37c8:	40 5d       	subi	r20, 0xD0	; 208
    37ca:	41 93       	st	Z+, r20
    37cc:	b3 e0       	ldi	r27, 0x03	; 3
    37ce:	0f d0       	rcall	.+30     	; 0x37ee <__ultoa_invert+0x86>
    37d0:	c9 f7       	brne	.-14     	; 0x37c4 <__ultoa_invert+0x5c>
    37d2:	f6 cf       	rjmp	.-20     	; 0x37c0 <__ultoa_invert+0x58>
    37d4:	46 2f       	mov	r20, r22
    37d6:	4f 70       	andi	r20, 0x0F	; 15
    37d8:	40 5d       	subi	r20, 0xD0	; 208
    37da:	4a 33       	cpi	r20, 0x3A	; 58
    37dc:	18 f0       	brcs	.+6      	; 0x37e4 <__ultoa_invert+0x7c>
    37de:	49 5d       	subi	r20, 0xD9	; 217
    37e0:	31 fd       	sbrc	r19, 1
    37e2:	40 52       	subi	r20, 0x20	; 32
    37e4:	41 93       	st	Z+, r20
    37e6:	02 d0       	rcall	.+4      	; 0x37ec <__ultoa_invert+0x84>
    37e8:	a9 f7       	brne	.-22     	; 0x37d4 <__ultoa_invert+0x6c>
    37ea:	ea cf       	rjmp	.-44     	; 0x37c0 <__ultoa_invert+0x58>
    37ec:	b4 e0       	ldi	r27, 0x04	; 4
    37ee:	a6 95       	lsr	r26
    37f0:	97 95       	ror	r25
    37f2:	87 95       	ror	r24
    37f4:	77 95       	ror	r23
    37f6:	67 95       	ror	r22
    37f8:	ba 95       	dec	r27
    37fa:	c9 f7       	brne	.-14     	; 0x37ee <__ultoa_invert+0x86>
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	61 05       	cpc	r22, r1
    3800:	71 05       	cpc	r23, r1
    3802:	08 95       	ret
    3804:	9b 01       	movw	r18, r22
    3806:	ac 01       	movw	r20, r24
    3808:	0a 2e       	mov	r0, r26
    380a:	06 94       	lsr	r0
    380c:	57 95       	ror	r21
    380e:	47 95       	ror	r20
    3810:	37 95       	ror	r19
    3812:	27 95       	ror	r18
    3814:	ba 95       	dec	r27
    3816:	c9 f7       	brne	.-14     	; 0x380a <__ultoa_invert+0xa2>
    3818:	62 0f       	add	r22, r18
    381a:	73 1f       	adc	r23, r19
    381c:	84 1f       	adc	r24, r20
    381e:	95 1f       	adc	r25, r21
    3820:	a0 1d       	adc	r26, r0
    3822:	08 95       	ret

Disassembly of section .text.avrlibc:

000069b6 <__ctype_isfalse>:
    69b6:	99 27       	eor	r25, r25
    69b8:	88 27       	eor	r24, r24

000069ba <__ctype_istrue>:
    69ba:	08 95       	ret

Disassembly of section .text.avrlibc:

000060be <eeprom_read_block>:
    60be:	ba 01       	movw	r22, r20
    60c0:	a9 01       	movw	r20, r18
    60c2:	dc 01       	movw	r26, r24
    60c4:	cb 01       	movw	r24, r22

000060c6 <eeprom_read_blraw>:
    60c6:	fc 01       	movw	r30, r24
    60c8:	f9 99       	sbic	0x1f, 1	; 31
    60ca:	fe cf       	rjmp	.-4      	; 0x60c8 <eeprom_read_blraw+0x2>
    60cc:	06 c0       	rjmp	.+12     	; 0x60da <eeprom_read_blraw+0x14>
    60ce:	f2 bd       	out	0x22, r31	; 34
    60d0:	e1 bd       	out	0x21, r30	; 33
    60d2:	f8 9a       	sbi	0x1f, 0	; 31
    60d4:	31 96       	adiw	r30, 0x01	; 1
    60d6:	00 b4       	in	r0, 0x20	; 32
    60d8:	0d 92       	st	X+, r0
    60da:	41 50       	subi	r20, 0x01	; 1
    60dc:	50 40       	sbci	r21, 0x00	; 0
    60de:	b8 f7       	brcc	.-18     	; 0x60ce <eeprom_read_blraw+0x8>
    60e0:	08 95       	ret

Disassembly of section .text.avrlibc:

0000665e <eeprom_read_byte>:
    665e:	cb 01       	movw	r24, r22
    6660:	f9 99       	sbic	0x1f, 1	; 31
    6662:	fe cf       	rjmp	.-4      	; 0x6660 <eeprom_read_byte+0x2>
    6664:	92 bd       	out	0x22, r25	; 34
    6666:	81 bd       	out	0x21, r24	; 33
    6668:	f8 9a       	sbi	0x1f, 0	; 31
    666a:	99 27       	eor	r25, r25
    666c:	80 b5       	in	r24, 0x20	; 32
    666e:	08 95       	ret

Disassembly of section .text.avrlibc:

000067c6 <eeprom_read_dword>:
    67c6:	cb 01       	movw	r24, r22
    67c8:	a6 e1       	ldi	r26, 0x16	; 22
    67ca:	b0 e0       	ldi	r27, 0x00	; 0
    67cc:	44 e0       	ldi	r20, 0x04	; 4
    67ce:	50 e0       	ldi	r21, 0x00	; 0
    67d0:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000067d4 <eeprom_read_word>:
    67d4:	cb 01       	movw	r24, r22
    67d6:	a8 e1       	ldi	r26, 0x18	; 24
    67d8:	b0 e0       	ldi	r27, 0x00	; 0
    67da:	42 e0       	ldi	r20, 0x02	; 2
    67dc:	50 e0       	ldi	r21, 0x00	; 0
    67de:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00005592 <eeprom_update_block>:
    5592:	cf 92       	push	r12
    5594:	df 92       	push	r13
    5596:	ef 92       	push	r14
    5598:	21 50       	subi	r18, 0x01	; 1
    559a:	31 09       	sbc	r19, r1
    559c:	c0 f0       	brcs	.+48     	; 0x55ce <eeprom_update_block+0x3c>
    559e:	6b 01       	movw	r12, r22
    55a0:	e8 2e       	mov	r14, r24
    55a2:	c2 0e       	add	r12, r18
    55a4:	d3 1e       	adc	r13, r19
    55a6:	e1 1c       	adc	r14, r1
    55a8:	ca 01       	movw	r24, r20
    55aa:	82 0f       	add	r24, r18
    55ac:	93 1f       	adc	r25, r19
    55ae:	42 2f       	mov	r20, r18
    55b0:	73 2f       	mov	r23, r19
    55b2:	f6 01       	movw	r30, r12
    55b4:	5e 2d       	mov	r21, r14
    55b6:	0e 94 7d 34 	call	0x68fa	; 0x68fa <__xload_1>
    55ba:	26 2f       	mov	r18, r22
    55bc:	0e 94 72 30 	call	0x60e4	; 0x60e4 <eeprom_update_r18>
    55c0:	31 e0       	ldi	r19, 0x01	; 1
    55c2:	c3 1a       	sub	r12, r19
    55c4:	d1 08       	sbc	r13, r1
    55c6:	e1 08       	sbc	r14, r1
    55c8:	41 50       	subi	r20, 0x01	; 1
    55ca:	70 40       	sbci	r23, 0x00	; 0
    55cc:	90 f7       	brcc	.-28     	; 0x55b2 <eeprom_update_block+0x20>
    55ce:	ef 90       	pop	r14
    55d0:	df 90       	pop	r13
    55d2:	cf 90       	pop	r12
    55d4:	08 95       	ret

Disassembly of section .text.avrlibc:

000060e2 <eeprom_update_byte>:
    60e2:	26 2f       	mov	r18, r22

000060e4 <eeprom_update_r18>:
    60e4:	f9 99       	sbic	0x1f, 1	; 31
    60e6:	fe cf       	rjmp	.-4      	; 0x60e4 <eeprom_update_r18>
    60e8:	92 bd       	out	0x22, r25	; 34
    60ea:	81 bd       	out	0x21, r24	; 33
    60ec:	f8 9a       	sbi	0x1f, 0	; 31
    60ee:	01 97       	sbiw	r24, 0x01	; 1
    60f0:	00 b4       	in	r0, 0x20	; 32
    60f2:	02 16       	cp	r0, r18
    60f4:	39 f0       	breq	.+14     	; 0x6104 <eeprom_update_r18+0x20>
    60f6:	1f ba       	out	0x1f, r1	; 31
    60f8:	20 bd       	out	0x20, r18	; 32
    60fa:	0f b6       	in	r0, 0x3f	; 63
    60fc:	f8 94       	cli
    60fe:	fa 9a       	sbi	0x1f, 2	; 31
    6100:	f9 9a       	sbi	0x1f, 1	; 31
    6102:	0f be       	out	0x3f, r0	; 63
    6104:	08 95       	ret

Disassembly of section .text.avrlibc:

000064a2 <eeprom_update_dword>:
    64a2:	03 96       	adiw	r24, 0x03	; 3
    64a4:	27 2f       	mov	r18, r23
    64a6:	0e 94 72 30 	call	0x60e4	; 0x60e4 <eeprom_update_r18>
    64aa:	0e 94 71 30 	call	0x60e2	; 0x60e2 <eeprom_update_byte>
    64ae:	25 2f       	mov	r18, r21
    64b0:	0e 94 72 30 	call	0x60e4	; 0x60e4 <eeprom_update_r18>
    64b4:	24 2f       	mov	r18, r20
    64b6:	0c 94 72 30 	jmp	0x60e4	; 0x60e4 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

0000688a <eeprom_update_word>:
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	27 2f       	mov	r18, r23
    688e:	0e 94 72 30 	call	0x60e4	; 0x60e4 <eeprom_update_r18>
    6892:	0c 94 71 30 	jmp	0x60e2	; 0x60e2 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006272 <__mulsi3>:
    6272:	db 01       	movw	r26, r22
    6274:	8f 93       	push	r24
    6276:	9f 93       	push	r25
    6278:	0e 94 89 32 	call	0x6512	; 0x6512 <__muluhisi3>
    627c:	bf 91       	pop	r27
    627e:	af 91       	pop	r26
    6280:	a2 9f       	mul	r26, r18
    6282:	80 0d       	add	r24, r0
    6284:	91 1d       	adc	r25, r1
    6286:	a3 9f       	mul	r26, r19
    6288:	90 0d       	add	r25, r0
    628a:	b2 9f       	mul	r27, r18
    628c:	90 0d       	add	r25, r0
    628e:	11 24       	eor	r1, r1
    6290:	08 95       	ret

Disassembly of section .text.libgcc.div:

000055d6 <__udivmodsi4>:
    55d6:	a1 e2       	ldi	r26, 0x21	; 33
    55d8:	1a 2e       	mov	r1, r26
    55da:	aa 1b       	sub	r26, r26
    55dc:	bb 1b       	sub	r27, r27
    55de:	fd 01       	movw	r30, r26
    55e0:	0d c0       	rjmp	.+26     	; 0x55fc <__udivmodsi4_ep>

000055e2 <__udivmodsi4_loop>:
    55e2:	aa 1f       	adc	r26, r26
    55e4:	bb 1f       	adc	r27, r27
    55e6:	ee 1f       	adc	r30, r30
    55e8:	ff 1f       	adc	r31, r31
    55ea:	a2 17       	cp	r26, r18
    55ec:	b3 07       	cpc	r27, r19
    55ee:	e4 07       	cpc	r30, r20
    55f0:	f5 07       	cpc	r31, r21
    55f2:	20 f0       	brcs	.+8      	; 0x55fc <__udivmodsi4_ep>
    55f4:	a2 1b       	sub	r26, r18
    55f6:	b3 0b       	sbc	r27, r19
    55f8:	e4 0b       	sbc	r30, r20
    55fa:	f5 0b       	sbc	r31, r21

000055fc <__udivmodsi4_ep>:
    55fc:	66 1f       	adc	r22, r22
    55fe:	77 1f       	adc	r23, r23
    5600:	88 1f       	adc	r24, r24
    5602:	99 1f       	adc	r25, r25
    5604:	1a 94       	dec	r1
    5606:	69 f7       	brne	.-38     	; 0x55e2 <__udivmodsi4_loop>
    5608:	60 95       	com	r22
    560a:	70 95       	com	r23
    560c:	80 95       	com	r24
    560e:	90 95       	com	r25
    5610:	9b 01       	movw	r18, r22
    5612:	ac 01       	movw	r20, r24
    5614:	bd 01       	movw	r22, r26
    5616:	cf 01       	movw	r24, r30
    5618:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00006512 <__muluhisi3>:
    6512:	0e 94 94 31 	call	0x6328	; 0x6328 <__umulhisi3>
    6516:	a5 9f       	mul	r26, r21
    6518:	90 0d       	add	r25, r0
    651a:	b4 9f       	mul	r27, r20
    651c:	90 0d       	add	r25, r0
    651e:	a4 9f       	mul	r26, r20
    6520:	80 0d       	add	r24, r0
    6522:	91 1d       	adc	r25, r1
    6524:	11 24       	eor	r1, r1
    6526:	08 95       	ret

Disassembly of section .text.libgcc:

000068fa <__xload_1>:
    68fa:	57 fd       	sbrc	r21, 7
    68fc:	60 81       	ld	r22, Z
    68fe:	57 ff       	sbrs	r21, 7
    6900:	64 91       	lpm	r22, Z
    6902:	08 95       	ret
