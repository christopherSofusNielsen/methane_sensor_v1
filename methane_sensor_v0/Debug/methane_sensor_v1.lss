
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001132  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800100  00800100  00001132  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  0000118d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004c64  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000153e  00000000  00000000  00006199  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aa0  00000000  00000000  000076d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000089c  00000000  00000000  00009178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000513  00000000  00000000  00009a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001730  00000000  00000000  00009f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000b657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00001058  00001058  0000112c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b960  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_SCD30_power_init 0000000e  00000ffa  00000ffa  000010ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_SCD30_power 00000014  00000f8a  00000f8a  0000105e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000014  00000f9e  00000f9e  00001072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SCD30_HAL_init 0000000e  00001008  00001008  000010dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.SCD30_HAL_data_ready 0000000a  00001048  00001048  0000111c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_16 00000094  00000766  00000766  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.cnt     00000002  00800362  0000105c  00001130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.TC1_HAL_init 00000034  00000e64  00000e64  00000f38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TC1_HAL_start 0000000c  00001024  00001024  000010f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TC1_HAL_stop 0000000c  00001030  00001030  00001104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_13 0000004e  00000a82  00000a82  00000b56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.start_and_write_data 0000004c  00000b1e  00000b1e  00000bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.TWI_API_write_data_stop 00000010  00000fda  00000fda  000010ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.TWI_API_read_data_ack_end_nack_stop 00000064  000009c0  000009c0  00000a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TWI_HAL_start 00000048  00000bfe  00000bfe  00000cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.TWI_HAL_write_byte 00000020  00000ef6  00000ef6  00000fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.TWI_HAL_read_byte_ack 00000014  00000fb2  00000fb2  00001086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.TWI_HAL_read_byte_nack 00000014  00000fc6  00000fc6  0000109a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.TWI_HAL_stop 00000010  00000fea  00000fea  000010be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_22 0000004a  00000b6a  00000b6a  00000c3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_20 00000074  00000872  00000872  00000946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.rx_buffer_has_message 00000001  00800364  00800364  00001132  2**0
                  ALLOC
 36 .bss.rx_buffer_data_len 00000001  00800365  00800365  00001132  2**0
                  ALLOC
 37 .bss.tx_buffer_cursor 00000001  00800366  00800366  00001132  2**0
                  ALLOC
 38 .bss.tx_buffer_data_len 00000001  00800367  00800367  00001132  2**0
                  ALLOC
 39 .text.uart1_hal_init 0000003c  00000d16  00000d16  00000dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.uart1_hal_send_string 0000006a  00000956  00000956  00000a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_30 0000004a  00000bb4  00000bb4  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_28 00000070  000008e6  000008e6  000009ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .bss.rx_buffer_has_message 00000001  00800368  00800368  00001132  2**0
                  ALLOC
 44 .bss.rx_buffer_data_len 00000001  00800369  00800369  00001132  2**0
                  ALLOC
 45 .bss.rx_buffer 00000064  008002fe  008002fe  00001132  2**0
                  ALLOC
 46 .bss.tx_buffer_cursor 00000001  0080036a  0080036a  00001132  2**0
                  ALLOC
 47 .bss.tx_buffer_data_len 00000001  0080036b  0080036b  00001132  2**0
                  ALLOC
 48 .bss.tx_buffer 000000c8  00800236  00800236  00001132  2**0
                  ALLOC
 49 .text.main    00000006  00001052  00001052  00001126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.bytes_2_uint 0000001a  00000f70  00000f70  00001044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.init_measurement 00000038  00000d52  00000d52  00000e26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.validate_data 00000032  00000e98  00000e98  00000f6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.read_value 000000a2  000006c4  000006c4  00000798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.vect_SCD_do_sample 00000046  00000c46  00000c46  00000d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SCD30_init_sampling 0000004e  00000ad0  00000ad0  00000ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.SCD30_start_sampling 0000000c  0000103c  0000103c  00001110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.SCD30_is_sampling_done 0000001c  00000f54  00000f54  00001028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .progmemx.data.READ_DATA_CMD 00000002  000000f7  000000f7  000001cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 59 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000000ed  000000ed  000001c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 60 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000000f2  000000f2  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 61 .progmemx.data 0000000b  000000e2  000000e2  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 62 .text.test_sampling 000000c6  00000542  00000542  00000616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.test_SCD30_module_start 00000020  00000f16  00000f16  00000fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.calc_crc8 00000036  00000dc2  00000dc2  00000e96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.avrlibc.fplib 0000005e  00000a24  00000a24  00000af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.avrlibc.fplib 00000044  00000cd2  00000cd2  00000da6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.avrlibc.fplib 0000000e  00001016  00001016  000010ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.libgcc.mul 0000001e  00000f36  00000f36  0000100a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.avrlibc 0000002c  00000eca  00000eca  00000f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.avrlibc 00000046  00000c8c  00000c8c  00000d60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.avrlibc 00000448  000000fa  000000fa  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.avrlibc 00000036  00000df8  00000df8  00000ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.avrlibc 00000078  000007fa  000007fa  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.avrlibc 000000bc  00000608  00000608  000006dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.libgcc.prologue 00000038  00000d8a  00000d8a  00000e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.libgcc.prologue 00000036  00000e2e  00000e2e  00000f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_1>
   8:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
   c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  10:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  14:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  18:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  1c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  20:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  24:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  28:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  2c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  30:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  34:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_13>
  38:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  3c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  40:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_16>
  44:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  48:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  4c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  50:	0c 94 39 04 	jmp	0x872	; 0x872 <__vector_20>
  54:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  58:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_22>
  5c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  60:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  64:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  68:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  6c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  70:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_28>
  74:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__bad_interrupt>
  78:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	03 62       	ori	r16, 0x23	; 35
  80:	80 03       	fmuls	r16, r16
  82:	62 03       	mulsu	r22, r18
  84:	64 00       	.word	0x0064	; ????
  86:	10 5c       	subi	r17, 0xC0	; 192
  88:	03 64       	ori	r16, 0x43	; 67
  8a:	03 6c       	ori	r16, 0xC3	; 195
  8c:	80 00       	.word	0x0080	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	17 c0       	rjmp	.+46     	; 0xd0 <__do_clear_bss+0x8>
  a2:	b5 91       	lpm	r27, Z+
  a4:	a5 91       	lpm	r26, Z+
  a6:	35 91       	lpm	r19, Z+
  a8:	25 91       	lpm	r18, Z+
  aa:	05 91       	lpm	r16, Z+
  ac:	07 fd       	sbrc	r16, 7
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <__do_clear_bss>
  b0:	95 91       	lpm	r25, Z+
  b2:	85 91       	lpm	r24, Z+
  b4:	ef 01       	movw	r28, r30
  b6:	f9 2f       	mov	r31, r25
  b8:	e8 2f       	mov	r30, r24
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x20>
  c4:	fe 01       	movw	r30, r28
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__do_clear_bss+0x8>

000000c8 <__do_clear_bss>:
  c8:	1d 92       	st	X+, r1
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__do_clear_bss>
  d0:	ed 38       	cpi	r30, 0x8D	; 141
  d2:	f4 07       	cpc	r31, r20
  d4:	31 f7       	brne	.-52     	; 0xa2 <__do_copy_data+0x8>
  d6:	0e 94 29 08 	call	0x1052	; 0x1052 <main>
  da:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>

Disassembly of section .text:

00001058 <__bad_interrupt>:
    1058:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_SCD30_power_init:

00000ffa <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
     ffa:	81 b1       	in	r24, 0x01	; 1
     ffc:	80 61       	ori	r24, 0x10	; 16
     ffe:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    1000:	82 b1       	in	r24, 0x02	; 2
    1002:	8f 7e       	andi	r24, 0xEF	; 239
    1004:	82 b9       	out	0x02, r24	; 2
    1006:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00000f8a <PM_HAL_SCD30_power>:

void PM_HAL_meth_power(bool on){
	if(on){
		set_bit(PORTA, 5);
	}else{
		clear_bit(PORTA, 5);
 f8a:	88 23       	and	r24, r24
 f8c:	21 f0       	breq	.+8      	; 0xf96 <PM_HAL_SCD30_power+0xc>
 f8e:	82 b1       	in	r24, 0x02	; 2
 f90:	80 61       	ori	r24, 0x10	; 16
 f92:	82 b9       	out	0x02, r24	; 2
 f94:	08 95       	ret
 f96:	82 b1       	in	r24, 0x02	; 2
 f98:	8f 7e       	andi	r24, 0xEF	; 239
 f9a:	82 b9       	out	0x02, r24	; 2
 f9c:	08 95       	ret

Disassembly of section .text.__vector_1:

00000f9e <__vector_1>:
 f9e:	1f 92       	push	r1
 fa0:	0f 92       	push	r0
 fa2:	0f b6       	in	r0, 0x3f	; 63
 fa4:	0f 92       	push	r0
 fa6:	11 24       	eor	r1, r1
 fa8:	0f 90       	pop	r0
 faa:	0f be       	out	0x3f, r0	; 63
 fac:	0f 90       	pop	r0
 fae:	1f 90       	pop	r1
 fb0:	18 95       	reti

Disassembly of section .text.SCD30_HAL_init:

00001008 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    1008:	87 b1       	in	r24, 0x07	; 7
    100a:	8f 7b       	andi	r24, 0xBF	; 191
    100c:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    100e:	88 b1       	in	r24, 0x08	; 8
    1010:	8f 7b       	andi	r24, 0xBF	; 191
    1012:	88 b9       	out	0x08, r24	; 8
    1014:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00001048 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    1048:	86 b1       	in	r24, 0x06	; 6
    104a:	86 fb       	bst	r24, 6
    104c:	88 27       	eor	r24, r24
    104e:	80 f9       	bld	r24, 0
    1050:	08 95       	ret

Disassembly of section .text.__vector_16:

00000766 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; //Set clock NOTE, this should be changed!
}

ISR(TIMER0_COMPA_vect){
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	2f 93       	push	r18
 772:	3f 93       	push	r19
 774:	4f 93       	push	r20
 776:	5f 93       	push	r21
 778:	6f 93       	push	r22
 77a:	7f 93       	push	r23
 77c:	8f 93       	push	r24
 77e:	9f 93       	push	r25
 780:	af 93       	push	r26
 782:	bf 93       	push	r27
 784:	ef 93       	push	r30
 786:	ff 93       	push	r31
	//Only for test
	cnt++;
 788:	40 91 62 03 	lds	r20, 0x0362	; 0x800362 <cnt>
 78c:	50 91 63 03 	lds	r21, 0x0363	; 0x800363 <cnt+0x1>
 790:	4f 5f       	subi	r20, 0xFF	; 255
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	50 93 63 03 	sts	0x0363, r21	; 0x800363 <cnt+0x1>
 798:	40 93 62 03 	sts	0x0362, r20	; 0x800362 <cnt>
	if(cnt%10==0){
 79c:	9a 01       	movw	r18, r20
 79e:	ad ec       	ldi	r26, 0xCD	; 205
 7a0:	bc ec       	ldi	r27, 0xCC	; 204
 7a2:	0e 94 9b 07 	call	0xf36	; 0xf36 <__umulhisi3>
 7a6:	96 95       	lsr	r25
 7a8:	87 95       	ror	r24
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	96 95       	lsr	r25
 7b0:	87 95       	ror	r24
 7b2:	9c 01       	movw	r18, r24
 7b4:	22 0f       	add	r18, r18
 7b6:	33 1f       	adc	r19, r19
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	82 0f       	add	r24, r18
 7c6:	93 1f       	adc	r25, r19
 7c8:	48 17       	cp	r20, r24
 7ca:	59 07       	cpc	r21, r25
 7cc:	29 f4       	brne	.+10     	; 0x7d8 <__vector_16+0x72>
		_cb();		
 7ce:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7d2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7d6:	09 95       	icall
	}
}
 7d8:	ff 91       	pop	r31
 7da:	ef 91       	pop	r30
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	7f 91       	pop	r23
 7e6:	6f 91       	pop	r22
 7e8:	5f 91       	pop	r21
 7ea:	4f 91       	pop	r20
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	0f 90       	pop	r0
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	0f 90       	pop	r0
 7f6:	1f 90       	pop	r1
 7f8:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00000e64 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
 e64:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
 e68:	28 e0       	ldi	r18, 0x08	; 8
 e6a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
 e6e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
 e72:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 e76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
 e7a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
 e7e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
 e82:	ef e6       	ldi	r30, 0x6F	; 111
 e84:	f0 e0       	ldi	r31, 0x00	; 0
 e86:	80 81       	ld	r24, Z
 e88:	82 60       	ori	r24, 0x02	; 2
 e8a:	80 83       	st	Z, r24
	sei();
 e8c:	78 94       	sei
	
	_cb=cb; //Set callback pointer
 e8e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 e92:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 e96:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00001024 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000101);
    1024:	e1 e8       	ldi	r30, 0x81	; 129
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	85 60       	ori	r24, 0x05	; 5
    102c:	80 83       	st	Z, r24
    102e:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00001030 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    1030:	e1 e8       	ldi	r30, 0x81	; 129
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 7f       	andi	r24, 0xF8	; 248
    1038:	80 83       	st	Z, r24
    103a:	08 95       	ret

Disassembly of section .text.__vector_13:

00000a82 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 a82:	1f 92       	push	r1
 a84:	0f 92       	push	r0
 a86:	0f b6       	in	r0, 0x3f	; 63
 a88:	0f 92       	push	r0
 a8a:	11 24       	eor	r1, r1
 a8c:	2f 93       	push	r18
 a8e:	3f 93       	push	r19
 a90:	4f 93       	push	r20
 a92:	5f 93       	push	r21
 a94:	6f 93       	push	r22
 a96:	7f 93       	push	r23
 a98:	8f 93       	push	r24
 a9a:	9f 93       	push	r25
 a9c:	af 93       	push	r26
 a9e:	bf 93       	push	r27
 aa0:	ef 93       	push	r30
 aa2:	ff 93       	push	r31
	_cb();
 aa4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 aa8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 aac:	09 95       	icall
 aae:	ff 91       	pop	r31
 ab0:	ef 91       	pop	r30
 ab2:	bf 91       	pop	r27
 ab4:	af 91       	pop	r26
 ab6:	9f 91       	pop	r25
 ab8:	8f 91       	pop	r24
 aba:	7f 91       	pop	r23
 abc:	6f 91       	pop	r22
 abe:	5f 91       	pop	r21
 ac0:	4f 91       	pop	r20
 ac2:	3f 91       	pop	r19
 ac4:	2f 91       	pop	r18
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00000b1e <start_and_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
 b1e:	cf 92       	push	r12
 b20:	df 92       	push	r13
 b22:	ef 92       	push	r14
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	6a 01       	movw	r12, r20
 b2a:	e6 2e       	mov	r14, r22
 b2c:	d2 2f       	mov	r29, r18
 b2e:	60 e0       	ldi	r22, 0x00	; 0
 b30:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TWI_HAL_start>
 b34:	81 11       	cpse	r24, r1
 b36:	13 c0       	rjmp	.+38     	; 0xb5e <start_and_write_data+0x40>
 b38:	c0 e0       	ldi	r28, 0x00	; 0
 b3a:	0e c0       	rjmp	.+28     	; 0xb58 <start_and_write_data+0x3a>
 b3c:	ae 2d       	mov	r26, r14
 b3e:	c6 01       	movw	r24, r12
 b40:	8c 0f       	add	r24, r28
 b42:	91 1d       	adc	r25, r1
 b44:	a1 1d       	adc	r26, r1
 b46:	fc 01       	movw	r30, r24
 b48:	84 91       	lpm	r24, Z
 b4a:	a7 fd       	sbrc	r26, 7
 b4c:	80 81       	ld	r24, Z
 b4e:	0e 94 7b 07 	call	0xef6	; 0xef6 <TWI_HAL_write_byte>
 b52:	81 11       	cpse	r24, r1
 b54:	04 c0       	rjmp	.+8      	; 0xb5e <start_and_write_data+0x40>
 b56:	cf 5f       	subi	r28, 0xFF	; 255
 b58:	cd 17       	cp	r28, r29
 b5a:	80 f3       	brcs	.-32     	; 0xb3c <start_and_write_data+0x1e>
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	ef 90       	pop	r14
 b64:	df 90       	pop	r13
 b66:	cf 90       	pop	r12
 b68:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00000fda <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
 fda:	0e 94 8f 05 	call	0xb1e	; 0xb1e <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
 fde:	81 11       	cpse	r24, r1
 fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
 fe2:	0e 94 f5 07 	call	0xfea	; 0xfea <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
 fe6:	80 e0       	ldi	r24, 0x00	; 0
}
 fe8:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000009c0 <TWI_API_read_data_ack_end_nack_stop>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
 9c0:	ef 92       	push	r14
 9c2:	ff 92       	push	r15
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	8b 01       	movw	r16, r22
 9ce:	d4 2f       	mov	r29, r20
 9d0:	61 e0       	ldi	r22, 0x01	; 1
 9d2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TWI_HAL_start>
 9d6:	81 11       	cpse	r24, r1
 9d8:	1e c0       	rjmp	.+60     	; 0xa16 <TWI_API_read_data_ack_end_nack_stop+0x56>
 9da:	c0 e0       	ldi	r28, 0x00	; 0
 9dc:	08 c0       	rjmp	.+16     	; 0x9ee <TWI_API_read_data_ack_end_nack_stop+0x2e>
 9de:	78 01       	movw	r14, r16
 9e0:	ec 0e       	add	r14, r28
 9e2:	f1 1c       	adc	r15, r1
 9e4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_HAL_read_byte_ack>
 9e8:	f7 01       	movw	r30, r14
 9ea:	80 83       	st	Z, r24
 9ec:	cf 5f       	subi	r28, 0xFF	; 255
 9ee:	2c 2f       	mov	r18, r28
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	8d 2f       	mov	r24, r29
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	28 17       	cp	r18, r24
 9fa:	39 07       	cpc	r19, r25
 9fc:	84 f3       	brlt	.-32     	; 0x9de <TWI_API_read_data_ack_end_nack_stop+0x1e>
 9fe:	8d 2f       	mov	r24, r29
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	01 97       	sbiw	r24, 0x01	; 1
 a04:	e8 01       	movw	r28, r16
 a06:	c8 0f       	add	r28, r24
 a08:	d9 1f       	adc	r29, r25
 a0a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TWI_HAL_read_byte_nack>
 a0e:	88 83       	st	Y, r24
 a10:	0e 94 f5 07 	call	0xfea	; 0xfea <TWI_HAL_stop>
 a14:	80 e0       	ldi	r24, 0x00	; 0
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	ff 90       	pop	r15
 a20:	ef 90       	pop	r14
 a22:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00000bfe <TWI_HAL_start>:
		clear_byte(TWSR, 0b00000011); //set prescale to 1
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	88 0f       	add	r24, r24
 c02:	99 1f       	adc	r25, r25
 c04:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
 c06:	84 ea       	ldi	r24, 0xA4	; 164
 c08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
 c0c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 c10:	99 23       	and	r25, r25
 c12:	e4 f7       	brge	.-8      	; 0xc0c <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
 c14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 c18:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
 c1a:	88 30       	cpi	r24, 0x08	; 8
 c1c:	99 f4       	brne	.+38     	; 0xc44 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
 c1e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
 c22:	84 e8       	ldi	r24, 0x84	; 132
 c24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
 c28:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 c2c:	88 23       	and	r24, r24
 c2e:	e4 f7       	brge	.-8      	; 0xc28 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
 c30:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 c34:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
 c36:	88 31       	cpi	r24, 0x18	; 24
 c38:	21 f0       	breq	.+8      	; 0xc42 <TWI_HAL_start+0x44>
 c3a:	80 34       	cpi	r24, 0x40	; 64
 c3c:	19 f4       	brne	.+6      	; 0xc44 <TWI_HAL_start+0x46>
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	08 95       	ret
 c42:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
 c44:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00000ef6 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
 ef6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
 efa:	84 e8       	ldi	r24, 0x84	; 132
 efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
 f00:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 f04:	88 23       	and	r24, r24
 f06:	e4 f7       	brge	.-8      	; 0xf00 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
 f08:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 f0c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
 f0e:	88 32       	cpi	r24, 0x28	; 40
 f10:	09 f4       	brne	.+2      	; 0xf14 <TWI_HAL_write_byte+0x1e>
 f12:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
 f14:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00000fb2 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
 fb2:	84 ec       	ldi	r24, 0xC4	; 196
 fb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
 fb8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 fbc:	88 23       	and	r24, r24
 fbe:	e4 f7       	brge	.-8      	; 0xfb8 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
 fc0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 fc4:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00000fc6 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
 fc6:	84 e8       	ldi	r24, 0x84	; 132
 fc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
 fcc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 fd0:	88 23       	and	r24, r24
 fd2:	e4 f7       	brge	.-8      	; 0xfcc <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
 fd4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 fd8:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00000fea <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
 fea:	84 e9       	ldi	r24, 0x94	; 148
 fec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
 ff0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 ff4:	84 fd       	sbrc	r24, 4
 ff6:	fc cf       	rjmp	.-8      	; 0xff0 <TWI_HAL_stop+0x6>
}
 ff8:	08 95       	ret

Disassembly of section .text.__vector_22:

00000b6a <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 b6a:	1f 92       	push	r1
 b6c:	0f 92       	push	r0
 b6e:	0f b6       	in	r0, 0x3f	; 63
 b70:	0f 92       	push	r0
 b72:	11 24       	eor	r1, r1
 b74:	8f 93       	push	r24
 b76:	ef 93       	push	r30
 b78:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 b7a:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <tx_buffer_cursor>
 b7e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <tx_buffer_data_len>
 b82:	e8 17       	cp	r30, r24
 b84:	58 f4       	brcc	.+22     	; 0xb9c <__vector_22+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	8e 0f       	add	r24, r30
 b8a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <tx_buffer_cursor>
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	ea 59       	subi	r30, 0x9A	; 154
 b92:	fe 4f       	sbci	r31, 0xFE	; 254
 b94:	80 81       	ld	r24, Z
 b96:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__vector_22+0x3a>
	}else{
		tx_buffer_cursor=0;
 b9c:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <tx_buffer_cursor>
		tx_buffer_data_len=0;
 ba0:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <tx_buffer_data_len>
	}
}
 ba4:	ff 91       	pop	r31
 ba6:	ef 91       	pop	r30
 ba8:	8f 91       	pop	r24
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

Disassembly of section .text.__vector_20:

00000872 <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
 872:	1f 92       	push	r1
 874:	0f 92       	push	r0
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	0f 92       	push	r0
 87a:	11 24       	eor	r1, r1
 87c:	2f 93       	push	r18
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
 886:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <rx_buffer_has_message>
 88a:	81 11       	cpse	r24, r1
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <__vector_20+0x38>
 88e:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <rx_buffer_data_len>
 892:	e4 36       	cpi	r30, 0x64	; 100
 894:	50 f4       	brcc	.+20     	; 0x8aa <__vector_20+0x38>
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	8e 0f       	add	r24, r30
 89a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <rx_buffer_data_len>
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 8a4:	ee 5f       	subi	r30, 0xFE	; 254
 8a6:	fe 4f       	sbci	r31, 0xFE	; 254
 8a8:	80 83       	st	Z, r24
 8aa:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <rx_buffer_data_len>
 8ae:	83 30       	cpi	r24, 0x03	; 3
 8b0:	80 f0       	brcs	.+32     	; 0x8d2 <__vector_20+0x60>
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	fc 01       	movw	r30, r24
 8b6:	ef 5f       	subi	r30, 0xFF	; 255
 8b8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ba:	20 81       	ld	r18, Z
 8bc:	2a 30       	cpi	r18, 0x0A	; 10
 8be:	49 f4       	brne	.+18     	; 0x8d2 <__vector_20+0x60>
 8c0:	fc 01       	movw	r30, r24
 8c2:	e0 50       	subi	r30, 0x00	; 0
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	80 81       	ld	r24, Z
 8c8:	8d 30       	cpi	r24, 0x0D	; 13
 8ca:	19 f4       	brne	.+6      	; 0x8d2 <__vector_20+0x60>
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <rx_buffer_has_message>
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	2f 91       	pop	r18
 8dc:	0f 90       	pop	r0
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	0f 90       	pop	r0
 8e2:	1f 90       	pop	r1
 8e4:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00000d16 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
 d16:	e9 ec       	ldi	r30, 0xC9	; 201
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	80 81       	ld	r24, Z
 d1c:	80 61       	ori	r24, 0x10	; 16
 d1e:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
 d20:	80 81       	ld	r24, Z
 d22:	88 60       	ori	r24, 0x08	; 8
 d24:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
 d26:	80 81       	ld	r24, Z
 d28:	80 68       	ori	r24, 0x80	; 128
 d2a:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
 d2c:	80 81       	ld	r24, Z
 d2e:	80 64       	ori	r24, 0x40	; 64
 d30:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
 d32:	e8 ec       	ldi	r30, 0xC8	; 200
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	80 81       	ld	r24, Z
 d38:	82 60       	ori	r24, 0x02	; 2
 d3a:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 d3c:	86 e0       	ldi	r24, 0x06	; 6
 d3e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
 d42:	80 e1       	ldi	r24, 0x10	; 16
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 d4a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
 d4e:	78 94       	sei
 d50:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00000956 <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 956:	cf 92       	push	r12
 958:	df 92       	push	r13
 95a:	ef 92       	push	r14
 95c:	0f 93       	push	r16
 95e:	1f 93       	push	r17
 960:	cf 93       	push	r28
 962:	6b 01       	movw	r12, r22
 964:	e8 2e       	mov	r14, r24
 966:	c0 e0       	ldi	r28, 0x00	; 0
 968:	12 c0       	rjmp	.+36     	; 0x98e <uart1_hal_send_string+0x38>
 96a:	8c 2f       	mov	r24, r28
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	4e 2d       	mov	r20, r14
 970:	96 01       	movw	r18, r12
 972:	20 0f       	add	r18, r16
 974:	31 1f       	adc	r19, r17
 976:	41 1d       	adc	r20, r1
 978:	17 fd       	sbrc	r17, 7
 97a:	4a 95       	dec	r20
 97c:	f9 01       	movw	r30, r18
 97e:	24 91       	lpm	r18, Z
 980:	47 fd       	sbrc	r20, 7
 982:	20 81       	ld	r18, Z
 984:	fc 01       	movw	r30, r24
 986:	ea 5c       	subi	r30, 0xCA	; 202
 988:	fd 4f       	sbci	r31, 0xFD	; 253
 98a:	20 83       	st	Z, r18
 98c:	cf 5f       	subi	r28, 0xFF	; 255
 98e:	0c 2f       	mov	r16, r28
 990:	10 e0       	ldi	r17, 0x00	; 0
 992:	8e 2d       	mov	r24, r14
 994:	b6 01       	movw	r22, r12
 996:	0e 94 65 07 	call	0xeca	; 0xeca <strlen>
 99a:	08 17       	cp	r16, r24
 99c:	19 07       	cpc	r17, r25
 99e:	28 f3       	brcs	.-54     	; 0x96a <uart1_hal_send_string+0x14>
 9a0:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <tx_buffer_data_len>
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <tx_buffer_cursor>
 9aa:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <_end>
 9ae:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ef 90       	pop	r14
 9ba:	df 90       	pop	r13
 9bc:	cf 90       	pop	r12
 9be:	08 95       	ret

Disassembly of section .text.__vector_30:

00000bb4 <__vector_30>:
 bb4:	1f 92       	push	r1
 bb6:	0f 92       	push	r0
 bb8:	0f b6       	in	r0, 0x3f	; 63
 bba:	0f 92       	push	r0
 bbc:	11 24       	eor	r1, r1
 bbe:	8f 93       	push	r24
 bc0:	ef 93       	push	r30
 bc2:	ff 93       	push	r31
 bc4:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <tx_buffer_cursor>
 bc8:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <tx_buffer_data_len>
 bcc:	e8 17       	cp	r30, r24
 bce:	58 f4       	brcc	.+22     	; 0xbe6 <__vector_30+0x32>
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	8e 0f       	add	r24, r30
 bd4:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <tx_buffer_cursor>
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	ea 5c       	subi	r30, 0xCA	; 202
 bdc:	fd 4f       	sbci	r31, 0xFD	; 253
 bde:	80 81       	ld	r24, Z
 be0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 be4:	04 c0       	rjmp	.+8      	; 0xbee <__vector_30+0x3a>
 be6:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <tx_buffer_cursor>
 bea:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <tx_buffer_data_len>
 bee:	ff 91       	pop	r31
 bf0:	ef 91       	pop	r30
 bf2:	8f 91       	pop	r24
 bf4:	0f 90       	pop	r0
 bf6:	0f be       	out	0x3f, r0	; 63
 bf8:	0f 90       	pop	r0
 bfa:	1f 90       	pop	r1
 bfc:	18 95       	reti

Disassembly of section .text.__vector_28:

000008e6 <__vector_28>:
 8e6:	1f 92       	push	r1
 8e8:	0f 92       	push	r0
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	0f 92       	push	r0
 8ee:	11 24       	eor	r1, r1
 8f0:	2f 93       	push	r18
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
 8fa:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <rx_buffer_has_message>
 8fe:	81 11       	cpse	r24, r1
 900:	0e c0       	rjmp	.+28     	; 0x91e <__vector_28+0x38>
 902:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <rx_buffer_data_len>
 906:	e4 36       	cpi	r30, 0x64	; 100
 908:	50 f4       	brcc	.+20     	; 0x91e <__vector_28+0x38>
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	8e 0f       	add	r24, r30
 90e:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <rx_buffer_data_len>
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 918:	e2 50       	subi	r30, 0x02	; 2
 91a:	fd 4f       	sbci	r31, 0xFD	; 253
 91c:	80 83       	st	Z, r24
 91e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <rx_buffer_data_len>
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	fc 01       	movw	r30, r24
 926:	e3 50       	subi	r30, 0x03	; 3
 928:	fd 4f       	sbci	r31, 0xFD	; 253
 92a:	20 81       	ld	r18, Z
 92c:	2a 30       	cpi	r18, 0x0A	; 10
 92e:	49 f4       	brne	.+18     	; 0x942 <__vector_28+0x5c>
 930:	fc 01       	movw	r30, r24
 932:	e4 50       	subi	r30, 0x04	; 4
 934:	fd 4f       	sbci	r31, 0xFD	; 253
 936:	80 81       	ld	r24, Z
 938:	8d 30       	cpi	r24, 0x0D	; 13
 93a:	19 f4       	brne	.+6      	; 0x942 <__vector_28+0x5c>
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <rx_buffer_has_message>
 942:	ff 91       	pop	r31
 944:	ef 91       	pop	r30
 946:	9f 91       	pop	r25
 948:	8f 91       	pop	r24
 94a:	2f 91       	pop	r18
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

Disassembly of section .text.main:

00001052 <main>:
#include "TEST/TC1_HAL/test_TC1_HAL.h"

int main(void)
{
	//test_lora_module_start();
	test_SCD30_module_start();
    1052:	0e 94 8b 07 	call	0xf16	; 0xf16 <test_SCD30_module_start>
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <main+0x4>

Disassembly of section .text.bytes_2_uint:

00000f70 <bytes_2_uint>:
}

void SCD30_deinit(){
	TC1_HAL_stop();
	PM_HAL_SCD30_power(false);
	_data=NULL;
 f70:	fc 01       	movw	r30, r24
 f72:	54 81       	ldd	r21, Z+4	; 0x04
 f74:	43 81       	ldd	r20, Z+3	; 0x03
 f76:	31 81       	ldd	r19, Z+1	; 0x01
 f78:	20 81       	ld	r18, Z
 f7a:	65 2f       	mov	r22, r21
 f7c:	74 2f       	mov	r23, r20
 f7e:	83 2f       	mov	r24, r19
 f80:	92 2f       	mov	r25, r18
 f82:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
 f86:	cb 01       	movw	r24, r22
 f88:	08 95       	ret

Disassembly of section .text.init_measurement:

00000d52 <init_measurement>:
 d52:	25 e0       	ldi	r18, 0x05	; 5
 d54:	4d ee       	ldi	r20, 0xED	; 237
 d56:	50 e0       	ldi	r21, 0x00	; 0
 d58:	60 e0       	ldi	r22, 0x00	; 0
 d5a:	81 e6       	ldi	r24, 0x61	; 97
 d5c:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_API_write_data_stop>
 d60:	81 11       	cpse	r24, r1
 d62:	0f c0       	rjmp	.+30     	; 0xd82 <init_measurement+0x30>
 d64:	25 e0       	ldi	r18, 0x05	; 5
 d66:	42 ef       	ldi	r20, 0xF2	; 242
 d68:	50 e0       	ldi	r21, 0x00	; 0
 d6a:	60 e0       	ldi	r22, 0x00	; 0
 d6c:	81 e6       	ldi	r24, 0x61	; 97
 d6e:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_API_write_data_stop>
 d72:	81 11       	cpse	r24, r1
 d74:	08 c0       	rjmp	.+16     	; 0xd86 <init_measurement+0x34>
 d76:	0e 94 24 08 	call	0x1048	; 0x1048 <SCD30_HAL_data_ready>
 d7a:	88 23       	and	r24, r24
 d7c:	e1 f3       	breq	.-8      	; 0xd76 <init_measurement+0x24>
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	08 95       	ret
 d82:	82 e0       	ldi	r24, 0x02	; 2
 d84:	08 95       	ret
 d86:	82 e0       	ldi	r24, 0x02	; 2
 d88:	08 95       	ret

Disassembly of section .text.validate_data:

00000e98 <validate_data>:
 e98:	cf 93       	push	r28
 e9a:	df 93       	push	r29
 e9c:	ec 01       	movw	r28, r24
 e9e:	62 e0       	ldi	r22, 0x02	; 2
 ea0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <calc_crc8>
 ea4:	9a 81       	ldd	r25, Y+2	; 0x02
 ea6:	89 13       	cpse	r24, r25
 ea8:	0a c0       	rjmp	.+20     	; 0xebe <validate_data+0x26>
 eaa:	62 e0       	ldi	r22, 0x02	; 2
 eac:	ce 01       	movw	r24, r28
 eae:	03 96       	adiw	r24, 0x03	; 3
 eb0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <calc_crc8>
 eb4:	9d 81       	ldd	r25, Y+5	; 0x05
 eb6:	89 17       	cp	r24, r25
 eb8:	21 f0       	breq	.+8      	; 0xec2 <validate_data+0x2a>
 eba:	80 e0       	ldi	r24, 0x00	; 0
 ebc:	03 c0       	rjmp	.+6      	; 0xec4 <validate_data+0x2c>
 ebe:	80 e0       	ldi	r24, 0x00	; 0
 ec0:	01 c0       	rjmp	.+2      	; 0xec4 <validate_data+0x2c>
 ec2:	81 e0       	ldi	r24, 0x01	; 1
 ec4:	df 91       	pop	r29
 ec6:	cf 91       	pop	r28
 ec8:	08 95       	ret

Disassembly of section .text.read_value:

000006c4 <read_value>:
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <read_value+0xa>
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <read_value+0xc>
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <read_value+0xe>
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	8c 01       	movw	r16, r24
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	f8 01       	movw	r30, r16
 6de:	91 83       	std	Z+1, r25	; 0x01
 6e0:	80 83       	st	Z, r24
 6e2:	0e 94 24 08 	call	0x1048	; 0x1048 <SCD30_HAL_data_ready>
 6e6:	81 11       	cpse	r24, r1
 6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <read_value+0x34>
 6ea:	8e ef       	ldi	r24, 0xFE	; 254
 6ec:	9f ef       	ldi	r25, 0xFF	; 255
 6ee:	f8 01       	movw	r30, r16
 6f0:	91 83       	std	Z+1, r25	; 0x01
 6f2:	80 83       	st	Z, r24
 6f4:	83 e0       	ldi	r24, 0x03	; 3
 6f6:	2c c0       	rjmp	.+88     	; 0x750 <read_value+0x8c>
 6f8:	22 e0       	ldi	r18, 0x02	; 2
 6fa:	47 ef       	ldi	r20, 0xF7	; 247
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	81 e6       	ldi	r24, 0x61	; 97
 702:	0e 94 ed 07 	call	0xfda	; 0xfda <TWI_API_write_data_stop>
 706:	81 11       	cpse	r24, r1
 708:	1e c0       	rjmp	.+60     	; 0x746 <read_value+0x82>
 70a:	8f e3       	ldi	r24, 0x3F	; 63
 70c:	9f e1       	ldi	r25, 0x1F	; 31
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <read_value+0x4a>
 712:	00 c0       	rjmp	.+0      	; 0x714 <read_value+0x50>
 714:	00 00       	nop
 716:	46 e0       	ldi	r20, 0x06	; 6
 718:	be 01       	movw	r22, r28
 71a:	6f 5f       	subi	r22, 0xFF	; 255
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	81 e6       	ldi	r24, 0x61	; 97
 720:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <TWI_API_read_data_ack_end_nack_stop>
 724:	81 11       	cpse	r24, r1
 726:	11 c0       	rjmp	.+34     	; 0x74a <read_value+0x86>
 728:	ce 01       	movw	r24, r28
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	0e 94 4c 07 	call	0xe98	; 0xe98 <validate_data>
 730:	88 23       	and	r24, r24
 732:	69 f0       	breq	.+26     	; 0x74e <read_value+0x8a>
 734:	ce 01       	movw	r24, r28
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	0e 94 b8 07 	call	0xf70	; 0xf70 <bytes_2_uint>
 73c:	f8 01       	movw	r30, r16
 73e:	91 83       	std	Z+1, r25	; 0x01
 740:	80 83       	st	Z, r24
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	05 c0       	rjmp	.+10     	; 0x750 <read_value+0x8c>
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	03 c0       	rjmp	.+6      	; 0x750 <read_value+0x8c>
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	01 c0       	rjmp	.+2      	; 0x750 <read_value+0x8c>
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	26 96       	adiw	r28, 0x06	; 6
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00000c46 <vect_SCD_do_sample>:
 c46:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <_data>
 c4a:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <_data+0x1>
 c4e:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <cntSamples>
 c52:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <cntSamples+0x1>
 c56:	a9 01       	movw	r20, r18
 c58:	4f 5f       	subi	r20, 0xFF	; 255
 c5a:	5f 4f       	sbci	r21, 0xFF	; 255
 c5c:	50 93 2f 02 	sts	0x022F, r21	; 0x80022f <cntSamples+0x1>
 c60:	40 93 2e 02 	sts	0x022E, r20	; 0x80022e <cntSamples>
 c64:	22 0f       	add	r18, r18
 c66:	33 1f       	adc	r19, r19
 c68:	82 0f       	add	r24, r18
 c6a:	93 1f       	adc	r25, r19
 c6c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <read_value>
 c70:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <cntSamples>
 c74:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <cntSamples+0x1>
 c78:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <_nSamples>
 c7c:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <_nSamples+0x1>
 c80:	28 17       	cp	r18, r24
 c82:	39 07       	cpc	r19, r25
 c84:	10 f0       	brcs	.+4      	; 0xc8a <vect_SCD_do_sample+0x44>
 c86:	0e 94 18 08 	call	0x1030	; 0x1030 <TC1_HAL_stop>
 c8a:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00000ad0 <SCD30_init_sampling>:
 ad0:	cf 93       	push	r28
 ad2:	df 93       	push	r29
 ad4:	ec 01       	movw	r28, r24
 ad6:	70 93 34 02 	sts	0x0234, r23	; 0x800234 <_nSamples+0x1>
 ada:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <_nSamples>
 ade:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <cntSamples+0x1>
 ae2:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <cntSamples>
 ae6:	50 93 32 02 	sts	0x0232, r21	; 0x800232 <_data+0x1>
 aea:	40 93 31 02 	sts	0x0231, r20	; 0x800231 <_data>
 aee:	0e 94 04 08 	call	0x1008	; 0x1008 <SCD30_HAL_init>
 af2:	63 e2       	ldi	r22, 0x23	; 35
 af4:	76 e0       	ldi	r23, 0x06	; 6
 af6:	ce 01       	movw	r24, r28
 af8:	0e 94 32 07 	call	0xe64	; 0xe64 <TC1_HAL_init>
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	0e 94 c5 07 	call	0xf8a	; 0xf8a <PM_HAL_SCD30_power>
 b02:	2f ef       	ldi	r18, 0xFF	; 255
 b04:	83 ed       	ldi	r24, 0xD3	; 211
 b06:	90 e3       	ldi	r25, 0x30	; 48
 b08:	21 50       	subi	r18, 0x01	; 1
 b0a:	80 40       	sbci	r24, 0x00	; 0
 b0c:	90 40       	sbci	r25, 0x00	; 0
 b0e:	e1 f7       	brne	.-8      	; 0xb08 <SCD30_init_sampling+0x38>
 b10:	00 c0       	rjmp	.+0      	; 0xb12 <SCD30_init_sampling+0x42>
 b12:	00 00       	nop
 b14:	0e 94 a9 06 	call	0xd52	; 0xd52 <init_measurement>
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000103c <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    103c:	0e 94 23 06 	call	0xc46	; 0xc46 <vect_SCD_do_sample>
	TC1_HAL_start();
    1040:	0e 94 12 08 	call	0x1024	; 0x1024 <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00000f54 <SCD30_is_sampling_done>:
}

void SCD30_deinit(){
	TC1_HAL_stop();
	PM_HAL_SCD30_power(false);
	_data=NULL;
 f54:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <cntSamples>
 f58:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <cntSamples+0x1>
 f5c:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <_nSamples>
 f60:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <_nSamples+0x1>
 f64:	81 e0       	ldi	r24, 0x01	; 1
 f66:	42 17       	cp	r20, r18
 f68:	53 07       	cpc	r21, r19
 f6a:	08 f4       	brcc	.+2      	; 0xf6e <SCD30_is_sampling_done+0x1a>
 f6c:	80 e0       	ldi	r24, 0x00	; 0
 f6e:	08 95       	ret

Disassembly of section .text.test_sampling:

00000542 <test_sampling>:
}

/************************************************************************/
/* Test init of SCD30 and timer                                         */
/************************************************************************/
static void test_sampling(){
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	a8 97       	sbiw	r28, 0x28	; 40
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
	uint16_t data[10];
	
	SCD30_STATUS status=SCD30_init_sampling(20000, 10, data);
 55c:	ae 01       	movw	r20, r28
 55e:	4f 5f       	subi	r20, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	6a e0       	ldi	r22, 0x0A	; 10
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	80 e2       	ldi	r24, 0x20	; 32
 568:	9e e4       	ldi	r25, 0x4E	; 78
 56a:	0e 94 68 05 	call	0xad0	; 0xad0 <SCD30_init_sampling>
	if(status!=SCD30_STATUS_SUCCESS){
 56e:	88 23       	and	r24, r24
 570:	29 f0       	breq	.+10     	; 0x57c <test_sampling+0x3a>
		uart1_hal_send_string("FAIL ");
 572:	62 ee       	ldi	r22, 0xE2	; 226
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 ab 04 	call	0x956	; 0x956 <uart1_hal_send_string>
	}
	
	
	SCD30_start_sampling();
 57c:	0e 94 1e 08 	call	0x103c	; 0x103c <SCD30_start_sampling>
	while(!SCD30_is_sampling_done()){};
 580:	0e 94 aa 07 	call	0xf54	; 0xf54 <SCD30_is_sampling_done>
 584:	88 23       	and	r24, r24
 586:	e1 f3       	breq	.-8      	; 0x580 <test_sampling+0x3e>
 588:	2f c0       	rjmp	.+94     	; 0x5e8 <test_sampling+0xa6>
	
	for (uint8_t i=0; i<10; i++)
	{
		char msg[20];
		sprintf(msg, " %u ", data[i]);
 58a:	ef 2d       	mov	r30, r15
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	ee 0f       	add	r30, r30
 590:	ff 1f       	adc	r31, r31
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	8c 0f       	add	r24, r28
 598:	9d 1f       	adc	r25, r29
 59a:	e8 0f       	add	r30, r24
 59c:	f9 1f       	adc	r31, r25
 59e:	81 81       	ldd	r24, Z+1	; 0x01
 5a0:	8f 93       	push	r24
 5a2:	80 81       	ld	r24, Z
 5a4:	8f 93       	push	r24
 5a6:	88 ee       	ldi	r24, 0xE8	; 232
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	a0 e0       	ldi	r26, 0x00	; 0
 5ac:	af 93       	push	r26
 5ae:	9f 93       	push	r25
 5b0:	8f 93       	push	r24
 5b2:	8e 01       	movw	r16, r28
 5b4:	0b 5e       	subi	r16, 0xEB	; 235
 5b6:	1f 4f       	sbci	r17, 0xFF	; 255
 5b8:	1f 93       	push	r17
 5ba:	0f 93       	push	r16
 5bc:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
		uart1_hal_send_string(msg);
 5c0:	b8 01       	movw	r22, r16
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	0e 94 ab 04 	call	0x956	; 0x956 <uart1_hal_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c8:	9f ef       	ldi	r25, 0xFF	; 255
 5ca:	21 ee       	ldi	r18, 0xE1	; 225
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	91 50       	subi	r25, 0x01	; 1
 5d0:	20 40       	sbci	r18, 0x00	; 0
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <test_sampling+0x8c>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <test_sampling+0x96>
 5d8:	00 00       	nop
	
	
	SCD30_start_sampling();
	while(!SCD30_is_sampling_done()){};
	
	for (uint8_t i=0; i<10; i++)
 5da:	f3 94       	inc	r15
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <test_sampling+0xa8>
 5e8:	f1 2c       	mov	r15, r1
 5ea:	99 e0       	ldi	r25, 0x09	; 9
 5ec:	9f 15       	cp	r25, r15
 5ee:	68 f6       	brcc	.-102    	; 0x58a <test_sampling+0x48>
		char msg[20];
		sprintf(msg, " %u ", data[i]);
		uart1_hal_send_string(msg);
		_delay_ms(200);
	}
}
 5f0:	a8 96       	adiw	r28, 0x28	; 40
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	f8 94       	cli
 5f6:	de bf       	out	0x3e, r29	; 62
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	cd bf       	out	0x3d, r28	; 61
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	ff 90       	pop	r15
 606:	08 95       	ret

Disassembly of section .text.test_SCD30_module_start:

00000f16 <test_SCD30_module_start>:
static void test_sampling();
void test_get_reading();
void read_measure_interval();

void test_SCD30_module_start(){
		uart1_hal_init();
 f16:	0e 94 8b 06 	call	0xd16	; 0xd16 <uart1_hal_init>
		PM_HAL_SCD30_power_init();
 f1a:	0e 94 fd 07 	call	0xffa	; 0xffa <PM_HAL_SCD30_power_init>
		
		while(1){
			//read_firmware_api();
			test_sampling();
 f1e:	0e 94 a1 02 	call	0x542	; 0x542 <test_sampling>
 f22:	2f ef       	ldi	r18, 0xFF	; 255
 f24:	8e e9       	ldi	r24, 0x9E	; 158
 f26:	94 e2       	ldi	r25, 0x24	; 36
 f28:	21 50       	subi	r18, 0x01	; 1
 f2a:	80 40       	sbci	r24, 0x00	; 0
 f2c:	90 40       	sbci	r25, 0x00	; 0
 f2e:	e1 f7       	brne	.-8      	; 0xf28 <test_SCD30_module_start+0x12>
 f30:	00 c0       	rjmp	.+0      	; 0xf32 <test_SCD30_module_start+0x1c>
 f32:	00 00       	nop
 f34:	f4 cf       	rjmp	.-24     	; 0xf1e <test_SCD30_module_start+0x8>

Disassembly of section .text.calc_crc8:

00000dc2 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
 dc2:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
 dc4:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
 dc6:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
 dc8:	14 c0       	rjmp	.+40     	; 0xdf2 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
 dca:	fa 01       	movw	r30, r20
 dcc:	e3 0f       	add	r30, r19
 dce:	f1 1d       	adc	r31, r1
 dd0:	90 81       	ld	r25, Z
 dd2:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
 dd4:	28 e0       	ldi	r18, 0x08	; 8
 dd6:	0a c0       	rjmp	.+20     	; 0xdec <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
 dd8:	88 23       	and	r24, r24
 dda:	34 f4       	brge	.+12     	; 0xde8 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	88 0f       	add	r24, r24
 de0:	99 1f       	adc	r25, r25
 de2:	91 e3       	ldi	r25, 0x31	; 49
 de4:	89 27       	eor	r24, r25
 de6:	01 c0       	rjmp	.+2      	; 0xdea <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
 de8:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
 dea:	21 50       	subi	r18, 0x01	; 1
 dec:	21 11       	cpse	r18, r1
 dee:	f4 cf       	rjmp	.-24     	; 0xdd8 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
 df0:	3f 5f       	subi	r19, 0xFF	; 255
 df2:	36 17       	cp	r19, r22
 df4:	50 f3       	brcs	.-44     	; 0xdca <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
 df6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000a24 <__fixunssfsi>:
 a24:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_splitA>
 a28:	88 f0       	brcs	.+34     	; 0xa4c <__fixunssfsi+0x28>
 a2a:	9f 57       	subi	r25, 0x7F	; 127
 a2c:	98 f0       	brcs	.+38     	; 0xa54 <__fixunssfsi+0x30>
 a2e:	b9 2f       	mov	r27, r25
 a30:	99 27       	eor	r25, r25
 a32:	b7 51       	subi	r27, 0x17	; 23
 a34:	b0 f0       	brcs	.+44     	; 0xa62 <__fixunssfsi+0x3e>
 a36:	e1 f0       	breq	.+56     	; 0xa70 <__fixunssfsi+0x4c>
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	1a f0       	brmi	.+6      	; 0xa48 <__fixunssfsi+0x24>
 a42:	ba 95       	dec	r27
 a44:	c9 f7       	brne	.-14     	; 0xa38 <__fixunssfsi+0x14>
 a46:	14 c0       	rjmp	.+40     	; 0xa70 <__fixunssfsi+0x4c>
 a48:	b1 30       	cpi	r27, 0x01	; 1
 a4a:	91 f0       	breq	.+36     	; 0xa70 <__fixunssfsi+0x4c>
 a4c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fp_zero>
 a50:	b1 e0       	ldi	r27, 0x01	; 1
 a52:	08 95       	ret
 a54:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_zero>
 a58:	67 2f       	mov	r22, r23
 a5a:	78 2f       	mov	r23, r24
 a5c:	88 27       	eor	r24, r24
 a5e:	b8 5f       	subi	r27, 0xF8	; 248
 a60:	39 f0       	breq	.+14     	; 0xa70 <__fixunssfsi+0x4c>
 a62:	b9 3f       	cpi	r27, 0xF9	; 249
 a64:	cc f3       	brlt	.-14     	; 0xa58 <__fixunssfsi+0x34>
 a66:	86 95       	lsr	r24
 a68:	77 95       	ror	r23
 a6a:	67 95       	ror	r22
 a6c:	b3 95       	inc	r27
 a6e:	d9 f7       	brne	.-10     	; 0xa66 <__fixunssfsi+0x42>
 a70:	3e f4       	brtc	.+14     	; 0xa80 <__fixunssfsi+0x5c>
 a72:	90 95       	com	r25
 a74:	80 95       	com	r24
 a76:	70 95       	com	r23
 a78:	61 95       	neg	r22
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000cd2 <__fp_split3>:
 cd2:	57 fd       	sbrc	r21, 7
 cd4:	90 58       	subi	r25, 0x80	; 128
 cd6:	44 0f       	add	r20, r20
 cd8:	55 1f       	adc	r21, r21
 cda:	59 f0       	breq	.+22     	; 0xcf2 <__fp_splitA+0x10>
 cdc:	5f 3f       	cpi	r21, 0xFF	; 255
 cde:	71 f0       	breq	.+28     	; 0xcfc <__fp_splitA+0x1a>
 ce0:	47 95       	ror	r20

00000ce2 <__fp_splitA>:
 ce2:	88 0f       	add	r24, r24
 ce4:	97 fb       	bst	r25, 7
 ce6:	99 1f       	adc	r25, r25
 ce8:	61 f0       	breq	.+24     	; 0xd02 <__fp_splitA+0x20>
 cea:	9f 3f       	cpi	r25, 0xFF	; 255
 cec:	79 f0       	breq	.+30     	; 0xd0c <__fp_splitA+0x2a>
 cee:	87 95       	ror	r24
 cf0:	08 95       	ret
 cf2:	12 16       	cp	r1, r18
 cf4:	13 06       	cpc	r1, r19
 cf6:	14 06       	cpc	r1, r20
 cf8:	55 1f       	adc	r21, r21
 cfa:	f2 cf       	rjmp	.-28     	; 0xce0 <__fp_split3+0xe>
 cfc:	46 95       	lsr	r20
 cfe:	f1 df       	rcall	.-30     	; 0xce2 <__fp_splitA>
 d00:	08 c0       	rjmp	.+16     	; 0xd12 <__fp_splitA+0x30>
 d02:	16 16       	cp	r1, r22
 d04:	17 06       	cpc	r1, r23
 d06:	18 06       	cpc	r1, r24
 d08:	99 1f       	adc	r25, r25
 d0a:	f1 cf       	rjmp	.-30     	; 0xcee <__fp_splitA+0xc>
 d0c:	86 95       	lsr	r24
 d0e:	71 05       	cpc	r23, r1
 d10:	61 05       	cpc	r22, r1
 d12:	08 94       	sec
 d14:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001016 <__fp_zero>:
    1016:	e8 94       	clt

00001018 <__fp_szero>:
    1018:	bb 27       	eor	r27, r27
    101a:	66 27       	eor	r22, r22
    101c:	77 27       	eor	r23, r23
    101e:	cb 01       	movw	r24, r22
    1020:	97 f9       	bld	r25, 7
    1022:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000f36 <__umulhisi3>:
 f36:	a2 9f       	mul	r26, r18
 f38:	b0 01       	movw	r22, r0
 f3a:	b3 9f       	mul	r27, r19
 f3c:	c0 01       	movw	r24, r0
 f3e:	a3 9f       	mul	r26, r19
 f40:	70 0d       	add	r23, r0
 f42:	81 1d       	adc	r24, r1
 f44:	11 24       	eor	r1, r1
 f46:	91 1d       	adc	r25, r1
 f48:	b2 9f       	mul	r27, r18
 f4a:	70 0d       	add	r23, r0
 f4c:	81 1d       	adc	r24, r1
 f4e:	11 24       	eor	r1, r1
 f50:	91 1d       	adc	r25, r1
 f52:	08 95       	ret

Disassembly of section .text.avrlibc:

00000eca <strlen>:
 eca:	cf 92       	push	r12
 ecc:	df 92       	push	r13
 ece:	ef 92       	push	r14
 ed0:	6b 01       	movw	r12, r22
 ed2:	e8 2e       	mov	r14, r24
 ed4:	a8 2f       	mov	r26, r24
 ed6:	cb 01       	movw	r24, r22
 ed8:	fc 01       	movw	r30, r24
 eda:	24 91       	lpm	r18, Z
 edc:	a7 fd       	sbrc	r26, 7
 ede:	20 81       	ld	r18, Z
 ee0:	22 23       	and	r18, r18
 ee2:	19 f0       	breq	.+6      	; 0xeea <strlen+0x20>
 ee4:	01 96       	adiw	r24, 0x01	; 1
 ee6:	a1 1d       	adc	r26, r1
 ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <strlen+0xe>
 eea:	8c 19       	sub	r24, r12
 eec:	9d 09       	sbc	r25, r13
 eee:	ef 90       	pop	r14
 ef0:	df 90       	pop	r13
 ef2:	cf 90       	pop	r12
 ef4:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c8c <sprintf>:
 c8c:	af e0       	ldi	r26, 0x0F	; 15
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	ec e4       	ldi	r30, 0x4C	; 76
 c92:	f6 e0       	ldi	r31, 0x06	; 6
 c94:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__prologue_saves__+0x1c>
 c98:	0e 89       	ldd	r16, Y+22	; 0x16
 c9a:	1f 89       	ldd	r17, Y+23	; 0x17
 c9c:	86 e0       	ldi	r24, 0x06	; 6
 c9e:	8d 83       	std	Y+5, r24	; 0x05
 ca0:	1a 83       	std	Y+2, r17	; 0x02
 ca2:	09 83       	std	Y+1, r16	; 0x01
 ca4:	8f ef       	ldi	r24, 0xFF	; 255
 ca6:	9f e7       	ldi	r25, 0x7F	; 127
 ca8:	9f 83       	std	Y+7, r25	; 0x07
 caa:	8e 83       	std	Y+6, r24	; 0x06
 cac:	9e 01       	movw	r18, r28
 cae:	25 5e       	subi	r18, 0xE5	; 229
 cb0:	3f 4f       	sbci	r19, 0xFF	; 255
 cb2:	48 8d       	ldd	r20, Y+24	; 0x18
 cb4:	59 8d       	ldd	r21, Y+25	; 0x19
 cb6:	6a 8d       	ldd	r22, Y+26	; 0x1a
 cb8:	ce 01       	movw	r24, r28
 cba:	01 96       	adiw	r24, 0x01	; 1
 cbc:	0e 94 7d 00 	call	0xfa	; 0xfa <vfprintf>
 cc0:	e8 85       	ldd	r30, Y+8	; 0x08
 cc2:	f9 85       	ldd	r31, Y+9	; 0x09
 cc4:	e0 0f       	add	r30, r16
 cc6:	f1 1f       	adc	r31, r17
 cc8:	10 82       	st	Z, r1
 cca:	2f 96       	adiw	r28, 0x0f	; 15
 ccc:	e4 e0       	ldi	r30, 0x04	; 4
 cce:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000000fa <vfprintf>:
  fa:	2f 92       	push	r2
  fc:	3f 92       	push	r3
  fe:	4f 92       	push	r4
 100:	6f 92       	push	r6
 102:	7f 92       	push	r7
 104:	8f 92       	push	r8
 106:	9f 92       	push	r9
 108:	af 92       	push	r10
 10a:	bf 92       	push	r11
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	62 97       	sbiw	r28, 0x12	; 18
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	6c 01       	movw	r12, r24
 12e:	3a 01       	movw	r6, r20
 130:	86 2e       	mov	r8, r22
 132:	79 01       	movw	r14, r18
 134:	fc 01       	movw	r30, r24
 136:	10 86       	std	Z+8, r1	; 0x08
 138:	17 82       	std	Z+7, r1	; 0x07
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	81 ff       	sbrs	r24, 1
 13e:	e7 c1       	rjmp	.+974    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 140:	9e 01       	movw	r18, r28
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	3d 87       	std	Y+13, r19	; 0x0d
 148:	2c 87       	std	Y+12, r18	; 0x0c
 14a:	c9 01       	movw	r24, r18
 14c:	a0 e8       	ldi	r26, 0x80	; 128
 14e:	88 8b       	std	Y+16, r24	; 0x10
 150:	99 8b       	std	Y+17, r25	; 0x11
 152:	aa 8b       	std	Y+18, r26	; 0x12
 154:	9f e3       	ldi	r25, 0x3F	; 63
 156:	99 2e       	mov	r9, r25
 158:	f3 01       	movw	r30, r6
 15a:	84 91       	lpm	r24, Z
 15c:	87 fc       	sbrc	r8, 7
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	09 f4       	brne	.+2      	; 0x166 <vfprintf+0x6c>
 164:	d0 c1       	rjmp	.+928    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 166:	48 2d       	mov	r20, r8
 168:	93 01       	movw	r18, r6
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	4f 4f       	sbci	r20, 0xFF	; 255
 170:	85 32       	cpi	r24, 0x25	; 37
 172:	19 f0       	breq	.+6      	; 0x17a <vfprintf+0x80>
 174:	39 01       	movw	r6, r18
 176:	84 2e       	mov	r8, r20
 178:	0a c0       	rjmp	.+20     	; 0x18e <vfprintf+0x94>
 17a:	f9 01       	movw	r30, r18
 17c:	84 91       	lpm	r24, Z
 17e:	47 fd       	sbrc	r20, 7
 180:	80 81       	ld	r24, Z
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	69 0e       	add	r6, r25
 186:	71 1c       	adc	r7, r1
 188:	81 1c       	adc	r8, r1
 18a:	85 32       	cpi	r24, 0x25	; 37
 18c:	29 f4       	brne	.+10     	; 0x198 <vfprintf+0x9e>
 18e:	b6 01       	movw	r22, r12
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 196:	e0 cf       	rjmp	.-64     	; 0x158 <vfprintf+0x5e>
 198:	b1 2c       	mov	r11, r1
 19a:	00 e0       	ldi	r16, 0x00	; 0
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	10 32       	cpi	r17, 0x20	; 32
 1a0:	a0 f4       	brcc	.+40     	; 0x1ca <vfprintf+0xd0>
 1a2:	8b 32       	cpi	r24, 0x2B	; 43
 1a4:	69 f0       	breq	.+26     	; 0x1c0 <vfprintf+0xc6>
 1a6:	30 f4       	brcc	.+12     	; 0x1b4 <vfprintf+0xba>
 1a8:	80 32       	cpi	r24, 0x20	; 32
 1aa:	59 f0       	breq	.+22     	; 0x1c2 <vfprintf+0xc8>
 1ac:	83 32       	cpi	r24, 0x23	; 35
 1ae:	69 f4       	brne	.+26     	; 0x1ca <vfprintf+0xd0>
 1b0:	10 61       	ori	r17, 0x10	; 16
 1b2:	2c c0       	rjmp	.+88     	; 0x20c <vfprintf+0x112>
 1b4:	8d 32       	cpi	r24, 0x2D	; 45
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <vfprintf+0xcc>
 1b8:	80 33       	cpi	r24, 0x30	; 48
 1ba:	39 f4       	brne	.+14     	; 0x1ca <vfprintf+0xd0>
 1bc:	11 60       	ori	r17, 0x01	; 1
 1be:	26 c0       	rjmp	.+76     	; 0x20c <vfprintf+0x112>
 1c0:	12 60       	ori	r17, 0x02	; 2
 1c2:	14 60       	ori	r17, 0x04	; 4
 1c4:	23 c0       	rjmp	.+70     	; 0x20c <vfprintf+0x112>
 1c6:	18 60       	ori	r17, 0x08	; 8
 1c8:	21 c0       	rjmp	.+66     	; 0x20c <vfprintf+0x112>
 1ca:	17 fd       	sbrc	r17, 7
 1cc:	29 c0       	rjmp	.+82     	; 0x220 <vfprintf+0x126>
 1ce:	90 ed       	ldi	r25, 0xD0	; 208
 1d0:	98 0f       	add	r25, r24
 1d2:	9a 30       	cpi	r25, 0x0A	; 10
 1d4:	78 f4       	brcc	.+30     	; 0x1f4 <vfprintf+0xfa>
 1d6:	16 ff       	sbrs	r17, 6
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <vfprintf+0xec>
 1da:	aa e0       	ldi	r26, 0x0A	; 10
 1dc:	ba 9e       	mul	r11, r26
 1de:	90 0d       	add	r25, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	b9 2e       	mov	r11, r25
 1e4:	13 c0       	rjmp	.+38     	; 0x20c <vfprintf+0x112>
 1e6:	ea e0       	ldi	r30, 0x0A	; 10
 1e8:	0e 9f       	mul	r16, r30
 1ea:	90 0d       	add	r25, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	09 2f       	mov	r16, r25
 1f0:	10 62       	ori	r17, 0x20	; 32
 1f2:	0c c0       	rjmp	.+24     	; 0x20c <vfprintf+0x112>
 1f4:	8e 32       	cpi	r24, 0x2E	; 46
 1f6:	21 f4       	brne	.+8      	; 0x200 <vfprintf+0x106>
 1f8:	16 fd       	sbrc	r17, 6
 1fa:	85 c1       	rjmp	.+778    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 1fc:	10 64       	ori	r17, 0x40	; 64
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <vfprintf+0x112>
 200:	8c 36       	cpi	r24, 0x6C	; 108
 202:	11 f4       	brne	.+4      	; 0x208 <vfprintf+0x10e>
 204:	10 68       	ori	r17, 0x80	; 128
 206:	02 c0       	rjmp	.+4      	; 0x20c <vfprintf+0x112>
 208:	88 36       	cpi	r24, 0x68	; 104
 20a:	51 f4       	brne	.+20     	; 0x220 <vfprintf+0x126>
 20c:	f3 01       	movw	r30, r6
 20e:	84 91       	lpm	r24, Z
 210:	87 fc       	sbrc	r8, 7
 212:	80 81       	ld	r24, Z
 214:	ff ef       	ldi	r31, 0xFF	; 255
 216:	6f 1a       	sub	r6, r31
 218:	7f 0a       	sbc	r7, r31
 21a:	8f 0a       	sbc	r8, r31
 21c:	81 11       	cpse	r24, r1
 21e:	bf cf       	rjmp	.-130    	; 0x19e <vfprintf+0xa4>
 220:	98 2f       	mov	r25, r24
 222:	9f 7d       	andi	r25, 0xDF	; 223
 224:	95 54       	subi	r25, 0x45	; 69
 226:	93 30       	cpi	r25, 0x03	; 3
 228:	28 f4       	brcc	.+10     	; 0x234 <vfprintf+0x13a>
 22a:	24 e0       	ldi	r18, 0x04	; 4
 22c:	e2 0e       	add	r14, r18
 22e:	f1 1c       	adc	r15, r1
 230:	99 82       	std	Y+1, r9	; 0x01
 232:	0f c0       	rjmp	.+30     	; 0x252 <vfprintf+0x158>
 234:	83 36       	cpi	r24, 0x63	; 99
 236:	31 f0       	breq	.+12     	; 0x244 <vfprintf+0x14a>
 238:	83 37       	cpi	r24, 0x73	; 115
 23a:	91 f0       	breq	.+36     	; 0x260 <vfprintf+0x166>
 23c:	83 35       	cpi	r24, 0x53	; 83
 23e:	09 f0       	breq	.+2      	; 0x242 <vfprintf+0x148>
 240:	63 c0       	rjmp	.+198    	; 0x308 <vfprintf+0x20e>
 242:	27 c0       	rjmp	.+78     	; 0x292 <vfprintf+0x198>
 244:	f7 01       	movw	r30, r14
 246:	80 81       	ld	r24, Z
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	97 01       	movw	r18, r14
 24c:	2e 5f       	subi	r18, 0xFE	; 254
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	79 01       	movw	r14, r18
 252:	28 88       	ldd	r2, Y+16	; 0x10
 254:	39 88       	ldd	r3, Y+17	; 0x11
 256:	4a 88       	ldd	r4, Y+18	; 0x12
 258:	aa 24       	eor	r10, r10
 25a:	a3 94       	inc	r10
 25c:	b1 2c       	mov	r11, r1
 25e:	17 c0       	rjmp	.+46     	; 0x28e <vfprintf+0x194>
 260:	a7 01       	movw	r20, r14
 262:	4d 5f       	subi	r20, 0xFD	; 253
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	5f 87       	std	Y+15, r21	; 0x0f
 268:	4e 87       	std	Y+14, r20	; 0x0e
 26a:	f7 01       	movw	r30, r14
 26c:	20 80       	ld	r2, Z
 26e:	31 80       	ldd	r3, Z+1	; 0x01
 270:	42 80       	ldd	r4, Z+2	; 0x02
 272:	16 ff       	sbrs	r17, 6
 274:	03 c0       	rjmp	.+6      	; 0x27c <vfprintf+0x182>
 276:	4b 2d       	mov	r20, r11
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <vfprintf+0x186>
 27c:	4f ef       	ldi	r20, 0xFF	; 255
 27e:	5f ef       	ldi	r21, 0xFF	; 255
 280:	84 2d       	mov	r24, r4
 282:	b1 01       	movw	r22, r2
 284:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <strnlen>
 288:	5c 01       	movw	r10, r24
 28a:	ee 84       	ldd	r14, Y+14	; 0x0e
 28c:	ff 84       	ldd	r15, Y+15	; 0x0f
 28e:	1f 77       	andi	r17, 0x7F	; 127
 290:	18 c0       	rjmp	.+48     	; 0x2c2 <vfprintf+0x1c8>
 292:	97 01       	movw	r18, r14
 294:	2d 5f       	subi	r18, 0xFD	; 253
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	3f 87       	std	Y+15, r19	; 0x0f
 29a:	2e 87       	std	Y+14, r18	; 0x0e
 29c:	f7 01       	movw	r30, r14
 29e:	20 80       	ld	r2, Z
 2a0:	31 80       	ldd	r3, Z+1	; 0x01
 2a2:	42 80       	ldd	r4, Z+2	; 0x02
 2a4:	16 ff       	sbrs	r17, 6
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <vfprintf+0x1b4>
 2a8:	4b 2d       	mov	r20, r11
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <vfprintf+0x1b8>
 2ae:	4f ef       	ldi	r20, 0xFF	; 255
 2b0:	5f ef       	ldi	r21, 0xFF	; 255
 2b2:	84 2d       	mov	r24, r4
 2b4:	b1 01       	movw	r22, r2
 2b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <strnlen>
 2ba:	5c 01       	movw	r10, r24
 2bc:	10 68       	ori	r17, 0x80	; 128
 2be:	ee 84       	ldd	r14, Y+14	; 0x0e
 2c0:	ff 84       	ldd	r15, Y+15	; 0x0f
 2c2:	13 fd       	sbrc	r17, 3
 2c4:	1d c0       	rjmp	.+58     	; 0x300 <vfprintf+0x206>
 2c6:	80 2f       	mov	r24, r16
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	a8 16       	cp	r10, r24
 2cc:	b9 06       	cpc	r11, r25
 2ce:	c0 f4       	brcc	.+48     	; 0x300 <vfprintf+0x206>
 2d0:	b6 01       	movw	r22, r12
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 2da:	01 50       	subi	r16, 0x01	; 1
 2dc:	f4 cf       	rjmp	.-24     	; 0x2c6 <vfprintf+0x1cc>
 2de:	f1 01       	movw	r30, r2
 2e0:	84 91       	lpm	r24, Z
 2e2:	47 fc       	sbrc	r4, 7
 2e4:	80 81       	ld	r24, Z
 2e6:	ff ef       	ldi	r31, 0xFF	; 255
 2e8:	2f 1a       	sub	r2, r31
 2ea:	3f 0a       	sbc	r3, r31
 2ec:	4f 0a       	sbc	r4, r31
 2ee:	b6 01       	movw	r22, r12
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 2f6:	01 11       	cpse	r16, r1
 2f8:	01 50       	subi	r16, 0x01	; 1
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	a2 1a       	sub	r10, r18
 2fe:	b1 08       	sbc	r11, r1
 300:	a1 14       	cp	r10, r1
 302:	b1 04       	cpc	r11, r1
 304:	61 f7       	brne	.-40     	; 0x2de <vfprintf+0x1e4>
 306:	f5 c0       	rjmp	.+490    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 308:	84 36       	cpi	r24, 0x64	; 100
 30a:	11 f0       	breq	.+4      	; 0x310 <vfprintf+0x216>
 30c:	89 36       	cpi	r24, 0x69	; 105
 30e:	71 f5       	brne	.+92     	; 0x36c <vfprintf+0x272>
 310:	f7 01       	movw	r30, r14
 312:	17 ff       	sbrs	r17, 7
 314:	08 c0       	rjmp	.+16     	; 0x326 <vfprintf+0x22c>
 316:	60 81       	ld	r22, Z
 318:	71 81       	ldd	r23, Z+1	; 0x01
 31a:	82 81       	ldd	r24, Z+2	; 0x02
 31c:	93 81       	ldd	r25, Z+3	; 0x03
 31e:	97 01       	movw	r18, r14
 320:	2c 5f       	subi	r18, 0xFC	; 252
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	09 c0       	rjmp	.+18     	; 0x338 <vfprintf+0x23e>
 326:	60 81       	ld	r22, Z
 328:	71 81       	ldd	r23, Z+1	; 0x01
 32a:	07 2e       	mov	r0, r23
 32c:	00 0c       	add	r0, r0
 32e:	88 0b       	sbc	r24, r24
 330:	99 0b       	sbc	r25, r25
 332:	97 01       	movw	r18, r14
 334:	2e 5f       	subi	r18, 0xFE	; 254
 336:	3f 4f       	sbci	r19, 0xFF	; 255
 338:	79 01       	movw	r14, r18
 33a:	1f 76       	andi	r17, 0x6F	; 111
 33c:	31 2e       	mov	r3, r17
 33e:	97 ff       	sbrs	r25, 7
 340:	0a c0       	rjmp	.+20     	; 0x356 <vfprintf+0x25c>
 342:	90 95       	com	r25
 344:	80 95       	com	r24
 346:	70 95       	com	r23
 348:	61 95       	neg	r22
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	8f 4f       	sbci	r24, 0xFF	; 255
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	31 2f       	mov	r19, r17
 352:	30 68       	ori	r19, 0x80	; 128
 354:	33 2e       	mov	r3, r19
 356:	2a e0       	ldi	r18, 0x0A	; 10
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	ae 01       	movw	r20, r28
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	0e 94 04 03 	call	0x608	; 0x608 <__ultoa_invert>
 364:	48 2e       	mov	r4, r24
 366:	4c 85       	ldd	r20, Y+12	; 0x0c
 368:	44 1a       	sub	r4, r20
 36a:	4a c0       	rjmp	.+148    	; 0x400 <__LOCK_REGION_LENGTH__>
 36c:	85 37       	cpi	r24, 0x75	; 117
 36e:	29 f4       	brne	.+10     	; 0x37a <vfprintf+0x280>
 370:	1f 7e       	andi	r17, 0xEF	; 239
 372:	a1 2e       	mov	r10, r17
 374:	2a e0       	ldi	r18, 0x0A	; 10
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	25 c0       	rjmp	.+74     	; 0x3c4 <vfprintf+0x2ca>
 37a:	51 2f       	mov	r21, r17
 37c:	59 7f       	andi	r21, 0xF9	; 249
 37e:	a5 2e       	mov	r10, r21
 380:	8f 36       	cpi	r24, 0x6F	; 111
 382:	c1 f0       	breq	.+48     	; 0x3b4 <vfprintf+0x2ba>
 384:	18 f4       	brcc	.+6      	; 0x38c <vfprintf+0x292>
 386:	88 35       	cpi	r24, 0x58	; 88
 388:	79 f0       	breq	.+30     	; 0x3a8 <vfprintf+0x2ae>
 38a:	bd c0       	rjmp	.+378    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 38c:	80 37       	cpi	r24, 0x70	; 112
 38e:	19 f0       	breq	.+6      	; 0x396 <vfprintf+0x29c>
 390:	88 37       	cpi	r24, 0x78	; 120
 392:	21 f0       	breq	.+8      	; 0x39c <vfprintf+0x2a2>
 394:	b8 c0       	rjmp	.+368    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 396:	85 2f       	mov	r24, r21
 398:	80 61       	ori	r24, 0x10	; 16
 39a:	a8 2e       	mov	r10, r24
 39c:	a4 fe       	sbrs	r10, 4
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <vfprintf+0x2c0>
 3a0:	9a 2d       	mov	r25, r10
 3a2:	94 60       	ori	r25, 0x04	; 4
 3a4:	a9 2e       	mov	r10, r25
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <vfprintf+0x2c0>
 3a8:	14 ff       	sbrs	r17, 4
 3aa:	0a c0       	rjmp	.+20     	; 0x3c0 <vfprintf+0x2c6>
 3ac:	a5 2f       	mov	r26, r21
 3ae:	a6 60       	ori	r26, 0x06	; 6
 3b0:	aa 2e       	mov	r10, r26
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <vfprintf+0x2c6>
 3b4:	28 e0       	ldi	r18, 0x08	; 8
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <vfprintf+0x2ca>
 3ba:	20 e1       	ldi	r18, 0x10	; 16
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <vfprintf+0x2ca>
 3c0:	20 e1       	ldi	r18, 0x10	; 16
 3c2:	32 e0       	ldi	r19, 0x02	; 2
 3c4:	f7 01       	movw	r30, r14
 3c6:	a7 fe       	sbrs	r10, 7
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <vfprintf+0x2e0>
 3ca:	60 81       	ld	r22, Z
 3cc:	71 81       	ldd	r23, Z+1	; 0x01
 3ce:	82 81       	ldd	r24, Z+2	; 0x02
 3d0:	93 81       	ldd	r25, Z+3	; 0x03
 3d2:	a7 01       	movw	r20, r14
 3d4:	4c 5f       	subi	r20, 0xFC	; 252
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <vfprintf+0x2ee>
 3da:	60 81       	ld	r22, Z
 3dc:	71 81       	ldd	r23, Z+1	; 0x01
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	a7 01       	movw	r20, r14
 3e4:	4e 5f       	subi	r20, 0xFE	; 254
 3e6:	5f 4f       	sbci	r21, 0xFF	; 255
 3e8:	7a 01       	movw	r14, r20
 3ea:	ae 01       	movw	r20, r28
 3ec:	4f 5f       	subi	r20, 0xFF	; 255
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	0e 94 04 03 	call	0x608	; 0x608 <__ultoa_invert>
 3f4:	48 2e       	mov	r4, r24
 3f6:	5c 85       	ldd	r21, Y+12	; 0x0c
 3f8:	45 1a       	sub	r4, r21
 3fa:	8a 2d       	mov	r24, r10
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	38 2e       	mov	r3, r24
 400:	36 fe       	sbrs	r3, 6
 402:	0d c0       	rjmp	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 404:	93 2d       	mov	r25, r3
 406:	9e 7f       	andi	r25, 0xFE	; 254
 408:	a9 2e       	mov	r10, r25
 40a:	4b 14       	cp	r4, r11
 40c:	58 f4       	brcc	.+22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40e:	34 fe       	sbrs	r3, 4
 410:	0b c0       	rjmp	.+22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 412:	32 fc       	sbrc	r3, 2
 414:	09 c0       	rjmp	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 416:	a3 2d       	mov	r26, r3
 418:	ae 7e       	andi	r26, 0xEE	; 238
 41a:	aa 2e       	mov	r10, r26
 41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41e:	14 2d       	mov	r17, r4
 420:	a3 2c       	mov	r10, r3
 422:	03 c0       	rjmp	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	14 2d       	mov	r17, r4
 426:	01 c0       	rjmp	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	1b 2d       	mov	r17, r11
 42a:	a4 fe       	sbrs	r10, 4
 42c:	0e c0       	rjmp	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42e:	fe 01       	movw	r30, r28
 430:	e4 0d       	add	r30, r4
 432:	f1 1d       	adc	r31, r1
 434:	80 81       	ld	r24, Z
 436:	80 33       	cpi	r24, 0x30	; 48
 438:	21 f4       	brne	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43a:	ea 2d       	mov	r30, r10
 43c:	e9 7e       	andi	r30, 0xE9	; 233
 43e:	ae 2e       	mov	r10, r30
 440:	08 c0       	rjmp	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 442:	a2 fe       	sbrs	r10, 2
 444:	05 c0       	rjmp	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 446:	1e 5f       	subi	r17, 0xFE	; 254
 448:	04 c0       	rjmp	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	8a 2d       	mov	r24, r10
 44c:	86 78       	andi	r24, 0x86	; 134
 44e:	09 f0       	breq	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	1f 5f       	subi	r17, 0xFF	; 255
 452:	a3 fc       	sbrc	r10, 3
 454:	11 c0       	rjmp	.+34     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 456:	a0 fe       	sbrs	r10, 0
 458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45a:	10 17       	cp	r17, r16
 45c:	88 f4       	brcc	.+34     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 45e:	04 0d       	add	r16, r4
 460:	b0 2e       	mov	r11, r16
 462:	b1 1a       	sub	r11, r17
 464:	0e c0       	rjmp	.+28     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 466:	10 17       	cp	r17, r16
 468:	60 f4       	brcc	.+24     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 46a:	b6 01       	movw	r22, r12
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 474:	1f 5f       	subi	r17, 0xFF	; 255
 476:	f7 cf       	rjmp	.-18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 478:	10 17       	cp	r17, r16
 47a:	18 f4       	brcc	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47c:	01 1b       	sub	r16, r17
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	b4 2c       	mov	r11, r4
 482:	00 e0       	ldi	r16, 0x00	; 0
 484:	a4 fe       	sbrs	r10, 4
 486:	10 c0       	rjmp	.+32     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 488:	b6 01       	movw	r22, r12
 48a:	80 e3       	ldi	r24, 0x30	; 48
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 492:	a2 fe       	sbrs	r10, 2
 494:	17 c0       	rjmp	.+46     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 496:	a1 fc       	sbrc	r10, 1
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49a:	88 e7       	ldi	r24, 0x78	; 120
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	88 e5       	ldi	r24, 0x58	; 88
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	b6 01       	movw	r22, r12
 4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4a8:	8a 2d       	mov	r24, r10
 4aa:	86 78       	andi	r24, 0x86	; 134
 4ac:	59 f0       	breq	.+22     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4ae:	a1 fe       	sbrs	r10, 1
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b2:	8b e2       	ldi	r24, 0x2B	; 43
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	a7 fc       	sbrc	r10, 7
 4ba:	8d e2       	ldi	r24, 0x2D	; 45
 4bc:	b6 01       	movw	r22, r12
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 4c4:	4b 14       	cp	r4, r11
 4c6:	38 f4       	brcc	.+14     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c8:	b6 01       	movw	r22, r12
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 4d2:	ba 94       	dec	r11
 4d4:	f7 cf       	rjmp	.-18     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4d6:	4a 94       	dec	r4
 4d8:	e1 e0       	ldi	r30, 0x01	; 1
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	ec 0f       	add	r30, r28
 4de:	fd 1f       	adc	r31, r29
 4e0:	e4 0d       	add	r30, r4
 4e2:	f1 1d       	adc	r31, r1
 4e4:	80 81       	ld	r24, Z
 4e6:	b6 01       	movw	r22, r12
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 4ee:	41 10       	cpse	r4, r1
 4f0:	f2 cf       	rjmp	.-28     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4f2:	00 23       	and	r16, r16
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f6:	30 ce       	rjmp	.-928    	; 0x158 <vfprintf+0x5e>
 4f8:	b6 01       	movw	r22, r12
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <fputc>
 502:	01 50       	subi	r16, 0x01	; 1
 504:	f6 cf       	rjmp	.-20     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 506:	f6 01       	movw	r30, r12
 508:	87 81       	ldd	r24, Z+7	; 0x07
 50a:	90 85       	ldd	r25, Z+8	; 0x08
 50c:	02 c0       	rjmp	.+4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	9f ef       	ldi	r25, 0xFF	; 255
 512:	62 96       	adiw	r28, 0x12	; 18
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	7f 90       	pop	r7
 538:	6f 90       	pop	r6
 53a:	4f 90       	pop	r4
 53c:	3f 90       	pop	r3
 53e:	2f 90       	pop	r2
 540:	08 95       	ret

Disassembly of section .text.avrlibc:

00000df8 <strnlen>:
 df8:	cf 92       	push	r12
 dfa:	df 92       	push	r13
 dfc:	ef 92       	push	r14
 dfe:	6b 01       	movw	r12, r22
 e00:	e8 2e       	mov	r14, r24
 e02:	a8 2f       	mov	r26, r24
 e04:	cb 01       	movw	r24, r22
 e06:	41 15       	cp	r20, r1
 e08:	51 05       	cpc	r21, r1
 e0a:	31 f4       	brne	.+12     	; 0xe18 <strnlen+0x20>
 e0c:	8c 19       	sub	r24, r12
 e0e:	9d 09       	sbc	r25, r13
 e10:	ef 90       	pop	r14
 e12:	df 90       	pop	r13
 e14:	cf 90       	pop	r12
 e16:	08 95       	ret
 e18:	fc 01       	movw	r30, r24
 e1a:	24 91       	lpm	r18, Z
 e1c:	a7 fd       	sbrc	r26, 7
 e1e:	20 81       	ld	r18, Z
 e20:	22 23       	and	r18, r18
 e22:	a1 f3       	breq	.-24     	; 0xe0c <strnlen+0x14>
 e24:	01 96       	adiw	r24, 0x01	; 1
 e26:	a1 1d       	adc	r26, r1
 e28:	41 50       	subi	r20, 0x01	; 1
 e2a:	51 09       	sbc	r21, r1
 e2c:	ec cf       	rjmp	.-40     	; 0xe06 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000007fa <fputc>:
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	fb 01       	movw	r30, r22
 804:	24 81       	ldd	r18, Z+4	; 0x04
 806:	21 fd       	sbrc	r18, 1
 808:	03 c0       	rjmp	.+6      	; 0x810 <__EEPROM_REGION_LENGTH__+0x10>
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	9f ef       	ldi	r25, 0xFF	; 255
 80e:	2c c0       	rjmp	.+88     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 810:	22 ff       	sbrs	r18, 2
 812:	16 c0       	rjmp	.+44     	; 0x840 <__EEPROM_REGION_LENGTH__+0x40>
 814:	47 81       	ldd	r20, Z+7	; 0x07
 816:	50 85       	ldd	r21, Z+8	; 0x08
 818:	25 81       	ldd	r18, Z+5	; 0x05
 81a:	36 81       	ldd	r19, Z+6	; 0x06
 81c:	42 17       	cp	r20, r18
 81e:	53 07       	cpc	r21, r19
 820:	44 f4       	brge	.+16     	; 0x832 <__EEPROM_REGION_LENGTH__+0x32>
 822:	a0 81       	ld	r26, Z
 824:	b1 81       	ldd	r27, Z+1	; 0x01
 826:	9d 01       	movw	r18, r26
 828:	2f 5f       	subi	r18, 0xFF	; 255
 82a:	3f 4f       	sbci	r19, 0xFF	; 255
 82c:	31 83       	std	Z+1, r19	; 0x01
 82e:	20 83       	st	Z, r18
 830:	8c 93       	st	X, r24
 832:	27 81       	ldd	r18, Z+7	; 0x07
 834:	30 85       	ldd	r19, Z+8	; 0x08
 836:	2f 5f       	subi	r18, 0xFF	; 255
 838:	3f 4f       	sbci	r19, 0xFF	; 255
 83a:	30 87       	std	Z+8, r19	; 0x08
 83c:	27 83       	std	Z+7, r18	; 0x07
 83e:	14 c0       	rjmp	.+40     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 840:	8b 01       	movw	r16, r22
 842:	ec 01       	movw	r28, r24
 844:	fb 01       	movw	r30, r22
 846:	01 84       	ldd	r0, Z+9	; 0x09
 848:	f2 85       	ldd	r31, Z+10	; 0x0a
 84a:	e0 2d       	mov	r30, r0
 84c:	09 95       	icall
 84e:	89 2b       	or	r24, r25
 850:	e1 f6       	brne	.-72     	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 852:	d8 01       	movw	r26, r16
 854:	17 96       	adiw	r26, 0x07	; 7
 856:	8d 91       	ld	r24, X+
 858:	9c 91       	ld	r25, X
 85a:	18 97       	sbiw	r26, 0x08	; 8
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	18 96       	adiw	r26, 0x08	; 8
 860:	9c 93       	st	X, r25
 862:	8e 93       	st	-X, r24
 864:	17 97       	sbiw	r26, 0x07	; 7
 866:	ce 01       	movw	r24, r28
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	08 95       	ret

Disassembly of section .text.avrlibc:

00000608 <__ultoa_invert>:
 608:	fa 01       	movw	r30, r20
 60a:	aa 27       	eor	r26, r26
 60c:	28 30       	cpi	r18, 0x08	; 8
 60e:	51 f1       	breq	.+84     	; 0x664 <__ultoa_invert+0x5c>
 610:	20 31       	cpi	r18, 0x10	; 16
 612:	81 f1       	breq	.+96     	; 0x674 <__ultoa_invert+0x6c>
 614:	e8 94       	clt
 616:	6f 93       	push	r22
 618:	6e 7f       	andi	r22, 0xFE	; 254
 61a:	6e 5f       	subi	r22, 0xFE	; 254
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	af 4f       	sbci	r26, 0xFF	; 255
 624:	b1 e0       	ldi	r27, 0x01	; 1
 626:	3e d0       	rcall	.+124    	; 0x6a4 <__ultoa_invert+0x9c>
 628:	b4 e0       	ldi	r27, 0x04	; 4
 62a:	3c d0       	rcall	.+120    	; 0x6a4 <__ultoa_invert+0x9c>
 62c:	67 0f       	add	r22, r23
 62e:	78 1f       	adc	r23, r24
 630:	89 1f       	adc	r24, r25
 632:	9a 1f       	adc	r25, r26
 634:	a1 1d       	adc	r26, r1
 636:	68 0f       	add	r22, r24
 638:	79 1f       	adc	r23, r25
 63a:	8a 1f       	adc	r24, r26
 63c:	91 1d       	adc	r25, r1
 63e:	a1 1d       	adc	r26, r1
 640:	6a 0f       	add	r22, r26
 642:	71 1d       	adc	r23, r1
 644:	81 1d       	adc	r24, r1
 646:	91 1d       	adc	r25, r1
 648:	a1 1d       	adc	r26, r1
 64a:	20 d0       	rcall	.+64     	; 0x68c <__ultoa_invert+0x84>
 64c:	09 f4       	brne	.+2      	; 0x650 <__ultoa_invert+0x48>
 64e:	68 94       	set
 650:	3f 91       	pop	r19
 652:	2a e0       	ldi	r18, 0x0A	; 10
 654:	26 9f       	mul	r18, r22
 656:	11 24       	eor	r1, r1
 658:	30 19       	sub	r19, r0
 65a:	30 5d       	subi	r19, 0xD0	; 208
 65c:	31 93       	st	Z+, r19
 65e:	de f6       	brtc	.-74     	; 0x616 <__ultoa_invert+0xe>
 660:	cf 01       	movw	r24, r30
 662:	08 95       	ret
 664:	46 2f       	mov	r20, r22
 666:	47 70       	andi	r20, 0x07	; 7
 668:	40 5d       	subi	r20, 0xD0	; 208
 66a:	41 93       	st	Z+, r20
 66c:	b3 e0       	ldi	r27, 0x03	; 3
 66e:	0f d0       	rcall	.+30     	; 0x68e <__ultoa_invert+0x86>
 670:	c9 f7       	brne	.-14     	; 0x664 <__ultoa_invert+0x5c>
 672:	f6 cf       	rjmp	.-20     	; 0x660 <__ultoa_invert+0x58>
 674:	46 2f       	mov	r20, r22
 676:	4f 70       	andi	r20, 0x0F	; 15
 678:	40 5d       	subi	r20, 0xD0	; 208
 67a:	4a 33       	cpi	r20, 0x3A	; 58
 67c:	18 f0       	brcs	.+6      	; 0x684 <__ultoa_invert+0x7c>
 67e:	49 5d       	subi	r20, 0xD9	; 217
 680:	31 fd       	sbrc	r19, 1
 682:	40 52       	subi	r20, 0x20	; 32
 684:	41 93       	st	Z+, r20
 686:	02 d0       	rcall	.+4      	; 0x68c <__ultoa_invert+0x84>
 688:	a9 f7       	brne	.-22     	; 0x674 <__ultoa_invert+0x6c>
 68a:	ea cf       	rjmp	.-44     	; 0x660 <__ultoa_invert+0x58>
 68c:	b4 e0       	ldi	r27, 0x04	; 4
 68e:	a6 95       	lsr	r26
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	77 95       	ror	r23
 696:	67 95       	ror	r22
 698:	ba 95       	dec	r27
 69a:	c9 f7       	brne	.-14     	; 0x68e <__ultoa_invert+0x86>
 69c:	00 97       	sbiw	r24, 0x00	; 0
 69e:	61 05       	cpc	r22, r1
 6a0:	71 05       	cpc	r23, r1
 6a2:	08 95       	ret
 6a4:	9b 01       	movw	r18, r22
 6a6:	ac 01       	movw	r20, r24
 6a8:	0a 2e       	mov	r0, r26
 6aa:	06 94       	lsr	r0
 6ac:	57 95       	ror	r21
 6ae:	47 95       	ror	r20
 6b0:	37 95       	ror	r19
 6b2:	27 95       	ror	r18
 6b4:	ba 95       	dec	r27
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <__ultoa_invert+0xa2>
 6b8:	62 0f       	add	r22, r18
 6ba:	73 1f       	adc	r23, r19
 6bc:	84 1f       	adc	r24, r20
 6be:	95 1f       	adc	r25, r21
 6c0:	a0 1d       	adc	r26, r0
 6c2:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000d8a <__prologue_saves__>:
 d8a:	2f 92       	push	r2
 d8c:	3f 92       	push	r3
 d8e:	4f 92       	push	r4
 d90:	5f 92       	push	r5
 d92:	6f 92       	push	r6
 d94:	7f 92       	push	r7
 d96:	8f 92       	push	r8
 d98:	9f 92       	push	r9
 d9a:	af 92       	push	r10
 d9c:	bf 92       	push	r11
 d9e:	cf 92       	push	r12
 da0:	df 92       	push	r13
 da2:	ef 92       	push	r14
 da4:	ff 92       	push	r15
 da6:	0f 93       	push	r16
 da8:	1f 93       	push	r17
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	cd b7       	in	r28, 0x3d	; 61
 db0:	de b7       	in	r29, 0x3e	; 62
 db2:	ca 1b       	sub	r28, r26
 db4:	db 0b       	sbc	r29, r27
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	f8 94       	cli
 dba:	de bf       	out	0x3e, r29	; 62
 dbc:	0f be       	out	0x3f, r0	; 63
 dbe:	cd bf       	out	0x3d, r28	; 61
 dc0:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000e2e <__epilogue_restores__>:
 e2e:	2a 88       	ldd	r2, Y+18	; 0x12
 e30:	39 88       	ldd	r3, Y+17	; 0x11
 e32:	48 88       	ldd	r4, Y+16	; 0x10
 e34:	5f 84       	ldd	r5, Y+15	; 0x0f
 e36:	6e 84       	ldd	r6, Y+14	; 0x0e
 e38:	7d 84       	ldd	r7, Y+13	; 0x0d
 e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 e40:	b9 84       	ldd	r11, Y+9	; 0x09
 e42:	c8 84       	ldd	r12, Y+8	; 0x08
 e44:	df 80       	ldd	r13, Y+7	; 0x07
 e46:	ee 80       	ldd	r14, Y+6	; 0x06
 e48:	fd 80       	ldd	r15, Y+5	; 0x05
 e4a:	0c 81       	ldd	r16, Y+4	; 0x04
 e4c:	1b 81       	ldd	r17, Y+3	; 0x03
 e4e:	aa 81       	ldd	r26, Y+2	; 0x02
 e50:	b9 81       	ldd	r27, Y+1	; 0x01
 e52:	ce 0f       	add	r28, r30
 e54:	d1 1d       	adc	r29, r1
 e56:	0f b6       	in	r0, 0x3f	; 63
 e58:	f8 94       	cli
 e5a:	de bf       	out	0x3e, r29	; 62
 e5c:	0f be       	out	0x3f, r0	; 63
 e5e:	cd bf       	out	0x3d, r28	; 61
 e60:	ed 01       	movw	r28, r26
 e62:	08 95       	ret
